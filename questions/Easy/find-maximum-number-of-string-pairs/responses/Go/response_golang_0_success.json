{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2944000,
    "question_id": "2847",
    "elapsed_time": 16,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706260249670,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 659,
    "total_testcases": 659,
    "runtime_percentile": 100,
    "status_memory": "2.9 MB",
    "memory_percentile": 49.5727,
    "pretty_lang": "Go",
    "submission_id": "1157248887",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func maximumNumberOfStringPairs(words []string) int {\n    reverseMap := make(map[string]int)\n    count := 0\n\n    for _, word := range words {\n        reversed := reverseString(word)\n        if _, exists := reverseMap[reversed]; exists {\n            count++\n            delete(reverseMap, reversed)\n        } else {\n            reverseMap[word] = 1\n        }\n    }\n\n    return count\n}\n\nfunc reverseString(s string) string {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return string(runes)\n}"
}