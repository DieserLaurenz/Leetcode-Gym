{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2080000,
    "question_id": "2847",
    "elapsed_time": 17,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706263792414,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 659,
    "total_testcases": 659,
    "runtime_percentile": 100,
    "status_memory": "2.1 MB",
    "memory_percentile": 92.3077,
    "pretty_lang": "Rust",
    "submission_id": "1157285682",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn maximum_number_of_string_pairs(words: Vec<String>) -> i32 {\n        let mut counts = HashMap::new();\n        let mut pairs = 0;\n\n        for word in words {\n            let reversed: String = word.chars().rev().collect();\n            if let Some(count) = counts.get_mut(&reversed) {\n                if *count > 0 {\n                    *count -= 1;\n                    pairs += 1;\n                    continue;\n                }\n            }\n            *counts.entry(word).or_insert(0) += 1;\n        }\n\n        pairs\n    }\n}"
}