{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72600000,
    "question_id": "2847",
    "elapsed_time": 531,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "expected_output": "2",
    "task_finish_time": 1706266223515,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 152,
    "total_testcases": 659,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1157310826",
    "input_formatted": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "input": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_number_of_string_pairs(words :: [String.t]) :: integer\n  def maximum_number_of_string_pairs(words) do\n    reversed_words = Enum.map(words, &String.reverse/1)\n    count_pairs(words, reversed_words, 0)\n  end\n\n  defp count_pairs([], _, count), do: count\n  defp count_pairs([h | t], reversed_words, count) do\n    if h in reversed_words do\n      updated_reversed_words = List.delete(reversed_words, h)\n      count_pairs(t, updated_reversed_words, count + 1)\n    else\n      count_pairs(t, reversed_words, count)\n    end\n  end\nend"
}