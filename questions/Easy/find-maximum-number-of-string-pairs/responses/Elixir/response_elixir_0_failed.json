{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 9: ** (BadMapError) expected a map, got: [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"]",
    "full_runtime_error": "Line 9: ** (BadMapError) expected a map, got: [\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"]\n    (elixir 1.15.7) lib/map.ex:535: Map.get([\"cd\", \"ac\", \"dc\", \"ca\", \"zz\"], \"ac\", 0)\n    solution.ex:9: anonymous fn/3 in Solution.maximum_number_of_string_pairs/1\n    (stdlib 5.1.1) maps.erl:416: :maps.fold_1/4\n    solution.ex:32: Driver.consume_test_cases/2\n    solution.ex:20: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 72812000,
    "question_id": "2847",
    "elapsed_time": 335,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "expected_output": "2",
    "task_finish_time": 1706266162875,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 659,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1157310188",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_number_of_string_pairs(words :: [String.t]) :: integer\n  def maximum_number_of_string_pairs(words) do\n    words\n    |> Enum.reduce(%{}, fn word, acc ->\n      Map.update(acc, String.reverse(word), 1, &(&1 + 1))\n    end)\n    |> Enum.reduce(0, fn {word, count}, acc ->\n      if Map.get(words, word, 0) > 0 and word != String.reverse(word) do\n        acc + div(count, 2)\n      else\n        acc\n      end\n    end)\n  end\nend"
}