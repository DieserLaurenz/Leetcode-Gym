{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72420000,
    "question_id": "2847",
    "elapsed_time": 464,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "expected_output": "2",
    "task_finish_time": 1706266277891,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 659,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1157311416",
    "input_formatted": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "input": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_number_of_string_pairs(words :: [String.t]) :: integer\n  def maximum_number_of_string_pairs(words) do\n    reversed_map = create_reversed_map(words)\n\n    Enum.reduce(words, 0, fn word, acc ->\n      reversed_word = String.reverse(word)\n      if Map.has_key?(reversed_map, reversed_word) and Map.get(reversed_map, reversed_word) > 0 do\n        new_map = Map.update!(reversed_map, reversed_word, &(&1 - 1))\n        acc + 1\n      else\n        acc\n      end\n    end) \n  end\n\n  defp create_reversed_map(words) do\n    Enum.reduce(words, %{}, fn word, acc ->\n      Map.update(acc, String.reverse(word), 1, &(&1 + 1))\n    end)\n  end\nend"
}