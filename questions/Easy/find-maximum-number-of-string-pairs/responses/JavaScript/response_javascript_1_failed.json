{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51828000,
    "question_id": "2847",
    "elapsed_time": 157,
    "compare_result
    "code_output": "4",
    "std_output": "4\n2\n0\n",
    "last_testcase": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "expected_output": "2",
    "task_finish_time": 1706256171150,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 185,
    "total_testcases": 659,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1157206120",
    "input_formatted": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "input": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar maximumNumberOfStringPairs = function(words) {\n    let wordMap = {};\n    let pairs = 0;\n\n    // Creating a map with the reversed word as key and original word as value\n    words.forEach(word => {\n        let reversed = word.split('').reverse().join('');\n        wordMap[reversed] = word;\n    });\n\n    // Iterating through each word to find its reversed counterpart\n    words.forEach(word => {\n        if (wordMap[word] && word !== wordMap[word]) {\n            pairs++;\n            // Remove the paired words from the map to avoid double counting\n            delete wordMap[word];\n            delete wordMap[wordMap[word]];\n        }\n    });\n\n    return pairs;\n};\n\n// Example usage\nconsole.log(maximumNumberOfStringPairs([\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"])); // Output: 2\nconsole.log(maximumNumberOfStringPairs([\"ab\",\"ba\",\"cc\"])); // Output: 1\nconsole.log(maximumNumberOfStringPairs([\"aa\",\"ab\"])); // Output: 0"
}