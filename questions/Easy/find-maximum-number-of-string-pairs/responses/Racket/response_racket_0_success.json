{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "181 ms",
    "memory": 100544000,
    "question_id": "2847",
    "elapsed_time": 273,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706264271211,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 659,
    "total_testcases": 659,
    "runtime_percentile": 100,
    "status_memory": "100.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1157290871",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-number-of-string-pairs words)\n  (-> (listof string?) exact-integer?)\n  \n  (let ([word-hash (make-hash)]\n        [pair-count 0])\n    (for ([word words])\n      (let ([reversed-word (list->string (reverse (string->list word)))])\n        (if (hash-ref word-hash reversed-word #f)\n            (begin\n              (set! pair-count (+ pair-count 1))\n              (hash-remove! word-hash reversed-word))\n            (hash-set! word-hash word #t))))\n    pair-count))"
}