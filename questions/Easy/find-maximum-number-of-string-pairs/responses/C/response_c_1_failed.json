{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6524000,
    "question_id": "2847",
    "elapsed_time": 16,
    "compare_result": "11111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111011111111111111111111110101111111011101101111111101111101111110011110101101110111111100110110010000100001101110011101101011111000111101000011",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[\"dr\",\"gt\",\"dn\",\"sa\",\"ww\",\"rd\",\"tg\",\"nd\",\"as\",\"yr\"]",
    "expected_output": "4",
    "task_finish_time": 1706253947637,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 612,
    "total_testcases": 659,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1157180837",
    "input_formatted": "[\"dr\",\"gt\",\"dn\",\"sa\",\"ww\",\"rd\",\"tg\",\"nd\",\"as\",\"yr\"]",
    "input": "[\"dr\",\"gt\",\"dn\",\"sa\",\"ww\",\"rd\",\"tg\",\"nd\",\"as\",\"yr\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\n#define HASH_TABLE_SIZE 101  // A prime number for hash table size\n\ntypedef struct HashTableEntry {\n    char *key;\n    bool exists;\n} HashTableEntry;\n\nunsigned int hash(char *str) {\n    unsigned long hash = 5381;\n    int c;\n    while ((c = *str++)) {\n        hash = ((hash << 5) + hash) + c; /* hash * 33 + c */\n    }\n    return hash % HASH_TABLE_SIZE;\n}\n\nvoid insertHashTable(HashTableEntry *table, char *key) {\n    unsigned int index = hash(key);\n    while (table[index].exists) {\n        if (strcmp(table[index].key, key) == 0) {\n            // String already exists in the table\n            return;\n        }\n        index = (index + 1) % HASH_TABLE_SIZE;\n    }\n    table[index].key = key;\n    table[index].exists = true;\n}\n\nbool findAndRemove(HashTableEntry *table, char *key) {\n    unsigned int index = hash(key);\n    while (table[index].exists) {\n        if (strcmp(table[index].key, key) == 0) {\n            table[index].exists = false;  // Mark as removed\n            return true;\n        }\n        index = (index + 1) % HASH_TABLE_SIZE;\n    }\n    return false;\n}\n\nchar *reverseString(const char *s) {\n    int length = strlen(s);\n    char *rev = (char *)malloc(length + 1);\n    for (int i = 0; i < length; i++) {\n        rev[i] = s[length - 1 - i];\n    }\n    rev[length] = '\\0';\n    return rev;\n}\n\nint maximumNumberOfStringPairs(char **words, int wordsSize) {\n    HashTableEntry hashTable[HASH_TABLE_SIZE] = {0};\n    int pairsCount = 0;\n\n    for (int i = 0; i < wordsSize; i++) {\n        char *reversed = reverseString(words[i]);\n        if (findAndRemove(hashTable, reversed)) {\n            pairsCount++;\n        } else {\n            insertHashTable(hashTable, words[i]);\n        }\n        free(reversed);\n    }\n\n    return pairsCount;\n}"
}