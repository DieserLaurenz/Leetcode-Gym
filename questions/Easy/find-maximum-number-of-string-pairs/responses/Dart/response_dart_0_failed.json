{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 157396000,
    "question_id": "2847",
    "elapsed_time": 571,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[\"ff\",\"tx\",\"qr\",\"zw\",\"wr\",\"jr\",\"zt\",\"jk\",\"sq\",\"xx\"]",
    "expected_output": "0",
    "task_finish_time": 1706259170425,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 614,
    "total_testcases": 659,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1157237846",
    "input_formatted": "[\"ff\",\"tx\",\"qr\",\"zw\",\"wr\",\"jr\",\"zt\",\"jk\",\"sq\",\"xx\"]",
    "input": "[\"ff\",\"tx\",\"qr\",\"zw\",\"wr\",\"jr\",\"zt\",\"jk\",\"sq\",\"xx\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maximumNumberOfStringPairs(List<String> words) {\n    Map<String, int> reverseCount = {};\n    int pairs = 0;\n\n    // Count the occurrences of each word's reverse\n    for (var word in words) {\n      var reversed = word.split('').reversed.join();\n      reverseCount[reversed] = (reverseCount[reversed] ?? 0) + 1;\n    }\n\n    // Check each word for a possible pair\n    for (var word in words) {\n      if (reverseCount[word] != null && reverseCount[word]! > 0) {\n        pairs++;\n        reverseCount[word] = reverseCount[word]! - 1; // Decrement the count of the reverse word\n      }\n    }\n\n    // Divide by 2 because each pair is counted twice\n    return pairs ~/ 2;\n  }\n}"
}