{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "400 ms",
    "memory": 154628000,
    "question_id": "2847",
    "elapsed_time": 648,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706259768158,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 659,
    "total_testcases": 659,
    "runtime_percentile": 30.23210000000005,
    "status_memory": "154.6 MB",
    "memory_percentile": 6.976200000000032,
    "pretty_lang": "Dart",
    "submission_id": "1157244081",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maximumNumberOfStringPairs(List<String> words) {\n    Map<String, int> wordCount = {};\n    int pairs = 0;\n\n    // Count the occurrences of each word\n    for (var word in words) {\n      wordCount[word] = (wordCount[word] ?? 0) + 1;\n    }\n\n    // Check each word for a possible pair\n    for (var word in words) {\n      var reversed = word.split('').reversed.join();\n\n      if (wordCount[reversed] != null && wordCount[reversed]! > 0) {\n        // If the word is its own reverse, ensure there are at least two occurrences\n        if (word == reversed && wordCount[word]! < 2) {\n          continue;\n        }\n        pairs++;\n        wordCount[reversed] = wordCount[reversed]! - 1; // Decrement the count\n      }\n    }\n\n    // Divide by 2 because each pair is counted twice\n    return pairs ~/ 2;\n  }\n}"
}