{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "71 ms",
    "memory": 43684000,
    "question_id": "2847",
    "elapsed_time": 144,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706255091675,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 659,
    "total_testcases": 659,
    "runtime_percentile": 45.454400000000035,
    "status_memory": "43.7 MB",
    "memory_percentile": 35.22690000000002,
    "pretty_lang": "C#",
    "submission_id": "1157194207",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "using System;\nusing System.Collections.Generic;\n\npublic class Solution {\n    public int MaximumNumberOfStringPairs(string[] words) {\n        var reverseCount = new Dictionary<string, int>();\n        int pairCount = 0;\n\n        foreach (var word in words) {\n            string reversed = new string(word.Reverse().ToArray());\n            \n            if (reverseCount.ContainsKey(reversed)) {\n                pairCount++;\n                reverseCount[reversed]--;\n                if (reverseCount[reversed] == 0) {\n                    reverseCount.Remove(reversed);\n                }\n            } else {\n                if (!reverseCount.ContainsKey(word)) {\n                    reverseCount[word] = 0;\n                }\n                reverseCount[word]++;\n            }\n        }\n\n        return pairCount;\n    }\n}"
}