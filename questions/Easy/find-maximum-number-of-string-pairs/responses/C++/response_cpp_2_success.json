{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "12 ms",
    "memory": 26416000,
    "question_id": "2847",
    "elapsed_time": 28,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706252331092,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 659,
    "total_testcases": 659,
    "runtime_percentile": 35.2369,
    "status_memory": "26.4 MB",
    "memory_percentile": 5.450799999999988,
    "pretty_lang": "C++",
    "submission_id": "1157160993",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maximumNumberOfStringPairs(vector<string>& words) {\n        unordered_map<string, int> wordMap;\n        int pairs = 0;\n\n        for (const string& word : words) {\n            string reversedWord = word;\n            reverse(reversedWord.begin(), reversedWord.end());\n\n            // Check if the reversed word is in the map\n            if (wordMap[reversedWord] > 0) {\n                pairs++;\n                wordMap[reversedWord]--; // Decrement the count of the reversed word\n            } else {\n                wordMap[word]++; // Increment the count of the current word\n            }\n        }\n\n        return pairs;\n    }\n};"
}