{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26312000,
    "question_id": "2847",
    "elapsed_time": 59,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[\"ff\",\"tx\",\"qr\",\"zw\",\"wr\",\"jr\",\"zt\",\"jk\",\"sq\",\"xx\"]",
    "expected_output": "0",
    "task_finish_time": 1706251698438,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 614,
    "total_testcases": 659,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1157152751",
    "input_formatted": "[\"ff\",\"tx\",\"qr\",\"zw\",\"wr\",\"jr\",\"zt\",\"jk\",\"sq\",\"xx\"]",
    "input": "[\"ff\",\"tx\",\"qr\",\"zw\",\"wr\",\"jr\",\"zt\",\"jk\",\"sq\",\"xx\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maximumNumberOfStringPairs(vector<string>& words) {\n        unordered_map<string, int> reversedWords;\n        int pairs = 0;\n\n        // Count the occurrences of each reversed word\n        for (const string& word : words) {\n            string reversedWord = word;\n            reverse(reversedWord.begin(), reversedWord.end());\n            reversedWords[reversedWord]++;\n        }\n\n        // Find pairs\n        for (const string& word : words) {\n            if (reversedWords[word] > 0) {\n                pairs++;\n                reversedWords[word]--;\n            }\n        }\n\n        return pairs / 2; // each pair is counted twice\n    }\n};"
}