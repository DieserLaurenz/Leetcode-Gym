{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 15: exception error: {badarity,{#Fun<solution.0.68306875>,",
    "full_runtime_error": "Line 15: exception error: {badarity,{#Fun<solution.0.68306875>,\n                            [#Fun<solution.0.68306875>,\n                             [<<\"cd\">>,<<\"ac\">>,<<\"dc\">>,<<\"ca\">>,<<\"zz\">>],\n                             0]}}\n[{solution,maximum_number_of_string_pairs,1,\n              [{file,\"solution.erl\"},{line,15}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,19}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,48}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59324000,
    "question_id": "2847",
    "elapsed_time": 1582,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"cd\",\"ac\",\"dc\",\"ca\",\"zz\"]",
    "expected_output": "2",
    "task_finish_time": 1706265954133,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 659,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1157307952",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_number_of_string_pairs(Words :: [unicode:unicode_binary()]) -> integer().\nmaximum_number_of_string_pairs(Words) ->\n    CountPairs = fun CountPairsFun([], Count) -> \n                        Count;\n                    CountPairsFun([Word|Rest], Count) ->\n                        ReversedWord = lists:reverse(binary_to_list(Word)),\n                        case lists:member(ReversedWord, Rest) of\n                            true ->\n                                FilteredRest = lists:delete(ReversedWord, Rest),\n                                CountPairsFun(FilteredRest, Count + 1);\n                            false ->\n                                CountPairsFun(Rest, Count)\n                        end\n                end,\n    CountPairs(CountPairs, Words, 0)."
}