{
    "acRate": 56.70501639141461,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2946",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Matrix Similarity After Cyclic Shifts",
    "titleSlug": "matrix-similarity-after-cyclic-shifts",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Matrix",
            "id": "VG9waWNUYWdOb2RlOjYxMDUz",
            "slug": "matrix"
        },
        {
            "name": "Simulation",
            "id": "VG9waWNUYWdOb2RlOjYxMDU1",
            "slug": "simulation"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "code": "class Solution { public:     bool areSimilar(vector<vector<int>>& mat, int k) {              } };"
        },
        {
            "code": "class Solution {     public boolean areSimilar(int[][] mat, int k) {              } }"
        },
        {
            "code": "class Solution(object):     def areSimilar(self, mat, k):         \"\"\"         :type mat: List[List[int]]         :type k: int         :rtype: bool         \"\"\"         "
        },
        {
            "code": "class Solution:     def areSimilar(self, mat: List[List[int]], k: int) -> bool:         "
        },
        {
            "code": "bool areSimilar(int** mat, int matSize, int* matColSize, int k) {      }"
        },
        {
            "code": "public class Solution {     public bool AreSimilar(int[][] mat, int k) {              } }"
        },
        {
            "code": "/**  * @param {number[][]} mat  * @param {number} k  * @return {boolean}  */ var areSimilar = function(mat, k) {      };"
        },
        {
            "code": "function areSimilar(mat: number[][], k: number): boolean {      };"
        },
        {
            "code": "class Solution {      /**      * @param Integer[][] $mat      * @param Integer $k      * @return Boolean      */     function areSimilar($mat, $k) {              } }"
        },
        {
            "code": "class Solution {     func areSimilar(_ mat: [[Int]], _ k: Int) -> Bool {              } }"
        },
        {
            "code": "class Solution {     fun areSimilar(mat: Array<IntArray>, k: Int): Boolean {              } }"
        },
        {
            "code": "class Solution {   bool areSimilar(List<List<int>> mat, int k) {        } }"
        },
        {
            "code": "func areSimilar(mat [][]int, k int) bool {      }"
        },
        {
            "code": "# @param {Integer[][]} mat # @param {Integer} k # @return {Boolean} def are_similar(mat, k)      end"
        },
        {
            "code": "object Solution {     def areSimilar(mat: Array[Array[Int]], k: Int): Boolean = {              } }"
        },
        {
            "code": "impl Solution {     pub fn are_similar(mat: Vec<Vec<i32>>, k: i32) -> bool {              } }"
        },
        {
            "code": "(define/contract (are-similar mat k)   (-> (listof (listof exact-integer?)) exact-integer? boolean?)   )"
        },
        {
            "code": "-spec are_similar(Mat :: [[integer()]], K :: integer()) -> boolean(). are_similar(Mat, K) ->   ."
        },
        {
            "code": "defmodule Solution do   @spec are_similar(mat :: [[integer]], k :: integer) :: boolean   def are_similar(mat, k) do        end end"
        }
    ],
    "content": "You are given a 0-indexed m x n integer matrix mat and an integer k. You have to cyclically right shift odd indexed rows k times and cyclically left shift even indexed rows k times. Return true if the initial and final matrix are exactly the same and false otherwise.  Example 1:  Input: mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2 Output: true Explanation:   Initially, the matrix looks like the first figure.  Second figure represents the state of the matrix after one right and left cyclic shifts to even and odd indexed rows. Third figure is the final state of the matrix after two cyclic shifts which is similar to the initial matrix. Therefore, return true.  Example 2:  Input: mat = [[2,2],[2,2]], k = 3 Output: true Explanation: As all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same. Therefeore, we return true.  Example 3:  Input: mat = [[1,2]], k = 1 Output: false Explanation: After one cyclic shift, mat = [[2,1]] which is not equal to the initial matrix. Therefore we return false.   Constraints:  1 <= mat.length <= 25 1 <= mat[i].length <= 25 1 <= mat[i][j] <= 25 1 <= k <= 50  "
}