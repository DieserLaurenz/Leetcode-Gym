{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "6 ms",
    "memory": 5680000,
    "question_id": "3252",
    "elapsed_time": 20,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706471239661,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 615,
    "total_testcases": 615,
    "runtime_percentile": 78.0,
    "status_memory": "5.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "C",
    "submission_id": "1159486565",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int incremovableSubarrayCount(int* nums, int numsSize) {\n    int count = 0;\n    // Iterate through all possible subarray lengths\n    for (int len = 1; len <= numsSize; ++len) {\n        // Iterate through all possible starting points for the current subarray length\n        for (int start = 0; start <= numsSize - len; ++start) {\n            int prev = -1; // Initialize previous element to -1 (since nums contains positive integers)\n            bool isIncreasing = true;\n            // Check if removing the current subarray makes the rest of the array strictly increasing\n            for (int i = 0; i < numsSize; ++i) {\n                // Skip elements that are part of the current subarray\n                if (i >= start && i < start + len) continue;\n                // Check if the current element is greater than the previous\n                if (nums[i] <= prev) {\n                    isIncreasing = false;\n                    break;\n                }\n                prev = nums[i];\n            }\n            // If removing the subarray results in a strictly increasing sequence, increment the count\n            if (isIncreasing) count++;\n        }\n    }\n    return count;\n}"
}