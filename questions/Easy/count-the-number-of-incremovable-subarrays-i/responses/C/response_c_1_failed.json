{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5544000,
    "question_id": "3252",
    "elapsed_time": 28,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1706155189407,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 537,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1156129153",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int incremovableSubarrayCount(int* nums, int numsSize) {\n    int count = 0;\n\n    // Function to check if a segment of the array is strictly increasing\n    bool isStrictlyIncreasing(int start, int end) {\n        for (int i = start; i < end; i++) {\n            if (nums[i] >= nums[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Iterate through all subarrays\n    for (int start = 0; start <= numsSize; ++start) {\n        for (int end = start; end <= numsSize; ++end) {\n            // Check segments before and after the subarray\n            if (isStrictlyIncreasing(0, start - 1) &&\n                isStrictlyIncreasing(end, numsSize - 1) &&\n                (start == 0 || end == numsSize || nums[start - 1] < nums[end])) {\n                ++count;\n            }\n        }\n    }\n\n    return count;\n}"
}