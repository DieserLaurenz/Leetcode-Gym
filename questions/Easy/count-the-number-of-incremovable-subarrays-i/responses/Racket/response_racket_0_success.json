{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "294 ms",
    "memory": 126500000,
    "question_id": "3252",
    "elapsed_time": 375,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706165527672,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 615,
    "total_testcases": 615,
    "runtime_percentile": 100,
    "status_memory": "126.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1156253764",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (incremovable-subarray-count nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (is-strictly-increasing? lst)\n    (or (null? lst)\n        (null? (cdr lst))\n        (and (< (car lst) (cadr lst))\n             (is-strictly-increasing? (cdr lst)))))\n\n  (define (remove-subarray lst start end)\n    (append (take lst start) (drop lst (+ 1 end))))\n\n  (define (count-incremovable-subarrays lst)\n    (let ([n (length lst)])\n      (define (iter start end count)\n        (cond\n          [(>= start n) count]\n          [(>= end n) (iter (+ start 1) (+ start 1) count)]\n          [else\n           (let ([new-lst (remove-subarray lst start end)])\n             (iter start (+ end 1)\n                   (if (is-strictly-increasing? new-lst)\n                       (+ count 1)\n                       count)))]))\n      (iter 0 0 0)))\n\n  (count-incremovable-subarrays nums))"
}