{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15448000,
    "question_id": "3252",
    "elapsed_time": 45,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1706161911733,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 30,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1156206971",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func incremovableSubarrayCount(_ nums: [Int]) -> Int {\n        let n = nums.count\n        var totalSubarrays = (n * (n + 1)) / 2\n        var notStrictlyIncreasing = 0\n\n        var start = 0\n        while start < n {\n            var end = start\n            while end < n - 1 && nums[end] < nums[end + 1] {\n                end += 1\n            }\n            let length = end - start + 1\n            notStrictlyIncreasing += (length * (length - 1)) / 2\n            start = end + 1\n        }\n\n        return totalSubarrays - notStrictlyIncreasing\n    }\n}"
}