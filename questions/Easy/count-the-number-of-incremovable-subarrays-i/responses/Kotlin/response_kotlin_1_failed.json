{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40936000,
    "question_id": "3252",
    "elapsed_time": 244,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1706162993694,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 104,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1156220894",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun incremovableSubarrayCount(nums: IntArray): Int {\n        var count = 0\n        val n = nums.size\n\n        for (start in 0 until n) {\n            for (end in start until n) {\n                if (isIncremovable(nums, start, end)) {\n                    count++\n                }\n            }\n        }\n\n        return count\n    }\n\n    private fun isIncremovable(nums: IntArray, start: Int, end: Int): Boolean {\n        var prev = if (start > 0) nums[start - 1] else Int.MIN_VALUE\n\n        for (i in end + 1 until nums.size) {\n            if (nums[i] <= prev) {\n                return false\n            }\n            prev = nums[i]\n        }\n\n        return true\n    }\n}"
}