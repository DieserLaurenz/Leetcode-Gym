{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42952000,
    "display_runtime": "3",
    "question_id": "3252",
    "elapsed_time": 158,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1706153451990,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 10,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1156111281",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int incremovableSubarrayCount(int[] nums) {\n        int n = nums.length;\n        int count = 0;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                // Check if the subarray from i to j (inclusive) is incremovable\n                if (isIncremovable(nums, i, j)) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    private boolean isIncremovable(int[] nums, int start, int end) {\n        int prev = (start == 0) ? Integer.MIN_VALUE : nums[start - 1];\n        int next = (end == nums.length - 1) ? Integer.MAX_VALUE : nums[end + 1];\n\n        // Check if elements before the subarray are strictly increasing\n        for (int i = 0; i < start; i++) {\n            if (nums[i] >= prev) {\n                return false;\n            }\n            prev = nums[i];\n        }\n\n        // Check if elements after the subarray are strictly increasing\n        for (int i = end + 1; i < nums.length; i++) {\n            if (nums[i] <= next) {\n                return false;\n            }\n            next = nums[i];\n        }\n\n        return true;\n    }\n}"
}