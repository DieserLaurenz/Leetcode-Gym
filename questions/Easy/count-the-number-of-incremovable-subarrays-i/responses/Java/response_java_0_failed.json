{
    "status_code": 15,
    "lang": "java",
    "run_success": false,
    "runtime_error": "Line 23: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4\n  at line 23, Solution.isIncremovable\n  at line 9, Solution.incremovableSubarrayCount\n  at line 54, __DriverSolution__.__helper__\n  at line 84, __Driver__.main",
    "status_runtime": "N/A",
    "memory": 40984000,
    "question_id": "3252",
    "elapsed_time": 95,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1706152790558,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1156104885",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int incremovableSubarrayCount(int[] nums) {\n        int n = nums.length;\n        int count = 0;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                // Check if the subarray from i to j (inclusive) is incremovable\n                if (isIncremovable(nums, i, j)) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    private boolean isIncremovable(int[] nums, int start, int end) {\n        int prev = (start == 0) ? Integer.MIN_VALUE : nums[start - 1];\n        int next = (end == nums.length - 1) ? Integer.MAX_VALUE : nums[end + 1];\n\n        // Check if elements before and after the subarray form a strictly increasing sequence\n        return prev < nums[end + 1] && nums[start - 1] < next;\n    }\n}"
}