{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43172000,
    "display_runtime": "3",
    "question_id": "3252",
    "elapsed_time": 121,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1706154108770,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 91,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1156117744",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int incremovableSubarrayCount(int[] nums) {\n        int n = nums.length;\n        int count = 0;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j < n; j++) {\n                // Check if the subarray from i to j (inclusive) is incremovable\n                if (isIncremovable(nums, i, j)) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    private boolean isIncremovable(int[] nums, int start, int end) {\n        // Check the element before the start and after the end of the subarray\n        int prev = (start == 0) ? Integer.MIN_VALUE : nums[start - 1];\n        int next = (end == nums.length - 1) ? Integer.MAX_VALUE : nums[end + 1];\n\n        // Ensure the array remains strictly increasing after removing the subarray\n        return prev < next;\n    }\n}"
}