{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51188000,
    "question_id": "3252",
    "elapsed_time": 89,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1706158008113,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 15,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1156160516",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar incremovableSubarrayCount = function(nums) {\n    let count = 0;\n\n    // Iterate over all subarrays\n    for (let start = 0; start < nums.length; start++) {\n        for (let end = start; end < nums.length; end++) {\n            // Check if the subarray [start, end] is incremovable\n            if (containsNonIncreasingPair(nums, start, end)) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};\n\n/**\n * Check if the subarray contains at least one pair of elements where \n * the left element is not less than the right element.\n * @param {number[]} nums - The array of numbers.\n * @param {number} start - The starting index of the subarray.\n * @param {number} end - The ending index of the subarray.\n * @return {boolean} - True if the subarray is incremovable, else false.\n */\nfunction containsNonIncreasingPair(nums, start, end) {\n    for (let i = start; i < end; i++) {\n        if (nums[i] >= nums[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n}"
}