{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "87 ms",
    "memory": 42632000,
    "question_id": "3252",
    "elapsed_time": 195,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706156329384,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 615,
    "total_testcases": 615,
    "runtime_percentile": 55.88199999999998,
    "status_memory": "42.6 MB",
    "memory_percentile": 35.294,
    "pretty_lang": "C#",
    "submission_id": "1156141567",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int IncremovableSubarrayCount(int[] nums) {\n        int n = nums.Length;\n        int count = 0;\n\n        for (int start = 0; start < n; start++) {\n            for (int end = start; end < n; end++) {\n                if (IsIncremovable(nums, start, end)) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n\n    private bool IsIncremovable(int[] nums, int start, int end) {\n        int prev = start > 0 ? nums[start - 1] : int.MinValue;\n        int next = end < nums.Length - 1 ? nums[end + 1] : int.MaxValue;\n\n        // Check if the array segments before and after the subarray are strictly increasing\n        if (prev >= next) return false;\n\n        for (int i = 1; i < start; i++) {\n            if (nums[i - 1] >= nums[i]) return false;\n        }\n\n        for (int i = end + 2; i < nums.Length; i++) {\n            if (nums[i - 1] >= nums[i]) return false;\n        }\n\n        return true;\n    }\n}"
}