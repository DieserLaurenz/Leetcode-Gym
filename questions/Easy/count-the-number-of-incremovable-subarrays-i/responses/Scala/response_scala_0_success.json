{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "679 ms",
    "memory": 56568000,
    "question_id": "3252",
    "elapsed_time": 927,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706165258172,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 615,
    "total_testcases": 615,
    "runtime_percentile": 50.0,
    "status_memory": "56.6 MB",
    "memory_percentile": 75.0,
    "pretty_lang": "Scala",
    "submission_id": "1156250274",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def incremovableSubarrayCount(nums: Array[Int]): Int = {\n        def isStrictlyIncreasing(arr: Array[Int]): Boolean = {\n            for(i <- 1 until arr.length) {\n                if(arr(i-1) >= arr(i)) return false\n            }\n            true\n        }\n\n        var count = 0\n        for(i <- nums.indices) {\n            for(j <- i until nums.length) {\n                val subarrayRemoved = nums.slice(0, i) ++ nums.slice(j + 1, nums.length)\n                if(isStrictlyIncreasing(subarrayRemoved)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n}"
}