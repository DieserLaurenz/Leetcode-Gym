{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58868000,
    "question_id": "3252",
    "elapsed_time": 2106,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1706165748482,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 14,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1156256697",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec is_strictly_increasing(Nums :: [integer()]) -> boolean().\nis_strictly_increasing([]) -> true;\nis_strictly_increasing([_]) -> true;\nis_strictly_increasing([First, Second | Rest]) ->\n    First < Second andalso is_strictly_increasing([Second | Rest]).\n\n-spec remove_subarray(Start :: integer(), End :: integer(), Nums :: [integer()]) -> [integer()].\nremove_subarray(Start, End, Nums) ->\n    {Left, Right} = lists:split(End, Nums),\n    {L, _} = lists:split(Start, Left),\n    L ++ tl(Right).\n\n-spec incremovable_subarray_count(Nums :: [integer()]) -> integer().\nincremovable_subarray_count(Nums) ->\n    Length = length(Nums),\n    incremovable_subarray_count(Nums, Length, 0).\n\n-spec incremovable_subarray_count(Nums :: [integer()], Length :: integer(), Count :: integer()) -> integer().\nincremovable_subarray_count(Nums, Length, Count) ->\n    incremovable_subarray_count(Nums, Length, Count, 0, 0).\n\n-spec incremovable_subarray_count(Nums :: [integer()], Length :: integer(), Count :: integer(), Start :: integer(), End :: integer()) -> integer().\nincremovable_subarray_count(_, Length, Count, Start, _) when Start =:= Length ->\n    Count;\nincremovable_subarray_count(Nums, Length, Count, Start, End) when End =:= Length ->\n    incremovable_subarray_count(Nums, Length, Count, Start + 1, Start + 1);\nincremovable_subarray_count(Nums, Length, Count, Start, End) ->\n    RemovedArray = remove_subarray(Start, End, Nums),\n    NewCount = case is_strictly_increasing(RemovedArray) of\n        false -> Count + 1;\n        true -> Count\n    end,\n    incremovable_subarray_count(Nums, Length, NewCount, Start, End + 1)."
}