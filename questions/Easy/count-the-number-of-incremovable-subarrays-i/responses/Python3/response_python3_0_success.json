{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "388 ms",
    "memory": 16568000,
    "question_id": "3252",
    "elapsed_time": 423,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708703295715,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 615,
    "total_testcases": 615,
    "runtime_percentile": 44.22029999999946,
    "status_memory": "16.6 MB",
    "memory_percentile": 86.3745,
    "pretty_lang": "Python3",
    "submission_id": "1184091532",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def incremovableSubarrayCount(self, nums: List[int]) -> int:\n        def is_strictly_increasing(lst):\n            return all(lst[i] < lst[i + 1] for i in range(len(lst) - 1))\n        \n        n = len(nums)\n        total = 0\n        \n        for left in range(n):\n            for right in range(left, n):\n                if is_strictly_increasing(nums[:left] + nums[right + 1:]):\n                    total += 1\n        \n        return total"
}