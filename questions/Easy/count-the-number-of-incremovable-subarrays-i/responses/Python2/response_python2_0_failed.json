{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 25: ValueError: max() arg is an empty sequence",
    "full_runtime_error": "ValueError: max() arg is an empty sequence\n    if max(dp[:i] + dp[i+length:]) >= max(dp[i:i+length]):\nLine 25 in incremovableSubarrayCount (Solution.py)\n    ret = Solution().incremovableSubarrayCount(param_1)\nLine 47 in _driver (Solution.py)\n    _driver()\nLine 57 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11564000,
    "question_id": "3252",
    "elapsed_time": 33,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708703150080,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184089601",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def incremovableSubarrayCount(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        dp = [0] * n\n        total = 0\n\n        for i in range(n):\n            dp[i] = 1\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n\n        for i in range(n):\n            left = 0 if i == 0 else max(dp[:i])\n            right = 0 if i == n - 1 else max(dp[i+1:])\n            if dp[i] <= left or dp[i] <= right:\n                total += 1\n\n        for length in range(2, n + 1):\n            for i in range(n - length + 1):\n                if max(dp[:i] + dp[i+length:]) >= max(dp[i:i+length]):\n                    total += 1\n\n        return total"
}