{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72260000,
    "question_id": "3252",
    "elapsed_time": 719,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1706165985358,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 89,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1156259634",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec incremovable_subarray_count(nums :: [integer]) :: integer\n  def incremovable_subarray_count(nums) do\n    incremovable_subarray_count(nums, 0, length(nums), 0)\n  end\n\n  defp incremovable_subarray_count(_nums, _start, 0, count), do: count\n  defp incremovable_subarray_count(nums, start, length, count) do\n    new_count = incremovable_subarray_count_for_start(nums, start, start, length, count)\n    incremovable_subarray_count(nums, start + 1, length - 1, new_count)\n  end\n\n  defp incremovable_subarray_count_for_start(_nums, _start, _end, 0, count), do: count\n  defp incremovable_subarray_count_for_start(nums, start, end_index, length, count) do\n    remaining_nums = remove_subarray(nums, start, end_index)\n    new_count = if is_strictly_increasing(remaining_nums), do: count + 1, else: count\n    incremovable_subarray_count_for_start(nums, start, end_index + 1, length - 1, new_count)\n  end\n\n  defp remove_subarray(nums, start, finish) do\n    nums\n    |> Enum.slice(0..(start - 1))\n    |> Enum.concat(Enum.slice(nums, (finish + 1)..-1))\n  end\n\n  defp is_strictly_increasing(nums) when length(nums) <= 1, do: true\n  defp is_strictly_increasing([head | tail]) do\n    tail |> Enum.all?(fn x ->\n      cond do\n        head < x -> head = x\n        true -> false\n      end\n    end)\n  end\nend"
}