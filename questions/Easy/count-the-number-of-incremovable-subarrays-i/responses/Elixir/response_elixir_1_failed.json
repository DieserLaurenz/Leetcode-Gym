{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 34: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 34: ** (ArgumentError) errors were found at the given arguments:\n  * 2nd argument: not a tuple\n    :erlang.element(1, false)\n    solution.ex:34: Solution.is_strictly_increasing/1\n    solution.ex:16: Solution.incremovable_subarray_count_for_start/5\n    solution.ex:9: Solution.incremovable_subarray_count/4\n    solution.ex:52: Driver.consume_test_cases/2\n    solution.ex:40: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72848000,
    "question_id": "3252",
    "elapsed_time": 376,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1706165918139,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1156258783",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec incremovable_subarray_count(nums :: [integer]) :: integer\n  def incremovable_subarray_count(nums) do\n    incremovable_subarray_count(nums, 0, length(nums), 0)\n  end\n\n  defp incremovable_subarray_count(_nums, _start, 0, count), do: count\n  defp incremovable_subarray_count(nums, start, length, count) do\n    new_count = incremovable_subarray_count_for_start(nums, start, start, length, count)\n    incremovable_subarray_count(nums, start + 1, length - 1, new_count)\n  end\n\n  defp incremovable_subarray_count_for_start(_nums, _start, _end, 0, count), do: count\n  defp incremovable_subarray_count_for_start(nums, start, end_index, length, count) do\n    remaining_nums = remove_subarray(nums, start, end_index)\n    new_count = if is_strictly_increasing(remaining_nums), do: count + 1, else: count\n    incremovable_subarray_count_for_start(nums, start, end_index + 1, length - 1, new_count)\n  end\n\n  defp remove_subarray(nums, start, finish) do\n    nums\n    |> Enum.slice(0..(start - 1))\n    |> Enum.concat(Enum.slice(nums, (finish + 1)..-1))\n  end\n\n  defp is_strictly_increasing(nums) when length(nums) <= 1, do: true\n  defp is_strictly_increasing([head | tail]) do\n    Enum.reduce_while(tail, {true, head}, fn x, {is_increasing, last_element} ->\n      if x > last_element do\n        {:cont, {true, x}}\n      else\n        {:halt, false}\n      end\n    end) |> elem(0)\n  end\nend"
}