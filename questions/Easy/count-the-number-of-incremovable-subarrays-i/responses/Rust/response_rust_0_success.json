{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "32 ms",
    "memory": 2112000,
    "question_id": "3252",
    "elapsed_time": 42,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706165435747,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 615,
    "total_testcases": 615,
    "runtime_percentile": 7.691999999999995,
    "status_memory": "2.1 MB",
    "memory_percentile": 67.3077,
    "pretty_lang": "Rust",
    "submission_id": "1156252598",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn incremovable_subarray_count(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        let mut count = 0;\n\n        // Function to check if the array is strictly increasing\n        fn is_strictly_increasing(arr: &[i32]) -> bool {\n            for i in 1..arr.len() {\n                if arr[i] <= arr[i - 1] {\n                    return false;\n                }\n            }\n            true\n        }\n\n        // Iterate over all possible subarrays\n        for start in 0..n {\n            for end in start..n {\n                // Create a new array excluding the current subarray\n                let mut new_array = vec![];\n                new_array.extend_from_slice(&nums[..start]);\n                new_array.extend_from_slice(&nums[end+1..]);\n\n                // Check if the new array is strictly increasing\n                if is_strictly_increasing(&new_array) {\n                    count += 1;\n                }\n            }\n        }\n\n        count\n    }\n}"
}