{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19940000,
    "question_id": "2791",
    "elapsed_time": 100,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706298298629,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1157714415",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function circularGameLosers($n, $k) {\n        $receivedBall = array_fill(0, $n, false);\n        $current = 0;\n        $losers = [];\n\n        for ($i = 1; $i <= $n; $i++) {\n            $current = ($current + $k - 1) % $n; // Adjusted calculation for next friend\n            if ($receivedBall[$current]) {\n                break;\n            }\n            $receivedBall[$current] = true;\n\n            // Move to the next turn without incrementing $i if the same friend receives the ball again\n            if ($current === ($current + $k - 1) % $n) {\n                continue;\n            }\n        }\n\n        for ($j = 0; $j < $n; $j++) {\n            if (!$receivedBall[$j]) {\n                $losers[] = $j + 1; // Adjust index to 1-based\n            }\n        }\n\n        return $losers;\n    }\n}"
}