{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20100000,
    "question_id": "2791",
    "elapsed_time": 47,
    "compare_result
    "code_output": "[1,4,5]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706298352229,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 131,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1157715030",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function circularGameLosers($n, $k) {\n        $receivedBall = array_fill(0, $n, false);\n        $current = 0;\n        $losers = [];\n        $turn = 1;\n\n        while (true) {\n            $steps = ($turn * $k) % $n;\n            $current = ($current + $steps) % $n;\n\n            if ($receivedBall[$current]) {\n                break;\n            }\n\n            $receivedBall[$current] = true;\n            $turn++;\n        }\n\n        for ($j = 0; $j < $n; $j++) {\n            if (!$receivedBall[$j]) {\n                $losers[] = $j + 1; // Adjust index to 1-based\n            }\n        }\n\n        return $losers;\n    }\n}"
}