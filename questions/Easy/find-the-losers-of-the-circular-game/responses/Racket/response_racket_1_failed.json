{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126044000,
    "question_id": "2791",
    "elapsed_time": 303,
    "compare_result
    "code_output": "[1,4,5]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706309153170,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 131,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1157807391",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (circular-game-losers n k)\n  (-> exact-integer? exact-integer? (listof exact-integer?))\n\n  (define (next-position current-pos step n)\n    (modulo (+ current-pos step) n))\n\n  (define (find-losers n k)\n    (let loop ([i 1] \n               [current-pos 0] \n               [received-ball (make-vector n #f)] \n               [ball-received-twice #f])\n      (when (not ball-received-twice)\n        (let ([next-pos (next-position current-pos (* i k) n)])\n          (if (vector-ref received-ball next-pos)\n              (set! ball-received-twice #t)\n              (vector-set! received-ball next-pos #t))\n          (loop (+ i 1) next-pos received-ball ball-received-twice)))\n      (let ([losers '()])\n        (for ([j n])\n          (unless (vector-ref received-ball j)\n            (set! losers (cons (+ j 1) losers))))\n        (reverse losers))))\n\n  (find-losers n k))"
}