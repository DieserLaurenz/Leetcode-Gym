{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2168000,
    "question_id": "2791",
    "elapsed_time": 20,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706308068706,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 106,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1157799597",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn circular_game_losers(n: i32, k: i32) -> Vec<i32> {\n        let mut friends = vec![false; n as usize];\n        let mut current = 0;\n        let mut step = 0;\n\n        while !friends[current] {\n            friends[current] = true;\n            step += 1;\n            let mut moves = (step * k) % n;\n\n            while moves > 0 {\n                current = (current + 1) % n as usize;\n                if !friends[current] {\n                    moves -= 1;\n                }\n            }\n        }\n\n        friends.iter().enumerate().filter_map(|(i, &received)| {\n            if !received {\n                Some((i + 1) as i32)\n            } else {\n                None\n            }\n        }).collect()\n    }\n}"
}