{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2128000,
    "question_id": "2791",
    "elapsed_time": 14,
    "compare_result
    "code_output": "[1,3,4]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706306871137,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1157790749",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn circular_game_losers(n: i32, k: i32) -> Vec<i32> {\n        let mut has_received = vec![false; n as usize];\n        let mut losers = Vec::new();\n        let mut current = 0;\n\n        for i in 1..=n {\n            current = (current + (i * k) as usize - 1) % n as usize;\n            if has_received[current] {\n                break;\n            }\n            has_received[current] = true;\n        }\n\n        for (i, &received) in has_received.iter().enumerate() {\n            if !received {\n                losers.push((i + 1) as i32);\n            }\n        }\n\n        losers\n    }\n}"
}