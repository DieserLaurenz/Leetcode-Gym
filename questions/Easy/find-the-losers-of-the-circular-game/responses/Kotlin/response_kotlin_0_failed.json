{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37976000,
    "question_id": "2791",
    "elapsed_time": 250,
    "compare_result
    "code_output": "[1,4,5]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706299973285,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 131,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1157732032",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun circularGameLosers(n: Int, k: Int): IntArray {\n        val hasReceivedBall = BooleanArray(n) { false }\n        var current = 0\n        var step = 0\n\n        while (true) {\n            step++\n            current = (current + step * k) % n\n            if (hasReceivedBall[current]) break\n            hasReceivedBall[current] = true\n        }\n\n        return (1..n).filter { !hasReceivedBall[it - 1] }.toIntArray()\n    }\n}"
}