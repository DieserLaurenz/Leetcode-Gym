{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3004000,
    "question_id": "2791",
    "elapsed_time": 15,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706303929186,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1157768240",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func circularGameLosers(n int, k int) []int {\n    // Array to keep track of who has received the ball\n    received := make([]bool, n)\n\n    current := 0 // Start with the 1st friend\n    for i := 0; ; i++ {\n        // Calculate the next friend to receive the ball\n        current = (current + k - 1) % n\n\n        // Check if the game ends (the current friend has already received the ball)\n        if received[current] {\n            break\n        }\n\n        // Mark that the current friend has received the ball\n        received[current] = true\n    }\n\n    // Find all the friends who never received the ball\n    var losers []int\n    for i, got := range received {\n        if !got {\n            losers = append(losers, i+1) // +1 because friends are 1-indexed\n        }\n    }\n\n    return losers\n}"
}