{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15288000,
    "question_id": "2791",
    "elapsed_time": 33,
    "compare_result
    "code_output": "[1,3,4]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706298847401,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1157720391",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func circularGameLosers(_ n: Int, _ k: Int) -> [Int] {\n        var ballReceptionCounts = Array(repeating: 0, count: n)\n        var currentFriend = 0\n        var turn = 0\n        \n        while true {\n            turn += 1\n            currentFriend = (currentFriend + turn * k - 1) % n\n            ballReceptionCounts[currentFriend] += 1\n\n            if ballReceptionCounts[currentFriend] == 2 {\n                break\n            }\n        }\n\n        return ballReceptionCounts.enumerated().compactMap { (index, count) in\n            count == 0 ? index + 1 : nil\n        }\n    }\n}"
}