{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15720000,
    "question_id": "2791",
    "elapsed_time": 35,
    "compare_result
    "code_output": "[1,3,4]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706471451754,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1159488893",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func circularGameLosers(_ n: Int, _ k: Int) -> [Int] {\n        var receivedBall = Set<Int>() // Track friends who have received the ball\n        var currentPosition = 0 // Start with the 1st friend\n        var passCount = 1 // The pass count starts at 1\n\n        // Simulate the game until a friend receives the ball for the second time\n        while receivedBall.count < n {\n            // Calculate the friend to receive the ball in the current pass\n            currentPosition = (currentPosition + (passCount * k) - 1) % n\n            if receivedBall.contains(currentPosition + 1) {\n                // If the current friend has already received the ball, end the game\n                break\n            }\n            // Mark the current friend as having received the ball\n            receivedBall.insert(currentPosition + 1)\n            passCount += 1\n        }\n\n        // Identify the losers (those who never received the ball)\n        let losers = (1...n).filter { !receivedBall.contains($0) }\n\n        return losers\n    }\n}"
}