{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "387 ms",
    "memory": 72188000,
    "question_id": "2791",
    "elapsed_time": 531,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706311972098,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1277,
    "total_testcases": 1277,
    "runtime_percentile": 100,
    "status_memory": "72.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1157826971",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec circular_game_losers(n :: integer, k :: integer) :: [integer]\n  def circular_game_losers(n, k) do\n    circular_game_losers(n, k, 1, MapSet.new(), 1)\n    |> Enum.sort()\n  end\n\n  defp circular_game_losers(n, k, current_friend, received, iteration) do\n    # Check if the current friend has already received the ball\n    if MapSet.member?(received, current_friend) do\n      # Return the list of friends who did not receive the ball\n      1..n |> Enum.filter(&(!MapSet.member?(received, &1)))\n    else\n      # Add current friend to the set of friends who have received the ball\n      new_received = MapSet.put(received, current_friend)\n\n      # Calculate the next friend to receive the ball\n      next_friend = rem(current_friend + k * iteration - 1, n) + 1\n\n      # Recursive call for the next iteration\n      circular_game_losers(n, k, next_friend, new_received, iteration + 1)\n    end\n  end\nend"
}