{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5032000,
    "question_id": "2791",
    "elapsed_time": 3012,
    "compare_result
    "code_output": "[2,3,4,5]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706295111773,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1157676386",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* circularGameLosers(int n, int k, int* returnSize){\n    int* losers = (int*)malloc(n * sizeof(int));\n    int numLosers = 0;\n\n    int* received = (int*)calloc(n, sizeof(int)); // Array to track if a friend has received the ball\n    int current = 0; // Start with the 1st friend\n    int passCount = 0; // To count the number of passes made\n\n    while (numLosers < n - 1) {\n        passCount++;\n        current = (current + k - 1) % n; // Calculate the next friend to receive the ball\n        \n        if (received[current] == 0) {\n            received[current] = 1; // Mark the friend as having received the ball\n            losers[numLosers++] = current + 1; // Friends are 1-indexed\n        }\n    }\n\n    *returnSize = numLosers;\n    free(received); // Free the temporary array\n    return losers;\n}"
}