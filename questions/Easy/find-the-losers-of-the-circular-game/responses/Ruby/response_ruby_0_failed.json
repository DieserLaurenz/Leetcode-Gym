{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211648000,
    "question_id": "2791",
    "elapsed_time": 150,
    "compare_result
    "code_output": "[1,3,4]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706305010487,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1157776867",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[]}\ndef circular_game_losers(n, k)\n  # Initialize an array to track if a friend has received the ball.\n  received_ball = Array.new(n, false)\n\n  # Starting position.\n  current_position = 0\n\n  # Iterate over each turn until the game ends.\n  (1..n).each do |i|\n    # Calculate the next position, wrapping around the circle.\n    current_position = (current_position + (i * k) - 1) % n\n\n    # Check if this friend has already received the ball.\n    if received_ball[current_position]\n      # Game ends, prepare the list of losers.\n      losers = []\n      received_ball.each_with_index do |received, index|\n        losers << index + 1 unless received\n      end\n      return losers\n    else\n      # Mark this friend as having received the ball.\n      received_ball[current_position] = true\n    end\n  end\n\n  # If the game somehow doesn't end, return an empty array (though this shouldn't happen).\n  []\nend"
}