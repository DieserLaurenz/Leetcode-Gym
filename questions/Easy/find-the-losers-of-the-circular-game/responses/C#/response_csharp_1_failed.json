{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41824000,
    "question_id": "2791",
    "elapsed_time": 294,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "4\n4",
    "expected_output": "[2,3,4]",
    "task_finish_time": 1706296252400,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1157690317",
    "input_formatted": "4, 4",
    "input": "4\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] CircularGameLosers(int n, int k) {\n        bool[] hasReceivedBall = new bool[n];\n        int currentPlayer = 0; // Start at the first friend\n        int turn = 0;\n\n        while (true) {\n            currentPlayer = (currentPlayer + k - 1) % n; // Find the next player to receive the ball\n            turn++;\n\n            if (hasReceivedBall[currentPlayer]) {\n                // If this player has already received the ball, end the game\n                break;\n            }\n\n            hasReceivedBall[currentPlayer] = true;\n            k = turn * k; // Increase the step count for the next turn\n        }\n\n        // Collect all friends who never received the ball\n        List<int> losers = new List<int>();\n        for (int i = 0; i < n; i++) {\n            if (!hasReceivedBall[i]) {\n                losers.Add(i + 1); // Convert 0-indexed to 1-indexed\n            }\n        }\n\n        return losers.ToArray();\n    }\n}"
}