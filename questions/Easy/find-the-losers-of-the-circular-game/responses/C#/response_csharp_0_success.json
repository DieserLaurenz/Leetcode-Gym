{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "80 ms",
    "memory": 40132000,
    "question_id": "2791",
    "elapsed_time": 125,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706471336473,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1277,
    "total_testcases": 1277,
    "runtime_percentile": 57.14289999999999,
    "status_memory": "40.1 MB",
    "memory_percentile": 57.14289999999999,
    "pretty_lang": "C#",
    "submission_id": "1159487655",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] CircularGameLosers(int n, int k) {\n        bool[] hasBall = new bool[n];\n        int[] losers = new int[n];\n        int loserCount = 0;\n        int current = 0; // Start from the 1st friend\n        int steps = 0;\n\n        // Mark the first friend as having received the ball\n        hasBall[current] = true;\n\n        while (true) {\n            steps++;\n            current = (current + steps * k) % n; // Find the next friend to pass the ball\n\n            // If the current friend already received the ball, break the loop\n            if (hasBall[current]) break;\n\n            // Mark the current friend as having received the ball\n            hasBall[current] = true;\n        }\n\n        // Find all friends who did not receive the ball\n        for (int i = 0; i < n; i++) {\n            if (!hasBall[i]) losers[loserCount++] = i + 1; // Convert 0-based index to 1-based\n        }\n\n        // Resize the losers array to contain only the losers\n        int[] finalLosers = new int[loserCount];\n        System.Array.Copy(losers, finalLosers, loserCount);\n\n        return finalLosers;\n    }\n}"
}