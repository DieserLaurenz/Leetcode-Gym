{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40452000,
    "question_id": "2791",
    "elapsed_time": 128,
    "compare_result
    "code_output": "[1,3,4]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706295590006,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1157682303",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] CircularGameLosers(int n, int k) {\n        bool[] hasBall = new bool[n];\n        int current = 0; // Start from the first friend\n        int step = 0;\n\n        while (true) {\n            step++;\n            current = (current + step * k - 1) % n; // Calculate next position\n\n            if (hasBall[current]) {\n                // If this friend has already received the ball, the game ends\n                break;\n            }\n            hasBall[current] = true;\n        }\n\n        // Collect all friends who never received the ball\n        List<int> losers = new List<int>();\n        for (int i = 0; i < n; i++) {\n            if (!hasBall[i]) {\n                losers.Add(i + 1); // Convert 0-indexed to 1-indexed\n            }\n        }\n\n        return losers.ToArray();\n    }\n}"
}