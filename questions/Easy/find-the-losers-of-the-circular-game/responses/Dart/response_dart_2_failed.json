{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 152200000,
    "question_id": "2791",
    "elapsed_time": 564,
    "compare_result
    "code_output": "[1,4,5]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706302850393,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 131,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1157759052",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> circularGameLosers(int n, int k) {\n    List<bool> hasReceivedBall = List.filled(n, false); // Track if a friend has received the ball\n    int currentFriend = 0; // Start with the 1st friend (indexed at 0)\n    int turn = 1; // Turn count starts at 1\n\n    while (true) {\n      // Calculate the number of steps for the current turn\n      int steps = (turn * k) % n;\n      // Find the next friend to receive the ball\n      currentFriend = (currentFriend + steps) % n;\n\n      // Check if this friend has already received the ball\n      if (hasReceivedBall[currentFriend]) {\n        break;\n      }\n\n      // Mark this friend as having received the ball\n      hasReceivedBall[currentFriend] = true;\n      turn++; // Increment turn count\n    }\n\n    // Gather the list of friends who never received the ball\n    List<int> losers = [];\n    for (int i = 0; i < n; i++) {\n      if (!hasReceivedBall[i]) {\n        losers.add(i + 1); // Add 1 because friends are numbered starting from 1\n      }\n    }\n\n    return losers;\n  }\n}"
}