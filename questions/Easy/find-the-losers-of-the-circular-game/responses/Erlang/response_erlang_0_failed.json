{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58300000,
    "question_id": "2791",
    "elapsed_time": 5105,
    "compare_result
    "code_output": "[2]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706310237447,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1157815251",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec circular_game_losers(N :: integer(), K :: integer()) -> [integer()].\ncircular_game_losers(N, K) ->\n    circular_game_losers(N, K, lists:seq(1, N), 1, 0, []).\n\ncircular_game_losers(_N, _K, _Friends, _Current, _Multiplier, Received) when length(Received) == 2 ->\n    [X || X <- lists:seq(1, length(Received)), not lists:member(X, Received)];\ncircular_game_losers(N, K, Friends, Current, Multiplier, Received) ->\n    Next = (Current + K * Multiplier - 1) rem N + 1,\n    NewReceived = case lists:member(Next, Received) of\n        false -> [Next | Received];\n        true -> Received\n    end,\n    circular_game_losers(N, K, Friends, Next, Multiplier + 1, NewReceived)."
}