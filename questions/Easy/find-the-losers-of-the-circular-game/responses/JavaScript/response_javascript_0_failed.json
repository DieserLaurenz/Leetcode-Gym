{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53560000,
    "question_id": "2791",
    "elapsed_time": 259,
    "compare_result
    "code_output": "[1,3,4]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706297782592,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1157708432",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number} k\n * @return {number[]}\n */\nvar circularGameLosers = function(n, k) {\n    let received = new Array(n).fill(false); // To track who received the ball\n    let current = 0; // Starting at the first friend\n    let turn = 1; // Starting with the first turn\n\n    while (true) {\n        // Calculate the next friend to pass the ball to\n        current = (current + turn * k - 1) % n;\n        if (received[current]) {\n            break; // End the game if this friend has already received the ball\n        }\n        received[current] = true; // Mark the friend as having received the ball\n        turn++; // Increment the turn\n    }\n\n    // Find friends who never received the ball\n    let losers = [];\n    for (let i = 0; i < n; i++) {\n        if (!received[i]) {\n            losers.push(i + 1); // Adjust for one-based indexing\n        }\n    }\n    return losers;\n};"
}