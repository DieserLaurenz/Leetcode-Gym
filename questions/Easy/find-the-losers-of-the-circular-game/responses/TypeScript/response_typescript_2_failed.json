{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55748000,
    "question_id": "2791",
    "elapsed_time": 118,
    "compare_result
    "code_output": "[1,3,4]",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "[4,5]",
    "task_finish_time": 1706298071383,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 1277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1157711832",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function circularGameLosers(n: number, k: number): number[] {\n    // Array to track whether a friend has received the ball\n    let receivedBall = new Array(n).fill(false);\n\n    // Current position of the ball, starting from the 1st friend\n    let currentPosition = 0; \n\n    // Variable to track the turn number\n    let turn = 1;\n\n    while (true) {\n        // Calculate the next position\n        currentPosition = (currentPosition + turn * k - 1) % n;\n\n        if (receivedBall[currentPosition]) {\n            // If the friend already received the ball, the game ends\n            break;\n        }\n\n        // Mark the current friend as having received the ball\n        receivedBall[currentPosition] = true;\n\n        // Increment the turn number for the next pass\n        turn++;\n    }\n\n    // Find all friends who never received the ball\n    let losers = [];\n    for (let i = 0; i < n; i++) {\n        if (!receivedBall[i]) {\n            losers.push(i + 1); // Adjust index to match friend number (1-based)\n        }\n    }\n\n    return losers;\n}"
}