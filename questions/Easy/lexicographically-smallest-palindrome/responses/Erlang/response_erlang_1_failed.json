{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 24: exception error: function_clause",
    "full_runtime_error": "Line 24: exception error: function_clause\n[{lists,nthtail_1,[1,[]],[{file,\"lists.erl\"},{line,218}]},\n {solution,make_palindrome_helper,3,[{file,\"solution.erl\"},{line,24}]},\n {solution,make_smallest_palindrome,1,[{file,\"solution.erl\"},{line,4}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,44}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,32}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,61}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 60664000,
    "question_id": "2816",
    "elapsed_time": 1327,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"egcfe\"",
    "expected_output": "\"efcfe\"",
    "task_finish_time": 1706471754675,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 4519,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1159492209",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec make_smallest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmake_smallest_palindrome(S) ->\n    List = binary_to_list(S),\n    PalindromeList = make_palindrome(List),\n    list_to_binary(PalindromeList).\n\nmake_palindrome(List) ->\n    make_palindrome_helper(List, 1, length(List)).\n\nmake_palindrome_helper(List, Left, Right) when Left >= Right -> List;\nmake_palindrome_helper(List, Left, Right) ->\n    LeftChar = lists:nth(Left, List),\n    RightChar = lists:nth(Right, List),\n    UpdatedList = if\n        LeftChar =< RightChar ->\n            lists:sublist(List, Left - 1) ++\n            [LeftChar] ++\n            lists:nthtail(Left, lists:sublist(List, Right - Left - 1)) ++\n            [LeftChar] ++\n            lists:nthtail(Right, List);\n        true ->\n            lists:sublist(List, Left - 1) ++\n            [RightChar] ++\n            lists:nthtail(Left, lists:sublist(List, Right - Left - 1)) ++\n            [RightChar] ++\n            lists:nthtail(Right, List)\n    end,\n    make_palindrome_helper(UpdatedList, Left + 1, Right - 1)."
}