{
    "acRate": 80.64956275454301,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2697",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Lexicographically Smallest Palindrome",
    "titleSlug": "lexicographically-smallest-palindrome",
    "topicTags": [
        {
            "name": "Two Pointers",
            "id": "VG9waWNUYWdOb2RlOjk=",
            "slug": "two-pointers"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     string makeSmallestPalindrome(string s) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public String makeSmallestPalindrome(String s) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def makeSmallestPalindrome(self, s):         \"\"\"         :type s: str         :rtype: str         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def makeSmallestPalindrome(self, s: str) -> str:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "char * makeSmallestPalindrome(char * s){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public string MakeSmallestPalindrome(string s) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @return {string}  */ var makeSmallestPalindrome = function(s) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function makeSmallestPalindrome(s: string): string {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @return String      */     function makeSmallestPalindrome($s) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func makeSmallestPalindrome(_ s: String) -> String {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun makeSmallestPalindrome(s: String): String {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   String makeSmallestPalindrome(String s) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func makeSmallestPalindrome(s string) string {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @return {String} def make_smallest_palindrome(s)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def makeSmallestPalindrome(s: String): String = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn make_smallest_palindrome(s: String) -> String {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (make-smallest-palindrome s)   (-> string? string?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec make_smallest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary(). make_smallest_palindrome(S) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec make_smallest_palindrome(s :: String.t) :: String.t   def make_smallest_palindrome(s) do    end end"
        }
    ],
    "content": "You are given a string s consisting of lowercase English letters, and you are allowed to perform operations on it. In one operation, you can replace a character in s with another lowercase English letter. Your task is to make s a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one. A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. Return the resulting palindrome string.  Example 1:  Input: s = \"egcfe\" Output: \"efcfe\" Explanation: The minimum number of operations to make \"egcfe\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"efcfe\", by changing 'g'.  Example 2:  Input: s = \"abcd\" Output: \"abba\" Explanation: The minimum number of operations to make \"abcd\" a palindrome is 2, and the lexicographically smallest palindrome string we can get by modifying two characters is \"abba\".  Example 3:  Input: s = \"seven\" Output: \"neven\" Explanation: The minimum number of operations to make \"seven\" a palindrome is 1, and the lexicographically smallest palindrome string we can get by modifying one character is \"neven\".   Constraints:  1 <= s.length <= 1000 sconsists of only lowercase English letters.  "
}