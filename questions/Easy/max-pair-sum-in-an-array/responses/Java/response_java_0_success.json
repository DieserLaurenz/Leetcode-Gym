{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 44684000,
    "display_runtime": "3",
    "question_id": "2902",
    "elapsed_time": 179,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706443254746,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 94.5565,
    "status_memory": "44.7 MB",
    "memory_percentile": 33.87100000000001,
    "pretty_lang": "Java",
    "submission_id": "1159150796",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxSum(int[] nums) {\n        int result = -1;\n        // Map to store maximum sum of pairs with the same highest digit\n        int[] maxSums = new int[10];\n        // Initialize maxSums array with -1\n        for (int i = 0; i < 10; i++) {\n            maxSums[i] = -1;\n        }\n\n        for (int num : nums) {\n            int maxDigit = getMaxDigit(num);\n            // Update maxSums for the maximum digit found in current number\n            for (int i = 0; i < 10; i++) {\n                if (maxSums[i] != -1 && maxDigit == i) {\n                    result = Math.max(result, num + maxSums[i]);\n                }\n            }\n            // Store the maximum number for a particular highest digit\n            maxSums[maxDigit] = Math.max(maxSums[maxDigit], num);\n        }\n\n        return result;\n    }\n\n    // Helper function to get the maximum digit of a number\n    private int getMaxDigit(int num) {\n        int maxDigit = 0;\n        while (num > 0) {\n            maxDigit = Math.max(maxDigit, num % 10);\n            num /= 10;\n        }\n        return maxDigit;\n    }\n}"
}