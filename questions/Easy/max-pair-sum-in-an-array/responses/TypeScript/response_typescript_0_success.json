{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "137 ms",
    "memory": 58988000,
    "question_id": "2902",
    "elapsed_time": 154,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706445133404,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 68.4209,
    "status_memory": "59 MB",
    "memory_percentile": 31.578500000000016,
    "pretty_lang": "TypeScript",
    "submission_id": "1159168852",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function maxSum(nums: number[]): number {\n    const maxDigitMap = new Map<number, number[]>();\n\n    // Function to find the maximum digit of a number\n    const findMaxDigit = (num: number): number => {\n        let maxDigit = 0;\n        while (num > 0) {\n            maxDigit = Math.max(maxDigit, num % 10);\n            num = Math.floor(num / 10);\n        }\n        return maxDigit;\n    };\n\n    // Group numbers by their maximum digit\n    nums.forEach(num => {\n        const maxDigit = findMaxDigit(num);\n        if (!maxDigitMap.has(maxDigit)) {\n            maxDigitMap.set(maxDigit, []);\n        }\n        maxDigitMap.get(maxDigit)!.push(num);\n    });\n\n    let maxSum = -1;\n\n    // Find the maximum sum of pairs with the same maximum digit\n    maxDigitMap.forEach((values) => {\n        if (values.length > 1) {\n            // Sort to get the two largest values easily if there are more than two numbers in the group\n            values.sort((a, b) => a - b);\n            const sum = values[values.length - 1] + values[values.length - 2];\n            maxSum = Math.max(maxSum, sum);\n        }\n    });\n\n    return maxSum;\n};"
}