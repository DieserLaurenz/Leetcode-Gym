{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "15 ms",
    "memory": 73356000,
    "question_id": "2902",
    "elapsed_time": 65,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706442838610,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 98.5366,
    "status_memory": "73.4 MB",
    "memory_percentile": 5.2035999999999945,
    "pretty_lang": "C++",
    "submission_id": "1159146870",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maxSum(vector<int>& nums) {\n        // Map to store maximum sum of pairs with the same highest digit\n        unordered_map<int, int> maxSumMap;\n\n        int result = -1;\n\n        for (int num : nums) {\n            int maxDigit = getMaxDigit(num);\n            if (maxSumMap.find(maxDigit) != maxSumMap.end()) {\n                // If there is already a number with the same maximum digit,\n                // update the result if the sum of this pair is larger than the current result\n                result = max(result, maxSumMap[maxDigit] + num);\n                // Update the stored value if the current number is larger\n                maxSumMap[maxDigit] = max(maxSumMap[maxDigit], num);\n            } else {\n                // Store the number as the potential first number of a pair\n                maxSumMap[maxDigit] = num;\n            }\n        }\n\n        return result;\n    }\n\nprivate:\n    // Helper function to find the maximum digit of a number\n    int getMaxDigit(int num) {\n        int maxDigit = 0;\n        while (num > 0) {\n            maxDigit = max(maxDigit, num % 10);\n            num /= 10;\n        }\n        return maxDigit;\n    }\n};"
}