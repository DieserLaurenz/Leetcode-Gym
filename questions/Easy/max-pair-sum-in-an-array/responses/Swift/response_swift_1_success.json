{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "72 ms",
    "memory": 15276000,
    "question_id": "2902",
    "elapsed_time": 134,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706445261782,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 100,
    "status_memory": "15.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Swift",
    "submission_id": "1159170217",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxSum(_ nums: [Int]) -> Int {\n        var maxPairs = [Int: (first: Int, second: Int)]()\n        for num in nums {\n            let maxDigit = getMaxDigit(num)\n            if let currentPair = maxPairs[maxDigit] {\n                if num > currentPair.first {\n                    maxPairs[maxDigit] = (num, currentPair.first)\n                } else if num > currentPair.second {\n                    maxPairs[maxDigit]?.second = num\n                }\n            } else {\n                maxPairs[maxDigit] = (num, -1) // Initialize with -1 for the second value\n            }\n        }\n        \n        // Calculate the maximum sum of pairs with equal maximum digits\n        var maxSum = -1\n        for pair in maxPairs.values {\n            if pair.second != -1 { // Ensure a pair exists\n                maxSum = max(maxSum, pair.first + pair.second)\n            }\n        }\n        \n        return maxSum\n    }\n    \n    private func getMaxDigit(_ num: Int) -> Int {\n        var n = num, maxDigit = 0\n        while n > 0 {\n            maxDigit = max(maxDigit, n % 10)\n            n /= 10\n        }\n        return maxDigit\n    }\n}"
}