{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15240000,
    "question_id": "2902",
    "elapsed_time": 101,
    "compare_result
    "code_output": "71",
    "std_output": "",
    "last_testcase": "[51,71,17,24,42]",
    "expected_output": "88",
    "task_finish_time": 1706445211377,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 514,
    "total_testcases": 3006,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1159169706",
    "input_formatted": "[51,71,17,24,42]",
    "input": "[51,71,17,24,42]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxSum(_ nums: [Int]) -> Int {\n        var maxDigitSums = [Int: Int]()\n        var result = -1\n        \n        for num in nums {\n            let maxDigit = getMaxDigit(num)\n            if let currentSum = maxDigitSums[maxDigit] {\n                maxDigitSums[maxDigit] = max(currentSum, num + currentSum - max(currentSum, num))\n                result = max(result, maxDigitSums[maxDigit]!)\n            } else {\n                maxDigitSums[maxDigit] = num\n            }\n        }\n        \n        for sum in maxDigitSums.values {\n            if sum != maxDigitSums[getMaxDigit(sum)] {\n                result = max(result, sum)\n            }\n        }\n        \n        return result\n    }\n    \n    private func getMaxDigit(_ num: Int) -> Int {\n        var n = num\n        var maxDigit = 0\n        while n > 0 {\n            maxDigit = max(maxDigit, n % 10)\n            n /= 10\n        }\n        return maxDigit\n    }\n}"
}