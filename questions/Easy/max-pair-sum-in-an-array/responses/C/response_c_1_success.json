{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "15 ms",
    "memory": 6224000,
    "question_id": "2902",
    "elapsed_time": 30,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706444276635,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 78.2608,
    "status_memory": "6.2 MB",
    "memory_percentile": 95.6522,
    "pretty_lang": "C",
    "submission_id": "1159160520",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n\nint maxDigit(int n) {\n    int maxD = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        maxD = digit > maxD ? digit : maxD;\n        n /= 10;\n    }\n    return maxD;\n}\n\nint maxSum(int* nums, int numsSize) {\n    int maxNums[10][2] = {0}; // Store max and second max numbers for each digit\n    int result = -1;\n\n    // Initialize maxNums with INT_MIN for comparison\n    for (int i = 0; i < 10; ++i) {\n        maxNums[i][0] = INT_MIN;\n        maxNums[i][1] = INT_MIN;\n    }\n\n    for (int i = 0; i < numsSize; ++i) {\n        int maxD = maxDigit(nums[i]);\n        // Update max and second max for the max digit\n        if (nums[i] > maxNums[maxD][0]) {\n            // If current number is greater than the max number found so far,\n            // update second max to old max, and set new max to current number\n            maxNums[maxD][1] = maxNums[maxD][0];\n            maxNums[maxD][0] = nums[i];\n        } else if (nums[i] > maxNums[maxD][1]) {\n            // If current number is not greater than max but is greater than second max,\n            // update second max to current number\n            maxNums[maxD][1] = nums[i];\n        }\n    }\n\n    // Find the maximum sum of max and second max for any digit\n    for (int i = 0; i < 10; ++i) {\n        if (maxNums[i][1] != INT_MIN) { // Ensure a pair exists\n            int currentSum = maxNums[i][0] + maxNums[i][1];\n            result = currentSum > result ? currentSum : result;\n        }\n    }\n\n    return result;\n}"
}