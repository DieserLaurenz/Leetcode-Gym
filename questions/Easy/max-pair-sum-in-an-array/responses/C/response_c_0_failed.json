{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6300000,
    "question_id": "2902",
    "elapsed_time": 42,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "-1",
    "task_finish_time": 1706443676194,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2492,
    "total_testcases": 3006,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1159154653",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maxDigit(int n) {\n    int maxD = 0;\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit > maxD) {\n            maxD = digit;\n        }\n        n /= 10;\n    }\n    return maxD;\n}\n\nint maxSum(int* nums, int numsSize){\n    int maxSums[10] = {0}; // For storing max sum of pairs for each digit 0-9\n    int result = -1;\n\n    for (int i = 0; i < numsSize; i++) {\n        int maxD = maxDigit(nums[i]); // Find the max digit of the current number\n        for (int j = 0; j < numsSize; j++) {\n            if (i != j && maxD == maxDigit(nums[j])) {\n                int currentSum = nums[i] + nums[j];\n                if (currentSum > maxSums[maxD]) {\n                    maxSums[maxD] = currentSum;\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < 10; i++) {\n        if (maxSums[i] > result) {\n            result = maxSums[i];\n        }\n    }\n\n    return result;\n}"
}