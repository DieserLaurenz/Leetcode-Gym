{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "512 ms",
    "memory": 155420000,
    "question_id": "2902",
    "elapsed_time": 780,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706448893477,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 50.0,
    "status_memory": "155.4 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Dart",
    "submission_id": "1159209263",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maxSum(List<int> nums) {\n    // Function to find the maximum digit of a number\n    int maxDigit(int num) {\n      int maxD = 0;\n      while (num > 0) {\n        maxD = max(maxD, num % 10);\n        num ~/= 10;\n      }\n      return maxD;\n    }\n\n    // Map to store the maximum sum for each maximum digit\n    Map<int, int> maxSums = {};\n\n    int result = -1;\n\n    for (var num in nums) {\n      int maxD = maxDigit(num);\n      if (maxSums.containsKey(maxD)) {\n        // If there is already a number with the same maximum digit,\n        // calculate the new sum and update the result if it is greater\n        result = max(result, maxSums[maxD]! + num);\n        // Update the maximum sum for the maximum digit if the current number is greater\n        maxSums[maxD] = max(maxSums[maxD]!, num);\n      } else {\n        // If it's the first number with this maximum digit, just add it\n        maxSums[maxD] = num;\n      }\n    }\n\n    return result;\n  }\n\n  // Helper function to find the maximum of two numbers\n  int max(int a, int b) => a > b ? a : b;\n}"
}