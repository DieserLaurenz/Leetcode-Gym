{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "12 ms",
    "memory": 4536000,
    "question_id": "2902",
    "elapsed_time": 33,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706448995048,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 70.58809999999998,
    "status_memory": "4.5 MB",
    "memory_percentile": 88.2353,
    "pretty_lang": "Go",
    "submission_id": "1159210352",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func maxSum(nums []int) int {\n    maxDigitSums := make(map[int]int)\n    result := -1\n\n    // Helper function to find the maximum digit of a number\n    maxDigit := func(n int) int {\n        maxD := 0\n        for n > 0 {\n            digit := n % 10\n            if digit > maxD {\n                maxD = digit\n            }\n            n /= 10\n        }\n        return maxD\n    }\n\n    for _, num := range nums {\n        maxD := maxDigit(num)\n        if sum, exists := maxDigitSums[maxD]; exists {\n            // If another number with the same maximum digit exists, update the maximum sum\n            if sum+num > result {\n                result = sum + num\n            }\n            // Update the stored sum if the current number is greater than the previously stored number\n            if num > sum {\n                maxDigitSums[maxD] = num\n            }\n        } else {\n            // Store the number as a potential pair part for its maximum digit\n            maxDigitSums[maxD] = num\n        }\n    }\n\n    return result\n}"
}