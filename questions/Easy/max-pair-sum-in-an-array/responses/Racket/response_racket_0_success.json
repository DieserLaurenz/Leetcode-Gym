{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "238 ms",
    "memory": 124656000,
    "question_id": "2902",
    "elapsed_time": 369,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706449210422,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 100,
    "status_memory": "124.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1159212839",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (max-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  ; Define a helper function to find the maximum digit of a number\n  (define (max-digit n)\n    (if (= n 0)\n        0\n        (max (modulo n 10) (max-digit (quotient n 10)))))\n  ; Group numbers by their maximum digit\n  (define grouped (make-hash))\n  (for ([n nums])\n    (let ([key (max-digit n)])\n      (hash-update! grouped key (lambda (l) (cons n l)) '())))\n  ; Find the pair with the highest sum for each group and keep the max sum\n  (define max-pair-sum -1)\n  (for ([g (hash-values grouped)])\n    (when (> (length g) 1)\n      (let ([sorted-g (sort g >)])\n        (for ([i (in-range 0 (- (length sorted-g) 1))])\n          (let ([sum (+ (list-ref sorted-g i) (list-ref sorted-g (+ i 1)))])\n            (when (> sum max-pair-sum)\n              (set! max-pair-sum sum)))))))\n  max-pair-sum)"
}