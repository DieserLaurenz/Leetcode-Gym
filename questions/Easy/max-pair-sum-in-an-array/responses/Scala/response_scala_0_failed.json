{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58552000,
    "question_id": "2902",
    "elapsed_time": 1131,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "-1",
    "task_finish_time": 1706472271089,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2208,
    "total_testcases": 3006,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1159497828",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxSum(nums: Array[Int]): Int = {\n        // Function to find the maximum digit of a number\n        def maxDigit(n: Int): Int = n.toString.map(_.asDigit).max\n\n        // Map to store the maximum sum of pairs with the same maximum digit\n        val maxSumMap = scala.collection.mutable.Map[Int, Int]()\n\n        nums.foreach { num =>\n            val maxDigitOfNum = maxDigit(num)\n            maxSumMap.get(maxDigitOfNum) match {\n                case Some(existingSum) =>\n                    // If there's already a number with the same maximum digit, update the sum if the current pair is larger\n                    maxSumMap(maxDigitOfNum) = math.max(existingSum, num + nums.filter(n => maxDigit(n) == maxDigitOfNum && n != num).maxOption.getOrElse(0))\n                case None =>\n                    // Store the current number as a potential pair for its maximum digit\n                    maxSumMap(maxDigitOfNum) = num\n            }\n        }\n\n        // Filter out entries that have no pair (value equals the key itself) and find the maximum sum\n        val maxSums = maxSumMap.values.filter(_ != 0).toSeq\n        if (maxSums.isEmpty) -1 else maxSums.max\n    }\n}"
}