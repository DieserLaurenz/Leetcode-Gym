{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56840000,
    "question_id": "2902",
    "elapsed_time": 1000,
    "compare_result
    "code_output": "71",
    "std_output": "",
    "last_testcase": "[51,71,17,24,42]",
    "expected_output": "88",
    "task_finish_time": 1706449109864,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 3006,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1159211701",
    "input_formatted": "[51,71,17,24,42]",
    "input": "[51,71,17,24,42]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxSum(nums: Array[Int]): Int = {\n        def maxDigit(n: Int): Int = n.toString.map(_.asDigit).max\n        \n        val sums = scala.collection.mutable.Map[Int, Int]()\n        \n        nums.foreach { num =>\n            val maxD = maxDigit(num)\n            sums.get(maxD) match {\n                case Some(existingSum) => sums(maxD) = math.max(existingSum, num + existingSum - math.max(num, existingSum - num))\n                case None => sums += (maxD -> num)\n            }\n        }\n        \n        val result = sums.values.filter(_ > 0).toArray\n        if (result.length < 2) -1 else result.max\n    }\n}"
}