{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "780 ms",
    "memory": 59124000,
    "question_id": "2902",
    "elapsed_time": 1147,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706472304552,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3006,
    "total_testcases": 3006,
    "runtime_percentile": 100,
    "status_memory": "59.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1159498176",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxSum(nums: Array[Int]): Int = {\n        // Function to find the maximum digit of a number\n        def maxDigit(n: Int): Int = n.toString.map(_.asDigit).max\n        \n        // Map to store the best two numbers for each maximum digit\n        val bestPairs = scala.collection.mutable.Map[Int, (Int, Int)]().withDefaultValue((-1, -1))\n\n        nums.foreach { num =>\n            val maxDigitOfNum = maxDigit(num)\n            bestPairs(maxDigitOfNum) match {\n                case (first, second) =>\n                    if (num > first) {\n                        // Update the pair with the current number as the first if it's larger than the existing first\n                        bestPairs(maxDigitOfNum) = (num, first)\n                    } else if (num > second) {\n                        // Update the second number if the current number is larger than the existing second but smaller than the first\n                        bestPairs(maxDigitOfNum) = (first, num)\n                    }\n            }\n        }\n\n        // Compute the maximum sum of valid pairs\n        val maxSum = bestPairs.values.collect {\n            case (first, second) if second != -1 => first + second // Ensure we have a valid pair\n        }.maxOption.getOrElse(-1)\n\n        maxSum\n    }\n}"
}