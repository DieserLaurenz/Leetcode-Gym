{
    "acRate": 57.56540009469697,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2815",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Max Pair Sum in an Array",
    "titleSlug": "max-pair-sum-in-an-array",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int maxSum(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int maxSum(int[] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def maxSum(self, nums):         \"\"\"         :type nums: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def maxSum(self, nums: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int maxSum(int* nums, int numsSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MaxSum(int[] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {number}  */ var maxSum = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maxSum(nums: number[]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Integer      */     function maxSum($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func maxSum(_ nums: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun maxSum(nums: IntArray): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int maxSum(List<int> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maxSum(nums []int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Integer} def max_sum(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def maxSum(nums: Array[Int]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn max_sum(nums: Vec<i32>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (max-sum nums)   (-> (listof exact-integer?) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec max_sum(Nums :: [integer()]) -> integer(). max_sum(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec max_sum(nums :: [integer]) :: integer   def max_sum(nums) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums. You have to find the maximum sum of a pair of numbers from nums such that the maximum digit in both numbers are equal. Return the maximum sum or -1 if no such pair exists.  Example 1:  Input: nums = [51,71,17,24,42] Output: 88 Explanation:  For i = 1 and j = 2, nums[i] and nums[j] have equal maximum digits with a pair sum of 71 + 17 = 88.  For i = 3 and j = 4, nums[i] and nums[j] have equal maximum digits with a pair sum of 24 + 42 = 66. It can be shown that there are no other pairs with equal maximum digits, so the answer is 88. Example 2:  Input: nums = [1,2,3,4] Output: -1 Explanation: No pair exists in nums with equal maximum digits.   Constraints:  2 <= nums.length <= 100 1 <= nums[i] <= 104  "
}