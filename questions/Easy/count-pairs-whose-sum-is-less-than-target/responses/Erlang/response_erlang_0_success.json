{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "287 ms",
    "memory": 59816000,
    "question_id": "2917",
    "elapsed_time": 1381,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706130589898,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 707,
    "runtime_percentile": 100,
    "status_memory": "59.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1155926829",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec count_pairs(Nums :: [integer()], Target :: integer()) -> integer().\ncount_pairs(Nums, Target) ->\n    count_pairs_helper(Nums, Target, 0).\n\ncount_pairs_helper([], _, Count) -> \n    Count;\ncount_pairs_helper([H|T], Target, Count) ->\n    count_pairs_helper(T, Target, count_pairs_inner(T, H, Target, Count)).\n\ncount_pairs_inner([], _, _, Count) -> \n    Count;\ncount_pairs_inner([H|T], N, Target, Count) ->\n    NewCount = if\n        N + H < Target -> Count + 1;\n        true -> Count\n    end,\n    count_pairs_inner(T, N, Target, NewCount)."
}