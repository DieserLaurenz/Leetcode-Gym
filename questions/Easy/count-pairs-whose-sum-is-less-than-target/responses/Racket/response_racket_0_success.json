{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "192 ms",
    "memory": 101152000,
    "question_id": "2917",
    "elapsed_time": 253,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706130110427,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 707,
    "runtime_percentile": 100,
    "status_memory": "101.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1155922286",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (count-pairs nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  \n  (let ([count 0])\n    (for ([i (in-range (length nums))])\n      (for ([j (in-range (add1 i) (length nums))])\n        (when (< (+ (list-ref nums i) (list-ref nums j)) target)\n          (set! count (add1 count)))))\n    count))"
}