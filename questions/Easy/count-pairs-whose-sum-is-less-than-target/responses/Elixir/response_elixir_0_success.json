{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "337 ms",
    "memory": 72148000,
    "question_id": "2917",
    "elapsed_time": 440,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706131073961,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 707,
    "runtime_percentile": 100,
    "status_memory": "72.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1155931261",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_pairs(nums :: [integer], target :: integer) :: integer\n  def count_pairs(nums, target) do\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce(0, fn {x, i}, acc ->\n      acc + Enum.count(Enum.slice(nums, i + 1, length(nums)), fn y -> x + y < target end)\n    end)\n  end\nend"
}