{
    "acRate": 87.49770577144477,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2798",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Number of Employees Who Met the Target",
    "titleSlug": "number-of-employees-who-met-the-target",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int numberOfEmployeesWhoMetTarget(vector<int>& hours, int target) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int numberOfEmployeesWhoMetTarget(int[] hours, int target) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def numberOfEmployeesWhoMetTarget(self, hours, target):         \"\"\"         :type hours: List[int]         :type target: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int numberOfEmployeesWhoMetTarget(int* hours, int hoursSize, int target){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int NumberOfEmployeesWhoMetTarget(int[] hours, int target) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} hours  * @param {number} target  * @return {number}  */ var numberOfEmployeesWhoMetTarget = function(hours, target) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function numberOfEmployeesWhoMetTarget(hours: number[], target: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $hours      * @param Integer $target      * @return Integer      */     function numberOfEmployeesWhoMetTarget($hours, $target) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func numberOfEmployeesWhoMetTarget(_ hours: [Int], _ target: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun numberOfEmployeesWhoMetTarget(hours: IntArray, target: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int numberOfEmployeesWhoMetTarget(List<int> hours, int target) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func numberOfEmployeesWhoMetTarget(hours []int, target int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} hours # @param {Integer} target # @return {Integer} def number_of_employees_who_met_target(hours, target)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def numberOfEmployeesWhoMetTarget(hours: Array[Int], target: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn number_of_employees_who_met_target(hours: Vec<i32>, target: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (number-of-employees-who-met-target hours target)   (-> (listof exact-integer?) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec number_of_employees_who_met_target(Hours :: [integer()], Target :: integer()) -> integer(). number_of_employees_who_met_target(Hours, Target) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec number_of_employees_who_met_target(hours :: [integer], target :: integer) :: integer   def number_of_employees_who_met_target(hours, target) do    end end"
        }
    ],
    "content": "There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company. The company requires each employee to work for at least target hours. You are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target. Return the integer denoting the number of employees who worked at least target hours.  Example 1:  Input: hours = [0,1,2,3,4], target = 2 Output: 3 Explanation: The company wants each employee to work for at least 2 hours. - Employee 0 worked for 0 hours and didn't meet the target. - Employee 1 worked for 1 hours and didn't meet the target. - Employee 2 worked for 2 hours and met the target. - Employee 3 worked for 3 hours and met the target. - Employee 4 worked for 4 hours and met the target. There are 3 employees who met the target.  Example 2:  Input: hours = [5,1,4,2,2], target = 6 Output: 0 Explanation: The company wants each employee to work for at least 6 hours. There are 0 employees who met the target.   Constraints:  1 <= n == hours.length <= 50 0 <=hours[i], target <= 105  "
}