{
    "acRate": 87.50296031946951,
    "difficulty": "Easy",
    "freqBar": null,
    "questionId": "2876",
    "frontendQuestionId": "2798",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Number of Employees Who Met the Target",
    "titleSlug": "number-of-employees-who-met-the-target",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int numberOfEmployeesWhoMetTarget(vector<int>& hours, int target) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int numberOfEmployeesWhoMetTarget(int[] hours, int target) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def numberOfEmployeesWhoMetTarget(self, hours, target):\n        \"\"\"\n        :type hours: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def numberOfEmployeesWhoMetTarget(self, hours: List[int], target: int) -> int:\n        "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int numberOfEmployeesWhoMetTarget(int* hours, int hoursSize, int target){\n\n}"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int NumberOfEmployeesWhoMetTarget(int[] hours, int target) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} hours\n * @param {number} target\n * @return {number}\n */\nvar numberOfEmployeesWhoMetTarget = function(hours, target) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function numberOfEmployeesWhoMetTarget(hours: number[], target: number): number {\n\n};"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $hours\n     * @param Integer $target\n     * @return Integer\n     */\n    function numberOfEmployeesWhoMetTarget($hours, $target) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func numberOfEmployeesWhoMetTarget(_ hours: [Int], _ target: Int) -> Int {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun numberOfEmployeesWhoMetTarget(hours: IntArray, target: Int): Int {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  int numberOfEmployeesWhoMetTarget(List<int> hours, int target) {\n\n  }\n}"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func numberOfEmployeesWhoMetTarget(hours []int, target int) int {\n    \n}"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} hours\n# @param {Integer} target\n# @return {Integer}\ndef number_of_employees_who_met_target(hours, target)\n    \nend"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def numberOfEmployeesWhoMetTarget(hours: Array[Int], target: Int): Int = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn number_of_employees_who_met_target(hours: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (number-of-employees-who-met-target hours target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec number_of_employees_who_met_target(Hours :: [integer()], Target :: integer()) -> integer().\nnumber_of_employees_who_met_target(Hours, Target) ->\n  ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec number_of_employees_who_met_target(hours :: [integer], target :: integer) :: integer\n  def number_of_employees_who_met_target(hours, target) do\n\n  end\nend"
        }
    ],
    "content": "There are n employees in a company, numbered from 0 to n - 1. Each employee i has worked for hours[i] hours in the company.\nThe company requires each employee to work for at least target hours.\nYou are given a 0-indexed array of non-negative integers hours of length n and a non-negative integer target.\nReturn the integer denoting the number of employees who worked at least target hours.\n\nExample 1:\n\nInput: hours = [0,1,2,3,4], target = 2\nOutput: 3\nExplanation: The company wants each employee to work for at least 2 hours.\n- Employee 0 worked for 0 hours and didn't meet the target.\n- Employee 1 worked for 1 hours and didn't meet the target.\n- Employee 2 worked for 2 hours and met the target.\n- Employee 3 worked for 3 hours and met the target.\n- Employee 4 worked for 4 hours and met the target.\nThere are 3 employees who met the target.\n\nExample 2:\n\nInput: hours = [5,1,4,2,2], target = 6\nOutput: 0\nExplanation: The company wants each employee to work for at least 6 hours.\nThere are 0 employees who met the target.\n\n\nConstraints:\n\n1 <= n == hours.length <= 50\n0 <=hours[i], target <= 105\n\n"
}