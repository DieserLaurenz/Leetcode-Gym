{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "307 ms",
    "memory": 62356000,
    "question_id": "3093",
    "elapsed_time": 1393,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706690645561,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 639,
    "total_testcases": 639,
    "runtime_percentile": 100,
    "status_memory": "62.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1161840149",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec sum_indices_with_k_set_bits(Nums :: [integer()], K :: integer()) -> integer().\nsum_indices_with_k_set_bits(Nums, K) ->\n    sum_indices_with_k_set_bits(Nums, K, 0, 0).\n\nsum_indices_with_k_set_bits([], _K, _Index, Accumulator) ->\n    Accumulator;\nsum_indices_with_k_set_bits([Head | Tail], K, Index, Accumulator) ->\n    BitsSet = count_set_bits(Index, 0),\n    NewAccumulator = if\n        BitsSet == K -> Accumulator + Head;\n        true -> Accumulator\n    end,\n    sum_indices_with_k_set_bits(Tail, K, Index + 1, NewAccumulator).\n\ncount_set_bits(0, Count) ->\n    Count;\ncount_set_bits(N, Count) when N > 0 ->\n    NewCount = Count + (N band 1),\n    count_set_bits(N bsr 1, NewCount)."
}