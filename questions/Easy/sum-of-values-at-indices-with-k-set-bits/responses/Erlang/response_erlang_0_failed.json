{
    "status_code": 20,
    "lang": "erlang",
    "run_success": false,
    "compile_error": "Line 5: Char 10: syntax error before: '->'",
    "full_compile_error": "Line 5: Char 10: syntax error before: '->'\n%    5| driver() ->\n%     |          ^\nLine 1: Char 2: spec for undefined function sum_indices_with_k_set_bits/2\n%    1| -spec sum_indices_with_k_set_bits(Nums :: [integer()], K :: integer()) -> integer().\n%     |  ^\nLine 22: Char 13: function sum_indices_with_k_set_bits/2 undefined\n%   22|       Ret = sum_indices_with_k_set_bits(Param_1, Param_2),\n%     |             ^\nLine 39: Char 19: function driver/0 undefined\n%   39|   OK = case catch(driver()) of\n%     |                   ^",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3093",
    "task_finish_time": 1706690598352,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1161839712",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "-spec sum_indices_with_k_set_bits(Nums :: [integer()], K :: integer()) -> integer().\nsum_indices_with_k_set_bits(Nums, K) ->\n    % List comprehension to iterate over the indices and values, summing those values where the index has K set bits\n    lists:sum([Val || {Idx, Val} <- lists:zip(lists:seq(0, length(Nums) - 1), Nums), K == length([1 || <<B:1>> <= <<Idx:32>> , B == 1])]),"
}