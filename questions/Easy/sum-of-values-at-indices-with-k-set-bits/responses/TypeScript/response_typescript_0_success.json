{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "71 ms",
    "memory": 51816000,
    "question_id": "3093",
    "elapsed_time": 111,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706690232666,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 639,
    "total_testcases": 639,
    "runtime_percentile": 63.93469999999996,
    "status_memory": "51.8 MB",
    "memory_percentile": 22.951499999999974,
    "pretty_lang": "TypeScript",
    "submission_id": "1161836105",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function sumIndicesWithKSetBits(nums: number[], k: number): number {\n    // Helper function to count set bits in a number's binary representation\n    function countSetBits(n: number): number {\n        let count = 0;\n        while (n) {\n            count += n & 1; // Increment count if the least significant bit is 1\n            n >>= 1; // Right shift n to check the next bit\n        }\n        return count;\n    }\n\n    let sum = 0; // Initialize sum to accumulate required elements\n    // Iterate over the array indices\n    for (let i = 0; i < nums.length; i++) {\n        // If the current index has exactly k set bits, add the corresponding element to the sum\n        if (countSetBits(i) === k) {\n            sum += nums[i];\n        }\n    }\n    return sum; // Return the accumulated sum\n}"
}