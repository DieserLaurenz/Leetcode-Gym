{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "377 ms",
    "memory": 74084000,
    "question_id": "3093",
    "elapsed_time": 481,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706690679354,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 639,
    "total_testcases": 639,
    "runtime_percentile": 100,
    "status_memory": "74.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1161840543",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec sum_indices_with_k_set_bits(nums :: [integer], k :: integer) :: integer\n  def sum_indices_with_k_set_bits(nums, k) do\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce(0, fn {num, idx}, acc ->\n      if count_set_bits(idx) == k, do: acc + num, else: acc\n    end)\n  end\n\n  defp count_set_bits(n) do\n    n\n    |> Integer.to_string(2)\n    |> String.graphemes()\n    |> Enum.filter(&(&1 == \"1\"))\n    |> Enum.count()\n  end\nend"
}