{
    "status_code": 10,
    "lang": "php",
    "run_success": true,
    "status_runtime": "24 ms",
    "memory": 20200000,
    "question_id": "3093",
    "elapsed_time": 49,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706690265792,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 639,
    "total_testcases": 639,
    "runtime_percentile": 84.6154,
    "status_memory": "20.2 MB",
    "memory_percentile": 15.384700000000002,
    "pretty_lang": "PHP",
    "submission_id": "1161836459",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function sumIndicesWithKSetBits($nums, $k) {\n        $sum = 0;\n        foreach ($nums as $index => $value) {\n            if ($this->countSetBits($index) === $k) {\n                $sum += $value;\n            }\n        }\n        return $sum;\n    }\n\n    private function countSetBits($n) {\n        $count = 0;\n        while ($n) {\n            $count += $n & 1;\n            $n >>= 1;\n        }\n        return $count;\n    }\n}"
}