{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "373 ms",
    "memory": 72236000,
    "question_id": "3034",
    "elapsed_time": 543,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706627685901,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 807,
    "total_testcases": 807,
    "runtime_percentile": 100,
    "status_memory": "72.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1161132005",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_points(nums :: [[integer]]) :: integer\n  def number_of_points(nums) do\n    nums\n    |> Enum.sort()\n    |> merge_intervals()\n    |> Enum.map(fn {start, finish} -> finish - start + 1 end)\n    |> Enum.sum()\n  end\n\n  defp merge_intervals(nums) do\n    Enum.reduce(nums, [], fn [start, finish], acc ->\n      case acc do\n        [] ->\n          [{start, finish}]\n        [{prev_start, prev_finish} | t] when start <= prev_finish ->\n          [{prev_start, max(prev_finish, finish)} | t]\n        _ ->\n          [{start, finish} | acc]\n      end\n    end)\n    |> Enum.reverse()\n  end\nend"
}