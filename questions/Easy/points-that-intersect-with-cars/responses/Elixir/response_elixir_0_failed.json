{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 8: ** (FunctionClauseError) no function clause matching in anonymous fn/1 in Solution.number_of_points/1",
    "full_runtime_error": "Line 8: ** (FunctionClauseError) no function clause matching in anonymous fn/1 in Solution.number_of_points/1\n    The following arguments were given to anonymous fn/1 in Solution.number_of_points/1:\n        # 1\n        [1, 7]\n    solution.ex:8: anonymous fn/1 in Solution.number_of_points/1\n    (elixir 1.15.7) lib/enum.ex:1693: Enum.\"-map/2-lists^map/1-1-\"/2\n    solution.ex:8: Solution.number_of_points/1\n    solution.ex:45: Driver.consume_test_cases/2\n    solution.ex:33: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 72880000,
    "question_id": "3034",
    "elapsed_time": 336,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[3,6],[1,5],[4,7]]",
    "expected_output": "7",
    "task_finish_time": 1706627627305,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 807,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1161131159",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_points(nums :: [[integer]]) :: integer\n  def number_of_points(nums) do\n    # Sort intervals based on the start point.\n    nums\n    |> Enum.sort()\n    |> reduce_intervals()\n    |> Enum.map(fn {start, finish} -> finish - start + 1 end)\n    |> Enum.sum()\n  end\n\n  defp reduce_intervals(nums) do\n    # Use a fold to merge overlapping intervals and collect the total length.\n    Enum.reduce(nums, [], fn [start, finish], acc ->\n      case acc do\n        [] ->\n          [[start, finish]]\n        \n        [[prev_start, prev_finish] | t] = _acc ->\n          if start <= prev_finish do\n            [[prev_start, max(prev_finish, finish)] | t]\n          else\n            [[start, finish] | acc]\n          end\n      end\n    end)\n    |> Enum.reverse()\n  end\nend"
}