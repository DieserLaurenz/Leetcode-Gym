{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "266 ms",
    "memory": 59784000,
    "question_id": "3034",
    "elapsed_time": 1435,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706627581745,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 807,
    "total_testcases": 807,
    "runtime_percentile": 100,
    "status_memory": "59.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1161130584",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec number_of_points(Nums :: [[integer()]]) -> integer().\nnumber_of_points(Nums) ->\n    Sorted = lists:sort(fun([A1, _], [B1, _]) -> A1 < B1 end, Nums),\n    Merged = merge_intervals(Sorted, []),\n    lists:foldl(fun([Start, End], Acc) -> Acc + (End - Start + 1) end, 0, Merged).\n\nmerge_intervals([], Acc) ->\n    lists:reverse(Acc);\nmerge_intervals([Head|Tail], []) ->\n    merge_intervals(Tail, [Head]);\nmerge_intervals([[Start, End] | Tail], [[AccStart, AccEnd] | AccTail]) when Start =< AccEnd + 1 ->\n    NewEnd = erlang:max(End, AccEnd),\n    merge_intervals(Tail, [[AccStart, NewEnd] | AccTail]);\nmerge_intervals([Head | Tail], Acc) ->\n    merge_intervals(Tail, [Head | Acc])."
}