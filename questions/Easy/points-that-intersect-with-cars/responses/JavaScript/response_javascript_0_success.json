{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "66 ms",
    "memory": 51500000,
    "question_id": "3034",
    "elapsed_time": 115,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706617734471,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 807,
    "total_testcases": 807,
    "runtime_percentile": 61.805599999999984,
    "status_memory": "51.5 MB",
    "memory_percentile": 15.973199999999963,
    "pretty_lang": "JavaScript",
    "submission_id": "1161006222",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[][]} nums\n * @return {number}\n */\nvar numberOfPoints = function(nums) {\n    // Sort the cars based on their starting points.\n    nums.sort((a, b) => a[0] - b[0]);\n\n    let totalPoints = 0;\n    let prevEnd = -1; // Keeps track of the end of the last car processed\n\n    for (let i = 0; i < nums.length; i++) {\n        let start = nums[i][0];\n        let end = nums[i][1];\n\n        if (start > prevEnd) {\n            // If the current car starts after the last car ended, add all its points.\n            totalPoints += end - start + 1;\n        } else if (end > prevEnd) {\n            // If the current car overlaps with the last car, only add the non-overlapping points.\n            totalPoints += end - prevEnd;\n        }\n\n        // Update prevEnd to the max end point seen so far.\n        prevEnd = Math.max(prevEnd, end);\n    }\n\n    return totalPoints;\n};"
}