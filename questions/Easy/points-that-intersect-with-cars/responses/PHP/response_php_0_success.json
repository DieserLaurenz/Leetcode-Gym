{
    "status_code": 10,
    "lang": "php",
    "run_success": true,
    "status_runtime": "16 ms",
    "memory": 19844000,
    "question_id": "3034",
    "elapsed_time": 83,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706626930553,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 807,
    "total_testcases": 807,
    "runtime_percentile": 100,
    "status_memory": "19.8 MB",
    "memory_percentile": 33.33320000000002,
    "pretty_lang": "PHP",
    "submission_id": "1161121707",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[][] $nums\n     * @return Integer\n     */\n    function numberOfPoints($nums) {\n        // Sort intervals based on the start point\n        usort($nums, function($a, $b) {\n            return $a[0] - $b[0];\n        });\n        \n        // Initialize merged intervals\n        $merged = [];\n        foreach ($nums as $interval) {\n            // If merged is empty or current interval does not overlap with the last one in merged\n            if (empty($merged) || $merged[count($merged) - 1][1] < $interval[0]) {\n                array_push($merged, $interval);\n            } else {\n                // There's an overlap, so merge the current interval with the last one in merged\n                $merged[count($merged) - 1][1] = max($merged[count($merged) - 1][1], $interval[1]);\n            }\n        }\n        \n        // Count the number of points covered by the merged intervals\n        $count = 0;\n        foreach ($merged as $interval) {\n            $count += $interval[1] - $interval[0] + 1;\n        }\n        \n        return $count;\n    }\n}"
}