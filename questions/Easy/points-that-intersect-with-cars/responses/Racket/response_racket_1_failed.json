{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "-: contract violation",
    "full_runtime_error": "-: contract violation\n  expected: number?\n  given: #<procedure:+>\n  context...:\n   solution.rkt:1:0: number-of-points\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:24:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100160000,
    "question_id": "3034",
    "elapsed_time": 282,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[3,6],[1,5],[4,7]]",
    "expected_output": "7",
    "task_finish_time": 1706627487982,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 807,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1161129265",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-points nums)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  (define sorted-nums (sort nums (lambda (a b) (< (car a) (car b)))))\n  (define (merge-intervals intervals)\n    (foldl (lambda (interval acc)\n             (if (null? acc)\n                 (list interval)\n                 (let ((last (car acc)))\n                   (if (<= (car interval) (cadr last))\n                       (cons (list (car last) (max (cadr last) (cadr interval))) (cdr acc))\n                       (cons interval acc)))))\n           '()\n           intervals))\n  (define merged-intervals (merge-intervals sorted-nums))\n  (define (interval-length interval)\n    (- (cadr interval) (car interval) + 1))\n  (define (sum-intervals intervals)\n    (apply + (map interval-length intervals)))\n  (sum-intervals merged-intervals))"
}