{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "632 ms",
    "memory": 56968000,
    "question_id": "3034",
    "elapsed_time": 1301,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706627321975,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 807,
    "total_testcases": 807,
    "runtime_percentile": 100,
    "status_memory": "57 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1161127022",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n  def numberOfPoints(nums: List[List[Int]]): Int = {\n    // Step 1: Sort intervals by starting point and merge them\n    val sortedIntervals = nums.sortBy(_.head)\n    var mergedIntervals = List[List[Int]]()\n    sortedIntervals.foreach { interval =>\n      if (mergedIntervals.isEmpty || mergedIntervals.last(1) < interval.head) {\n        mergedIntervals = mergedIntervals :+ interval\n      } else {\n        val lastInterval = mergedIntervals.last\n        mergedIntervals = mergedIntervals.init :+ List(lastInterval.head, Math.max(lastInterval(1), interval(1)))\n      }\n    }\n\n    // Step 2: Count the points covered by each interval\n    mergedIntervals.foldLeft(0) { (acc, interval) =>\n      acc + (interval(1) - interval.head + 1)\n    }\n  }\n}"
}