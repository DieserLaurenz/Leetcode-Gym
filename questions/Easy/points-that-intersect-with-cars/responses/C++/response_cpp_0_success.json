{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 28188000,
    "question_id": "3034",
    "elapsed_time": 34,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706617513961,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 807,
    "total_testcases": 807,
    "runtime_percentile": 98.9459,
    "status_memory": "28.2 MB",
    "memory_percentile": 21.47530000000001,
    "pretty_lang": "C++",
    "submission_id": "1161003928",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfPoints(vector<vector<int>>& nums) {\n        // Step 1: Sort the nums array based on the starting points.\n        sort(nums.begin(), nums.end());\n        \n        int totalCovered = 0;\n        int currentStart = nums[0][0];\n        int currentEnd = nums[0][1];\n        \n        for (int i = 1; i < nums.size(); ++i) {\n            // If the current car overlaps or is consecutive with the previous, merge them.\n            if (nums[i][0] <= currentEnd + 1) {\n                currentEnd = max(currentEnd, nums[i][1]);\n            } else {\n                // Add the length of the previous interval to the total covered length.\n                totalCovered += currentEnd - currentStart + 1;\n                // Start a new interval.\n                currentStart = nums[i][0];\n                currentEnd = nums[i][1];\n            }\n        }\n        // Add the last interval's length to the total covered length.\n        totalCovered += currentEnd - currentStart + 1;\n        \n        return totalCovered;\n    }\n};"
}