{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "46 ms",
    "memory": 15248000,
    "question_id": "3034",
    "elapsed_time": 68,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706626964549,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 807,
    "total_testcases": 807,
    "runtime_percentile": 79.99989999999998,
    "status_memory": "15.2 MB",
    "memory_percentile": 73.33319999999998,
    "pretty_lang": "Swift",
    "submission_id": "1161122167",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func numberOfPoints(_ nums: [[Int]]) -> Int {\n        // Initialize a boolean array to mark the points that are covered, with a size based on the maximum possible point.\n        var covered = Array(repeating: false, count: 101)\n        \n        // Iterate through each car's range and mark the corresponding points as covered.\n        for car in nums {\n            for point in car[0]...car[1] {\n                covered[point] = true\n            }\n        }\n        \n        // Count and return the number of points that are marked as covered.\n        return covered.reduce(0) { $0 + ($1 ? 1 : 0) }\n    }\n}"
}