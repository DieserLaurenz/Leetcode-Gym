{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "81 ms",
    "memory": 53276000,
    "question_id": "3034",
    "elapsed_time": 133,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706626847074,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 807,
    "total_testcases": 807,
    "runtime_percentile": 14.705400000000061,
    "status_memory": "53.3 MB",
    "memory_percentile": 5.881900000000025,
    "pretty_lang": "TypeScript",
    "submission_id": "1161120625",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function numberOfPoints(nums: number[][]): number {\n    // Sort intervals based on the starting point.\n    nums.sort((a, b) => a[0] - b[0]);\n\n    let merged: number[][] = [];\n    for (let interval of nums) {\n        // If merged is empty or the current interval does not overlap with the last one in merged\n        if (!merged.length || merged[merged.length - 1][1] < interval[0]) {\n            merged.push(interval);\n        } else {\n            // If they overlap, merge them by updating the end of the last interval in merged\n            merged[merged.length - 1][1] = Math.max(merged[merged.length - 1][1], interval[1]);\n        }\n    }\n\n    // Calculate the total number of points covered by the merged intervals.\n    let totalPoints = 0;\n    for (let [start, end] of merged) {\n        totalPoints += end - start + 1;\n    }\n\n    return totalPoints;\n};"
}