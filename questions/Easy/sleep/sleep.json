{
    "acRate": 85.47178988326849,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2621",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Sleep",
    "titleSlug": "sleep",
    "topicTags": [],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} millis  * @return {Promise}  */ async function sleep(millis) {      }  /**   * let t = Date.now()  * sleep(100).then(() => console.log(Date.now() - t)) // 100  */"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "async function sleep(millis: number): Promise<void> {      }   /**   * let t = Date.now()  * sleep(100).then(() => console.log(Date.now() - t)) // 100  */"
        }
    ],
    "content": "Givena positive integer millis, write an asynchronous function that sleeps for millismilliseconds. It can resolve any value.  Example 1:  Input: millis = 100 Output: 100 Explanation: It should return a promise that resolves after 100ms. let t = Date.now(); sleep(100).then(() => {   console.log(Date.now() - t); // 100 });  Example 2:  Input: millis = 200 Output: 200 Explanation: It should return a promise that resolves after 200ms.   Constraints:  1 <= millis <= 1000  "
}