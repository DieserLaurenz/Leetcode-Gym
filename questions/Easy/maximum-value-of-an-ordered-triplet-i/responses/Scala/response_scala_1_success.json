{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "499 ms",
    "memory": 56156000,
    "question_id": "3154",
    "elapsed_time": 733,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706496967454,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 100,
    "status_memory": "56.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1159691983",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumTripletValue(nums: Array[Int]): Long = {\n        val n = nums.length\n        var maxProduct: Long = 0\n        // Arrays to keep track of the maximum value from the right\n        val maxRight = Array.fill[Long](n)(0)\n        \n        // Populate maxRight array\n        maxRight(n - 1) = nums(n - 1)\n        for (i <- (n - 2) to 0 by -1) {\n            maxRight(i) = math.max(maxRight(i + 1), nums(i))\n        }\n        \n        // Iterate through the array to find the maximum triplet value\n        for (j <- 1 until n - 1) {\n            var maxLeft = nums(0)\n            // Find the maximum value to the left of j\n            for (i <- 0 until j) {\n                maxLeft = math.max(maxLeft, nums(i))\n            }\n            // Calculate the triplet value if it's positive\n            val currentValue: Long = (maxLeft - nums(j)) * maxRight(j + 1)\n            if (currentValue > maxProduct) {\n                maxProduct = currentValue\n            }\n        }\n        \n        maxProduct\n    }\n}"
}