{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "344 ms",
    "memory": 100984000,
    "question_id": "3154",
    "elapsed_time": 442,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706497803852,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 100,
    "status_memory": "101 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1159699351",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-triplet-value nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([n (length nums)])\n    (let loop ([i 0] [max-value 0])\n      (if (= i (- n 2))\n          max-value\n          (let loop-j ([j (+ i 1)] [current-max max-value])\n            (if (= j (- n 1))\n                (loop (+ i 1) current-max)\n                (let loop-k ([k (+ j 1)] [inner-max current-max])\n                  (if (= k n)\n                      (loop-j (+ j 1) inner-max)\n                      (let ([value (* (- (list-ref nums i) (list-ref nums j)) (list-ref nums k))])\n                        (loop-k (+ k 1) (max inner-max (if (< value 0) 0 value))))))))))))"
}