{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "784 ms",
    "memory": 71940000,
    "question_id": "3154",
    "elapsed_time": 1136,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706501226504,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 100,
    "status_memory": "71.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1159732157",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_triplet_value(nums :: [integer]) :: integer\n  def maximum_triplet_value(nums) do\n    length = length(nums)\n    max_value = Enum.reduce(0..length-3, 0, fn i, acc ->\n      Enum.reduce(i+1..length-2, acc, fn j, acc_j ->\n        Enum.reduce(j+1..length-1, acc_j, fn k, acc_k ->\n          value = (Enum.at(nums, i) - Enum.at(nums, j)) * Enum.at(nums, k)\n          max(acc_k, value)\n        end)\n      end)\n    end)\n    max(0, max_value)\n  end\nend"
}