{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 9: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 9: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:9: anonymous fn/5 in Solution.maximum_triplet_value/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:6: Solution.maximum_triplet_value/1\n    solution.ex:31: Driver.consume_test_cases/2\n    solution.ex:19: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72704000,
    "question_id": "3154",
    "elapsed_time": 332,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1706500925987,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1159729110",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_triplet_value(nums :: [integer]) :: integer\n  def maximum_triplet_value(nums) do\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce(0, fn {num_k, k}, acc ->\n      Enum.reduce(0..k-1, acc, fn j, acc_j ->\n        Enum.reduce(0..j-1, acc_j, fn i, acc_i ->\n          max(acc_i, (nums[i] - nums[j]) * num_k)\n        end)\n      end)\n    end)\n    |> max(0)\n  end\nend"
}