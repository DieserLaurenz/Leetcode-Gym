{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "194 ms",
    "memory": 34936000,
    "question_id": "3154",
    "elapsed_time": 313,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706494088302,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 28.571499999999993,
    "status_memory": "34.9 MB",
    "memory_percentile": 71.42859999999999,
    "pretty_lang": "Kotlin",
    "submission_id": "1159668250",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumTripletValue(nums: IntArray): Long {\n        var maxVal = 0L // Use Long to avoid potential integer overflow\n        val n = nums.size\n\n        // Iterate through all possible triplets\n        for (i in 0 until n) {\n            for (j in i + 1 until n) {\n                for (k in j + 1 until n) {\n                    // Calculate the value of the current triplet\n                    val currentValue = (nums[i] - nums[j]).toLong() * nums[k]\n                    // Update maxVal if the current value is greater\n                    if (currentValue > maxVal) {\n                        maxVal = currentValue\n                    }\n                }\n            }\n        }\n\n        return maxVal\n    }\n}"
}