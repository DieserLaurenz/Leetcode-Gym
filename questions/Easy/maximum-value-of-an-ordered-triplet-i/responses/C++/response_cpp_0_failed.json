{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20932000,
    "question_id": "3154",
    "elapsed_time": 24,
    "compare_result
    "code_output": "42",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1706489527114,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1159632959",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long maximumTripletValue(vector<int>& nums) {\n        long long maxVal = 0;\n        int n = nums.size();\n        // Keep track of the maximum and second maximum value seen so far from the left\n        vector<int> maxLeft(n, 0), secondMaxLeft(n, 0);\n        maxLeft[0] = nums[0];\n        for (int i = 1; i < n; ++i) {\n            if (nums[i] > maxLeft[i - 1]) {\n                secondMaxLeft[i] = maxLeft[i - 1];\n                maxLeft[i] = nums[i];\n            } else {\n                maxLeft[i] = maxLeft[i - 1];\n                secondMaxLeft[i] = max(secondMaxLeft[i - 1], nums[i]);\n            }\n        }\n\n        for (int k = 2; k < n; ++k) {\n            // For each k, find the best possible (nums[i] - nums[j]) where i < j < k\n            // This can be done by considering the second maximum value to the left of k\n            // as nums[j] and the maximum value to the left of k as nums[i]\n            if (maxLeft[k - 1] > secondMaxLeft[k - 1]) {\n                long long currentValue = ((long long)maxLeft[k - 1] - secondMaxLeft[k - 1]) * nums[k];\n                maxVal = max(maxVal, currentValue);\n            }\n        }\n        return maxVal;\n    }\n};"
}