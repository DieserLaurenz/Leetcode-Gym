{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 20680000,
    "question_id": "3154",
    "elapsed_time": 21,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706490125490,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 84.331,
    "status_memory": "20.7 MB",
    "memory_percentile": 5.63360000000001,
    "pretty_lang": "C++",
    "submission_id": "1159637549",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long maximumTripletValue(vector<int>& nums) {\n        int n = nums.size();\n        long long result = 0;\n        // Precompute the maximum value to the right of each element\n        vector<int> maxRight(n);\n        maxRight[n - 1] = nums[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            maxRight[i] = max(maxRight[i + 1], nums[i]);\n        }\n\n        // Iterate through each possible middle element and calculate the maximum possible value\n        for (int j = 1; j < n - 1; ++j) {\n            int maxToLeft = *max_element(nums.begin(), nums.begin() + j);\n            int maxToRight = maxRight[j + 1];\n            long long currentValue = (long long)(maxToLeft - nums[j]) * maxToRight;\n            result = max(result, currentValue);\n        }\n\n        return result;\n    }\n};"
}