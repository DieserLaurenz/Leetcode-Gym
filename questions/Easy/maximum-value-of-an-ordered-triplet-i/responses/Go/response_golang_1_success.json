{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2436000,
    "question_id": "3154",
    "elapsed_time": 13,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706495529522,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 100,
    "status_memory": "2.4 MB",
    "memory_percentile": 10.0,
    "pretty_lang": "Go",
    "submission_id": "1159680034",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func maximumTripletValue(nums []int) int64 {\n    n := len(nums)\n    if n < 3 {\n        return 0\n    }\n\n    // Initialize maxVal to store the maximum value of the triplet.\n    maxVal := int64(0)\n\n    // Iterate from the second last element down to the first element.\n    for j := n - 2; j >= 1; j-- {\n        // Find the maximum value in nums[k] for k > j.\n        maxK := int64(0)\n        for k := j + 1; k < n; k++ {\n            if int64(nums[k]) > maxK {\n                maxK = int64(nums[k])\n            }\n        }\n\n        // For each j, find the best i (i < j) to maximize (nums[i] - nums[j]) * nums[k].\n        for i := 0; i < j; i++ {\n            // Calculate the current value for the triplet (i, j, k).\n            currentValue := int64(nums[i]-nums[j]) * maxK\n            if currentValue > maxVal {\n                maxVal = currentValue\n            }\n        }\n    }\n\n    return maxVal\n}"
}