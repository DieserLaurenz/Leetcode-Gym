{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 12: exception error: badarith",
    "full_runtime_error": "Line 12: exception error: badarith\n[{erlang,'-',[infinity],[{error_info,#{module => erl_erts_errors}}]},\n {solution,maximum_triplet_value,1,[{file,\"solution.erl\"},{line,12}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,18}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,47}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59432000,
    "question_id": "3154",
    "elapsed_time": 1549,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1706499905140,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1159718592",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_triplet_value(Nums :: [integer()]) -> integer().\nmaximum_triplet_value(Nums) ->\n    %% Initialize the maximum value as negative infinity (or a very small number)\n    Max = lists:foldl(fun(I, Acc) ->\n                          lists:foldl(fun(J, AccJ) ->\n                                          lists:foldl(fun(K, AccK) ->\n                                                          Val = (lists:nth(I, Nums) - lists:nth(J, Nums)) * lists:nth(K, Nums),\n                                                          %% Update maximum value if this triplet's value is greater\n                                                          max(AccK, Val)\n                                                      end, AccJ, lists:seq(J+1, length(Nums)))\n                                      end, Acc, lists:seq(I+1, length(Nums)-1))\n                      end, -infinity, lists:seq(1, length(Nums)-2)),\n    %% Return the maximum value, ensuring it's at least 0\n    max(0, Max)."
}