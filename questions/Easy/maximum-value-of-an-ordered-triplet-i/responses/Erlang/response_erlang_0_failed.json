{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 14: exception error: function_clause",
    "full_runtime_error": "Line 14: exception error: function_clause\n[{lists,nth_1,[1,[]],[{file,\"lists.erl\"},{line,202}]},\n {solution,'-maximum_triplet_value/1-fun-1-',3,\n              [{file,\"solution.erl\"},{line,14}]},\n {lists,foldl_1,3,[{file,\"lists.erl\"},{line,1599}]},\n {solution,maximum_triplet_value,1,[{file,\"solution.erl\"},{line,12}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,38}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,26}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,55}]},\n {init,start_em,1,[]}]",
    "status_runtime": "N/A",
    "memory": 59496000,
    "question_id": "3154",
    "elapsed_time": 1330,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1706499305665,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1159712852",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_triplet_value(Nums :: [integer()]) -> integer().\nmaximum_triplet_value(Nums) ->\n    Lists = lists,\n    MaxK = lists:duplicate(length(Nums), 0),\n    MaxJ = lists:duplicate(length(Nums), 0),\n    \n    %% Calculate max value for k for every index\n    MaxK1 = lists:foldl(fun(X, [H|T]) -> [lists:max([X, H]) | T] end, MaxK, lists:reverse(Nums)),\n    MaxK2 = lists:reverse(MaxK1),\n    \n    %% Calculate max value for (i-j)*k for every index\n    {_, _, MaxValue} = lists:foldl(\n        fun(X, {I, [H|T], Max}) ->\n            NewMax = lists:max([Max, (X - H) * lists:nth(I + 2, MaxK2)]),\n            {I + 1, [lists:max([X, H]) | T], NewMax}\n        end,\n        {1, MaxJ, 0},\n        Nums\n    ),\n    \n    %% Return max value or 0 if all values are negative\n    lists:max([0, MaxValue])."
}