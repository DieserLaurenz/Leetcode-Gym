{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "582 ms",
    "memory": 59340000,
    "question_id": "3154",
    "elapsed_time": 1718,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706500505728,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 100,
    "status_memory": "59.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1159724681",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec maximum_triplet_value(Nums :: [integer()]) -> integer().\nmaximum_triplet_value(Nums) ->\n    find_max_triplet(Nums, 0).\n\n%% Helper function to iterate over all triplets and find the maximum value.\nfind_max_triplet(Nums, MaxSoFar) ->\n    find_max_triplet(Nums, MaxSoFar, 0, length(Nums)).\n\nfind_max_triplet(_, MaxSoFar, I, Length) when I >= Length - 2 ->\n    %% Ensure the result is at least 0.\n    max(0, MaxSoFar);\nfind_max_triplet(Nums, MaxSoFar, I, Length) ->\n    find_max_triplet(Nums, find_max_j(Nums, MaxSoFar, I, I+1, Length), I+1, Length).\n\nfind_max_j(_, MaxSoFar, _, J, Length) when J >= Length - 1 ->\n    MaxSoFar;\nfind_max_j(Nums, MaxSoFar, I, J, Length) ->\n    find_max_j(Nums, find_max_k(Nums, MaxSoFar, I, J, J+1, Length), I, J+1, Length).\n\nfind_max_k(_, MaxSoFar, _, _, K, Length) when K >= Length ->\n    MaxSoFar;\nfind_max_k(Nums, MaxSoFar, I, J, K, Length) ->\n    IVal = lists:nth(I + 1, Nums),\n    JVal = lists:nth(J + 1, Nums),\n    KVal = lists:nth(K + 1, Nums),\n    Val = (IVal - JVal) * KVal,\n    NewMax = max(MaxSoFar, Val),\n    find_max_k(Nums, NewMax, I, J, K+1, Length)."
}