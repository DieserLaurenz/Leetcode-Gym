{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41980000,
    "display_runtime": "1",
    "question_id": "3154",
    "elapsed_time": 131,
    "compare_result
    "code_output": "42",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1706490545270,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 262,
    "total_testcases": 564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1159640675",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long maximumTripletValue(int[] nums) {\n        long maxProduct = 0;\n        // Arrays to store the max difference up to the current index\n        int[] maxDiff = new int[nums.length];\n        \n        // Initialize the first element of maxDiff\n        maxDiff[0] = Integer.MIN_VALUE;  // Since there's no element before index 0\n        \n        // Populate the maxDiff array with the maximum difference seen so far\n        for (int j = 1; j < nums.length; j++) {\n            maxDiff[j] = Math.max(maxDiff[j - 1], nums[j - 1] - nums[j]);\n        }\n        \n        // Iterate through the array to find the maximum product\n        for (int k = 2; k < nums.length; k++) {\n            if (maxDiff[k - 1] > 0) {  // Ensure the difference is positive\n                maxProduct = Math.max(maxProduct, (long) maxDiff[k - 1] * nums[k]);\n            }\n        }\n        \n        return maxProduct;\n    }\n}"
}