{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "2 ms",
    "memory": 2240000,
    "question_id": "3154",
    "elapsed_time": 13,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706497387792,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 45.4545,
    "status_memory": "2.2 MB",
    "memory_percentile": 27.272799999999993,
    "pretty_lang": "Rust",
    "submission_id": "1159695713",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_triplet_value(nums: Vec<i32>) -> i64 {\n        let mut max_value = 0i64; // Use i64 for the potential large values of the product\n        let n = nums.len();\n        \n        // Iterate over k from the end to the start\n        for k in 2..n {\n            let mut max_diff = 0; // Track the maximum difference for this k\n            // Iterate over i and j where i < j < k\n            for i in 0..k {\n                for j in (i+1)..k {\n                    let diff = nums[i] - nums[j];\n                    max_diff = max_diff.max(diff);\n                }\n            }\n            // Calculate the value of the triplet and update max_value\n            max_value = max_value.max((max_diff as i64) * (nums[k] as i64));\n        }\n        \n        max_value\n    }\n}"
}