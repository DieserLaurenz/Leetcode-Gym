{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "10 ms",
    "memory": 5980000,
    "question_id": "3154",
    "elapsed_time": 21,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706491567396,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 564,
    "total_testcases": 564,
    "runtime_percentile": 29.545500000000008,
    "status_memory": "6 MB",
    "memory_percentile": 97.7273,
    "pretty_lang": "C",
    "submission_id": "1159648568",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "long long maximumTripletValue(int* nums, int numsSize) {\n    long long maxVal = 0;\n    // Iterate through all possible triplets\n    for (int i = 0; i < numsSize - 2; i++) {\n        for (int j = i + 1; j < numsSize - 1; j++) {\n            for (int k = j + 1; k < numsSize; k++) {\n                long long currentValue = (long long)(nums[i] - nums[j]) * nums[k];\n                if (currentValue > maxVal) {\n                    maxVal = currentValue;\n                }\n            }\n        }\n    }\n    return maxVal;\n}"
}