{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "60 ms",
    "memory": 42836000,
    "question_id": "3176",
    "elapsed_time": 134,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706565193363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 81.39520000000002,
    "status_memory": "42.8 MB",
    "memory_percentile": 9.302200000000004,
    "pretty_lang": "C#",
    "submission_id": "1160476415",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumSum(int[] nums) {\n        int minSum = int.MaxValue; // Step 1\n\n        // Step 2\n        for (int i = 0; i < nums.Length - 2; i++) {\n            for (int j = i + 1; j < nums.Length - 1; j++) {\n                for (int k = j + 1; k < nums.Length; k++) {\n                    // Step 3\n                    if (nums[i] < nums[j] && nums[k] < nums[j]) {\n                        int sum = nums[i] + nums[j] + nums[k]; // Calculate the sum of the triplet\n                        minSum = Math.Min(minSum, sum); // Step 4\n                    }\n                }\n            }\n        }\n\n        // Step 5\n        return minSum == int.MaxValue ? -1 : minSum;\n    }\n}"
}