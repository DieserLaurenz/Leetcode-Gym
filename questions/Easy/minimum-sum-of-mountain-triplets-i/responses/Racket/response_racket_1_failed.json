{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`",
    "full_compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 24\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3176",
    "task_finish_time": 1706597192721,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1160787587",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([len (length nums)])\n    (let ([left-min (make-vector len #f)]\n          [right-min (make-vector len #f)])\n      (let loop-left ([i 1] [current-min (list-ref nums 0)])\n        (when (< i len)\n          (vector-set! left-min i current-min)\n          (loop-left (+ i 1) (min current-min (list-ref nums i)))))\n      (let loop-right ([i (- len 2)] [current-min (list-ref nums (- len 1))])\n        (when (>= i 0)\n          (vector-set! right-min i current-min)\n          (loop-right (- i 1) (min current-min (list-ref nums i)))))\n      (let find-minimum ([i 1] [min-sum #f])\n        (if (< i (- len 1))\n            (let ([left (vector-ref left-min i)]\n                  [right (vector-ref right-min i)]\n                  [current (list-ref nums i)])\n              (if (and (not (eq? left #f)) (not (eq? right #f)) (< left current) (< right current))\n                  (let ([sum (+ left current right)])\n                    (find-minimum (+ i 1) (if (or (eq? min-sum #f) (< sum min-sum)) sum min-sum)))\n                  (find-minimum (+ i 1) min-sum)))\n            (if (eq? min-sum #f) -1 min-sum)))))"
}