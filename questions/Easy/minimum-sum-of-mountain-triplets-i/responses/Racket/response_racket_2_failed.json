{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`",
    "full_compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 18\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3176",
    "task_finish_time": 1706597239303,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1160788198",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([inf (apply max nums) + 1]) ; Define an \"infinite\" value larger than any in nums\n    (let loop ([i 0] [min-sum inf])\n      (if (< i (length nums))\n          (let inner-loop ([j (+ i 1)] [min-sum min-sum])\n            (if (< j (length nums))\n                (let inner-loop-k ([k (+ j 1)] [min-sum min-sum])\n                  (if (< k (length nums))\n                      (let ([sum (if (and (< (list-ref nums i) (list-ref nums j))\n                                           (> (list-ref nums j) (list-ref nums k)))\n                                     (+ (list-ref nums i) (list-ref nums j) (list-ref nums k))\n                                     inf)])\n                        (inner-loop-k (+ k 1) (min sum min-sum)))\n                      (inner-loop (+ j 1) min-sum)))\n                (loop (+ i 1) min-sum)))\n          (if (= min-sum inf) -1 min-sum))))"
}