{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "68 ms",
    "memory": 51460000,
    "question_id": "3176",
    "elapsed_time": 87,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706596339322,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 39.0249,
    "status_memory": "51.5 MB",
    "memory_percentile": 6.09820000000002,
    "pretty_lang": "JavaScript",
    "submission_id": "1160776549",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumSum = function(nums) {\n    let minSum = Infinity; // Initialize minSum to Infinity to easily find the minimum\n    \n    // Iterate through each possible triplet (i, j, k)\n    for (let i = 0; i < nums.length - 2; i++) {\n        for (let j = i + 1; j < nums.length - 1; j++) {\n            for (let k = j + 1; k < nums.length; k++) {\n                // Check if current triplet is a mountain\n                if (nums[i] < nums[j] && nums[k] < nums[j]) {\n                    // Calculate sum of the current triplet\n                    const sum = nums[i] + nums[j] + nums[k];\n                    // Update minSum if the current sum is less than the minimum found so far\n                    minSum = Math.min(minSum, sum);\n                }\n            }\n        }\n    }\n    \n    // Return minSum if a mountain triplet was found, else return -1\n    return minSum === Infinity ? -1 : minSum;\n};"
}