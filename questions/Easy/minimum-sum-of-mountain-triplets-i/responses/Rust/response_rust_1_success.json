{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2144000,
    "question_id": "3176",
    "elapsed_time": 16,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706596972829,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 100,
    "status_memory": "2.1 MB",
    "memory_percentile": 63.636399999999995,
    "pretty_lang": "Rust",
    "submission_id": "1160784725",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_sum(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        let mut min_left = vec![i32::MAX; n];\n        let mut min_right = vec![i32::MAX; n];\n        let mut result = i32::MAX;\n\n        // Compute the minimum values to the left of each index\n        for i in 1..n {\n            min_left[i] = min_left[i - 1].min(nums[i - 1]);\n        }\n\n        // Compute the minimum values to the right of each index\n        for i in (0..n - 1).rev() {\n            min_right[i] = min_right[i + 1].min(nums[i + 1]);\n        }\n\n        // Check for potential peaks and calculate the sum of the mountain triplet\n        for i in 1..n - 1 {\n            if nums[i] > min_left[i] && nums[i] > min_right[i] {\n                let sum = nums[i] + min_left[i] + min_right[i];\n                result = result.min(sum);\n            }\n        }\n\n        if result == i32::MAX {\n            -1\n        } else {\n            result\n        }\n    }\n}"
}