{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211740000,
    "question_id": "3176",
    "elapsed_time": 258,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[5,4,8,7,10,2]",
    "expected_output": "13",
    "task_finish_time": 1706596731202,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 429,
    "total_testcases": 724,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1160781610",
    "input_formatted": "[5,4,8,7,10,2]",
    "input": "[5,4,8,7,10,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_sum(nums)\n    min_sum = Float::INFINITY\n    n = nums.length\n    \n    (1..(n-2)).each do |j|\n        max_left = nil\n        max_right = nil\n        \n        # Find the largest value to the left of j that is less than nums[j]\n        (0...j).each do |i|\n            if nums[i] < nums[j]\n                if max_left.nil? || nums[i] > nums[max_left]\n                    max_left = i\n                end\n            end\n        end\n        \n        # Find the largest value to the right of j that is less than nums[j]\n        ((j+1)...n).each do |k|\n            if nums[k] < nums[j]\n                if max_right.nil? || nums[k] > nums[max_right]\n                    max_right = k\n                end\n            end\n        end\n        \n        # If we found a valid left and right, check if this is the minimum sum\n        if !max_left.nil? && !max_right.nil?\n            current_sum = nums[j] + nums[max_left] + nums[max_right]\n            min_sum = [min_sum, current_sum].min\n        end\n    end\n    \n    # Return the minimum sum found, or -1 if no mountain triplet exists\n    min_sum == Float::INFINITY ? -1 : min_sum\nend"
}