{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "71 ms",
    "memory": 52548000,
    "question_id": "3176",
    "elapsed_time": 153,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706596391546,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 56.0,
    "status_memory": "52.5 MB",
    "memory_percentile": 8.0,
    "pretty_lang": "TypeScript",
    "submission_id": "1160777239",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function minimumSum(nums: number[]): number {\n    let n = nums.length;\n    let leftMin = new Array(n).fill(Number.MAX_VALUE);\n    let rightMin = new Array(n).fill(Number.MAX_VALUE);\n    \n    // Fill leftMin array\n    let minLeft = Number.MAX_VALUE;\n    for (let i = 1; i < n; i++) {\n        minLeft = Math.min(minLeft, nums[i-1]);\n        leftMin[i] = minLeft;\n    }\n    \n    // Fill rightMin array\n    let minRight = Number.MAX_VALUE;\n    for (let i = n - 2; i >= 0; i--) {\n        minRight = Math.min(minRight, nums[i+1]);\n        rightMin[i] = minRight;\n    }\n    \n    // Find the minimum sum of a mountain triplet\n    let minSum = Number.MAX_VALUE;\n    for (let j = 1; j < n - 1; j++) {\n        if (nums[j] > leftMin[j] && nums[j] > rightMin[j]) {\n            minSum = Math.min(minSum, nums[j] + leftMin[j] + rightMin[j]);\n        }\n    }\n    \n    // Return the minimum sum if found, otherwise return -1\n    return minSum === Number.MAX_VALUE ? -1 : minSum;\n}"
}