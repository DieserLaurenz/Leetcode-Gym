{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "174 ms",
    "memory": 34988000,
    "question_id": "3176",
    "elapsed_time": 178,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706596568583,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 57.14289999999999,
    "status_memory": "35 MB",
    "memory_percentile": 71.4286,
    "pretty_lang": "Kotlin",
    "submission_id": "1160779534",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumSum(nums: IntArray): Int {\n        var minSum = Int.MAX_VALUE\n        for (j in 1 until nums.size - 1) {\n            var leftMin = Int.MAX_VALUE\n            var rightMin = Int.MAX_VALUE\n            for (i in 0 until j) {\n                if (nums[i] < nums[j]) {\n                    leftMin = minOf(leftMin, nums[i])\n                }\n            }\n            for (k in j + 1 until nums.size) {\n                if (nums[k] < nums[j]) {\n                    rightMin = minOf(rightMin, nums[k])\n                }\n            }\n            if (leftMin < Int.MAX_VALUE && rightMin < Int.MAX_VALUE) {\n                minSum = minOf(minSum, leftMin + nums[j] + rightMin)\n            }\n        }\n        return if (minSum == Int.MAX_VALUE) -1 else minSum\n    }\n}"
}