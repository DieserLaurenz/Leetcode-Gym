{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "19 ms",
    "memory": 11772000,
    "question_id": "3176",
    "elapsed_time": 40,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708724538165,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 97.1831,
    "status_memory": "11.8 MB",
    "memory_percentile": 40.845000000000006,
    "pretty_lang": "Python",
    "submission_id": "1184343777",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        left_min = [float('inf')] * len(nums)\n        right_min = [float('inf')] * len(nums)\n        min_sum = float('inf')\n\n        for i in range(1, len(nums)):\n            left_min[i] = min(left_min[i - 1], nums[i - 1])\n\n        for i in range(len(nums) - 2, -1, -1):\n            right_min[i] = min(right_min[i + 1], nums[i + 1])\n\n        for j in range(1, len(nums) - 1):\n            if nums[j] > left_min[j] and nums[j] > right_min[j]:\n                min_sum = min(min_sum, left_min[j] + nums[j] + right_min[j])\n\n        return min_sum if min_sum != float('inf') else -1"
}