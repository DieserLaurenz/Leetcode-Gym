{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15436000,
    "question_id": "3176",
    "elapsed_time": 28,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[5,4,8,7,10,2]",
    "expected_output": "13",
    "task_finish_time": 1706596479301,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 410,
    "total_testcases": 724,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1160778401",
    "input_formatted": "[5,4,8,7,10,2]",
    "input": "[5,4,8,7,10,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumSum(_ nums: [Int]) -> Int {\n        let n = nums.count\n        var minLeft = Array(repeating: Int.max, count: n)\n        var minRight = Array(repeating: Int.max, count: n)\n        \n        // Compute minimum values to the left of each element\n        for i in 1..<n {\n            minLeft[i] = min(minLeft[i-1], nums[i-1])\n        }\n        \n        // Compute minimum values to the right of each element\n        for i in stride(from: n - 2, through: 0, by: -1) {\n            minRight[i] = min(minRight[i+1], nums[i+1])\n        }\n        \n        var minSum = Int.max\n        for j in 1..<n-1 {\n            if nums[j] > nums[j-1] && nums[j] > nums[j+1] && minLeft[j] < nums[j] && minRight[j] < nums[j] {\n                let sum = minLeft[j] + nums[j] + minRight[j]\n                minSum = min(minSum, sum)\n            }\n        }\n        \n        return minSum == Int.max ? -1 : minSum\n    }\n}"
}