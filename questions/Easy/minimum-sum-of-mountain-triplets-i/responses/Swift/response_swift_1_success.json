{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "6 ms",
    "memory": 15544000,
    "question_id": "3176",
    "elapsed_time": 21,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706596524982,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 100,
    "status_memory": "15.5 MB",
    "memory_percentile": 40.0,
    "pretty_lang": "Swift",
    "submission_id": "1160778995",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumSum(_ nums: [Int]) -> Int {\n        let n = nums.count\n        var minSum = Int.max\n        \n        // Find the valid mountain triplet\n        for j in 1..<n-1 {\n            var minLeft = Int.max\n            var minRight = Int.max\n            \n            // Find the smallest value to the left of j that is less than nums[j]\n            for i in 0..<j {\n                if nums[i] < nums[j] {\n                    minLeft = min(minLeft, nums[i])\n                }\n            }\n            \n            // Find the smallest value to the right of j that is less than nums[j]\n            for k in (j+1)..<n {\n                if nums[k] < nums[j] {\n                    minRight = min(minRight, nums[k])\n                }\n            }\n            \n            // If both minLeft and minRight are found, calculate the sum\n            if minLeft != Int.max && minRight != Int.max {\n                let sum = minLeft + nums[j] + minRight\n                minSum = min(minSum, sum)\n            }\n        }\n        \n        return minSum == Int.max ? -1 : minSum\n    }\n}"
}