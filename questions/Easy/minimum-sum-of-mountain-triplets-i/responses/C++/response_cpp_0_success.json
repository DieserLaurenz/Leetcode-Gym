{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 23408000,
    "question_id": "3176",
    "elapsed_time": 25,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706565052010,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 78.9602,
    "status_memory": "23.4 MB",
    "memory_percentile": 10.398899999999987,
    "pretty_lang": "C++",
    "submission_id": "1160475191",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <limits>\n\nclass Solution {\npublic:\n    int minimumSum(vector<int>& nums) {\n        int n = nums.size();\n        int minSum = INT_MAX;\n        bool found = false;\n        \n        for (int j = 1; j < n - 1; ++j) {\n            int leftMin = INT_MAX;\n            int rightMin = INT_MAX;\n            \n            // Find the smallest on the left\n            for (int i = 0; i < j; ++i) {\n                if (nums[i] < nums[j]) {\n                    leftMin = min(leftMin, nums[i]);\n                }\n            }\n            \n            // Find the smallest on the right\n            for (int k = j + 1; k < n; ++k) {\n                if (nums[k] < nums[j]) {\n                    rightMin = min(rightMin, nums[k]);\n                }\n            }\n            \n            // If valid mountain, update minSum\n            if (leftMin != INT_MAX && rightMin != INT_MAX) {\n                found = true;\n                minSum = min(minSum, leftMin + nums[j] + rightMin);\n            }\n        }\n        \n        return found ? minSum : -1;\n    }\n};"
}