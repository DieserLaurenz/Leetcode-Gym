{
    "status_code": 10,
    "lang": "php",
    "run_success": true,
    "status_runtime": "10 ms",
    "memory": 20000000,
    "question_id": "3176",
    "elapsed_time": 116,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706596439513,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 100,
    "status_memory": "20 MB",
    "memory_percentile": 100,
    "pretty_lang": "PHP",
    "submission_id": "1160777875",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumSum($nums) {\n        $minSum = PHP_INT_MAX;\n        $n = count($nums);\n        \n        // Precompute right min values for each index\n        $rightMin = array_fill(0, $n, PHP_INT_MAX);\n        for ($i = $n - 2; $i >= 0; $i--) {\n            $rightMin[$i] = min($rightMin[$i + 1], $nums[$i + 1]);\n        }\n\n        for ($j = 1; $j < $n - 1; $j++) {\n            $leftMin = PHP_INT_MAX;\n            // Find the minimum value in the left part of the current index\n            for ($i = 0; $i < $j; $i++) {\n                if ($nums[$i] < $nums[$j]) {\n                    $leftMin = min($leftMin, $nums[$i]);\n                }\n            }\n\n            // Check if there's a smaller value on the right\n            if ($nums[$j] > $rightMin[$j] && $leftMin < $nums[$j]) {\n                $minSum = min($minSum, $leftMin + $nums[$j] + $rightMin[$j]);\n            }\n        }\n\n        return $minSum == PHP_INT_MAX ? -1 : $minSum;\n    }\n}"
}