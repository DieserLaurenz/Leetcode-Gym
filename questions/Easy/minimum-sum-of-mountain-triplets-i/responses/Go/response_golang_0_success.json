{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2332000,
    "question_id": "3176",
    "elapsed_time": 12,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706596664242,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 724,
    "total_testcases": 724,
    "runtime_percentile": 100,
    "status_memory": "2.3 MB",
    "memory_percentile": 52.6316,
    "pretty_lang": "Go",
    "submission_id": "1160780746",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func minimumSum(nums []int) int {\n    minSum := -1\n    for j := 1; j < len(nums)-1; j++ {\n        minLeft := -1\n        minRight := -1\n        // Find the minimum value to the left of j that is less than nums[j]\n        for i := 0; i < j; i++ {\n            if nums[i] < nums[j] {\n                if minLeft == -1 || nums[i] + nums[j] < minLeft + nums[j] {\n                    minLeft = nums[i]\n                }\n            }\n        }\n        // Find the minimum value to the right of j that is less than nums[j]\n        for k := j + 1; k < len(nums); k++ {\n            if nums[k] < nums[j] {\n                if minRight == -1 || nums[k] + nums[j] < minRight + nums[j] {\n                    minRight = nums[k]\n                }\n            }\n        }\n        // If both sides are valid, update the minimum sum\n        if minLeft != -1 && minRight != -1 {\n            sum := minLeft + nums[j] + minRight\n            if minSum == -1 || sum < minSum {\n                minSum = sum\n            }\n        }\n    }\n    return minSum\n}"
}