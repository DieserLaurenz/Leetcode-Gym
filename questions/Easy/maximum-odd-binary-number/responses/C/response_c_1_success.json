{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 5516000,
    "question_id": "3055",
    "elapsed_time": 20,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706463736016,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 32.0754,
    "status_memory": "5.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "C",
    "submission_id": "1159393219",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "char* maximumOddBinaryNumber(char* s) {\n    // Count the number of '1's in the string\n    int countOnes = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (s[i] == '1') {\n            countOnes++;\n        }\n    }\n    \n    // Allocate memory for the result string\n    // +1 for null terminator\n    char* result = (char*)malloc(strlen(s) + 1);\n    int index = 0;\n    \n    // Fill the result with '1's first, except one '1' that goes to the end\n    for (int i = 0; i < countOnes - 1; i++) {\n        result[index++] = '1';\n    }\n    \n    // Then fill with '0's up to the second last position\n    for (int i = countOnes - 1; i < strlen(s) - 1; i++) {\n        result[index++] = '0';\n    }\n    \n    // Ensure the last digit is '1' to make it an odd number\n    result[index++] = '1';\n    \n    // Null terminate the string\n    result[index] = '\\0';\n    \n    return result;\n}"
}