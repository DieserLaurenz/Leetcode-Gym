{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "308 ms",
    "memory": 59860000,
    "question_id": "3055",
    "elapsed_time": 1473,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706472379249,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 100,
    "status_memory": "59.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1159498914",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec maximum_odd_binary_number(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nmaximum_odd_binary_number(S) ->\n    % Convert binary to list to work with individual characters\n    BinaryList = binary_to_list(S),\n    % Count the number of '1's in the list\n    Ones = length([X || X <- BinaryList, X == $1]),\n    % Calculate the number of '0's\n    Zeros = length(BinaryList) - Ones,\n    % Create the maximum odd binary number\n    % Place all '1's except one at the beginning, fill with '0's, ensure last digit is '1'\n    MaxOddBinaryList = lists:duplicate(Ones - 1, $1) ++ lists:duplicate(Zeros, $0) ++ [$1],\n    % Convert list back to binary\n    list_to_binary(MaxOddBinaryList)."
}