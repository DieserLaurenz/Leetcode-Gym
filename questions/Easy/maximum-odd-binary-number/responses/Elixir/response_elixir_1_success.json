{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "380 ms",
    "memory": 72532000,
    "question_id": "3055",
    "elapsed_time": 461,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706473278362,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 100,
    "status_memory": "72.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1159507755",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_odd_binary_number(s :: String.t) :: String.t\n  def maximum_odd_binary_number(s) do\n    # Convert the string into a list of characters (graphemes)\n    graphemes = String.graphemes(s)\n    # Count the number of '1's\n    ones = Enum.filter(graphemes, fn x -> x == \"1\" end) |> Enum.count()\n    # Count the number of '0's\n    zeros = Enum.filter(graphemes, fn x -> x == \"0\" end) |> Enum.count()\n    # Construct the maximum odd binary number\n    result = String.duplicate(\"1\", ones - 1) <> String.duplicate(\"0\", zeros) <> \"1\"\n  end\nend"
}