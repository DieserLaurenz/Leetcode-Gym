{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (UndefinedFunctionError) function String.count/2 is undefined or private",
    "full_runtime_error": "Line 5: ** (UndefinedFunctionError) function String.count/2 is undefined or private\n    (elixir 1.15.7) String.count(\"010\", \"1\")\n    solution.ex:5: Solution.maximum_odd_binary_number/1\n    solution.ex:29: Driver.consume_test_cases/2\n    solution.ex:17: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 72988000,
    "question_id": "3055",
    "elapsed_time": 357,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"010\"",
    "expected_output": "\"001\"",
    "task_finish_time": 1706473237262,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 985,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1159507335",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_odd_binary_number(s :: String.t) :: String.t\n  def maximum_odd_binary_number(s) do\n    # Count the number of '1's in the string\n    ones = String.count(s, \"1\")\n    # Count the number of '0's in the string\n    zeros = String.length(s) - ones\n    # Create the maximum odd binary number\n    # If there is more than one '1', place all '0's to the left and '1's to the right, except one '1' at the end.\n    # If there is exactly one '1', it will automatically be placed at the end.\n    result = String.duplicate(\"0\", zeros) <> String.duplicate(\"1\", ones - 1) <> \"1\"\n  end\nend"
}