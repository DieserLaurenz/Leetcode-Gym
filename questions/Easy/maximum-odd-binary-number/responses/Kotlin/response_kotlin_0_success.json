{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "166 ms",
    "memory": 37272000,
    "question_id": "3055",
    "elapsed_time": 566,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706463992609,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 100,
    "status_memory": "37.3 MB",
    "memory_percentile": 72.72729999999999,
    "pretty_lang": "Kotlin",
    "submission_id": "1159396728",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumOddBinaryNumber(s: String): String {\n        // Count the number of '1's and '0's in the input string\n        val ones = s.count { it == '1' }\n        val zeros = s.length - ones\n        \n        // If there's only one '1', it must be at the end, the rest are '0's\n        if (ones == 1) {\n            return \"0\".repeat(zeros) + \"1\"\n        } else {\n            // Place all '1's at the start, except one to ensure the number is odd,\n            // followed by all '0's, and finally the last '1' at the end.\n            return \"1\".repeat(ones - 1) + \"0\".repeat(zeros) + \"1\"\n        }\n    }\n}"
}