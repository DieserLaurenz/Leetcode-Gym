{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "7 ms",
    "memory": 3916000,
    "question_id": "3055",
    "elapsed_time": 15,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706464076255,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 19.0475,
    "status_memory": "3.9 MB",
    "memory_percentile": 19.0475,
    "pretty_lang": "Go",
    "submission_id": "1159397935",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func maximumOddBinaryNumber(s string) string {\n    // Count the number of '1's and '0's in the string\n    ones, zeros := 0, 0\n    for _, c := range s {\n        if c == '1' {\n            ones++\n        } else {\n            zeros++\n        }\n    }\n\n    // The strategy is to place all '1's at the beginning except one, \n    // which should be at the end to ensure the number is odd.\n    // All '0's should be placed in the middle.\n    result := \"\"\n    for i := 0; i < ones-1; i++ {\n        result += \"1\"\n    }\n    for i := 0; i < zeros; i++ {\n        result += \"0\"\n    }\n    // Ensure there is at least one '1' at the end to make the number odd.\n    if ones > 0 {\n        result += \"1\"\n    }\n\n    return result\n}"
}