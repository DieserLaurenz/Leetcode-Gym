{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2164000,
    "question_id": "3055",
    "elapsed_time": 13,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706464354291,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 100,
    "status_memory": "2.2 MB",
    "memory_percentile": 45.0,
    "pretty_lang": "Rust",
    "submission_id": "1159401780",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_odd_binary_number(s: String) -> String {\n        let ones = s.chars().filter(|&c| c == '1').count();\n        // Ensure at least one '1' is at the end to make the number odd\n        // Place the rest of the '1's at the beginning to maximize the value\n        let zeros = s.len() - ones;\n        \"1\".repeat(ones - 1) + &\"0\".repeat(zeros) + \"1\"\n    }\n}"
}