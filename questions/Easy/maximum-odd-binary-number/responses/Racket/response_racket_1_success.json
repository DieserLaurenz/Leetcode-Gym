{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "207 ms",
    "memory": 101032000,
    "question_id": "3055",
    "elapsed_time": 335,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706466026227,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 100,
    "status_memory": "101 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1159425333",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-odd-binary-number s)\n  (-> string? string?)\n  (let* ((char-list (string->list s))\n         (ones (count (lambda (c) (char=? c #\\1)) char-list))\n         (zeros (count (lambda (c) (char=? c #\\0)) char-list))\n         (max-odd-binary (list->string (append (make-list (- ones 1) #\\1)\n                                               (make-list zeros #\\0)\n                                               (list #\\1)))))\n    max-odd-binary))"
}