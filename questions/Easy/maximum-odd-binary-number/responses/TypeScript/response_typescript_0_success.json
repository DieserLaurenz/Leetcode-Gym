{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "74 ms",
    "memory": 53904000,
    "question_id": "3055",
    "elapsed_time": 103,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706463869889,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 41.37899999999998,
    "status_memory": "53.9 MB",
    "memory_percentile": 6.896299999999982,
    "pretty_lang": "TypeScript",
    "submission_id": "1159395034",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function maximumOddBinaryNumber(s: string): string {\n    // Count the number of '1's in the string\n    const ones = s.split('').filter(c => c === '1').length;\n    // Count the number of '0's in the string\n    const zeros = s.length - ones;\n    // The strategy is to put all '1's at the beginning followed by '0's,\n    // ensuring the last digit is '1' to make it odd.\n    // Since at least one '1' exists, we adjust the count for leading '1's.\n    return '1'.repeat(ones - 1) + '0'.repeat(zeros) + '1';\n};"
}