{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "74 ms",
    "memory": 211812000,
    "question_id": "3055",
    "elapsed_time": 274,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706472338267,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 66.66669999999999,
    "status_memory": "211.8 MB",
    "memory_percentile": 66.66669999999999,
    "pretty_lang": "Ruby",
    "submission_id": "1159498514",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {String} s\n# @return {String}\ndef maximum_odd_binary_number(s)\n    # Count the number of '1's in the string\n    ones = s.count('1')\n    # Since we need to make the maximum odd binary number, we ensure\n    # that one '1' is at the end, and the rest are at the beginning.\n    # The number of zeros is the total length minus the number of '1's.\n    zeros = s.length - ones\n    # Create the maximum odd binary number by placing all '1's (minus one for the end)\n    # at the beginning, followed by all '0's, and a '1' at the end.\n    '1' * (ones - 1) + '0' * zeros + '1'\nend"
}