{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "528 ms",
    "memory": 54484000,
    "question_id": "3055",
    "elapsed_time": 871,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706464233419,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 100,
    "status_memory": "54.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1159400116",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumOddBinaryNumber(s: String): String = {\n        // Count the number of '1's in the input string\n        val ones = s.count(_ == '1')\n        \n        // If there's only one '1', the result is straightforward, as all '0's will precede it\n        if (ones == 1) {\n            \"0\" * (s.length - 1) + \"1\"\n        } else {\n            // Place all '1's at the beginning except one, and fill the rest with '0's\n            // Subtracting one '1' for placing it at the end to ensure the number is odd\n            \"1\" * (ones - 1) + \"0\" * (s.length - ones) + \"1\"\n        }\n    }\n}"
}