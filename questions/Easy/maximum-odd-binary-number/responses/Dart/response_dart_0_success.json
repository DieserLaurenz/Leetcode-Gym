{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "344 ms",
    "memory": 146552000,
    "question_id": "3055",
    "elapsed_time": 566,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706464028379,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 50.0,
    "status_memory": "146.6 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Dart",
    "submission_id": "1159397239",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  String maximumOddBinaryNumber(String s) {\n    // Count the number of '1's and '0's in the string\n    int ones = s.split('').where((char) => char == '1').length;\n    int zeros = s.length - ones;\n\n    // Since the number must be odd, place one '1' at the end\n    // and use the remaining '1's at the beginning followed by all '0's\n    // The result is a string of '1's (minus one for the last position),\n    // followed by '0's, and ending with a '1'\n    return '1' * (ones - 1) + '0' * zeros + '1';\n  }\n}"
}