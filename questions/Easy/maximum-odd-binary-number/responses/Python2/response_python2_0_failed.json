{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11760000,
    "question_id": "3055",
    "elapsed_time": 47,
    "compare_result
    "code_output": "\"1011\"",
    "std_output": "",
    "last_testcase": "\"0111\"",
    "expected_output": "\"1101\"",
    "task_finish_time": 1708714764693,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 77,
    "total_testcases": 985,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184251413",
    "input_formatted": "\"0111\"",
    "input": "\"0111\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumOddBinaryNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        ones = s.count('1')\n        zeros = s.count('0')\n        if ones > 1:\n            return '1' + '0' * zeros + '1' * (ones - 1)\n        else:\n            return '0' * zeros + '1'"
}