{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "19 ms",
    "memory": 16008000,
    "question_id": "3055",
    "elapsed_time": 33,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706463936643,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 60.0,
    "status_memory": "16 MB",
    "memory_percentile": 20.0,
    "pretty_lang": "Swift",
    "submission_id": "1159395934",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumOddBinaryNumber(_ s: String) -> String {\n        // Count the number of '1's in the string\n        let onesCount = s.filter { $0 == \"1\" }.count\n        // Create the maximum odd binary number\n        // by placing one '1' at the end and the rest at the beginning\n        let result = String(repeating: \"1\", count: onesCount - 1) + String(repeating: \"0\", count: s.count - onesCount) + \"1\"\n        return result\n    }\n}"
}