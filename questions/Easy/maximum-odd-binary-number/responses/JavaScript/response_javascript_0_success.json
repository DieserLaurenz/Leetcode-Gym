{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "76 ms",
    "memory": 52276000,
    "question_id": "3055",
    "elapsed_time": 90,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706463831734,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 985,
    "total_testcases": 985,
    "runtime_percentile": 22.463600000000014,
    "status_memory": "52.3 MB",
    "memory_percentile": 12.319100000000006,
    "pretty_lang": "JavaScript",
    "submission_id": "1159394536",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} s\n * @return {string}\n */\nvar maximumOddBinaryNumber = function(s) {\n    // Count the number of '1's and '0's in the string\n    let ones = 0, zeros = 0;\n    for (let char of s) {\n        if (char === '1') ones++;\n        else zeros++;\n    }\n    \n    // The strategy is to put all '1's at the beginning followed by '0's,\n    // ensuring the last digit is '1' to make the number odd.\n    // Since we need at least one '1' at the end, we place the rest of the '1's before the '0's.\n    let result = '';\n    // Add all '1's except one\n    for (let i = 0; i < ones - 1; i++) {\n        result += '1';\n    }\n    // Add all '0's\n    for (let i = 0; i < zeros; i++) {\n        result += '0';\n    }\n    // Add the last '1' to make the number odd\n    result += '1';\n    \n    return result;\n};"
}