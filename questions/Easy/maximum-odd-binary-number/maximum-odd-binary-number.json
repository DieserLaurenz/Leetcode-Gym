{
    "acRate": 72.68611563604054,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2864",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Maximum Odd Binary Number",
    "titleSlug": "maximum-odd-binary-number",
    "topicTags": [
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     string maximumOddBinaryNumber(string s) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public String maximumOddBinaryNumber(String s) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def maximumOddBinaryNumber(self, s):         \"\"\"         :type s: str         :rtype: str         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def maximumOddBinaryNumber(self, s: str) -> str:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "char* maximumOddBinaryNumber(char* s){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public string MaximumOddBinaryNumber(string s) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @return {string}  */ var maximumOddBinaryNumber = function(s) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maximumOddBinaryNumber(s: string): string {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @return String      */     function maximumOddBinaryNumber($s) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func maximumOddBinaryNumber(_ s: String) -> String {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun maximumOddBinaryNumber(s: String): String {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   String maximumOddBinaryNumber(String s) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maximumOddBinaryNumber(s string) string {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @return {String} def maximum_odd_binary_number(s)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def maximumOddBinaryNumber(s: String): String = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn maximum_odd_binary_number(s: String) -> String {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (maximum-odd-binary-number s)   (-> string? string?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec maximum_odd_binary_number(S :: unicode:unicode_binary()) -> unicode:unicode_binary(). maximum_odd_binary_number(S) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec maximum_odd_binary_number(s :: String.t) :: String.t   def maximum_odd_binary_number(s) do    end end"
        }
    ],
    "content": "You are given a binary string s that contains at least one '1'. You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination. Return a string representing the maximum odd binary number that can be created from the given combination. Note that the resulting string can have leading zeros.  Example 1:  Input: s = \"010\" Output: \"001\" Explanation: Because there is just one '1', it must be in the last position. So the answer is \"001\".  Example 2:  Input: s = \"0101\" Output: \"1001\" Explanation: One of the '1's must be in the last position. The maximum number that can be made with the remaining digits is \"100\". So the answer is \"1001\".   Constraints:  1 <= s.length <= 100 s consists only of '0' and '1'. s contains at least one '1'.  "
}