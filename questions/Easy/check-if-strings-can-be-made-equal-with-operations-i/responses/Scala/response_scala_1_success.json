{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "469 ms",
    "memory": 54424000,
    "question_id": "2999",
    "elapsed_time": 697,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706106411106,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1003,
    "total_testcases": 1003,
    "runtime_percentile": 100,
    "status_memory": "54.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1155600096",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def canBeEqual(s1: String, s2: String): Boolean = {\n        // Function to check if two characters are equal regardless of order\n        def sameChars(c1: (Char, Char), c2: (Char, Char)): Boolean = {\n            (c1._1 == c2._1 && c1._2 == c2._2) || (c1._1 == c2._2 && c1._2 == c2._1)\n        }\n\n        // Extract characters from even and odd indices\n        val evenCharsS1 = (s1(0), s1(2))\n        val oddCharsS1 = (s1(1), s1(3))\n        val evenCharsS2 = (s2(0), s2(2))\n        val oddCharsS2 = (s2(1), s2(3))\n\n        // Check if the characters at even and odd positions can be the same\n        sameChars(evenCharsS1, evenCharsS2) && sameChars(oddCharsS1, oddCharsS2)\n    }\n}"
}