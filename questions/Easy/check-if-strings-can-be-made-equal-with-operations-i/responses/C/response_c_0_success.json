{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 5648000,
    "question_id": "2999",
    "elapsed_time": 13,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706096692122,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1003,
    "total_testcases": 1003,
    "runtime_percentile": 100,
    "status_memory": "5.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "C",
    "submission_id": "1155492429",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n\nbool canBeEqual(char* s1, char* s2){\n    // Check if swapping the first and third characters in s1 makes it equal to s2\n    bool firstThirdMatch = (s1[0] == s2[0] || s1[0] == s2[2]) && (s1[2] == s2[0] || s1[2] == s2[2]);\n    // Check if swapping the second and fourth characters in s1 makes it equal to s2\n    bool secondFourthMatch = (s1[1] == s2[1] || s1[1] == s2[3]) && (s1[3] == s2[1] || s1[3] == s2[3]);\n\n    return firstThirdMatch && secondFourthMatch;\n}"
}