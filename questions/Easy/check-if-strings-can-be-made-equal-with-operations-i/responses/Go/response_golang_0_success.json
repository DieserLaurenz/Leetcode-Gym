{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2272000,
    "question_id": "2999",
    "elapsed_time": 19,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706103591857,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1003,
    "total_testcases": 1003,
    "runtime_percentile": 100,
    "status_memory": "2.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Go",
    "submission_id": "1155563969",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func canBeEqual(s1 string, s2 string) bool {\n    // Check if the strings are already equal\n    if s1 == s2 {\n        return true\n    }\n\n    // Check if swapping indices 0 and 2 in s1 makes it equal to s2\n    if s1[0] == s2[2] && s1[2] == s2[0] && s1[1] == s2[1] && s1[3] == s2[3] {\n        return true\n    }\n\n    // Check if swapping indices 1 and 3 in s1 makes it equal to s2\n    if s1[1] == s2[3] && s1[3] == s2[1] && s1[0] == s2[0] && s1[2] == s2[2] {\n        return true\n    }\n\n    // Check if performing both swaps makes it equal\n    return s1[0] == s2[2] && s1[2] == s2[0] && s1[1] == s2[3] && s1[3] == s2[1]\n}"
}