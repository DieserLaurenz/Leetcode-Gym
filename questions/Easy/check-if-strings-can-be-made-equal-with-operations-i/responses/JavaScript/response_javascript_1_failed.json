{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52268000,
    "question_id": "2999",
    "elapsed_time": 101,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "\"bnxw\"\n\"bwxn\"",
    "expected_output": "true",
    "task_finish_time": 1706098249901,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 746,
    "total_testcases": 1003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1155507385",
    "input_formatted": "\"bnxw\", \"bwxn\"",
    "input": "\"bnxw\"\n\"bwxn\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar canBeEqual = function(s1, s2) {\n    // Compare s1 and s2 with potential swaps at positions (0, 2) and (1, 3)\n    return (s1[0] === s2[0] && s1[1] === s2[1] && s1[2] === s2[2] && s1[3] === s2[3]) ||\n           (s1[0] === s2[2] && s1[1] === s2[3] && s1[2] === s2[0] && s1[3] === s2[1]);\n};\n\n// Example usage\nconsole.log(canBeEqual(\"bnxw\", \"bwxn\")); // Output: true\nconsole.log(canBeEqual(\"abcd\", \"cdab\")); // Output: true\nconsole.log(canBeEqual(\"abcd\", \"dacb\")); // Output: false"
}