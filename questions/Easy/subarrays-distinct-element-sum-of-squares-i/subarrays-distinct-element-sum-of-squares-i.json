{
    "acRate": 82.44605313290153,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2913",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Subarrays Distinct Element Sum of Squares I",
    "titleSlug": "subarrays-distinct-element-sum-of-squares-i",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int sumCounts(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int sumCounts(List<Integer> nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def sumCounts(self, nums):         \"\"\"         :type nums: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def sumCounts(self, nums: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int sumCounts(int* nums, int numsSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int SumCounts(IList<int> nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {number}  */ var sumCounts = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function sumCounts(nums: number[]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Integer      */     function sumCounts($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func sumCounts(_ nums: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun sumCounts(nums: List<Int>): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int sumCounts(List<int> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func sumCounts(nums []int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Integer} def sum_counts(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def sumCounts(nums: List[Int]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn sum_counts(nums: Vec<i32>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (sum-counts nums)   (-> (listof exact-integer?) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec sum_counts(Nums :: [integer()]) -> integer(). sum_counts(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec sum_counts(nums :: [integer]) :: integer   def sum_counts(nums) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums. The distinct count of a subarray of nums is defined as:  Let nums[i..j] be a subarray of nums consisting of all the indices from i to j such that 0 <= i <= j < nums.length. Then the number of distinct values in nums[i..j] is called the distinct count of nums[i..j].  Return the sum of the squares of distinct counts of all subarrays of nums. A subarray is a contiguous non-empty sequence of elements within an array.  Example 1:  Input: nums = [1,2,1] Output: 15 Explanation: Six possible subarrays are: [1]: 1 distinct value [2]: 1 distinct value [1]: 1 distinct value [1,2]: 2 distinct values [2,1]: 2 distinct values [1,2,1]: 2 distinct values The sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 + 22 + 22 + 22 = 15.  Example 2:  Input: nums = [1,1] Output: 3 Explanation: Three possible subarrays are: [1]: 1 distinct value [1]: 1 distinct value [1,1]: 1 distinct value The sum of the squares of the distinct counts in all subarrays is equal to 12 + 12 + 12 = 3.  Constraints:  1 <= nums.length <= 100 1 <= nums[i] <= 100  "
}