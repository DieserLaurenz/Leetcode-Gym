{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "take: contract violation",
    "full_runtime_error": "take: contract violation\n  expected: a list with at least 4 elements\n  given: '(1 2 1)\n  context...:\n   /usr/share/racket/collects/racket/list.rkt:158:2: loop\n   [repeats 2 more times]\n   solution.rkt:1:0: sum-counts\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:17:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100124000,
    "question_id": "3163",
    "elapsed_time": 280,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1706678751970,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 707,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1161702184",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (sum-counts nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([n (length nums)])\n    (let loop-outer ([i 0] [sum 0])\n      (if (< i n)\n          (let loop-inner ([j i] [sum-inner sum])\n            (if (<= j n)\n                (let* ([subarray (take (drop nums i) (+ 1 (- j i)))]\n                       [distinct-count (length (remove-duplicates subarray))])\n                  (loop-inner (+ j 1) (+ sum-inner (* distinct-count distinct-count))))\n                (loop-outer (+ i 1) sum-inner)))\n          sum))))"
}