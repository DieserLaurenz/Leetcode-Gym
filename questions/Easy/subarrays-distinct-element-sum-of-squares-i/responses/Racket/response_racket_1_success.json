{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "234 ms",
    "memory": 101124000,
    "question_id": "3163",
    "elapsed_time": 323,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706678794725,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 707,
    "runtime_percentile": 100,
    "status_memory": "101.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1161702690",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (sum-counts nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([len (length nums)])\n    (let ([result 0])\n      (for ([i (in-range len)])\n        (let ([seen (make-hash)])\n          (for ([j (in-range i len)])\n            (let ([num (list-ref nums j)])\n              (unless (hash-ref seen num #f)\n                (hash-set! seen num #t))\n              (set! result (+ result (* (hash-count seen) (hash-count seen))))))))\n      result)))"
}