{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "664 ms",
    "memory": 72144000,
    "question_id": "3163",
    "elapsed_time": 786,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706678880917,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 707,
    "runtime_percentile": 100,
    "status_memory": "72.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1161703704",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec sum_counts(nums :: [integer]) :: integer\n  def sum_counts(nums) do\n    Enum.reduce(0..length(nums)-1, 0, fn i, acc1 ->\n      acc1 + Enum.reduce(i..length(nums)-1, 0, fn j, acc2 ->\n        distinct_count = nums |> Enum.slice(i..j) |> Enum.uniq() |> length()\n        acc2 + distinct_count * distinct_count\n      end)\n    end)\n  end\nend"
}