{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "472 ms",
    "memory": 64088000,
    "question_id": "3163",
    "elapsed_time": 1605,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706678837537,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 707,
    "runtime_percentile": 100,
    "status_memory": "64.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1161703178",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec sum_counts(Nums :: [integer()]) -> integer().\nsum_counts(Nums) ->\n    Subarrays = [{I, J} || I <- lists:seq(1, length(Nums)), J <- lists:seq(I, length(Nums))],\n    DistinctCounts = [length(lists:usort(lists:sublist(Nums, I, J - I + 1))) || {I, J} <- Subarrays],\n    SumOfSquares = lists:foldl(fun(X, Acc) -> Acc + X*X end, 0, DistinctCounts),\n    SumOfSquares."
}