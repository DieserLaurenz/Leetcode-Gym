{
    "status_code": 15,
    "lang": "java",
    "run_success": false,
    "runtime_error": "Line 27: java.lang.NullPointerException: Cannot invoke \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.put(Object, Object)\" is null",
    "full_runtime_error": "java.lang.NullPointerException: Cannot invoke \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.put(Object, Object)\" is null\n  at line 27, Solution.sumCounts\n  at line 54, __DriverSolution__.__helper__\n  at line 84, __Driver__.main",
    "status_runtime": "N/A",
    "memory": 40576000,
    "question_id": "3163",
    "elapsed_time": 130,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1706669608079,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 707,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1161600384",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Solution {\n    public int sumCounts(List<Integer> nums) {\n        int n = nums.size();\n        Map<Integer, Integer> lastOccurrence = new HashMap<>();\n        int[] contribution = new int[n];\n        int sum = 0;\n\n        // Calculate the contribution of each element when it's the last occurrence.\n        for (int i = n - 1; i >= 0; i--) {\n            lastOccurrence.putIfAbsent(nums.get(i), i);\n            contribution[i] = n - lastOccurrence.get(nums.get(i));\n        }\n\n        // Reset for calculating first occurrence contributions.\n        lastOccurrence.clear();\n\n        // Calculate the total sum of squares of distinct counts.\n        for (int i = 0; i < n; i++) {\n            if (!lastOccurrence.containsKey(nums.get(i))) {\n                // If it's the first occurrence, calculate its contribution\n                // to the total sum considering all its occurrences.\n                int firstOccurrence = i + 1;\n                int lastOccurrenceIndex = lastOccurrence.put(nums.get(i), i);\n                sum += firstOccurrence * contribution[i] * contribution[i];\n            }\n        }\n\n        return sum;\n    }\n}"
}