{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43072000,
    "display_runtime": "2",
    "question_id": "3163",
    "elapsed_time": 119,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1706669654324,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 707,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1161600837",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.HashMap;\nimport java.util.List;\n\nclass Solution {\n    public int sumCounts(List<Integer> nums) {\n        HashMap<Integer, Integer> lastIndex = new HashMap<>();\n        int n = nums.size();\n        long sum = 0; // Use long to avoid integer overflow\n\n        for (int i = 0; i < n; i++) {\n            nums.set(i, nums.get(i) - 1); // Adjusting values for 0-based indexing\n        }\n\n        int[] contribution = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            contribution[i + 1] = contribution[i] + 1; // Each element contributes at least once more than the previous\n        }\n\n        for (int i = 0; i < n; i++) {\n            int distinctCount = contribution[i] - (lastIndex.containsKey(nums.get(i)) ? contribution[lastIndex.get(nums.get(i))] : 0);\n            sum += distinctCount * distinctCount; // Sum of squares of distinct counts\n            lastIndex.put(nums.get(i), i); // Update the last index of the current element\n        }\n\n        // Calculate the total sum considering the contributions of all elements\n        for (int contrib : contribution) {\n            sum -= contrib; // Subtracting individual contributions to correct the total sum\n        }\n\n        return (int)sum; // Casting the result back to int as per the function's return type\n    }\n}"
}