{
    "acRate": 53.29165624739518,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2605",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Form Smallest Number From Two Digit Arrays",
    "titleSlug": "form-smallest-number-from-two-digit-arrays",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Enumeration",
            "id": "VG9waWNUYWdOb2RlOjYxMDY2",
            "slug": "enumeration"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minNumber(vector<int>& nums1, vector<int>& nums2) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minNumber(int[] nums1, int[] nums2) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minNumber(self, nums1, nums2):         \"\"\"         :type nums1: List[int]         :type nums2: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minNumber(self, nums1: List[int], nums2: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minNumber(int* nums1, int nums1Size, int* nums2, int nums2Size) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinNumber(int[] nums1, int[] nums2) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums1  * @param {number[]} nums2  * @return {number}  */ var minNumber = function(nums1, nums2) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minNumber(nums1: number[], nums2: number[]): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums1      * @param Integer[] $nums2      * @return Integer      */     function minNumber($nums1, $nums2) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minNumber(nums1: IntArray, nums2: IntArray): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minNumber(List<int> nums1, List<int> nums2) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minNumber(nums1 []int, nums2 []int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums1 # @param {Integer[]} nums2 # @return {Integer} def min_number(nums1, nums2)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minNumber(nums1: Array[Int], nums2: Array[Int]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn min_number(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (min-number nums1 nums2)   (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec min_number(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer(). min_number(Nums1, Nums2) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec min_number(nums1 :: [integer], nums2 :: [integer]) :: integer   def min_number(nums1, nums2) do        end end"
        }
    ],
    "content": "Given two arrays of unique digits nums1 and nums2, return the smallest number that contains at least one digit from each array.  Example 1:  Input: nums1 = [4,1,3], nums2 = [5,7] Output: 15 Explanation: The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.  Example 2:  Input: nums1 = [3,5,2,6], nums2 = [3,1,7] Output: 3 Explanation: The number 3 contains the digit 3 which exists in both arrays.   Constraints:  1 <= nums1.length, nums2.length <= 9 1 <= nums1[i], nums2[i] <= 9 All digits in each array are unique.  "
}