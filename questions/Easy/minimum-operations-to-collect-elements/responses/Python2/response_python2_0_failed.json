{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 13: IndexError: pop from empty list",
    "full_runtime_error": "IndexError: pop from empty list\n    element = nums.pop()\nLine 13 in minOperations (Solution.py)\n    ret = Solution().minOperations(param_1, param_2)\nLine 41 in _driver (Solution.py)\n    _driver()\nLine 51 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11736000,
    "question_id": "3044",
    "elapsed_time": 26,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1708724205224,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184341186",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        target_set = set(range(1, k + 1))\n        collected_set = set()\n        operations = 0\n\n        while target_set != collected_set:\n            element = nums.pop()\n            collected_set.add(element)\n            operations += 1\n\n        return operations"
}