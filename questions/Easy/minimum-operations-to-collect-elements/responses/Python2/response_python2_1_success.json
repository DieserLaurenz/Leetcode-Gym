{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "16 ms",
    "memory": 11696000,
    "question_id": "3044",
    "elapsed_time": 36,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708724227989,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 81.96739999999997,
    "status_memory": "11.7 MB",
    "memory_percentile": 70.4918,
    "pretty_lang": "Python",
    "submission_id": "1184341372",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.reverse()\n        target_set = set(range(1, k + 1))\n        collected_set = set()\n        operations = 0\n\n        for num in nums:\n            collected_set.add(num)\n            operations += 1\n            if collected_set.issuperset(target_set):\n                break\n\n        return operations"
}