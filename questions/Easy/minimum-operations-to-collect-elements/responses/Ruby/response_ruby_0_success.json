{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "75 ms",
    "memory": 212052000,
    "question_id": "3044",
    "elapsed_time": 255,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706553845701,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 49.99990000000002,
    "status_memory": "212.1 MB",
    "memory_percentile": 16.666700000000006,
    "pretty_lang": "Ruby",
    "submission_id": "1160353884",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef min_operations(nums, k)\n    collected = {}\n    operations = 0\n    \n    nums.reverse_each do |num|\n        # If the number is within the range and not already collected, collect it\n        if num <= k && !collected[num]\n            collected[num] = true\n        end\n        operations += 1\n        # If we have collected all numbers from 1 to k, break\n        break if collected.size == k\n    end\n    \n    operations\nend"
}