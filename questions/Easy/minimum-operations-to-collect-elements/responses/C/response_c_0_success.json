{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 5684000,
    "question_id": "3044",
    "elapsed_time": 22,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706544930122,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 100,
    "status_memory": "5.7 MB",
    "memory_percentile": 93.1034,
    "pretty_lang": "C",
    "submission_id": "1160209244",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int minOperations(int* nums, int numsSize, int k) {\n    // Counter array to keep track of numbers from 1 to k.\n    int count[k];\n    for (int i = 0; i < k; i++) {\n        count[i] = 0;\n    }\n    \n    // Variable to keep track of how many unique numbers from 1 to k we have seen.\n    int uniqueNumbers = 0;\n    \n    // Iterate over the array from the end towards the beginning.\n    for (int i = numsSize - 1; i >= 0; i--) {\n        // If the current number is within our target range (1 to k) and we haven't seen it before.\n        if (nums[i] <= k && count[nums[i] - 1] == 0) {\n            // Mark this number as seen.\n            count[nums[i] - 1] = 1;\n            // Increment the count of unique numbers seen.\n            uniqueNumbers++;\n        }\n        \n        // If we have seen all numbers from 1 to k, break the loop.\n        if (uniqueNumbers == k) {\n            // Return the number of operations needed, which is the length of the array minus the current index.\n            return numsSize - i;\n        }\n    }\n    \n    // In case something goes wrong, which shouldn't happen given the problem's constraints.\n    return -1;\n}"
}