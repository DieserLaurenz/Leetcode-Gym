{
    "status_code": 10,
    "lang": "php",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 20340000,
    "question_id": "3044",
    "elapsed_time": 58,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706545620033,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 100,
    "status_memory": "20.3 MB",
    "memory_percentile": 25.0,
    "pretty_lang": "PHP",
    "submission_id": "1160219912",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minOperations($nums, $k) {\n        $operations = 0; // Initialize counter for operations\n        $collected = array_fill(1, $k, false); // Initialize collected elements tracker\n        $collectedCount = 0; // Count of unique elements collected from 1 to k\n\n        // Loop from the end until all elements from 1 to k are collected\n        for ($i = count($nums) - 1; $i >= 0 && $collectedCount < $k; $i--) {\n            $operations++; // Increment operation count\n            // Check if the element is within 1 to k and not already collected\n            if ($nums[$i] <= $k && !$collected[$nums[$i]]) {\n                $collected[$nums[$i]] = true; // Mark as collected\n                $collectedCount++; // Increment collected unique elements count\n            }\n        }\n\n        return $operations; // Return the minimum number of operations needed\n    }\n}"
}