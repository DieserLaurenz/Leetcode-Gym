{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "522 ms",
    "memory": 55496000,
    "question_id": "3044",
    "elapsed_time": 598,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706553905514,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 100,
    "status_memory": "55.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1160354731",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minOperations(nums: List[Int], k: Int): Int = {\n        // HashSet to keep track of the numbers we need to collect\n        val neededNumbers = scala.collection.mutable.HashSet[Int]((1 to k): _*)\n        \n        // Iterate over the array from the end\n        var operations = 0\n        for (num <- nums.reverse if neededNumbers.nonEmpty) {\n            // Remove the number from the needed numbers if it is needed\n            neededNumbers -= num\n            // Increment the number of operations\n            operations += 1\n            // Break out of the loop if we have collected all needed numbers\n            if (neededNumbers.isEmpty) return operations\n        }\n        \n        // In case something goes wrong, but for the given constraints, it should not happen\n        operations\n    }\n}"
}