{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "69 ms",
    "memory": 42712000,
    "question_id": "3044",
    "elapsed_time": 251,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706544983013,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 79.06970000000001,
    "status_memory": "42.7 MB",
    "memory_percentile": 6.976700000000004,
    "pretty_lang": "C#",
    "submission_id": "1160210017",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinOperations(IList<int> nums, int k) {\n        bool[] collected = new bool[k]; // To keep track of collected elements 1 to k\n        int count = 0; // Number of operations\n        int uniqueCount = 0; // Number of unique elements collected\n\n        // Iterate from the end of the list\n        for (int i = nums.Count - 1; i >= 0; i--) {\n            int num = nums[i];\n            // Check if the number is within our target range and not already collected\n            if (num <= k && !collected[num - 1]) {\n                collected[num - 1] = true; // Mark as collected\n                uniqueCount++; // Increment the count of unique elements collected\n            }\n            count++; // Increment the number of operations\n            // If we've collected all elements from 1 to k, break the loop\n            if (uniqueCount == k) {\n                break;\n            }\n        }\n        return count; // Return the minimum number of operations needed\n    }\n}"
}