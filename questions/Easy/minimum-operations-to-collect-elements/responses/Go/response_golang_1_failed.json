{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2552000,
    "question_id": "3044",
    "elapsed_time": 14,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706553759332,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 82,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1160352615",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(nums []int, k int) int {\n    need := make(map[int]int)\n    for i := 1; i <= k; i++ {\n        need[i] = 1\n    }\n\n    found := 0\n    left := 0\n    minLen := len(nums) + 1 // Start with an impossible high value\n\n    for right, num := range nums {\n        // If num is one of the needed numbers, decrease the count in the map\n        if need[num] > 0 {\n            found++\n        }\n        need[num]--\n\n        // Try to shrink the window from the left if the current window contains all 1 to k\n        for found == k && left <= right {\n            currentLen := right - left + 1\n            if currentLen < minLen {\n                minLen = currentLen\n            }\n\n            // Before moving left pointer, restore the count for the number at left if it's needed\n            if need[nums[left]] == 0 {\n                found--\n            }\n            need[nums[left]]++\n            left++\n        }\n    }\n\n    if minLen == len(nums) + 1 {\n        // If minLen wasn't updated, it means it's not possible to find all 1...k, which should not happen as per constraints\n        return len(nums)\n    }\n\n    // The minimum operations is the total length minus the longest subarray that doesn't need to be removed\n    return len(nums) - minLen\n}"
}