{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2556000,
    "question_id": "3044",
    "elapsed_time": 15,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[3,2,5,3,1]\n3",
    "expected_output": "4",
    "task_finish_time": 1706553697022,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 457,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1160351722",
    "input_formatted": "[3,2,5,3,1], 3",
    "input": "[3,2,5,3,1]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(nums []int, k int) int {\n    count := make(map[int]int)\n    // Initialize the map with 0 counts for each number from 1 to k.\n    for i := 1; i <= k; i++ {\n        count[i] = 0\n    }\n\n    operations := 0\n    // Iterate from the end of the array.\n    for i := len(nums) - 1; i >= 0; i-- {\n        // If the current element is within 1 to k and not yet accounted for,\n        // update the map.\n        if nums[i] <= k && count[nums[i]] == 0 {\n            count[nums[i]] = 1 // Mark as found.\n            k-- // Decrease the remaining count of numbers to find.\n        }\n        operations++\n        if k == 0 {\n            // If k reaches 0, all numbers from 1 to k are found.\n            return operations\n        }\n    }\n    return operations\n}"
}