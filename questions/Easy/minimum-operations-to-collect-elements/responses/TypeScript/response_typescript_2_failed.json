{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51920000,
    "question_id": "3044",
    "elapsed_time": 89,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706545192606,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 227,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1160213143",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(nums: number[], k: number): number {\n    let totalLength = nums.length;\n    let maxLength = 0; // Track the length of the longest subsequence containing 1 to k\n    \n    // Use a sliding window to find the longest subsequence containing all numbers from 1 to k\n    let left = 0; // Left index of the sliding window\n    const count = new Array(k + 1).fill(0); // Count array to keep track of numbers 1 to k within the window\n    let uniqueNumbers = 0; // Count of unique numbers from 1 to k in the current window\n    \n    for (let right = 0; right < totalLength; ++right) {\n        if (nums[right] <= k && count[nums[right]] == 0) uniqueNumbers++; // Found a new unique number from 1 to k\n        count[nums[right]]++;\n        \n        // If we have all numbers from 1 to k in the window, try to shrink the window from the left\n        while (uniqueNumbers == k && left <= right) {\n            maxLength = Math.max(maxLength, right - left + 1);\n            // If the number at the left is part of the 1 to k set, update the window\n            if (nums[left] <= k && count[nums[left]] == 1) uniqueNumbers--;\n            count[nums[left]]--;\n            left++;\n        }\n    }\n    \n    // If no valid subsequence is found, return the total operations as the length of the array\n    // Else, return the difference between the total length and the maxLength of the subsequence found\n    return uniqueNumbers == k ? totalLength - maxLength : totalLength;\n}"
}