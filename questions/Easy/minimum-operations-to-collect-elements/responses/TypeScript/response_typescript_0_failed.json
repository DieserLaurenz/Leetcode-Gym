{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52112000,
    "question_id": "3044",
    "elapsed_time": 110,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706545083328,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 262,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1160211476",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(nums: number[], k: number): number {\n    // Step 1: Reverse the array to simulate removal from the end\n    nums.reverse();\n\n    // Step 2: Use a set to track collected elements\n    const collected = new Set<number>();\n\n    // Step 3: Iterate over the array to collect elements 1 through k\n    for (let i = 0; i < nums.length; i++) {\n        collected.add(nums[i]);\n\n        // Once we have collected all elements from 1 to k, return the operations count\n        if (collected.size === k) {\n            // Since we want elements 1 through k, check if all are collected\n            let allCollected = true;\n            for (let j = 1; j <= k; j++) {\n                if (!collected.has(j)) {\n                    allCollected = false;\n                    break;\n                }\n            }\n\n            // If all elements are collected, return the index + 1 as the operation count\n            if (allCollected) {\n                return i + 1;\n            }\n        }\n    }\n\n    // In case something goes wrong, though the problem guarantees a solution\n    return -1;\n};"
}