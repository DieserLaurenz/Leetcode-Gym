{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "204 ms",
    "memory": 36952000,
    "question_id": "3044",
    "elapsed_time": 329,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706553620979,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 11.111200000000018,
    "status_memory": "37 MB",
    "memory_percentile": 11.111200000000018,
    "pretty_lang": "Kotlin",
    "submission_id": "1160350597",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(nums: List<Int>, k: Int): Int {\n        // Reverse the list to simulate removing elements from the end\n        val reversedNums = nums.reversed()\n        val neededElements = mutableSetOf<Int>()\n\n        // Add elements 1 through k to a set of needed elements\n        for (i in 1..k) {\n            neededElements.add(i)\n        }\n\n        // Iterate through the reversed list to find when we have collected all needed elements\n        for ((index, value) in reversedNums.withIndex()) {\n            neededElements.remove(value)\n            if (neededElements.isEmpty()) {\n                // Return the index + 1 to represent the number of operations (since index is 0-based)\n                return index + 1\n            }\n        }\n\n        // This should never be reached given the problem constraints, but needed to compile\n        return nums.size\n    }\n}"
}