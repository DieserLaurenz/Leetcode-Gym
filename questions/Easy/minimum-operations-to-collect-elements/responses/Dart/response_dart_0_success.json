{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "386 ms",
    "memory": 152428000,
    "question_id": "3044",
    "elapsed_time": 512,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706553656322,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 100,
    "status_memory": "152.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Dart",
    "submission_id": "1160351142",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minOperations(List<int> nums, int k) {\n    // Reverse the nums list to simulate removing elements from the end\n    nums = List.from(nums.reversed);\n    // Use a set to keep track of collected elements\n    final Set<int> collected = {};\n    int operations = 0;\n    // Iterate through the reversed list\n    for (int num in nums) {\n      collected.add(num); // Add current number to the collection\n      operations++; // Increment the number of operations\n      // Check if we have collected all elements from 1 to k\n      if (collected.length >= k) {\n        bool allCollected = true;\n        for (int i = 1; i <= k; i++) {\n          if (!collected.contains(i)) {\n            allCollected = false;\n            break;\n          }\n        }\n        if (allCollected) {\n          return operations; // Return the number of operations if all elements are collected\n        }\n      }\n    }\n    return operations; // Return the total number of operations if needed\n  }\n}"
}