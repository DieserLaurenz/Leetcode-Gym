{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2092000,
    "question_id": "3044",
    "elapsed_time": 14,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706553967983,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 100,
    "status_memory": "2.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Rust",
    "submission_id": "1160355625",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {\n        let mut operations = 0;\n        let mut collected = vec![false; k as usize];\n\n        for &num in nums.iter().rev() {\n            operations += 1;\n            if num <= k {\n                collected[(num - 1) as usize] = true;\n            }\n            if collected.iter().all(|&x| x) {\n                return operations;\n            }\n        }\n\n        // In case something goes wrong, which should not happen due to problem constraints\n        -1\n    }\n}"
}