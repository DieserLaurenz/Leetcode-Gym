{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`",
    "full_compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3044",
    "task_finish_time": 1706554081359,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1160357218",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (letrec ((find-min-ops\n            (lambda (nums k collected count)\n              (if (and (<= (car nums) k) (not (member (car nums) collected)))\n                  (if (= (length collected) (- k 1))\n                      (+ count 1)\n                      (find-min-ops (cdr nums) k (cons (car nums) collected) (+ count 1)))\n                  (if (null? nums)\n                      count\n                      (find-min-ops (cdr nums) k collected (+ count 1))))))\n    (find-min-ops (reverse nums) k '() 0)))"
}