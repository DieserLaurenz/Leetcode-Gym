{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101240000,
    "question_id": "3044",
    "elapsed_time": 236,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706554030648,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 262,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1160356485",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let loop ((nums (reverse nums)) ; Reverse the list to start from the end\n             (collected (make-hash)) ; Use a hash to track collected elements\n             (ops 0)) ; Operations counter\n    (cond\n      [(= (hash-count collected) k) ops] ; If we've collected all elements, return ops\n      [else\n       (let ((last (car nums))) ; Get the last element of the original array\n         (hash-set! collected last #t) ; Mark this element as collected\n         (loop (cdr nums) collected (+ ops 1)))]))) ; Continue with the rest"
}