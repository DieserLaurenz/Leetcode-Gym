{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42732000,
    "display_runtime": "1",
    "question_id": "3044",
    "elapsed_time": 141,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706544822274,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 262,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1160207646",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass Solution {\n    public int minOperations(List<Integer> nums, int k) {\n        Set<Integer> collected = new HashSet<>();\n        int operations = 0;\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            collected.add(nums.get(i));\n            operations++;\n            if (collected.size() == k) {\n                return operations;\n            }\n        }\n        // The problem statement guarantees a solution, so this return statement\n        // might not be necessary, but it's here to satisfy the compiler.\n        return operations;\n    }\n}"
}