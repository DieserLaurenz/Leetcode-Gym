{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21440000,
    "question_id": "3044",
    "elapsed_time": 22,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706544781320,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 59,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1160207064",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums, int k) {\n        // Count of elements from 1 to k in the current window\n        vector<int> count(k+1, 0);\n        int totalCount = 0, left = 0, maxLen = 0;\n        \n        // Iterate over the array to find the longest subarray containing 1 to k\n        for (int right = 0; right < nums.size(); ++right) {\n            // Only interested in numbers 1 to k\n            if (nums[right] <= k) {\n                if (count[nums[right]] == 0) {\n                    totalCount++; // Found a new required element\n                }\n                count[nums[right]]++;\n            }\n            \n            // If we've found all elements from 1 to k, try to shrink the window from the left\n            while (totalCount == k && left <= right) {\n                maxLen = max(maxLen, right - left + 1);\n                if (nums[left] <= k && --count[nums[left]] == 0) {\n                    totalCount--; // Lost a unique required element\n                }\n                left++;\n            }\n        }\n        \n        // The minimum operations is the size of the array minus the longest subarray containing 1 to k\n        return nums.size() - maxLen;\n    }\n};"
}