{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15444000,
    "question_id": "3044",
    "elapsed_time": 23,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706553464779,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 65,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1160348335",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -> Int {\n        var needed = Set(1...k) // Elements needed to find\n        var bestLength = Int.max // The best (shortest) length found\n        var start = 0 // Start index of the current window\n        \n        for end in 0..<nums.count {\n            if needed.contains(nums[end]) {\n                needed.remove(nums[end]) // Found a needed element, remove it from the set\n            }\n            \n            // Try to shrink the window from the start if it still contains all 1...k\n            while start <= end && needed.isEmpty {\n                bestLength = min(bestLength, end - start + 1)\n                if 1...k ~= nums[start] {\n                    needed.insert(nums[start]) // If removing this element misses any 1...k, add it back to needed\n                }\n                start += 1\n            }\n        }\n        \n        // If bestLength was updated, compute operations needed, otherwise return -1 or similar if not possible\n        return bestLength == Int.max ? -1 : nums.count - bestLength\n    }\n}"
}