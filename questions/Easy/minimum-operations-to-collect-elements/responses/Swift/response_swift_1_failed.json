{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15516000,
    "question_id": "3044",
    "elapsed_time": 26,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706553516074,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1160349059",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -> Int {\n        // Count frequencies of each number up to k since we only care about numbers 1 to k.\n        var count = Array(repeating: 0, count: k + 1)\n        for num in nums where num <= k {\n            count[num] += 1\n        }\n        \n        // The total count of numbers from 1 to k in the array.\n        let totalCount = count.reduce(0, +)\n        \n        // Use a sliding window to find the longest subsequence containing all numbers from 1 to k.\n        var maxSequenceLength = 0\n        var currentCount = Array(repeating: 0, count: k + 1)\n        var start = 0\n        for end in 0..<nums.count {\n            if nums[end] <= k {\n                currentCount[nums[end]] += 1\n            }\n            \n            // If the window contains all numbers from 1 to k, try to shrink it while maintaining this property.\n            while currentCount.filter({ $0 > 0 }).count == k {\n                maxSequenceLength = max(maxSequenceLength, currentCount.reduce(0, +))\n                if nums[start] <= k {\n                    currentCount[nums[start]] -= 1\n                }\n                start += 1\n            }\n        }\n        \n        // The minimum operations needed is the total length of the array minus the length of this longest sequence.\n        return nums.count - maxSequenceLength\n    }\n}"
}