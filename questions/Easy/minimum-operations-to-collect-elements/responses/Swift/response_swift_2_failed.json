{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15632000,
    "question_id": "3044",
    "elapsed_time": 24,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706553557031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 216,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1160349655",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -> Int {\n        var lastIndex = [Int: Int]() // Keeps track of the last index of each element\n        for (i, num) in nums.enumerated() {\n            lastIndex[num] = i\n        }\n        \n        // Find the maximum distance from the end for elements 1 through k\n        var maxDistance = 0\n        for i in 1...k {\n            if let index = lastIndex[i] {\n                maxDistance = max(maxDistance, nums.count - index - 1)\n            }\n        }\n        \n        // The minimum number of operations is determined by the element that is farthest from the end\n        return maxDistance + k // Adding k because we also need to count the operations to collect 1 to k themselves\n    }\n}"
}