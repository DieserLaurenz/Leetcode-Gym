{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71452000,
    "question_id": "3044",
    "elapsed_time": 493,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[3,1,5,4,2]\n2",
    "expected_output": "4",
    "task_finish_time": 1706554365259,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 227,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1160361187",
    "input_formatted": "[3,1,5,4,2], 2",
    "input": "[3,1,5,4,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    nums\n    |> Enum.reverse() # Reverse the list to start removing elements from the end\n    |> Enum.reduce({%{}, 0}, fn num, {collected, ops} -> \n      if Map.has_key?(collected, num) or num > k do\n        {collected, ops + 1} # If the number is already collected or greater than k, just increase the operation count\n      else\n        {Map.put(collected, num, true), ops + 1} # Add the number to the collection and increase the operation count\n      end\n    end)\n    |> then(fn {_collected, ops} -> ops end) # Return only the operation count\n  end\nend"
}