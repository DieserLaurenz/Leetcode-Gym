{
    "acRate": 58.92601103843812,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2869",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Operations to Collect Elements",
    "titleSlug": "minimum-operations-to-collect-elements",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Bit Manipulation",
            "id": "VG9waWNUYWdOb2RlOjE5",
            "slug": "bit-manipulation"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minOperations(vector<int>& nums, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minOperations(List<Integer> nums, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minOperations(self, nums, k):         \"\"\"         :type nums: List[int]         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minOperations(self, nums: List[int], k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minOperations(int* nums, int numsSize, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinOperations(IList<int> nums, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} k  * @return {number}  */ var minOperations = function(nums, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minOperations(nums: number[], k: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $k      * @return Integer      */     function minOperations($nums, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minOperations(_ nums: [Int], _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minOperations(nums: List<Int>, k: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minOperations(List<int> nums, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minOperations(nums []int, k int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} k # @return {Integer} def min_operations(nums, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minOperations(nums: List[Int], k: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (min-operations nums k)   (-> (listof exact-integer?) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -> integer(). min_operations(Nums, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec min_operations(nums :: [integer], k :: integer) :: integer   def min_operations(nums, k) do    end end"
        }
    ],
    "content": "You are given an array nums of positive integers and an integer k. In one operation, you can remove the last element of the array and add it to your collection. Return the minimum number of operations needed to collect elements 1, 2, ..., k.  Example 1:  Input: nums = [3,1,5,4,2], k = 2 Output: 4 Explanation: After 4 operations, we collect elements 2, 4, 5, and 1, in this order. Our collection contains elements 1 and 2. Hence, the answer is 4.  Example 2:  Input: nums = [3,1,5,4,2], k = 5 Output: 5 Explanation: After 5 operations, we collect elements 2, 4, 5, 1, and 3, in this order. Our collection contains elements 1 through 5. Hence, the answer is 5.  Example 3:  Input: nums = [3,2,5,3,1], k = 3 Output: 4 Explanation: After 4 operations, we collect elements 1, 3, 5, and 2, in this order. Our collection contains elements 1 through 3. Hence, the answer is 4.   Constraints:  1 <= nums.length <= 50 1 <= nums[i] <= nums.length 1 <= k <= nums.length The input is generated such that you can collect elements 1, 2, ..., k.  "
}