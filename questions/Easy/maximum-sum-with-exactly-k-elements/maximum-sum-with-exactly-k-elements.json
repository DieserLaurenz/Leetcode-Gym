{
    "acRate": 81.68313109898206,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2656",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Maximum Sum With Exactly K Elements ",
    "titleSlug": "maximum-sum-with-exactly-k-elements",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int maximizeSum(vector<int>& nums, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int maximizeSum(int[] nums, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def maximizeSum(self, nums, k):         \"\"\"         :type nums: List[int]         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def maximizeSum(self, nums: List[int], k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int maximizeSum(int* nums, int numsSize, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MaximizeSum(int[] nums, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} k  * @return {number}  */ var maximizeSum = function(nums, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maximizeSum(nums: number[], k: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $k      * @return Integer      */     function maximizeSum($nums, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func maximizeSum(_ nums: [Int], _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun maximizeSum(nums: IntArray, k: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int maximizeSum(List<int> nums, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maximizeSum(nums []int, k int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} k # @return {Integer} def maximize_sum(nums, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def maximizeSum(nums: Array[Int], k: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn maximize_sum(nums: Vec<i32>, k: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (maximize-sum nums k)   (-> (listof exact-integer?) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec maximize_sum(Nums :: [integer()], K :: integer()) -> integer(). maximize_sum(Nums, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec maximize_sum(nums :: [integer], k :: integer) :: integer   def maximize_sum(nums, k) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums and an integer k. Your task is to perform the following operation exactly k times in order to maximize your score:  Select an element m from nums. Remove the selected element m from the array. Add a new element with a value of m + 1 to the array. Increase your score by m.  Return the maximum score you can achieve after performing the operation exactly k times.  Example 1:  Input: nums = [1,2,3,4,5], k = 3 Output: 18 Explanation: We need to choose exactly 3 elements from nums to maximize the sum. For the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6] For the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7] For the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8] So, we will return 18. It can be proven, that 18 is the maximum answer that we can achieve.  Example 2:  Input: nums = [5,5,5], k = 2 Output: 11 Explanation: We need to choose exactly 2 elements from nums to maximize the sum. For the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6] For the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7] So, we will return 11. It can be proven, that 11 is the maximum answer that we can achieve.   Constraints:  1 <= nums.length <= 100 1 <= nums[i] <= 100 1 <= k <= 100    "
}