{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "121 ms",
    "memory": 55648000,
    "question_id": "2831",
    "elapsed_time": 164,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706606776315,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3005,
    "total_testcases": 3005,
    "runtime_percentile": 83.33330000000001,
    "status_memory": "55.6 MB",
    "memory_percentile": 49.99990000000002,
    "pretty_lang": "TypeScript",
    "submission_id": "1160892954",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function countBeautifulPairs(nums: number[]): number {\n    // Helper function to find the GCD of two numbers\n    const gcd = (a: number, b: number): number => {\n        while (b !== 0) {\n            let temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    };\n\n    // Helper function to find the first digit of a number\n    const firstDigit = (n: number): number => {\n        while (n >= 10) {\n            n = Math.floor(n / 10);\n        }\n        return n;\n    };\n\n    // Helper function to find the last digit of a number\n    const lastDigit = (n: number): number => n % 10;\n\n    let count = 0;\n    // Iterate through all pairs (i, j) where i < j\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = i + 1; j < nums.length; j++) {\n            // Check if the first digit of nums[i] and the last digit of nums[j] are coprime\n            if (gcd(firstDigit(nums[i]), lastDigit(nums[j])) === 1) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n};"
}