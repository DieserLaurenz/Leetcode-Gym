{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "387 ms",
    "memory": 100060000,
    "question_id": "2831",
    "elapsed_time": 464,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706607398885,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3005,
    "total_testcases": 3005,
    "runtime_percentile": 100,
    "status_memory": "100.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1160899592",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (count-beautiful-pairs nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (first-digit n)\n    (if (< n 10) n (first-digit (quotient n 10))))\n  \n  (define (last-digit n)\n    (remainder n 10))\n  \n  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  \n  (define (coprime? a b)\n    (= (gcd a b) 1))\n  \n  (let loop ((i 0) (count 0))\n    (if (= i (length nums))\n        count\n        (let inner-loop ((j (+ i 1)) (inner-count count))\n          (if (= j (length nums))\n              (loop (+ i 1) inner-count)\n              (let* ((num-i (list-ref nums i))\n                     (num-j (list-ref nums j))\n                     (fd-i (first-digit num-i))\n                     (ld-j (last-digit num-j)))\n                (inner-loop (+ j 1) (if (coprime? fd-i ld-j) (+ inner-count 1) inner-count)))))))\n)"
}