{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "31 ms",
    "memory": 71452000,
    "question_id": "2831",
    "elapsed_time": 68,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706606483816,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3005,
    "total_testcases": 3005,
    "runtime_percentile": 88.00800000000005,
    "status_memory": "71.5 MB",
    "memory_percentile": 12.95979999999999,
    "pretty_lang": "C++",
    "submission_id": "1160889718",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <numeric> // For std::gcd in C++17 and later\n\nclass Solution {\npublic:\n    int countBeautifulPairs(std::vector<int>& nums) {\n        int beautifulPairs = 0;\n        int n = nums.size();\n        \n        // Helper lambda to get the first digit\n        auto getFirstDigit = [](int num) {\n            while (num >= 10) {\n                num /= 10;\n            }\n            return num;\n        };\n        \n        // Helper lambda to get the last digit\n        auto getLastDigit = [](int num) {\n            return num % 10;\n        };\n        \n        for (int i = 0; i < n; ++i) {\n            int firstDigitI = getFirstDigit(nums[i]);\n            for (int j = i + 1; j < n; ++j) {\n                int lastDigitJ = getLastDigit(nums[j]);\n                if (std::gcd(firstDigitI, lastDigitJ) == 1) {\n                    ++beautifulPairs;\n                }\n            }\n        }\n        \n        return beautifulPairs;\n    }\n};"
}