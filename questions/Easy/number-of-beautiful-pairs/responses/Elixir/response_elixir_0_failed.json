{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 6: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:6: anonymous fn/4 in Solution.count_beautiful_pairs/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:5: anonymous fn/3 in Solution.count_beautiful_pairs/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:39: Driver.consume_test_cases/2\n    solution.ex:27: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73316000,
    "question_id": "2831",
    "elapsed_time": 361,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,5,1,4]",
    "expected_output": "5",
    "task_finish_time": 1706607623626,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 3005,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1160902052",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_beautiful_pairs(nums :: [integer]) :: integer\n  def count_beautiful_pairs(nums) do\n    Enum.reduce(0..length(nums)-2, 0, fn i, acc ->\n      acc + Enum.reduce(i+1..length(nums)-1, 0, fn j, acc_inner ->\n        if coprime?(first_digit(nums[i]), last_digit(nums[j])), do: acc_inner + 1, else: acc_inner\n      end)\n    end)\n  end\n\n  defp first_digit(num) do\n    Enum.reduce_while(num |> Integer.digits, num, fn digit, _acc ->\n      if digit < 10, do: {:halt, digit}, else: {:cont, digit}\n    end)\n  end\n\n  defp last_digit(num), do: rem(num, 10)\n\n  defp coprime?(x, y), do: gcd(x, y) == 1\n\n  defp gcd(x, 0), do: x\n  defp gcd(x, y), do: gcd(y, rem(x, y))\nend"
}