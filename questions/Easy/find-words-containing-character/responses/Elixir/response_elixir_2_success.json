{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "411 ms",
    "memory": 73096000,
    "question_id": "3194",
    "elapsed_time": 474,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706353692289,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 912,
    "total_testcases": 912,
    "runtime_percentile": 100,
    "status_memory": "73.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1158187729",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_words_containing(words :: [String.t()], x :: char) :: [integer()]\n  def find_words_containing(words, x) do\n    Enum.reduce(Enum.with_index(words), [], fn {word, index}, acc ->\n      if String.contains?(word, <<x>>) do\n        [index | acc]\n      else\n        acc\n      end\n    end)\n    |> Enum.reverse()\n  end\nend"
}