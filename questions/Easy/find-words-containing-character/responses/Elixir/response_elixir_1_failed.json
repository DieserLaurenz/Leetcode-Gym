{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72852000,
    "question_id": "3194",
    "elapsed_time": 647,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[\"leet\",\"code\"]\n\"e\"",
    "expected_output": "[0,1]",
    "task_finish_time": 1706353664393,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 253,
    "total_testcases": 912,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1158187433",
    "input_formatted": "[\"leet\",\"code\"], \"e\"",
    "input": "[\"leet\",\"code\"]\n\"e\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_words_containing(words :: [String.t()], x :: char) :: [integer()]\n  def find_words_containing(words, x) do\n    words\n    |> Enum.with_index()\n    |> Enum.filter(fn {word, _index} -> String.contains?(word, \"#{x}\") end)\n    |> Enum.map(fn {_word, index} -> index end)\n  end\nend"
}