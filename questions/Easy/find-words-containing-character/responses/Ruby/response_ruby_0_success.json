{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "84 ms",
    "memory": 211820000,
    "question_id": "3194",
    "elapsed_time": 272,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706353368106,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 912,
    "total_testcases": 912,
    "runtime_percentile": 32.258199999999974,
    "status_memory": "211.8 MB",
    "memory_percentile": 29.032299999999985,
    "pretty_lang": "Ruby",
    "submission_id": "1158184498",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {String[]} words\n# @param {Character} x\n# @return {Integer[]}\ndef find_words_containing(words, x)\n    # Initialize an empty array to store indices of words containing x\n    indices = []\n    # Iterate through words with index\n    words.each_with_index do |word, index|\n        # Add index to indices array if word contains x\n        indices << index if word.include?(x)\n    end\n    # Return the array of indices\n    indices\nend"
}