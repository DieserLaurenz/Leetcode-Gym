{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "exception throw: {invalid_user_return_value,{2,[1,0]},\"[integer()]\"}",
    "full_runtime_error": "exception throw: {invalid_user_return_value,{2,[1,0]},\"[integer()]\"}",
    "status_runtime": "N/A",
    "memory": 64164000,
    "question_id": "3194",
    "elapsed_time": 1484,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"leet\",\"code\"]\n\"e\"",
    "expected_output": "[0,1]",
    "task_finish_time": 1706353570830,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 912,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1158186476",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec find_words_containing(Words :: [unicode:unicode_binary()], X :: char()) -> [integer()].\nfind_words_containing(Words, X) ->\n    lists:foldl(\n        fun(Word, {Index, Acc}) ->\n            case lists:member(X, binary_to_list(Word)) of\n                true -> {Index + 1, [Index|Acc]};\n                false -> {Index + 1, Acc}\n            end\n        end, {0, []}, Words)."
}