{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "380 ms",
    "memory": 63576000,
    "question_id": "3194",
    "elapsed_time": 1665,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706353613889,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 912,
    "total_testcases": 912,
    "runtime_percentile": 100,
    "status_memory": "63.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1158186904",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec find_words_containing(Words :: [unicode:unicode_binary()], X :: char()) -> [integer()].\nfind_words_containing(Words, X) ->\n    find_words_containing(Words, X, 0, []).\n\nfind_words_containing([], _X, _Index, Acc) ->\n    lists:reverse(Acc);\nfind_words_containing([Word | Rest], X, Index, Acc) ->\n    NewAcc = case lists:member(X, binary_to_list(Word)) of\n                true -> [Index | Acc];\n                false -> Acc\n             end,\n    find_words_containing(Rest, X, Index + 1, NewAcc)."
}