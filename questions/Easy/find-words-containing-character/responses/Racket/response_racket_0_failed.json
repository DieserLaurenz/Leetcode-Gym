{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "char=?: contract violation",
    "full_runtime_error": "char=?: contract violation\n  expected: char?\n  given: \"e\"\n  context...:\n   solution.rkt:1:0: find-words-containing\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:15:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100100000,
    "question_id": "3194",
    "elapsed_time": 241,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"leet\",\"code\"]\n\"e\"",
    "expected_output": "[0,1]",
    "task_finish_time": 1706353448320,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 912,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1158185245",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (find-words-containing words x)\n  (-> (listof string?) char? (listof exact-integer?))\n  (for/list ([word words]\n             [index (in-naturals)]\n             #:when (string-contains? word (string x)))\n    index))\n\n; Helper function to check if a string contains a character\n(define (string-contains? str char)\n  (ormap (lambda (c) (char=? c char)) (string->list str)))"
}