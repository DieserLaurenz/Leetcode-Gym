{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "173 ms",
    "memory": 101220000,
    "question_id": "3220",
    "elapsed_time": 348,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706149791681,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 520,
    "total_testcases": 520,
    "runtime_percentile": 100,
    "status_memory": "101.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1156077718",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (count-tested-devices batteryPercentages)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (let loop ([batteries batteryPercentages]\n             [count 0]\n             [decrement 0]) ; Total decrement to be applied to each subsequent device\n    (cond\n      [(null? batteries) count] ; When all devices have been checked\n      [(> (- (car batteries) decrement) 0)\n       ; If the current device's battery level after applying decrement is still above 0\n       (loop (cdr batteries) ; Move to the next device\n             (+ count 1) ; Increment the count of tested devices\n             (+ decrement 1))] ; Increment the total decrement for subsequent devices\n      [else\n       ; Move to the next device without testing\n       (loop (cdr batteries) count decrement)])))"
}