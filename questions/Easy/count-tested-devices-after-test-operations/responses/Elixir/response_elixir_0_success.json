{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "324 ms",
    "memory": 72320000,
    "question_id": "3220",
    "elapsed_time": 380,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706150752285,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 520,
    "total_testcases": 520,
    "runtime_percentile": 57.14289999999999,
    "status_memory": "72.3 MB",
    "memory_percentile": 14.285799999999993,
    "pretty_lang": "Elixir",
    "submission_id": "1156086249",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_tested_devices(battery_percentages :: [integer]) :: integer\n  def count_tested_devices(battery_percentages) do\n    count_tested_devices_recursive(battery_percentages, 0, 0)\n  end\n\n  defp count_tested_devices_recursive([], count, _) do\n    count\n  end\n  defp count_tested_devices_recursive([0 | rest], count, _) do\n    count_tested_devices_recursive(rest, count, 0)\n  end\n  defp count_tested_devices_recursive([_ | rest], count, tested) when tested >= 0 do\n    updated_rest = Enum.map(rest, fn x -> max(x - 1, 0) end)\n    count_tested_devices_recursive(updated_rest, count + 1, tested + 1)\n  end\nend"
}