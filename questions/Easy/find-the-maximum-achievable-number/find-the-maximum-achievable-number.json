{
    "acRate": 88.83355176933159,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2769",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Maximum Achievable Number",
    "titleSlug": "find-the-maximum-achievable-number",
    "topicTags": [
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int theMaximumAchievableX(int num, int t) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int theMaximumAchievableX(int num, int t) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def theMaximumAchievableX(self, num, t):         \"\"\"         :type num: int         :type t: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def theMaximumAchievableX(self, num: int, t: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int theMaximumAchievableX(int num, int t){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int TheMaximumAchievableX(int num, int t) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} num  * @param {number} t  * @return {number}  */ var theMaximumAchievableX = function(num, t) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function theMaximumAchievableX(num: number, t: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $num      * @param Integer $t      * @return Integer      */     function theMaximumAchievableX($num, $t) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func theMaximumAchievableX(_ num: Int, _ t: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun theMaximumAchievableX(num: Int, t: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int theMaximumAchievableX(int num, int t) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func theMaximumAchievableX(num int, t int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} num # @param {Integer} t # @return {Integer} def the_maximum_achievable_x(num, t)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def theMaximumAchievableX(num: Int, t: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn the_maximum_achievable_x(num: i32, t: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (the-maximum-achievable-x num t)   (-> exact-integer? exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec the_maximum_achievable_x(Num :: integer(), T :: integer()) -> integer(). the_maximum_achievable_x(Num, T) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec the_maximum_achievable_x(num :: integer, t :: integer) :: integer   def the_maximum_achievable_x(num, t) do    end end"
        }
    ],
    "content": "You are given two integers, num and t. An integer x is called achievable if it can become equal to num after applying the following operation no more than t times:  Increase or decrease x by 1, and simultaneously increase or decrease num by 1.  Return the maximum possible achievable number. It can be proven that there exists at least one achievable number.  Example 1:  Input: num = 4, t = 1 Output: 6 Explanation: The maximum achievable number is x = 6; it can become equal to num after performing this operation: 1- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5.  It can be proven that there is no achievable number larger than 6.   Example 2:  Input: num = 3, t = 2 Output: 7 Explanation: The maximum achievable number is x = 7; after performing these operations, x will equal num:  1- Decrease x by 1, and increase num by 1. Now, x = 6 and num = 4. 2- Decrease x by 1, and increase num by 1. Now, x = 5 and num = 5. It can be proven that there is no achievable number larger than 7.   Constraints:  1 <= num, t<= 50  "
}