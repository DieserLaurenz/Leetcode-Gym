{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16604000,
    "question_id": "2870",
    "elapsed_time": 111,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[21,9,5]",
    "expected_output": "-1",
    "task_finish_time": 1708714119581,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2368,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184243575",
    "input_formatted": "[21,9,5]",
    "input": "[21,9,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def alternatingSubarray(self, nums: List[int]) -> int:\n        max_len = -1\n        current_len = 2\n\n        for i in range(1, len(nums)-1):\n            if (nums[i] - nums[i-1]) * (nums[i+1] - nums[i]) == -1:\n                current_len += 1\n            else:\n                max_len = max(max_len, current_len)\n                current_len = 2\n        \n        max_len = max(max_len, current_len)\n        \n        return max_len if max_len > 1 else -1"
}