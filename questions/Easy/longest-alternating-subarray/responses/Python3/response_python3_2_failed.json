{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16628000,
    "question_id": "2870",
    "elapsed_time": 94,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1708714144913,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 459,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184243883",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def alternatingSubarray(self, nums: List[int]) -> int:\n        max_len = -1\n        current_len = 1\n        for i in range(1, len(nums)):\n            if (nums[i] - nums[i-1]) == (-1) ** current_len:\n                current_len += 1\n            else:\n                if current_len > 1:\n                    max_len = max(max_len, current_len)\n                current_len = 1\n            if (i == len(nums) - 1) and current_len > 1:\n                max_len = max(max_len, current_len)\n        \n        return max_len if max_len > 1 else -1"
}