{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43284000,
    "question_id": "2870",
    "elapsed_time": 239,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706402937718,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1158704343",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun alternatingSubarray(nums: IntArray): Int {\n        var maxLength = -1\n        var currentLength = 1\n\n        for (i in 1 until nums.size) {\n            if (i > 1 && Math.abs(nums[i] - nums[i - 1]) == 1 && Math.abs(nums[i - 1] - nums[i - 2]) == 1 && nums[i] != nums[i - 2]) {\n                currentLength++\n            } else {\n                currentLength = 2 // This accounts for the potential start of a new alternating sequence\n            }\n\n            // Ensure the sequence is truly alternating beyond a single pair\n            if (currentLength > 2) {\n                maxLength = maxOf(maxLength, currentLength)\n            }\n        }\n\n        // Check if any valid alternating subarray was found\n        return if (maxLength > 2) maxLength else -1\n    }\n}"
}