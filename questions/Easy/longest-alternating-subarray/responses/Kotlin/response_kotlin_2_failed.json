{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41152000,
    "question_id": "2870",
    "elapsed_time": 231,
    "compare_result": "111111111111111111111110111111111011110111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111110111111111111111111111111111111111111111111111111111111111110111111111011111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111101111111110111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111110111111111111110111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111101111111111111101111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111110111111111111110111111111111110111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011110111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111101111111111111111111011111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111101111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111110111101111111111111111111111111111101111111110111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011110111111111111111111111111111110111111111111111111111111111111111101111111111111101111011111111101111111111111111111111111111111111111111111111111111111111101111111111111111111111111111101111111110111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111011110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[14,30,29,49,3,23,44,21,26,52]",
    "expected_output": "-1",
    "task_finish_time": 1706403535794,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2821,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1158708107",
    "input_formatted": "[14,30,29,49,3,23,44,21,26,52]",
    "input": "[14,30,29,49,3,23,44,21,26,52]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun alternatingSubarray(nums: IntArray): Int {\n        // Initial maximum length set to -1, indicating no valid subarray found yet\n        var maxLength = -1\n        // Current length of an alternating subarray\n        var currentLength = 1\n\n        for (i in 1 until nums.size) {\n            // Check if the current and previous element satisfy the alternating condition\n            if ((nums[i] - nums[i - 1]).absoluteValue == 1) {\n                // If it's the beginning of a new potential subarray, reset currentLength to 2\n                if (currentLength == 1) currentLength = 2\n                else {\n                    // Check if the current sequence continues to alternate\n                    if ((nums[i] - nums[i - 2]) == 0) currentLength += 1\n                    else currentLength = 2 // Reset if the alternating pattern breaks\n                }\n            } else {\n                // If the current and previous elements do not alternate, reset\n                currentLength = 1\n            }\n\n            // Update maxLength if the current subarray length is greater\n            maxLength = maxOf(maxLength, currentLength)\n        }\n\n        // Return -1 if no alternating subarray is found; otherwise, return maxLength\n        return if (maxLength > 1) maxLength else -1\n    }\n}"
}