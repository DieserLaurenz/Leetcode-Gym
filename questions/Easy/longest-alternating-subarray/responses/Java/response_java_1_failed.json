{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43936000,
    "display_runtime": "1",
    "question_id": "2870",
    "elapsed_time": 220,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[21,9,5]",
    "expected_output": "-1",
    "task_finish_time": 1706389917297,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2360,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1158606235",
    "input_formatted": "[21,9,5]",
    "input": "[21,9,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int alternatingSubarray(int[] nums) {\n        // Maximum length of an alternating subarray initialized to -1 indicating not found\n        int maxLength = -1;\n        // Current length of the found alternating subarray\n        int currentLength = 1;\n        \n        for (int i = 1; i < nums.length; i++) {\n            // Check if the difference between consecutive elements alternates between 1 and -1\n            if ((i > 1) && (nums[i] - nums[i - 1] == -1 * (nums[i - 1] - nums[i - 2]))) {\n                // If it alternates, increase the length of the current subarray\n                currentLength++;\n            } else {\n                // If not alternating or only two elements are in sequence, reset currentLength to 2\n                currentLength = 2;\n            }\n            // Update maxLength if the current subarray length is greater\n            maxLength = Math.max(maxLength, currentLength);\n        }\n        \n        // Check if an alternating subarray was found. If not, return -1.\n        // Otherwise, return the maximum length found.\n        return maxLength > 1 ? maxLength : -1;\n    }\n}"
}