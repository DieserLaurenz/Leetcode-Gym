{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44516000,
    "display_runtime": "1",
    "question_id": "2870",
    "elapsed_time": 152,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706390516514,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 536,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1158611390",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int alternatingSubarray(int[] nums) {\n        int maxLength = -1;\n        int currentLength = 1;\n        boolean isValid = false; // Flag to check if a valid alternating subarray is found\n\n        for (int i = 1; i < nums.length; i++) {\n            // Check if current and previous element difference alternates correctly\n            if (i == 1 || nums[i] - nums[i - 1] == (i % 2 == 0 ? 1 : -1)) {\n                currentLength++;\n                if (currentLength >= 3) isValid = true; // Valid if at least 3 elements alternate\n            } else {\n                // Reset length and validity on pattern break\n                if (isValid) {\n                    maxLength = Math.max(maxLength, currentLength);\n                    isValid = false;\n                }\n                currentLength = 2; // Reset for a new potential subarray\n            }\n        }\n\n        // Final check for the last subarray\n        if (isValid) {\n            maxLength = Math.max(maxLength, currentLength);\n        }\n\n        return maxLength >= 3 ? maxLength : -1;\n    }\n}"
}