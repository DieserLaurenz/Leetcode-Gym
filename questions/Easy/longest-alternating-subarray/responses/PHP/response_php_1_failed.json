{
    "status_code": 15,
    "lang": "php",
    "run_success": false,
    "runtime_error": "Line 14: PHP Parse error:  Unclosed '{' on line 14 does not match ')' in solution.php",
    "full_runtime_error": "Line 14: PHP Parse error:  Unclosed '{' on line 14 does not match ')' in solution.php",
    "status_runtime": "N/A",
    "memory": 19736000,
    "question_id": "2870",
    "elapsed_time": 19,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706399698616,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1158682526",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function alternatingSubarray($nums) {\n        $maxLen = -1;\n        $currentLen = 1;\n\n        for ($i = 1; $i < count($nums); $i++) {\n            // Check if the current and previous element follow the alternating pattern\n            if ($i > 1 && (($nums[$i] - $nums[$i - 1]) === 1 && ($nums[$i - 1] - $nums[$i - 2]) === -1) || \n                ($nums[$i] - $nums[$i - 1]) === -1 && ($nums[$i - 1] - $nums[$i - 2]) === 1)) {\n                $currentLen++;\n            } else {\n                // Reset current length if the pattern breaks, but first check if it's alternating\n                if ($nums[$i] - $nums[$i - 1] === 1 || $nums[$i] - $nums[$i - 1] === -1) {\n                    $currentLen = 2; // Start a new subarray with a length of 2 (it's alternating)\n                } else {\n                    $currentLen = 1; // Not an alternating pattern\n                }\n            }\n            // Update maximum length found\n            $maxLen = max($maxLen, $currentLen);\n        }\n\n        // Return -1 if no alternating subarray exists, else return the max length found\n        return $maxLen > 1 ? $maxLen : -1;\n    }\n}"
}