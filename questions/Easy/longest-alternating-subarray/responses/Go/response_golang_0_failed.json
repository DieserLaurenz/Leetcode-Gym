{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3944000,
    "question_id": "2870",
    "elapsed_time": 54,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706471850513,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 459,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1159493248",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func alternatingSubarray(nums []int) int {\n    maxLength := -1\n    currentLength := 1\n\n    for i := 1; i < len(nums); i++ {\n        if nums[i] == nums[i-1]+1 && currentLength%2 == 0 || nums[i] == nums[i-1]-1 && currentLength%2 == 1 {\n            currentLength++\n            if currentLength > maxLength {\n                maxLength = currentLength\n            }\n        } else {\n            if currentLength > 1 && maxLength < currentLength {\n                maxLength = currentLength\n            }\n            currentLength = 1\n        }\n    }\n\n    if currentLength > 1 && maxLength < currentLength {\n        maxLength = currentLength\n    }\n\n    return maxLength\n}"
}