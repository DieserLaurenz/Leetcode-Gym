{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3868000,
    "question_id": "2870",
    "elapsed_time": 36,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[14,30,29,49,3,23,44,21,26,52]",
    "expected_output": "-1",
    "task_finish_time": 1706471896043,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2786,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1159493755",
    "input_formatted": "[14,30,29,49,3,23,44,21,26,52]",
    "input": "[14,30,29,49,3,23,44,21,26,52]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func alternatingSubarray(nums []int) int {\n    if len(nums) < 2 {\n        return -1 // Since we need at least two elements for an alternating subarray\n    }\n\n    maxLength := -1\n    currentLength := 1 // Start with 1 as we compare pairs\n\n    for i := 1; i < len(nums); i++ {\n        // Check if current pair is alternating with respect to the previous pair\n        if (nums[i]-nums[i-1] == 1 && currentLength%2 == 1) || (nums[i]-nums[i-1] == -1 && currentLength%2 == 0) {\n            currentLength++ // Extend the current alternating subarray\n            maxLength = max(maxLength, currentLength) // Update maxLength if currentLength is longer\n        } else {\n            currentLength = 2 // Reset currentLength (this subarray starts as a new alternating pair)\n        }\n    }\n\n    return maxLength\n}\n\n// Helper function to find the maximum of two integers\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}