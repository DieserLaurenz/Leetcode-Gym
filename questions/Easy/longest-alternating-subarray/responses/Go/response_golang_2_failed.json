{
    "status_code": 20,
    "lang": "golang",
    "run_success": false,
    "compile_error": "Line 32: Char 26: invalid character U+003F '?' (solution.go)",
    "full_compile_error": "Line 32: Char 26: invalid character U+003F '?' (solution.go)\nLine 32: Char 28: syntax error: unexpected maxLength at end of statement (solution.go)",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2870",
    "task_finish_time": 1706471936113,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1159494184",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "func alternatingSubarray(nums []int) int {\n    maxLength := -1 // To track the maximum length of an alternating subarray\n    currentLength := 1 // Tracks current potential alternating subarray length\n    \n    // This variable will track whether we're looking for a +1 or -1 difference next.\n    // It is initialized to 0 and will be set to 1 or -1 based on the first comparison.\n    var expectedDiff int\n    \n    for i := 1; i < len(nums); i++ {\n        diff := nums[i] - nums[i-1] // Calculate the difference between consecutive elements\n        \n        // Check if the current difference matches the expected alternating pattern\n        if diff == expectedDiff {\n            currentLength++ // Increment the length of the current alternating subarray\n            if currentLength > maxLength {\n                maxLength = currentLength // Update the maximum length found\n            }\n            // Flip the expected difference for the next element\n            expectedDiff *= -1\n        } else {\n            // Reset for a new potential alternating subarray starting from this element\n            if diff == 1 || diff == -1 {\n                currentLength = 2 // Start counting this new subarray\n                expectedDiff = -diff // Set the expected difference for the next element\n            } else {\n                currentLength = 1 // Reset if not starting a valid alternating pattern\n            }\n        }\n    }\n    \n    // If no alternating subarray of length > 1 is found, return -1\n    return maxLength > 1 ? maxLength : -1\n}"
}