{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54536000,
    "question_id": "2870",
    "elapsed_time": 122,
    "compare_result": "011000100111001101001100110101111011110111101001011110111101111011100101101111011110011001111011110111111111011110111101111011110111001111011110111100111011100111100111011111111111011011110011101111011110011101111011110101101111011110111101111011101011101111011000011101111011110110101111011100011001111011110101001111011111110000111011110111001011010110111101011111110111101111011110101001111011110111101111011100111001111011110110101110011110001110111011110111101001111101111101011011111111101111011011111010111111110111100111011110111101111011110111101111101110111101111011110111100011011110111100111011110111101011010100111101111111110111111111010110111101111011110011000111111110111101111011111111101111011110111101111011100000001011000111101100111011110110101111011110111101100111111111101111001110111001111011110001101111111110111101111000110111101110011110011100111101110111101111011110111001110011110110101111010110111101101011111111111111001110111101111010110111101111011101111101111101111111101111111110111101111011110111000111010111111101111011110110101011011100101111110011010101100111011111110101111011110111100111010100111101111011110111101001011110111101111011110111101111011111111001111111110100101111111100111101111001110101101011011111111001111011110011101111001100101101111011110110101111011110110101111111110111101011111110111101010011010111101010011110111001111011110111101111000110001001111011110111100111011110111101111111110111101111001110111101111011111111101111001110011101110011010111101111111110111101111011111111100100010110111100101010110111111111011111111101111011100111111010011110111101110010111111010110011110111101111011010111001110001110111100111011110111101111011110111101111011110111101111001110111101111011110100101111011111111100111011110111101101001110111101111001110111101111111110111101111010010110101010011110011101011010111101101111111010111111111011110111100111011111110101111110110111111111111110111101111011110111101110011110111001111111010011111111011110101100100011100111101110011110111111111010110111101111011010101101101011110110000101011110101101111011110111101111111110111101011011110111101111011110110101110011010111100111011110111101110001111111100111011110111101111011110111000111001010110101111011110111100111010110111001111001100110100110011110111101111010110111101101011110111101111001010110101111011110111000111011110111111111011110111101111011100011101111011100111101111011110101001111011110110101111011110110101101011010111101111011110110110111011110110101101000100001101111001110110001111010110111100101011100111001010011110010101111011110011101111011110010101011010110111101111011110111101111011110111101011011110111100111011110111101111011010111101011010111111100101011010111101110001100011111111011110111101111011110110101111010110111100111011110110101100011100101101111001110110001011100110111100010011110111101",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706395798416,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2069,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1158654213",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar alternatingSubarray = function(nums) {\n    let maxLength = -1;\n    let currentLength = 1;\n\n    for (let i = 1; i < nums.length; i++) {\n        // Check if the current element and the previous element form an alternating pattern\n        if ((i % 2 === 0 && nums[i] - nums[i-1] === -1) || (i % 2 !== 0 && nums[i] - nums[i-1] === 1)) {\n            currentLength++;\n            maxLength = Math.max(maxLength, currentLength);\n        } else {\n            // If not, reset the currentLength to 1 if the next element can start a new alternating subarray\n            if (i < nums.length - 1 && Math.abs(nums[i] - nums[i+1]) === 1) {\n                currentLength = 2;\n                i++; // Skip the next element as it's already a part of the new subarray\n            } else {\n                currentLength = 1;\n            }\n            maxLength = Math.max(maxLength, currentLength);\n        }\n    }\n\n    return maxLength;\n};"
}