{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53200000,
    "question_id": "2870",
    "elapsed_time": 136,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[21,22]",
    "expected_output": "2",
    "task_finish_time": 1706396994484,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2246,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1158663050",
    "input_formatted": "[21,22]",
    "input": "[21,22]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar alternatingSubarray = function(nums) {\n    let maxLen = -1; // Start with -1 to handle the case where no alternating subarray exists\n    let currentLen = 1; // Initialize current length of alternating subarray\n\n    // Iterate through the array to find alternating subarrays\n    for (let i = 1; i < nums.length; i++) {\n        // Check if the current element continues the pattern of the alternating subarray\n        if ((nums[i] - nums[i - 1] === 1 && currentLen % 2 === 1) || (nums[i] - nums[i - 1] === -1 && currentLen % 2 === 0)) {\n            // If yes, increment the length of the current alternating subarray\n            currentLen++;\n        } else {\n            // If not, reset the length of the current alternating subarray\n            currentLen = 2; // Reset to 2 since at least two numbers are needed to start an alternating pattern\n        }\n\n        // Check if the current pattern doesn't start properly or if it's the end of the array and doesn't alternate\n        if ((i === 1 && nums[i] - nums[i - 1] !== 1) || (i === nums.length - 1 && currentLen === 2 && nums[i] - nums[i - 1] !== -1)) {\n            currentLen = 1; // Reset current length since it's not a valid start or a valid alternating pattern\n        }\n\n        // Update max length if the current length of the alternating subarray is greater\n        maxLen = Math.max(maxLen, currentLen);\n    }\n\n    // Return the maximum length found, or -1 if no such subarray exists\n    return maxLen > 1 ? maxLen : -1;\n};"
}