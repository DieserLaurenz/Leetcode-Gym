{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54364000,
    "question_id": "2870",
    "elapsed_time": 112,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706396397289,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2537,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1158658599",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar alternatingSubarray = function(nums) {\n    let maxLength = -1; // Initialize the max length to -1 to handle cases where no valid subarray is found\n    let currentLength = 1; // Start with a length of 1 for the first element\n\n    for (let i = 1; i < nums.length; i++) {\n        // Check if the current and previous elements form an alternating pattern\n        if ((nums[i] - nums[i - 1] === 1 && currentLength % 2 === 1) || \n            (nums[i] - nums[i - 1] === -1 && currentLength % 2 === 0)) {\n            // If they do, increase the current alternating subarray length\n            currentLength++;\n        } else {\n            // If not, reset the current length to 1 or 2 based on whether the next element can start a new pattern\n            currentLength = 1;\n            // Check if the current element can be the start of a new alternating pattern\n            if (i < nums.length - 1 && Math.abs(nums[i] - nums[i + 1]) === 1) {\n                currentLength = 2; // Start a new subarray from this element\n                i++; // Increment i as we've already considered the next element as part of the new subarray\n            }\n        }\n        // Update the max length found so far\n        maxLength = Math.max(maxLength, currentLength);\n    }\n\n    // Return -1 if no alternating subarray is found, else return the maxLength\n    return maxLength > 1 ? maxLength : -1;\n};"
}