{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72764000,
    "question_id": "2870",
    "elapsed_time": 692,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706416435000,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2555,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1158876559",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec alternating_subarray(nums :: [integer]) :: integer\n  def alternating_subarray(nums) do\n    Enum.reduce(1..length(nums) - 1, {-1, 1}, fn i, {max_length, current_length} ->\n      if Enum.at(nums, i) - Enum.at(nums, i - 1) == (-1) * Integer.pow(-1, current_length) do\n        {max(max_length, current_length + 1), current_length + 1}\n      else\n        {max_length, 1}\n      end\n    end)\n    |> (fn {max_length, _} -> if max_length == -1, do: -1, else: max(max_length, 2) end).()\n  end\nend"
}