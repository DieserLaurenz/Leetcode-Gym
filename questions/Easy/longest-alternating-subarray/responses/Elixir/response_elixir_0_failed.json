{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 19: ** (UndefinedFunctionError) function Tuple.first/1 is undefined or private",
    "full_runtime_error": "Line 19: ** (UndefinedFunctionError) function Tuple.first/1 is undefined or private\n    (elixir 1.15.7) Tuple.first({2, 2})\n    solution.ex:19: Solution.alternating_subarray/1\n    solution.ex:41: Driver.consume_test_cases/2\n    solution.ex:29: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 73028000,
    "question_id": "2870",
    "elapsed_time": 320,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706415836313,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1158870921",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec alternating_subarray(nums :: [integer]) :: integer\n  def alternating_subarray(nums) do\n    nums\n    |> Enum.reduce({-1, 0}, fn x, {max_length, current_length} ->\n      if current_length == 0 do\n        {max_length, 2}\n      else\n        expected_diff = if rem(current_length, 2) == 0, do: 1, else: -1\n        actual_diff = x - Enum.at(nums, -current_length - 1)\n\n        if actual_diff == expected_diff do\n          {max(max_length, current_length + 1), current_length + 1}\n        else\n          {max(max_length, current_length), 2}\n        end\n      end\n    end)\n    |> Tuple.first()\n    |> case do\n      -1 -> -1\n      max_length -> max(max_length, 2)\n    end\n  end\nend"
}