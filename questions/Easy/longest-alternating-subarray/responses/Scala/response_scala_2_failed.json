{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57740000,
    "question_id": "2870",
    "elapsed_time": 599,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[4,5,6]",
    "expected_output": "2",
    "task_finish_time": 1706409358046,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2400,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1158751116",
    "input_formatted": "[4,5,6]",
    "input": "[4,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def alternatingSubarray(nums: Array[Int]): Int = {\n        var maxLen = -1\n        var currentLen = 1\n\n        for (i <- 1 until nums.length) {\n            // Check if the current element alternates from the previous one\n            if ((i > 1) && (nums(i) - nums(i - 1)).abs == 1 && (nums(i) - nums(i - 1)) != (nums(i - 1) - nums(i - 2))) {\n                currentLen += 1\n            } else {\n                currentLen = 2 // Reset to 2 as we're considering a new starting point for potential alternating subarray\n            }\n\n            // Update maxLen if currentLen is longer and meets the criteria of an alternating subarray\n            if (currentLen > 2) {\n                maxLen = maxLen max currentLen\n            }\n        }\n\n        // Adjust final maxLen to account for the possibility of no valid alternating subarray\n        if (maxLen < 3) -1 else maxLen\n    }\n}"
}