{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57988000,
    "question_id": "2870",
    "elapsed_time": 556,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[14,30,29,49,3,23,44,21,26,52]",
    "expected_output": "-1",
    "task_finish_time": 1706408760979,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2793,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1158741336",
    "input_formatted": "[14,30,29,49,3,23,44,21,26,52]",
    "input": "[14,30,29,49,3,23,44,21,26,52]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def alternatingSubarray(nums: Array[Int]): Int = {\n        // Initialize variables to track the maximum length of an alternating subarray\n        // and the length of the current alternating subarray.\n        var maxLength = -1\n        var currentLength = 1\n        \n        // Iterate through the array to check the difference pattern between consecutive elements.\n        for (i <- 0 until nums.length - 1) {\n            // Check if the current element and the next one follow the alternating pattern.\n            if ((nums(i + 1) - nums(i)).abs == 1 && (i == 0 || (nums(i + 1) - nums(i)) * (nums(i) - nums(i - 1)) < 0)) {\n                currentLength += 1 // If they do, increase the length of the current alternating subarray.\n                maxLength = maxLength max currentLength // Update the maximum length found so far.\n            } else {\n                currentLength = 2 // Reset the current length. Start from 2 because we have found a new pair that might start a new alternating sequence.\n            }\n        }\n        \n        // If no alternating subarray is found, maxLength will remain -1.\n        // Otherwise, maxLength will contain the length of the longest alternating subarray found.\n        maxLength\n    }\n}"
}