{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15932000,
    "question_id": "2870",
    "elapsed_time": 74,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706401319234,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1917,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1158693646",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func alternatingSubarray(_ nums: [Int]) -> Int {\n        if nums.count < 2 {\n            return -1 // Since we need at least two elements for an alternating subarray\n        }\n\n        var maxLength = -1\n        var currentLength = 1\n\n        for i in 1..<nums.count {\n            // Check if current element continues the alternating pattern\n            if (i % 2 == 1 && nums[i] - nums[i - 1] == 1) || (i % 2 == 0 && nums[i] - nums[i - 1] == -1) {\n                currentLength += 1\n            } else {\n                // If not, reset the current length but first check if the previous sequence was alternating\n                if currentLength > 1 {\n                    maxLength = max(maxLength, currentLength)\n                }\n                currentLength = 2 // Reset to 2 since we're looking for at least 2 elements in an alternating sequence\n            }\n        }\n\n        // Check one last time in case the longest alternating subarray is at the end of the array\n        maxLength = max(maxLength, currentLength)\n\n        // If maxLength was never updated, it means there was no alternating subarray found\n        return maxLength > 1 ? maxLength : -1\n    }\n}"
}