{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15780000,
    "question_id": "2870",
    "elapsed_time": 66,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706400717388,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 527,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1158689561",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func alternatingSubarray(_ nums: [Int]) -> Int {\n        var maxLength = -1\n        var currentLength = 1\n        \n        for i in 1..<nums.count {\n            if (nums[i] - nums[i-1]).magnitude == 1 && (nums[i] - nums[i-1]) * (nums[max(0, i-1)] - nums[max(0, i-2)]) < 0 {\n                currentLength += 1\n                maxLength = max(maxLength, currentLength)\n            } else {\n                currentLength = 1\n            }\n        }\n        \n        return maxLength == 1 ? -1 : maxLength\n    }\n}"
}