{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 17: Char 19: Error: The getter 'Math' isn't defined for the class 'Solution'.",
    "full_runtime_error": "Line 17: Char 19: Error: The getter 'Math' isn't defined for the class 'Solution'.\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'Math'.\n      maxLength = Math.max(maxLength, currentLength);\n                  ^^^^",
    "status_runtime": "N/A",
    "memory": 147500000,
    "question_id": "2870",
    "elapsed_time": 349,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706404556872,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1158714515",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int alternatingSubarray(List<int> nums) {\n    if (nums.length < 2) return -1; // Early return for arrays smaller than required subarray length\n\n    int maxLength = -1;\n    int currentLength = 1; // Start from 1 as we compare pairs of elements\n\n    for (int i = 1; i < nums.length; i++) {\n      // Check if the current pair is alternating according to the problem's definition\n      if ((nums[i] - nums[i - 1]).abs() == 1) {\n        currentLength++;\n      } else {\n        // If not alternating, reset the length\n        currentLength = 1;\n      }\n      // Update the max length\n      maxLength = Math.max(maxLength, currentLength);\n    }\n\n    // Check if an alternating subarray was found and adjust the return value accordingly\n    return maxLength > 1 ? maxLength : -1;\n  }\n}"
}