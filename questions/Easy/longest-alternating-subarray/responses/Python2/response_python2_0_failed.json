{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11616000,
    "question_id": "2870",
    "elapsed_time": 87,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[31,32,31,32,33]",
    "expected_output": "4",
    "task_finish_time": 1708713994915,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1023,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184242081",
    "input_formatted": "[31,32,31,32,33]",
    "input": "[31,32,31,32,33]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def alternatingSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_length = -1\n        current_length = 1\n        for i in range(1, len(nums)):\n            if nums[i] - nums[i-1] == (-1)**i:\n                current_length += 1\n            else:\n                max_length = max(max_length, current_length)\n                current_length = 2 if i < len(nums) - 1 and nums[i+1] - nums[i] == -1 else 1\n        max_length = max(max_length, current_length)\n        return max_length if max_length > 1 else -1"
}