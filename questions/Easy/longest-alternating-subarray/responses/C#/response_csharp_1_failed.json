{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 49344000,
    "question_id": "2870",
    "elapsed_time": 187,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706393159291,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1087,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1158633452",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int AlternatingSubarray(int[] nums) {\n        int maxLength = -1;\n        int currentLength = 1;\n\n        // Start iterating from the second element to compare with the previous\n        for (int i = 1; i < nums.Length; i++) {\n            // Check if the current and previous elements form an alternating pattern\n            if (Math.Abs(nums[i] - nums[i - 1]) == 1 && (i == 1 || (nums[i] - nums[i - 2] != nums[i - 1] - nums[i]))) {\n                currentLength++;\n            } else {\n                // Only update maxLength if the currentLength is for a valid alternating subarray\n                if (currentLength > 1) {\n                    maxLength = Math.Max(maxLength, currentLength);\n                }\n                // Reset currentLength since current pair doesn't alternate with previous\n                currentLength = 2; // Start counting again including the current element\n            }\n        }\n\n        // Update maxLength one last time in case the longest alternating subarray ends with the last element\n        if (currentLength > 1) {\n            maxLength = Math.Max(maxLength, currentLength);\n        }\n\n        // If no alternating subarray was found, return -1\n        return maxLength == -1 ? -1 : maxLength;\n    }\n}"
}