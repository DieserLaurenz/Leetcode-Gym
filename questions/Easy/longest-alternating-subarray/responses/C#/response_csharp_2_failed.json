{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44028000,
    "question_id": "2870",
    "elapsed_time": 191,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[14,30,29,49,3,23,44,21,26,52]",
    "expected_output": "-1",
    "task_finish_time": 1706393756808,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1158638213",
    "input_formatted": "[14,30,29,49,3,23,44,21,26,52]",
    "input": "[14,30,29,49,3,23,44,21,26,52]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int AlternatingSubarray(int[] nums) {\n        // Edge case: If the array length is less than 2, cannot form an alternating subarray\n        if (nums.Length < 2) return -1;\n\n        int maxLength = 1; // Start with 1 as the minimal length for any valid subarray\n        int currentLength = 1; // Current length of the alternating subarray\n\n        for (int i = 1; i < nums.Length; i++) {\n            // Check if the current element continues the alternating pattern\n            if (i > 1 && (nums[i] - nums[i - 1] == 1 && nums[i - 1] - nums[i - 2] == -1) || \n                (nums[i] - nums[i - 1] == -1 && nums[i - 1] - nums[i - 2] == 1)) {\n                currentLength++;\n            } else {\n                // If not directly alternating, check if it can start a new pattern with the previous element\n                if (nums[i] - nums[i - 1] == 1 || nums[i] - nums[i - 1] == -1) {\n                    currentLength = 2; // Reset current length to 2 as it starts a new potential subarray\n                } else {\n                    // Not part of an alternating sequence, reset length\n                    currentLength = 1;\n                }\n            }\n\n            // Update the max length found so far\n            maxLength = Math.Max(maxLength, currentLength);\n        }\n\n        // If no alternating subarray of length > 1 is found, return -1\n        return maxLength > 1 ? maxLength : -1;\n    }\n}"
}