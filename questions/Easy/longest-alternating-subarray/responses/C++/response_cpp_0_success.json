{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "19 ms",
    "memory": 68952000,
    "question_id": "2870",
    "elapsed_time": 56,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706388894533,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2880,
    "total_testcases": 2880,
    "runtime_percentile": 63.75999999999999,
    "status_memory": "69 MB",
    "memory_percentile": 21.525799999999997,
    "pretty_lang": "C++",
    "submission_id": "1158597142",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int alternatingSubarray(vector<int>& nums) {\n        // Initialize the maximum length to -1, indicating no valid subarray found yet.\n        int maxLength = -1;\n        // Loop through the array to find alternating subarrays.\n        for (int i = 0; i < nums.size() - 1; ++i) {\n            // Start from each element and try to extend the subarray.\n            int length = 1; // Each subarray starts with at least one element.\n            for (int j = i + 1; j < nums.size(); ++j) {\n                // Check if the current and next elements form an alternating pattern.\n                if ((nums[j] - nums[j - 1] == 1 && (j - i) % 2 == 1) ||\n                    (nums[j] - nums[j - 1] == -1 && (j - i) % 2 == 0)) {\n                    ++length; // Extend the length of the subarray.\n                } else {\n                    break; // The pattern breaks, stop extending this subarray.\n                }\n            }\n            // Update the maximum length if the current subarray is longer.\n            if (length > 1 && length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n};"
}