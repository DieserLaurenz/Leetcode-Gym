{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59668000,
    "question_id": "2870",
    "elapsed_time": 1651,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[21,9,5]",
    "expected_output": "-1",
    "task_finish_time": 1706414820115,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2368,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1158860640",
    "input_formatted": "[21,9,5]",
    "input": "[21,9,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec alternating_subarray(Nums :: [integer()]) -> integer().\nalternating_subarray(Nums) ->\n    find_max_alternating_subarray(Nums, 1, 1, -1).\n\nfind_max_alternating_subarray([_], MaxLen, _, _) ->\n    MaxLen;\nfind_max_alternating_subarray([First, Second | Tail], MaxLen, CurrLen, PrevDiff) ->\n    Diff = Second - First,\n    if\n        Diff == 1 orelse Diff == -1 ->\n            if\n                Diff =/= PrevDiff ->\n                    find_max_alternating_subarray([Second | Tail], max(MaxLen, CurrLen + 1), CurrLen + 1, Diff);\n                true ->\n                    find_max_alternating_subarray([Second | Tail], MaxLen, 2, Diff)\n            end;\n        true ->\n            find_max_alternating_subarray([Second | Tail], MaxLen, 1, -1)\n    end."
}