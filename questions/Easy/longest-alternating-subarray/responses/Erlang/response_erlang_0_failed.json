{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60108000,
    "question_id": "2870",
    "elapsed_time": 1738,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706414219082,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 900,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1158851526",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec alternating_subarray(Nums :: [integer()]) -> integer().\nalternating_subarray(Nums) ->\n    alternating_subarray(Nums, 0, 0, -1).\n\nalternating_subarray([], MaxLen, CurrLen, _) ->\n    max(MaxLen, CurrLen);\nalternating_subarray([_], MaxLen, CurrLen, _) ->\n    max(MaxLen, CurrLen);\nalternating_subarray([First, Second | Tail], MaxLen, CurrLen, PrevDiff) ->\n    Diff = Second - First,\n    if\n        (Diff == 1 orelse Diff == -1) andalso Diff =/= PrevDiff ->\n            alternating_subarray([Second | Tail], MaxLen, CurrLen + 1, Diff);\n        true ->\n            NewMaxLen = max(MaxLen, CurrLen + 1),\n            alternating_subarray([Second | Tail], NewMaxLen, 1, -1)\n    end."
}