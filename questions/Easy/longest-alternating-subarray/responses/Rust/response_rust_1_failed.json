{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2152000,
    "question_id": "2870",
    "elapsed_time": 23,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706411576318,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2392,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1158800076",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn alternating_subarray(nums: Vec<i32>) -> i32 {\n        if nums.len() < 2 {\n            return -1; // If the array is too short, return -1\n        }\n\n        let mut max_length = 1; // Start with 1 because we're looking for differences\n        let mut current_length = 1;\n        let mut expected_difference = nums[1] - nums[0]; // Initialize with the first difference\n\n        for i in 1..nums.len() {\n            let current_difference = nums[i] - nums[i - 1];\n            if current_difference.abs() == 1 && current_difference == expected_difference {\n                current_length += 1;\n                expected_difference *= -1; // Flip the expected difference for the next pair\n            } else {\n                // Reset for a new potential subarray\n                max_length = max_length.max(current_length);\n                current_length = 1;\n                expected_difference = nums[i] - nums[i - 1];\n                if expected_difference.abs() == 1 {\n                    // Start counting again if the current difference is valid\n                    current_length += 1;\n                }\n            }\n        }\n\n        max_length = max_length.max(current_length); // Check the last counted subarray\n\n        if max_length > 1 {\n            max_length // Return the max length if a valid subarray was found\n        } else {\n            -1 // Return -1 if no valid subarray exists\n        }\n    }\n}"
}