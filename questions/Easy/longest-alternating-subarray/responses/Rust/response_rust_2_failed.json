{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2096000,
    "question_id": "2870",
    "elapsed_time": 17,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[21,9,5]",
    "expected_output": "-1",
    "task_finish_time": 1706412174900,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2306,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1158812750",
    "input_formatted": "[21,9,5]",
    "input": "[21,9,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn alternating_subarray(nums: Vec<i32>) -> i32 {\n        let mut max_length = 1; // Assuming every single element can start a potential alternating subarray\n        let mut current_length = 1;\n\n        // Start from the second element to compare with the first\n        for i in 1..nums.len() {\n            if i > 1 && (nums[i] - nums[i - 1]).signum() != (nums[i - 1] - nums[i - 2]).signum() {\n                // If the current difference has a different sign than the previous, the pattern continues\n                current_length += 1;\n            } else {\n                // Pattern breaks or is starting new, update max_length accordingly\n                max_length = max_length.max(current_length);\n                current_length = 2; // Reset to 2 because an alternating subarray must have at least 2 elements with alternating signs\n            }\n        }\n\n        // Final check to ensure the longest subarray is accounted for\n        max_length = max_length.max(current_length);\n\n        if max_length > 1 {\n            max_length\n        } else {\n            -1 // Return -1 if no valid alternating subarray exists\n        }\n    }\n}"
}