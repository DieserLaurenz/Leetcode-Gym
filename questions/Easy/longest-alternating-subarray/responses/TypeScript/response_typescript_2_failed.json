{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54456000,
    "question_id": "2870",
    "elapsed_time": 113,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706398618184,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1580,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1158674698",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function alternatingSubarray(nums: number[]): number {\n  let maxLength = -1;\n  // Initialize currentLength to 0 since we haven't found an alternating sequence yet.\n  let currentLength = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    // Check if the current pair of numbers follows the alternating pattern\n    if ((i === 1 || currentLength > 0) && Math.abs(nums[i] - nums[i - 1]) === 1) {\n      // If it's the start of an alternating sequence or continuation, increment the current length\n      currentLength++;\n      // Always update maxLength when currentLength is updated\n      maxLength = Math.max(maxLength, currentLength);\n    } else {\n      // If the pattern breaks and we had a sequence, finalize its length\n      if (currentLength > 0) {\n        maxLength = Math.max(maxLength, currentLength + 1);\n        currentLength = 0; // Reset for the next potential sequence\n      }\n    }\n  }\n\n  // Adjust for sequences that end at the last element\n  if (currentLength > 0) {\n    maxLength = Math.max(maxLength, currentLength + 1);\n  }\n\n  return maxLength >= 2 ? maxLength : -1;\n}"
}