{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55092000,
    "question_id": "2870",
    "elapsed_time": 184,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[21,9,5]",
    "expected_output": "-1",
    "task_finish_time": 1706398019984,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2362,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1158670441",
    "input_formatted": "[21,9,5]",
    "input": "[21,9,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function alternatingSubarray(nums: number[]): number {\n  let maxLength = -1;\n  let currentLength = 1;\n\n  for (let i = 1; i < nums.length; i++) {\n    // Check if the current element and the previous one follow the alternating pattern\n    if ((nums[i] - nums[i - 1] === 1 && currentLength % 2 === 1) || (nums[i] - nums[i - 1] === -1 && currentLength % 2 === 0)) {\n      currentLength++;\n    } else {\n      // Reset currentLength if the alternating pattern breaks\n      currentLength = 2; // Start counting again as we have a new possible subarray starting with i-1 to i\n    }\n    // Update maxLength if a longer alternating subarray is found\n    maxLength = Math.max(maxLength, currentLength);\n  }\n\n  // Check if an alternating subarray was found\n  return maxLength >= 2 ? maxLength : -1;\n};"
}