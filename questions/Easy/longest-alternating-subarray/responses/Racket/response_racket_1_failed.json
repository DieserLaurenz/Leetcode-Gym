{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101072000,
    "question_id": "2870",
    "elapsed_time": 285,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,4,3,4]",
    "expected_output": "4",
    "task_finish_time": 1706413201152,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 889,
    "total_testcases": 2880,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1158833107",
    "input_formatted": "[2,3,4,3,4]",
    "input": "[2,3,4,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (alternating-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let loop ((nums nums) (max-len -1) (current-len 1) (alternating? #t))\n    (match nums\n      [(list) (if (> max-len 1) max-len -1)]\n      [(list _rest ...) ; Ensure there's at least one element to avoid matching error\n       (if (and (> (length nums) 1) alternating?)\n           (let* ((first (car nums))\n                  (second (cadr nums))\n                  (diff (- second first)))\n             (if (or (= diff 1) (= diff -1))\n                 (loop (cdr nums) (max max-len (add1 current-len)) (add1 current-len) (not alternating?))\n                 (loop (cdr nums) max-len 1 #t)))\n           (loop (cdr nums) max-len 1 #t))])))"
}