{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 12: Char 49: inc: unbound identifier",
    "full_compile_error": "Line 12: Char 49: inc: unbound identifier\n  in: inc\n  compilation context...:\n   solution.rkt\n  location...:\n   prog_joined.rkt:23:48",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2870",
    "task_finish_time": 1706412595724,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1158821246",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (alternating-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let loop ((nums nums) (max-len -1) (current-len 1) (alternating? #t))\n    (match nums\n      [(list) (if (> max-len 1) max-len -1)]\n      [(list _rest ...) ; Ensure there's at least one element to avoid matching error\n       (if (and (> (length nums) 1) alternating?)\n           (let* ((first (car nums))\n                  (second (cadr nums))\n                  (diff (- second first)))\n             (if (or (= diff 1) (= diff -1))\n                 (loop (cdr nums) (max max-len (inc current-len)) (inc current-len) (not alternating?))\n                 (loop (cdr nums) max-len 1 #t)))\n           (loop (cdr nums) max-len 1 #t))])))"
}