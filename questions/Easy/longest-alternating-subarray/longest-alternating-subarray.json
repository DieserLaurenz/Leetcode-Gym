{
    "acRate": 33.46852435028788,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2765",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Longest Alternating Subarray",
    "titleSlug": "longest-alternating-subarray",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Enumeration",
            "id": "VG9waWNUYWdOb2RlOjYxMDY2",
            "slug": "enumeration"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int alternatingSubarray(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int alternatingSubarray(int[] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def alternatingSubarray(self, nums):         \"\"\"         :type nums: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def alternatingSubarray(self, nums: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int alternatingSubarray(int* nums, int numsSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int AlternatingSubarray(int[] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {number}  */ var alternatingSubarray = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function alternatingSubarray(nums: number[]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Integer      */     function alternatingSubarray($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func alternatingSubarray(_ nums: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun alternatingSubarray(nums: IntArray): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int alternatingSubarray(List<int> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func alternatingSubarray(nums []int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Integer} def alternating_subarray(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def alternatingSubarray(nums: Array[Int]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn alternating_subarray(nums: Vec<i32>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (alternating-subarray nums)   (-> (listof exact-integer?) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec alternating_subarray(Nums :: [integer()]) -> integer(). alternating_subarray(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec alternating_subarray(nums :: [integer]) :: integer   def alternating_subarray(nums) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if:  m is greater than 1. s1 = s0 + 1. The 0-indexed subarray s looks like [s0, s1, s0, s1,...,s(m-1) % 2]. In other words, s1 - s0 = 1, s2 - s1 = -1, s3 - s2 = 1, s4 - s3 = -1, and so on up to s[m - 1] - s[m - 2] = (-1)m.  Return the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists. A subarray is a contiguous non-empty sequence of elements within an array.  Example 1:  Input: nums = [2,3,4,3,4] Output: 4 Explanation: The alternating subarrays are [3,4], [3,4,3], and [3,4,3,4]. The longest of these is [3,4,3,4], which is of length 4.  Example 2:  Input: nums = [4,5,6] Output: 2 Explanation: [4,5] and [5,6] are the only two alternating subarrays. They are both of length 2.   Constraints:  2 <= nums.length <= 100 1 <= nums[i] <= 104  "
}