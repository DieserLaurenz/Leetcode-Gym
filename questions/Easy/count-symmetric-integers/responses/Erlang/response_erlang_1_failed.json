{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 29: exception error: undef",
    "full_runtime_error": "Line 29: exception error: undef\n[{erlang,byte,\"1\",[]},\n {solution,digit_to_int,1,[{file,\"solution.erl\"},{line,29}]},\n {solution,'-sum_digits/1-fun-0-',2,[{file,\"solution.erl\"},{line,26}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,is_symmetric,1,[{file,\"solution.erl\"},{line,22}]},\n {solution,count_symmetric_integers,3,[{file,\"solution.erl\"},{line,8}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,47}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,33}]}]",
    "status_runtime": "N/A",
    "memory": 59356000,
    "question_id": "2998",
    "elapsed_time": 1300,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "1\n100",
    "expected_output": "9",
    "task_finish_time": 1706140312539,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1967,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1156003171",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec count_symmetric_integers(Low :: integer(), High :: integer()) -> integer().\ncount_symmetric_integers(Low, High) ->\n    count_symmetric_integers(Low, High, 0).\n\ncount_symmetric_integers(Current, High, Count) when Current > High ->\n    Count;\ncount_symmetric_integers(Current, High, Count) ->\n    NewCount = case is_symmetric(Current) of\n        true -> Count + 1;\n        false -> Count\n    end,\n    count_symmetric_integers(Current + 1, High, NewCount).\n\nis_symmetric(Number) ->\n    Digits = integer_to_list(Number),\n    Length = length(Digits),\n    if\n        Length rem 2 =/= 0 ->\n            false;\n        true ->\n            {FirstHalf, SecondHalf} = lists:split(Length div 2, Digits),\n            sum_digits(FirstHalf) =:= sum_digits(SecondHalf)\n    end.\n\nsum_digits(Digits) ->\n    lists:foldl(fun(Digit, Acc) -> Acc + digit_to_int(Digit) end, 0, Digits).\n\ndigit_to_int(DigitChar) ->\n    erlang:byte(DigitChar) - 48."
}