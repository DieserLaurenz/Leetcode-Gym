{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16540000,
    "question_id": "2825",
    "elapsed_time": 607,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbbd\"",
    "expected_output": "3",
    "task_finish_time": 1709021945661,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 5013,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1187525807",
    "input_formatted": "\"cbbd\"",
    "input": "\"cbbd\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minimizedStringLength(self, s: str) -> int:\n        from collections import Counter\n        stack = []\n        for char in s:\n            if stack and stack[-1][0] == char:\n                _, count = stack.pop()\n                if count == 1:  # If it's the second occurrence, remove both.\n                    continue\n                else:\n                    stack.append((char, count-1))  # Decrease count and re-add.\n            else:\n                stack.append((char, Counter(s[stack[-1][1]+1:] if stack else s)[char]))  # Append with remaining occurrences.\n        return len(''.join(char * count for char, count in stack))"
}