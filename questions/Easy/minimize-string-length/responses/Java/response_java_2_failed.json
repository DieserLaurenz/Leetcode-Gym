{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45236000,
    "display_runtime": "17",
    "question_id": "2825",
    "elapsed_time": 204,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbbd\"",
    "expected_output": "3",
    "task_finish_time": 1706519300707,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1020,
    "total_testcases": 5013,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1159926549",
    "input_formatted": "\"cbbd\"",
    "input": "\"cbbd\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimizedStringLength(String s) {\n        // Initialize a stack to keep track of characters\n        Stack<Character> stack = new Stack<>();\n        \n        // Variable to track changes in the stack, indicating removals\n        boolean changed = true;\n        \n        // Convert the string to a character array for efficient processing\n        char[] chars = s.toCharArray();\n        \n        // Keep processing as long as changes are made to the stack\n        while (changed) {\n            changed = false; // Reset changed flag for each iteration\n            stack.clear(); // Clear the stack for a fresh start\n            \n            for (char c : chars) {\n                if (!stack.isEmpty() && stack.peek() == c) {\n                    // If the current character matches the top of the stack, remove it\n                    // This simulates deleting the closest occurrence to the left\n                    stack.pop();\n                    changed = true; // Indicate a change has been made\n                } else {\n                    // Otherwise, push the current character onto the stack\n                    stack.push(c);\n                }\n            }\n            \n            // Prepare chars for the next iteration if changes were made\n            if (changed) {\n                StringBuilder sb = new StringBuilder();\n                for (Character c : stack) {\n                    sb.append(c);\n                }\n                chars = sb.toString().toCharArray();\n            }\n        }\n        \n        // The final size of the stack represents the minimized string length\n        return stack.size();\n    }\n}"
}