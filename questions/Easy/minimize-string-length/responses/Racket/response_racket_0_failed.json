{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126616000,
    "question_id": "2825",
    "elapsed_time": 364,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"aaabc\"",
    "expected_output": "3",
    "task_finish_time": 1709027571360,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 841,
    "total_testcases": 5013,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187589303",
    "input_formatted": "\"aaabc\"",
    "input": "\"aaabc\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimized-string-length s)\n  (-> string? exact-integer?)\n  (let ([chars (string->list s)])\n    (define (helper lst seen)\n      (match lst\n        [(list) (length seen)]\n        [(list-rest c rest)\n         (if (member c seen)\n             (helper (remove c rest) (remove c seen))\n             (helper rest (cons c seen)))]))\n    (helper chars '())))"
}