{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2052000,
    "question_id": "2825",
    "elapsed_time": 29,
    "compare_result": "000111111111111111111111111111111011111111111111101111111111111111111110111111111110111111111111111111111111111111111111111111111111101111111111011111111011111111111011111111111111111111111111011111110111111111111111111101111111111010111111111111111111111101111011111111111111111111111111111111111111111111101111111111111111110001010010110011001011111101101111011111101111111011100110111111111111111101101100011111111111110101011001011111111011111111110110111111111110111111111011111111110011111111001101001110111111110111111011101010101111011111110011101100011001001011100101010111110110110111101011010110000011111011111111111111101101110011111011011111011110111110111110111100100100111011101101110000111011100100110110110101010100101001110100101101000101111000101110011001000011110101111110001000100111000011111100111110011011010010100000010010110011001100011000101010101001000101011010010011011100111001100000110011111000001011101001011011110101011100110001011010011110001001111001100011010100001100110000000000001011100000011001100111000100011000001001000110011101100001011001100110110011010000010010010010100001010000010001000000011100000001100001101000101000000000000100110000001000100000010000001000001000000010110000110001000100100101000100000000001010000001000000001010001000000000100010001100000100101010000111000000000010000001100010001010000100101001101010010001000000001100000000010000000000000100000000010001000100100101000000000100000000000000110100100010000000100000000000110000000001000011000100010100000000000000010101000000001110001010000001000000101011010000011100010000000001100011100000000000001000010000010001110000000000000000000000000100100100000000000000000110000000000000000011000000000010010000010011110000001011001001000001000100100010000000000000000000000000100001001000001100000000001000000001010000000000000000000000010000100000000001000010000100000000100000000000000001100100000001000010000010000000010000000000000000000000000000000000000000000000010100000000000001000000000000000110000000000100000100000000010000000000000001000011100000000000000010100000000000000000010000000000000000010000000000000001001000000000000000000001000000100000000100000000000000000000100000000000000000000000000010000000010000000000000000000010000000000000000100000000000000000000000000100000000010000000000010010000000000010010000000000100000100000100000000000010000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000010000000000010000000000000000001000010000000000000000000000000000000000000000000100010000000000100001010000000000000001000000000000000100000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"aaabc\"",
    "expected_output": "3",
    "task_finish_time": 1709027520601,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 5013,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1187588725",
    "input_formatted": "\"aaabc\"",
    "input": "\"aaabc\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimized_string_length(s: String) -> i32 {\n        use std::collections::HashMap;\n\n        let mut char_indices: HashMap<char, Vec<usize>> = HashMap::new();\n        for (i, c) in s.chars().enumerate() {\n            char_indices.entry(c).or_default().push(i);\n        }\n\n        let mut removals = 0;\n        for indices in char_indices.values() {\n            if indices.len() > 1 {\n                for i in 0..indices.len() - 1 {\n                    if indices[i + 1] - indices[i] == 2 {\n                        removals += 1;\n                    }\n                }\n            }\n        }\n\n        (s.len() as i32) - (removals * 2)\n    }\n}"
}