{
    "acRate": 82.83242316084198,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2828",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Check if a String Is an Acronym of Words",
    "titleSlug": "check-if-a-string-is-an-acronym-of-words",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     bool isAcronym(vector<string>& words, string s) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public boolean isAcronym(List<String> words, String s) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def isAcronym(self, words, s):         \"\"\"         :type words: List[str]         :type s: str         :rtype: bool         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def isAcronym(self, words: List[str], s: str) -> bool:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "bool isAcronym(char ** words, int wordsSize, char * s){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public bool IsAcronym(IList<string> words, string s) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string[]} words  * @param {string} s  * @return {boolean}  */ var isAcronym = function(words, s) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function isAcronym(words: string[], s: string): boolean {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String[] $words      * @param String $s      * @return Boolean      */     function isAcronym($words, $s) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func isAcronym(_ words: [String], _ s: String) -> Bool {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun isAcronym(words: List<String>, s: String): Boolean {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   bool isAcronym(List<String> words, String s) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func isAcronym(words []string, s string) bool {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String[]} words # @param {String} s # @return {Boolean} def is_acronym(words, s)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def isAcronym(words: List[String], s: String): Boolean = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn is_acronym(words: Vec<String>, s: String) -> bool {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (is-acronym words s)   (-> (listof string?) string? boolean?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec is_acronym(Words :: [unicode:unicode_binary()], S :: unicode:unicode_binary()) -> boolean(). is_acronym(Words, S) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec is_acronym(words :: [String.t], s :: String.t) :: boolean   def is_acronym(words, s) do    end end"
        }
    ],
    "content": "Given an array of strings words and a string s, determine if s is an acronym of words. The string s is considered an acronym of words if it can be formed by concatenating the first character of each string in words in order. For example, \"ab\" can be formed from [\"apple\", \"banana\"], but it can't be formed from [\"bear\", \"aardvark\"]. Return true if s is an acronym of words, and false otherwise.   Example 1:  Input: words = [\"alice\",\"bob\",\"charlie\"], s = \"abc\" Output: true Explanation: The first character in the words \"alice\", \"bob\", and \"charlie\" are 'a', 'b', and 'c', respectively. Hence, s = \"abc\" is the acronym.   Example 2:  Input: words = [\"an\",\"apple\"], s = \"a\" Output: false Explanation: The first character in the words \"an\" and \"apple\" are 'a' and 'a', respectively.  The acronym formed by concatenating these characters is \"aa\".  Hence, s = \"a\" is not the acronym.  Example 3:  Input: words = [\"never\",\"gonna\",\"give\",\"up\",\"on\",\"you\"], s = \"ngguoy\" Output: true Explanation: By concatenating the first character of the words in the array, we get the string \"ngguoy\".  Hence, s = \"ngguoy\" is the acronym.   Constraints:  1 <= words.length <= 100 1 <= words[i].length <= 10 1 <= s.length <= 100 words[i] and s consist of lowercase English letters.  "
}