{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "642 ms",
    "memory": 57188000,
    "question_id": "3227",
    "elapsed_time": 894,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706268285358,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 80.0,
    "status_memory": "57.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1157331964",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findMissingAndRepeatedValues(grid: Array[Array[Int]]): Array[Int] = {\n        val n = grid.length\n        val totalNums = n * n\n        val seen = scala.collection.mutable.Set[Int]()\n        var repeated = 0\n\n        // Find the repeated number\n        for (row <- grid; num <- row) {\n            if (seen.contains(num)) {\n                repeated = num\n            } else {\n                seen.add(num)\n            }\n        }\n\n        // Find the missing number\n        val missing = (1 to totalNums).find(num => !seen.contains(num)).getOrElse(-1)\n\n        Array(repeated, missing)\n    }\n}"
}