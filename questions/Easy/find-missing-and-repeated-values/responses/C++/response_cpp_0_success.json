{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "42 ms",
    "memory": 31932000,
    "question_id": "3227",
    "elapsed_time": 74,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706266350025,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 30.927600000000023,
    "status_memory": "31.9 MB",
    "memory_percentile": 5.119200000000034,
    "pretty_lang": "C++",
    "submission_id": "1157312147",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {\n        int n = grid.size();\n        unordered_map<int, int> freq;\n        \n        // Count the frequency of each number in the grid\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                freq[grid[i][j]]++;\n            }\n        }\n\n        int missing = 0, repeating = 0;\n        for (int i = 1; i <= n * n; ++i) {\n            if (freq.find(i) == freq.end()) {\n                missing = i;  // Number not found in the grid\n            } else if (freq[i] == 2) {\n                repeating = i;  // Number found twice in the grid\n            }\n        }\n\n        return {repeating, missing};\n    }\n};"
}