{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "6 ms",
    "memory": 2284000,
    "question_id": "3227",
    "elapsed_time": 14,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706276271805,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 42.85719999999999,
    "status_memory": "2.3 MB",
    "memory_percentile": 30.769299999999987,
    "pretty_lang": "Rust",
    "submission_id": "1157417052",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn find_missing_and_repeated_values(grid: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = grid.len();\n        let mut freq_map = HashMap::new();\n\n        // Count the frequency of each number in the grid\n        for i in 0..n {\n            for j in 0..n {\n                *freq_map.entry(grid[i][j]).or_insert(0) += 1;\n            }\n        }\n\n        let mut missing = 0;\n        let mut repeated = 0;\n\n        // Find the missing and repeated numbers\n        for num in 1..=(n * n) as i32 {\n            match freq_map.get(&num) {\n                Some(&count) => {\n                    if count == 2 {\n                        repeated = num;\n                    }\n                },\n                None => {\n                    missing = num;\n                },\n            }\n        }\n\n        vec![repeated, missing]\n    }\n}"
}