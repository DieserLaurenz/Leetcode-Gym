{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "366 ms",
    "memory": 63136000,
    "question_id": "3227",
    "elapsed_time": 1665,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706276861829,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 100,
    "status_memory": "63.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1157424489",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec find_missing_and_repeated_values(Grid :: [[integer()]]) -> [integer()].\nfind_missing_and_repeated_values(Grid) ->\n    N = length(Grid),\n    MaxVal = N * N,\n    ExpectedSum = (MaxVal * (MaxVal + 1)) div 2,\n    FlattenedGrid = lists:flatten(Grid),\n    {ActualSum, CountMap} = lists:foldl(fun(X, {Sum, Map}) ->\n        {Sum + X, maps:update_with(X, fun(Val) -> Val + 1 end, 1, Map)}\n    end, {0, maps:new()}, FlattenedGrid),\n    Missing = ExpectedSum - ActualSum,\n    Repeated = find_repeated(CountMap),\n    [Repeated, Missing + Repeated].\n\nfind_repeated(CountMap) ->\n    maps:fold(fun(Key, Val, Res) ->\n        if\n            Val == 2 -> Key;\n            true -> Res\n        end\n    end, undefined, CountMap)."
}