{
    "status_code": 10,
    "lang": "php",
    "run_success": true,
    "status_runtime": "47 ms",
    "memory": 20136000,
    "question_id": "3227",
    "elapsed_time": 127,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706266830833,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 57.89440000000002,
    "status_memory": "20.1 MB",
    "memory_percentile": 36.842,
    "pretty_lang": "PHP",
    "submission_id": "1157317054",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function findMissingAndRepeatedValues($grid) {\n        $n = count($grid);\n        $numCounts = array_fill(1, $n * $n, 0);\n        \n        foreach ($grid as $row) {\n            foreach ($row as $num) {\n                $numCounts[$num]++;\n            }\n        }\n        \n        $missing = null;\n        $repeated = null;\n\n        for ($i = 1; $i <= $n * $n; $i++) {\n            if ($numCounts[$i] == 0) {\n                $missing = $i;\n            } elseif ($numCounts[$i] == 2) {\n                $repeated = $i;\n            }\n        }\n\n        return [$repeated, $missing];\n    }\n}"
}