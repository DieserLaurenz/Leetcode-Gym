{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "62 ms",
    "memory": 52416000,
    "question_id": "3227",
    "elapsed_time": 110,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706266755981,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 91.01119999999999,
    "status_memory": "52.4 MB",
    "memory_percentile": 5.617599999999953,
    "pretty_lang": "TypeScript",
    "submission_id": "1157316297",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function findMissingAndRepeatedValues(grid: number[][]): number[] {\n    const n = grid.length;\n    const counts = new Array(n * n).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            counts[grid[i][j] - 1]++;\n        }\n    }\n\n    let missing = -1, repeated = -1;\n    for (let i = 0; i < n * n; i++) {\n        if (counts[i] === 0) {\n            missing = i + 1;\n        } else if (counts[i] === 2) {\n            repeated = i + 1;\n        }\n    }\n\n    return [repeated, missing];\n}"
}