{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 149360000,
    "question_id": "3227",
    "elapsed_time": 476,
    "compare_result
    "code_output": "[9,2]",
    "std_output": "",
    "last_testcase": "[[9,1,7],[8,9,2],[3,4,6]]",
    "expected_output": "[9,5]",
    "task_finish_time": 1706267124057,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 142,
    "total_testcases": 584,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1157320072",
    "input_formatted": "[[9,1,7],[8,9,2],[3,4,6]]",
    "input": "[[9,1,7],[8,9,2],[3,4,6]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> findMissingAndRepeatedValues(List<List<int>> grid) {\n    int n = grid.length;\n    int size = n * n;\n    List<bool> seen = List.filled(size + 1, false);\n    int? repeated;  // Nullable, as we don't know the value initially\n    int? missing;   // Nullable, as we don't know the value initially\n\n    // Iterate through the grid to find the repeated number\n    for (var row in grid) {\n      for (var num in row) {\n        if (seen[num]) {\n          repeated = num;\n          break;\n        }\n        seen[num] = true;\n      }\n      if (repeated != null) break; // Stop iterating if repeated number is found\n    }\n\n    // Find the missing number\n    for (int i = 1; i <= size; i++) {\n      if (!seen[i]) {\n        missing = i;\n        break;\n      }\n    }\n\n    // Assuming the input is always valid, so both repeated and missing will be non-null\n    return [repeated!, missing!];\n  }\n}"
}