{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 28: Char 13: Error: Non-nullable variable 'repeated' must be assigned before it can be used.",
    "full_runtime_error": "Line 28: Char 13: Error: Non-nullable variable 'repeated' must be assigned before it can be used.\n    return [repeated, missing];\n            ^^^^^^^^\nLine 28: Char 23: Error: Non-nullable variable 'missing' must be assigned before it can be used.\n    return [repeated, missing];\n                      ^^^^^^^",
    "status_runtime": "N/A",
    "memory": 150336000,
    "question_id": "3227",
    "elapsed_time": 372,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,3],[2,2]]",
    "expected_output": "[2,4]",
    "task_finish_time": 1706267058668,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 584,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1157319413",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> findMissingAndRepeatedValues(List<List<int>> grid) {\n    int n = grid.length;\n    int size = n * n;\n    List<bool> seen = List.filled(size + 1, false);\n    int repeated;\n    int missing;\n\n    // Iterate through the grid to find the repeated number\n    for (var row in grid) {\n      for (var num in row) {\n        if (seen[num]) {\n          repeated = num;\n          break;\n        }\n        seen[num] = true;\n      }\n    }\n\n    // Find the missing number\n    for (int i = 1; i <= size; i++) {\n      if (!seen[i]) {\n        missing = i;\n        break;\n      }\n    }\n\n    return [repeated, missing];\n  }\n}"
}