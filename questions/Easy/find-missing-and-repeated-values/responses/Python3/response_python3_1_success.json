{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "111 ms",
    "memory": 16932000,
    "question_id": "3227",
    "elapsed_time": 137,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708704699235,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 89.5055,
    "status_memory": "16.9 MB",
    "memory_percentile": 84.42160000000001,
    "pretty_lang": "Python3",
    "submission_id": "1184109665",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def findMissingAndRepeatedValues(self, grid: List[List[int]]) -> List[int]:\n        n = len(grid)\n        flat_list = [item for sublist in grid for item in sublist]\n        expected_sum = sum(range(1, n**2 + 1))\n        actual_sum = sum(flat_list)\n        sum_of_squares = sum(x*x for x in range(1, n**2 + 1))\n        actual_sum_of_squares = sum(x*x for x in flat_list)\n        \n        diff = expected_sum - actual_sum\n        sq_diff = sum_of_squares - actual_sum_of_squares\n        \n        missing = (diff + sq_diff // diff) // 2\n        repeating = missing - diff\n        \n        return [repeating, missing]"
}