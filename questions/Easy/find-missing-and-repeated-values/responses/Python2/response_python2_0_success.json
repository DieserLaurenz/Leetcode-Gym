{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "95 ms",
    "memory": 12036000,
    "question_id": "3227",
    "elapsed_time": 118,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708704609860,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 89.38539999999996,
    "status_memory": "12 MB",
    "memory_percentile": 81.5643,
    "pretty_lang": "Python",
    "submission_id": "1184108472",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findMissingAndRepeatedValues(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        n = len(grid)\n        total = sum(range(1, n*n + 1))\n        flat_grid = [item for sublist in grid for item in sublist]\n        sum_grid = sum(flat_grid)\n        diff = total - sum_grid\n        seen = set()\n        dup = -1\n        for num in flat_grid:\n            if num in seen:\n                dup = num\n                break\n            seen.add(num)\n        missing = dup + diff\n        return [dup, missing]"
}