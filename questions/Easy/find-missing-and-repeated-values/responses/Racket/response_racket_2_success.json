{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "238 ms",
    "memory": 125452000,
    "question_id": "3227",
    "elapsed_time": 322,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706276773946,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 100,
    "status_memory": "125.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1157423363",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (find-missing-and-repeated-values grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  (let ([n (length grid)]\n        [freq (make-hash)])\n    ;; Initialize the frequency hash map\n    (for ([i (in-range 1 (+ 1 (* n n)))])\n      (hash-set! freq i 0))\n    ;; Count the frequency of each number in the grid\n    (for ([row grid])\n      (for ([elem row])\n        (hash-update! freq elem add1)))\n    ;; Find the repeated and missing numbers\n    (let ([repeated #f]\n          [missing #f])\n      (for ([i (in-range 1 (+ 1 (* n n)))]\n            #:break (and repeated missing))\n        (case (hash-ref freq i)\n          [(2) (set! repeated i)]\n          [(0) (set! missing i)]))\n      (list repeated missing))))"
}