{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "67 ms",
    "memory": 55496000,
    "question_id": "3227",
    "elapsed_time": 83,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706266685225,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 74.37680000000003,
    "status_memory": "55.5 MB",
    "memory_percentile": 5.263999999999985,
    "pretty_lang": "JavaScript",
    "submission_id": "1157315558",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[][]} grid\n * @return {number[]}\n */\nvar findMissingAndRepeatedValues = function(grid) {\n    const n = grid.length;\n    const numCounts = new Map();\n    let repeated = -1, missing = -1;\n\n    // Count the frequency of each number in the grid\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            const num = grid[i][j];\n            numCounts.set(num, (numCounts.get(num) || 0) + 1);\n        }\n    }\n\n    // Find the repeated and missing numbers\n    for (let i = 1; i <= n * n; i++) {\n        const count = numCounts.get(i) || 0;\n        if (count === 2) repeated = i;\n        else if (count === 0) missing = i;\n    }\n\n    return [repeated, missing];\n};"
}