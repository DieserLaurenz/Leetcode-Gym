{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 76340000,
    "question_id": "3227",
    "elapsed_time": 508,
    "compare_result
    "code_output": "[\"nil\",\"nil\"]",
    "std_output": "",
    "last_testcase": "[[1,3],[2,2]]",
    "expected_output": "[2,4]",
    "task_finish_time": 1706276984295,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 584,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1157426081",
    "input_formatted": "[[1,3],[2,2]]",
    "input": "[[1,3],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_missing_and_repeated_values(grid :: [[integer]]) :: [integer]\n  def find_missing_and_repeated_values(grid) do\n    # Flatten the grid using list comprehension\n    flattened_grid = for row <- grid, elem <- row, do: elem\n\n    # Count occurrences of each number\n    counts = Enum.reduce(flattened_grid, %{}, fn x, acc ->\n      Map.update(acc, x, 1, &(&1 + 1))\n    end)\n\n    # Determine the size of the grid\n    n = length(grid)\n    total_elements = n * n\n\n    # Initialize variables for the missing and repeated numbers\n    missing = nil\n    repeated = nil\n\n    # Check each number from 1 to n^2 to find the missing and repeated ones\n    for num <- 1..total_elements do\n      case Map.get(counts, num) do\n        nil -> missing = num\n        2 -> repeated = num\n        _ -> :ok\n      end\n    end\n\n    [repeated, missing]\n  end\nend"
}