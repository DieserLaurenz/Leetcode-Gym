{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "157 ms",
    "memory": 15548000,
    "question_id": "3227",
    "elapsed_time": 188,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706266904002,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 584,
    "total_testcases": 584,
    "runtime_percentile": 19.810999999999996,
    "status_memory": "15.5 MB",
    "memory_percentile": 41.50930000000001,
    "pretty_lang": "Swift",
    "submission_id": "1157317822",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMissingAndRepeatedValues(_ grid: [[Int]]) -> [Int] {\n        let n = grid.count\n        var frequency = [Int: Int]()\n        \n        // Count the frequency of each number in the grid\n        for i in 0..<n {\n            for j in 0..<n {\n                frequency[grid[i][j], default: 0] += 1\n            }\n        }\n\n        var missing = 0\n        var repeated = 0\n\n        // Check for missing and repeated numbers\n        for i in 1...n*n {\n            let count = frequency[i] ?? 0\n            if count == 2 {\n                repeated = i\n            } else if count == 0 {\n                missing = i\n            }\n        }\n\n        return [repeated, missing]\n    }\n}"
}