{
    "acRate": 34.884174654995256,
    "difficulty": "Easy",
    "freqBar": null,
    "questionId": "3251",
    "frontendQuestionId": "3000",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Maximum Area of Longest Diagonal Rectangle",
    "titleSlug": "maximum-area-of-longest-diagonal-rectangle",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int areaOfMaxDiagonal(vector<vector<int>>& dimensions) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int areaOfMaxDiagonal(int[][] dimensions) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def areaOfMaxDiagonal(self, dimensions):\n        \"\"\"\n        :type dimensions: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -> int:\n        "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int areaOfMaxDiagonal(int** dimensions, int dimensionsSize, int* dimensionsColSize) {\n    \n}"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int AreaOfMaxDiagonal(int[][] dimensions) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[][]} dimensions\n * @return {number}\n */\nvar areaOfMaxDiagonal = function(dimensions) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function areaOfMaxDiagonal(dimensions: number[][]): number {\n    \n};"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[][] $dimensions\n     * @return Integer\n     */\n    function areaOfMaxDiagonal($dimensions) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func areaOfMaxDiagonal(_ dimensions: [[Int]]) -> Int {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun areaOfMaxDiagonal(dimensions: Array<IntArray>): Int {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  int areaOfMaxDiagonal(List<List<int>> dimensions) {\n    \n  }\n}"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func areaOfMaxDiagonal(dimensions [][]int) int {\n    \n}"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} dimensions\n# @return {Integer}\ndef area_of_max_diagonal(dimensions)\n    \nend"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def areaOfMaxDiagonal(dimensions: Array[Array[Int]]): Int = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn area_of_max_diagonal(dimensions: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (area-of-max-diagonal dimensions)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec area_of_max_diagonal(Dimensions :: [[integer()]]) -> integer().\narea_of_max_diagonal(Dimensions) ->\n  ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec area_of_max_diagonal(dimensions :: [[integer]]) :: integer\n  def area_of_max_diagonal(dimensions) do\n    \n  end\nend"
        }
    ],
    "content": "You are given a 2D 0-indexed integer array dimensions.\nFor all indices i, 0 <= i < dimensions.length, dimensions[i][0] represents the length and dimensions[i][1] represents the width of the rectangle i.\nReturn the area of the rectangle having the longest diagonal. If there are multiple rectangles with the longest diagonal, return the area of the rectangle having the maximum area.\n\nExample 1:\n\nInput: dimensions = [[9,3],[8,6]]\nOutput: 48\nExplanation: \nFor index = 0, length = 9 and width = 3. Diagonal length = sqrt(9 * 9 + 3 * 3) = sqrt(90)  9.487.\nFor index = 1, length = 8 and width = 6. Diagonal length = sqrt(8 * 8 + 6 * 6) = sqrt(100) = 10.\nSo, the rectangle at index 1 has a greater diagonal length therefore we return area = 8 * 6 = 48.\n\nExample 2:\n\nInput: dimensions = [[3,4],[4,3]]\nOutput: 12\nExplanation: Length of diagonal is the same for both which is 5, so maximum area = 12.\n\n\nConstraints:\n\n1 <= dimensions.length <= 100\ndimensions[i].length == 2\n1 <= dimensions[i][0], dimensions[i][1] <= 100\n\n"
}