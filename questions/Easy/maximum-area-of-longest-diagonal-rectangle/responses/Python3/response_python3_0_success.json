{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "81 ms",
    "memory": 16604000,
    "question_id": "3251",
    "elapsed_time": 118,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708714682727,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 816,
    "total_testcases": 816,
    "runtime_percentile": 22.803000000000004,
    "status_memory": "16.6 MB",
    "memory_percentile": 91.71839999999999,
    "pretty_lang": "Python3",
    "submission_id": "1184250442",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -> int:\n        max_diagonal = 0\n        max_area = 0\n        for length, width in dimensions:\n            diagonal = (length ** 2 + width ** 2) ** 0.5\n            area = length * width\n            if diagonal > max_diagonal or (diagonal == max_diagonal and area > max_area):\n                max_diagonal = diagonal\n                max_area = area\n        return max_area"
}