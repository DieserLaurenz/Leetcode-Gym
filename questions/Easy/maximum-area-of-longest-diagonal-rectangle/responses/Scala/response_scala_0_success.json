{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "601 ms",
    "memory": 58712000,
    "question_id": "3251",
    "elapsed_time": 746,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706462698047,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 816,
    "total_testcases": 816,
    "runtime_percentile": 18.75,
    "status_memory": "58.7 MB",
    "memory_percentile": 6.25,
    "pretty_lang": "Scala",
    "submission_id": "1159378860",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def areaOfMaxDiagonal(dimensions: Array[Array[Int]]): Int = {\n        dimensions.map { case Array(length, width) =>\n            val diagonal = Math.sqrt(length * length + width * width)\n            val area = length * width\n            (diagonal, area)\n        }.maxBy { case (diagonal, area) => (diagonal, area) }._2\n    }\n}"
}