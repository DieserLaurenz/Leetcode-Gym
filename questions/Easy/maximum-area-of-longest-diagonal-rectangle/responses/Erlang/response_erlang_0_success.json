{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "318 ms",
    "memory": 60028000,
    "question_id": "3251",
    "elapsed_time": 1393,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706463403057,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 816,
    "total_testcases": 816,
    "runtime_percentile": 100,
    "status_memory": "60 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1159388649",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec area_of_max_diagonal(Dimensions :: [[integer()]]) -> integer().\narea_of_max_diagonal(Dimensions) ->\n    MaxDiagonalArea = lists:foldl(\n        fun([Length, Width], {MaxDiagonal, MaxArea}) ->\n            Diagonal = math:sqrt(Length*Length + Width*Width),\n            Area = Length * Width,\n            case Diagonal > MaxDiagonal of\n                true -> {Diagonal, Area};\n                false -> case Diagonal == MaxDiagonal andalso Area > MaxArea of\n                             true -> {Diagonal, Area};\n                             false -> {MaxDiagonal, MaxArea}\n                         end\n            end\n        end, {0.0, 0}, Dimensions),\n    element(2, MaxDiagonalArea)."
}