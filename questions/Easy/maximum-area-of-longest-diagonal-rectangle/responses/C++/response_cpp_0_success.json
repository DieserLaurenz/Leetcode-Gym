{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "13 ms",
    "memory": 28700000,
    "question_id": "3251",
    "elapsed_time": 33,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706449969909,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 816,
    "total_testcases": 816,
    "runtime_percentile": 62.115200000000016,
    "status_memory": "28.7 MB",
    "memory_percentile": 5.1974,
    "pretty_lang": "C++",
    "submission_id": "1159221738",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int areaOfMaxDiagonal(vector<vector<int>>& dimensions) {\n        double maxDiagonal = 0;\n        int maxArea = 0;\n        for (auto& dim : dimensions) {\n            int length = dim[0], width = dim[1];\n            double diagonal = sqrt(length * length + width * width);\n            int area = length * width;\n            // Check if the current diagonal is greater than the max found so far\n            // or if it's equal, check if the area is greater\n            if (diagonal > maxDiagonal || (diagonal == maxDiagonal && area > maxArea)) {\n                maxDiagonal = diagonal;\n                maxArea = area;\n            }\n        }\n        return maxArea;\n    }\n};"
}