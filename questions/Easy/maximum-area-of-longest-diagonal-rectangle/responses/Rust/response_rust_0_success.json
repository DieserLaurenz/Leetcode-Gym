{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 2156000,
    "question_id": "3251",
    "elapsed_time": 13,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706463116343,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 816,
    "total_testcases": 816,
    "runtime_percentile": 43.2098,
    "status_memory": "2.2 MB",
    "memory_percentile": 72.8395,
    "pretty_lang": "Rust",
    "submission_id": "1159384781",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn area_of_max_diagonal(dimensions: Vec<Vec<i32>>) -> i32 {\n        let mut max_diagonal = 0f64;\n        let mut max_area = 0;\n        \n        for dim in dimensions {\n            let length = dim[0];\n            let width = dim[1];\n            let diagonal = ((length.pow(2) + width.pow(2)) as f64).sqrt();\n            let area = length * width;\n            \n            // Update max_diagonal and max_area if a larger diagonal is found,\n            // or if the diagonal is equal but the area is larger.\n            if diagonal > max_diagonal || (diagonal == max_diagonal && area > max_area) {\n                max_diagonal = diagonal;\n                max_area = area;\n            }\n        }\n        \n        max_area\n    }\n}"
}