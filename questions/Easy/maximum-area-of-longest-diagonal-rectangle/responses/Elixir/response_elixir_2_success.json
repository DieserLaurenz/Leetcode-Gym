{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "323 ms",
    "memory": 72068000,
    "question_id": "3251",
    "elapsed_time": 455,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706463532856,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 816,
    "total_testcases": 816,
    "runtime_percentile": 100,
    "status_memory": "72.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1159390462",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec area_of_max_diagonal(dimensions :: [[integer]]) :: integer\n  def area_of_max_diagonal(dimensions) do\n    dimensions\n    |> Enum.reduce({0, 0}, fn [l, w], acc ->\n      diagonal_squared = l * l + w * w\n      area = l * w\n      acc_diagonal_squared = elem(acc, 0)\n      acc_area = elem(acc, 1)\n\n      if diagonal_squared > acc_diagonal_squared or (diagonal_squared == acc_diagonal_squared and area > acc_area) do\n        {diagonal_squared, area}\n      else\n        acc\n      end\n    end)\n    |> elem(1)\n  end\nend"
}