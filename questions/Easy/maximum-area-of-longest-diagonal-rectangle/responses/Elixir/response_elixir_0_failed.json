{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72128000,
    "question_id": "3251",
    "elapsed_time": 406,
    "compare_result
    "code_output": "10.0",
    "std_output": "",
    "last_testcase": "[[9,3],[8,6]]",
    "expected_output": "48",
    "task_finish_time": 1706463439891,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 816,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1159389169",
    "input_formatted": "[[9,3],[8,6]]",
    "input": "[[9,3],[8,6]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec area_of_max_diagonal(dimensions :: [[integer]]) :: integer\n  def area_of_max_diagonal(dimensions) do\n    dimensions\n    |> Enum.map(fn [l, w] -> {sqrt(l * l + w * w), l * w} end)\n    |> Enum.max_by(fn {diagonal, area} -> {diagonal, area} end)\n    |> Tuple.to_list()\n    |> hd()\n  end\n\n  defp sqrt(n), do: :math.sqrt(n)\nend"
}