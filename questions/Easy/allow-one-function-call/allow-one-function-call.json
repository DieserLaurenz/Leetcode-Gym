{
    "acRate": 85.92607375518524,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2666",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Allow One Function Call",
    "titleSlug": "allow-one-function-call",
    "topicTags": [],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {Function} fn  * @return {Function}  */ var once = function(fn) {          return function(...args){              } };  /**  * let fn = (a,b,c) => (a + b + c)  * let onceFn = once(fn)  *  * onceFn(1,2,3); // 6  * onceFn(2,3,6); // returns undefined without calling fn  */ "
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "type JSONValue = null | boolean | number | string | JSONValue[] | { [key: string]: JSONValue }; type OnceFn = (...args: JSONValue[]) => JSONValue | undefined  function once(fn: Function): OnceFn {          return function (...args) {              }; }  /**  * let fn = (a,b,c) => (a + b + c)  * let onceFn = once(fn)  *  * onceFn(1,2,3); // 6  * onceFn(2,3,6); // returns undefined without calling fn  */"
        }
    ],
    "content": "Given a function fn, return a new function that is identical to the original function except that it ensuresfniscalled at most once.  The first time the returned function is called, it should return the same result asfn. Every subsequent time it is called, it should returnundefined.   Example 1:  Input: fn = (a,b,c) => (a + b + c), calls = [[1,2,3],[2,3,6]] Output: [{\"calls\":1,\"value\":6}] Explanation: const onceFn = once(fn); onceFn(1, 2, 3); // 6 onceFn(2, 3, 6); // undefined, fn was not called  Example 2:  Input: fn = (a,b,c) => (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]] Output: [{\"calls\":1,\"value\":140}] Explanation: const onceFn = once(fn); onceFn(5, 7, 4); // 140 onceFn(2, 3, 6); // undefined, fn was not called onceFn(4, 6, 8); // undefined, fn was not called   Constraints:  calls is a valid JSON array 1 <= calls.length <= 10 1 <= calls[i].length <= 100 2 <= JSON.stringify(calls).length <= 1000  "
}