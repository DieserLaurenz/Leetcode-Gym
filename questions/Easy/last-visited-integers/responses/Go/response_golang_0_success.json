{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 3260000,
    "question_id": "3164",
    "elapsed_time": 14,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706379672843,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 706,
    "total_testcases": 706,
    "runtime_percentile": 100,
    "status_memory": "3.3 MB",
    "memory_percentile": 66.6667,
    "pretty_lang": "Go",
    "submission_id": "1158494283",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func lastVisitedIntegers(words []string) []int {\n    var result []int\n    var nums []int\n    consecutivePrev := 0\n\n    for _, word := range words {\n        if word == \"prev\" {\n            consecutivePrev++\n            if consecutivePrev <= len(nums) {\n                // Get the last visited integer based on the number of consecutive \"prev\"\n                result = append(result, nums[len(nums)-consecutivePrev])\n            } else {\n                // If k is greater than the total visited integers, append -1\n                result = append(result, -1)\n            }\n        } else {\n            // Convert word to integer and add to nums\n            val, _ := strconv.Atoi(word)\n            nums = append(nums, val)\n            consecutivePrev = 0 // Reset consecutivePrev counter\n        }\n    }\n\n    return result\n}"
}