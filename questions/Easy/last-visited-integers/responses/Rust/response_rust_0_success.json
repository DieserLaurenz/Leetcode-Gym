{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 2220000,
    "question_id": "3164",
    "elapsed_time": 44,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706379797301,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 706,
    "total_testcases": 706,
    "runtime_percentile": 53.8462,
    "status_memory": "2.2 MB",
    "memory_percentile": 23.076999999999998,
    "pretty_lang": "Rust",
    "submission_id": "1158496012",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn last_visited_integers(words: Vec<String>) -> Vec<i32> {\n        let mut last_visited = Vec::new(); // To store the last visited integers\n        let mut nums = Vec::new(); // To keep track of the integers seen so far\n        let mut prev_count = 0; // To count consecutive \"prev\" strings\n\n        for word in words {\n            if word == \"prev\" {\n                prev_count += 1; // Increment count for consecutive \"prev\"\n\n                // Check if prev_count exceeds the length of nums\n                if prev_count > nums.len() {\n                    last_visited.push(-1); // Push -1 if there are no enough integers visited\n                } else {\n                    // Otherwise, push the corresponding last visited integer\n                    last_visited.push(nums[nums.len() - prev_count]);\n                }\n            } else {\n                // Reset prev_count when an integer is encountered\n                prev_count = 0;\n                // Convert word to integer and push to nums\n                if let Ok(num) = word.parse::<i32>() {\n                    nums.push(num);\n                }\n            }\n        }\n\n        last_visited\n    }\n}"
}