{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 13: exception error: undef",
    "full_runtime_error": "Line 13: exception error: undef\n[{lists,nthsplit,[1,[1,2]],[]},\n {solution,last_visited_integers,4,[{file,\"solution.erl\"},{line,13}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,37}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,25}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,54}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59392000,
    "question_id": "3164",
    "elapsed_time": 1266,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "expected_output": "[2,1,-1]",
    "task_finish_time": 1706471599056,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 706,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1159490492",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec last_visited_integers(Words :: [unicode:unicode_binary()]) -> [integer()].\nlast_visited_integers(Words) ->\n    last_visited_integers(Words, [], [], 0).\n\nlast_visited_integers([], _Nums, Result, _ConsecutivePrev) ->\n    lists:reverse(Result);\nlast_visited_integers([H | T], Nums, Result, ConsecutivePrev) ->\n    case binary_to_list(H) of\n        \"prev\" ->\n            PrevIndex = ConsecutivePrev,\n            case length(Nums) > PrevIndex of\n                true ->\n                    {Value, _} = lists:nthsplit(PrevIndex + 1, lists:reverse(Nums)),\n                    last_visited_integers(T, Nums, [hd(Value) | Result], PrevIndex + 1);\n                false ->\n                    last_visited_integers(T, Nums, [-1 | Result], PrevIndex + 1)\n            end;\n        _ ->\n            IntValue = list_to_integer(binary_to_list(H)),\n            last_visited_integers(T, [IntValue | Nums], Result, 0)\n    end."
}