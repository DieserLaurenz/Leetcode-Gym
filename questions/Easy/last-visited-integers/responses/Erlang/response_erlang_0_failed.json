{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 15: exception error: badarg",
    "full_runtime_error": "Line 15: exception error: badarg\n[{erlang,binary_to_integer,\n         [<<\"prev\">>],\n         [{error_info,#{module => erl_erts_errors}}]},\n {solution,last_visited_integers,4,[{file,\"solution.erl\"},{line,15}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,32}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,20}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,49}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59276000,
    "question_id": "3164",
    "elapsed_time": 1337,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "expected_output": "[2,1,-1]",
    "task_finish_time": 1706379966653,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 706,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1158498377",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec last_visited_integers(Words :: [unicode:unicode_binary()]) -> [integer()].\nlast_visited_integers(Words) ->\n    last_visited_integers(Words, [], [], 0).\n\nlast_visited_integers([], _, Result, _) ->\n    lists:reverse(Result);\nlast_visited_integers([\"prev\" | T], Visited, Result, PrevCount) ->\n    NewPrevCount = PrevCount + 1,\n    LastVisited = case lists:drop(length(Visited) - NewPrevCount, Visited) of\n                      [H | _] -> H;\n                      [] -> -1\n                  end,\n    last_visited_integers(T, Visited, [LastVisited | Result], NewPrevCount);\nlast_visited_integers([H | T], Visited, Result, _) ->\n    Num = binary_to_integer(H),\n    last_visited_integers(T, [Num | Visited], Result, 0)."
}