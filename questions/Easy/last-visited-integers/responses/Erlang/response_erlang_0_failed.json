{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 16: exception error: badarg",
    "full_runtime_error": "Line 16: exception error: badarg\n[{erlang,list_to_integer,[\"prev\"],[{error_info,#{module => erl_erts_errors}}]},\n {solution,last_visited_integers,4,[{file,\"solution.erl\"},{line,16}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,33}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,21}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,50}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59216000,
    "question_id": "3164",
    "elapsed_time": 1471,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "expected_output": "[2,1,-1]",
    "task_finish_time": 1706471564968,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 706,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1159490083",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec last_visited_integers(Words :: [unicode:unicode_binary()]) -> [integer()].\nlast_visited_integers(Words) ->\n    last_visited_integers(Words, [], [], 0).\n\nlast_visited_integers([], _Nums, Result, _ConsecutivePrev) ->\n    lists:reverse(Result);\nlast_visited_integers([\"prev\" | T], Nums, Result, ConsecutivePrev) ->\n    case ConsecutivePrev < length(Nums) of\n        true ->\n            {Value, _} = lists:nthsplit(ConsecutivePrev, lists:reverse(Nums)),\n            last_visited_integers(T, Nums, [hd(Value) | Result], ConsecutivePrev + 1);\n        false ->\n            last_visited_integers(T, Nums, [-1 | Result], ConsecutivePrev + 1)\n    end;\nlast_visited_integers([H | T], Nums, Result, _ConsecutivePrev) ->\n    IntValue = list_to_integer(binary_to_list(H)),\n    last_visited_integers(T, [IntValue | Nums], Result, 0)."
}