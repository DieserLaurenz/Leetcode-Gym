{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "list-ref: index too large for list",
    "full_runtime_error": "list-ref: index too large for list\n  index: 2\n  in: '(2 1)\n  context...:\n   solution.rkt:1:0: last-visited-integers\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:27:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100028000,
    "question_id": "3164",
    "elapsed_time": 508,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "expected_output": "[2,1,-1]",
    "task_finish_time": 1706379923089,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 706,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1158497712",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (last-visited-integers words)\n  (-> (listof string?) (listof exact-integer?))\n  \n  ;; Helper function to process the words list\n  (define (process words visited result prev-count)\n    (cond\n      ;; Base case: If the words list is empty, return the reversed result list\n      [(null? words) (reverse result)]\n      ;; Case for handling \"prev\" strings\n      [(string=? (car words) \"prev\")\n       (let ((index (- (length visited) prev-count)))\n         ;; Check if the index is valid within the range of visited numbers\n         (let ((last-int (if (< index 0) -1 (list-ref visited index))))\n           ;; Recursively process the rest of the words with updated parameters\n           (process (cdr words) visited (cons last-int result) (add1 prev-count))))]\n      ;; Case for handling numeric strings\n      [else\n       ;; Convert the current word to a number, add it to the visited list, and reset prev-count\n       (process (cdr words) (cons (string->number (car words)) visited) result 0)]))\n  \n  ;; Initial call to the helper function with initial parameters\n  (process words '() '() 1))"
}