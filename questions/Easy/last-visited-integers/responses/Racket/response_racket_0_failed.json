{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "list-ref: index too large for list",
    "full_runtime_error": "list-ref: index too large for list\n  index: 2\n  in: '(1 2)\n  context...:\n   solution.rkt:1:0: last-visited-integers\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:18:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100048000,
    "question_id": "3164",
    "elapsed_time": 280,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "expected_output": "[2,1,-1]",
    "task_finish_time": 1706379828505,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 706,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1158496423",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (last-visited-integers words)\n  (-> (listof string?) (listof exact-integer?))\n  \n  (define (helper words visited prev-count result)\n    (cond\n      [(null? words) (reverse result)]\n      [(string=? (car words) \"prev\")\n       (let ((last-int (if (> prev-count (length visited)) -1 (list-ref (reverse visited) prev-count))))\n         (helper (cdr words) visited (add1 prev-count) (cons last-int result)))]\n      [else\n       (helper (cdr words) (cons (string->number (car words)) visited) 0 result)]))\n  \n  (helper words '() 0 '()))"
}