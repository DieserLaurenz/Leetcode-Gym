{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "7 ms",
    "memory": 27344000,
    "question_id": "3164",
    "elapsed_time": 27,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706379237279,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 706,
    "total_testcases": 706,
    "runtime_percentile": 83.57,
    "status_memory": "27.3 MB",
    "memory_percentile": 7.910900000000005,
    "pretty_lang": "C++",
    "submission_id": "1158488026",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> lastVisitedIntegers(vector<string>& words) {\n        vector<int> lastVisited;\n        vector<int> nums;\n        int prevCount = 0; // Track consecutive \"prev\" strings\n\n        for (const auto& word : words) {\n            if (word == \"prev\") {\n                ++prevCount; // Increment for each \"prev\"\n                if (prevCount <= nums.size()) {\n                    // If there are enough nums, add the (prevCount - 1)th from the end\n                    lastVisited.push_back(nums[nums.size() - prevCount]);\n                } else {\n                    // If not enough nums, add -1\n                    lastVisited.push_back(-1);\n                }\n            } else {\n                // Convert string to int and add to nums\n                nums.push_back(stoi(word));\n                prevCount = 0; // Reset prevCount when a number is encountered\n            }\n        }\n\n        return lastVisited;\n    }\n};"
}