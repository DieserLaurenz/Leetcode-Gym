{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "210 ms",
    "memory": 39120000,
    "question_id": "3164",
    "elapsed_time": 318,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706379607515,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 706,
    "total_testcases": 706,
    "runtime_percentile": 66.66660000000002,
    "status_memory": "39.1 MB",
    "memory_percentile": 16.666600000000017,
    "pretty_lang": "Kotlin",
    "submission_id": "1158493346",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun lastVisitedIntegers(words: List<String>): List<Int> {\n        val result = mutableListOf<Int>()\n        val visitedIntegers = mutableListOf<Int>()\n        var consecutivePrevCount = 0\n\n        for (word in words) {\n            if (word == \"prev\") {\n                consecutivePrevCount++\n                if (consecutivePrevCount > visitedIntegers.size) {\n                    result.add(-1)\n                } else {\n                    result.add(visitedIntegers[visitedIntegers.size - consecutivePrevCount])\n                }\n            } else {\n                visitedIntegers.add(word.toInt())\n                consecutivePrevCount = 0\n            }\n        }\n\n        return result\n    }\n}"
}