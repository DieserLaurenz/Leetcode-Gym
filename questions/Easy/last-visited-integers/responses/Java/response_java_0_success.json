{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "2 ms",
    "memory": 44496000,
    "display_runtime": "2",
    "question_id": "3164",
    "elapsed_time": 251,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706379286431,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 706,
    "total_testcases": 706,
    "runtime_percentile": 92.8571,
    "status_memory": "44.5 MB",
    "memory_percentile": 47.1941,
    "pretty_lang": "Java",
    "submission_id": "1158488724",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> lastVisitedIntegers(List<String> words) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> nums = new ArrayList<>();\n        int prevCount = 0; // Count consecutive \"prev\"\n\n        for (String word : words) {\n            if (word.equals(\"prev\")) {\n                prevCount++;\n                // If prevCount is more than the numbers seen so far, add -1 to result\n                if (prevCount > nums.size()) {\n                    result.add(-1);\n                } else {\n                    // Get the (prevCount - 1)th last visited integer\n                    result.add(nums.get(nums.size() - prevCount));\n                }\n            } else {\n                // Reset prevCount on seeing an integer\n                prevCount = 0;\n                nums.add(Integer.parseInt(word));\n            }\n        }\n\n        return result;\n    }\n}"
}