{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72228000,
    "question_id": "3164",
    "elapsed_time": 400,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "expected_output": "[2,1,-1]",
    "task_finish_time": 1706381156154,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 51,
    "total_testcases": 706,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1158513747",
    "input_formatted": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "input": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec last_visited_integers(words :: [String.t]) :: [integer]\n  def last_visited_integers(words) do\n    # Initialize the variables to store the visited numbers and the result list\n    nums = []\n    result = []\n\n    # Counter for consecutive \"prev\" strings\n    consecutive_prev = 0\n\n    for word <- words do\n      case word do\n        \"prev\" ->\n          # Increase the count of consecutive \"prev\"\n          consecutive_prev = consecutive_prev + 1\n\n          # Calculate the index for the last visited integer\n          index = Enum.count(nums) - consecutive_prev\n\n          if index < 0 do\n            # If the index is out of bounds, append -1 to the result\n            result = [result | [-1]]\n          else\n            # Append the last visited integer to the result\n            result = [result | [Enum.at(nums, index)]]\n          end\n\n        _ ->\n          # Reset the consecutive \"prev\" counter for a new number\n          consecutive_prev = 0\n          # Convert the string to integer and add it to the list of visited numbers\n          nums = [nums | [String.to_integer(word)]]\n      end\n    end\n\n    # Flatten the result to get a proper list\n    List.flatten(result)\n  end\nend"
}