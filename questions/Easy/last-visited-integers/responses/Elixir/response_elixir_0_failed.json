{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72044000,
    "question_id": "3164",
    "elapsed_time": 456,
    "compare_result
    "code_output": "[-1,1,-1]",
    "std_output": "",
    "last_testcase": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "expected_output": "[2,1,-1]",
    "task_finish_time": 1706385664637,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 138,
    "total_testcases": 706,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1158565301",
    "input_formatted": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "input": "[\"1\",\"2\",\"prev\",\"prev\",\"prev\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec last_visited_integers(words :: [String.t]) :: [integer]\n  def last_visited_integers(words) do\n    words\n    |> Enum.reduce({[], [], 0}, fn\n      \"prev\", {nums, acc, prev_count} ->\n        case prev_count do\n          0 -> {nums, [-1 | acc], 1}\n          count when count >= length(nums) -> {nums, [-1 | acc], prev_count + 1}\n          count -> {nums, [Enum.at(nums, -count - 1) | acc], prev_count + 1}\n        end\n      num, {nums, acc, _} ->\n        {nums ++ [String.to_integer(num)], acc, 0}\n    end)\n    |> elem(1)\n    |> Enum.reverse()\n  end\nend"
}