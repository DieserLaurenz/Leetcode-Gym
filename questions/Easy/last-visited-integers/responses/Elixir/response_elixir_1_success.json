{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "361 ms",
    "memory": 72336000,
    "question_id": "3164",
    "elapsed_time": 446,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706385713204,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 706,
    "total_testcases": 706,
    "runtime_percentile": 100,
    "status_memory": "72.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1158565807",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec last_visited_integers(words :: [String.t]) :: [integer]\n  def last_visited_integers(words) do\n    words\n    |> Enum.reduce({[], [], 0}, fn\n      \"prev\", {nums, acc, prev_count} ->\n        new_prev_count = prev_count + 1\n        last_visited = if new_prev_count <= length(nums), do: Enum.at(nums, -new_prev_count), else: -1\n        {nums, [last_visited | acc], new_prev_count}\n      num, {nums, acc, _} ->\n        {nums ++ [String.to_integer(num)], acc, 0}\n    end)\n    |> elem(1)\n    |> Enum.reverse()\n  end\nend"
}