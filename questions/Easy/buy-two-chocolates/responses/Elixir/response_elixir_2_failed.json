{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72380000,
    "question_id": "2756",
    "elapsed_time": 671,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,2]\n3",
    "expected_output": "0",
    "task_finish_time": 1706058534652,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1155094737",
    "input_formatted": "[1,2,2], 3",
    "input": "[1,2,2]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec buy_choco(prices :: [integer], money :: integer) :: integer\n  def buy_choco(prices, money) do\n    # Initialize min_cost to a value greater than any possible cost\n    min_cost = money + 1\n\n    # Iterate through all pairs of chocolates\n    for {price1, idx1} <- Enum.with_index(prices), {price2, idx2} <- Enum.with_index(prices), idx1 < idx2 do\n      cost = price1 + price2\n      # Update min_cost if the pair is within budget and better than previous pairs\n      if cost <= money and cost < min_cost do\n        min_cost = cost\n      end\n    end\n\n    # Return the leftover money, or the original amount if no suitable pair is found\n    if min_cost <= money, do: money - min_cost, else: money\n  end\nend"
}