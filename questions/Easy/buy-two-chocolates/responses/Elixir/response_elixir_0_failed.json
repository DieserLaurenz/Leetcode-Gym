{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72208000,
    "question_id": "2756",
    "elapsed_time": 643,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,2]\n3",
    "expected_output": "0",
    "task_finish_time": 1706057213486,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 547,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1155084438",
    "input_formatted": "[1,2,2], 3",
    "input": "[1,2,2]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec buy_choco(prices :: [integer], money :: integer) :: integer\n  def buy_choco(prices, money) do\n    min_leftover = Enum.reduce(prices, money, fn price1, acc ->\n      Enum.reduce(prices, acc, fn price2, acc_inner ->\n        cost = price1 + price2\n        if cost <= money and cost < acc_inner, do: cost, else: acc_inner\n      end)\n    end)\n\n    if min_leftover == money, do: money, else: money - min_leftover\n  end\nend"
}