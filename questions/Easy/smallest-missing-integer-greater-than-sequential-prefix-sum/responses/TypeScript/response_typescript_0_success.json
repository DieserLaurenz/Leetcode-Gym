{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "50 ms",
    "memory": 52552000,
    "question_id": "3236",
    "elapsed_time": 84,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706658239741,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 616,
    "total_testcases": 616,
    "runtime_percentile": 90.625,
    "status_memory": "52.6 MB",
    "memory_percentile": 6.25,
    "pretty_lang": "TypeScript",
    "submission_id": "1161505875",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function missingInteger(nums: number[]): number {\n    let longestSeqSum = nums[0];\n    let currentSum = nums[0];\n\n    // Find the longest sequential prefix\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] == nums[i - 1] + 1) {\n            currentSum += nums[i];\n            longestSeqSum = currentSum; // Update longest sequential prefix sum\n        } else {\n            // If the sequence breaks, no need to reset currentSum as we are looking for the longest one\n            break;\n        }\n    }\n\n    // Find the smallest missing integer greater than or equal to the sum of the longest sequential prefix\n    for (let x = longestSeqSum; ; x++) {\n        if (!nums.includes(x)) {\n            return x;\n        }\n    }\n}"
}