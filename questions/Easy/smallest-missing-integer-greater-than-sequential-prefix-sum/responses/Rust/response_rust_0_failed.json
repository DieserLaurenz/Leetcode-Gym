{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2156000,
    "question_id": "3236",
    "elapsed_time": 11,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706659087668,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 65,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1161512214",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn missing_integer(nums: Vec<i32>) -> i32 {\n        let mut nums = nums;\n        nums.sort(); // Step 2: Sort the nums vector.\n        let mut sum_of_longest_seq_prefix = nums[0];\n        let mut current_seq_length = 1;\n        let mut max_seq_length = 1;\n        \n        // Step 3: Find the longest sequential prefix.\n        for i in 1..nums.len() {\n            if nums[i] == nums[i - 1] + 1 {\n                current_seq_length += 1;\n                sum_of_longest_seq_prefix += nums[i];\n                max_seq_length = max_seq_length.max(current_seq_length);\n            } else if nums[i] != nums[i - 1] {\n                current_seq_length = 1;\n                if max_seq_length == 1 {\n                    sum_of_longest_seq_prefix = nums[i];\n                }\n            }\n        }\n        \n        // The starting point for searching the missing integer.\n        let start = sum_of_longest_seq_prefix - (max_seq_length - 1) * max_seq_length / 2;\n        let mut missing = start;\n        \n        // Step 4: Find the smallest missing integer greater than or equal to the sum.\n        while nums.contains(&missing) {\n            missing += 1;\n        }\n        \n        missing\n    }\n}"
}