{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2224000,
    "question_id": "3236",
    "elapsed_time": 12,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706659185564,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1161512980",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn missing_integer(nums: Vec<i32>) -> i32 {\n        let mut nums = nums;\n        nums.sort_unstable(); // Sort the vector to easily find sequences\n        let mut longest_seq_sum = 0;\n        let mut current_seq_start = nums[0];\n        let mut current_seq_length = 1;\n        let mut max_seq_length = 1;\n\n        for i in 1..nums.len() {\n            if nums[i] == nums[i - 1] + 1 {\n                // Continues the sequence\n                current_seq_length += 1;\n            } else if nums[i] > nums[i - 1] + 1 {\n                // Breaks the sequence, check if it's the longest\n                if current_seq_length > max_seq_length {\n                    max_seq_length = current_seq_length;\n                    longest_seq_sum = current_seq_start * current_seq_length + current_seq_length * (current_seq_length - 1) / 2;\n                }\n                // Reset for a new sequence\n                current_seq_start = nums[i];\n                current_seq_length = 1;\n            }\n            // Last sequence check\n            if current_seq_length > max_seq_length {\n                longest_seq_sum = current_seq_start * current_seq_length + current_seq_length * (current_seq_length - 1) / 2;\n            }\n        }\n\n        // Find the smallest missing integer\n        let mut x = longest_seq_sum + 1;\n        while nums.contains(&x) {\n            x += 1;\n        }\n        x\n    }\n}"
}