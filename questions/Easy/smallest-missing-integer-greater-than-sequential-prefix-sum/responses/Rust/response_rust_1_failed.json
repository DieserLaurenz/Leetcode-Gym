{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2168000,
    "question_id": "3236",
    "elapsed_time": 12,
    "compare_result": "0000001100000001100001000000010011000000000000000000010000000100000100000000001000000001001100000001000000000000001100000110001100000100100110000001000000000001100000001010000000000000000000001100000100000000000000100010000001100000000100000000001000010000000100000100100000010000000010010101000000000001010000000010110000010000000010000000000100000000000001100100110010010101010000000000000010000010000000010000000000000000000000000000000100001000110010010100000010000000000000000000000010001000000001000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706659145757,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 82,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1161512670",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn missing_integer(nums: Vec<i32>) -> i32 {\n        let mut nums = nums.clone();\n        nums.sort_unstable(); // Sort the array for sequential check.\n        let mut max_sum = 0;\n        let mut current_sum = 0;\n        let mut last_val = 0;\n\n        for (i, &val) in nums.iter().enumerate() {\n            // Start the sequence or continue it.\n            if i == 0 || val == last_val + 1 {\n                current_sum += val;\n                last_val = val;\n            } else if val != last_val { // Reset for a new potential sequence.\n                max_sum = max_sum.max(current_sum);\n                // Start a new sequence if the current value breaks the sequence\n                // and is not a duplicate of the last value.\n                current_sum = val;\n                last_val = val;\n            }\n            // Always update max_sum for the last iteration\n            max_sum = max_sum.max(current_sum);\n        }\n\n        // The smallest missing integer greater than or equal to the sum of the longest sequential prefix.\n        let mut result = max_sum + 1;\n        while nums.contains(&result) {\n            result += 1;\n        }\n        result\n    }\n}"
}