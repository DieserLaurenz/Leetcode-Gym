{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 11: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 11: ** (ArgumentError) errors were found at the given arguments:\n  * 2nd argument: not a tuple\n    :erlang.element(2, 0)\n    solution.ex:11: Solution.missing_integer/1\n    solution.ex:35: Driver.consume_test_cases/2\n    solution.ex:23: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 72636000,
    "question_id": "3236",
    "elapsed_time": 405,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706668392550,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1161589014",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec missing_integer(nums :: [integer]) :: integer\n  def missing_integer(nums) do\n    # Step 1: Find the sum of the longest sequential prefix\n    longest_seq_sum = Enum.reduce_while(nums, {nums |> hd(), 0}, fn x, {prev, sum} ->\n      if x == prev + 1 do\n        {:cont, {x, sum + x}}\n      else\n        {:halt, sum}\n      end\n    end) |> elem(1)\n\n    # Step 2: Find the smallest missing integer greater than or equal to the sum\n    Stream.iterate(longest_seq_sum + 1, &(&1 + 1))\n    |> Enum.find(fn x ->\n      not Enum.member?(nums, x)\n    end)\n  end\nend"
}