{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 5860000,
    "question_id": "3236",
    "elapsed_time": 17,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706657913356,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 616,
    "total_testcases": 616,
    "runtime_percentile": 100,
    "status_memory": "5.9 MB",
    "memory_percentile": 91.6666,
    "pretty_lang": "C",
    "submission_id": "1161503526",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int missingInteger(int* nums, int numsSize) {\n    int sum = nums[0];\n    int length = 1;  // Length of the sequential prefix\n    \n    // Step 1: Find the longest sequential prefix\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] == nums[i - 1] + 1) {\n            sum += nums[i];\n            length++;\n        } else {\n            break;  // Prefix ends if the sequence is broken\n        }\n    }\n    \n    // Step 2: Find the smallest missing integer greater than or equal to the sum\n    int missingInt = sum;\n    while (1) {\n        int found = 0;  // Flag to check if missingInt is found in nums\n        for (int i = 0; i < numsSize; i++) {\n            if (nums[i] == missingInt) {\n                found = 1;\n                break;\n            }\n        }\n        if (!found) {\n            return missingInt;  // Return the first missing integer greater than or equal to the sum\n        }\n        missingInt++;  // Increment to check the next number\n    }\n}"
}