{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41812000,
    "question_id": "3236",
    "elapsed_time": 124,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[3,4,5,1,12,14,13]",
    "expected_output": "15",
    "task_finish_time": 1706658013726,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1161504221",
    "input_formatted": "[3,4,5,1,12,14,13]",
    "input": "[3,4,5,1,12,14,13]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MissingInteger(int[] nums) {\n        // Sort the array to easily find the longest sequential prefix\n        Array.Sort(nums);\n        \n        // Initialize variables for the longest sequential prefix\n        int sum = 0, lastValid = 0;\n        \n        for (int i = 0; i < nums.Length; i++) {\n            if (i == 0 || nums[i] == nums[i - 1] + 1) {\n                // Add to sum if this is the first element or part of the sequential prefix\n                sum += nums[i];\n                lastValid = nums[i];\n            } else if (nums[i] != nums[i - 1]) {\n                // Break if the sequence is broken and it's not a duplicate\n                break;\n            }\n        }\n        \n        // The starting point for checking the missing integer\n        int start = lastValid + 1;\n\n        // Check if the sum itself is missing\n        if (!Array.Exists(nums, element => element == sum)) {\n            return sum;\n        }\n\n        // Find the smallest missing integer greater than the sum\n        while (true) {\n            if (!Array.Exists(nums, element => element == start)) {\n                return start;\n            }\n            start++;\n        }\n    }\n}"
}