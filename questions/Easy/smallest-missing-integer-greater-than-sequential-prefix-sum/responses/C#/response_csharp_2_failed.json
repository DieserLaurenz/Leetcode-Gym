{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42264000,
    "question_id": "3236",
    "elapsed_time": 148,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706658055039,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1161504532",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MissingInteger(int[] nums) {\n        // Sort the nums array to find sequential numbers easily\n        Array.Sort(nums);\n\n        int maxSeqEnd = nums[0]; // Initialize with the first number\n        int seqSum = nums[0]; // Initialize sum of the sequence\n        bool seqBroken = false; // To track if the sequence has broken\n\n        for (int i = 1; i < nums.Length && !seqBroken; i++) {\n            // If current number is exactly 1 more than the previous, it's part of the sequence\n            if (nums[i] == maxSeqEnd + 1) {\n                maxSeqEnd = nums[i];\n                seqSum += nums[i];\n            } else if (nums[i] > maxSeqEnd + 1) {\n                // Sequence is broken, exit the loop\n                seqBroken = true;\n            }\n            // If nums[i] == maxSeqEnd, it's a duplicate and we ignore it but don't break the sequence\n        }\n\n        // Now, find the smallest missing integer greater than or equal to the sum of the longest sequential prefix\n        int missingInt = seqSum + 1; // Start checking from one more than the sum\n        while (true) {\n            // If the missing integer is not in the array, return it\n            if (!Array.Exists(nums, element => element == missingInt)) {\n                return missingInt;\n            }\n            missingInt++;\n        }\n    }\n}"
}