{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55464000,
    "question_id": "3236",
    "elapsed_time": 511,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706659041915,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1161511866",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n  def missingInteger(nums: Array[Int]): Int = {\n    // Sort the nums array to handle sequences correctly\n    val sortedNums = nums.sorted.distinct\n\n    // Initialize variables to track the longest sequential prefix\n    var currentSum = 0\n    var i = 0\n\n    // Loop to find the longest sequential prefix\n    while (i < sortedNums.length - 1 && sortedNums(i) + 1 == sortedNums(i + 1)) {\n      currentSum += sortedNums(i)\n      i += 1\n    }\n    // Add the last element of the longest sequential prefix to currentSum\n    if (i < sortedNums.length) {\n      currentSum += sortedNums(i)\n    }\n\n    // Find the smallest missing integer greater than or equal to the sum of the longest sequential prefix\n    var missingInteger = currentSum + 1\n    while (nums.contains(missingInteger)) {\n      missingInteger += 1\n    }\n\n    missingInteger\n  }\n}"
}