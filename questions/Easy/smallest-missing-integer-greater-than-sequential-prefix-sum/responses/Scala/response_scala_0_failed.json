{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55692000,
    "question_id": "3236",
    "elapsed_time": 520,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706658970008,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 82,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1161511365",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def missingInteger(nums: Array[Int]): Int = {\n        if (nums.isEmpty) return 1\n\n        // Sort the array to ensure sequential order\n        val sortedNums = nums.sorted\n\n        var currentSum = sortedNums(0)\n        var maxSum = currentSum\n\n        // Iterate through the sorted array to find the longest sequential prefix\n        for (i <- 1 until sortedNums.length) {\n            if (sortedNums(i) == sortedNums(i - 1) + 1) {\n                // Update current sum for sequential numbers\n                currentSum += sortedNums(i)\n            } else if (sortedNums(i) > sortedNums(i - 1) + 1) {\n                // Found a break in the sequence, compare with maxSum\n                maxSum = Math.max(maxSum, currentSum)\n                // Reset currentSum to the new starting number of the next sequence\n                currentSum = sortedNums(i)\n            }\n        }\n\n        // After the loop, compare the last sequence's sum with maxSum\n        maxSum = Math.max(maxSum, currentSum)\n\n        // Starting from maxSum + 1, find the smallest missing integer\n        var missingInt = maxSum + 1\n        while (sortedNums.contains(missingInt)) {\n            missingInt += 1\n        }\n\n        missingInt\n    }\n}"
}