{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38700000,
    "question_id": "3236",
    "elapsed_time": 212,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[3,4,5,1,12,14,13]",
    "expected_output": "15",
    "task_finish_time": 1706658499663,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 132,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1161507820",
    "input_formatted": "[3,4,5,1,12,14,13]",
    "input": "[3,4,5,1,12,14,13]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun missingInteger(nums: IntArray): Int {\n        nums.sort() // Sort the array to identify the sequential prefix easily\n        var sum = nums[0]\n        var currentMax = nums[0]\n\n        for (i in 1 until nums.size) {\n            // Check if the current number continues the sequence\n            if (nums[i] == currentMax + 1) {\n                sum += nums[i]\n                currentMax = nums[i]\n            } else if (nums[i] > currentMax + 1) {\n                // If we encounter a number greater than the next expected in sequence, break\n                break\n            }\n        }\n\n        // The smallest integer greater than or equal to the sum should be considered next\n        // However, if the sum itself is not in the array and is greater than the last number of the longest sequential prefix, it should be the answer\n        // Otherwise, the answer is sum + 1, ensuring it's not in the nums and greater than the sum of the sequential prefix\n        var missingInteger = sum\n        while (missingInteger in nums) {\n            missingInteger++\n        }\n        \n        return missingInteger\n    }\n}"
}