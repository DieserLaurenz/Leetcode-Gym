{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37916000,
    "question_id": "3236",
    "elapsed_time": 171,
    "compare_result
    "code_output": "82",
    "std_output": "",
    "last_testcase": "[38,43,44]",
    "expected_output": "39",
    "task_finish_time": 1706658452558,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 613,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1161507491",
    "input_formatted": "[38,43,44]",
    "input": "[38,43,44]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun missingInteger(nums: IntArray): Int {\n        var longestSeqLength = 1\n        var sum = nums[0]\n        \n        // Find the sum of the longest sequential prefix\n        for (i in 1 until nums.size) {\n            if (nums[i] == nums[i - 1] + 1) {\n                longestSeqLength++\n                sum += nums[i]\n            } else if (nums[i] <= nums[i - 1]) {\n                break\n            }\n        }\n\n        // Starting from sum, find the smallest missing integer greater than or equal to the sum\n        var x = sum\n        while (x in nums) {\n            x++\n        }\n        \n        return x\n    }\n}"
}