{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21500000,
    "question_id": "3236",
    "elapsed_time": 20,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706657629500,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 112,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1161501402",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int missingInteger(vector<int>& nums) {\n        // Ensure the nums is sorted to correctly identify sequential elements\n        sort(nums.begin(), nums.end());\n        \n        // Variable to store the sum of the longest sequential prefix\n        int sum = 0;\n        \n        // Loop through the nums array to find the longest sequential prefix\n        for(int i = 0; i < nums.size(); ++i) {\n            // If it's the first element or it follows the sequential pattern\n            if(i == 0 || nums[i] == nums[i-1] + 1) {\n                sum += nums[i]; // Add the value to the sum\n            } else {\n                // If the sequence breaks, stop the loop as we've found the longest sequential prefix\n                break;\n            }\n        }\n        \n        // Find the smallest missing integer greater than or equal to the sum\n        int x = sum;\n        while(true) {\n            // Check if x is not in the array\n            if(find(nums.begin(), nums.end(), x) == nums.end()) {\n                // If x is not found, return it as the smallest missing integer\n                return x;\n            }\n            // Increment x to check the next integer\n            ++x;\n        }\n        \n        // Code should not reach here as the loop will return once it finds the missing integer\n        return -1; // Added to suppress compiler warning\n    }\n};"
}