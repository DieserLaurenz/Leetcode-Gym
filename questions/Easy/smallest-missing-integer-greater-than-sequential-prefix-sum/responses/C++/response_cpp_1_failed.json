{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21392000,
    "question_id": "3236",
    "elapsed_time": 30,
    "compare_result": "0100001100000000000000000000010011000000000000000000010000000100000000000100000000000000000100000001000000000000000100000000001000000100000100000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000010000010010000000000000001000000000000110001000000000110000000001000000000100101111001010000010001000000100000001000000100000000010000000000000000100000000000000001000000000000000001000000000000000001100000000000011000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706657686581,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1161501832",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int missingInteger(vector<int>& nums) {\n        // Sort the array to identify the sequential prefix correctly\n        sort(nums.begin(), nums.end());\n        \n        // Variables for the longest sequential prefix and its sum\n        int longestSeqLength = 1, currentSeqLength = 1;\n        int sum = nums[0], currentSum = nums[0];\n\n        // Iterate through the nums array to find the longest sequential prefix\n        for(int i = 1; i < nums.size(); i++) {\n            // Check if the current number continues the sequence\n            if(nums[i] == nums[i-1] + 1) {\n                currentSeqLength++;\n                currentSum += nums[i];\n            } else if(nums[i] != nums[i-1]) { // Reset for a new sequence if not a duplicate\n                if(currentSeqLength > longestSeqLength) {\n                    longestSeqLength = currentSeqLength;\n                    sum = currentSum;\n                }\n                currentSeqLength = 1;\n                currentSum = nums[i];\n            }\n            // For duplicates, just move on without resetting the sequence\n        }\n\n        // Update the sum if the last sequence was the longest\n        if(currentSeqLength > longestSeqLength) {\n            sum = currentSum;\n        }\n\n        // Calculate the target missing integer\n        int target = sum + 1; // Start checking from one more than the sum\n        for (int i = 0; i <= sum; ++i) {\n            if (find(nums.begin(), nums.end(), target) == nums.end()) {\n                return target; // Found the missing integer\n            }\n            ++target; // Increment target and check again\n        }\n\n        // Fallback, though we should have returned within the loop\n        return target;\n    }\n};"
}