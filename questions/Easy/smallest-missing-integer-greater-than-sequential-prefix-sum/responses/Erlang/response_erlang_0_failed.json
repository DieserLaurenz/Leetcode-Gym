{
    "status_code": 20,
    "lang": "erlang",
    "run_success": false,
    "compile_error": "Line 22: Char 9: illegal guard expression",
    "full_compile_error": "Line 22: Char 9: illegal guard expression\n%   22|         lists:member(X, Nums) ->\n%     |         ^",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3236",
    "task_finish_time": 1706668240335,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1161587644",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "-spec missing_integer(Nums :: [integer()]) -> integer().\nmissing_integer(Nums) ->\n    SeqLen = 1, % Start with the first element as the initial sequential prefix\n    Sum = lists:nth(1, Nums), % Initial sum is the first element\n    {FinalSeqLen, FinalSum} = find_longest_seq_prefix(Nums, SeqLen, Sum, 2),\n    find_missing_integer(Nums, FinalSum + 1).\n\nfind_longest_seq_prefix(_Nums, SeqLen, Sum, Index) when Index > length(_Nums) -> \n    {SeqLen, Sum}; % End of list reached\nfind_longest_seq_prefix(Nums, SeqLen, Sum, Index) ->\n    Prev = lists:nth(Index - 1, Nums),\n    Curr = lists:nth(Index, Nums),\n    if\n        Curr == Prev + 1 ->\n            find_longest_seq_prefix(Nums, SeqLen + 1, Sum + Curr, Index + 1);\n        true ->\n            {SeqLen, Sum}\n    end.\n\nfind_missing_integer(Nums, X) ->\n    if\n        lists:member(X, Nums) ->\n            find_missing_integer(Nums, X + 1);\n        true ->\n            X\n    end."
}