{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15388000,
    "question_id": "3236",
    "elapsed_time": 21,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706658378333,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 226,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1161506932",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func missingInteger(_ nums: [Int]) -> Int {\n        var maxLength = 0\n        var currentLength = 1\n        var sum = nums[0]\n        var maxSum = nums[0]\n\n        // Identify the longest sequential prefix\n        for i in 1..<nums.count {\n            if nums[i] == nums[i - 1] + 1 {\n                currentLength += 1\n                sum += nums[i]\n            } else {\n                if currentLength > maxLength {\n                    maxLength = currentLength\n                    maxSum = sum\n                }\n                currentLength = 1\n                sum = nums[i]\n            }\n        }\n        \n        // Check last sequence if it's the longest\n        if currentLength > maxLength {\n            maxSum = sum\n        }\n        \n        // Find the smallest missing integer\n        var missingInteger = maxSum + 1\n        while nums.contains(missingInteger) {\n            missingInteger += 1\n        }\n        \n        return missingInteger\n    }\n}"
}