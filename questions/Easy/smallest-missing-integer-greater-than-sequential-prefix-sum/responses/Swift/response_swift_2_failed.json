{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15812000,
    "question_id": "3236",
    "elapsed_time": 22,
    "compare_result": "0100001100000001100101000000010011000000000100000000010000000100010100000000001000000001001100000001000000000000001100000110001100001110100110000001000000000001100000001010000000001000000000001100000110000000000000100010000001100000000100000000001000010000000100000100100000010000000010010101000000000001010000000010110000010010000010000010000100000000001011100100110010010101011000000001000010000010000100010000000000000000000000000000000100001001110010010100000010000100000000000010000010001000000001000000000000000000000000000000000000000000001000000000000000000000000000000000001000000000000000000001000000000001",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706658420318,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 103,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1161507259",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func missingInteger(_ nums: [Int]) -> Int {\n        // Initialize variables to track the current sequence's sum and the longest sequence's sum.\n        var currentSum = nums[0]\n        var maxSum = 0\n        var previousNum = nums[0]\n        \n        for i in 1..<nums.count {\n            if nums[i] == previousNum + 1 {\n                // Continue the sequence.\n                currentSum += nums[i]\n            } else {\n                // Sequence broke; check if this was the longest sequence so far.\n                maxSum = max(maxSum, currentSum)\n                // Reset currentSum if the next number is a start of a new sequence.\n                if i < nums.count - 1 && nums[i+1] == nums[i] + 1 {\n                    currentSum = nums[i]\n                } else {\n                    // If the next number does not continue the sequence, reset to that next number directly.\n                    currentSum = nums[i]\n                }\n            }\n            previousNum = nums[i]\n        }\n        // Final check for the last sequence.\n        maxSum = max(maxSum, currentSum)\n        \n        // Now, find the smallest missing integer greater than or equal to maxSum.\n        var target = maxSum + 1\n        while nums.contains(target) {\n            target += 1\n        }\n        \n        return target\n    }\n}"
}