{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51160000,
    "question_id": "3236",
    "elapsed_time": 85,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706658095798,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 67,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1161504820",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar missingInteger = function(nums) {\n    let longestSeqLength = 1;\n    let currentSeqLength = 1;\n    // Sorting the array to make it easier to find sequential numbers\n    nums.sort((a, b) => a - b);\n\n    // Identify the longest sequential prefix\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] === nums[i - 1] + 1) {\n            currentSeqLength++;\n            longestSeqLength = Math.max(longestSeqLength, currentSeqLength);\n        } else if (nums[i] !== nums[i - 1]) {\n            // Reset currentSeqLength if the current number is not a direct continuation and not a duplicate\n            currentSeqLength = 1;\n        }\n    }\n\n    // Calculate the sum of the longest sequential prefix\n    const firstValue = nums[0];\n    const sumOfLongestSeqPrefix = firstValue + (longestSeqLength - 1) * longestSeqLength / 2;\n\n    // Search for the smallest missing integer greater than or equal to the sum\n    let missingInteger = sumOfLongestSeqPrefix;\n    while (nums.includes(missingInteger)) {\n        missingInteger++;\n    }\n\n    return missingInteger;\n};"
}