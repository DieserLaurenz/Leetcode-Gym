{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51544000,
    "question_id": "3236",
    "elapsed_time": 85,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[3,4,5,1,12,14,13]",
    "expected_output": "15",
    "task_finish_time": 1706658173881,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 132,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1161505392",
    "input_formatted": "[3,4,5,1,12,14,13]",
    "input": "[3,4,5,1,12,14,13]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar missingInteger = function(nums) {\n    // Sort the array to handle non-sequential and duplicate elements\n    nums.sort((a, b) => a - b);\n\n    let maxSequentialValue = nums[0];\n    let sum = nums[0];\n    let i = 1;\n    while (i < nums.length) {\n        // If the current number continues the sequence\n        if (nums[i] === maxSequentialValue + 1) {\n            sum += nums[i];\n            maxSequentialValue = nums[i];\n        }\n        i++;\n    }\n\n    // After identifying the longest sequential prefix and its sum,\n    // the missing integer is the next integer that is not in the array,\n    // but since we are looking for the smallest missing integer greater than or equal\n    // to the sum of the longest sequential prefix, we start from the sum itself.\n    let missingInteger = sum;\n    while (nums.includes(missingInteger)) {\n        missingInteger++;\n    }\n\n    return missingInteger;\n};"
}