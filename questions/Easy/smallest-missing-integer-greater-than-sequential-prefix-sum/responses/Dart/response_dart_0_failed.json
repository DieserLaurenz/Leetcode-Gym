{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 149940000,
    "question_id": "3236",
    "elapsed_time": 469,
    "compare_result": "1000001100000000000000000000010011000000000000000000010000000100000000000000000000000000000100000001000000000000000100000000001000000110000100000000000000000000000000000010000000000000000000000000000000000000000000000100000000000000000000000000000000010000000000000000000000000000000010010000000000000001100001000000110000000000000010000000000000001000000001100000010000110001000000000000000000000000000000010000000000000000000000000000000000000000000000000000100000000100010000000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001011001",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[3,4,5,1,12,14,13]",
    "expected_output": "15",
    "task_finish_time": 1706658587180,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1161508463",
    "input_formatted": "[3,4,5,1,12,14,13]",
    "input": "[3,4,5,1,12,14,13]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int missingInteger(List<int> nums) {\n    int sumOfPrefix = nums[0];\n    int currentLength = 1;\n    int maxLength = 1;\n\n    // Loop to find the sum of the longest sequential prefix\n    for (int i = 1; i < nums.length; i++) {\n      if (nums[i] == nums[i - 1] + 1) {\n        currentLength += 1;\n        if (currentLength > maxLength) {\n          maxLength = currentLength;\n          sumOfPrefix += nums[i];\n        }\n      } else {\n        if (currentLength > 1) { // Found a sequential prefix, reset currentLength\n          currentLength = 1;\n        }\n        if (i == 1 || nums[i] != nums[i - 1]) { // Avoid double-counting for first element or non-sequential elements\n          sumOfPrefix = nums[i];\n        }\n      }\n    }\n    \n    // Adjusting sumOfPrefix based on the longest sequential prefix found\n    if (currentLength == maxLength) {\n      for (int i = 0; i < maxLength; i++) {\n        sumOfPrefix += i;\n      }\n    } else {\n      sumOfPrefix = nums[0];\n      for (int i = 1; i < maxLength; i++) {\n        sumOfPrefix += i;\n      }\n    }\n\n    // Finding the smallest missing integer greater than or equal to sumOfPrefix\n    int x = sumOfPrefix + 1;\n    while (nums.contains(x)) {\n      x += 1;\n    }\n\n    return x;\n  }\n}"
}