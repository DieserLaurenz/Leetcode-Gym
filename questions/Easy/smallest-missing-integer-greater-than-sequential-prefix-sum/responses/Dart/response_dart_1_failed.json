{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 33: Char 37: Error: A value of type 'double' can't be assigned to a variable of type 'int'.",
    "full_runtime_error": "Line 33: Char 37: Error: A value of type 'double' can't be assigned to a variable of type 'int'.\n    int startSearch = longestSeqSum - (maxLength * (maxLength - 1) / 2); // First element of the sequence\n                                    ^",
    "status_runtime": "N/A",
    "memory": 146816000,
    "question_id": "3236",
    "elapsed_time": 339,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706658627977,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1161508776",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int missingInteger(List<int> nums) {\n    int longestSeqSum = 0;\n    int currentSeqSum = nums[0];\n    int maxLength = 1;\n    int currentLength = 1;\n    \n    // To ensure we consider the case where the longest sequence starts from the first element\n    int lastNum = nums[0];\n\n    for (int i = 1; i < nums.length; ++i) {\n      if (nums[i] == lastNum + 1) {\n        currentLength++;\n        currentSeqSum += nums[i];\n      } else {\n        if (currentLength > maxLength) {\n          maxLength = currentLength;\n          longestSeqSum = currentSeqSum;\n        }\n        // Reset for the next sequence\n        currentLength = 1;\n        currentSeqSum = nums[i];\n      }\n      lastNum = nums[i];\n    }\n\n    // Check after the loop in case the longest sequence ends at the last element\n    if (currentLength > maxLength) {\n      longestSeqSum = currentSeqSum;\n    }\n\n    // The starting point for searching the missing integer\n    int startSearch = longestSeqSum - (maxLength * (maxLength - 1) / 2); // First element of the sequence\n    int endSeq = startSearch + maxLength; // The next integer that would continue the sequence\n\n    for (int x = endSeq; ; ++x) {\n      if (!nums.contains(x)) {\n        return x;\n      }\n    }\n  }\n}"
}