{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 150312000,
    "question_id": "3236",
    "elapsed_time": 459,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2,5]",
    "expected_output": "6",
    "task_finish_time": 1706658684825,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 226,
    "total_testcases": 616,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1161509217",
    "input_formatted": "[1,2,3,2,5]",
    "input": "[1,2,3,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int missingInteger(List<int> nums) {\n    // No need to calculate arithmetic sum, logic simplified\n    int maxLength = 0, maxSum = 0;\n    int currentLength = 1, currentSum = nums[0];\n    for (int i = 1; i < nums.length; i++) {\n      if (nums[i] == nums[i - 1] + 1) {\n        // Continuing the sequential prefix\n        currentLength++;\n        currentSum += nums[i];\n      } else {\n        // Not sequential, reset if new sequence starts\n        if (nums[i] > nums[i - 1] + 1 || nums[i] <= nums[i - 1]) {\n          if (currentLength > maxLength) {\n            maxLength = currentLength;\n            maxSum = currentSum;\n          }\n          currentLength = 1;\n          currentSum = nums[i];\n        }\n      }\n    }\n    // Check last sequence\n    if (currentLength > maxLength) {\n      maxLength = currentLength;\n      maxSum = currentSum;\n    }\n\n    int targetSum = maxSum + 1; // Start checking from just above the sum of the longest sequential prefix\n    while (nums.contains(targetSum)) { // Find the missing integer\n      targetSum++;\n    }\n    return targetSum;\n  }\n}"
}