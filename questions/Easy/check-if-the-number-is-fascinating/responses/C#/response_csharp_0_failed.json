{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 28944000,
    "question_id": "2824",
    "elapsed_time": 105,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "783",
    "expected_output": "false",
    "task_finish_time": 1706111966779,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 894,
    "total_testcases": 900,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1155674510",
    "input_formatted": "783",
    "input": "783",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool IsFascinating(int n) {\n        // Concatenate n, 2*n, and 3*n\n        string concatenated = $\"{n}{n * 2}{n * 3}\";\n\n        // Check if concatenated string contains all digits from 1 to 9 exactly once\n        for (int i = 1; i <= 9; i++) {\n            if (!concatenated.Contains(i.ToString())) {\n                return false;\n            }\n        }\n\n        // Check for presence of '0'\n        if (concatenated.Contains(\"0\")) {\n            return false;\n        }\n\n        return true;\n    }\n}"
}