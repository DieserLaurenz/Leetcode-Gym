{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "371 ms",
    "memory": 71580000,
    "question_id": "2824",
    "elapsed_time": 401,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706121171063,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 900,
    "total_testcases": 900,
    "runtime_percentile": 50.0,
    "status_memory": "71.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1155818078",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec is_fascinating(n :: integer) :: boolean\n  def is_fascinating(n) do\n    concatenated = to_string(n) <> to_string(n * 2) <> to_string(n * 3)\n    is_fascinating_string?(concatenated)\n  end\n\n  defp is_fascinating_string?(str) do\n    # Check if the string contains digits 1 to 9 exactly once and no 0's\n    str\n    |> String.graphemes()\n    |> Enum.sort()\n    |> Enum.join()\n    |> (fn x -> x == \"123456789\" end).()\n  end\nend"
}