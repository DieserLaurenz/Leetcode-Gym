{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "165 ms",
    "memory": 101084000,
    "question_id": "2824",
    "elapsed_time": 246,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706120209815,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 900,
    "total_testcases": 900,
    "runtime_percentile": 100,
    "status_memory": "101.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1155802551",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (is-fascinating n)\n  (-> exact-integer? boolean?)\n  \n  (let* ([concatenated (string-append (number->string n) \n                                      (number->string (* 2 n)) \n                                      (number->string (* 3 n)))]\n         [digits (string->list concatenated)])\n    (and (= (length digits) 9)\n         (not (member #\\0 digits))\n         (for/and ([digit (in-range 1 10)])\n           (member (integer->char (+ digit 48)) digits)))))\n\n(define (member element lst)\n  (cond [(empty? lst) #f]\n        [(equal? element (first lst)) #t]\n        [else (member element (rest lst))]))"
}