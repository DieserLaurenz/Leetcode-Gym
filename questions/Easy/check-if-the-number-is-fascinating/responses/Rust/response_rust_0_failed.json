{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2104000,
    "question_id": "2824",
    "elapsed_time": 12,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "783",
    "expected_output": "false",
    "task_finish_time": 1706117932417,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 894,
    "total_testcases": 900,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1155766024",
    "input_formatted": "783",
    "input": "783",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn is_fascinating(n: i32) -> bool {\n        // Concatenate n, 2 * n, and 3 * n as a String\n        let concatenated = format!(\"{}{}{}\", n, n * 2, n * 3);\n\n        // Check if concatenated string has all digits from 1 to 9 exactly once\n        // and does not contain any 0s\n        (1..=9).all(|digit| concatenated.contains(digit.to_string().as_str())) \n            && !concatenated.contains('0')\n    }\n}"
}