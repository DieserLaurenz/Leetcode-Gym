{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2152000,
    "question_id": "2824",
    "elapsed_time": 12,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706118527928,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 900,
    "total_testcases": 900,
    "runtime_percentile": 100,
    "status_memory": "2.2 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Rust",
    "submission_id": "1155775560",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn is_fascinating(n: i32) -> bool {\n        // Concatenate n, 2 * n, and 3 * n as a String\n        let concatenated = format!(\"{}{}{}\", n, n * 2, n * 3);\n\n        // Create a vector to count the frequency of each digit\n        let mut counts = vec![0; 10]; // 0-9\n\n        // Iterate over each character in the concatenated string\n        for ch in concatenated.chars() {\n            // Convert character to its numeric value\n            if let Some(digit) = ch.to_digit(10) {\n                counts[digit as usize] += 1;\n            }\n        }\n\n        // Check if each digit from 1 to 9 appears exactly once and 0 does not appear\n        counts[0] == 0 && (1..=9).all(|i| counts[i] == 1)\n    }\n}"
}