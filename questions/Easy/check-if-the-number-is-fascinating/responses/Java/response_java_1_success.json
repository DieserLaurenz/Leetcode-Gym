{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "9 ms",
    "memory": 42132000,
    "display_runtime": "9",
    "question_id": "2824",
    "elapsed_time": 152,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706110610363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 900,
    "total_testcases": 900,
    "runtime_percentile": 59.154900000000005,
    "status_memory": "42.1 MB",
    "memory_percentile": 6.23729999999998,
    "pretty_lang": "Java",
    "submission_id": "1155655652",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public boolean isFascinating(int n) {\n        // Concatenate n, 2*n, and 3*n\n        String concatenated = String.valueOf(n) + String.valueOf(n * 2) + String.valueOf(n * 3);\n\n        // Check if the concatenated string contains each digit from 1 to 9 exactly once\n        HashSet<Character> digits = new HashSet<>();\n        for (char ch : concatenated.toCharArray()) {\n            if (ch == '0' || digits.contains(ch)) { // If any 0 is found or digit is repeated, return false\n                return false;\n            }\n            digits.add(ch);\n        }\n\n        // Check if all digits from 1 to 9 are present\n        return digits.size() == 9;\n    }\n}"
}