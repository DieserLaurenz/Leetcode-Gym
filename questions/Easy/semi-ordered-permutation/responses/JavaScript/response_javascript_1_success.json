{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "97 ms",
    "memory": 54176000,
    "question_id": "2785",
    "elapsed_time": 122,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706638667516,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1977,
    "total_testcases": 1977,
    "runtime_percentile": 16.278900000000018,
    "status_memory": "54.2 MB",
    "memory_percentile": 9.302100000000031,
    "pretty_lang": "JavaScript",
    "submission_id": "1161304431",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar semiOrderedPermutation = function(nums) {\n    let moves = 0;\n    \n    // The logic needs to be revised to correctly calculate the minimum\n    // number of moves by considering the detailed interactions in the array\n    // This involves a more sophisticated approach than the initial sum of distances\n\n    // Correct approach to calculate moves based on the problem statement\n    // and understanding the intricacies of the operation's effects on array ordering\n\n    // Find positions of 1 and n\n    let pos1 = nums.indexOf(1);\n    let posN = nums.indexOf(nums.length);\n\n    // Move 1 to the beginning\n    moves += pos1;\n\n    // Move n to the end\n    // If n is before 1, moving 1 to the start will also move n one position closer to the end\n    if (posN < pos1) {\n        moves += (nums.length - 1 - posN) - 1;\n    } else {\n        moves += nums.length - 1 - posN;\n    }\n\n    return moves;\n};"
}