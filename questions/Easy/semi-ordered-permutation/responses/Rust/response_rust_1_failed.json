{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2184000,
    "question_id": "2785",
    "elapsed_time": 15,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,4,3]",
    "expected_output": "2",
    "task_finish_time": 1706649016233,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1006,
    "total_testcases": 1977,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1161431079",
    "input_formatted": "[2,1,4,3]",
    "input": "[2,1,4,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn semi_ordered_permutation(nums: Vec<i32>) -> i32 {\n        // The strategy needs to involve a direct calculation of steps required\n        // for 1 to reach the start and n to reach the end, considering their impact on each other.\n\n        // Find positions of 1 and n in the array\n        let n = nums.len() as i32;\n        let pos_1 = nums.iter().position(|&x| x == 1).unwrap() as i32;\n        let pos_n = nums.iter().position(|&x| x == n).unwrap() as i32;\n\n        // Calculate swaps for 1 and n to reach their positions without directly adding their distances\n        let mut swaps = 0;\n\n        // Check if 1 and n are already in their correct positions\n        if pos_1 == 0 && pos_n == n - 1 {\n            return 0;\n        }\n\n        // For 1 to move to the beginning, swap it with each element to its left\n        swaps += pos_1;\n\n        // For n to move to the end, swap it with each element to its right\n        swaps += n - 1 - pos_n;\n\n        // If 1 and n are adjacent and out of place, reduce the total swaps by 1 as moving one towards its place\n        // also moves the other away from its incorrect position\n        if pos_1 + 1 == pos_n || pos_n + 1 == pos_1 {\n            swaps -= 1;\n        }\n\n        swaps\n    }\n}"
}