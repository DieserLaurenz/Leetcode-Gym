{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2108000,
    "question_id": "2785",
    "elapsed_time": 17,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[2,4,1,3]",
    "expected_output": "3",
    "task_finish_time": 1706649084860,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1004,
    "total_testcases": 1977,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1161431687",
    "input_formatted": "[2,4,1,3]",
    "input": "[2,4,1,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn semi_ordered_permutation(nums: Vec<i32>) -> i32 {\n        let n = nums.len() as i32;\n        let mut pos_1 = 0;\n        let mut pos_n = 0;\n        \n        // Find positions of 1 and n\n        for (i, &num) in nums.iter().enumerate() {\n            if num == 1 {\n                pos_1 = i as i32;\n            }\n            if num == n {\n                pos_n = i as i32;\n            }\n        }\n\n        // Calculate swaps needed to move 1 to the beginning and n to the end\n        let mut swaps = 0;\n        // Moving 1 to the start if it's not already there\n        if pos_1 > 0 {\n            swaps += pos_1;\n        }\n        // Moving n to the end if it's not already there\n        if pos_n < n - 1 {\n            swaps += n - 1 - pos_n;\n        }\n        \n        // Adjust for overlap if 1 is directly before n or n directly before 1 in the initial array\n        if (pos_1 == pos_n - 1 && pos_1 == 0) || (pos_n == pos_1 - 1 && pos_n == n - 2) {\n            swaps -= 1;\n        }\n\n        swaps\n    }\n}"
}