{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "-: contract violation",
    "full_runtime_error": "-: contract violation\n  expected: number?\n  given: #<void>\n  context...:\n   solution.rkt:1:0: semi-ordered-permutation\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:28:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100096000,
    "question_id": "2785",
    "elapsed_time": 239,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,1,4,3]",
    "expected_output": "2",
    "task_finish_time": 1706649298066,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1977,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1161433590",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (semi-ordered-permutation nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let* ((n (length nums))\n         (index-1 (for/or ([i (in-range n)])\n                      (when (equal? (list-ref nums i) 1)\n                        i)))\n         (index-n (for/or ([i (in-range n)])\n                      (when (equal? (list-ref nums i) n)\n                        i)))\n         ;; Calculate moves required for '1' to be at the beginning\n         (moves-1 index-1)\n         ;; Calculate moves required for 'n' to be at the end\n         (moves-n (- n index-n 1)))\n    ;; If '1' and 'n' are placed at the beginning and end already, no moves are needed.\n    ;; Otherwise, calculate the total moves required.\n    (if (and (= index-1 0) (= index-n (- n 1)))\n        0\n        ;; Adjust the total moves if '1' and 'n' are adjacent to avoid double counting\n        (+ moves-1 moves-n (if (or (= (+ index-1 1) index-n)\n                                   (= (- index-n 1) index-1))\n                               -1\n                               0))))\n)"
}