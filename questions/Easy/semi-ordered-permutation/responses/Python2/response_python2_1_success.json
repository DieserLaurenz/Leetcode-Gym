{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "49 ms",
    "memory": 11680000,
    "question_id": "2785",
    "elapsed_time": 70,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708725233761,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1977,
    "total_testcases": 1977,
    "runtime_percentile": 64.86490000000003,
    "status_memory": "11.7 MB",
    "memory_percentile": 78.3784,
    "pretty_lang": "Python",
    "submission_id": "1184349067",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def semiOrderedPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Find the position of 1 and n\n        n = len(nums)\n        pos1 = nums.index(1)\n        posn = nums.index(n)\n        \n        # Calculate moves to get 1 and n to their correct positions\n        # The minimum operations needed to sort the entire array is not simply moving 1 to the start\n        # and n to the end independently. We need to consider the whole permutation's order.\n        # Thus, we simulate the process considering the optimal path for both 1 and n.\n        \n        # Move 1 to the start\n        moves1 = pos1\n        # Move n to the end\n        movesn = (n - 1) - posn\n        \n        # If 1 is to the right of n, crossing them requires one less move\n        if pos1 > posn:\n            return moves1 + movesn - 1\n        else:\n            return moves1 + movesn"
}