{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "527 ms",
    "memory": 57084000,
    "question_id": "2785",
    "elapsed_time": 572,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706648910450,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1977,
    "total_testcases": 1977,
    "runtime_percentile": 100,
    "status_memory": "57.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1161430077",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def semiOrderedPermutation(nums: Array[Int]): Int = {\n        val n = nums.length\n        // The initial idea to calculate distances directly does not account for the optimal\n        // path to arrange '1' and 'n'. We need a more nuanced approach to correctly solve the problem.\n        \n        // Find the position of 1 and n to understand their current placement.\n        val pos1 = nums.indexOf(1)\n        val posN = nums.indexOf(n)\n        \n        // Calculate the steps required to move '1' to the beginning and 'n' to the end, taking into account\n        // that some swaps can be beneficial for both operations.\n        val stepsFor1 = pos1 // Steps to bring '1' to the start are directly its index.\n        val stepsForN = n - 1 - posN // Steps to bring 'n' to the end are based on its distance from the last position.\n        \n        // Correcting the approach:\n        // If '1' is to the right of 'n', moving '1' to the beginning and 'n' to the end directly would overcount.\n        // We subtract the overlap, ensuring we don't double-count the distance when '1' and 'n' cross paths.\n        val overlap = if (pos1 > posN) 1 else 0\n        \n        // The corrected calculation accounts for the overlap in movements of '1' and 'n'.\n        stepsFor1 + stepsForN - overlap\n    }\n}"
}