{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "498 ms",
    "memory": 72852000,
    "question_id": "2785",
    "elapsed_time": 630,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706649930919,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1977,
    "total_testcases": 1977,
    "runtime_percentile": 100,
    "status_memory": "72.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1161439237",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec semi_ordered_permutation(nums :: [integer]) :: integer\n  def semi_ordered_permutation(nums) do\n    # The index position of 1 and n in the list\n    index_1 = Enum.find_index(nums, &(&1 == 1))\n    index_n = Enum.find_index(nums, &(&1 == Enum.count(nums)))\n\n    # Moves required to get 1 to the start is its index position\n    moves_1 = index_1\n\n    # Moves required to get n to the end depends on its position and whether it crosses the path of 1\n    moves_n = if index_n < index_1, do: Enum.count(nums) - 1 - index_n - 1, else: Enum.count(nums) - 1 - index_n\n\n    moves_1 + moves_n\n  end\nend"
}