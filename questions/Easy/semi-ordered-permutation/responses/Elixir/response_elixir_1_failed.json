{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72356000,
    "question_id": "2785",
    "elapsed_time": 529,
    "compare_result": "101101100101110111001000100101010101111011110111100110011110111101111001100011000110010100101000110001100101001010010100100101001010010101001001010010100101111101111101111101111100111001111101111101111101111100111001111101111101111101111100111000111000111000111001010001010001111101111101111101111100111001111101111101111101111100111001111101111101111101111100111000111000111000111001010001010000111000111000111001010001010000111000111000111001010001010001010001010001101001101001101001010001010001101001101001101000111000111000111001010001010000111000111000111001010001010001010001010001101001101001101001010001010001101001101001101001010001010001101001101001101001101001000101000101000101000101101001000101000101000101000101101001000101000101000101000101010001010001101001101001101001101001000101000101000101000101101001000101000101000101000101101001000101000101000101000101111111100010001100111001010001010101111110101000100000010010011111010110000011001111100011110010010011111011001100011101111101010001001001101010011101001100010001011001010001011101001100000000111011000010110110001010100100101001101000011011111101110100101111000111101000110110010010111011010110111101111001111011010101100101001011010110110001010110010110101010011010011010101100000101001011011111100101011111101100101010100011011101111011100010111010111001000001100110111100000000010001110111011011101101101001110110100001101111110001001101011110101101111101011111000000101111010101101110101100010000001110011000110101111100111111111100101010101011110001100101111101010010011101101111111011100101001101011100100111011010010011010111011100100011000010100001101111101101100100011001100010011101000011000000000001000111100101110011010101111000011000000011001011100110011100010001110001001010101001010100010100110011101100000001100011101110010010110010111010101000101111100111111010100000100010111000001001001011000100010011010110011111100011000001000011100111100101011011101000001000110101010001111110110",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[2,4,1,3]",
    "expected_output": "3",
    "task_finish_time": 1706649857281,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1008,
    "total_testcases": 1977,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1161438586",
    "input_formatted": "[2,4,1,3]",
    "input": "[2,4,1,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec semi_ordered_permutation(nums :: [integer]) :: integer\n  def semi_ordered_permutation(nums) do\n    n = length(nums)\n    # Directly calculating the distance of 1 and n to their correct positions\n    moves_for_1 = Enum.find_index(nums, &(&1 == 1))\n    moves_for_n = n - Enum.find_index(nums, &(&1 == n)) - 1\n\n    # The total moves is the sum of individual moves, adjusted for overlapping moves if necessary.\n    # This simplistic calculation needs refinement for cases where moving elements towards their\n    # correct positions interferes with each other's optimal path.\n    moves_for_1 + moves_for_n - (if moves_for_1 + 1 == moves_for_n, do: 1, else: 0)\n  end\nend"
}