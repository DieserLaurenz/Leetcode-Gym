{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 47016000,
    "question_id": "2785",
    "elapsed_time": 138,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[3,2,1]",
    "expected_output": "3",
    "task_finish_time": 1706638397642,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1217,
    "total_testcases": 1977,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1161299964",
    "input_formatted": "[3,2,1]",
    "input": "[3,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int SemiOrderedPermutation(int[] nums) {\n        int pos1 = 0, posN = 0;\n        for (int i = 0; i < nums.Length; i++) {\n            if (nums[i] == 1) pos1 = i;\n            if (nums[i] == nums.Length) posN = i;\n        }\n        \n        // If 1 is right after n, reduce one swap because moving n to the end\n        // will also move 1 one position closer to the start\n        if (pos1 == posN + 1) {\n            return pos1 + (nums.Length - 1 - posN) - 1;\n        } else {\n            return pos1 + (nums.Length - 1 - posN);\n        }\n    }\n}"
}