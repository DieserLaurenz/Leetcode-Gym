{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 46720000,
    "question_id": "2785",
    "elapsed_time": 147,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,4,3]",
    "expected_output": "2",
    "task_finish_time": 1706638455253,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 944,
    "total_testcases": 1977,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1161300903",
    "input_formatted": "[2,1,4,3]",
    "input": "[2,1,4,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int SemiOrderedPermutation(int[] nums) {\n        int index1 = 0, indexN = 0, n = nums.Length;\n        // Find positions of 1 and n\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) index1 = i;\n            if (nums[i] == n) indexN = i;\n        }\n        \n        // Moves needed to bring 1 to start and n to end\n        int movesFor1 = index1; // Moves needed to bring 1 to the start\n        int movesForN = n - 1 - indexN; // Moves needed to bring n to the end\n        \n        // Adjustment for when 1 is directly before or after n\n        if (Math.Abs(index1 - indexN) == 1) {\n            // If 1 is right after n, one less move is needed as they will swap in one operation\n            return Math.Max(movesFor1, movesForN);\n        }\n        \n        // No overlap in moves, sum the individual moves\n        return movesFor1 + movesForN;\n    }\n}"
}