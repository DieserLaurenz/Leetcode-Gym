{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43300000,
    "question_id": "3045",
    "elapsed_time": 134,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,1,4]",
    "expected_output": "-1",
    "task_finish_time": 1706554826183,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 810,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1160367616",
    "input_formatted": "[2,1,4]",
    "input": "[2,1,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumRightShifts(IList<int> nums) {\n        // Check if already sorted\n        bool isSorted = true;\n        int n = nums.Count;\n        int wrapPoints = 0, minIndex = 0;\n\n        for (int i = 1; i < n; i++) {\n            // Find the index of the minimum element\n            if (nums[i] < nums[minIndex]) {\n                minIndex = i;\n            }\n            // Check for wrap points indicating unsorted parts\n            if (nums[i] < nums[i - 1]) {\n                isSorted = false;\n                wrapPoints++;\n            }\n        }\n\n        // If already sorted, return 0\n        if (isSorted) return 0;\n        // If there are more than one wrap points, sorting is impossible\n        if (wrapPoints > 1) return -1;\n\n        // To sort the array, we need to bring the minimum element to the start\n        // The minimum number of right shifts required is the distance of the minimum element from the end of the array\n        // This is because a right shift moves the last element to the start\n        return (n - minIndex) % n;\n    }\n}"
}