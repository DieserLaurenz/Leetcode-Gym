{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "2 ms",
    "memory": 42540000,
    "display_runtime": "2",
    "question_id": "3045",
    "elapsed_time": 172,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706554711397,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 35.40860000000001,
    "status_memory": "42.5 MB",
    "memory_percentile": 52.91820000000005,
    "pretty_lang": "Java",
    "submission_id": "1160366053",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public int minimumRightShifts(List<Integer> nums) {\n        int n = nums.size();\n        // Find the index of the minimum element\n        int minIndex = 0;\n        for (int i = 1; i < n; i++) {\n            if (nums.get(i) < nums.get(minIndex)) {\n                minIndex = i;\n            }\n        }\n        \n        // Check if one rotation can make the array sorted\n        boolean isSortable = true;\n        for (int i = 0; i < n - 1; i++) {\n            if (nums.get((minIndex + i) % n) > nums.get((minIndex + i + 1) % n)) {\n                isSortable = false;\n                break;\n            }\n        }\n        \n        // If the array is sortable, return the number of shifts required to sort the array\n        if (isSortable) {\n            // The minimum number of right shifts needed is equivalent to the position of the minimum element\n            // because this will bring the array back to its sorted state if it's a rotated sorted array\n            return minIndex == 0 ? 0 : n - minIndex;\n        } else {\n            return -1; // Not sortable with right shifts\n        }\n    }\n}"
}