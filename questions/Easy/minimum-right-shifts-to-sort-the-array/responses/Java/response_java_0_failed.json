{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43044000,
    "display_runtime": "1",
    "question_id": "3045",
    "elapsed_time": 187,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,1,4]",
    "expected_output": "-1",
    "task_finish_time": 1706554665390,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 695,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1160365436",
    "input_formatted": "[2,1,4]",
    "input": "[2,1,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public int minimumRightShifts(List<Integer> nums) {\n        int n = nums.size();\n        int breakPoint = -1; // To store the index where the sorted order breaks\n        \n        // Find the break point, if exists\n        for (int i = 0; i < n - 1; i++) {\n            if (nums.get(i) > nums.get(i + 1)) {\n                // If we already found a break point, it means there are at least two breaks\n                if (breakPoint != -1) {\n                    return -1; // Cannot sort the array with right shifts\n                }\n                breakPoint = i + 1;\n            }\n        }\n        \n        // If there is no break point or the break is at the start, the array is already sorted\n        if (breakPoint == -1 || breakPoint == 1) {\n            return 0;\n        }\n        \n        // Check if the portion after the breakpoint to the end is sorted in relation to the start of the array\n        for (int i = breakPoint; i < n - 1; i++) {\n            if (nums.get(i) > nums.get(i + 1)) {\n                return -1; // Found another break in sorted order, cannot sort with right shifts\n            }\n        }\n        \n        // If the array can be sorted, the minimum right shifts required is from the break point to the end\n        return n - breakPoint;\n    }\n}"
}