{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "408 ms",
    "memory": 148420000,
    "question_id": "3045",
    "elapsed_time": 497,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706555408892,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 100,
    "status_memory": "148.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Dart",
    "submission_id": "1160374985",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumRightShifts(List<int> nums) {\n    int n = nums.length;\n    int descCount = 0; // Count of descending points\n    int minIndex = 0; // To store the index of the minimum element\n    \n    // First, find the minimum element's index as it will be our pivot for rotation\n    for (int i = 0; i < n; i++) {\n      if (nums[i] < nums[minIndex]) {\n        minIndex = i;\n      }\n    }\n\n    // Check if array requires rotation and count descending points\n    for (int i = 0; i < n; i++) {\n      if (nums[i] > nums[(i + 1) % n]) {\n        descCount++;\n      }\n    }\n\n    // If there are more than one descending points, sorting is not possible\n    if (descCount > 1) {\n      return -1;\n    }\n\n    // The number of shifts is determined by the position of the minimum element\n    // Since a sorted array rotated right will have its minimum element moved from the start\n    return (n - minIndex) % n;\n  }\n}"
}