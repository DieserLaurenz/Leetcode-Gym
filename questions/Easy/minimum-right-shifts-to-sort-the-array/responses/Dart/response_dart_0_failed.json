{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 151480000,
    "question_id": "3045",
    "elapsed_time": 645,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,4,5,1,2]",
    "expected_output": "2",
    "task_finish_time": 1706555347065,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 132,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1160374216",
    "input_formatted": "[3,4,5,1,2]",
    "input": "[3,4,5,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumRightShifts(List<int> nums) {\n    int n = nums.length;\n    int rotationPoint = -1;\n    // Check if array is already sorted or find the rotation point\n    for (int i = 0; i < n; i++) {\n      if (nums[i] > nums[(i + 1) % n]) {\n        if (rotationPoint != -1) {\n          // Found a second place where the array is \"rotated\" which means it's not sortable\n          return -1;\n        }\n        rotationPoint = (i + 1) % n;\n      }\n    }\n    // If the array is already sorted, no shifts are required.\n    if (rotationPoint == -1) return 0;\n    // To sort the array, we need to shift it n - rotationPoint times.\n    // However, we need to ensure the resulting array is sorted.\n    for (int i = 0; i < n; i++) {\n      if (nums[(rotationPoint + i) % n] > nums[(rotationPoint + i + 1) % n]) {\n        return -1; // The array cannot be sorted by right shifts.\n      }\n    }\n    // Return the number of shifts required to sort the array.\n    return rotationPoint == 0 ? 0 : n - rotationPoint;\n  }\n}"
}