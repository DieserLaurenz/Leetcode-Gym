{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72712000,
    "question_id": "3045",
    "elapsed_time": 406,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,1,4]",
    "expected_output": "-1",
    "task_finish_time": 1706563982771,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 810,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1160466004",
    "input_formatted": "[2,1,4]",
    "input": "[2,1,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_right_shifts(nums :: [integer]) :: integer\n  def minimum_right_shifts(nums) do\n    # Check if the array is already sorted\n    if Enum.sort(nums) == nums do\n      0\n    else\n      find_shifts(nums)\n    end\n  end\n\n  defp find_shifts(nums) do\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce_while({-1, 0}, fn {num, idx}, {prev_num, acc} ->\n      if prev_num > num do\n        {:halt, idx}\n      else\n        {:cont, {num, acc + 1}}\n      end\n    end)\n    |> case do\n      -1 -> -1\n      index -> if valid_shift?(nums, index), do: Enum.count(nums) - index, else: -1\n    end\n  end\n\n  defp valid_shift?(nums, index) do\n    part1 = Enum.slice(nums, 0, index)\n    part2 = Enum.slice(nums, index, Enum.count(nums) - index)\n    part1 == Enum.sort(part1) and part2 == Enum.sort(part2) and hd(part2) < hd(Enum.reverse(part1))\n  end\nend"
}