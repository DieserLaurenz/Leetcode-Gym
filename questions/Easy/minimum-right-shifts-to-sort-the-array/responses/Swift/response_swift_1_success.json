{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "20 ms",
    "memory": 15484000,
    "question_id": "3045",
    "elapsed_time": 33,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706555253641,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 53.84619999999999,
    "status_memory": "15.5 MB",
    "memory_percentile": 7.692399999999994,
    "pretty_lang": "Swift",
    "submission_id": "1160373001",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumRightShifts(_ nums: [Int]) -> Int {\n        // Check if the array is already sorted.\n        var isSorted = true\n        var shiftPoint = 0\n        \n        for i in 1..<nums.count {\n            if nums[i-1] > nums[i] {\n                // If the array is not sorted, mark the point and set isSorted to false.\n                isSorted = false\n                shiftPoint = i\n                break\n            }\n        }\n        \n        if isSorted {\n            // The array is already sorted, so return 0.\n            return 0\n        }\n        \n        // Check if the array can be sorted by a single right shift sequence.\n        for i in 1..<nums.count {\n            let prevIndex = (shiftPoint + i - 1) % nums.count\n            let currentIndex = (shiftPoint + i) % nums.count\n            if nums[prevIndex] > nums[currentIndex] {\n                // If there's another point of inversion, it's not sortable by right shifts.\n                return -1\n            }\n        }\n        \n        // Calculate the number of right shifts required to sort the array.\n        return nums.count - shiftPoint\n    }\n}"
}