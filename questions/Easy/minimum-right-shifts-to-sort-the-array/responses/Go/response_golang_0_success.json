{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2596000,
    "question_id": "3045",
    "elapsed_time": 14,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706555460679,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 100,
    "status_memory": "2.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "Go",
    "submission_id": "1160375687",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func minimumRightShifts(nums []int) int {\n    n := len(nums)\n    // Step 1: Check if the array is already sorted.\n    isSorted := true\n    for i := 1; i < n; i++ {\n        if nums[i-1] > nums[i] {\n            isSorted = false\n            break\n        }\n    }\n    if isSorted {\n        return 0\n    }\n\n    // Find the index of the smallest number.\n    minIndex := 0\n    for i := 1; i < n; i++ {\n        if nums[i] < nums[minIndex] {\n            minIndex = i\n        }\n    }\n\n    // Step 3: Verify if sorted after shifts from the minIndex.\n    for i := 1; i < n; i++ {\n        if nums[(minIndex+i)%n] < nums[(minIndex+i-1)%n] {\n            return -1 // Not possible to sort with right shifts.\n        }\n    }\n\n    // Return the number of shifts required to sort.\n    return (n - minIndex) % n\n}"
}