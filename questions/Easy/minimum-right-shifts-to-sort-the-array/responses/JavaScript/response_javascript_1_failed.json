{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50656000,
    "question_id": "3045",
    "elapsed_time": 85,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,3,5]",
    "expected_output": "0",
    "task_finish_time": 1706554991763,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 693,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1160369713",
    "input_formatted": "[1,3,5]",
    "input": "[1,3,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumRightShifts = function(nums) {\n    let discontinuities = 0;\n    let minIndex = 0; // Track the index of the smallest element\n\n    for (let i = 0; i < nums.length; i++) {\n        // Find the index of the smallest element\n        if (nums[i] < nums[minIndex]) {\n            minIndex = i;\n        }\n        // Count discontinuities\n        if (nums[i] > nums[(i + 1) % nums.length]) {\n            discontinuities++;\n        }\n    }\n\n    // If there's more than one discontinuity, sorting is impossible\n    if (discontinuities > 1) return -1;\n    // If the array is already sorted\n    if (discontinuities === 0) return 0;\n    // The array can be sorted by right shifting elements before the smallest element to the end\n    return nums.length - minIndex;\n};"
}