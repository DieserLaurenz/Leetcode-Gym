{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50628000,
    "question_id": "3045",
    "elapsed_time": 102,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,1,4]",
    "expected_output": "-1",
    "task_finish_time": 1706554932910,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 810,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1160368948",
    "input_formatted": "[2,1,4]",
    "input": "[2,1,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumRightShifts = function(nums) {\n    // Check if the array is already sorted\n    let isSorted = true;\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i-1] > nums[i]) {\n            isSorted = false;\n            break;\n        }\n    }\n    if (isSorted) return 0; // The array is already sorted\n    \n    let breakPoint = -1;\n    for (let i = 0; i < nums.length - 1; i++) {\n        // Find the index where the sequence breaks\n        if (nums[i] > nums[i + 1]) {\n            if (breakPoint !== -1) return -1; // More than one discontinuity\n            breakPoint = i + 1;\n        }\n    }\n    \n    // Check if it is a single rotation of a sorted array\n    for (let i = breakPoint; i < nums.length - 1; i++) {\n        if (nums[i] > nums[i + 1]) return -1; // Not a single rotation\n    }\n    \n    // Calculate the minimum number of shifts\n    return nums.length - breakPoint;\n};"
}