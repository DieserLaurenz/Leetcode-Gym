{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51256000,
    "question_id": "3045",
    "elapsed_time": 89,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,3,5]",
    "expected_output": "0",
    "task_finish_time": 1706555046624,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 693,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1160370421",
    "input_formatted": "[1,3,5]",
    "input": "[1,3,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumRightShifts = function(nums) {\n    // Find the index of the smallest element, assuming the array is not already sorted.\n    let minIndex = -1;\n    let maxIndex = -1;\n    for (let i = 0; i < nums.length; i++) {\n        if (minIndex === -1 || nums[i] < nums[minIndex]) {\n            minIndex = i;\n        }\n        if (maxIndex === -1 || nums[i] > nums[maxIndex]) {\n            maxIndex = i;\n        }\n    }\n\n    // Check if the array is already sorted or if it has exactly one discontinuity.\n    let isSortedOrOneDiscontinuity = true;\n    let discontinuities = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > nums[(i + 1) % nums.length]) {\n            discontinuities++;\n            if (discontinuities > 1) {\n                isSortedOrOneDiscontinuity = false;\n                break;\n            }\n        }\n    }\n\n    if (discontinuities === 0) {\n        // The array is already sorted.\n        return 0;\n    } else if (!isSortedOrOneDiscontinuity || discontinuities !== 1) {\n        // The array cannot be sorted with right shifts.\n        return -1;\n    } else {\n        // The array can be sorted by right shifts, calculate the number of shifts.\n        // The number of shifts needed is the distance of the smallest element from the end of the array.\n        if (minIndex === 0 && nums[nums.length - 1] > nums[0]) {\n            // Special case where the smallest element is at the start but does not follow the largest element.\n            return -1;\n        }\n        return nums.length - minIndex;\n    }\n};"
}