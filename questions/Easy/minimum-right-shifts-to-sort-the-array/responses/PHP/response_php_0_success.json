{
    "status_code": 10,
    "lang": "php",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 19996000,
    "question_id": "3045",
    "elapsed_time": 33,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706555155153,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 100,
    "status_memory": "20 MB",
    "memory_percentile": 100,
    "pretty_lang": "PHP",
    "submission_id": "1160371802",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumRightShifts($nums) {\n        $n = count($nums);\n        $breakPoints = 0; // To count the sequence breaks.\n        $minIndex = 0; // To keep track of the smallest element's index.\n\n        // Find the index of the smallest element.\n        for ($i = 1; $i < $n; $i++) {\n            if ($nums[$i] < $nums[$minIndex]) {\n                $minIndex = $i;\n            }\n        }\n\n        // Count breaks in the sequence.\n        for ($i = 0; $i < $n; $i++) {\n            $next = ($i + 1) % $n;\n            if ($nums[$i] > $nums[$next]) {\n                $breakPoints++;\n            }\n        }\n\n        // If there's more than one break, return -1 as it's not sortable by right shifts.\n        if ($breakPoints > 1) {\n            return -1;\n        }\n\n        // The minimum shifts required is the distance from the smallest element to the end of the array.\n        // This is because after enough shifts, the smallest element will be at the beginning, and the array will be sorted.\n        return ($n - $minIndex) % $n;\n    }\n}"
}