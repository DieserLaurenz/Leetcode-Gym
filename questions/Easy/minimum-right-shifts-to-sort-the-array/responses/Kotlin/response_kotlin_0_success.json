{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "185 ms",
    "memory": 36616000,
    "question_id": "3045",
    "elapsed_time": 289,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706555291288,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 33.33330000000001,
    "status_memory": "36.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "Kotlin",
    "submission_id": "1160373473",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumRightShifts(nums: List<Int>): Int {\n        var shiftPoint = -1 // To track the index where the shift would start\n\n        for (i in nums.indices) {\n            // Check if the current element is greater than the next element (considering wrapping)\n            if (nums[i] > nums[(i + 1) % nums.size]) {\n                if (shiftPoint != -1) {\n                    // Found more than one shift point, return -1\n                    return -1\n                }\n                // Mark the shift start point\n                shiftPoint = i\n            }\n        }\n\n        // If array is already sorted or has a valid single rotation point\n        return if (shiftPoint == -1) 0 else nums.size - (shiftPoint + 1)\n    }\n}"
}