{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "500 ms",
    "memory": 55424000,
    "question_id": "3045",
    "elapsed_time": 513,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706563407708,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 100,
    "status_memory": "55.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1160460836",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumRightShifts(nums: List[Int]): Int = {\n        // Initialize variables to track the index of deviation and the count of such deviations\n        var deviationIndex = -1\n        var deviations = 0\n        \n        // Iterate through the array to find deviations from the ascending order\n        for(i <- 1 until nums.length) {\n            if(nums(i) < nums(i - 1)) {\n                deviationIndex = i\n                deviations += 1\n            }\n        }\n        \n        // Check if the array is already sorted or if it has exactly one deviation and is sortable\n        if(deviations == 0) {\n            0 // Already sorted\n        } else if(deviations == 1 && nums.head >= nums.last) {\n            nums.length - deviationIndex // Calculate shifts needed to sort\n        } else {\n            -1 // More than one deviation or not sortable by shifts\n        }\n    }\n}"
}