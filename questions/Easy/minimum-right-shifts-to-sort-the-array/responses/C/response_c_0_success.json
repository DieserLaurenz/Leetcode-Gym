{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "7 ms",
    "memory": 5856000,
    "question_id": "3045",
    "elapsed_time": 28,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706554773038,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 33.333300000000015,
    "status_memory": "5.9 MB",
    "memory_percentile": 86.66659999999999,
    "pretty_lang": "C",
    "submission_id": "1160366932",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int minimumRightShifts(int* nums, int numsSize){\n    // Step 1: Check if the array is already sorted\n    int isSorted = 1, shiftPoint = -1;\n    for(int i = 0; i < numsSize - 1; i++){\n        if(nums[i] > nums[i + 1]){\n            isSorted = 0;\n            shiftPoint = i + 1;\n            break;\n        }\n    }\n    if(isSorted) return 0; // The array is already sorted\n\n    // Step 2 and 3: Find the point of rotation and check for sortability\n    int breakPoints = 0;\n    for(int i = 0; i < numsSize; i++){\n        if(nums[i] > nums[(i + 1) % numsSize]){\n            breakPoints++;\n            if(breakPoints > 1) return -1; // More than one breakpoint, not sortable\n        }\n    }\n\n    // Step 4: Calculate the minimum right shifts\n    // If the array is sortable, the minimum shifts required is the position of the shift point from the start\n    return (numsSize - shiftPoint) % numsSize;\n}"
}