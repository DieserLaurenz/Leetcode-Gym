{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25624000,
    "question_id": "3045",
    "elapsed_time": 23,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,4,5,1,2]",
    "expected_output": "2",
    "task_finish_time": 1706554547169,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 250,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1160363743",
    "input_formatted": "[3,4,5,1,2]",
    "input": "[3,4,5,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumRightShifts(vector<int>& nums) {\n        int n = nums.size();\n        // Variable to track if there's been a decrease in the array sequence.\n        bool foundDecrease = false;\n        // Variable to store the index of the minimum element.\n        int minIndex = 0;\n        for (int i = 0; i < n; i++) {\n            // Find the index of the minimum element.\n            if (nums[i] < nums[minIndex]) {\n                minIndex = i;\n            }\n            // Check if there is a decrease in the sequence.\n            if (i > 0 && nums[i] < nums[i - 1]) {\n                if (foundDecrease) {\n                    // If we've already found a decrease before, it means sorting is not possible.\n                    return -1;\n                }\n                foundDecrease = true;\n            }\n        }\n        \n        // If there's no decrease in the sequence, it's already sorted.\n        if (!foundDecrease) return 0;\n        \n        // If the minimum element is right after the decrease, sorting is possible.\n        // The number of shifts needed is the distance from the start of the array to the minimum element.\n        if (minIndex == 0 || nums[minIndex - 1] <= nums[n - 1]) {\n            return n - minIndex;\n        }\n        \n        // If conditions for a valid shift sort are not met, return -1.\n        return -1;\n    }\n};"
}