{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 25724000,
    "question_id": "3045",
    "elapsed_time": 25,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706554613763,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 72.27080000000001,
    "status_memory": "25.7 MB",
    "memory_percentile": 9.388699999999986,
    "pretty_lang": "C++",
    "submission_id": "1160364695",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumRightShifts(vector<int>& nums) {\n        int n = nums.size();\n        int decreaseCount = 0;\n        // This will track the index where the decrease occurs.\n        int decreasePoint = -1; \n\n        // Iterate over the array to find the point of decrease.\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] > nums[(i + 1) % n]) {\n                decreaseCount++;\n                decreasePoint = i + 1;\n            }\n        }\n\n        // If there's more than one decrease, it's not sortable by right shifts.\n        if (decreaseCount > 1) return -1;\n        \n        // If no decrease, it's already sorted.\n        if (decreaseCount == 0) return 0;\n\n        // The number of shifts is the distance of the decrease point from the start, which is also the index of the smallest element.\n        return (n - decreasePoint + n) % n;\n    }\n};"
}