{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "56 ms",
    "memory": 212356000,
    "question_id": "3045",
    "elapsed_time": 149,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706555517096,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 813,
    "total_testcases": 813,
    "runtime_percentile": 85.7143,
    "status_memory": "212.4 MB",
    "memory_percentile": 14.285799999999995,
    "pretty_lang": "Ruby",
    "submission_id": "1160376437",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_right_shifts(nums)\n    # Check if the array is already sorted\n    return 0 if nums.sort == nums\n\n    # Find the index of the single potential break point\n    break_point_index = nil\n    nums.each_with_index do |num, i|\n        if i > 0 && num < nums[i-1]\n            # If we already found a break point, return -1 for impossible case\n            return -1 if break_point_index\n            break_point_index = i\n        end\n    end\n\n    # If no break point was found (array is in descending order), return -1\n    return -1 unless break_point_index\n\n    # Check if the array can be sorted by a single right shift sequence\n    # This means the part before the break point and the part after it, when put together, forms a sorted array\n    sorted_array = nums[break_point_index..-1] + nums[0...break_point_index]\n    return -1 unless sorted_array.sort == sorted_array\n\n    # The number of shifts required is the length of the array minus the break point index\n    nums.length - break_point_index\nend"
}