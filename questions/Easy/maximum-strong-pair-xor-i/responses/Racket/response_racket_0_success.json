{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "201 ms",
    "memory": 101188000,
    "question_id": "3193",
    "elapsed_time": 264,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706487665503,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 860,
    "total_testcases": 860,
    "runtime_percentile": 100,
    "status_memory": "101.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1159618547",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-strong-pair-xor nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let loop ((nums nums) (max-xor 0))\n    (cond\n      [(null? nums) max-xor]\n      [else\n       (let inner-loop ((rest (cdr nums)) (current (car nums)) (current-max-xor max-xor))\n         (cond\n           [(null? rest) (loop (cdr nums) current-max-xor)]\n           [else\n            (let ((next (car rest)))\n              (when (and (<= (abs (- current next)) (min current next))\n                         (> (bitwise-xor current next) current-max-xor))\n                (set! current-max-xor (bitwise-xor current next)))\n              (inner-loop (cdr rest) current current-max-xor))]))])))"
}