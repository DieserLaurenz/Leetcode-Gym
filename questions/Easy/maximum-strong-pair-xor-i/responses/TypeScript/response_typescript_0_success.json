{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "74 ms",
    "memory": 52036000,
    "question_id": "3193",
    "elapsed_time": 85,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706483264669,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 860,
    "total_testcases": 860,
    "runtime_percentile": 31.428700000000006,
    "status_memory": "52 MB",
    "memory_percentile": 11.428699999999987,
    "pretty_lang": "TypeScript",
    "submission_id": "1159587695",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function maximumStrongPairXor(nums: number[]): number {\n    let maxResult = 0;\n    // Sort the array to ensure that min(x, y) is always x when iterating in order.\n    nums.sort((a, b) => a - b);\n\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = i; j < nums.length; j++) {\n            // Check if the pair (i, j) is a strong pair.\n            if (Math.abs(nums[i] - nums[j]) <= nums[i]) {\n                // Calculate the XOR of the strong pair and update maxResult if necessary.\n                maxResult = Math.max(maxResult, nums[i] ^ nums[j]);\n            }\n        }\n    }\n\n    return maxResult;\n};"
}