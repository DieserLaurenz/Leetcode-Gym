{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "387 ms",
    "memory": 72300000,
    "question_id": "3193",
    "elapsed_time": 480,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706489107509,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 860,
    "total_testcases": 860,
    "runtime_percentile": 100,
    "status_memory": "72.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1159629704",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_strong_pair_xor(nums :: [integer]) :: integer\n  def maximum_strong_pair_xor(nums) do\n    nums\n    |> Enum.flat_map(fn x ->\n      Enum.filter(nums, fn y -> \n        abs(x - y) <= min(x, y)\n      end)\n      |> Enum.map(fn y -> Bitwise.bxor(x, y) end)\n    end)\n    |> Enum.max()\n  end\nend"
}