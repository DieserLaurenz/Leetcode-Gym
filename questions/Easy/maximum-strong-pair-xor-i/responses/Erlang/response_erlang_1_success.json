{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "266 ms",
    "memory": 59700000,
    "question_id": "3193",
    "elapsed_time": 1332,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706488687981,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 860,
    "total_testcases": 860,
    "runtime_percentile": 100,
    "status_memory": "59.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1159626502",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec maximum_strong_pair_xor(Nums :: [integer()]) -> integer().\nmaximum_strong_pair_xor(Nums) ->\n    MaxXor = find_max_xor(Nums, Nums, 0),\n    MaxXor.\n\nfind_max_xor([], _, Max) -> Max;\nfind_max_xor([H|T], Nums, Max) ->\n    NewMax = find_max_xor_for_head(H, Nums, Max),\n    find_max_xor(T, Nums, NewMax).\n\nfind_max_xor_for_head(_, [], Max) -> Max;\nfind_max_xor_for_head(H, [H1|T1], Max) ->\n    % Check if it's a strong pair\n    StrongPairCondition = abs(H - H1) =< min(H, H1),\n    NewMax = if\n        StrongPairCondition ->\n            XOR = H bxor H1,\n            max(XOR, Max);\n        true ->\n            Max\n    end,\n    find_max_xor_for_head(H, T1, NewMax)."
}