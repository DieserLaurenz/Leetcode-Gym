{
    "acRate": 33.16615867738062,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2614",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Prime In Diagonal",
    "titleSlug": "prime-in-diagonal",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Matrix",
            "id": "VG9waWNUYWdOb2RlOjYxMDUz",
            "slug": "matrix"
        },
        {
            "name": "Number Theory",
            "id": "VG9waWNUYWdOb2RlOjYxMDY3",
            "slug": "number-theory"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int diagonalPrime(vector<vector<int>>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int diagonalPrime(int[][] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def diagonalPrime(self, nums):         \"\"\"         :type nums: List[List[int]]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def diagonalPrime(self, nums: List[List[int]]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int diagonalPrime(int** nums, int numsSize, int* numsColSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int DiagonalPrime(int[][] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} nums  * @return {number}  */ var diagonalPrime = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function diagonalPrime(nums: number[][]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $nums      * @return Integer      */     function diagonalPrime($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func diagonalPrime(_ nums: [[Int]]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun diagonalPrime(nums: Array<IntArray>): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int diagonalPrime(List<List<int>> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func diagonalPrime(nums [][]int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} nums # @return {Integer} def diagonal_prime(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def diagonalPrime(nums: Array[Array[Int]]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn diagonal_prime(nums: Vec<Vec<i32>>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (diagonal-prime nums)   (-> (listof (listof exact-integer?)) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec diagonal_prime(Nums :: [[integer()]]) -> integer(). diagonal_prime(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec diagonal_prime(nums :: [[integer]]) :: integer   def diagonal_prime(nums) do    end end"
        }
    ],
    "content": "You are given a 0-indexed two-dimensional integer array nums. Return the largest prime number that lies on at least one of the diagonals of nums. In case, no prime is present on any of the diagonals, return 0. Note that:  An integer is prime if it is greater than 1 and has no positive integer divisors other than 1 and itself. An integer val is on one of the diagonals of nums if there exists an integer i for which nums[i][i] = val or an i for which nums[i][nums.length - i - 1] = val.   In the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].  Example 1:  Input: nums = [[1,2,3],[5,6,7],[9,10,11]] Output: 11 Explanation: The numbers 1, 3, 6, 9, and 11 are the only numbers present on at least one of the diagonals. Since 11 is the largest prime, we return 11.  Example 2:  Input: nums = [[1,2,3],[5,17,7],[9,11,10]] Output: 17 Explanation: The numbers 1, 3, 9, 10, and 17 are all present on at least one of the diagonals. 17 is the largest prime, so we return 17.   Constraints:  1 <= nums.length <= 300 nums.length == numsi.length 1 <= nums[i][j]<= 4*106  "
}