{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "103 ms",
    "memory": 15404000,
    "question_id": "3206",
    "elapsed_time": 123,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706234450137,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1207,
    "total_testcases": 1207,
    "runtime_percentile": 39.09749999999999,
    "status_memory": "15.4 MB",
    "memory_percentile": 33.834600000000016,
    "pretty_lang": "Swift",
    "submission_id": "1156979309",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findIntersectionValues(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n        let setNums2 = Set(nums2)\n\n        let countNums1InNums2 = nums1.filter { setNums2.contains($0) }.count\n\n        let setNums1 = Set(nums1)\n        let countNums2InNums1 = nums2.filter { setNums1.contains($0) }.count\n\n        return [countNums1InNums2, countNums2InNums1]\n    }\n}"
}