{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 215132000,
    "question_id": "3206",
    "elapsed_time": 251,
    "compare_result
    "code_output": "[2,2]",
    "std_output": "",
    "last_testcase": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "expected_output": "[3,4]",
    "task_finish_time": 1706238772243,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 1207,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1157012282",
    "input_formatted": "[4,3,2,3,1], [2,2,5,2,3,6]",
    "input": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer[]}\ndef find_intersection_values(nums1, nums2)\n    nums2_set = nums2.to_set\n    count1 = nums1.filter { |num| nums2_set.include?(num) }.uniq.count\n\n    nums1_set = nums1.to_set\n    count2 = nums2.filter { |num| nums1_set.include?(num) }.uniq.count\n\n    [count1, count2]\nend"
}