{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "252 ms",
    "memory": 126544000,
    "question_id": "3206",
    "elapsed_time": 405,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706241410363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1207,
    "total_testcases": 1207,
    "runtime_percentile": 100,
    "status_memory": "126.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1157035539",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (find-intersection-values nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  (let ([set1 (list->set nums1)]\n        [set2 (list->set nums2)])\n    (list (count (lambda (x) (set-member? set2 x)) nums1)\n          (count (lambda (x) (set-member? set1 x)) nums2))))"
}