{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "472 ms",
    "memory": 73064000,
    "question_id": "3206",
    "elapsed_time": 629,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706244168808,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1207,
    "total_testcases": 1207,
    "runtime_percentile": 28.571499999999993,
    "status_memory": "73.1 MB",
    "memory_percentile": 28.571499999999993,
    "pretty_lang": "Elixir",
    "submission_id": "1157062734",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_intersection_values(nums1 :: [integer], nums2 :: [integer]) :: [integer]\n  def find_intersection_values(nums1, nums2) do\n    set2 = MapSet.new(nums2)\n\n    count1 = Enum.count(nums1, &MapSet.member?(set2, &1))\n    \n    set1 = MapSet.new(nums1)\n    \n    count2 = Enum.count(nums2, &MapSet.member?(set1, &1))\n\n    [count1, count2]\n  end\nend"
}