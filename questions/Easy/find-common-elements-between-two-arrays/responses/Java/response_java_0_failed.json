{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45760000,
    "display_runtime": "8",
    "question_id": "3206",
    "elapsed_time": 228,
    "compare_result
    "code_output": "[2,2]",
    "std_output": "",
    "last_testcase": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "expected_output": "[3,4]",
    "task_finish_time": 1706225630398,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 1207,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1156916090",
    "input_formatted": "[4,3,2,3,1], [2,2,5,2,3,6]",
    "input": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.HashSet;\nimport java.util.Set;\n\nclass Solution {\n    public int[] findIntersectionValues(int[] nums1, int[] nums2) {\n        // Convert arrays to sets for faster lookup and to remove duplicates\n        Set<Integer> set1 = new HashSet<>();\n        for (int num : nums1) {\n            set1.add(num);\n        }\n\n        Set<Integer> set2 = new HashSet<>();\n        for (int num : nums2) {\n            set2.add(num);\n        }\n\n        // Count how many elements of set1 are present in set2\n        int count1 = 0;\n        for (int num : set1) {\n            if (set2.contains(num)) {\n                count1++;\n            }\n        }\n\n        // Count how many elements of set2 are present in set1\n        int count2 = 0;\n        for (int num : set2) {\n            if (set1.contains(num)) {\n                count2++;\n            }\n        }\n\n        // Return the counts in an array\n        return new int[]{count1, count2};\n    }\n}"
}