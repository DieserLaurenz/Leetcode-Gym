{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "6 ms",
    "memory": 45560000,
    "display_runtime": "6",
    "question_id": "3206",
    "elapsed_time": 200,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706226230904,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1207,
    "total_testcases": 1207,
    "runtime_percentile": 70.08970000000001,
    "status_memory": "45.6 MB",
    "memory_percentile": 13.616300000000003,
    "pretty_lang": "Java",
    "submission_id": "1156920344",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int[] findIntersectionValues(int[] nums1, int[] nums2) {\n        int count1 = 0;\n        int count2 = 0;\n\n        // Create a set from nums2 for efficient lookups\n        Set<Integer> set2 = new HashSet<>();\n        for (int num : nums2) {\n            set2.add(num);\n        }\n\n        // Count indices in nums1 with values in nums2\n        for (int num : nums1) {\n            if (set2.contains(num)) {\n                count1++;\n            }\n        }\n\n        // Create a set from nums1 for efficient lookups\n        Set<Integer> set1 = new HashSet<>();\n        for (int num : nums1) {\n            set1.add(num);\n        }\n\n        // Count indices in nums2 with values in nums1\n        for (int num : nums2) {\n            if (set1.contains(num)) {\n                count2++;\n            }\n        }\n\n        // Return the result\n        return new int[]{count1, count2};\n    }\n}"
}