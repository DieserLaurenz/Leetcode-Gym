{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "17 ms",
    "memory": 6428000,
    "question_id": "3206",
    "elapsed_time": 35,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706226708327,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1207,
    "total_testcases": 1207,
    "runtime_percentile": 85.94610000000003,
    "status_memory": "6.4 MB",
    "memory_percentile": 99.4595,
    "pretty_lang": "C",
    "submission_id": "1156923772",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n#include <stdbool.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findIntersectionValues(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize) {\n    // Create two boolean arrays to represent sets\n    bool set1[101] = {false};\n    bool set2[101] = {false};\n\n    // Populate the sets with elements from nums1 and nums2\n    for (int i = 0; i < nums1Size; i++) {\n        set1[nums1[i]] = true;\n    }\n    for (int i = 0; i < nums2Size; i++) {\n        set2[nums2[i]] = true;\n    }\n\n    // Count elements in nums1 that are present in set2, and vice versa\n    int count1 = 0, count2 = 0;\n    for (int i = 0; i < nums1Size; i++) {\n        if (set2[nums1[i]]) {\n            count1++;\n        }\n    }\n    for (int i = 0; i < nums2Size; i++) {\n        if (set1[nums2[i]]) {\n            count2++;\n        }\n    }\n\n    // Allocate memory for the return array and populate it\n    int* result = malloc(2 * sizeof(int));\n    result[0] = count1;\n    result[1] = count2;\n    *returnSize = 2;\n\n    return result;\n}"
}