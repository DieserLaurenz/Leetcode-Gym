{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60616000,
    "question_id": "3206",
    "elapsed_time": 1477,
    "compare_result
    "code_output": "[2,2]",
    "std_output": "",
    "last_testcase": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "expected_output": "[3,4]",
    "task_finish_time": 1706242493180,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 1207,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1157045792",
    "input_formatted": "[4,3,2,3,1], [2,2,5,2,3,6]",
    "input": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_intersection_values(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\nfind_intersection_values(Nums1, Nums2) ->\n    UniqueNums1 = lists:usort(Nums1),\n    UniqueNums2 = lists:usort(Nums2),\n    Count1 = count_intersection(UniqueNums1, Nums2),\n    Count2 = count_intersection(UniqueNums2, Nums1),\n    [Count1, Count2].\n\ncount_intersection([], _) -> 0;\ncount_intersection([H|T], List) ->\n    case lists:member(H, List) of\n        true -> 1 + count_intersection(T, List);\n        false -> count_intersection(T, List)\n    end."
}