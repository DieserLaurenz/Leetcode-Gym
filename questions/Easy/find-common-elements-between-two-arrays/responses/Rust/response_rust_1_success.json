{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 2096000,
    "question_id": "3206",
    "elapsed_time": 16,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706240333147,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1207,
    "total_testcases": 1207,
    "runtime_percentile": 63.529399999999995,
    "status_memory": "2.1 MB",
    "memory_percentile": 78.8235,
    "pretty_lang": "Rust",
    "submission_id": "1157025710",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "use std::collections::HashSet;\n\nimpl Solution {\n    pub fn find_intersection_values(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        let set2: HashSet<i32> = nums2.iter().cloned().collect();\n\n        let count1 = nums1.iter().filter(|&&n| set2.contains(&n)).count() as i32;\n\n        let set1: HashSet<i32> = nums1.iter().cloned().collect();\n        let count2 = nums2.iter().filter(|&&n| set1.contains(&n)).count() as i32;\n\n        vec![count1, count2]\n    }\n}"
}