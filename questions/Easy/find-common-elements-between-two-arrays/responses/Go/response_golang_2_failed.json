{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6988000,
    "question_id": "3206",
    "elapsed_time": 37,
    "compare_result": "0100000000010000010110000001000001000000001000001000100000000000001011100000000100000010100100000000010000000000000110000000110011000000000100000000001010001000010000000000000000001000100000000010000001011000000000011000010101000000000000000000100110000000000000001000000000000001000000000001000001000000000100010000000000000001000110100000000010000000000000000000011000000000000011001010000001001110000000000000001000001000000000000010000000000110000000000000100000000000000000100000001001010000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[2,2]",
    "std_output": "",
    "last_testcase": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "expected_output": "[3,4]",
    "task_finish_time": 1706237090110,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 1207,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1156998611",
    "input_formatted": "[4,3,2,3,1], [2,2,5,2,3,6]",
    "input": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func findIntersectionValues(nums1 []int, nums2 []int) []int {\n    // Convert nums2 into a map for constant-time lookups\n    nums2Map := make(map[int]bool)\n    for _, num := range nums2 {\n        nums2Map[num] = true\n    }\n\n    // Count unique elements of nums1 present in nums2\n    count1 := 0\n    checkedNums1 := make(map[int]bool)\n    for _, num := range nums1 {\n        if !checkedNums1[num] && nums2Map[num] {\n            count1++\n            checkedNums1[num] = true\n        }\n    }\n\n    // Convert nums1 into a map for constant-time lookups\n    nums1Map := make(map[int]bool)\n    for _, num := range nums1 {\n        nums1Map[num] = true\n    }\n\n    // Count unique elements of nums2 present in nums1\n    count2 := 0\n    checkedNums2 := make(map[int]bool)\n    for _, num := range nums2 {\n        if !checkedNums2[num] && nums1Map[num] {\n            count2++\n            checkedNums2[num] = true\n        }\n    }\n\n    // Return the results\n    return []int{count1, count2}\n}"
}