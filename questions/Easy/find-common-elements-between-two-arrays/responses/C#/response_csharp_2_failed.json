{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59356000,
    "question_id": "3206",
    "elapsed_time": 268,
    "compare_result
    "code_output": "[2,2]",
    "std_output": "",
    "last_testcase": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "expected_output": "[3,4]",
    "task_finish_time": 1706228391463,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 1207,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1156935789",
    "input_formatted": "[4,3,2,3,1], [2,2,5,2,3,6]",
    "input": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] FindIntersectionValues(int[] nums1, int[] nums2) {\n        HashSet<int> setNums1 = new HashSet<int>(nums1);\n        HashSet<int> setNums2 = new HashSet<int>(nums2);\n\n        int countInNums1 = 0;\n        foreach (int num in nums1) {\n            if (setNums2.Contains(num)) {\n                countInNums1++;\n                setNums2.Remove(num); // Remove to avoid counting duplicates\n            }\n        }\n\n        setNums2 = new HashSet<int>(nums2); // Reset the HashSet for nums2\n\n        int countInNums2 = 0;\n        foreach (int num in nums2) {\n            if (setNums1.Contains(num)) {\n                countInNums2++;\n                setNums1.Remove(num); // Remove to avoid counting duplicates\n            }\n        }\n\n        return new int[] { countInNums1, countInNums2 };\n    }\n}"
}