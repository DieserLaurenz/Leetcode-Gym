{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54576000,
    "question_id": "3206",
    "elapsed_time": 121,
    "compare_result
    "code_output": "[2,1]",
    "std_output": "",
    "last_testcase": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "expected_output": "[3,4]",
    "task_finish_time": 1706229470159,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1207,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1156943275",
    "input_formatted": "[4,3,2,3,1], [2,2,5,2,3,6]",
    "input": "[4,3,2,3,1]\n[2,2,5,2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number[]}\n */\nvar findIntersectionValues = function(nums1, nums2) {\n    let count1 = 0;\n    nums1.forEach(num => {\n        if (nums2.includes(num)) {\n            count1++;\n            nums2[nums2.indexOf(num)] = null; // Mark the found number as null to avoid recounting\n        }\n    });\n\n    // Reset nums2 for the second count\n    nums2 = nums2.filter(num => num !== null);\n\n    let count2 = 0;\n    nums2.forEach(num => {\n        if (nums1.includes(num)) {\n            count2++;\n            nums1[nums1.indexOf(num)] = null; // Mark the found number as null to avoid recounting\n        }\n    });\n\n    return [count1, count2];\n};"
}