{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "362 ms",
    "memory": 59796000,
    "question_id": "3263",
    "elapsed_time": 1652,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706190350435,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 988,
    "total_testcases": 988,
    "runtime_percentile": 100,
    "status_memory": "59.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1156505532",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec minimum_cost(Nums :: [integer()]) -> integer().\nminimum_cost(Nums) ->\n    N = length(Nums),\n    MinCost = fun MinCost(I, J, CurrentMin) when I < N - 1, J < N ->\n                  SubArray1 = lists:nth(1, Nums),\n                  SubArray2 = lists:nth(I + 1, Nums),\n                  SubArray3 = lists:nth(J + 1, Nums),\n                  Cost = SubArray1 + SubArray2 + SubArray3,\n                  NewMin = min(Cost, CurrentMin),\n                  if I + 1 < J -> MinCost(I + 1, J, NewMin);\n                     true -> MinCost(1, J + 1, NewMin)\n                  end;\n              MinCost(_, _, CurrentMin) -> CurrentMin\n    end,\n    MinCost(1, 2, hd(Nums) + hd(tl(Nums)) + hd(tl(tl(Nums))))."
}