{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72140000,
    "question_id": "3263",
    "elapsed_time": 654,
    "compare_result
    "code_output": "1000000",
    "std_output": "",
    "last_testcase": "[1,2,3,12]",
    "expected_output": "6",
    "task_finish_time": 1706192090939,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1156526363",
    "input_formatted": "[1,2,3,12]",
    "input": "[1,2,3,12]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer]) :: integer\n  def minimum_cost(nums) do\n    n = length(nums)\n    min_cost = 1_000_000\n\n    # Iterate to find the first split point\n    for i <- 1..(n - 2) do\n      # Iterate to find the second split point\n      for j <- (i + 1)..(n - 1) do\n        # Correctly calculate the cost\n        cost = Enum.at(nums, i - 1) + Enum.at(nums, j - 1) + Enum.at(nums, n - 1)\n\n        # Update the minimum cost\n        if cost < min_cost do\n          min_cost = cost\n        end\n      end\n    end\n\n    min_cost\n  end\nend"
}