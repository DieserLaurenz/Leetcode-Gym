{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212544000,
    "question_id": "3263",
    "elapsed_time": 236,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,12]",
    "expected_output": "6",
    "task_finish_time": 1706183988736,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 721,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1156440230",
    "input_formatted": "[1,2,3,12]",
    "input": "[1,2,3,12]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_cost(nums)\n    n = nums.length\n    # dp[i][j] represents the minimum cost to split the array into j subarrays up to index i\n    dp = Array.new(n) { Array.new(4, Float::INFINITY) }\n    dp[0][1] = nums[0] # Base case: minimum cost to split the first element into 1 subarray\n\n    # Iterate over the array\n    (1...n).each do |i|\n        # Update the cost for splitting into 1, 2, or 3 subarrays\n        (1..3).each do |j|\n            # Case 1: Extend the current subarray\n            dp[i][j] = dp[i - 1][j]\n\n            # Case 2: Start a new subarray\n            if i > j - 1\n                dp[i][j] = [dp[i][j], dp[i - 1][j - 1] + nums[i]].min\n            end\n        end\n    end\n\n    # The answer is the minimum cost to split the entire array into 3 subarrays\n    dp[n - 1][3]\nend"
}