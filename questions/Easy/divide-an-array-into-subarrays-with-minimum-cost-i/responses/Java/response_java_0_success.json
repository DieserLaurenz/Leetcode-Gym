{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 44328000,
    "display_runtime": "4",
    "question_id": "3263",
    "elapsed_time": 152,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706178047518,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 988,
    "total_testcases": 988,
    "runtime_percentile": 10.503400000000001,
    "status_memory": "44.3 MB",
    "memory_percentile": 29.30610000000001,
    "pretty_lang": "Java",
    "submission_id": "1156384933",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumCost(int[] nums) {\n        int n = nums.length;\n        int[][] dp = new int[n + 1][4];\n        final int MAX = Integer.MAX_VALUE / 2; // To avoid integer overflow\n\n        // Initialize dp array with maximum values\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j < 4; j++) {\n                dp[i][j] = MAX;\n            }\n        }\n\n        dp[0][0] = 0; // Base case: cost of forming 0 subarrays from 0 elements\n\n        // Fill the dp array\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= 3; j++) {\n                int sum = 0;\n                for (int k = i; k >= j; k--) {\n                    sum += nums[k - 1];\n                    dp[i][j] = Math.min(dp[i][j], dp[k - 1][j - 1] + nums[k - 1]);\n                }\n            }\n        }\n\n        return dp[n][3]; // Minimum cost of forming 3 subarrays from n elements\n    }\n}"
}