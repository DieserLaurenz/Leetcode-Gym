{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "78 ms",
    "memory": 43812000,
    "question_id": "3263",
    "elapsed_time": 204,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706178862366,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 988,
    "total_testcases": 988,
    "runtime_percentile": 18.400000000000016,
    "status_memory": "43.8 MB",
    "memory_percentile": 27.199999999999992,
    "pretty_lang": "C#",
    "submission_id": "1156392900",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumCost(int[] nums) {\n        int n = nums.Length;\n        int minCost = int.MaxValue;\n\n        // Iterate through the array to find all possible ways to split into three subarrays\n        for (int i = 1; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                // Calculate the cost of the current split\n                int cost = nums[0] + nums[i] + nums[j];\n                // Update minCost if the current cost is lower\n                minCost = Math.Min(minCost, cost);\n            }\n        }\n\n        return minCost;\n    }\n}"
}