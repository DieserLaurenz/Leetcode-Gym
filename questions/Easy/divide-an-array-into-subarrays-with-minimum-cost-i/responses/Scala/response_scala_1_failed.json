{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56388000,
    "question_id": "3263",
    "elapsed_time": 796,
    "compare_result
    "code_output": "-2147483632",
    "std_output": "",
    "last_testcase": "[1,2,3,12]",
    "expected_output": "6",
    "task_finish_time": 1706185974076,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1156458806",
    "input_formatted": "[1,2,3,12]",
    "input": "[1,2,3,12]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(nums: Array[Int]): Int = {\n        val n = nums.length\n        val dp = Array.fill(n, 4)(Int.MaxValue)\n\n        // Initialize the first element of each subarray count to the first element of nums,\n        // as the minimum cost for the first element is always its value\n        for (j <- 1 to 3) dp(0)(j) = nums(0)\n\n        // Loop for each subarray count from 1 to 3\n        for (j <- 1 to 3) {\n            // Start from the second element as the first element has already been initialized\n            for (i <- 1 until n) {\n                var minCost = Int.MaxValue\n                // Consider all possible previous ends of the subarray\n                for (k <- 0 until i) {\n                    minCost = minCost min (dp(k)(j - 1) + nums(i))\n                }\n                dp(i)(j) = minCost\n            }\n        }\n\n        // The answer is in dp(n-1)(3)\n        dp(n - 1)(3)\n    }\n}"
}