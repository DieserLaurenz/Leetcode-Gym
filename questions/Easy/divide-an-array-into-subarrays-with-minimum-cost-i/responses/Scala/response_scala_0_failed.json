{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 18: java.lang.ArrayIndexOutOfBoundsException: -1 (at $anonfun$minimumCost$5)",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: -1\nLine 18: Solution$.$anonfun$minimumCost$5 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 17: Solution$.$anonfun$minimumCost$4 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 15: Solution$.$anonfun$minimumCost$2 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 10: Solution$.minimumCost (solution.scala)\nLine 32: Main$.__helper__ (solution.scala)\nLine 46: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 54512000,
    "question_id": "3263",
    "elapsed_time": 554,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,12]",
    "expected_output": "6",
    "task_finish_time": 1706185253402,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1156451877",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(nums: Array[Int]): Int = {\n        val n = nums.length\n        val dp = Array.ofDim[Int](n, 4)\n\n        // Initialize the first column (0 subarrays) to 0 as there is no cost\n        for (i <- 0 until n) dp(i)(0) = 0\n\n        // Loop for each subarray count from 1 to 3\n        for (j <- 1 to 3) {\n            // Set initial value for the first j-1 elements to Integer.MAX_VALUE as it's not possible to form j subarrays\n            for (i <- 0 until j-1) dp(i)(j) = Int.MaxValue\n\n            // Start from the j-1 element as that's the first position where j subarrays can be formed\n            for (i <- j-1 until n) {\n                dp(i)(j) = Int.MaxValue\n                for (k <- j-2 to i) {\n                    if (dp(k)(j-1) != Int.MaxValue) {\n                        dp(i)(j) = dp(i)(j) min (dp(k)(j-1) + nums(k+1))\n                    }\n                }\n            }\n        }\n\n        // The answer is in dp(n-1)(3)\n        dp(n-1)(3)\n    }\n}"
}