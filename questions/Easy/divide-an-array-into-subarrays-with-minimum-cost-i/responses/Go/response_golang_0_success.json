{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "5 ms",
    "memory": 4196000,
    "question_id": "3263",
    "elapsed_time": 18,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706183450984,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 988,
    "total_testcases": 988,
    "runtime_percentile": 39.560500000000005,
    "status_memory": "4.2 MB",
    "memory_percentile": 6.593399999999999,
    "pretty_lang": "Go",
    "submission_id": "1156435332",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func minimumCost(nums []int) int {\n    n := len(nums)\n    // dp[i][j] represents the minimum cost to split the first i elements into j subarrays\n    dp := make([][]int, n+1)\n    for i := range dp {\n        dp[i] = make([]int, 4)\n        for j := range dp[i] {\n            dp[i][j] = 10001 // Initialize with a large number\n        }\n    }\n\n    dp[0][0] = 0 // Base case: no cost to split 0 elements into 0 subarrays\n\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= 3; j++ {\n            sum := 0\n            for k := i; k >= j; k-- {\n                sum += nums[k-1]\n                dp[i][j] = min(dp[i][j], dp[k-1][j-1] + nums[k-1])\n            }\n        }\n    }\n\n    return dp[n][3]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}