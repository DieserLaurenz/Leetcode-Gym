{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "108 ms",
    "memory": 55712000,
    "question_id": "3263",
    "elapsed_time": 175,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706179146683,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 988,
    "total_testcases": 988,
    "runtime_percentile": 5.128300000000031,
    "status_memory": "55.7 MB",
    "memory_percentile": 7.692400000000035,
    "pretty_lang": "TypeScript",
    "submission_id": "1156395634",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function minimumCost(nums: number[]): number {\n    const n = nums.length;\n    // dp[i][j] will store the minimum cost of dividing the array \n    // into j subarrays from the first i elements.\n    let dp: number[][] = Array.from({ length: n + 1 }, () => Array(4).fill(Infinity));\n    \n    dp[0][0] = 0; // Base case: no cost for 0 elements and 0 subarrays\n\n    // Iterate over each element in the array\n    for (let i = 1; i <= n; i++) {\n        // At each position, we try to form 1 to 3 subarrays\n        for (let j = 1; j <= 3; j++) {\n            // We also check every possible previous position to split the subarray\n            for (let k = j - 1; k < i; k++) {\n                // Update the dp value with the minimum cost\n                dp[i][j] = Math.min(dp[i][j], dp[k][j - 1] + nums[k]);\n            }\n        }\n    }\n\n    // The answer will be the minimum cost to divide the entire array into 3 subarrays\n    return dp[n][3];\n}"
}