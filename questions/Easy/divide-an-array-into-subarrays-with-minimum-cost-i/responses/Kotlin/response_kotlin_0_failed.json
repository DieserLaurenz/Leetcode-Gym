{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38076000,
    "question_id": "3263",
    "elapsed_time": 486,
    "compare_result
    "code_output": "-2147483632",
    "std_output": "",
    "last_testcase": "[1,2,3,12]",
    "expected_output": "6",
    "task_finish_time": 1706181711933,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1156419499",
    "input_formatted": "[1,2,3,12]",
    "input": "[1,2,3,12]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumCost(nums: IntArray): Int {\n        val n = nums.size\n        // dp[i][j] represents the minimum cost to split the first i numbers into j subarrays\n        val dp = Array(n + 1) { IntArray(4) { Int.MAX_VALUE } }\n\n        // Base case: 0 cost to split 0 numbers\n        for (j in 0..3) dp[0][j] = 0\n\n        // Iterate over the array\n        for (i in 1..n) {\n            for (j in 1..3) {\n                var sum = 0\n                // Trying to find the best place to split the array into j parts\n                for (k in i downTo 1) {\n                    sum += nums[k - 1]\n                    dp[i][j] = minOf(dp[i][j], dp[k - 1][j - 1] + nums[k - 1])\n                }\n            }\n        }\n\n        // The result is in dp[n][3] as we want to split the whole array (n elements) into 3 parts\n        return dp[n][3]\n    }\n}"
}