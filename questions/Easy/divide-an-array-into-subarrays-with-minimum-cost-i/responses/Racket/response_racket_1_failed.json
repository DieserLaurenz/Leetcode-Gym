{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "Line 1: Char 19: minimum-cost: broke its own contract",
    "full_runtime_error": "Line 1: Char 19: minimum-cost: broke its own contract\n  promised: exact-integer?\n  produced: 6.0\n  in: the range of\n      (-> (listof exact-integer?) exact-integer?)\n  contract from: (function minimum-cost)\n  blaming: (function minimum-cost)\n   (assuming the contract is correct)\n  context...:\n   /usr/share/racket/collects/racket/contract/private/blame.rkt:346:0: raise-blame-error\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:31:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100984000,
    "question_id": "3263",
    "elapsed_time": 295,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,12]",
    "expected_output": "6",
    "task_finish_time": 1706188611439,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1156485706",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-cost nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  (define (cost-of-first-element sublist)\n    (if (null? sublist)\n        0\n        (car sublist)))\n\n  (define (min-cost-helper nums)\n    (let ([n (length nums)])\n      (let loop ([i 1] [min-cost +inf.0])\n        (if (= i n)\n            min-cost\n            (loop (+ i 1) \n                  (let inner-loop ([j (+ i 1)] [current-min-cost min-cost])\n                    (if (= j n)\n                        current-min-cost\n                        (let ([first-subarray (take nums i)]\n                              [second-subarray (take (drop nums i) (- j i))]\n                              [third-subarray (drop nums j)])\n                          (let ([current-cost (+ (cost-of-first-element first-subarray)\n                                                 (cost-of-first-element second-subarray)\n                                                 (cost-of-first-element third-subarray))])\n                            (inner-loop (+ j 1) (min current-cost current-min-cost)))))))))))\n\n  (min-cost-helper nums))"
}