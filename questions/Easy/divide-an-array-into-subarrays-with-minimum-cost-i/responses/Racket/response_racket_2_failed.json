{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126564000,
    "question_id": "3263",
    "elapsed_time": 395,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[5,4,3]",
    "expected_output": "12",
    "task_finish_time": 1706189270550,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 411,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1156493015",
    "input_formatted": "[5,4,3]",
    "input": "[5,4,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-cost nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  (define (cost-of-first-element sublist)\n    (if (null? sublist)\n        0\n        (car sublist)))\n\n  (define (min-cost-helper nums)\n    (let ([n (length nums)])\n      (let loop ([i 1] [min-cost (max-value)])\n        (if (= i n)\n            min-cost\n            (loop (+ i 1) \n                  (let inner-loop ([j (+ i 1)] [current-min-cost min-cost])\n                    (if (= j n)\n                        current-min-cost\n                        (let ([first-subarray (take nums i)]\n                              [second-subarray (take (drop nums i) (- j i))]\n                              [third-subarray (drop nums j)])\n                          (let ([current-cost (+ (cost-of-first-element first-subarray)\n                                                 (cost-of-first-element second-subarray)\n                                                 (cost-of-first-element third-subarray))])\n                            (inner-loop (+ j 1) (min current-cost current-min-cost)))))))))))\n\n  (define (max-value)\n    (apply max (map abs nums)))\n\n  (min-cost-helper nums))"
}