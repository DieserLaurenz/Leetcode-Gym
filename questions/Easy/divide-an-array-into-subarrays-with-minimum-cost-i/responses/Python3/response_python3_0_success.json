{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "224 ms",
    "memory": 16448000,
    "question_id": "3263",
    "elapsed_time": 255,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708703595994,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 988,
    "total_testcases": 988,
    "runtime_percentile": 5.045600000000019,
    "status_memory": "16.4 MB",
    "memory_percentile": 92.4983,
    "pretty_lang": "Python3",
    "submission_id": "1184095382",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minimumCost(self, nums: List[int]) -> int:\n        n = len(nums)\n        prefix_sum = [0] * (n+1)\n        for i in range(1, n+1):\n            prefix_sum[i] = prefix_sum[i-1] + nums[i-1]\n        \n        # dp[i][j] represents the minimum cost to divide the first i elements into j subarrays\n        dp = [[float('inf')] * 4 for _ in range(n+1)]\n        dp[0][0] = 0\n        \n        for i in range(1, n+1):\n            for j in range(1, min(i, 3)+1):\n                for k in range(i):\n                    dp[i][j] = min(dp[i][j], dp[k][j-1] + nums[k])\n        \n        return dp[n][3]"
}