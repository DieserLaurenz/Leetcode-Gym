{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 10: IndexError: list index out of range",
    "full_runtime_error": "IndexError: list index out of range\n    dp[i][j] = min(dp[i][j], dp[i - 1][k] + nums[k])\nLine 10 in minimumCost (Solution.py)\n    ret = Solution().minimumCost(param_1)\nLine 31 in _driver (Solution.py)\n    _driver()\nLine 41 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11500000,
    "question_id": "3263",
    "elapsed_time": 29,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,12]",
    "expected_output": "6",
    "task_finish_time": 1708703448651,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184093526",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, nums):\n        n = len(nums)\n        dp = [[float('inf')] * n for _ in range(4)]\n        dp[0][0] = 0\n\n        for i in range(1, 4):\n            for j in range(i, n + 1 - (3 - i)):\n                for k in range(i - 1, j):\n                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + nums[k])\n\n        return dp[3][n - 1]"
}