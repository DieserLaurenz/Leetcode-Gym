{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11692000,
    "question_id": "3263",
    "elapsed_time": 250,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,12]",
    "expected_output": "6",
    "task_finish_time": 1708703472101,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 127,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184093823",
    "input_formatted": "[1,2,3,12]",
    "input": "[1,2,3,12]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 3:\n            return sum(nums)\n        dp = [[float('inf')] * (n + 1) for _ in range(4)]\n        for i in range(4):\n            dp[i][0] = 0\n\n        for i in range(1, 4):\n            for j in range(1, n + 1):\n                for k in range(j):\n                    dp[i][j] = min(dp[i][j], dp[i-1][k] + nums[k])\n\n        return min(dp[3][n-2:])"
}