{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11656000,
    "question_id": "3263",
    "elapsed_time": 168,
    "compare_result
    "code_output": "41",
    "std_output": "",
    "last_testcase": "[1,6,49,35,41,4,31,39,36,39]",
    "expected_output": "11",
    "task_finish_time": 1708703495549,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 567,
    "total_testcases": 988,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184094128",
    "input_formatted": "[1,6,49,35,41,4,31,39,36,39]",
    "input": "[1,6,49,35,41,4,31,39,36,39]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, nums):\n        n = len(nums)\n        dp = [[float('inf')] * n for _ in range(4)]\n        dp[0][0] = 0\n\n        for i in range(1, n + 1):\n            dp[1][i - 1] = nums[0]\n\n        for i in range(2, 4):\n            for j in range(i - 1, n):\n                for k in range(j):\n                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + nums[j])\n\n        return min(dp[3][n - 3:])"
}