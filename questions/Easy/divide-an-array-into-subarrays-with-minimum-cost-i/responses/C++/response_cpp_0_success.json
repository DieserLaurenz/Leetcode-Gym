{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "13 ms",
    "memory": 29420000,
    "question_id": "3263",
    "elapsed_time": 29,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706177571870,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 988,
    "total_testcases": 988,
    "runtime_percentile": 13.995900000000006,
    "status_memory": "29.4 MB",
    "memory_percentile": 41.5656,
    "pretty_lang": "C++",
    "submission_id": "1156380139",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <climits> // For INT_MAX\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumCost(vector<int>& nums) {\n        int n = nums.size();\n        int minCost = INT_MAX;\n\n        // Iterate through the array to find all possible positions for the first two splits\n        for (int i = 1; i < n - 1; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                // nums[0] to nums[i-1] is the first subarray\n                // nums[i] to nums[j-1] is the second subarray\n                // nums[j] to nums[n-1] is the third subarray\n                int cost = nums[0] + nums[i] + nums[j];\n                minCost = min(minCost, cost);\n            }\n        }\n\n        return minCost;\n    }\n};"
}