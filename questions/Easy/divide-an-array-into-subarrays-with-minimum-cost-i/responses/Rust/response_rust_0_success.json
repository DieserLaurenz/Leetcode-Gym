{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "4 ms",
    "memory": 2220000,
    "question_id": "3263",
    "elapsed_time": 18,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706187531350,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 988,
    "total_testcases": 988,
    "runtime_percentile": 7.843200000000003,
    "status_memory": "2.2 MB",
    "memory_percentile": 39.2157,
    "pretty_lang": "Rust",
    "submission_id": "1156474207",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_cost(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        let mut min_cost = i32::MAX;\n\n        // Iterate through the array to find all possible ways to divide it into three subarrays\n        for i in 1..n - 1 {\n            for j in i + 1..n {\n                // Calculate the cost of current division\n                let cost = nums[0] + nums[i] + nums[j];\n                // Update the minimum cost\n                min_cost = min_cost.min(cost);\n            }\n        }\n\n        min_cost\n    }\n}"
}