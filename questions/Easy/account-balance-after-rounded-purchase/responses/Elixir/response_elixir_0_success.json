{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "277 ms",
    "memory": 72376000,
    "question_id": "2955",
    "elapsed_time": 362,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706046050799,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 101,
    "runtime_percentile": 33.33339999999999,
    "status_memory": "72.4 MB",
    "memory_percentile": 66.66669999999999,
    "pretty_lang": "Elixir",
    "submission_id": "1154998601",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec account_balance_after_purchase(purchase_amount :: integer) :: integer\n  def account_balance_after_purchase(purchase_amount) do\n    # Calculate the nearest multiple of 10. If the remainder is 5 or more, round up.\n    rounded_amount = \n      if rem(purchase_amount, 10) >= 5 do\n        (div(purchase_amount, 10) + 1) * 10\n      else\n        div(purchase_amount, 10) * 10\n      end\n\n    # Subtract the rounded amount from the initial balance of 100 dollars.\n    100 - rounded_amount\n  end\nend"
}