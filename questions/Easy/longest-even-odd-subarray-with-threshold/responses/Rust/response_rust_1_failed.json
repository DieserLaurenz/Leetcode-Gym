{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2188000,
    "question_id": "2866",
    "elapsed_time": 43,
    "compare_result": "111101111111111110000100011110000111100011111100111011101111111111111100111101111111101011011001111111110010001111111110111111111110011111111111100111111111100111111111111111111111110111111111111001110111111111001010101110101111011110111110111101111101010011111111110110111111111101111011111111101111111111101111111101111110111111111111101111101110111111110111111011111111011111111111011110111111111110111111111111011111111111111111111111111111111111111111101111101111110101111111111111111111111111111111110110111111101100111111111111111111011111111111111111111111111001111010110111111011111111111111111111100111110111111111111111111111111110111011111011111100111111111001111111111111111110111111110111111111011100101111101111111111111101111111111111011101111110100111111111111111111111111011111111000111110001111011111111111111111011110101111111111110101111110111111111111110111110011111101101111111111110111101111111111111111111011111111111111111111101101110111111111011101101111111111111101111111111111100111111111111111110111100110111111111111111110011111110111100111101111111111011111111111111111111111101111111110101110101111111100111110101111111111111111111111101110111111011111111110111111111111111101101111111111111111011010111111011110101101101111111111100111111101101111011111011111111111111111011010111101111111111011110111111111111111111111110110111101111111111111111110100001111111111101111111110111111111110101111111111111111011111110111111111111111111111111111111110111101111101111111111111111111111111111011111100111111111111110111111111111111010111111111110011111111011111111011101111111110001111101111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111101111111111111111111111111111111111111111011111111111111111111111111111111111101111111111111111111111111111111101111111111111111111111111111011111111111111111111111101111111111111111111101111111111111111011111111111101111111101111011111111111111101111111110111111111111111111111111111111111111111111111111111111111111111111000011111011111111111111111111111111110110110110111111111111111111111111111111011111111111000111111111111111",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2]\n2",
    "expected_output": "1",
    "task_finish_time": 1706420725501,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6583,
    "total_testcases": 6873,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1158919754",
    "input_formatted": "[2], 2",
    "input": "[2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn longest_alternating_subarray(nums: Vec<i32>, threshold: i32) -> i32 {\n        let mut max_length = 0;\n        let mut current_length = 0;\n        \n        // Iterate through the array to find valid starting points and calculate lengths of valid subarrays\n        let mut i = 0;\n        while i < nums.len() {\n            // Reset current_length for each new starting point\n            current_length = if nums[i] <= threshold && nums[i] % 2 == 0 { 1 } else { 0 };\n            let mut j = i + 1;\n\n            while j < nums.len() && nums[j] <= threshold {\n                // Check if the current number continues the alternating pattern\n                if nums[j] % 2 != nums[j - 1] % 2 {\n                    current_length += 1;\n                    max_length = max_length.max(current_length);\n                } else {\n                    // Break if the pattern is not alternating\n                    break;\n                }\n                j += 1;\n            }\n\n            // Move to the next starting point if the current one was invalid or after finishing a valid subarray\n            i = if current_length > 0 { j } else { i + 1 };\n        }\n\n        max_length\n    }\n}"
}