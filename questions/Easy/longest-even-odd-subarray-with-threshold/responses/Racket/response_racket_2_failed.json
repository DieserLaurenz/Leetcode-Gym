{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126300000,
    "question_id": "2866",
    "elapsed_time": 455,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[3,2,5,4]\n5",
    "expected_output": "3",
    "task_finish_time": 1706420858800,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 972,
    "total_testcases": 6873,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1158921175",
    "input_formatted": "[3,2,5,4], 5",
    "input": "[3,2,5,4]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (longest-alternating-subarray nums threshold)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let ([len (length nums)])\n    (letrec ([find-max-length\n              (lambda (index last-even? max-len current-len)\n                (if (>= index len)\n                    max-len\n                    (let ([current (list-ref nums index)])\n                      (if (and (<= current threshold)\n                               (or (and (even? current) (not last-even?))\n                                   (and (odd? current) last-even?)))\n                          (find-max-length (+ index 1) (not last-even?) max-len (+ current-len 1))\n                          (if last-even?\n                              (find-max-length (+ index 1) #f (max max-len current-len) 0)\n                              (find-max-length index #t max-len 0))))))])\n      (find-max-length 0 #f 0 0))))"
}