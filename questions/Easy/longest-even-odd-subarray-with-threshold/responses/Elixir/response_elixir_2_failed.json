{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72796000,
    "question_id": "2866",
    "elapsed_time": 2031,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[3,2,5,4]\n5",
    "expected_output": "3",
    "task_finish_time": 1706421109173,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3635,
    "total_testcases": 6873,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1158923735",
    "input_formatted": "[3,2,5,4], 5",
    "input": "[3,2,5,4]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec longest_alternating_subarray(nums :: [integer], threshold :: integer) :: integer\n  def longest_alternating_subarray(nums, threshold) do\n    max_len = Enum.reduce(0..Enum.count(nums)-1, {0, 0}, fn i, {max_so_far, _} ->\n      {current_len, _} = check_subarray(nums, i, threshold)\n      if current_len > max_so_far, do: {current_len, i}, else: {max_so_far, i}\n    end)\n    |> elem(0)\n    max_len\n  end\n\n  defp check_subarray(nums, start_index, threshold) do\n    Enum.reduce_while(Enum.slice(nums, start_index..-1), {0, 2}, fn x, {len, prev_mod} ->\n      if x <= threshold and (rem(x, 2) != prev_mod or prev_mod == 2) do\n        {:cont, {len + 1, rem(x, 2)}}\n      else\n        {:halt, {len, rem(x, 2)}}\n      end\n    end)\n  end\nend"
}