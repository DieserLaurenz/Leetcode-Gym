{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "",
    "full_compile_error": "Line 9: Char 25: ** (SyntaxError) syntax error before: do\n    |\n  9 |         if num % 2 == 0 do\n    |                         ^\n    (elixir 1.15.7) lib/kernel/parallel_compiler.ex:377: anonymous fn/5 in Kernel.ParallelCompiler.spawn_workers/8",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2866",
    "task_finish_time": 1706421029160,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1158922939",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec longest_alternating_subarray(nums :: [integer], threshold :: integer) :: integer\n  def longest_alternating_subarray(nums, threshold) do\n    nums\n    |> Enum.with_index()\n    |> Enum.filter(fn {num, _} -> num <= threshold end)\n    |> Enum.reduce({0, nil}, fn {num, idx}, {max_length, last_even_idx} ->\n      if num <= threshold do\n        if num % 2 == 0 do\n          if last_even_idx == nil or (idx - last_even_idx) % 2 == 1 do\n            new_length = if last_even_idx == nil, do: 1, else: idx - last_even_idx + 1\n            {max(max_length, new_length), idx}\n          else\n            {max_length, idx}\n          end\n        else\n          if last_even_idx != nil and (idx - last_even_idx) % 2 == 0 do\n            {max_length, last_even_idx}\n          else\n            {max_length, nil}\n          end\n        end\n      else\n        {max_length, nil}\n      end\n    end)\n    |> elem(0)\n  end\nend"
}