{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60500000,
    "question_id": "2866",
    "elapsed_time": 2957,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[3,2,5,4]\n5",
    "expected_output": "3",
    "task_finish_time": 1706420905137,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1717,
    "total_testcases": 6873,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1158921668",
    "input_formatted": "[3,2,5,4], 5",
    "input": "[3,2,5,4]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec longest_alternating_subarray(Nums :: [integer()], Threshold :: integer()) -> integer().\nlongest_alternating_subarray(Nums, Threshold) ->\n    longest_alternating_subarray(Nums, Threshold, 0, 0, none).\n\nlongest_alternating_subarray([], _Threshold, MaxLen, _CurLen, _Prev) ->\n    MaxLen;\nlongest_alternating_subarray([H | T], Threshold, MaxLen, CurLen, Prev) when H =< Threshold ->\n    case Prev of\n        none when H rem 2 == 0 ->\n            longest_alternating_subarray(T, Threshold, MaxLen, CurLen + 1, even);\n        even when H rem 2 == 1 ->\n            longest_alternating_subarray(T, Threshold, MaxLen, CurLen + 1, odd);\n        odd when H rem 2 == 0 ->\n            longest_alternating_subarray(T, Threshold, MaxLen, CurLen + 1, even);\n        _ ->\n            NewMax = max(MaxLen, CurLen),\n            if\n                H rem 2 == 0 ->\n                    longest_alternating_subarray(T, Threshold, NewMax, 1, even);\n                true ->\n                    longest_alternating_subarray(T, Threshold, NewMax, 0, none)\n            end\n    end;\nlongest_alternating_subarray([_H | T], Threshold, MaxLen, CurLen, _Prev) ->\n    NewMax = max(MaxLen, CurLen),\n    longest_alternating_subarray(T, Threshold, NewMax, 0, none)."
}