{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60008000,
    "question_id": "2866",
    "elapsed_time": 2634,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2]\n2",
    "expected_output": "1",
    "task_finish_time": 1706420947971,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6445,
    "total_testcases": 6873,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1158922057",
    "input_formatted": "[1,2], 2",
    "input": "[1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec longest_alternating_subarray(Nums :: [integer()], Threshold :: integer()) -> integer().\nlongest_alternating_subarray(Nums, Threshold) ->\n    longest_alternating_subarray(Nums, Threshold, 0, 0, false, 0).\n\nlongest_alternating_subarray([], _Threshold, MaxLen, _CurLen, _IsAlternating, _PrevMod) ->\n    MaxLen;\nlongest_alternating_subarray([H | T], Threshold, MaxLen, CurLen, IsAlternating, PrevMod) when H =< Threshold ->\n    CurrentMod = H rem 2,\n    case {IsAlternating, PrevMod == CurrentMod} of\n        {false, _} ->\n            if \n                CurrentMod == 0 ->\n                    % Start new subarray if current number is even and satisfies conditions\n                    longest_alternating_subarray(T, Threshold, MaxLen, 1, true, CurrentMod);\n                true ->\n                    % Skip current number if it's odd and no valid subarray started yet\n                    longest_alternating_subarray(T, Threshold, MaxLen, 0, false, 0)\n            end;\n        {true, false} ->\n            % Continue with the current subarray since it's alternating properly\n            longest_alternating_subarray(T, Threshold, max(MaxLen, CurLen + 1), CurLen + 1, true, CurrentMod);\n        {true, true} ->\n            % Reset since the subarray stopped alternating\n            longest_alternating_subarray(T, Threshold, max(MaxLen, CurLen), 0, false, 0)\n    end;\nlongest_alternating_subarray([_H | T], Threshold, MaxLen, CurLen, _IsAlternating, _PrevMod) ->\n    % Current number exceeds threshold, check if current length is the new maximum and reset\n    longest_alternating_subarray(T, Threshold, max(MaxLen, CurLen), 0, false, 0)."
}