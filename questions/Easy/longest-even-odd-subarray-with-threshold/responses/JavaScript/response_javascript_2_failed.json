{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57024000,
    "question_id": "2866",
    "elapsed_time": 282,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2]\n2",
    "expected_output": "1",
    "task_finish_time": 1706420335604,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6379,
    "total_testcases": 6873,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1158915529",
    "input_formatted": "[1,2], 2",
    "input": "[1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} threshold\n * @return {number}\n */\nvar longestAlternatingSubarray = function(nums, threshold) {\n    let maxLen = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        // Start of a potential subarray must be an even number within the threshold.\n        if (nums[i] % 2 === 0 && nums[i] <= threshold) {\n            let len = 1; // Length of the current subarray starts with 1.\n            // Expand the subarray while alternating and not exceeding the threshold.\n            for (let j = i + 1; j < nums.length && nums[j] <= threshold; j++) {\n                if (nums[j] % 2 !== nums[j - 1] % 2) {\n                    len++;\n                    maxLen = Math.max(maxLen, len); // Update max length if current subarray is longer.\n                } else {\n                    // Break the loop if the alternating condition is violated.\n                    break;\n                }\n            }\n        }\n    }\n\n    return maxLen;\n};"
}