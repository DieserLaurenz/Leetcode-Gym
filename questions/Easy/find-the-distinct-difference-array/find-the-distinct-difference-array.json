{
    "acRate": 76.34624211823255,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2670",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Distinct Difference Array",
    "titleSlug": "find-the-distinct-difference-array",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> distinctDifferenceArray(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] distinctDifferenceArray(int[] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def distinctDifferenceArray(self, nums):         \"\"\"         :type nums: List[int]         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def distinctDifferenceArray(self, nums: List[int]) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* distinctDifferenceArray(int* nums, int numsSize, int* returnSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] DistinctDifferenceArray(int[] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {number[]}  */ var distinctDifferenceArray = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function distinctDifferenceArray(nums: number[]): number[] {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Integer[]      */     function distinctDifferenceArray($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func distinctDifferenceArray(_ nums: [Int]) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun distinctDifferenceArray(nums: IntArray): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> distinctDifferenceArray(List<int> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func distinctDifferenceArray(nums []int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Integer[]} def distinct_difference_array(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def distinctDifferenceArray(nums: Array[Int]): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn distinct_difference_array(nums: Vec<i32>) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (distinct-difference-array nums)   (-> (listof exact-integer?) (listof exact-integer?))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec distinct_difference_array(Nums :: [integer()]) -> [integer()]. distinct_difference_array(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec distinct_difference_array(nums :: [integer]) :: [integer]   def distinct_difference_array(nums) do    end end"
        }
    ],
    "content": "You are given a 0-indexed array nums of length n. The distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i]. Return the distinct difference array of nums. Note that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. Particularly, if i > j then nums[i, ..., j] denotes an empty subarray.  Example 1:  Input: nums = [1,2,3,4,5] Output: [-3,-1,1,3,5] Explanation: For index i = 0, there is 1 element in the prefix and 4 distinct elements in the suffix. Thus, diff[0] = 1 - 4 = -3. For index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1. For index i = 2, there are 3 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 3 - 2 = 1. For index i = 3, there are 4 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 4 - 1 = 3. For index i = 4, there are 5 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 5 - 0 = 5.  Example 2:  Input: nums = [3,2,3,4,2] Output: [-2,-1,0,2,3] Explanation: For index i = 0, there is 1 element in the prefix and 3 distinct elements in the suffix. Thus, diff[0] = 1 - 3 = -2. For index i = 1, there are 2 distinct elements in the prefix and 3 distinct elements in the suffix. Thus, diff[1] = 2 - 3 = -1. For index i = 2, there are 2 distinct elements in the prefix and 2 distinct elements in the suffix. Thus, diff[2] = 2 - 2 = 0. For index i = 3, there are 3 distinct elements in the prefix and 1 distinct element in the suffix. Thus, diff[3] = 3 - 1 = 2. For index i = 4, there are 3 distinct elements in the prefix and no elements in the suffix. Thus, diff[4] = 3 - 0 = 3.   Constraints:  1 <= n == nums.length<= 50 1 <= nums[i] <= 50  "
}