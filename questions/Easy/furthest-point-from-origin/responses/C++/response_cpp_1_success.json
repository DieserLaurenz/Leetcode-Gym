{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "6 ms",
    "memory": 8232000,
    "question_id": "3019",
    "elapsed_time": 16,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706364414494,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 12.773,
    "status_memory": "8.2 MB",
    "memory_percentile": 7.899300000000002,
    "pretty_lang": "C++",
    "submission_id": "1158298810",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int furthestDistanceFromOrigin(string moves) {\n        int lCount = 0, rCount = 0, underscoreCount = 0;\n        \n        // Count the occurrences of 'L', 'R', and '_'\n        for (char move : moves) {\n            if (move == 'L') lCount++;\n            else if (move == 'R') rCount++;\n            else underscoreCount++; // move == '_'\n        }\n        \n        // The furthest point can be reached by moving towards the direction with more steps ('L' or 'R')\n        // and utilizing all '_' to extend towards that direction.\n        // The maximum distance from the origin is the absolute difference between 'L' and 'R' counts\n        // plus all the underscores, as they can be used to go further in the majority direction.\n        return std::max(lCount, rCount) + underscoreCount - std::min(lCount, rCount);\n    }\n};"
}