{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8016000,
    "question_id": "3019",
    "elapsed_time": 32,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"L_RL__R\"",
    "expected_output": "3",
    "task_finish_time": 1706363818085,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 279,
    "total_testcases": 1252,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1158291797",
    "input_formatted": "\"L_RL__R\"",
    "input": "\"L_RL__R\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int furthestDistanceFromOrigin(string moves) {\n        int leftMoves = 0; // To count 'L' and '_'\n        int rightMoves = 0; // To count 'R' and '_'\n        \n        // Counting 'L', 'R', and '_'\n        for (char move : moves) {\n            if (move == 'L' || move == '_') {\n                leftMoves++;\n            }\n            if (move == 'R' || move == '_') {\n                rightMoves++;\n            }\n        }\n        \n        // The furthest distance from origin is the maximum of left or right moves,\n        // but since '_' can be either, we take the maximum of total 'L' and 'R' moves.\n        // This is because the optimal strategy involves using all '_' as either 'L' or 'R'\n        // depending on which direction gives the maximum distance.\n        return std::max(leftMoves, rightMoves) - (moves.find('_') != string::npos ? 0 : 1); // Adjust if there's no '_'\n    }\n};"
}