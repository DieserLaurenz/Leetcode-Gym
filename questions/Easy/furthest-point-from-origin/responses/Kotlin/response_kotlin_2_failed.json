{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 35352000,
    "question_id": "3019",
    "elapsed_time": 152,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"L_RL__R\"",
    "expected_output": "3",
    "task_finish_time": 1706367663675,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 711,
    "total_testcases": 1252,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1158336971",
    "input_formatted": "\"L_RL__R\"",
    "input": "\"L_RL__R\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun furthestDistanceFromOrigin(moves: String): Int {\n        var maxDistance = 0\n        var currentPosition = 0\n        var flexibleMoves = 0 // Tracks the number of '_' for flexibility in moves\n        \n        // Calculate the initial position without considering '_'\n        for (move in moves) {\n            when (move) {\n                'L' -> currentPosition--\n                'R' -> currentPosition++\n                '_' -> flexibleMoves++ // Accumulate flexible moves\n            }\n            // Update max distance at each step\n            maxDistance = maxOf(maxDistance, kotlin.math.abs(currentPosition))\n        }\n        \n        // The furthest point is determined by the absolute value of the currentPosition\n        // plus all the flexible moves since they can be used to either extend the current direction\n        // or move back towards the origin then further away in the opposite direction.\n        // However, the furthest distance from the origin after using flexible moves\n        // depends only on the initial absolute distance plus the flexible moves,\n        // as they can all be used to move in the most beneficial direction.\n        return maxDistance + flexibleMoves\n    }\n}"
}