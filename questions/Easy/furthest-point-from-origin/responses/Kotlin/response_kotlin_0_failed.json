{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34812000,
    "question_id": "3019",
    "elapsed_time": 161,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"L_RL__R\"",
    "expected_output": "3",
    "task_finish_time": 1706367595664,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 257,
    "total_testcases": 1252,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1158336156",
    "input_formatted": "\"L_RL__R\"",
    "input": "\"L_RL__R\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun furthestDistanceFromOrigin(moves: String): Int {\n        var leftCount = 0\n        var underscoreCount = 0\n        \n        // Count the number of 'L' and '_' characters\n        for (move in moves) {\n            if (move == 'L') leftCount++\n            else if (move == '_') underscoreCount++\n        }\n        \n        // The furthest distance is the sum of the number of 'L's and '_'\n        // because you can choose to move all '_'s in the direction that maximizes the distance\n        // from the origin which is either all to 'L' or all to 'R' depending on which maximizes\n        // the distance.\n        return leftCount + underscoreCount\n    }\n}"
}