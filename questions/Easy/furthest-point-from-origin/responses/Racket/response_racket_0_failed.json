{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101112000,
    "question_id": "3019",
    "elapsed_time": 246,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"L_RL__R\"",
    "expected_output": "3",
    "task_finish_time": 1706376657237,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 255,
    "total_testcases": 1252,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1158450902",
    "input_formatted": "\"L_RL__R\"",
    "input": "\"L_RL__R\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (furthest-distance-from-origin moves)\n  (-> string? exact-integer?)\n  (let ([max-left 0]\n        [max-right 0])\n    (for ([c (string->list moves)])\n      (cond\n        [(char=? c #\\L) (set! max-left (+ max-left 1))]\n        [(char=? c #\\R) (set! max-right (+ max-right 1))]\n        [(char=? c #\\_) (begin\n                          (set! max-left (+ max-left 1))\n                          (set! max-right (+ max-right 1)))]))\n    (max max-left max-right)))"
}