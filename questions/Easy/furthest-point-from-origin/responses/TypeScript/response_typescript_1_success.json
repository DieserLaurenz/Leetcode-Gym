{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "77 ms",
    "memory": 55012000,
    "question_id": "3019",
    "elapsed_time": 105,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706367115697,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 38.234900000000025,
    "status_memory": "55 MB",
    "memory_percentile": 5.882200000000019,
    "pretty_lang": "TypeScript",
    "submission_id": "1158330675",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function furthestDistanceFromOrigin(moves: string): number {\n    // Initialize counts for 'L', 'R', and '_'\n    let L = 0;\n    let R = 0;\n    let underscore = 0;\n\n    // Count occurrences of 'L', 'R', and '_'\n    for (const move of moves) {\n        if (move === 'L') L++;\n        else if (move === 'R') R++;\n        else underscore++;\n    }\n\n    // The maximum distance is the absolute difference between 'L' and 'R'\n    // plus all the underscores, as they can be used to move in the most beneficial direction\n    return Math.abs(L - R) + underscore;\n}"
}