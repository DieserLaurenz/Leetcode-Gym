{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "491 ms",
    "memory": 54712000,
    "question_id": "3019",
    "elapsed_time": 563,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706375219472,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 50.0,
    "status_memory": "54.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1158430483",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def furthestDistanceFromOrigin(moves: String): Int = {\n        // Calculate the difference in steps between 'L' and 'R' ignoring '_'\n        val initialDiff = moves.count(_ == 'L') - moves.count(_ == 'R')\n        // Count the number of '_' which can be used to adjust the distance\n        val underscoreCount = moves.count(_ == '_')\n\n        // The furthest distance can be achieved by moving all the way in one direction\n        // and then using '_' to move further in the same direction or to balance the steps\n        // if initialDiff is positive, it means more 'L' so we can use '_' as 'R' to go further left (negative)\n        // if initialDiff is negative, it means more 'R' so we can use '_' as 'L' to go further right (positive)\n        // if initialDiff is zero, all '_' contribute to the furthest distance directly\n        Math.abs(initialDiff) + underscoreCount\n    }\n}"
}