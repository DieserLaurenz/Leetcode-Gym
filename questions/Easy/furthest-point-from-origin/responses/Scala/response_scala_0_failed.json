{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55236000,
    "question_id": "3019",
    "elapsed_time": 886,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"L_RL__R\"",
    "expected_output": "3",
    "task_finish_time": 1706374617462,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 255,
    "total_testcases": 1252,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1158421916",
    "input_formatted": "\"L_RL__R\"",
    "input": "\"L_RL__R\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def furthestDistanceFromOrigin(moves: String): Int = {\n        val (leftCount, rightCount, underscoreCount) = moves.foldLeft((0, 0, 0)) {\n            case ((l, r, u), move) =>\n                move match {\n                    case 'L' => (l + 1, r, u)\n                    case 'R' => (l, r + 1, u)\n                    case '_' => (l, r, u + 1)\n                }\n        }\n        // The maximum possible distance is the sum of moves in one direction plus all the '_' characters,\n        // since we can choose to move in the direction that increases the distance from the origin.\n        Math.max(leftCount, rightCount) + underscoreCount\n    }\n}"
}