{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 5648000,
    "question_id": "3019",
    "elapsed_time": 15,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706365254962,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 100,
    "status_memory": "5.6 MB",
    "memory_percentile": 98.0392,
    "pretty_lang": "C",
    "submission_id": "1158308617",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int furthestDistanceFromOrigin(char * moves) {\n    int L = 0, R = 0, U = 0; // Counters for 'L', 'R', and '_'\n    // Count the occurrences of each character\n    for (int i = 0; moves[i] != '\\0'; i++) {\n        if (moves[i] == 'L') L++;\n        else if (moves[i] == 'R') R++;\n        else U++; // moves[i] == '_'\n    }\n    // Calculate the maximum possible difference\n    if (L > R) {\n        return L + U - R; // If more L's, use '_' to push further left\n    } else {\n        return R + U - L; // If more R's, or equal, use '_' to push further right\n    }\n}"
}