{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2124000,
    "question_id": "3019",
    "elapsed_time": 15,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "\"L_RL__R\"",
    "expected_output": "3",
    "task_finish_time": 1706375636669,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 145,
    "total_testcases": 1252,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1158436211",
    "input_formatted": "\"L_RL__R\"",
    "input": "\"L_RL__R\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn furthest_distance_from_origin(moves: String) -> i32 {\n        let (mut left_moves, mut right_moves) = (0, 0);\n        for move_char in moves.chars() {\n            match move_char {\n                'L' => left_moves += 1,\n                'R' => right_moves += 1,\n                _ => (),\n            }\n        }\n        let total_underscores = moves.chars().filter(|&c| c == '_').count() as i32;\n        let imbalance = (left_moves as i32 - right_moves as i32).abs();\n        let remaining_underscores = if total_underscores > imbalance { total_underscores - imbalance } else { 0 };\n\n        left_moves + right_moves + remaining_underscores\n    }\n}"
}