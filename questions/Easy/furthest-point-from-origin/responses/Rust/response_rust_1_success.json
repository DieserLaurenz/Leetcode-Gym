{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2172000,
    "question_id": "3019",
    "elapsed_time": 12,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706376238393,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 100,
    "status_memory": "2.2 MB",
    "memory_percentile": 35.0,
    "pretty_lang": "Rust",
    "submission_id": "1158444795",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn furthest_distance_from_origin(moves: String) -> i32 {\n        let mut l = 0;\n        let mut r = 0;\n        let mut underscores = 0;\n\n        // Count the occurrences of each character\n        for c in moves.chars() {\n            match c {\n                'L' => l += 1,\n                'R' => r += 1,\n                '_' => underscores += 1,\n                _ => (),\n            }\n        }\n\n        // Calculate the maximum possible distance\n        // The strategy involves using underscores to balance out the difference between L and R\n        // and then moving as far as possible in one direction with the remaining underscores\n        let max_distance = if l > r {\n            l - r + underscores\n        } else {\n            r - l + underscores\n        };\n\n        max_distance\n    }\n}"
}