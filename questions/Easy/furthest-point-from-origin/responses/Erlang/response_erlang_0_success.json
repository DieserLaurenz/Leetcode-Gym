{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "311 ms",
    "memory": 59424000,
    "question_id": "3019",
    "elapsed_time": 1441,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706378338536,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 100,
    "status_memory": "59.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1158474725",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec furthest_distance_from_origin(Moves :: unicode:unicode_binary()) -> integer().\nfurthest_distance_from_origin(Moves) ->\n    ListMoves = binary_to_list(Moves),\n    LCount = length([X || X <- ListMoves, X == $L]),\n    RCount = length([X || X <- ListMoves, X == $R]),\n    UnderscoreCount = length([X || X <- ListMoves, X == $_]),\n    MaxDistance = abs(LCount - RCount) + UnderscoreCount,\n    MaxDistance."
}