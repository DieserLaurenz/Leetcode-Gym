{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "1 ms",
    "memory": 42496000,
    "display_runtime": "1",
    "question_id": "3019",
    "elapsed_time": 119,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706364836720,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 100,
    "status_memory": "42.5 MB",
    "memory_percentile": 28.7278,
    "pretty_lang": "Java",
    "submission_id": "1158303635",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int furthestDistanceFromOrigin(String moves) {\n        int underscoreCount = 0; // To keep track of '_' characters\n        int leftCount = 0; // To keep track of 'L' characters\n        int rightCount = 0; // To keep track of 'R' characters\n\n        // Counting 'L', 'R', and '_' characters in the string\n        for (int i = 0; i < moves.length(); i++) {\n            char move = moves.charAt(i);\n            if (move == 'L') {\n                leftCount++;\n            } else if (move == 'R') {\n                rightCount++;\n            } else {\n                underscoreCount++;\n            }\n        }\n\n        // The maximum distance from origin can be achieved by moving all the '_' characters towards\n        // the direction which already has more moves between 'L' and 'R'\n        // If 'L' and 'R' are equal, we can choose either direction for '_'\n        int maxDistance;\n        if (leftCount > rightCount) {\n            // Move all '_' towards 'L' to maximize the distance in the left direction\n            maxDistance = leftCount + underscoreCount - rightCount;\n        } else {\n            // Move all '_' towards 'R' to maximize the distance in the right direction\n            maxDistance = rightCount + underscoreCount - leftCount;\n        }\n\n        return maxDistance;\n    }\n}"
}