{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "68 ms",
    "memory": 211424000,
    "question_id": "3019",
    "elapsed_time": 125,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706367793851,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 37.5,
    "status_memory": "211.4 MB",
    "memory_percentile": 25.0,
    "pretty_lang": "Ruby",
    "submission_id": "1158338430",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {String} moves\n# @return {Integer}\ndef furthest_distance_from_origin(moves)\n    # Initial counts of 'L', 'R', and '_'\n    left_count = moves.count('L')\n    right_count = moves.count('R')\n    underscore_count = moves.count('_')\n\n    # The distance from the origin is the absolute difference between 'L' and 'R' moves\n    # plus all the underscores, since they can be used to move further in the more frequent direction\n    initial_distance = (left_count - right_count).abs\n\n    # If underscores can increase the distance in one direction, do so\n    # Otherwise, they are used to balance or slightly adjust the direction without changing the overall strategy\n    furthest_distance = initial_distance + underscore_count\n\n    return furthest_distance\nend"
}