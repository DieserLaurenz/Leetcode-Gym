{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "76 ms",
    "memory": 53944000,
    "question_id": "3019",
    "elapsed_time": 81,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706366094130,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 19.999900000000018,
    "status_memory": "53.9 MB",
    "memory_percentile": 6.086499999999992,
    "pretty_lang": "JavaScript",
    "submission_id": "1158318681",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} moves\n * @return {number}\n */\nvar furthestDistanceFromOrigin = function(moves) {\n    let leftMoves = 0, rightMoves = 0, undecMoves = 0;\n    \n    // Count the occurrences of each move type\n    for (let i = 0; i < moves.length; i++) {\n        if (moves[i] === 'L') leftMoves++;\n        else if (moves[i] === 'R') rightMoves++;\n        else undecMoves++; // moves[i] === '_'\n    }\n    \n    // Calculate the initial displacement without considering '_' moves\n    let displacement = Math.abs(leftMoves - rightMoves);\n    \n    // The furthest distance can be achieved by adding all '_' moves to the side with fewer moves\n    // Since undecMoves can be used to either extend the displacement or counterbalance it\n    return displacement + undecMoves;\n};"
}