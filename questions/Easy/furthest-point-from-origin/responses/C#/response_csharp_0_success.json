{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "43 ms",
    "memory": 39916000,
    "question_id": "3019",
    "elapsed_time": 95,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706365677438,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 88.889,
    "status_memory": "39.9 MB",
    "memory_percentile": 11.111199999999997,
    "pretty_lang": "C#",
    "submission_id": "1158313647",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int FurthestDistanceFromOrigin(string moves) {\n        // Count the number of 'L', 'R', and '_' characters\n        int leftCount = 0, rightCount = 0, underscoreCount = 0;\n        foreach (var move in moves) {\n            if (move == 'L') leftCount++;\n            else if (move == 'R') rightCount++;\n            else underscoreCount++;\n        }\n        \n        // The furthest distance from the origin can be calculated by \n        // maximizing the difference between the number of 'L' and 'R' moves, \n        // then adding the number of '_' moves to the larger count.\n        // This is because '_' moves can be used to either increase the distance to the left or right.\n        int maxDifference = Math.Abs(leftCount - rightCount);\n        // The furthest point is the sum of the max difference and all the '_' moves, \n        // which can be used to push further in the direction with more moves.\n        return maxDifference + underscoreCount;\n    }\n}"
}