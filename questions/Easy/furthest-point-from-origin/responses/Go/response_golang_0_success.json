{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 2216000,
    "question_id": "3019",
    "elapsed_time": 14,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706367735641,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 36.6667,
    "status_memory": "2.2 MB",
    "memory_percentile": 86.6667,
    "pretty_lang": "Go",
    "submission_id": "1158337807",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func furthestDistanceFromOrigin(moves string) int {\n    leftMoves, rightMoves, freeMoves := 0, 0, 0\n\n    // Count the number of L, R, and _ moves.\n    for _, move := range moves {\n        switch move {\n        case 'L':\n            leftMoves++\n        case 'R':\n            rightMoves++\n        case '_':\n            freeMoves++\n        }\n    }\n\n    // Calculate the net distance from the origin without considering free moves.\n    netDistance := rightMoves - leftMoves\n\n    // The furthest distance is the absolute value of net distance plus all the free moves.\n    // This is because free moves can be used to either increase the distance to the right or left depending on the net distance.\n    furthestDistance := abs(netDistance) + freeMoves\n\n    return furthestDistance\n}\n\n// Helper function to calculate the absolute value.\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}"
}