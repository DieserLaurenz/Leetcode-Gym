{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11656000,
    "question_id": "3019",
    "elapsed_time": 57,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"L_RL__R\"",
    "expected_output": "3",
    "task_finish_time": 1708713548860,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 711,
    "total_testcases": 1252,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184236399",
    "input_formatted": "\"L_RL__R\"",
    "input": "\"L_RL__R\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def furthestDistanceFromOrigin(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: int\n        \"\"\"\n        max_distance = 0\n        underscore_count = moves.count('_')\n\n        # Initial position\n        pos = 0\n\n        for move in moves:\n            if move == 'L':\n                pos -= 1\n            elif move == 'R':\n                pos += 1\n\n            max_distance = max(max_distance, abs(pos))\n\n        # Calculate maximum possible distance with remaining underscores\n        max_distance_with_underscores = max_distance + underscore_count\n\n        return max_distance_with_underscores"
}