{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "22 ms",
    "memory": 11848000,
    "question_id": "3019",
    "elapsed_time": 35,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708713578800,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 26.190100000000015,
    "status_memory": "11.8 MB",
    "memory_percentile": 33.33319999999999,
    "pretty_lang": "Python",
    "submission_id": "1184236761",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def furthestDistanceFromOrigin(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: int\n        \"\"\"\n        # Count of each move type\n        left_count = moves.count('L')\n        right_count = moves.count('R')\n        underscore_count = moves.count('_')\n\n        # Calculate the difference between left and right moves\n        lr_difference = abs(left_count - right_count)\n\n        # The furthest distance is the greater of the lr_difference and the total move potential\n        furthest_distance = lr_difference + underscore_count\n\n        # The actual furthest distance cannot exceed the total number of moves (in case of more '_' than L or R)\n        return min(furthest_distance, len(moves))"
}