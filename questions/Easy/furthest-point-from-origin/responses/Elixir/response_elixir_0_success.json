{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "392 ms",
    "memory": 71800000,
    "question_id": "3019",
    "elapsed_time": 761,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706378757979,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1252,
    "total_testcases": 1252,
    "runtime_percentile": 100,
    "status_memory": "71.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1158481069",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec furthest_distance_from_origin(moves :: String.t) :: integer\n  def furthest_distance_from_origin(moves) do\n    # Split the moves into characters\n    moves_list = String.graphemes(moves)\n    \n    # Count the number of 'L', 'R', and '_' characters\n    counts = Enum.frequencies(moves_list)\n    l_count = Map.get(counts, \"L\", 0)\n    r_count = Map.get(counts, \"R\", 0)\n    underscore_count = Map.get(counts, \"_\", 0)\n    \n    # The maximum distance from the origin is the sum of the absolute differences\n    # between 'L' and 'R' counts plus all the '_' counts, since '_' can be used\n    # to move in the direction that maximizes the distance\n    max_distance = abs(l_count - r_count) + underscore_count\n    max_distance\n  end\nend"
}