{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16680000,
    "question_id": "3019",
    "elapsed_time": 52,
    "compare_result": "0011111010101011010001010000100001010001011010001010000010101010101010000010100010101000101000001010101010101000001010001011010001010000000001010001010000000000000010110000110101010001010000110101010101010000000000000010110000110100000010110010101000111001000000110100111001000101000001010001010000110101010101010000110100111001000101000001010101010101000001010001011010001010000000001010001010000000000000000000000000001010001010000000001010001010000000000000000000000000000000000000000010100000100010000000000000100010000010101010001010000000001010001010000000000000100010000010101010001010000010101010101010000000000000000000000000000000000000000010100000100010000000000000100010000010100000000000000010100000100010000010100010101000101000000000100010101000000010001000000000000000100010000010100000100010101000000010001000000010100010001000101000001010001010000000001010001010000000000000100010000010101010001010000010101010101010000000000000100010000010100000100010101000000010001000000010100010001000101000001010001010000010101010101010000010100010001000101000001010101010101000001010001010000100000100001000000000000000000000010000000100000000000000000000000000001010000000000000000000101000000000000000000000000000000000000000000000000000111000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"L_RL__R\"",
    "expected_output": "3",
    "task_finish_time": 1708713628391,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 297,
    "total_testcases": 1252,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184237363",
    "input_formatted": "\"L_RL__R\"",
    "input": "\"L_RL__R\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def furthestDistanceFromOrigin(self, moves: str) -> int:\n        max_distance = 0\n        left_moves = moves.count('L') + moves.count('_')\n        right_moves = moves.count('R')\n        max_distance = max(left_moves, right_moves)\n        return max_distance"
}