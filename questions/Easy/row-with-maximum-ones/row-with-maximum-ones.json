{
    "acRate": 75.60088473826492,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2643",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Row With Maximum Ones",
    "titleSlug": "row-with-maximum-ones",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Matrix",
            "id": "VG9waWNUYWdOb2RlOjYxMDUz",
            "slug": "matrix"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> rowAndMaximumOnes(vector<vector<int>>& mat) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] rowAndMaximumOnes(int[][] mat) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def rowAndMaximumOnes(self, mat):         \"\"\"         :type mat: List[List[int]]         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def rowAndMaximumOnes(self, mat: List[List[int]]) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* rowAndMaximumOnes(int** mat, int matSize, int* matColSize, int* returnSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] RowAndMaximumOnes(int[][] mat) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} mat  * @return {number[]}  */ var rowAndMaximumOnes = function(mat) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function rowAndMaximumOnes(mat: number[][]): number[] {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $mat      * @return Integer[]      */     function rowAndMaximumOnes($mat) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func rowAndMaximumOnes(_ mat: [[Int]]) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun rowAndMaximumOnes(mat: Array<IntArray>): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> rowAndMaximumOnes(List<List<int>> mat) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func rowAndMaximumOnes(mat [][]int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} mat # @return {Integer[]} def row_and_maximum_ones(mat)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def rowAndMaximumOnes(mat: Array[Array[Int]]): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn row_and_maximum_ones(mat: Vec<Vec<i32>>) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (row-and-maximum-ones mat)   (-> (listof (listof exact-integer?)) (listof exact-integer?))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec row_and_maximum_ones(Mat :: [[integer()]]) -> [integer()]. row_and_maximum_ones(Mat) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec row_and_maximum_ones(mat :: [[integer]]) :: [integer]   def row_and_maximum_ones(mat) do    end end"
        }
    ],
    "content": "Given a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row. In case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected. Return an array containing the index of the row, and the number of ones in it.  Example 1:  Input: mat = [[0,1],[1,0]] Output: [0,1] Explanation: Both rows have the same number of 1's. So we return the index of the smaller row, 0, and the maximum count of ones (1). So, the answer is [0,1].   Example 2:  Input: mat = [[0,0,0],[0,1,1]] Output: [1,2] Explanation: The row indexed 1 has the maximum count of ones (2). So we return its index, 1, and the count. So, the answer is [1,2].  Example 3:  Input: mat = [[0,0],[1,1],[0,0]] Output: [1,2] Explanation: The row indexed 1 has the maximum count of ones (2). So the answer is [1,2].   Constraints:  m == mat.length n == mat[i].length 1 <= m, n <= 100 mat[i][j] is either 0 or 1.  "
}