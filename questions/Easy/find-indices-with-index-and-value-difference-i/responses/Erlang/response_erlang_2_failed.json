{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59556000,
    "question_id": "3165",
    "elapsed_time": 1373,
    "compare_result
    "code_output": "[-1,-1]",
    "std_output": "",
    "last_testcase": "[0]\n0\n0",
    "expected_output": "[0,0]",
    "task_finish_time": 1706251443176,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 521,
    "total_testcases": 525,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1157149400",
    "input_formatted": "[0], 0, 0",
    "input": "[0]\n0\n0",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_indices(Nums :: [integer()], IndexDifference :: integer(), ValueDifference :: integer()) -> [integer()].\nfind_indices(Nums, IndexDifference, ValueDifference) ->\n    find_indices(Nums, IndexDifference, ValueDifference, 0, length(Nums)).\n\nfind_indices(_, _, _, _, 0) ->\n    [-1, -1];\nfind_indices([H|T], IndexDifference, ValueDifference, CurrentIndex, N) ->\n    case find_matching_index(T, H, IndexDifference, ValueDifference, CurrentIndex, 1) of\n        -1 ->\n            find_indices(T, IndexDifference, ValueDifference, CurrentIndex + 1, N - 1);\n        MatchIndex ->\n            [CurrentIndex, CurrentIndex + MatchIndex]\n    end.\n\nfind_matching_index([], _, _, _, _, _) ->\n    -1;\nfind_matching_index([H|T], Value, IndexDifference, ValueDifference, CurrentIndex, Offset) ->\n    if\n        Offset >= IndexDifference andalso abs(Value - H) >= ValueDifference ->\n            Offset;\n        true ->\n            find_matching_index(T, Value, IndexDifference, ValueDifference, CurrentIndex, Offset + 1)\n    end."
}