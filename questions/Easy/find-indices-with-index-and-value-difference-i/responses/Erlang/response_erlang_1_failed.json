{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59608000,
    "question_id": "3165",
    "elapsed_time": 1489,
    "compare_result": "110000000000000001111101000111110011010111111111101011010101110010111011001110100101000110010110111111011100111100010011011011111111111110110011011001011110100011100011011111111111111111101011011011111111111111101011111111111111111011111111111111111100011101011111110101011010111111111110111111111000001111111111011101101011010111101110111111111101011111111011110011111111111110101110111010101111001111101111011101011111001000011111111101110010000110011110001111001110101101101111111111101001111111001111000001000011111111110",
    "code_output": "[0,[0,0]]",
    "std_output": "",
    "last_testcase": "[1,2,3]\n2\n4",
    "expected_output": "[-1,-1]",
    "task_finish_time": 1706251386925,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 368,
    "total_testcases": 525,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1157148635",
    "input_formatted": "[1,2,3], 2, 4",
    "input": "[1,2,3]\n2\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_indices(Nums :: [integer()], IndexDifference :: integer(), ValueDifference :: integer()) -> [integer()].\nfind_indices(Nums, IndexDifference, ValueDifference) ->\n    find_indices(Nums, IndexDifference, ValueDifference, 0).\n\nfind_indices([], _, _, _) ->\n    [-1, -1];\nfind_indices([H|T], IndexDifference, ValueDifference, Index) ->\n    case find_matching_index(T, H, IndexDifference, ValueDifference, Index, Index + 1) of\n        -1 ->\n            find_indices(T, IndexDifference, ValueDifference, Index + 1);\n        J ->\n            [Index, J]\n    end.\n\nfind_matching_index([], _, _, _, I, _) ->\n    % If IndexDifference and ValueDifference are both 0, return the same index\n    case I of\n        0 -> [0, 0];\n        _ -> -1\n    end;\nfind_matching_index([H|T], Value, IndexDifference, ValueDifference, I, J) ->\n    if\n        abs(I - J) >= IndexDifference andalso abs(Value - H) >= ValueDifference ->\n            J;\n        true ->\n            find_matching_index(T, Value, IndexDifference, ValueDifference, I, J + 1)\n    end."
}