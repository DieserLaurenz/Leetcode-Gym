{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 7: ** (Protocol.UndefinedError) protocol Enumerable not implemented for {0, 0} of type Tuple",
    "full_runtime_error": "Line 7: ** (Protocol.UndefinedError) protocol Enumerable not implemented for {0, 0} of type Tuple\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3\n    (elixir 1.15.7) lib/enum.ex:1159: Enum.find/3\n    solution.ex:7: anonymous fn/6 in Solution.find_indices/3\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:6: Solution.find_indices/3\n    solution.ex:31: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73900000,
    "question_id": "3165",
    "elapsed_time": 339,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1706251609309,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 525,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1157151618",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_indices(nums :: [integer], index_difference :: integer, value_difference :: integer) :: [integer]\n  def find_indices(nums, index_difference, value_difference) do\n    n = length(nums)\n\n    for i <- 0..(n - 1), j <- 0..(n - 1), do: {i, j}\n    |> Enum.find([-1, -1], fn {i, j} ->\n      abs(i - j) >= index_difference and abs(Enum.at(nums, i) - Enum.at(nums, j)) >= value_difference\n    end)\n  end\nend"
}