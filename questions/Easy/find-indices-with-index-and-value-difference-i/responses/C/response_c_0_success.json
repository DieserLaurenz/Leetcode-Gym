{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "6 ms",
    "memory": 5628000,
    "question_id": "3165",
    "elapsed_time": 21,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706245728533,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 525,
    "total_testcases": 525,
    "runtime_percentile": 35.71420000000001,
    "status_memory": "5.6 MB",
    "memory_percentile": 92.8571,
    "pretty_lang": "C",
    "submission_id": "1157079497",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n#include <math.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findIndices(int* nums, int numsSize, int indexDifference, int valueDifference, int* returnSize) {\n    *returnSize = 2; // The return array will always have 2 elements\n    int* result = (int*)malloc(2 * sizeof(int));\n\n    for (int i = 0; i < numsSize; ++i) {\n        for (int j = 0; j < numsSize; ++j) {\n            if (abs(i - j) >= indexDifference && abs(nums[i] - nums[j]) >= valueDifference) {\n                result[0] = i;\n                result[1] = j;\n                return result;\n            }\n        }\n    }\n\n    // If no pair is found, return [-1, -1]\n    result[0] = -1;\n    result[1] = -1;\n    return result;\n}"
}