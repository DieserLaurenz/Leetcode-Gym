{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11744000,
    "question_id": "3207",
    "elapsed_time": 81,
    "compare_result": "011100011000100100110110111100010010000111000000010000100001000000000001000100000000010100000100000100000001000010000000000000001100010010011010000010000001000000000010000001000100110100001110000000010000000010000000101000000000000001010000010000000010100000000000000000100000000000000001000000000010000000010000000100000000000010000000000000000011010000000000000000000000100000000000000000000010000000000100000001000001000000000000000000000010000000000000000000000000010000000000000000000000000000000100001000000000000000000000010000100100000000000010000000000000000000000000000000000000000001000000000000001000010000000000000000000001000000000000000000000000000000000000000000000000000000000000000000110001010100100001000000001010100010000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001111011111111011101111101111011011111110111111110011111111110011110111001111111111111011111111110101101111111110000000010000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011100001001000000001001000000000100001000000000000100000100111100100011001100000000110000010000000000000001001000000000000000000010000000000100000000000000000000010000000000001000000000000000100100000000000000000100000000010000000000001000000000000000000000010010100000000000010000000000000000000000000000000000000000000000000000000000000000000000010000100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111101111111111111111101010111011011101100110000000000000000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000010100000000000000000000000000000000100000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"abb\"\n\"ab\"",
    "expected_output": "2",
    "task_finish_time": 1708714376177,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 285,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184246703",
    "input_formatted": "\"abc\", \"abb\", \"ab\"",
    "input": "\"abc\"\n\"abb\"\n\"ab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findMinimumOperations(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: int\n        \"\"\"\n        min_len = min(len(s1), len(s2), len(s3))\n        s1, s2, s3 = s1[:min_len], s2[:min_len], s3[:min_len]\n\n        while s1 != s2 or s2 != s3:\n            if len(s1) == 0:\n                return -1\n            if s1[-1] != s2[-1] or s2[-1] != s3[-1]:\n                return -1\n            if s1[-1] != s2[-1]:\n                s2 = s2[:-1]\n            elif s2[-1] != s3[-1]:\n                s3 = s3[:-1]\n            elif s1[-1] != s3[-1]:\n                s1 = s1[:-1]\n            else:\n                s1, s2, s3 = s1[:-1], s2[:-1], s3[:-1]\n\n        return len(s1) + len(s2) + len(s3) - 3 * min_len"
}