{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11776000,
    "question_id": "3207",
    "elapsed_time": 49,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"abb\"\n\"ab\"",
    "expected_output": "2",
    "task_finish_time": 1708714415605,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 311,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184247185",
    "input_formatted": "\"abc\", \"abb\", \"ab\"",
    "input": "\"abc\"\n\"abb\"\n\"ab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findMinimumOperations(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: int\n        \"\"\"\n        # Find the shortest length among the three strings\n        min_length = min(len(s1), len(s2), len(s3))\n\n        # Reduce all strings to the shortest length\n        s1, s2, s3 = s1[:min_length], s2[:min_length], s3[:min_length]\n\n        # Check if the strings are already equal\n        if s1 == s2 == s3:\n            return 0\n\n        # Initialize operation count\n        operations = 0\n\n        # Trim the strings from the end one character at a time\n        for i in range(min_length - 1, -1, -1):\n            if s1[i] == s2[i] == s3[i]:\n                continue\n            else:\n                # Increase operations for each non-matching character\n                operations += 1\n                if i == 0 or len(set([s1[i-1], s2[i-1], s3[i-1]])) > 1:\n                    # If at any point the leading characters are different,\n                    # it's impossible to make the strings equal\n                    return -1\n\n        # Calculate total operations required to match the longest string\n        operations += len(s1) - i\n\n        return operations"
}