{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10900000,
    "question_id": "3207",
    "elapsed_time": 26,
    "compare_result": "011100011000100100110110111100010010000111000000010000100001000000000001000100000000010100000100000100000001000010000000000000001100010010011010000010000001000000000010000001000100110100001110000000010000000010000000101000000000000001010000010000000010100000000000000000100000000000000001000000000010000000010000000100000000000010000000000000000000010000000000000000000000100000000000000000000010000000000100000001000001000000000000000000000010000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000100000000000010000000000000000000000000000000000000000001000000000000001000010000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000010000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100001001000000001001000000000100001000000000000100000100111100100011001100000000110000010000000000000001001000000000000000000010000000000100000000000000000000000000000000000000000000000000100100000000000000000100000000010000000000001000000000000000000000000000100000000000010000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"abb\"\n\"ab\"",
    "expected_output": "2",
    "task_finish_time": 1706472016108,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 120,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1159495050",
    "input_formatted": "\"abc\", \"abb\", \"ab\"",
    "input": "\"abc\"\n\"abb\"\n\"ab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int findMinimumOperations(string s1, string s2, string s3) {\n        // This problem requires comparing the three strings and trimming them from the right.\n        // The strategy is to make them equal by removing characters from the end.\n        // If at any point, the characters at the current position of all strings that are not empty are not the same,\n        // it's impossible to make them equal, hence return -1.\n        // We keep track of the number of operations needed to make the strings of equal length and content.\n\n        int operations = 0;\n        while (!s1.empty() || !s2.empty() || !s3.empty()) {\n            // Check if the current rightmost characters are the same for all non-empty strings.\n            char c1 = s1.empty() ? 0 : s1.back();\n            char c2 = s2.empty() ? 0 : s2.back();\n            char c3 = s3.empty() ? 0 : s3.back();\n\n            // If all non-empty strings have the same rightmost character or are empty, remove the character(s).\n            if ((c1 == c2 || c1 == 0 || c2 == 0) && (c2 == c3 || c2 == 0 || c3 == 0) && (c1 == c3 || c1 == 0 || c3 == 0)) {\n                if (!s1.empty()) {\n                    s1.pop_back();\n                }\n                if (!s2.empty()) {\n                    s2.pop_back();\n                }\n                if (!s3.empty()) {\n                    s3.pop_back();\n                }\n            } else {\n                // If any of the non-empty strings have a different character, return -1.\n                return -1;\n            }\n\n            // Count the operation if any of the strings was not empty.\n            if (!s1.empty() || !s2.empty() || !s3.empty()) {\n                operations++;\n            }\n        }\n\n        return operations;\n    }\n};"
}