{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7600000,
    "question_id": "3207",
    "elapsed_time": 11,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"abb\"\n\"ab\"",
    "expected_output": "2",
    "task_finish_time": 1706421213715,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1158924881",
    "input_formatted": "\"abc\", \"abb\", \"ab\"",
    "input": "\"abc\"\n\"abb\"\n\"ab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int findMinimumOperations(string s1, string s2, string s3) {\n        int ops = 0; // Initialize operations count\n\n        // We iterate as long as none of the strings are empty\n        while (!s1.empty() && !s2.empty() && !s3.empty()) {\n            // Check if the rightmost characters of all strings are equal\n            if (s1.back() == s2.back() && s2.back() == s3.back()) {\n                // If equal, remove the rightmost character from each string\n                s1.pop_back();\n                s2.pop_back();\n                s3.pop_back();\n            } else {\n                // If not equal, remove the rightmost character from the string(s) with a different character\n                // and increment the operation count accordingly\n                if (s1.back() != s2.back() || s1.back() != s3.back()) {\n                    if (s1.back() != s2.back() || s1.length() >= max(s2.length(), s3.length())) s1.pop_back(), ops++;\n                    if (s2.back() != s1.back() || s2.back() != s3.back() || s2.length() >= max(s1.length(), s3.length())) s2.pop_back(), ops++;\n                    if (s3.back() != s1.back() || s3.back() != s2.back() || s3.length() >= max(s1.length(), s2.length())) s3.pop_back(), ops++;\n                }\n            }\n\n            // If any two strings become empty and the third is not, return -1 as they cannot be made equal\n            if ((s1.empty() && (s2.empty() || s3.empty())) || (s2.empty() && s3.empty())) return -1;\n        }\n\n        // If all strings are made equal (i.e., all are empty), return the number of operations\n        // Otherwise, if they cannot be made equal, return -1\n        return (s1.empty() && s2.empty() && s3.empty()) ? ops : -1;\n    }\n};"
}