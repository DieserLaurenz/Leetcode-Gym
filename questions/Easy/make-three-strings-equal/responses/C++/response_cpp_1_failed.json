{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10872000,
    "question_id": "3207",
    "elapsed_time": 31,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"abb\"\n\"ab\"",
    "expected_output": "2",
    "task_finish_time": 1706472059092,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 166,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1159495508",
    "input_formatted": "\"abc\", \"abb\", \"ab\"",
    "input": "\"abc\"\n\"abb\"\n\"ab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int findMinimumOperations(string s1, string s2, string s3) {\n        // The goal is to find the common prefix that can be formed by removing characters from the end.\n        // If no common prefix exists, return -1. Otherwise, return the total number of deletions needed.\n\n        // Find the shortest string length; this will be the maximum possible length of the common prefix.\n        int minLength = min(s1.length(), min(s2.length(), s3.length()));\n\n        // Reduce all strings to their shortest possible length that could be a common prefix.\n        while (!s1.empty() && s1.length() > minLength) {\n            s1.pop_back();\n        }\n        while (!s2.empty() && s2.length() > minLength) {\n            s2.pop_back();\n        }\n        while (!s3.empty() && s3.length() > minLength) {\n            s3.pop_back();\n        }\n\n        // Check for equality from the end until the strings are of equal length.\n        while (minLength > 0) {\n            if (s1 == s2 && s2 == s3) {\n                break; // Found the common prefix\n            }\n\n            // If not equal, reduce minLength and try again by removing the last character from the strings as needed.\n            if (!s1.empty() && s1.length() == minLength) {\n                s1.pop_back();\n            }\n            if (!s2.empty() && s2.length() == minLength) {\n                s2.pop_back();\n            }\n            if (!s3.empty() && s3.length() == minLength) {\n                s3.pop_back();\n            }\n            minLength--;\n        }\n\n        if (minLength == 0 && (s1 != s2 || s2 != s3)) {\n            // If minLength is reduced to 0 and strings are still not equal, it's impossible to make them equal.\n            return -1;\n        }\n\n        // Calculate the total number of deletions performed.\n        int totalOperations = (s1.length() + s2.length() + s3.length()) - (3 * minLength);\n        return totalOperations;\n    }\n};"
}