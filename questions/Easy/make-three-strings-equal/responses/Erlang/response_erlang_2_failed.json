{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58800000,
    "question_id": "3207",
    "elapsed_time": 5123,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"abb\"\n\"ab\"",
    "expected_output": "2",
    "task_finish_time": 1706440802076,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1159127208",
    "input_formatted": "\"abc\", \"abb\", \"ab\"",
    "input": "\"abc\"\n\"abb\"\n\"ab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_minimum_operations(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), S3 :: unicode:unicode_binary()) -> integer().\nfind_minimum_operations(S1, S2, S3) ->\n    MinOperations = find_operations(S1, S2, S3, 0),\n    case MinOperations of\n        {ok, Ops} -> Ops;\n        error -> -1\n    end.\n\nfind_operations(S1, S2, S3, Ops) when byte_size(S1) =:= 0; byte_size(S2) =:= 0; byte_size(S3) =:= 0 ->\n    if \n        byte_size(S1) =:= 0 andalso byte_size(S2) =:= 0 andalso byte_size(S3) =:= 0 ->\n            {ok, Ops};\n        true -> \n            error\n    end;\nfind_operations(S1, S2, S3, Ops) ->\n    [C1|_] = binary:bin_to_list(S1),\n    [C2|_] = binary:bin_to_list(S2),\n    [C3|_] = binary:bin_to_list(S3),\n    if \n        C1 =:= C2, C2 =:= C3 ->\n            find_operations(binary:part(S1, {1, byte_size(S1) - 1}), binary:part(S2, {1, byte_size(S2) - 1}), binary:part(S3, {1, byte_size(S3) - 1}), Ops);\n        true ->\n            MinSize = min(min(byte_size(S1), byte_size(S2)), byte_size(S3)),\n            try_reduce(S1, S2, S3, MinSize, Ops)\n    end.\n\ntry_reduce(S1, S2, S3, MinSize, Ops) ->\n    case MinSize of\n        0 -> error; % Cannot reduce further, strings are different\n        _ ->\n            Ops1 = case byte_size(S1) > MinSize of true -> 1; false -> 0 end,\n            Ops2 = case byte_size(S2) > MinSize of true -> 1; false -> 0 end,\n            Ops3 = case byte_size(S3) > MinSize of true -> 1; false -> 0 end,\n            NewOps = Ops + Ops1 + Ops2 + Ops3,\n            NewS1 = if Ops1 > 0 -> binary:part(S1, {0, byte_size(S1) - 1}); true -> S1 end,\n            NewS2 = if Ops2 > 0 -> binary:part(S2, {0, byte_size(S2) - 1}); true -> S2 end,\n            NewS3 = if Ops3 > 0 -> binary:part(S3, {0, byte_size(S3) - 1}); true -> S3 end,\n            find_operations(NewS1, NewS2, NewS3, NewOps)\n    end."
}