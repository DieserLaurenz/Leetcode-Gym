{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15396000,
    "question_id": "3207",
    "elapsed_time": 29,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"abb\"\n\"ab\"",
    "expected_output": "2",
    "task_finish_time": 1706429455275,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 288,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1159015052",
    "input_formatted": "\"abc\", \"abb\", \"ab\"",
    "input": "\"abc\"\n\"abb\"\n\"ab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMinimumOperations(_ s1: String, _ s2: String, _ s3: String) -> Int {\n        // Convert strings to arrays for easier character access\n        let arr1 = Array(s1), arr2 = Array(s2), arr3 = Array(s3)\n        // Calculate the minimum length among the three strings\n        let minLength = min(arr1.count, arr2.count, arr3.count)\n        var operations = 0\n        \n        // Check from the end of the strings to find the first mismatching position\n        var mismatchFound = false\n        for i in stride(from: minLength, through: 1, by: -1) {\n            if arr1[arr1.count - i] == arr2[arr2.count - i] && arr2[arr2.count - i] == arr3[arr3.count - i] {\n                // If all characters match up to this point, no mismatch found\n                mismatchFound = false\n            } else {\n                // Mismatch found, need to remove characters\n                mismatchFound = true\n                break\n            }\n        }\n        \n        if !mismatchFound {\n            // If there was no mismatch, calculate total operations needed to make strings equal\n            operations = (arr1.count - minLength) + (arr2.count - minLength) + (arr3.count - minLength)\n        } else {\n            // If a mismatch is found, it's not possible to make strings equal by removing characters\n            return -1\n        }\n        \n        return operations\n    }\n}"
}