{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2120000,
    "question_id": "3207",
    "elapsed_time": 24,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"abb\"\n\"ab\"",
    "expected_output": "2",
    "task_finish_time": 1706436959003,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 282,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1159088435",
    "input_formatted": "\"abc\", \"abb\", \"ab\"",
    "input": "\"abc\"\n\"abb\"\n\"ab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_minimum_operations(s1: String, s2: String, s3: String) -> i32 {\n        let mut s1 = s1.chars().rev().collect::<Vec<_>>();\n        let mut s2 = s2.chars().rev().collect::<Vec<_>>();\n        let mut s3 = s3.chars().rev().collect::<Vec<_>>();\n        \n        let mut operations = 0;\n        \n        loop {\n            let min_len = *vec![s1.len(), s2.len(), s3.len()].iter().min().unwrap();\n            \n            // Break if all strings are empty, meaning they are equal.\n            if min_len == 0 {\n                break;\n            }\n            \n            let mut chars = vec![];\n            if s1.len() > 0 { chars.push(s1[s1.len() - 1]); }\n            if s2.len() > 0 { chars.push(s2[s2.len() - 1]); }\n            if s3.len() > 0 { chars.push(s3[s3.len() - 1]); }\n            \n            // Check if characters at current position are equal\n            if chars.iter().all(|&x| x == chars[0]) {\n                // Characters are equal, move to the next character\n                if s1.len() > 0 { s1.pop(); }\n                if s2.len() > 0 { s2.pop(); }\n                if s3.len() > 0 { s3.pop(); }\n            } else {\n                // Find which strings need to be shortened\n                if s1.len() == min_len { s1.pop(); }\n                if s2.len() == min_len { s2.pop(); }\n                if s3.len() == min_len { s3.pop(); }\n                operations += 1;\n            }\n            \n            // If one string is empty but others are not, and characters do not match\n            if chars.iter().any(|&x| x != chars[0]) && min_len == 0 {\n                return -1;\n            }\n        }\n        \n        // Check if all strings became equal\n        if s1.is_empty() && s2.is_empty() && s3.is_empty() {\n            operations\n        } else {\n            -1\n        }\n    }\n}"
}