{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "662 ms",
    "memory": 73012000,
    "question_id": "3207",
    "elapsed_time": 818,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706442418197,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1935,
    "total_testcases": 1935,
    "runtime_percentile": 100,
    "status_memory": "73 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1159142867",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_minimum_operations(s1 :: String.t, s2 :: String.t, s3 :: String.t) :: integer\n  def find_minimum_operations(s1, s2, s3) do\n    # Determine the common prefix length\n    common_prefix_length = common_prefix_length(s1, s2, s3)\n\n    # If the common prefix length is 0 and strings are not already the same, return -1\n    if common_prefix_length == 0 and Enum.uniq([s1, s2, s3]) != [\"\"], do: -1, else: calculate_operations(s1, s2, s3, common_prefix_length)\n  end\n\n  defp common_prefix_length(s1, s2, s3) do\n    s1 |> String.graphemes()\n       |> Enum.zip(String.graphemes(s2))\n       |> Enum.zip(String.graphemes(s3))\n       |> Enum.take_while(fn {{a, b}, c} -> a == b and b == c end)\n       |> length()\n  end\n\n  defp calculate_operations(s1, s2, s3, common_prefix_length) do\n    total_length = String.length(s1) + String.length(s2) + String.length(s3)\n    operations_needed = total_length - (common_prefix_length * 3)\n  end\nend"
}