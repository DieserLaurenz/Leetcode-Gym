{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "40 ms",
    "memory": 16600000,
    "question_id": "3207",
    "elapsed_time": 61,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708714498426,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1935,
    "total_testcases": 1935,
    "runtime_percentile": 83.51320000000001,
    "status_memory": "16.6 MB",
    "memory_percentile": 88.5978,
    "pretty_lang": "Python3",
    "submission_id": "1184248160",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution:\n    def findMinimumOperations(self, s1: str, s2: str, s3: str) -> int:\n        # Find the shortest common prefix length\n        min_len = min(len(s1), len(s2), len(s3))\n        i = 0\n        while i < min_len and s1[i] == s2[i] == s3[i]:\n            i += 1\n        \n        # If the shortest common prefix is not the full length of at least one string, return -1\n        if i == 0:\n            return -1\n        \n        # Calculate the minimum number of operations required\n        return (len(s1) - i) + (len(s2) - i) + (len(s3) - i)"
}