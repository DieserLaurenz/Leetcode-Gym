{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36908000,
    "question_id": "3207",
    "elapsed_time": 505,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"oby\"\n\"obz\"\n\"obf\"",
    "expected_output": "3",
    "task_finish_time": 1706430475848,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 875,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1159025116",
    "input_formatted": "\"oby\", \"obz\", \"obf\"",
    "input": "\"oby\"\n\"obz\"\n\"obf\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun findMinimumOperations(s1: String, s2: String, s3: String): Int {\n        // Find the minimum length among the three strings\n        val minLength = minOf(s1.length, s2.length, s3.length)\n\n        // Check if prefixes of the strings can be made equal\n        for (i in 0 until minLength) {\n            if (s1[i] != s2[i] || s2[i] != s3[i]) {\n                // If characters are different, check if it's because strings are of different lengths\n                // If yes, we can delete characters from longer strings, otherwise return -1\n                return if (s1[i] == s2[i] || s2[i] == s3[i] || s1[i] == s3[i]) {\n                    // If any two characters are equal, continue checking\n                    continue\n                } else {\n                    // If all three characters are different, it's impossible to make strings equal\n                    return -1\n                }\n            }\n        }\n\n        // If we reached here, it means prefixes can be made equal\n        // The minimum number of operations is the sum of deletions needed to match the minimum length string\n        return (s1.length - minLength) + (s2.length - minLength) + (s3.length - minLength)\n    }\n}"
}