{
    "status_code": 14,
    "lang": "dart",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 148608000,
    "question_id": "3207",
    "elapsed_time": 5026,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"dac\"\n\"bac\"\n\"cac\"",
    "expected_output": "-1",
    "task_finish_time": 1706432760130,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 1935,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1159046461",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n  int findMinimumOperations(String s1, String s2, String s3) {\n    // Initially, there are no operations performed.\n    int operations = 0;\n\n    // Find the shortest string's length to know the maximum possible common suffix length.\n    int minLen = [s1.length, s2.length, s3.length].reduce((a, b) => a < b ? a : b);\n\n    while (s1.isNotEmpty && s2.isNotEmpty && s3.isNotEmpty) {\n      // If the last characters of all strings are the same, potentially they can be made equal,\n      // so move to the next character by trimming the strings.\n      if (s1[s1.length - 1] == s2[s2.length - 1] && s2[s2.length - 1] == s3[s3.length - 1]) {\n        s1 = s1.substring(0, s1.length - 1);\n        s2 = s2.substring(0, s2.length - 1);\n        s3 = s3.substring(0, s3.length - 1);\n      } else {\n        // If not, delete the rightmost character from the longer strings to try to make them equal.\n        if (s1.length > minLen) {\n          s1 = s1.substring(0, s1.length - 1);\n          operations++;\n        }\n        if (s2.length > minLen) {\n          s2 = s2.substring(0, s2.length - 1);\n          operations++;\n        }\n        if (s3.length > minLen) {\n          s3 = s3.substring(0, s3.length - 1);\n          operations++;\n        }\n      }\n\n      // Update minLen to reflect any changes made by trimming the strings.\n      minLen = [s1.length, s2.length, s3.length].reduce((a, b) => a < b ? a : b);\n\n      // If at any point, two strings are empty and one is not, or any two strings do not have the possibility of becoming equal, return -1.\n      if ((s1.isEmpty || s2.isEmpty || s3.isEmpty) && !(s1.isEmpty && s2.isEmpty && s3.isEmpty)) {\n        return -1;\n      }\n    }\n\n    // If all strings have been reduced to the empty string without returning, they can be made equal with the counted operations.\n    return operations;\n  }\n}"
}