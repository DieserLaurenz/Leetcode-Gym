{
    "acRate": 41.42574485659949,
    "difficulty": "Easy",
    "freqBar": null,
    "questionId": "3207",
    "frontendQuestionId": "2937",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Make Three Strings Equal",
    "titleSlug": "make-three-strings-equal",
    "topicTags": [
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int findMinimumOperations(string s1, string s2, string s3) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int findMinimumOperations(String s1, String s2, String s3) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def findMinimumOperations(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: int\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def findMinimumOperations(self, s1: str, s2: str, s3: str) -> int:\n        "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int findMinimumOperations(char* s1, char* s2, char* s3) {\n    \n}"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int FindMinimumOperations(string s1, string s2, string s3) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {string} s3\n * @return {number}\n */\nvar findMinimumOperations = function(s1, s2, s3) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findMinimumOperations(s1: string, s2: string, s3: string): number {\n    \n};"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param String $s3\n     * @return Integer\n     */\n    function findMinimumOperations($s1, $s2, $s3) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func findMinimumOperations(_ s1: String, _ s2: String, _ s3: String) -> Int {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun findMinimumOperations(s1: String, s2: String, s3: String): Int {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  int findMinimumOperations(String s1, String s2, String s3) {\n    \n  }\n}"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findMinimumOperations(s1 string, s2 string, s3 string) int {\n    \n}"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s1\n# @param {String} s2\n# @param {String} s3\n# @return {Integer}\ndef find_minimum_operations(s1, s2, s3)\n    \nend"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def findMinimumOperations(s1: String, s2: String, s3: String): Int = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn find_minimum_operations(s1: String, s2: String, s3: String) -> i32 {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (find-minimum-operations s1 s2 s3)\n  (-> string? string? string? exact-integer?)\n  )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec find_minimum_operations(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary(), S3 :: unicode:unicode_binary()) -> integer().\nfind_minimum_operations(S1, S2, S3) ->\n  ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec find_minimum_operations(s1 :: String.t, s2 :: String.t, s3 :: String.t) :: integer\n  def find_minimum_operations(s1, s2, s3) do\n    \n  end\nend"
        }
    ],
    "content": "You are given three strings s1, s2, and s3. You have to perform the following operation on these three strings as many times as you want.\nIn one operation you can choose one of these three strings such that its length is at least 2 and delete the rightmost character of it.\nReturn the minimum number of operations you need to perform to make the three strings equal if there is a way to make them equal, otherwise, return -1.\n\nExample 1:\n\nInput: s1 = \"abc\", s2 = \"abb\", s3 = \"ab\"\nOutput: 2\nExplanation: Performing operations on s1 and s2 once will lead to three equal strings.\nIt can be shown that there is no way to make them equal with less than two operations.\nExample 2:\n\nInput: s1 = \"dac\", s2 = \"bac\", s3 = \"cac\"\nOutput: -1\nExplanation: Because the leftmost letters of s1 and s2 are not equal, they could not be equal after any number of operations. So the answer is -1.\n\n\nConstraints:\n\n1 <= s1.length, s2.length, s3.length <= 100\ns1, s2 and s3 consist only of lowercase English letters.\n\n"
}