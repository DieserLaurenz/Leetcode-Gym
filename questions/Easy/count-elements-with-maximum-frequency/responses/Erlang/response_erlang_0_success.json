{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "265 ms",
    "memory": 59532000,
    "question_id": "3242",
    "elapsed_time": 1338,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706125468537,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 623,
    "total_testcases": 623,
    "runtime_percentile": 100,
    "status_memory": "59.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1155873648",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec max_frequency_elements(Nums :: [integer()]) -> integer().\nmax_frequency_elements(Nums) ->\n    % Count the frequency of each element\n    Freqs = lists:foldl(fun(X, Acc) -> maps:update_with(X, fun(Y) -> Y + 1 end, 1, Acc) end, #{}, Nums),\n    \n    % Find the maximum frequency\n    MaxFreq = maps:fold(fun(_Key, Value, Max) -> max(Value, Max) end, 0, Freqs),\n\n    % Sum the frequencies of elements that have the maximum frequency\n    SumMaxFreq = maps:fold(fun(_Key, Value, Sum) -> if Value == MaxFreq -> Sum + Value; true -> Sum end end, 0, Freqs),\n\n    SumMaxFreq."
}