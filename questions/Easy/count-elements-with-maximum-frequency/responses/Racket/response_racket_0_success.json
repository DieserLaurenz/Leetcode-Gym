{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "232 ms",
    "memory": 127428000,
    "question_id": "3242",
    "elapsed_time": 325,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706125399395,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 623,
    "total_testcases": 623,
    "runtime_percentile": 100,
    "status_memory": "127.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1155872844",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (max-frequency-elements nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (let ([frequencies (foldl (lambda (num freq-map)\n                              (dict-update freq-map num add1 0))\n                            (make-immutable-hash) nums)])\n    (let ([max-freq (apply max (dict-values frequencies))])\n      (foldl (lambda (pair acc)\n               (if (= (cdr pair) max-freq)\n                   (+ acc (cdr pair))\n                   acc))\n             0\n             (dict->list frequencies)))))"
}