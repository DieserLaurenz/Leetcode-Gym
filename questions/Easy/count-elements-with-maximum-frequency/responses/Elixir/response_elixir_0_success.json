{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "335 ms",
    "memory": 72168000,
    "question_id": "3242",
    "elapsed_time": 476,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706125542143,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 623,
    "total_testcases": 623,
    "runtime_percentile": 25.0,
    "status_memory": "72.2 MB",
    "memory_percentile": 25.0,
    "pretty_lang": "Elixir",
    "submission_id": "1155874500",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_frequency_elements(nums :: [integer]) :: integer\n  def max_frequency_elements(nums) do\n    # Count the frequency of each element\n    freq_map = Enum.reduce(nums, %{}, fn num, acc ->\n      Map.update(acc, num, 1, &(&1 + 1))\n    end)\n\n    # Find the maximum frequency\n    max_freq = freq_map |> Enum.map(fn {_num, freq} -> freq end) |> Enum.max()\n\n    # Sum the frequencies of elements that have the maximum frequency\n    freq_map\n    |> Enum.filter(fn {_num, freq} -> freq == max_freq end)\n    |> Enum.map(fn {_num, freq} -> freq end)\n    |> Enum.sum()\n  end\nend"
}