{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2172000,
    "question_id": "3242",
    "elapsed_time": 28,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3,1,4]",
    "expected_output": "4",
    "task_finish_time": 1706125281830,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 152,
    "total_testcases": 623,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1155871456",
    "input_formatted": "[1,2,2,3,1,4]",
    "input": "[1,2,2,3,1,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn max_frequency_elements(nums: Vec<i32>) -> i32 {\n        let mut freq_map = HashMap::new();\n\n        // Count the frequency of each element\n        for &num in &nums {\n            *freq_map.entry(num).or_insert(0) += 1;\n        }\n\n        // Find the maximum frequency\n        let max_freq = freq_map.values().max().unwrap_or(&0);\n\n        // Count elements with the maximum frequency\n        freq_map.values().filter(|&&freq| freq == *max_freq).count() as i32\n    }\n}"
}