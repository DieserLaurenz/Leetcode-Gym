{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2168000,
    "question_id": "3242",
    "elapsed_time": 10,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706125333173,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 623,
    "total_testcases": 623,
    "runtime_percentile": 100,
    "status_memory": "2.2 MB",
    "memory_percentile": 57.6923,
    "pretty_lang": "Rust",
    "submission_id": "1155872047",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn max_frequency_elements(nums: Vec<i32>) -> i32 {\n        let mut freq_map = HashMap::new();\n\n        // Count the frequency of each element\n        for &num in &nums {\n            *freq_map.entry(num).or_insert(0) += 1;\n        }\n\n        // Find the maximum frequency\n        let max_freq = freq_map.values().max().unwrap_or(&0);\n\n        // Sum frequencies of elements with the maximum frequency\n        freq_map.values().filter(|&&freq| freq == *max_freq).map(|&freq| freq).sum::<i32>()\n    }\n}"
}