{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "error: undefined function &&&/2 (expected Solution to define such a function or for it to be imported, but none are available)",
    "full_compile_error": "error: undefined function &&&/2 (expected Solution to define such a function or for it to be imported, but none are available)\nLine 8:   Solution.find_k_or/2\nerror: undefined function <<</2 (expected Solution to define such a function or for it to be imported, but none are available)\nLine 8:   Solution.find_k_or/2\nerror: undefined function <<</2 (expected Solution to define such a function or for it to be imported, but none are available)\nLine 9:   Solution.find_k_or/2\nerror: undefined function |||/2 (expected Solution to define such a function or for it to be imported, but none are available)\nLine 9:   Solution.find_k_or/2\n** (CompileError) solution.ex: cannot compile module Solution (errors have been logged)",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3183",
    "task_finish_time": 1706288870940,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1157584364",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_k_or(nums :: [integer], k :: integer) :: integer\n  def find_k_or(nums, k) do\n    max_bit_length = Enum.max(nums) |> :math.log2() |> Float.ceil() |> trunc()\n\n    0..(max_bit_length - 1)\n    |> Enum.reduce(0, fn bit, acc ->\n      count = Enum.count(nums, fn num -> num &&& (1 <<< bit) != 0 end)\n      if count >= k, do: acc ||| (1 <<< bit), else: acc\n    end)\n  end\nend"
}