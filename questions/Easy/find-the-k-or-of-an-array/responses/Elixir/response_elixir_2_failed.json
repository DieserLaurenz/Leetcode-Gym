{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "",
    "full_compile_error": "Line 12: Char 37: ** (SyntaxError) syntax error before: 'band'\n    |\n 12 |       count = Enum.count(nums, &(&1 band (1 <<< bit) != 0))\n    |                                     ^\n    (elixir 1.15.7) lib/kernel/parallel_compiler.ex:377: anonymous fn/5 in Kernel.ParallelCompiler.spawn_workers/8",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3183",
    "task_finish_time": 1706290130875,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1157603209",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_k_or(nums :: [integer], k :: integer) :: integer\n  def find_k_or(nums, k) do\n    max_bit_length = nums\n                     |> Enum.max()\n                     |> :math.log2()\n                     |> Float.ceil()\n                     |> trunc()\n\n    0..(max_bit_length - 1)\n    |> Enum.reduce(0, fn bit, acc ->\n      count = Enum.count(nums, &(&1 band (1 <<< bit) != 0))\n      if count >= k, do: (acc bor (1 <<< bit)), else: acc\n    end)\n  end\nend"
}