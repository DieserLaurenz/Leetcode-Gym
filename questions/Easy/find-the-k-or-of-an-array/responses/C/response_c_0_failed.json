{
    "status_code": 15,
    "lang": "c",
    "run_success": false,
    "runtime_error": "Line 7: Char 22: runtime error: left shift of 1 by 31 places cannot be represented in type 'int' [solution.c]",
    "full_runtime_error": "Line 7: Char 22: runtime error: left shift of 1 by 31 places cannot be represented in type 'int' [solution.c]",
    "status_runtime": "N/A",
    "memory": 5344000,
    "question_id": "3183",
    "elapsed_time": 18,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[7,12,9,8,9,15]\n4",
    "expected_output": "9",
    "task_finish_time": 1706277264074,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 951,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1157429786",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "int findKOr(int* nums, int numsSize, int k) {\n    int result = 0;\n\n    // Iterate over each bit position\n    for (int bit = 0; bit < 32; ++bit) {\n        int count = 0;\n        int mask = 1 << bit;\n\n        // Count how many numbers have this bit set\n        for (int i = 0; i < numsSize; ++i) {\n            if ((nums[i] & mask) != 0) {\n                ++count;\n            }\n        }\n\n        // If count is at least k, set this bit in the result\n        if (count >= k) {\n            result |= mask;\n        }\n    }\n\n    return result;\n}"
}