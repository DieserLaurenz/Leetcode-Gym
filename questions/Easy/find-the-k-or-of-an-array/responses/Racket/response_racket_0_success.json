{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "232 ms",
    "memory": 100820000,
    "question_id": "3183",
    "elapsed_time": 362,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706287910085,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 951,
    "total_testcases": 951,
    "runtime_percentile": 100,
    "status_memory": "100.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1157570338",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (find-k-or nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  \n  (let loop ([i 0] [result 0])\n    (if (< i 31) ; since 0 <= nums[i] < 2^31\n        (let ([count (count-bits-set nums i)])\n          (loop (+ i 1)\n                (if (>= count k)\n                    (bitwise-ior result (expt 2 i))\n                    result)))\n        result)))\n\n(define (count-bits-set nums bit)\n  (foldl (lambda (num acc)\n           (if (= (bitwise-and num (expt 2 bit)) (expt 2 bit))\n               (+ acc 1)\n               acc))\n         0\n         nums))"
}