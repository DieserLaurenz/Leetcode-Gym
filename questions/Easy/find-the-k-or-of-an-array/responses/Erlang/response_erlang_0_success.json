{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "355 ms",
    "memory": 60280000,
    "question_id": "3183",
    "elapsed_time": 1512,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706288391100,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 951,
    "total_testcases": 951,
    "runtime_percentile": 100,
    "status_memory": "60.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1157577414",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec find_k_or(Nums :: [integer()], K :: integer()) -> integer().\nfind_k_or(Nums, K) ->\n    find_k_or(Nums, K, 0, 0).\n\nfind_k_or(_Nums, _K, 31, Result) -> \n    Result;\nfind_k_or(Nums, K, Bit, Acc) ->\n    Count = count_set_bits(Nums, Bit),\n    NewAcc = if Count >= K -> Acc bor (1 bsl Bit);\n                true -> Acc\n             end,\n    find_k_or(Nums, K, Bit + 1, NewAcc).\n\ncount_set_bits(Nums, Bit) ->\n    lists:foldl(fun(Num, Acc) -> \n                    if (Num band (1 bsl Bit)) =/= 0 -> Acc + 1;\n                       true -> Acc\n                    end\n                end, 0, Nums)."
}