{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 2144000,
    "question_id": "3183",
    "elapsed_time": 33,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706287431167,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 951,
    "total_testcases": 951,
    "runtime_percentile": 66.66660000000002,
    "status_memory": "2.1 MB",
    "memory_percentile": 50.00000000000001,
    "pretty_lang": "Rust",
    "submission_id": "1157563411",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_k_or(nums: Vec<i32>, k: i32) -> i32 {\n        let mut result = 0;\n\n        // Iterate through each bit position (since i32 has 32 bits)\n        for bit in 0..32 {\n            let mask = 1 << bit;\n            let mut count = 0;\n\n            // Count how many numbers have this bit set\n            for &num in &nums {\n                if num & mask != 0 {\n                    count += 1;\n                }\n            }\n\n            // If at least k numbers have this bit set, include it in the result\n            if count >= k {\n                result |= mask;\n            }\n        }\n\n        result\n    }\n}"
}