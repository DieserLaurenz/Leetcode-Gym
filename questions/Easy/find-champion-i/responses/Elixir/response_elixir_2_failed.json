{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 7: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 7: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:7: anonymous fn/3 in Solution.find_champion/1\n    (elixir 1.15.7) lib/enum.ex:4204: Enum.predicate_range/5\n    solution.ex:7: anonymous fn/3 in Solution.find_champion/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:30: Driver.consume_test_cases/2\n    solution.ex:18: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 74308000,
    "question_id": "3188",
    "elapsed_time": 377,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[0,1],[0,0]]",
    "expected_output": "0",
    "task_finish_time": 1706223469147,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 587,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1156900756",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_champion(grid :: [[integer]]) :: integer\n  def find_champion(grid) do\n    # Iterate through each team\n    Enum.reduce(0..length(grid)-1, -1, fn i, acc ->\n      # If current team defeats all other teams, return its index\n      if Enum.all?(0..length(grid)-1, fn j -> i == j or grid[i][j] == 1 end) do\n        i\n      else\n        acc\n      end\n    end)\n  end\nend"
}