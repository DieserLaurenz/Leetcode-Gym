{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "63 ms",
    "memory": 9188000,
    "question_id": "3188",
    "elapsed_time": 86,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706214168236,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 587,
    "total_testcases": 587,
    "runtime_percentile": 95.5882,
    "status_memory": "9.2 MB",
    "memory_percentile": 94.1176,
    "pretty_lang": "C",
    "submission_id": "1156820310",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int findChampion(int** grid, int gridSize, int* gridColSize) {\n    // Iterate over each team\n    for (int i = 0; i < gridSize; i++) {\n        int isChampion = 1; // Assume team i is the champion initially\n\n        // Check if any other team is stronger than team i\n        for (int j = 0; j < gridSize; j++) {\n            if (i != j && grid[j][i] == 1) {\n                // If any team j is stronger than team i, then team i cannot be the champion\n                isChampion = 0;\n                break;\n            }\n        }\n\n        // If no team is stronger than team i, then team i is the champion\n        if (isChampion) {\n            return i;\n        }\n    }\n\n    // This line should never be reached, as per the problem constraints\n    return -1;\n}"
}