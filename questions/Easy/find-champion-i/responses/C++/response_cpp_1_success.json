{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "57 ms",
    "memory": 39676000,
    "question_id": "3188",
    "elapsed_time": 84,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706213209695,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 587,
    "total_testcases": 587,
    "runtime_percentile": 70.87059999999997,
    "status_memory": "39.7 MB",
    "memory_percentile": 7.206900000000002,
    "pretty_lang": "C++",
    "submission_id": "1156810359",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int findChampion(vector<vector<int>>& grid) {\n        int champion = 0;\n        int n = grid.size();\n\n        for (int i = 1; i < n; ++i) {\n            if (grid[champion][i] == 0) {\n                // If the current champion loses to team i, then team i becomes the new potential champion\n                champion = i;\n            }\n        }\n\n        // Verify if the chosen champion is indeed stronger than all other teams\n        for (int i = 0; i < n; ++i) {\n            if (i != champion && (grid[champion][i] == 0 || grid[i][champion] == 1)) {\n                return -1;  // No champion found\n            }\n        }\n\n        return champion;\n    }\n};"
}