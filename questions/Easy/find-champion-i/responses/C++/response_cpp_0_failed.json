{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40072000,
    "question_id": "3188",
    "elapsed_time": 80,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[[0,1],[0,0]]",
    "expected_output": "0",
    "task_finish_time": 1706212548353,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 587,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1156803328",
    "input_formatted": "[[0,1],[0,0]]",
    "input": "[[0,1],[0,0]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int findChampion(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<int> isStronger(n, 1); // Initially, assume every team could be the champion\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] == 0) {\n                    // If team i is not stronger than team j, then team i cannot be the champion\n                    isStronger[i] = 0;\n                    break;\n                }\n            }\n        }\n\n        // Find the team that is stronger than all others\n        for (int i = 0; i < n; ++i) {\n            if (isStronger[i]) {\n                return i;\n            }\n        }\n\n        return -1; // This line will never be reached due to problem constraints\n    }\n};"
}