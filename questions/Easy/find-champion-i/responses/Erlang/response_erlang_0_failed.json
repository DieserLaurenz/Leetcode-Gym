{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72408000,
    "question_id": "3188",
    "elapsed_time": 1555,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[[0,1],[0,0]]",
    "expected_output": "0",
    "task_finish_time": 1706220590153,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 110,
    "total_testcases": 587,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1156878837",
    "input_formatted": "[[0,1],[0,0]]",
    "input": "[[0,1],[0,0]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_champion(Grid :: [[integer()]]) -> integer().\nfind_champion(Grid) ->\n    find_champion(Grid, 0, -1).\n\nfind_champion([], _, Champion) ->\n    Champion;\nfind_champion([Row | Rest], Index, _) ->\n    case is_champion(Row) of\n        true -> find_champion(Rest, Index + 1, Index);\n        false -> find_champion(Rest, Index + 1, -1)\n    end.\n\nis_champion(Row) ->\n    lists:all(fun(X) -> X == 1 end, Row -- [0])."
}