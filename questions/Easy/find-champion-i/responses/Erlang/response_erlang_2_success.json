{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "363 ms",
    "memory": 71288000,
    "question_id": "3188",
    "elapsed_time": 1471,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706221790261,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 587,
    "total_testcases": 587,
    "runtime_percentile": 100,
    "status_memory": "71.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1156887848",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec find_champion(Grid :: [[integer()]]) -> integer().\nfind_champion(Grid) ->\n    find_champion(Grid, 0, -1, -1).\n\nfind_champion([], _, Champion, _) ->\n    Champion;\nfind_champion([Row | Rest], Index, CurrentChampion, MaxWins) ->\n    Wins = count_wins(Row),\n    case Wins > MaxWins of\n        true -> find_champion(Rest, Index + 1, Index, Wins);\n        false -> find_champion(Rest, Index + 1, CurrentChampion, MaxWins)\n    end.\n\ncount_wins(Row) ->\n    lists:foldl(fun(X, Acc) -> Acc + X end, 0, Row)."
}