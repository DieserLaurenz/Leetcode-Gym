{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "660 ms",
    "memory": 58556000,
    "question_id": "3188",
    "elapsed_time": 867,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706219573298,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 587,
    "total_testcases": 587,
    "runtime_percentile": 100,
    "status_memory": "58.6 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Scala",
    "submission_id": "1156870699",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findChampion(grid: Array[Array[Int]]): Int = {\n        val n = grid.length\n        for (i <- 0 until n) {\n            var wins = 0\n            for (j <- 0 until n) {\n                if (grid(i)(j) == 1) wins += 1\n            }\n            if (wins == n - 1) return i\n        }\n        -1 // return -1 if no champion is found, which should not happen given the problem constraints\n    }\n}"
}