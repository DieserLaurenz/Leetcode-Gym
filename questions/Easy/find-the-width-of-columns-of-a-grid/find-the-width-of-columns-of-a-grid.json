{
    "acRate": 66.30075313342412,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2639",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Width of Columns of a Grid",
    "titleSlug": "find-the-width-of-columns-of-a-grid",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Matrix",
            "id": "VG9waWNUYWdOb2RlOjYxMDUz",
            "slug": "matrix"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> findColumnWidth(vector<vector<int>>& grid) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] findColumnWidth(int[][] grid) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def findColumnWidth(self, grid):         \"\"\"         :type grid: List[List[int]]         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def findColumnWidth(self, grid: List[List[int]]) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* findColumnWidth(int** grid, int gridSize, int* gridColSize, int* returnSize) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] FindColumnWidth(int[][] grid) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} grid  * @return {number[]}  */ var findColumnWidth = function(grid) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findColumnWidth(grid: number[][]): number[] {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $grid      * @return Integer[]      */     function findColumnWidth($grid) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func findColumnWidth(_ grid: [[Int]]) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun findColumnWidth(grid: Array<IntArray>): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> findColumnWidth(List<List<int>> grid) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findColumnWidth(grid [][]int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} grid # @return {Integer[]} def find_column_width(grid)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def findColumnWidth(grid: Array[Array[Int]]): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (find-column-width grid)   (-> (listof (listof exact-integer?)) (listof exact-integer?))   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec find_column_width(Grid :: [[integer()]]) -> [integer()]. find_column_width(Grid) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec find_column_width(grid :: [[integer]]) :: [integer]   def find_column_width(grid) do        end end"
        }
    ],
    "content": "You are given a 0-indexed m x n integer matrix grid. The width of a column is the maximum length of its integers.  For example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3.  Return an integer array ans of size n where ans[i] is the width of the ith column. The length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.  Example 1:  Input: grid = [[1],[22],[333]] Output: [3] Explanation: In the 0th column, 333 is of length 3.  Example 2:  Input: grid = [[-15,1,3],[15,7,12],[5,6,-2]] Output: [3,1,2] Explanation:  In the 0th column, only -15 is of length 3. In the 1st column, all integers are of length 1.  In the 2nd column, both 12 and -2 are of length 2.   Constraints:  m == grid.length n == grid[i].length 1 <= m, n <= 100  -109 <= grid[r][c] <= 109  "
}