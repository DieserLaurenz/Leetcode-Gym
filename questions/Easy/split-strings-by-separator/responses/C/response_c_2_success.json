{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "35 ms",
    "memory": 15096000,
    "question_id": "2881",
    "elapsed_time": 56,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706668811619,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1036,
    "total_testcases": 1036,
    "runtime_percentile": 54.545500000000004,
    "status_memory": "15.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "C",
    "submission_id": "1161592890",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar **splitWordsBySeparator(char **words, int wordsSize, char separator, int *returnSize) {\n    // Assuming a worst-case scenario where every character could be a potential split,\n    // allocate enough space to accommodate all possible splits.\n    char **result = (char **)malloc(wordsSize * 20 * sizeof(char *)); // Each word can at most produce 20 splits\n    *returnSize = 0;\n\n    for (int i = 0; i < wordsSize; i++) {\n        char *word = words[i];\n        int wordLen = strlen(word);\n        char *temp = (char *)malloc((wordLen + 1) * sizeof(char));\n        int tempIndex = 0;\n\n        for (int j = 0; j <= wordLen; j++) {\n            if (word[j] == separator || word[j] == '\\0') {\n                if (tempIndex != 0) { // Avoid adding empty strings\n                    temp[tempIndex] = '\\0'; // Null-terminate the current string\n                    result[*returnSize] = (char *)malloc((tempIndex + 1) * sizeof(char));\n                    strcpy(result[*returnSize], temp);\n                    (*returnSize)++;\n                    tempIndex = 0; // Reset tempIndex for the next word\n                }\n            } else {\n                temp[tempIndex++] = word[j];\n            }\n        }\n        free(temp);\n    }\n\n    // Optionally, reallocate the result to fit the actual size\n    result = (char **)realloc(result, (*returnSize) * sizeof(char *));\n    return result;\n}"
}