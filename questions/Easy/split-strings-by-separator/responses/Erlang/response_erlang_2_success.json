{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "402 ms",
    "memory": 64856000,
    "question_id": "2881",
    "elapsed_time": 1516,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706669396256,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1036,
    "total_testcases": 1036,
    "runtime_percentile": 100,
    "status_memory": "64.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1161598384",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec split_words_by_separator(Words :: [unicode:unicode_binary()], Separator :: char()) -> [unicode:unicode_binary()].\nsplit_words_by_separator(Words, Separator) ->\n    SeparatorBinary = <<Separator/utf8>>,\n    SplittedWords = lists:map(fun(Word) -> binary:split(Word, SeparatorBinary, [global]) end, Words),\n    lists:foldl(fun(WordList, Acc) -> \n                    [W || W <- WordList, W =/= <<>>] ++ Acc end, [], lists:reverse(SplittedWords))."
}