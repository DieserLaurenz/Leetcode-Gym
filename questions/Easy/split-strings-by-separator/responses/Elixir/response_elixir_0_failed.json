{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73332000,
    "question_id": "2881",
    "elapsed_time": 612,
    "compare_result
    "code_output": "[\"one.two.three\",\"four.five\",\"six\"]",
    "std_output": "",
    "last_testcase": "[\"one.two.three\",\"four.five\",\"six\"]\n\".\"",
    "expected_output": "[\"one\",\"two\",\"three\",\"four\",\"five\",\"six\"]",
    "task_finish_time": 1706669442465,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 58,
    "total_testcases": 1036,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1161598781",
    "input_formatted": "[\"one.two.three\",\"four.five\",\"six\"], \".\"",
    "input": "[\"one.two.three\",\"four.five\",\"six\"]\n\".\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec split_words_by_separator(words :: [String.t], separator :: char) :: [String.t]\n  def split_words_by_separator(words, separator) do\n    Enum.flat_map(words, fn word ->\n      String.split(word, to_string(separator), trim: true)\n    end)\n  end\nend"
}