{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72224000,
    "question_id": "2886",
    "elapsed_time": 870,
    "compare_result
    "code_output": "\"string\"",
    "std_output": "",
    "last_testcase": "\"string\"",
    "expected_output": "\"rtsng\"",
    "task_finish_time": 1706211414363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 386,
    "total_testcases": 3005,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1156790288",
    "input_formatted": "\"string\"",
    "input": "\"string\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec final_string(s :: String.t) :: String.t\n  def final_string(s) do\n    s\n    |> String.to_charlist()\n    |> Enum.reduce(\"\", fn \n      'i', acc -> String.reverse(acc)\n      char, acc -> acc <> to_string([char])\n    end)\n  end\nend"
}