{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59464000,
    "question_id": "2886",
    "elapsed_time": 1710,
    "compare_result
    "code_output": "\"gnstr\"",
    "std_output": "",
    "last_testcase": "\"string\"",
    "expected_output": "\"rtsng\"",
    "task_finish_time": 1706209672534,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 456,
    "total_testcases": 3005,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1156769615",
    "input_formatted": "\"string\"",
    "input": "\"string\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec final_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfinal_string(S) ->\n    final_string(binary_to_list(S), []).\n\nfinal_string([], Acc) ->\n    list_to_binary(Acc);\nfinal_string([C | Rest], Acc) ->\n    case C of\n        $i ->\n            final_string(Rest, lists:reverse(Acc));\n        _ ->\n            final_string(Rest, [C | Acc])\n    end."
}