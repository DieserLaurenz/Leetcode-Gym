{
    "acRate": 79.68416276959587,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2620",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Counter",
    "titleSlug": "counter",
    "topicTags": [],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} n  * @return {Function} counter  */ var createCounter = function(n) {          return function() {              }; };  /**   * const counter = createCounter(10)  * counter() // 10  * counter() // 11  * counter() // 12  */"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function createCounter(n: number): () => number {          return function() {              } }   /**   * const counter = createCounter(10)  * counter() // 10  * counter() // 11  * counter() // 12  */"
        }
    ],
    "content": "Given an integern,return a counter function. This counter function initially returnsnand then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).  Example 1:  Input:  n = 10  [\"call\",\"call\",\"call\"] Output: [10,11,12] Explanation:  counter() = 10 // The first time counter() is called, it returns n. counter() = 11 // Returns 1 more than the previous time. counter() = 12 // Returns 1 more than the previous time.  Example 2:  Input:  n = -2 [\"call\",\"call\",\"call\",\"call\",\"call\"] Output: [-2,-1,0,1,2] Explanation: counter() initially returns -2. Then increases after each sebsequent call.   Constraints:  -1000<= n <= 1000 0 <= calls.length <= 1000 calls[i] === \"call\"  "
}