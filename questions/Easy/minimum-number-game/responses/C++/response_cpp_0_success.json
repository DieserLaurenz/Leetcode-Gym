{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "7 ms",
    "memory": 27360000,
    "question_id": "3226",
    "elapsed_time": 28,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706533500897,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 804,
    "total_testcases": 804,
    "runtime_percentile": 71.62810000000002,
    "status_memory": "27.4 MB",
    "memory_percentile": 5.013500000000002,
    "pretty_lang": "C++",
    "submission_id": "1160067180",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    vector<int> numberGame(vector<int>& nums) {\n        // Sort the nums array in ascending order to simulate the removal of minimum elements easily\n        sort(nums.begin(), nums.end());\n        \n        vector<int> arr;\n        int n = nums.size();\n        \n        // Since the game involves removing two elements in each round,\n        // iterate until nums is empty with a step of 2 to simulate each round.\n        for (int i = 0; i < n / 2; ++i) {\n            // Bob's move: append the current minimum (i.e., first in the sorted array) to arr\n            arr.push_back(nums[2 * i + 1]);\n            // Alice's move: append the next minimum to arr\n            arr.push_back(nums[2 * i]);\n        }\n        \n        return arr;\n    }\n};"
}