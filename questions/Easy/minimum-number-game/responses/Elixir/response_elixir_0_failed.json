{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72068000,
    "question_id": "3226",
    "elapsed_time": 448,
    "compare_result
    "code_output": "[2,3,2,3]",
    "std_output": "",
    "last_testcase": "[5,4,2,3]",
    "expected_output": "[3,2,5,4]",
    "task_finish_time": 1706544577395,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 38,
    "total_testcases": 804,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1160204015",
    "input_formatted": "[5,4,2,3]",
    "input": "[5,4,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_game(nums :: [integer]) :: [integer]\n  def number_game(nums) do\n    # Sort the nums array to easily remove the minimum elements\n    sorted_nums = Enum.sort(nums)\n    # Initialize an empty arr list\n    arr = []\n\n    # Loop until sorted_nums is empty\n    0..(div(length(sorted_nums), 2) - 1)\n    |> Enum.reduce(arr, fn _, acc ->\n      # Simulate the game by removing the first two elements\n      # The first removed is Bob's and the second is Alice's\n      [bob, alice | remaining] = sorted_nums\n      sorted_nums = remaining\n      # Append in the order of the game's rules: Bob's then Alice's\n      acc ++ [bob, alice]\n    end)\n  end\nend"
}