{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "341 ms",
    "memory": 71980000,
    "question_id": "3226",
    "elapsed_time": 530,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706544623375,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 804,
    "total_testcases": 804,
    "runtime_percentile": 60.0,
    "status_memory": "72 MB",
    "memory_percentile": 60.0,
    "pretty_lang": "Elixir",
    "submission_id": "1160204694",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_game(nums :: [integer]) :: [integer]\n  def number_game(nums) do\n    # Sort nums to facilitate the sequential removal of the smallest elements\n    sorted_nums = Enum.sort(nums)\n    # Initialize the resulting array\n    arr = []\n    # Process the game rounds until all elements are moved from nums to arr\n    process_rounds(sorted_nums, arr)\n  end\n\n  defp process_rounds([], arr), do: arr\n\n  defp process_rounds([_first, _second | _] = nums, arr) do\n    # Extract the first two elements (the smallest ones due to sorting) for each round\n    # Following the game's rules, simulate the actions of Alice and Bob\n    [alice_min, bob_min | remaining_nums] = nums\n    \n    # Append to arr in the order of removal: first Bob's then Alice's\n    new_arr = arr ++ [bob_min, alice_min]\n    \n    # Continue processing the remaining numbers\n    process_rounds(remaining_nums, new_arr)\n  end\nend"
}