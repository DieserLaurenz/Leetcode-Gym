{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "181 ms",
    "memory": 101352000,
    "question_id": "3226",
    "elapsed_time": 249,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706543706554,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 804,
    "total_testcases": 804,
    "runtime_percentile": 100,
    "status_memory": "101.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1160190968",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (number-game nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  \n  (define (remove-min lst)\n    (let ([min-val (apply min lst)])\n      (values (remove min-val lst) min-val)))\n  \n  (define (play-game nums arr)\n    (if (null? nums)\n        arr\n        (let-values ([(nums-remaining alice-choice) (remove-min nums)])\n          (let-values ([(nums-remaining bob-choice) (remove-min nums-remaining)])\n            (play-game nums-remaining (append arr (list bob-choice alice-choice)))))))\n  \n  (play-game nums '()))"
}