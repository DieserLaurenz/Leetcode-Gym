{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "280 ms",
    "memory": 59400000,
    "question_id": "3226",
    "elapsed_time": 1431,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706544217997,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 804,
    "total_testcases": 804,
    "runtime_percentile": 100,
    "status_memory": "59.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1160198515",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec number_game(Nums :: [integer()]) -> [integer()].\nnumber_game(Nums) ->\n    number_game(Nums, []).\n\nnumber_game([], Arr) ->\n    Arr;\nnumber_game(Nums, Arr) ->\n    {Min1, Rest1} = remove_min(Nums),\n    {Min2, Rest2} = remove_min(Rest1),\n    NewArr = Arr ++ [Min2, Min1],\n    number_game(Rest2, NewArr).\n\nremove_min(List) ->\n    Min = lists:min(List),\n    {Min, List -- [Min]}."
}