{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "104 ms",
    "memory": 48816000,
    "question_id": "3226",
    "elapsed_time": 182,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706533812740,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 804,
    "total_testcases": 804,
    "runtime_percentile": 77.86660000000002,
    "status_memory": "48.8 MB",
    "memory_percentile": 18.666699999999988,
    "pretty_lang": "C#",
    "submission_id": "1160070438",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] NumberGame(int[] nums) {\n        int n = nums.Length;\n        int[] arr = new int[n];\n        List<int> numsList = new List<int>(nums);\n        int arrIndex = 0;\n\n        while (numsList.Count > 0) {\n            // Sort the list to easily pick the minimum elements for Alice and Bob\n            numsList.Sort();\n            // Alice picks the minimum element\n            int alicePick = numsList[0];\n            // Remove Alice's pick\n            numsList.RemoveAt(0);\n            // Bob picks the next minimum (current minimum after Alice's pick)\n            int bobPick = numsList[0];\n            // Remove Bob's pick\n            numsList.RemoveAt(0);\n            \n            // Append to arr in the order of Bob's choice first, then Alice's\n            arr[arrIndex++] = bobPick;\n            arr[arrIndex++] = alicePick;\n        }\n\n        return arr;\n    }\n}"
}