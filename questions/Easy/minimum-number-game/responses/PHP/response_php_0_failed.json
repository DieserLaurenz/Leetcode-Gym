{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19984000,
    "question_id": "3226",
    "elapsed_time": 168,
    "compare_result
    "code_output": "[2,3,4,5]",
    "std_output": "",
    "last_testcase": "[5,4,2,3]",
    "expected_output": "[3,2,5,4]",
    "task_finish_time": 1706533918551,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 804,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1160071632",
    "input_formatted": "[5,4,2,3]",
    "input": "[5,4,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function numberGame($nums) {\n        $arr = [];\n        while (!empty($nums)) {\n            sort($nums); // Sort $nums to get the minimum elements at the start\n            $alice = array_shift($nums); // Alice removes the minimum element\n            $bob = array_shift($nums); // Bob removes the next minimum element\n            array_unshift($arr, $alice); // Alice appends her element to $arr\n            array_unshift($arr, $bob); // Bob appends his element to $arr, before Alice's element\n        }\n        return array_reverse($arr); // Reverse $arr to get the final order\n    }\n}"
}