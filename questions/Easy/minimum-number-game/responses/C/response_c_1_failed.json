{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7376000,
    "question_id": "3226",
    "elapsed_time": 25,
    "compare_result": "010000000000100011000001000101100000000100000100010000000110111011000000100000000100000001000001000100000000000000100001001011000011100000000010000000000001000000100101000000000000000000000000000101000100010000011000000110000100000011001000000000000000000101000000000010100010010100001000000000000000001010101000000010010100100000000000010010000010101100000001001001010000000010110000000100000000001000010000000110000101000010100000000000000000001000010000000000000101000000000011010110010000000100001000000000000000100000000000000000000000000000001000000000000000000000000010000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000100000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000",
    "code_output": "[3,2,-1094795586,-1094795586]",
    "std_output": "",
    "last_testcase": "[5,4,2,3]",
    "expected_output": "[3,2,5,4]",
    "task_finish_time": 1706533725334,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 105,
    "total_testcases": 804,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1160069556",
    "input_formatted": "[5,4,2,3]",
    "input": "[5,4,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numberGame(int* nums, int numsSize, int* returnSize) {\n    *returnSize = numsSize;\n    int* arr = (int*)malloc(numsSize * sizeof(int));\n    if (!arr) return NULL; // Memory allocation check\n\n    // Sorting the nums array\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] > nums[j]) {\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\n    // Implementing game logic after sorting\n    // Since we are removing elements starting from the smallest, we simulate this by\n    // taking elements from the start (for Alice) and then from the next smallest (for Bob)\n    // and appending them to arr in the order they would based on the game rules.\n    int arrIndex = 0;\n    for (int i = 0; i < numsSize / 2; i++) {\n        arr[arrIndex++] = nums[i + 1]; // Bob's move, append next minimum\n        arr[arrIndex++] = nums[i]; // Alice's move, append current minimum\n        i++; // Increment i by 2 effectively, as we're processing two elements per iteration\n    }\n\n    return arr;\n}"
}