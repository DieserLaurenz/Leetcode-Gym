{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6516000,
    "question_id": "3226",
    "elapsed_time": 22,
    "compare_result
    "code_output": "[5,2,4,3]",
    "std_output": "",
    "last_testcase": "[5,4,2,3]",
    "expected_output": "[3,2,5,4]",
    "task_finish_time": 1706533770086,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 116,
    "total_testcases": 804,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1160070011",
    "input_formatted": "[5,4,2,3]",
    "input": "[5,4,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numberGame(int* nums, int numsSize, int* returnSize) {\n    *returnSize = numsSize;\n    int* arr = (int*)malloc(numsSize * sizeof(int));\n    if (!arr) return NULL; // Ensure memory allocation was successful\n    \n    // Sort nums array to make it easier to pick minimum elements\n    qsort(nums, numsSize, sizeof(int), compare);\n    \n    // Implement game logic correctly: alternating removal and appending\n    int left = 0, right = numsSize - 1;\n    for (int i = 0; i < numsSize; i += 2) {\n        // In each iteration, two elements are picked: the current minimum and the next minimum.\n        // Bob's choice (next minimum) is placed in the array first, followed by Alice's choice (current minimum).\n        // This ensures the order of elements in arr matches the expected outcome of the game.\n        arr[i] = nums[right--]; // Bob's turn: append the largest remaining element\n        if (i + 1 < numsSize) arr[i + 1] = nums[left++]; // Alice's turn: append the smallest remaining element\n    }\n    \n    return arr;\n}"
}