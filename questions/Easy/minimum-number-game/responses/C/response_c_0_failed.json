{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6524000,
    "question_id": "3226",
    "elapsed_time": 26,
    "compare_result
    "code_output": "[5,2,4,3]",
    "std_output": "",
    "last_testcase": "[5,4,2,3]",
    "expected_output": "[3,2,5,4]",
    "task_finish_time": 1706533665031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 116,
    "total_testcases": 804,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1160068938",
    "input_formatted": "[5,4,2,3]",
    "input": "[5,4,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numberGame(int* nums, int numsSize, int* returnSize) {\n    *returnSize = numsSize;\n    int* arr = (int*)malloc(numsSize * sizeof(int));\n    if (!arr) return NULL; // Memory allocation check\n    \n    // Simple selection sort to sort nums array\n    for (int i = 0; i < numsSize - 1; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (nums[i] > nums[j]) {\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n    \n    // Fill arr with elements from nums as per game rules\n    // Bob's moves (even indices) are filled with elements from the end of nums\n    // Alice's moves (odd indices) are filled with elements from the start of nums\n    for (int i = 0, start = 0, end = numsSize - 1; i < numsSize; i += 2, start++, end--) {\n        arr[i] = nums[end]; // Bob's move\n        if (i + 1 < numsSize) arr[i + 1] = nums[start]; // Alice's move\n    }\n    \n    return arr;\n}"
}