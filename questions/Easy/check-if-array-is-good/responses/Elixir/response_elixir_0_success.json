{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "383 ms",
    "memory": 72472000,
    "question_id": "2892",
    "elapsed_time": 558,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706074372167,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 803,
    "total_testcases": 803,
    "runtime_percentile": 50.0,
    "status_memory": "72.5 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Elixir",
    "submission_id": "1155251947",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec is_good(nums :: [integer]) :: boolean\n  def is_good(nums) do\n    n = Enum.max(nums)\n    if length(nums) != n + 1, do: false, else: check_counts(nums, n)\n  end\n\n  defp check_counts(nums, n) do\n    nums\n    |> Enum.frequencies()\n    |> Enum.all?(fn\n      {key, count} when key < n -> count == 1\n      {key, count} when key == n -> count == 2\n      _ -> false\n    end)\n  end\nend"
}