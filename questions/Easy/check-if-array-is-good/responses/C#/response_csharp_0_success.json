{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "88 ms",
    "memory": 45368000,
    "question_id": "2892",
    "elapsed_time": 163,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706067530763,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 803,
    "total_testcases": 803,
    "runtime_percentile": 25.926100000000027,
    "status_memory": "45.4 MB",
    "memory_percentile": 7.407500000000027,
    "pretty_lang": "C#",
    "submission_id": "1155173636",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool IsGood(int[] nums) {\n        int maxNum = nums.Max();\n        \n        // Check if the length of nums is n + 1\n        if (nums.Length != maxNum + 1) {\n            return false;\n        }\n\n        // Create a frequency map\n        Dictionary<int, int> freqMap = new Dictionary<int, int>();\n        foreach (int num in nums) {\n            if (freqMap.ContainsKey(num)) {\n                freqMap[num]++;\n            } else {\n                freqMap[num] = 1;\n            }\n        }\n\n        // Check if all numbers from 1 to n - 1 occur exactly once, and n occurs exactly twice\n        for (int i = 1; i <= maxNum; i++) {\n            if (!freqMap.ContainsKey(i) || freqMap[i] != (i == maxNum ? 2 : 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}"
}