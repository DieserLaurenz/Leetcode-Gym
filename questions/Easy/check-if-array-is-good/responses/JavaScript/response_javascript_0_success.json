{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "62 ms",
    "memory": 50768000,
    "question_id": "2892",
    "elapsed_time": 97,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706068008481,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 803,
    "total_testcases": 803,
    "runtime_percentile": 40.74070000000001,
    "status_memory": "50.8 MB",
    "memory_percentile": 7.407400000000017,
    "pretty_lang": "JavaScript",
    "submission_id": "1155178595",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isGood = function(nums) {\n    // Find the maximum value in the array\n    let maxVal = Math.max(...nums);\n\n    // Check if the length of nums is equal to n + 1\n    if (nums.length !== maxVal + 1) {\n        return false;\n    }\n\n    // Create a frequency map\n    let frequencyMap = {};\n    for (let num of nums) {\n        frequencyMap[num] = (frequencyMap[num] || 0) + 1;\n    }\n\n    // Check the frequency of each number\n    for (let i = 1; i <= maxVal; i++) {\n        if (i === maxVal && frequencyMap[i] !== 2) {\n            // The number n should appear twice\n            return false;\n        } else if (i !== maxVal && frequencyMap[i] !== 1) {\n            // Numbers from 1 to n-1 should appear once\n            return false;\n        }\n    }\n\n    // If all conditions are met\n    return true;\n};"
}