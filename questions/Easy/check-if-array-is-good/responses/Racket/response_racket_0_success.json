{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "195 ms",
    "memory": 100000000,
    "question_id": "2892",
    "elapsed_time": 310,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706073410631,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 803,
    "total_testcases": 803,
    "runtime_percentile": 100,
    "status_memory": "100 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1155240323",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (is-good nums)\n  (-> (listof exact-integer?) boolean?)\n  ; Find the maximum element in nums\n  (let ([n (apply max nums)])\n    ; Check if the length of nums is equal to n + 1\n    (and (= (length nums) (+ n 1))\n         ; Count how many times n appears, should be exactly 2\n         (= (count (lambda (x) (= x n)) nums) 2)\n         ; Check if each element from 1 to n - 1 is present exactly once\n         (for/and ([i (in-range 1 n)])\n           (= (count (lambda (x) (= x i)) nums) 1)))))"
}