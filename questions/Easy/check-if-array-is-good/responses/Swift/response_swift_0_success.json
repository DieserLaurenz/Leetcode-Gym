{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "15 ms",
    "memory": 15636000,
    "question_id": "2892",
    "elapsed_time": 32,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706069452375,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 803,
    "total_testcases": 803,
    "runtime_percentile": 87.5,
    "status_memory": "15.6 MB",
    "memory_percentile": 12.5,
    "pretty_lang": "Swift",
    "submission_id": "1155194148",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func isGood(_ nums: [Int]) -> Bool {\n        let n = nums.max() ?? 0 // Step 1: Find the maximum number which will be our candidate for n\n        if nums.count != n + 1 { return false } // Step 2: Check if the length of nums is n + 1\n\n        var frequency = [Int: Int]() // Step 3: Create a frequency map\n        for num in nums {\n            frequency[num, default: 0] += 1\n        }\n\n        for i in 1..<n { // Step 4: Check each number from 1 to n - 1\n            if frequency[i] != 1 {\n                return false\n            }\n        }\n        \n        // Finally, check if n appears exactly twice\n        return frequency[n] == 2\n    }\n}"
}