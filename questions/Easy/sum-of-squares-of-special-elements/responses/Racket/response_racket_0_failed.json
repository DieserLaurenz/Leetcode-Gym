{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101400000,
    "question_id": "2844",
    "elapsed_time": 251,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "21",
    "task_finish_time": 1706689540733,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 51,
    "total_testcases": 1437,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1161829115",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (sum-of-squares nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([n (length nums)])\n    (foldl (lambda (num acc idx)\n             (if (zero? (modulo n (+ idx 1))) ; Check if n % (idx + 1) == 0\n                 (+ acc (* num num))          ; Add square of num to acc\n                 acc))                        ; Else, just pass acc\n           0                                  ; Initial accumulator value\n           nums                               ; List to iterate over\n           (range 0 n))))                     ; Generating indices from 0 to n-1"
}