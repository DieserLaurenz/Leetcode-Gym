{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "367 ms",
    "memory": 72272000,
    "question_id": "2844",
    "elapsed_time": 473,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706689816777,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1437,
    "total_testcases": 1437,
    "runtime_percentile": 100,
    "status_memory": "72.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1161831844",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec sum_of_squares(nums :: [integer]) :: integer\n  def sum_of_squares(nums) do\n    # The length of the nums list\n    n = length(nums)\n\n    # Generate a list of indices from 1 to n\n    1..n\n    |> Enum.filter(fn i -> rem(n, i) == 0 end) # Filter indices where i divides n\n    |> Enum.map(fn i -> Enum.at(nums, i - 1) end) # Map the indices to their corresponding elements in nums\n    |> Enum.map(&(&1 * &1)) # Square each element\n    |> Enum.sum() # Sum the squares\n  end\nend"
}