{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "293 ms",
    "memory": 71828000,
    "question_id": "3221",
    "elapsed_time": 393,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706333557407,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 648,
    "total_testcases": 648,
    "runtime_percentile": 52.940899999999985,
    "status_memory": "71.8 MB",
    "memory_percentile": 5.8820000000000165,
    "pretty_lang": "Elixir",
    "submission_id": "1157975783",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_peaks(mountain :: [integer]) :: [integer]\n  def find_peaks(mountain) do\n    Enum.filter(1..(length(mountain) - 2), fn i ->\n      mountain |> Enum.at(i) > Enum.at(mountain, i - 1) && Enum.at(mountain, i) > Enum.at(mountain, i + 1)\n    end)\n  end\nend"
}