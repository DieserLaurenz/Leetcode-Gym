{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "202 ms",
    "memory": 100088000,
    "question_id": "3221",
    "elapsed_time": 295,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706333410921,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 648,
    "total_testcases": 648,
    "runtime_percentile": 100,
    "status_memory": "100.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1157974300",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (find-peaks mountain)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  ;; Initialize an empty list to store the indices of the peaks\n  (let ([peaks '()])\n    ;; Iterate over the list starting from the second element and ending at the second to last element\n    (for/list ([i (in-range 1 (sub1 (length mountain)))])\n      ;; Check if the current element is strictly greater than its neighbors\n      (when (and (> (list-ref mountain i) (list-ref mountain (sub1 i)))\n                 (> (list-ref mountain i) (list-ref mountain (add1 i))))\n        ;; If it is a peak, add its index to the list of peaks\n        (set! peaks (cons i peaks))))\n    ;; Return the list of peaks\n    peaks))"
}