{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "258 ms",
    "memory": 59540000,
    "question_id": "3221",
    "elapsed_time": 1502,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706333481537,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 648,
    "total_testcases": 648,
    "runtime_percentile": 100,
    "status_memory": "59.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1157975002",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec find_peaks(Mountain :: [integer()]) -> [integer()].\nfind_peaks(Mountain) ->\n    find_peaks(Mountain, 1, []).\n\nfind_peaks([_], _, Acc) ->\n    lists:reverse(Acc);\nfind_peaks([_, _], _, Acc) ->\n    lists:reverse(Acc);\nfind_peaks([Prev, Curr, Next | Tail], Index, Acc) ->\n    NewAcc = case Curr > Prev andalso Curr > Next of\n                 true -> [Index | Acc];\n                 false -> Acc\n             end,\n    find_peaks([Curr, Next | Tail], Index + 1, NewAcc)."
}