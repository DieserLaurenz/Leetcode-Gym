{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "29 ms",
    "memory": 11648000,
    "question_id": "3221",
    "elapsed_time": 56,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708713290578,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 648,
    "total_testcases": 648,
    "runtime_percentile": 61.301199999999994,
    "status_memory": "11.6 MB",
    "memory_percentile": 80.4795,
    "pretty_lang": "Python",
    "submission_id": "1184233105",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findPeaks(self, mountain):\n        \"\"\"\n        :type mountain: List[int]\n        :rtype: List[int]\n        \"\"\"\n        peaks = []\n        for i in range(1, len(mountain) - 1):\n            if mountain[i] > mountain[i - 1] and mountain[i] > mountain[i + 1]:\n                peaks.append(i)\n        return peaks"
}