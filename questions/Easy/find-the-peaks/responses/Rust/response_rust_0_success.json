{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2176000,
    "question_id": "3221",
    "elapsed_time": 13,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706333336026,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 648,
    "total_testcases": 648,
    "runtime_percentile": 100,
    "status_memory": "2.2 MB",
    "memory_percentile": 33.3334,
    "pretty_lang": "Rust",
    "submission_id": "1157973560",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_peaks(mountain: Vec<i32>) -> Vec<i32> {\n        let mut peaks = Vec::new();\n        for i in 1..mountain.len()-1 {\n            if mountain[i] > mountain[i-1] && mountain[i] > mountain[i+1] {\n                peaks.push(i as i32);\n            }\n        }\n        peaks\n    }\n}"
}