{
    "acRate": 76.25246745458634,
    "difficulty": "Easy",
    "freqBar": null,
    "questionId": "3221",
    "frontendQuestionId": "2951",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Peaks",
    "titleSlug": "find-the-peaks",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Enumeration",
            "id": "VG9waWNUYWdOb2RlOjYxMDY2",
            "slug": "enumeration"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<int> findPeaks(vector<int>& mountain) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public List<Integer> findPeaks(int[] mountain) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def findPeaks(self, mountain):\n        \"\"\"\n        :type mountain: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def findPeaks(self, mountain: List[int]) -> List[int]:\n        "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findPeaks(int* mountain, int mountainSize, int* returnSize) {\n    \n}"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public IList<int> FindPeaks(int[] mountain) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} mountain\n * @return {number[]}\n */\nvar findPeaks = function(mountain) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findPeaks(mountain: number[]): number[] {\n    \n};"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $mountain\n     * @return Integer[]\n     */\n    function findPeaks($mountain) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func findPeaks(_ mountain: [Int]) -> [Int] {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun findPeaks(mountain: IntArray): List<Int> {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  List<int> findPeaks(List<int> mountain) {\n    \n  }\n}"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findPeaks(mountain []int) []int {\n    \n}"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} mountain\n# @return {Integer[]}\ndef find_peaks(mountain)\n    \nend"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def findPeaks(mountain: Array[Int]): List[Int] = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn find_peaks(mountain: Vec<i32>) -> Vec<i32> {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (find-peaks mountain)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec find_peaks(Mountain :: [integer()]) -> [integer()].\nfind_peaks(Mountain) ->\n  ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec find_peaks(mountain :: [integer]) :: [integer]\n  def find_peaks(mountain) do\n    \n  end\nend"
        }
    ],
    "content": "You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array.\nReturn an array that consists of indices of peaks in the given array in any order.\nNotes:\n\nA peak is defined as an element that is strictly greater than its neighboring elements.\nThe first and last elements of the array are not a peak.\n\n\nExample 1:\n\nInput: mountain = [2,4,4]\nOutput: []\nExplanation: mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array.\nmountain[1] also can not be a peak because it is not strictly greater than mountain[2].\nSo the answer is [].\n\nExample 2:\n\nInput: mountain = [1,4,3,8,5]\nOutput: [1,3]\nExplanation: mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array.\nmountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1].\nBut mountain [1] and mountain[3] are strictly greater than their neighboring elements.\nSo the answer is [1,3].\n\n\nConstraints:\n\n3 <= mountain.length <= 100\n1 <= mountain[i] <= 100\n\n"
}