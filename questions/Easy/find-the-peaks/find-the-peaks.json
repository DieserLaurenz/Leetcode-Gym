{
    "acRate": 76.18415918845103,
    "difficulty": "Easy",
    "freqBar": null,
    "frontendQuestionId": "2951",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Peaks",
    "titleSlug": "find-the-peaks",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Enumeration",
            "id": "VG9waWNUYWdOb2RlOjYxMDY2",
            "slug": "enumeration"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "cpp": "class Solution { public:     vector<int> findPeaks(vector<int>& mountain) {              } };"
        },
        {
            "java": "class Solution {     public List<Integer> findPeaks(int[] mountain) {              } }"
        },
        {
            "python": "class Solution(object):     def findPeaks(self, mountain):         \"\"\"         :type mountain: List[int]         :rtype: List[int]         \"\"\"         "
        },
        {
            "python3": "class Solution:     def findPeaks(self, mountain: List[int]) -> List[int]:         "
        },
        {
            "c": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* findPeaks(int* mountain, int mountainSize, int* returnSize) {      }"
        },
        {
            "csharp": "public class Solution {     public IList<int> FindPeaks(int[] mountain) {              } }"
        },
        {
            "javascript": "/**  * @param {number[]} mountain  * @return {number[]}  */ var findPeaks = function(mountain) {      };"
        },
        {
            "typescript": "function findPeaks(mountain: number[]): number[] {      };"
        },
        {
            "php": "class Solution {      /**      * @param Integer[] $mountain      * @return Integer[]      */     function findPeaks($mountain) {              } }"
        },
        {
            "swift": "class Solution {     func findPeaks(_ mountain: [Int]) -> [Int] {              } }"
        },
        {
            "kotlin": "class Solution {     fun findPeaks(mountain: IntArray): List<Int> {              } }"
        },
        {
            "dart": "class Solution {   List<int> findPeaks(List<int> mountain) {        } }"
        },
        {
            "golang": "func findPeaks(mountain []int) []int {      }"
        },
        {
            "ruby": "# @param {Integer[]} mountain # @return {Integer[]} def find_peaks(mountain)      end"
        },
        {
            "scala": "object Solution {     def findPeaks(mountain: Array[Int]): List[Int] = {              } }"
        },
        {
            "rust": "impl Solution {     pub fn find_peaks(mountain: Vec<i32>) -> Vec<i32> {              } }"
        },
        {
            "racket": "(define/contract (find-peaks mountain)   (-> (listof exact-integer?) (listof exact-integer?))   )"
        },
        {
            "erlang": "-spec find_peaks(Mountain :: [integer()]) -> [integer()]. find_peaks(Mountain) ->   ."
        },
        {
            "elixir": "defmodule Solution do   @spec find_peaks(mountain :: [integer]) :: [integer]   def find_peaks(mountain) do        end end"
        }
    ],
    "content": "You are given a 0-indexed array mountain. Your task is to find all the peaks in the mountain array. Return an array that consists of indices of peaks in the given array in any order. Notes:  A peak is defined as an element that is strictly greater than its neighboring elements. The first and last elements of the array are not a peak.   Example 1:  Input: mountain = [2,4,4] Output: [] Explanation: mountain[0] and mountain[2] can not be a peak because they are first and last elements of the array. mountain[1] also can not be a peak because it is not strictly greater than mountain[2]. So the answer is [].  Example 2:  Input: mountain = [1,4,3,8,5] Output: [1,3] Explanation: mountain[0] and mountain[4] can not be a peak because they are first and last elements of the array. mountain[2] also can not be a peak because it is not strictly greater than mountain[3] and mountain[1]. But mountain [1] and mountain[3] are strictly greater than their neighboring elements. So the answer is [1,3].   Constraints:  3 <= mountain.length <= 100 1 <= mountain[i] <= 100  "
}