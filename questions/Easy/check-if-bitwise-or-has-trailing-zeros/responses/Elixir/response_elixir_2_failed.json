{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "",
    "full_compile_error": "Line 5: Char 98: ** (SyntaxError) unexpected expression after keyword list. Keyword lists must always come as the last argument. Therefore, this is not allowed:\n    function_call(1, some: :option, 2)\nInstead, wrap the keyword in brackets:\n    function_call(1, [some: :option], 2)\nSyntax error after: ','\n    |\n  5 |     Enum.any?(for n <- 2..length(nums), combination <- Enum.combination(nums, n), do: combination, fn combination ->\n    |                                                                                                  ^\n    (elixir 1.15.7) lib/kernel/parallel_compiler.ex:377: anonymous fn/5 in Kernel.ParallelCompiler.spawn_workers/8",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3246",
    "task_finish_time": 1706095252233,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1155479018",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec has_trailing_zeros(nums :: [integer]) :: boolean\n  def has_trailing_zeros(nums) do\n    # Generate all combinations of the array elements, starting from combinations of 2 elements\n    Enum.any?(for n <- 2..length(nums), combination <- Enum.combination(nums, n), do: combination, fn combination -> \n      # Reduce each combination with bitwise OR and check for trailing zeros\n      or_result = Enum.reduce(combination, 0, fn x, acc -> x bor acc end)\n      has_trailing_zero?(or_result)\n    end)\n  end\n\n  defp has_trailing_zero?(0), do: false\n  defp has_trailing_zero?(n) do\n    if n band 1 == 0, do: true, else: has_trailing_zero?(n bsr 1)\n  end\nend"
}