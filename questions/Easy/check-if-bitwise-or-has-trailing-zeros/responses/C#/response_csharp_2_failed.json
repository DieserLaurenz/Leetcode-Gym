{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45736000,
    "question_id": "3246",
    "elapsed_time": 136,
    "compare_result": "0001001010100001000000001011010010000000000100000000000010001000001010100100000000000000000001000000001100000000000000000000000000000000010000001000100000000000000000001000000000000000000000000000000000000000000100100000000000000000000000000000000000010000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000",
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]",
    "expected_output": "true",
    "task_finish_time": 1706077673102,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 29,
    "total_testcases": 916,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1155293120",
    "input_formatted": "[1,2,3,4,5]",
    "input": "[1,2,3,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool HasTrailingZeros(int[] nums) {\n        // Iterate through each bit position (0 to 6)\n        for (int bit = 0; bit <= 6; bit++) {\n            bool foundZeroInBit = false;\n\n            foreach (int num in nums) {\n                if ((num & (1 << bit)) == 0) {\n                    // Found a number with a 0 in the current bit position\n                    foundZeroInBit = true;\n                    break;\n                }\n            }\n\n            // If we didn't find a number with a 0 in the current bit position,\n            // it means it's possible to get a trailing zero.\n            if (!foundZeroInBit) {\n                return true;\n            }\n        }\n\n        // If we found numbers with a 0 in every bit position, it's not possible to get a trailing zero\n        return false;\n    }\n}"
}