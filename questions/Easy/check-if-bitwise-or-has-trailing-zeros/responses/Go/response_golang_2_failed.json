{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3016000,
    "question_id": "3246",
    "elapsed_time": 16,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[1,2]",
    "expected_output": "false",
    "task_finish_time": 1706085411776,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 887,
    "total_testcases": 916,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1155380388",
    "input_formatted": "[1,2]",
    "input": "[1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func hasTrailingZeros(nums []int) bool {\n    // Iterate over each bit position from 0 to 6 (as 1 <= nums[i] <= 100)\n    for bit := 0; bit < 7; bit++ {\n        allHaveBit := true\n\n        for _, num := range nums {\n            // Check if the current number has a 0 at the current bit position\n            if num&(1<<bit) == 0 {\n                allHaveBit = false\n                break // If any number has a 0 at this bit, break the loop\n            }\n        }\n\n        // If all numbers have a 1 at the current bit position, return false\n        if allHaveBit {\n            return false\n        }\n    }\n\n    // If we found at least one bit position where every number has a 0, return true\n    return true\n}"
}