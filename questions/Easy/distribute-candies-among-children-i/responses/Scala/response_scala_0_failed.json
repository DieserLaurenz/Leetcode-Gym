{
    "status_code": 12,
    "lang": "scala",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 949708000,
    "question_id": "3199",
    "elapsed_time": 1255,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1706173008730,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 827,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1156334894",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "object Solution {\n    def distributeCandies(n: Int, limit: Int): Int = {\n        val memo = Array.ofDim[Int](n + 1, limit + 1, limit + 1)\n\n        for {\n            i <- 0 to n\n            j <- 0 to limit\n            k <- 0 to limit\n        } memo(i)(j)(k) = -1\n\n        def ways(candies: Int, max1: Int, max2: Int): Int = {\n            if (candies == 0) return 1\n            if (max1 < 0 || max2 < 0) return 0\n            if (memo(candies)(max1)(max2) != -1) return memo(candies)(max1)(max2)\n\n            var count = 0\n            for {\n                x <- 0 to Math.min(candies, max1)\n                y <- 0 to Math.min(candies - x, max2)\n            } {\n                val z = candies - x - y\n                if (z <= limit) count += ways(candies - x - y, x, y)\n            }\n\n            memo(candies)(max1)(max2) = count\n            count\n        }\n\n        ways(n, limit, limit)\n    }\n}"
}