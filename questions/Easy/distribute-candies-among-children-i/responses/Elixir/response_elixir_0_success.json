{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "391 ms",
    "memory": 72172000,
    "question_id": "3199",
    "elapsed_time": 510,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706177094055,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 827,
    "total_testcases": 827,
    "runtime_percentile": 100,
    "status_memory": "72.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1156375272",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec distribute_candies(n :: integer, limit :: integer) :: integer\n  def distribute_candies(n, limit) do\n    Enum.reduce(0..limit, 0, fn x, acc1 ->\n      Enum.reduce(0..limit, acc1, fn y, acc2 ->\n        if x + y <= n and n - x - y <= limit, do: acc2 + 1, else: acc2\n      end)\n    end)\n  end\nend"
}