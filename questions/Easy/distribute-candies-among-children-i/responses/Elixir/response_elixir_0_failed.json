{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72112000,
    "question_id": "3199",
    "elapsed_time": 561,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1706176788612,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 92,
    "total_testcases": 827,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1156372239",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec distribute_candies(n :: integer, limit :: integer) :: integer\n  def distribute_candies(n, limit) do\n    count_ways(n, limit, 0, 0, 0)\n  end\n\n  defp count_ways(0, _, _, _, _), do: 1\n  defp count_ways(_, _, 3, _, _), do: 0\n  defp count_ways(candies, limit, child, current, total) do\n    if current > limit do\n      0\n    else\n      if child < 2 do\n        Enum.reduce(0..limit, 0, fn x, acc ->\n          acc + count_ways(candies, limit, child + 1, x, total + x)\n        end)\n      else\n        if total + candies <= 3 * limit and candies <= limit, do: 1, else: 0\n      end\n    end\n  end\nend"
}