{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "215 ms",
    "memory": 101172000,
    "question_id": "3199",
    "elapsed_time": 342,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706174569967,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 827,
    "total_testcases": 827,
    "runtime_percentile": 100,
    "status_memory": "101.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1156350449",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (distribute-candies n limit)\n  (-> exact-integer? exact-integer? exact-integer?)\n  (let loop ((child1 0) (child2 0) (child3 0) (count 0))\n    (cond\n      [(> child1 limit) count]\n      [(> child2 limit) (loop (+ child1 1) 0 0 count)]\n      [(> child3 limit) (loop child1 (+ child2 1) 0 count)]\n      [(= (+ child1 child2 child3) n) (loop child1 (+ child2 1) 0 (+ count 1))]\n      [else (loop child1 child2 (+ child3 1) count)])))"
}