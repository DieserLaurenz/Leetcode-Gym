{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39392000,
    "question_id": "3199",
    "elapsed_time": 180,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1706167072159,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 92,
    "total_testcases": 827,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1156272728",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int DistributeCandies(int n, int limit) {\n        int[,,] dp = new int[n + 1, limit + 1, limit + 1];\n\n        // Initialize for zero candies\n        dp[0, 0, 0] = 1;\n\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= limit; j++) {\n                for (int k = 0; k <= limit; k++) {\n                    // If there are no more candies to distribute\n                    if (i == 0) continue;\n\n                    // Distribute to the first child\n                    if (j > 0 && i - j >= 0) {\n                        dp[i, j, k] += dp[i - j, j, k];\n                    }\n\n                    // Distribute to the second child\n                    if (k > 0 && i - k >= 0) {\n                        dp[i, j, k] += dp[i - k, j, k];\n                    }\n\n                    // Distribute to the third child\n                    if (i <= limit && i - j - k <= limit && i - j - k >= 0) {\n                        dp[i, j, k] += dp[i, j, k];\n                    }\n                }\n            }\n        }\n\n        int totalWays = 0;\n        for (int j = 0; j <= limit; j++) {\n            for (int k = 0; k <= limit; k++) {\n                totalWays += dp[n, j, k];\n            }\n        }\n\n        return totalWays;\n    }\n}"
}