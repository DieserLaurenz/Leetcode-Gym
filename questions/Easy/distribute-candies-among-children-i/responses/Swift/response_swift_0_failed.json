{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15308000,
    "question_id": "3199",
    "elapsed_time": 28,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "3\n3",
    "expected_output": "10",
    "task_finish_time": 1706170188326,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 827,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1156306799",
    "input_formatted": "3, 3",
    "input": "3\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func distributeCandies(_ n: Int, _ limit: Int) -> Int {\n        var memo = Array(repeating: Array(repeating: -1, count: limit + 1), count: n + 1)\n\n        func ways(_ candies: Int, _ maxLimit: Int) -> Int {\n            if candies == 0 {\n                return 1\n            }\n            if maxLimit == 0 {\n                return 0\n            }\n            if memo[candies][maxLimit] != -1 {\n                return memo[candies][maxLimit]\n            }\n\n            var result = 0\n            for i in 0...min(candies, maxLimit) {\n                result += ways(candies - i, min(maxLimit, i))\n            }\n            memo[candies][maxLimit] = result\n            return result\n        }\n\n        return ways(n, limit)\n    }\n}"
}