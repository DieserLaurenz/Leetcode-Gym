{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58412000,
    "question_id": "3199",
    "elapsed_time": 5071,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1706176316784,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 827,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1156367713",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec distribute_candies(N :: integer(), Limit :: integer()) -> integer().\ndistribute_candies(N, Limit) ->\n    distribute_candies_helper(N, Limit, 0, 0, 0).\n\ndistribute_candies_helper(0, _, _, _, Count) ->\n    Count + 1;\ndistribute_candies_helper(N, Limit, A, B, Count) when N > 0 ->\n    NewCount = if \n        A =< Limit, B =< Limit, N - A - B =< Limit ->\n            Count + 1;\n        true ->\n            Count\n    end,\n    Count1 = if \n        A < Limit -> distribute_candies_helper(N, Limit, A + 1, B, NewCount);\n        true -> NewCount\n    end,\n    Count2 = if \n        B < Limit -> distribute_candies_helper(N, Limit, A, B + 1, Count1);\n        true -> Count1\n    end,\n    Count2."
}