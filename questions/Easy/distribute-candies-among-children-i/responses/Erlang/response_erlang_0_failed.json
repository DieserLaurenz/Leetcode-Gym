{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58456000,
    "question_id": "3199",
    "elapsed_time": 5056,
    "compare_result
    "code_output": "90",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1706175055130,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 60,
    "total_testcases": 827,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1156355425",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec distribute_candies(N :: integer(), Limit :: integer()) -> integer().\ndistribute_candies(N, Limit) ->\n    distribute_candies(N, Limit, 0, 0, 0, 0).\n\ndistribute_candies(0, _, _, _, _, Count) ->\n    Count + 1;\ndistribute_candies(N, Limit, A, B, C, Count) when N > 0 ->\n    Count1 = if \n        A < Limit -> distribute_candies(N - 1, Limit, A + 1, B, C, Count);\n        true -> Count\n    end,\n    Count2 = if \n        B < Limit -> distribute_candies(N - 1, Limit, A, B + 1, C, Count1);\n        true -> Count1\n    end,\n    Count3 = if \n        C < Limit -> distribute_candies(N - 1, Limit, A, B, C + 1, Count2);\n        true -> Count2\n    end,\n    Count3."
}