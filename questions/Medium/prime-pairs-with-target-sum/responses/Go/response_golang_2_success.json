{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "160 ms",
    "memory": 8124000,
    "question_id": "2873",
    "elapsed_time": 179,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708103450160,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 554,
    "total_testcases": 554,
    "runtime_percentile": 54.54549999999999,
    "status_memory": "8.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Go",
    "submission_id": "1177134044",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func findPrimePairs(n int) [][]int {\n    primes := sieveOfEratosthenes(n)\n    var pairs [][]int\n    for i := 2; i <= n/2; i++ {\n        if primes[i] && primes[n-i] {\n            pairs = append(pairs, []int{i, n - i})\n        }\n    }\n    return pairs\n}\n\nfunc sieveOfEratosthenes(n int) []bool {\n    prime := make([]bool, n+1)\n    for i := 2; i <= n; i++ {\n        prime[i] = true\n    }\n    for p := 2; p*p <= n; p++ {\n        if prime[p] {\n            for i := p * p; i <= n; i += p {\n                prime[i] = false\n            }\n        }\n    }\n    return prime\n}"
}