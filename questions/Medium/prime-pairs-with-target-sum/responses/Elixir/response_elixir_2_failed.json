{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (UndefinedFunctionError) function Enum.none?/2 is undefined or private",
    "full_runtime_error": "Line 5: ** (UndefinedFunctionError) function Enum.none?/2 is undefined or private\n    (elixir 1.15.7) Enum.none?(2..1//-1, #Function<3.80885423/1 in Solution.prime?/1>)\n    (elixir 1.15.7) lib/enum.ex:1121: anonymous fn/3 in Enum.filter/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    (elixir 1.15.7) lib/enum.ex:2514: Enum.filter/2\n    solution.ex:5: Solution.find_prime_pairs/1\n    solution.ex:31: Driver.consume_test_cases/2\n    solution.ex:19: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72932000,
    "question_id": "2873",
    "elapsed_time": 366,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "[[3,7],[5,5]]",
    "task_finish_time": 1708104345128,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 554,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177147214",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_prime_pairs(n :: integer) :: [[integer]]\n  def find_prime_pairs(n) do\n    1..n\n    |> Enum.filter(&prime?(&1))\n    |> Enum.filter(fn x -> x <= n - x and prime?(n - x) end)\n    |> Enum.map(&[&1, n - &1])\n  end\n\n  defp prime?(1), do: false\n  defp prime?(2), do: true\n  defp prime?(n) do\n    Enum.none?(2..div(n, 2), &rem(n, &1) == 0)\n  end\nend"
}