{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "140 ms",
    "memory": 4432000,
    "question_id": "2873",
    "elapsed_time": 187,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708103811696,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 554,
    "total_testcases": 554,
    "runtime_percentile": 75.0,
    "status_memory": "4.4 MB",
    "memory_percentile": 12.5,
    "pretty_lang": "Rust",
    "submission_id": "1177139412",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_prime_pairs(n: i32) -> Vec<Vec<i32>> {\n        let mut sieve = vec![true; n as usize + 1];\n        let mut primes = Vec::new();\n\n        for i in 2..sieve.len() {\n            if sieve[i] {\n                primes.push(i as i32);\n                let mut j = i * i;\n                while j < sieve.len() {\n                    sieve[j] = false;\n                    j += i;\n                }\n            }\n        }\n\n        let mut result = Vec::new();\n        for &prime in &primes {\n            let complement = n - prime;\n            if complement >= prime && sieve[complement as usize] {\n                result.push(vec![prime, complement]);\n            }\n        }\n\n        result\n    }\n}"
}