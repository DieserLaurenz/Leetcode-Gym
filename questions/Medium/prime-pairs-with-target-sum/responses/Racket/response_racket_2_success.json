{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "547 ms",
    "memory": 225108000,
    "question_id": "2873",
    "elapsed_time": 785,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708103958154,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 554,
    "total_testcases": 554,
    "runtime_percentile": 100,
    "status_memory": "225.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1177141497",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (find-prime-pairs n)\n  (-> exact-integer? (listof (listof exact-integer?)))\n\n  (define (sieve-of-eratosthenes n)\n    (let ((is-prime (make-vector (+ n 1) #t)))\n      (vector-set! is-prime 0 #f)\n      (vector-set! is-prime 1 #f)\n      (for ([i (in-range 2 (sqrt n))])\n        (when (vector-ref is-prime i)\n          (for ([j (in-range (* i i) (+ n 1) i)])\n            (vector-set! is-prime j #f))))\n      is-prime))\n\n  (define primes (sieve-of-eratosthenes n))\n  \n  (let ((result '()))\n    (for ([x (in-range 2 (+ (quotient n 2) 1))])\n      (let ((y (- n x)))\n        (when (and (vector-ref primes x) (vector-ref primes y))\n          (set! result (cons (list x y) result)))))\n    (reverse result)))"
}