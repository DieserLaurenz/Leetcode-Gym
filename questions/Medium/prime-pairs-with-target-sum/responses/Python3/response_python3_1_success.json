{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "3510 ms",
    "memory": 30580000,
    "question_id": "2873",
    "elapsed_time": 3589,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708839840930,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 554,
    "total_testcases": 554,
    "runtime_percentile": 31.966600000000234,
    "status_memory": "30.6 MB",
    "memory_percentile": 95.43400000000003,
    "pretty_lang": "Python3",
    "submission_id": "1185487657",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def findPrimePairs(self, n: int) -> List[List[int]]:\n        def sieve(n):\n            prime = [True for _ in range(n+1)]\n            p = 2\n            while (p * p <= n):\n                if (prime[p] == True):\n                    for i in range(p * p, n+1, p):\n                        prime[i] = False\n                p += 1\n            return [p for p in range(2, n) if prime[p]]\n        \n        primes = sieve(n)\n        prime_pairs = []\n        i, j = 0, len(primes) - 1\n        while i <= j:\n            if primes[i] + primes[j] == n:\n                prime_pairs.append([primes[i], primes[j]])\n                i += 1\n                j -= 1\n            elif primes[i] + primes[j] < n:\n                i += 1\n            else:\n                j -= 1\n        \n        return prime_pairs"
}