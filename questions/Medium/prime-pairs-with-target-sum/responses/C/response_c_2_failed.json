{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 207116000,
    "question_id": "2873",
    "elapsed_time": 657,
    "compare_result
    "code_output": "[[17,241],[19,239],[29,229],[31,227],[47,211],[59,199],[61,197],[67,191],[79,179],[101,157],[107,151],[109,149],[127,131]]",
    "std_output": "",
    "last_testcase": "258",
    "expected_output": "[[7,251],[17,241],[19,239],[29,229],[31,227],[47,211],[59,199],[61,197],[67,191],[79,179],[101,157],[107,151],[109,149],[127,131]]",
    "task_finish_time": 1708102822910,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 355,
    "total_testcases": 554,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177124899",
    "input_formatted": "258",
    "input": "258",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n#include <string.h>\n\nint* sieveOfEratosthenes(int n, int* primesCount) {\n    int* primes = (int*)malloc((n + 1) * sizeof(int));\n    memset(primes, 1, (n + 1) * sizeof(int));\n    primes[0] = primes[1] = 0;\n    for (int i = 2; i * i <= n; i++) {\n        if (primes[i]) {\n            for (int j = i * i; j <= n; j += i)\n                primes[j] = 0;\n        }\n    }\n    *primesCount = 0;\n    for (int i = 2; i <= n; i++) {\n        if (primes[i]) primes[(*primesCount)++] = i;\n    }\n    return realloc(primes, (*primesCount) * sizeof(int)); // Adjust the array size to the number of primes\n}\n\nint** findPrimePairs(int n, int* returnSize, int** returnColumnSizes) {\n    int primesCount;\n    int* primes = sieveOfEratosthenes(n, &primesCount);\n    *returnSize = 0;\n    int** result = (int**)malloc(sizeof(int*) * primesCount);\n    *returnColumnSizes = (int*)malloc(sizeof(int) * primesCount);\n\n    for (int i = 0; i < primesCount; i++) {\n        int x = primes[i];\n        int y = n - x;\n        if (x > y) break;\n        if (x <= y && bsearch(&y, primes, primesCount, sizeof(int), (int(*)(const void*,const void*))strcmp)) {\n            result[*returnSize] = (int*)malloc(sizeof(int) * 2);\n            result[*returnSize][0] = x;\n            result[*returnSize][1] = y;\n            (*returnColumnSizes)[*returnSize] = 2;\n            (*returnSize)++;\n        }\n    }\n\n    free(primes);\n    if (*returnSize == 0) {\n        free(result);\n        result = NULL;\n        free(*returnColumnSizes);\n        *returnColumnSizes = NULL;\n    } else {\n        result = (int**)realloc(result, (*returnSize) * sizeof(int*));\n        *returnColumnSizes = (int*)realloc(*returnColumnSizes, (*returnSize) * sizeof(int));\n    }\n\n    return result;\n}"
}