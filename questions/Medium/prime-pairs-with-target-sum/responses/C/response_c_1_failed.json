{
    "status_code": 14,
    "lang": "c",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 53100000,
    "question_id": "2873",
    "elapsed_time": 2244,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708102756350,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 554,
    "total_testcases": 554,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177123909",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n#include <stdbool.h>\n\nbool isPrime(int n) {\n    if (n <= 1) return false;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\nint** findPrimePairs(int n, int* returnSize, int** returnColumnSizes) {\n    *returnSize = 0;\n    int capacity = 10; // Initial capacity for result array\n    int** result = (int**)malloc(capacity * sizeof(int*));\n    *returnColumnSizes = (int*)malloc(capacity * sizeof(int));\n\n    for (int x = 2; x <= n / 2; x++) {\n        if (isPrime(x) && isPrime(n - x)) {\n            if (*returnSize >= capacity) {\n                capacity *= 2; // Increase capacity\n                result = (int**)realloc(result, capacity * sizeof(int*));\n                *returnColumnSizes = (int*)realloc(*returnColumnSizes, capacity * sizeof(int));\n            }\n\n            result[*returnSize] = (int*)malloc(2 * sizeof(int));\n            result[*returnSize][0] = x;\n            result[*returnSize][1] = n - x;\n            (*returnColumnSizes)[*returnSize] = 2;\n            (*returnSize)++;\n        }\n    }\n\n    if (*returnSize == 0) {\n        free(result);\n        result = NULL;\n        free(*returnColumnSizes);\n        *returnColumnSizes = NULL;\n    } else {\n        // Adjust the size of allocated memory to the actual number of prime pairs found\n        result = (int**)realloc(result, *returnSize * sizeof(int*));\n        *returnColumnSizes = (int*)realloc(*returnColumnSizes, *returnSize * sizeof(int));\n    }\n\n    return result;\n}"
}