{
    "status_code": 14,
    "lang": "c",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 82428000,
    "question_id": "2873",
    "elapsed_time": 2384,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708102707705,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 554,
    "total_testcases": 554,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177123195",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n#include <string.h>\n\nint isPrime(int num) {\n    if (num <= 1) return 0;\n    for (int i = 2; i * i <= num; i++) {\n        if (num % i == 0) return 0;\n    }\n    return 1;\n}\n\nint** findPrimePairs(int n, int* returnSize, int** returnColumnSizes) {\n    int** result = (int**)malloc(sizeof(int*) * n / 2); // Allocate max possible pairs\n    *returnColumnSizes = (int*)malloc(sizeof(int) * n / 2);\n    *returnSize = 0;\n    for (int x = 2; x <= n / 2; x++) {\n        if (isPrime(x) && isPrime(n - x)) {\n            result[*returnSize] = (int*)malloc(sizeof(int) * 2);\n            result[*returnSize][0] = x;\n            result[*returnSize][1] = n - x;\n            (*returnColumnSizes)[*returnSize] = 2;\n            (*returnSize)++;\n        }\n    }\n    result = (int**)realloc(result, sizeof(int*) * (*returnSize)); // Adjust memory allocation\n    *returnColumnSizes = (int*)realloc(*returnColumnSizes, sizeof(int) * (*returnSize));\n    return result;\n}"
}