{
    "status_code": 14,
    "lang": "python",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 60204000,
    "question_id": "2873",
    "elapsed_time": 11015,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "514391",
    "expected_output": "[]",
    "task_finish_time": 1708839744951,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 536,
    "total_testcases": 554,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185486422",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findPrimePairs(self, n):\n        def sieve(n):\n            prime = [True for _ in range(n+1)]\n            p = 2\n            while (p * p <= n):\n                if (prime[p] == True):\n                    for i in range(p * 2, n+1, p):\n                        prime[i] = False\n                p += 1\n            return [p for p in range(2, n+1) if prime[p]]\n\n        primes = sieve(n)\n        result = []\n        i, j = 0, len(primes) - 1\n        while i <= j:\n            if primes[i] + primes[j] == n:\n                result.append([primes[i], primes[j]])\n                i += 1\n                j -= 1\n            elif primes[i] + primes[j] < n:\n                i += 1\n            else:\n                j -= 1\n        return result"
}