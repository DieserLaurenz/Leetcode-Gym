{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 173120000,
    "question_id": "2869",
    "elapsed_time": 2872,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[4,2]\n[10,4]",
    "expected_output": "2",
    "task_finish_time": 1707525586035,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 572,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1171032332",
    "input_formatted": "[4,2], [10,4]",
    "input": "[4,2]\n[10,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_non_decreasing_length(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmax_non_decreasing_length(Nums1, Nums2) ->\n    FoldFun = fun({A, B}, {PrevMaxLen, PrevA1, PrevA2}) ->\n                  MaxLen1 = if A >= PrevA1 -> PrevMaxLen + 1; true -> 1 end,\n                  MaxLen2 = if B >= PrevA2 -> PrevMaxLen + 1; true -> 1 end,\n                  NewMaxLen = max(MaxLen1, MaxLen2),\n                  {max(NewMaxLen, PrevMaxLen), A, B}\n              end,\n    {MaxLen, _, _} = lists:foldl(FoldFun, {0, -1, -1}, lists:zip(Nums1, Nums2)),\n    MaxLen."
}