{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "417 ms",
    "memory": 86408000,
    "question_id": "2869",
    "elapsed_time": 482,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707515684870,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2973,
    "total_testcases": 2973,
    "runtime_percentile": 23.07699999999998,
    "status_memory": "86.4 MB",
    "memory_percentile": 69.23079999999999,
    "pretty_lang": "C#",
    "submission_id": "1170971793",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxNonDecreasingLength(int[] nums1, int[] nums2) {\n        int n = nums1.Length;\n        int[,] dp = new int[n, 2]; // dp[i, 0] for nums1, dp[i, 1] for nums2\n        dp[0, 0] = dp[0, 1] = 1;\n        \n        for (int i = 1; i < n; i++) {\n            dp[i, 0] = dp[i, 1] = 1;\n            if (nums1[i] >= nums1[i - 1]) dp[i, 0] = dp[i - 1, 0] + 1;\n            if (nums1[i] >= nums2[i - 1]) dp[i, 0] = Math.Max(dp[i, 0], dp[i - 1, 1] + 1);\n            if (nums2[i] >= nums1[i - 1]) dp[i, 1] = dp[i - 1, 0] + 1;\n            if (nums2[i] >= nums2[i - 1]) dp[i, 1] = Math.Max(dp[i, 1], dp[i - 1, 1] + 1);\n        }\n        \n        int maxLen = 0;\n        for (int i = 0; i < n; i++) {\n            maxLen = Math.Max(maxLen, Math.Max(dp[i, 0], dp[i, 1]));\n        }\n        \n        return maxLen;\n    }\n}"
}