{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 11: ** (ArgumentError) the Access module does not support accessing lists by index, got: 1",
    "full_runtime_error": "Line 11: ** (ArgumentError) the Access module does not support accessing lists by index, got: 1\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:11: anonymous fn/4 in Solution.max_non_decreasing_length/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:9: Solution.max_non_decreasing_length/2\n    solution.ex:40: Driver.consume_test_cases/2\n    solution.ex:26: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 76812000,
    "question_id": "2869",
    "elapsed_time": 427,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,1]\n[1,2,1]",
    "expected_output": "2",
    "task_finish_time": 1707525708494,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171032946",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_non_decreasing_length(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def max_non_decreasing_length(nums1, nums2) do\n    len = length(nums1)\n    dp = Enum.map(0..len-1, fn _ -> {0, 0} end)\n\n    dp = List.replace_at(dp, 0, {1, 1})\n\n    dp = Enum.reduce(1..len-1, dp, fn i, acc ->\n      {prev1, prev2} = Enum.at(acc, i - 1)\n      cur1 = if nums1[i] >= nums1[i - 1], do: prev1 + 1, else: 1\n      cur2 = if nums2[i] >= nums2[i - 1], do: prev2 + 1, else: 1\n      cur1 = if nums1[i] >= nums2[i - 1], do: max(cur1, prev2 + 1), else: cur1\n      cur2 = if nums2[i] >= nums1[i - 1], do: max(cur2, prev1 + 1), else: cur2\n      List.replace_at(acc, i, {cur1, cur2})\n    end)\n\n    dp\n    |> Enum.map(fn {a, b} -> max(a, b) end)\n    |> Enum.max()\n  end\nend"
}