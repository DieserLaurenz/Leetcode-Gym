{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38856000,
    "question_id": "2869",
    "elapsed_time": 1240,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,3,1]\n[1,2,1]",
    "expected_output": "2",
    "task_finish_time": 1708786064048,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 934,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184884295",
    "input_formatted": "[2,3,1], [1,2,1]",
    "input": "[2,3,1]\n[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxNonDecreasingLength(self, nums1, nums2):\n        n = len(nums1)\n        dp = [[0] * 2 for _ in range(n)]\n        dp[0][0] = dp[0][1] = 1\n        for i in range(1, n):\n            for j in range(2):\n                if nums1[i] >= nums1[i-1] or nums1[i] >= nums2[i-1]:\n                    dp[i][0] = max(dp[i][0], dp[i-1][j] + (nums1[i] >= nums1[i-1] and j == 0 or nums1[i] >= nums2[i-1] and j == 1))\n                if nums2[i] >= nums2[i-1] or nums2[i] >= nums1[i-1]:\n                    dp[i][1] = max(dp[i][1], dp[i-1][j] + (nums2[i] >= nums2[i-1] and j == 1 or nums2[i] >= nums1[i-1] and j == 0))\n        return max(dp[n-1][0], dp[n-1][1])"
}