{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "5 ms",
    "memory": 58924000,
    "display_runtime": "5",
    "question_id": "2869",
    "elapsed_time": 366,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707515570226,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2973,
    "total_testcases": 2973,
    "runtime_percentile": 68.5138,
    "status_memory": "58.9 MB",
    "memory_percentile": 77.83309999999997,
    "pretty_lang": "Java",
    "submission_id": "1170970996",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxNonDecreasingLength(int[] nums1, int[] nums2) {\n        int n = nums1.length;\n        int[] dp1 = new int[n]; // Max length ending with nums1[i]\n        int[] dp2 = new int[n]; // Max length ending with nums2[i]\n        dp1[0] = dp2[0] = 1;\n        int maxLength = 1;\n\n        for (int i = 1; i < n; i++) {\n            dp1[i] = dp2[i] = 1;\n            if (nums1[i] >= nums1[i - 1]) dp1[i] = Math.max(dp1[i], dp1[i - 1] + 1);\n            if (nums1[i] >= nums2[i - 1]) dp1[i] = Math.max(dp1[i], dp2[i - 1] + 1);\n            if (nums2[i] >= nums1[i - 1]) dp2[i] = Math.max(dp2[i], dp1[i - 1] + 1);\n            if (nums2[i] >= nums2[i - 1]) dp2[i] = Math.max(dp2[i], dp2[i - 1] + 1);\n            \n            maxLength = Math.max(maxLength, Math.max(dp1[i], dp2[i]));\n        }\n        return maxLength;\n    }\n}"
}