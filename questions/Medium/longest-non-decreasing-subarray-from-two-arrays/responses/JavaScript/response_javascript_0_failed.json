{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 77152000,
    "question_id": "2869",
    "elapsed_time": 292,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,1]\n[1,2,1]",
    "expected_output": "2",
    "task_finish_time": 1707515739875,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1254,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1170972162",
    "input_formatted": "[2,3,1], [1,2,1]",
    "input": "[2,3,1]\n[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maxNonDecreasingLength = function(nums1, nums2) {\n    const n = nums1.length;\n    let dp = Array.from({ length: n + 1 }, () => Array(2).fill(0));\n    \n    for (let i = 1; i <= n; i++) {\n        dp[i][0] = dp[i][1] = 1;\n        if (nums1[i - 1] >= nums1[i - 2]) dp[i][0] = dp[i - 1][0] + 1;\n        if (nums2[i - 1] >= nums2[i - 2]) dp[i][1] = dp[i - 1][1] + 1;\n        if (nums1[i - 1] >= nums2[i - 2]) dp[i][0] = Math.max(dp[i][0], dp[i - 1][1] + 1);\n        if (nums2[i - 1] >= nums1[i - 2]) dp[i][1] = Math.max(dp[i][1], dp[i - 1][0] + 1);\n    }\n    \n    return Math.max(...dp[n]);\n};"
}