{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42232000,
    "question_id": "2869",
    "elapsed_time": 909,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[3,19,13,19]\n[20,18,7,14]",
    "expected_output": "2",
    "task_finish_time": 1708786203274,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1024,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184885995",
    "input_formatted": "[3,19,13,19], [20,18,7,14]",
    "input": "[3,19,13,19]\n[20,18,7,14]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxNonDecreasingLength(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        dp = [[1, 1] for _ in range(n)]  # Each cell has two options: taking from nums1 or nums2\n        for i in range(1, n):\n            dp[i][0] = max(dp[i-1][0] + (nums1[i] >= nums1[i-1]), dp[i-1][1] + (nums1[i] >= nums2[i-1]))\n            dp[i][1] = max(dp[i-1][0] + (nums2[i] >= nums1[i-1]), dp[i-1][1] + (nums2[i] >= nums2[i-1]))\n        \n        # Find the max length considering the last element taken from either nums1 or nums2\n        return max(dp[n-1])"
}