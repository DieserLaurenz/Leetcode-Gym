{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41292000,
    "question_id": "2869",
    "elapsed_time": 963,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111011110111111110111111101111111111111101111111110100111111011111111110100111111111111111111111111111111111111111111111110011100111011101111101100101111110101100110111111111111111111111111111111111111111111111111111100101110111111110001100111101000000011111111111110111100111111111111001111110111111011010111111010100010111100101100100010011101111011111110011110011111111111111010111001110111101010011011110111001000001101110111000110000111110011111001011111101110100000111001111110011101000110111011101010001110001110110111111100000100101000110010110110100100011011101111111111100011111111011111001100111110000001110001001010001011110111101101111101000111100001111011111100100011111010010100111010000001001100001011001000011110010010001101011111101010010000110101100011100100001101000100100110001111101101011110000001101000100101000000110101111110111001011111011000001011110000110010000000110101110100010010100010101101100101011110101001101111110111101111111111100010101101000010110001110011100111011010000000100111101001010000100100111111001001100011010100001001100011011100000101010100010110000000011010001010111101100111100010000000000010001110010000000000110010011101100001101000100111000001110000100000000010010111001010111010111110110001001111001010101111100011100010000000000101001100010011100101011001110110010100101101011010001110010000001001111001100001000001010000011101101100100101100000000100000101000010110101000111000000000100010110011001101110101100011000101000010001010101110001011010101000001100000000001101101000110001000101000100010100111100010100000100000010100100100001010000101000010111100000100001011100001011000100010101000110000110001000110110001001111110100100000000101100100000000110010001010100000000000100001100000001101010001001000000000000000010100010000100001010100010100101011010000011001110011000101000110100100011001000010000000000100000000000011010011000101000001100111100000000100010000000010000010001000011001000000110000110011000010100001001000110010000000000000110000000011000000001000001100100011000000000010000100001000000101110001001101000000100001100010001010110100010000000001110100000000100010100000010100000000000100000010100010000100000001001000000000000000000010000100000110000001000000000010000011000000000001000010001000000011100100000000001100100000000000010101100010000000000000100000101000011000100001000010011000000000000100000000000000000000011000000010000000100000000100000010000010000000000000001100001000010100000000000001000000010000001100100000101000001000100000010000000000000010000100101000010000001100000010000000000100000000000000000010000110000000000000001110000110000000001000000000010000000000000000010000100000010100011000000000001001011000000000000000001100000000000000100010000000000000000000011110111111111100000000000000000000000000000000000000000000000000111",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[8,7,4]\n[13,4,4]",
    "expected_output": "2",
    "task_finish_time": 1708786244039,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1293,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184886461",
    "input_formatted": "[8,7,4], [13,4,4]",
    "input": "[8,7,4]\n[13,4,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxNonDecreasingLength(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        # dp[i][0] for nums1[i], dp[i][1] for nums2[i]\n        dp = [[0, 0] for _ in range(n)]\n        dp[0] = [1, 1]\n\n        for i in range(1, n):\n            if nums1[i] >= nums1[i-1]:\n                dp[i][0] = max(dp[i][0], dp[i-1][0] + 1)\n            if nums1[i] >= nums2[i-1]:\n                dp[i][0] = max(dp[i][0], dp[i-1][1] + 1)\n            if nums2[i] >= nums1[i-1]:\n                dp[i][1] = max(dp[i][1], dp[i-1][0] + 1)\n            if nums2[i] >= nums2[i-1]:\n                dp[i][1] = max(dp[i][1], dp[i-1][1] + 1)\n\n        # Find the longest non-decreasing subarray from both choices at each position\n        max_length = 0\n        for i in range(n):\n            max_length = max(max_length, dp[i][0], dp[i][1])\n\n        return max_length"
}