{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "119 ms",
    "memory": 10484000,
    "question_id": "2869",
    "elapsed_time": 141,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707525151915,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2973,
    "total_testcases": 2973,
    "runtime_percentile": 68.5716,
    "status_memory": "10.5 MB",
    "memory_percentile": 54.2859,
    "pretty_lang": "Go",
    "submission_id": "1171030076",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func maxNonDecreasingLength(nums1 []int, nums2 []int) int {\n    n := len(nums1)\n    dp := make([][2]int, n)\n    dp[0][0], dp[0][1] = 1, 1 // Initial lengths are 1 for both choices at the first position\n\n    for i := 1; i < n; i++ {\n        dp[i][0], dp[i][1] = 1, 1 // Reset to 1 for both choices at new position\n        if nums1[i] >= nums1[i-1] {\n            dp[i][0] = max(dp[i][0], dp[i-1][0]+1)\n        }\n        if nums2[i] >= nums2[i-1] {\n            dp[i][1] = max(dp[i][1], dp[i-1][1]+1)\n        }\n        if nums1[i] >= nums2[i-1] {\n            dp[i][0] = max(dp[i][0], dp[i-1][1]+1)\n        }\n        if nums2[i] >= nums1[i-1] {\n            dp[i][1] = max(dp[i][1], dp[i-1][0]+1)\n        }\n    }\n\n    maxLen := 0\n    for i := 0; i < n; i++ {\n        maxLen = max(maxLen, dp[i][0])\n        maxLen = max(maxLen, dp[i][1])\n    }\n    return maxLen\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}