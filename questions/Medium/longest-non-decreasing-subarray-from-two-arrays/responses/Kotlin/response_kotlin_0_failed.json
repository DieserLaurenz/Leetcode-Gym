{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58320000,
    "question_id": "2869",
    "elapsed_time": 532,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[5,16,15]\n[12,1,14]",
    "expected_output": "2",
    "task_finish_time": 1707516115184,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1371,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1170974623",
    "input_formatted": "[5,16,15], [12,1,14]",
    "input": "[5,16,15]\n[12,1,14]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxNonDecreasingLength(nums1: IntArray, nums2: IntArray): Int {\n        val n = nums1.size\n        var dp0 = 1 // length if we pick nums1[i]\n        var dp1 = 1 // length if we pick nums2[i]\n        var maxLength = 1\n\n        for (i in 1 until n) {\n            val newDp0 = if (nums1[i] >= nums1[i - 1] || nums1[i] >= nums2[i - 1]) maxOf(dp0, dp1) + 1 else 1\n            val newDp1 = if (nums2[i] >= nums1[i - 1] || nums2[i] >= nums2[i - 1]) maxOf(dp0, dp1) + 1 else 1\n            \n            dp0 = newDp0\n            dp1 = newDp1\n            maxLength = maxOf(maxLength, dp0, dp1)\n        }\n\n        return maxLength\n    }\n}"
}