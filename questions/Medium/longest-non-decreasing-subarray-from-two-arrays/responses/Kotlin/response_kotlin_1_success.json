{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "658 ms",
    "memory": 66160000,
    "question_id": "2869",
    "elapsed_time": 720,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707516151633,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2973,
    "total_testcases": 2973,
    "runtime_percentile": 100,
    "status_memory": "66.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Kotlin",
    "submission_id": "1170974869",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxNonDecreasingLength(nums1: IntArray, nums2: IntArray): Int {\n        val n = nums1.size\n        var dp = Array(n) { IntArray(2) } // dp[i][0] or dp[i][1] stores the max length ending with nums1[i] or nums2[i]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        var maxLength = 1\n\n        for (i in 1 until n) {\n            if (nums1[i] >= nums1[i - 1]) dp[i][0] = dp[i - 1][0] + 1\n            else dp[i][0] = 1\n            if (nums2[i] >= nums2[i - 1]) dp[i][1] = dp[i - 1][1] + 1\n            else dp[i][1] = 1\n            if (nums1[i] >= nums2[i - 1]) dp[i][0] = maxOf(dp[i][0], dp[i - 1][1] + 1)\n            if (nums2[i] >= nums1[i - 1]) dp[i][1] = maxOf(dp[i][1], dp[i - 1][0] + 1)\n\n            maxLength = maxOf(maxLength, dp[i][0], dp[i][1])\n        }\n\n        return maxLength\n    }\n}"
}