{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "927 ms",
    "memory": 76364000,
    "question_id": "2869",
    "elapsed_time": 989,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707525339862,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2973,
    "total_testcases": 2973,
    "runtime_percentile": 66.66669999999999,
    "status_memory": "76.4 MB",
    "memory_percentile": 66.66669999999999,
    "pretty_lang": "Scala",
    "submission_id": "1171031108",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxNonDecreasingLength(nums1: Array[Int], nums2: Array[Int]): Int = {\n        val n = nums1.length\n        var (maxLen, len1, len2) = (1, 1, 1)\n        var (prevMaxLen1, prevMaxLen2) = (1, 1)\n\n        for (i <- 1 until n) {\n            len1 = if (nums1(i) >= nums1(i - 1)) prevMaxLen1 + 1 else 1\n            len2 = if (nums2(i) >= nums2(i - 1)) prevMaxLen2 + 1 else 1\n\n            if (nums1(i) >= nums2(i - 1)) len1 = math.max(len1, prevMaxLen2 + 1)\n            if (nums2(i) >= nums1(i - 1)) len2 = math.max(len2, prevMaxLen1 + 1)\n\n            prevMaxLen1 = len1\n            prevMaxLen2 = len2\n\n            maxLen = math.max(maxLen, math.max(len1, len2))\n        }\n\n        maxLen\n    }\n}"
}