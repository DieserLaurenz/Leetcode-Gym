{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24484000,
    "question_id": "2869",
    "elapsed_time": 462,
    "compare_result": "011111111111111111111111111111111111111111111111111111111111101111101101011111111110010110111111111101110111111111111111111101111111110111011001110011111100110111101001111111101101001111110000111111011111110010100010011111011110111110101101110110110011101000110010000101010101111000100101000010100100010111111011101111011110000111111111000111110001100001000100100111010010001000010101000000011101011110110010100010001111100001101000011000011010100000010100000111000100100100000000001001011010100010100000100011101111010010001110011101010011011110101001000000001000011000000000011110010010000001111101100100000011000010010000001000100010011100010000100001010010011111000000000001000000000010110000100010010001011010010100001110000011010001000001110000001010001000000000010110001101100010100000000100000011000110000000000110010000000010010000001000000000010001000000010010010001100010000001000010000110000100011100100000000000000000000000101001000000100000000101000000101000000100000000110000000001110000000000011000000110000000000100001100000010010100000001101100001010010101000000101100111101011001101000000001000000000010000000000100100001000000000100101100000000000000100001110000001000001010000000001100010011000000101010000000000000000000010001000001000100011100000000000000000000100010000000000100010011001100000000000000010000000000000000000000000000000001010100010000000010000000110000010000011000001000000000000000001000100010010000000001000110110010100000101000000001100000000000001000000100000000000000000010100001000000100000000000000000000000000000000000011000000000100000010000000001000000000000000001000000000000100000000000000100000000000000000001000100000010000000001000000000000100000000100000100000000100100100001000000001000000100000000100001000000000001000100010000000010000010000000110100000001001100000000000000000000000000000100010000000100000000000000000000000000100000001000000000000000000000100000000000000010100010000001010000000000001010010000000000010000000010000000000000000000000000000000001000010000000000001000101000000000100000000000000000000001000000000000000000000000001000000000000001000100000000000000000110000000011000000000000000100000001000000000010000000000000000100000000000000000000000000000000000000110000000000000001010000000000000000100000000000000000000000000010000000000000000000000000000000000000000010000100000100000001000000000000000000000000000000000000000000000010000000000000000100000000000000010000000010000000000000000000100000000000100000000000001000000000000000000000000000000000001000000010000000000000000000000010000000000000000000001000000000000000000000000000000000000000001000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011100111111011100000000000000000000000000000000000000000000000000100",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,3,1]\n[1,2,1]",
    "expected_output": "2",
    "task_finish_time": 1707515996986,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 662,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1170973862",
    "input_formatted": "[2,3,1], [1,2,1]",
    "input": "[2,3,1]\n[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxNonDecreasingLength(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        let n = nums1.count\n        var dp = Array(repeating: Array(repeating: 0, count: 2), count: n)\n        dp[0][0] = 1\n        dp[0][1] = 1\n\n        for i in 1..<n {\n            if nums1[i] >= nums1[i - 1] {\n                dp[i][0] = max(dp[i][0], dp[i - 1][0] + 1)\n            }\n            if nums2[i] >= nums2[i - 1] {\n                dp[i][1] = max(dp[i][1], dp[i - 1][1] + 1)\n            }\n            if nums1[i] >= nums2[i - 1] {\n                dp[i][0] = max(dp[i][0], dp[i - 1][1] + 1)\n            }\n            if nums2[i] >= nums1[i - 1] {\n                dp[i][1] = max(dp[i][1], dp[i - 1][0] + 1)\n            }\n        }\n\n        return max(dp[n - 1][0], dp[n - 1][1])\n    }\n}"
}