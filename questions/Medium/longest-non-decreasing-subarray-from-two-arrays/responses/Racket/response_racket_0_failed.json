{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 139256000,
    "question_id": "2869",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,1]\n[1,2,1]",
    "expected_output": "2",
    "task_finish_time": 1707525455280,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 983,
    "total_testcases": 2973,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1171031667",
    "input_formatted": "[2,3,1], [1,2,1]",
    "input": "[2,3,1]\n[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (max-non-decreasing-length nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  (let loop ((i 0) (max-len 1) (curr-len 1) (prev-max (min (car nums1) (car nums2))))\n    (if (= i (length nums1))\n        max-len\n        (let ((a (list-ref nums1 i))\n              (b (list-ref nums2 i)))\n          (if (or (>= a prev-max) (>= b prev-max))\n              (let ((new-prev-max (if (and (>= a prev-max) (>= b prev-max))\n                                      (min a b)\n                                      (if (>= a prev-max) a b))))\n                (loop (+ i 1) (max max-len (+ curr-len 1)) (+ curr-len 1) new-prev-max))\n              (loop (+ i 1) max-len 1 (min a b))))))\n  )"
}