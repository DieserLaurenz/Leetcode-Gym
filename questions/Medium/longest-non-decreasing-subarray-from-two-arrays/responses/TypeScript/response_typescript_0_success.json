{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "237 ms",
    "memory": 81316000,
    "question_id": "2869",
    "elapsed_time": 306,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707515873546,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2973,
    "total_testcases": 2973,
    "runtime_percentile": 15.789000000000009,
    "status_memory": "81.3 MB",
    "memory_percentile": 21.052200000000017,
    "pretty_lang": "TypeScript",
    "submission_id": "1170973071",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function maxNonDecreasingLength(nums1: number[], nums2: number[]): number {\n    let n = nums1.length;\n    let dp: number[][] = Array.from({ length: n + 1 }, () => Array(2).fill(1));\n    let maxLen = 1;\n\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i][1] = 1;\n        if (nums1[i] >= nums1[i - 1]) dp[i][0] = dp[i - 1][0] + 1;\n        if (nums2[i] >= nums2[i - 1]) dp[i][1] = dp[i - 1][1] + 1;\n        if (nums1[i] >= nums2[i - 1]) dp[i][0] = Math.max(dp[i][0], dp[i - 1][1] + 1);\n        if (nums2[i] >= nums1[i - 1]) dp[i][1] = Math.max(dp[i][1], dp[i - 1][0] + 1);\n\n        maxLen = Math.max(maxLen, dp[i][0], dp[i][1]);\n    }\n\n    return maxLen;\n};"
}