{
    "acRate": 52.069795427196155,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2767",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Partition String Into Minimum Beautiful Substrings",
    "titleSlug": "partition-string-into-minimum-beautiful-substrings",
    "topicTags": [
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Backtracking",
            "id": "VG9waWNUYWdOb2RlOjE0",
            "slug": "backtracking"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minimumBeautifulSubstrings(string s) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minimumBeautifulSubstrings(String s) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimumBeautifulSubstrings(self, s):         \"\"\"         :type s: str         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimumBeautifulSubstrings(self, s: str) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minimumBeautifulSubstrings(char * s){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinimumBeautifulSubstrings(string s) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @return {number}  */ var minimumBeautifulSubstrings = function(s) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimumBeautifulSubstrings(s: string): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @return Integer      */     function minimumBeautifulSubstrings($s) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimumBeautifulSubstrings(_ s: String) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimumBeautifulSubstrings(s: String): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minimumBeautifulSubstrings(String s) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimumBeautifulSubstrings(s string) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @return {Integer} def minimum_beautiful_substrings(s)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimumBeautifulSubstrings(s: String): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimum_beautiful_substrings(s: String) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimum-beautiful-substrings s)   (-> string? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimum_beautiful_substrings(S :: unicode:unicode_binary()) -> integer(). minimum_beautiful_substrings(S) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimum_beautiful_substrings(s :: String.t) :: integer   def minimum_beautiful_substrings(s) do    end end"
        }
    ],
    "content": "Given a binary string s, partition the string into one or more substrings such that each substring is beautiful. A string is beautiful if:  It doesn't contain leading zeros. It's the binary representation of a number that is a power of 5.  Return the minimum number of substrings in such partition. If it is impossible to partition the string s into beautiful substrings,return -1. A substring is a contiguous sequence of characters in a string.  Example 1:  Input: s = \"1011\" Output: 2 Explanation: We can paritition the given string into [\"101\", \"1\"]. - The string \"101\" does not contain leading zeros and is the binary representation of integer 51 = 5. - The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1. It can be shown that 2 is the minimum number of beautiful substrings that s can be partitioned into.  Example 2:  Input: s = \"111\" Output: 3 Explanation: We can paritition the given string into [\"1\", \"1\", \"1\"]. - The string \"1\" does not contain leading zeros and is the binary representation of integer 50 = 1. It can be shown that 3 is the minimum number of beautiful substrings that s can be partitioned into.  Example 3:  Input: s = \"0\" Output: -1 Explanation: We can not partition the given string into beautiful substrings.   Constraints:  1 <= s.length <= 15 s[i] is either '0' or '1'.  "
}