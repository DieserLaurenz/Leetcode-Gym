{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "42 ms",
    "memory": 21672000,
    "question_id": "2883",
    "elapsed_time": 64,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708092202591,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 561,
    "total_testcases": 561,
    "runtime_percentile": 5.044500000000007,
    "status_memory": "21.7 MB",
    "memory_percentile": 5.638000000000011,
    "pretty_lang": "C++",
    "submission_id": "1176988655",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumBeautifulSubstrings(string s) {\n        // Pre-calculate powers of 5 representations in binary form.\n        vector<string> powersOf5;\n        for (long long i = 1; i <= (1LL << 50); i *= 5) {\n            powersOf5.push_back(toBinary(i));\n        }\n        \n        int n = s.size();\n        vector<int> dp(n + 1, INT_MAX / 2);\n        dp[0] = 0; // Base case: no substrings for an empty string.\n        \n        for (int i = 1; i <= n; ++i) {\n            for (string& power : powersOf5) {\n                int len = power.length(), start = i - len;\n                if (start >= 0 && s.substr(start, len) == power) {\n                    dp[i] = min(dp[i], dp[start] + 1);\n                }\n            }\n        }\n        \n        return dp[n] >= INT_MAX / 2 ? -1 : dp[n];\n    }\n\nprivate:\n    string toBinary(long long n) {\n        string binary = \"\";\n        while (n > 0) {\n            binary = char('0' + n % 2) + binary;\n            n /= 2;\n        }\n        return binary;\n    }\n};"
}