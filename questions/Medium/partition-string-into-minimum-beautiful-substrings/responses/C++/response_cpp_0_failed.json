{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7904000,
    "question_id": "2883",
    "elapsed_time": 13,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"111\"",
    "expected_output": "3",
    "task_finish_time": 1708092161211,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 125,
    "total_testcases": 561,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1176988202",
    "input_formatted": "\"111\"",
    "input": "\"111\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumBeautifulSubstrings(string s) {\n        vector<long long> powersOf5;\n        long long power = 1;\n        while (power < (1LL << s.size())) {\n            powersOf5.push_back(power);\n            power *= 5;\n        }\n\n        vector<int> dp(s.size() + 1, 1e9);\n        dp[0] = 0; // Base case: no substrings for an empty string\n\n        for (int i = 1; i <= s.size(); ++i) {\n            if (s[i - 1] == '0') continue; // Skip leading zeros\n            long long num = 0;\n            for (int j = i; j >= 1; --j) {\n                num = num >> 1 | (s[j - 1] - '0') << (i - j);\n                if (find(powersOf5.begin(), powersOf5.end(), num) != powersOf5.end()) {\n                    dp[i] = min(dp[i], dp[j - 1] + 1);\n                }\n            }\n        }\n\n        return dp[s.size()] >= 1e9 ? -1 : dp[s.size()];\n    }\n};"
}