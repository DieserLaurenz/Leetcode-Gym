{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 15444000,
    "question_id": "2883",
    "elapsed_time": 21,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708093019494,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 561,
    "total_testcases": 561,
    "runtime_percentile": 100,
    "status_memory": "15.4 MB",
    "memory_percentile": 80.0,
    "pretty_lang": "Swift",
    "submission_id": "1176998644",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumBeautifulSubstrings(_ s: String) -> Int {\n        var dp = [Int](repeating: -1, count: s.count)\n        let sArray = Array(s)\n\n        func isPowerOfFive(_ val: Int) -> Bool {\n            var val = val\n            while val % 5 == 0 && val > 0 {\n                val /= 5\n            }\n            return val == 1\n        }\n\n        func dfs(_ index: Int) -> Int {\n            if index == s.count { return 0 }\n            if dp[index] != -1 { return dp[index] }\n            var ans = Int.max\n            var num = 0\n            for i in index..<s.count {\n                num = num * 2 + Int(String(sArray[i]))!\n                if sArray[i] == \"0\" && num == 0 { break }\n                if isPowerOfFive(num) {\n                    let next = dfs(i + 1)\n                    if next != Int.max {\n                        ans = min(ans, 1 + next)\n                    }\n                }\n            }\n            dp[index] = ans\n            return ans\n        }\n\n        let result = dfs(0)\n        return result == Int.max ? -1 : result\n    }\n}"
}