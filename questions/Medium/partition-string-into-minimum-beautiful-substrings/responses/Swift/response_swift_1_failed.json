{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16048000,
    "question_id": "2883",
    "elapsed_time": 60,
    "compare_result": "001000000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111100101000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"1011\"",
    "expected_output": "2",
    "task_finish_time": 1708092980527,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 56,
    "total_testcases": 561,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1176998127",
    "input_formatted": "\"1011\"",
    "input": "\"1011\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumBeautifulSubstrings(_ s: String) -> Int {\n        var dp = Array(repeating: Int.max / 2, count: s.count + 1)\n        dp[0] = 0\n        let powersOfFive = (0..<20).map { String(5 << $0, radix: 2) }\n        \n        for i in 1...s.count {\n            for power in powersOfFive where power.count <= i {\n                if s.hasSuffix(power, upTo: i) {\n                    dp[i] = min(dp[i], dp[i - power.count] + 1)\n                }\n            }\n        }\n        \n        return dp[s.count] < Int.max / 2 ? dp[s.count] : -1\n    }\n}\n\nprivate extension String {\n    func hasSuffix(_ suffix: String, upTo index: Int) -> Bool {\n        let start = self.index(self.startIndex, offsetBy: index - suffix.count)\n        let end = self.index(self.startIndex, offsetBy: index)\n        return self[start..<end] == suffix\n    }\n}"
}