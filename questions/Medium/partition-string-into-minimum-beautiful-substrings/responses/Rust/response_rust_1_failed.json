{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2108000,
    "question_id": "2883",
    "elapsed_time": 23,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"111\"",
    "expected_output": "3",
    "task_finish_time": 1708093612849,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 125,
    "total_testcases": 561,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1177005809",
    "input_formatted": "\"111\"",
    "input": "\"111\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_beautiful_substrings(s: String) -> i32 {\n        let mut dp = vec![-1; s.len() + 1];\n        dp[0] = 0;\n        let powers_of_5: Vec<u64> = (0..)\n            .map(|x| 5u64.pow(x))\n            .take_while(|&x| x <= 1 << s.len())\n            .collect();\n        for i in 1..=s.len() {\n            if s.as_bytes()[i - 1] == b'0' {\n                continue;\n            }\n            let mut num = 0u64;\n            for j in (0..i).rev() {\n                num >>= 1;\n                num |= (s.as_bytes()[j] - b'0') as u64 * (1 << (i - j - 1));\n                if powers_of_5.contains(&num) {\n                    if dp[j] != -1 {\n                        if dp[i] == -1 {\n                            dp[i] = dp[j] + 1;\n                        } else {\n                            dp[i] = dp[i].min(dp[j] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        dp[s.len()]\n    }\n}"
}