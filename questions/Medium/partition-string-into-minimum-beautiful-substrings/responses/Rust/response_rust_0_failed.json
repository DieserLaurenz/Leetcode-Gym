{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2156000,
    "question_id": "2883",
    "elapsed_time": 11,
    "compare_result
    "code_output": "-2147483647",
    "std_output": "",
    "last_testcase": "\"1011\"",
    "expected_output": "2",
    "task_finish_time": 1708093570275,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 561,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1177005257",
    "input_formatted": "\"1011\"",
    "input": "\"1011\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_beautiful_substrings(s: String) -> i32 {\n        let mut powers_of_5 = vec![1];\n        while powers_of_5.last().unwrap() < &33554432 { // 2^25 > 10^7 (max possible value in 15 bits of binary)\n            powers_of_5.push(powers_of_5.last().unwrap() * 5);\n        }\n\n        let mut dp = vec![i32::MAX; s.len() + 1];\n        dp[0] = 0;\n\n        for i in 1..=s.len() {\n            if s.as_bytes()[i - 1] == b'0' {\n                continue;\n            }\n\n            let mut num = 0;\n            for j in (0..i).rev() {\n                num = num * 2 + (s.as_bytes()[j] - b'0') as i32;\n                if powers_of_5.contains(&num) {\n                    dp[i] = dp[i].min(dp[j] + 1);\n                }\n            }\n        }\n\n        if dp[s.len()] == i32::MAX {\n            -1\n        } else {\n            dp[s.len()]\n        }\n    }\n}"
}