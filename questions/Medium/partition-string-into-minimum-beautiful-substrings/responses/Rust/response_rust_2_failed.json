{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2020000,
    "question_id": "2883",
    "elapsed_time": 12,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"100111000110111\"",
    "expected_output": "4",
    "task_finish_time": 1708093646116,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 338,
    "total_testcases": 561,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1177006187",
    "input_formatted": "\"100111000110111\"",
    "input": "\"100111000110111\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_beautiful_substrings(s: String) -> i32 {\n        fn is_power_of_5(x: i64) -> bool {\n            x != 0 && x.count_ones() == 1 && x.trailing_zeros() % 2 == 0\n        }\n\n        let mut dp = vec![None; s.len() + 1];\n        dp[0] = Some(0);\n\n        for i in 1..=s.len() {\n            let mut val = 0;\n            for j in (0..i).rev() {\n                val >>= 1;\n                val |= (s.as_bytes()[j] - b'0') as i64 * (1 << (i - j - 1));\n                if s.as_bytes()[j] == b'1' && is_power_of_5(val) {\n                    if let Some(count) = dp[j] {\n                        dp[i] = Some(dp[i].map_or(count + 1, |min_count| min_count.min(count + 1)));\n                    }\n                }\n            }\n        }\n\n        dp[s.len()].unwrap_or(-1)\n    }\n}"
}