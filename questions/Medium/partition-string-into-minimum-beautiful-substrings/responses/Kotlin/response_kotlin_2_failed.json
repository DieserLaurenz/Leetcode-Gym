{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34520000,
    "question_id": "2883",
    "elapsed_time": 140,
    "compare_result
    "code_output": "-2147483647",
    "std_output": "",
    "last_testcase": "\"1011\"",
    "expected_output": "2",
    "task_finish_time": 1708093157174,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 561,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1177000283",
    "input_formatted": "\"1011\"",
    "input": "\"1011\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumBeautifulSubstrings(s: String): Int {\n        val powersOfFive = mutableListOf<Long>()\n        var current: Long = 1\n        while (current <= (1L shl s.length) - 1) {\n            powersOfFive.add(current)\n            current *= 5\n        }\n\n        val dp = IntArray(s.length + 1) { Int.MAX_VALUE }\n        dp[0] = 0\n        for (i in 1..s.length) {\n            if (s[i - 1] == '0') continue\n            var num = 0L\n            for (j in i downTo 1) {\n                num = num shl 1 or (s[j - 1] - '0').toLong()\n                if (powersOfFive.contains(num)) {\n                    dp[i] = kotlin.math.min(dp[i], dp[j - 1] + 1)\n                }\n            }\n        }\n        return if (dp[s.length] == Int.MAX_VALUE) -1 else dp[s.length]\n    }\n}"
}