{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41844000,
    "display_runtime": "4",
    "question_id": "2883",
    "elapsed_time": 163,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"1011\"",
    "expected_output": "2",
    "task_finish_time": 1708092262785,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 52,
    "total_testcases": 561,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1176989388",
    "input_formatted": "\"1011\"",
    "input": "\"1011\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumBeautifulSubstrings(String s) {\n        if (s.charAt(0) == '0') return -1;\n        int n = s.length();\n        int[] dp = new int[n + 1];\n        for (int i = 0; i <= n; i++) dp[i] = Integer.MAX_VALUE / 2;\n        dp[0] = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            long num = 0;\n            for (int j = i; j >= 1; j--) {\n                num = num >> 1 | (s.charAt(j - 1) - '0') << (i - j);\n                if (s.charAt(j - 1) == '0') continue;\n                if ((num & (num - 1)) == 0 && (num % 5 == 0)) {\n                    dp[i] = Math.min(dp[i], dp[j - 1] + 1);\n                }\n            }\n        }\n        return dp[n] >= Integer.MAX_VALUE / 2 ? -1 : dp[n];\n    }\n}"
}