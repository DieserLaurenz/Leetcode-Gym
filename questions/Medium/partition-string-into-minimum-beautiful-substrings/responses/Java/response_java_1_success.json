{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 43752000,
    "display_runtime": "3",
    "question_id": "2883",
    "elapsed_time": 183,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708092294960,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 561,
    "total_testcases": 561,
    "runtime_percentile": 69.1756,
    "status_memory": "43.8 MB",
    "memory_percentile": 44.444699999999976,
    "pretty_lang": "Java",
    "submission_id": "1176989806",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumBeautifulSubstrings(String s) {\n        int n = s.length();\n        // Powers of 5 in binary representation up to the maximum length of s\n        String[] powersOf5 = {\"1\", \"101\", \"11001\", \"1111101\", \"1001110001\", \"110000110101\", \"11110100001001\"};\n        int[] dp = new int[n + 1];\n        // Initialize dp array\n        for (int i = 0; i <= n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n        }\n        dp[0] = 0; // base case\n\n        for (int i = 1; i <= n; i++) {\n            for (String power : powersOf5) {\n                int end = i;\n                int start = i - power.length();\n                if (start >= 0 && s.substring(start, end).equals(power)) {\n                    if (dp[start] != Integer.MAX_VALUE) {\n                        dp[i] = Math.min(dp[i], dp[start] + 1);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}"
}