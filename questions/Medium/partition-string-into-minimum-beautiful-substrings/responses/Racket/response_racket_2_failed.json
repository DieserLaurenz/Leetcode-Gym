{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "application: not a procedure;",
    "full_runtime_error": "application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 6\n  context...:\n   solution.rkt:15:2: dfs\n   [repeats 2 more times]\n   solution.rkt:1:0: minimum-beautiful-substrings\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:42:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99944000,
    "question_id": "2883",
    "elapsed_time": 406,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"10110111111011\"",
    "expected_output": "4",
    "task_finish_time": 1708093822662,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 38,
    "total_testcases": 561,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1177008243",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-beautiful-substrings s)\n  (-> string? exact-integer?)\n  \n  (define (is-power-of-5? n)\n    (and (> n 0) (or (= n 1) (and (zero? (modulo n 5)) (is-power-of-5? (/ n 5))))))\n\n  (define (binary-to-decimal b)\n    (let loop ([bits (string->list b)] [result 0])\n      (if (null? bits)\n          result\n          (loop (cdr bits) (+ (* result 2) (if (char=? (car bits) #\\1) 1 0))))))\n\n  (define memo (make-vector (string-length s) #f))\n\n  (define (dfs pos)\n    (if (= pos (string-length s))\n        0\n        (if (vector-ref memo pos)\n            (vector-ref memo pos)\n            (let loop ([i (+ pos 1)] [min #f])\n              (if (> i (string-length s))\n                  (begin\n                    (vector-set! memo pos (if min min +inf.0))\n                    (vector-ref memo pos))\n                  (let* ([sub (substring s pos i)]\n                         [num (binary-to-decimal sub)])\n                    (if (and (> num 0) (is-power-of-5? num) (not (char=? (string-ref sub 0) #\\0)))\n                        (let ([next (dfs i)])\n                          (if (not (= next +inf.0))\n                              (let ([new-min (if min (min min (+ 1 next)) (+ 1 next))])\n                                (vector-set! memo pos new-min)\n                                (loop (+ i 1) new-min))\n                              (loop (+ i 1) min)))\n                        (loop (+ i 1) min))))))))\n\n  (let ([result (dfs 0)])\n    (if (= result +inf.0) -1 result)))"
}