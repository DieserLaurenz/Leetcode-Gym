{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "552 ms",
    "memory": 55556000,
    "question_id": "2883",
    "elapsed_time": 736,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708093506774,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 561,
    "total_testcases": 561,
    "runtime_percentile": 100,
    "status_memory": "55.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1177004506",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumBeautifulSubstrings(s: String): Int = {\n        if(s.head == '0') return -1\n        \n        val powersOfFive = Stream.iterate(1L)(_ * 5).takeWhile(_ <= (1L << s.length) - 1).map(_.toBinaryString).toSet\n        val dp = Array.fill(s.length + 1)(Int.MaxValue)\n        dp(0) = 0\n        \n        for(i <- 1 to s.length) {\n            for(j <- 0 until i) {\n                if(s(j) != '0' && powersOfFive.contains(s.substring(j, i))) {\n                    if(dp(j) != Int.MaxValue) dp(i) = dp(i) min dp(j) + 1\n                }\n            }\n        }\n        \n        if(dp(s.length) == Int.MaxValue) -1 else dp(s.length)\n    }\n}"
}