{
    "acRate": 30.134808696329774,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2718",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Sum of Matrix After Queries",
    "titleSlug": "sum-of-matrix-after-queries",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long matrixSumQueries(int n, vector<vector<int>>& queries) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long matrixSumQueries(int n, int[][] queries) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def matrixSumQueries(self, n, queries):         \"\"\"         :type n: int         :type queries: List[List[int]]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def matrixSumQueries(self, n: int, queries: List[List[int]]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long matrixSumQueries(int n, int** queries, int queriesSize, int* queriesColSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long MatrixSumQueries(int n, int[][] queries) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} n  * @param {number[][]} queries  * @return {number}  */ var matrixSumQueries = function(n, queries) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function matrixSumQueries(n: number, queries: number[][]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $n      * @param Integer[][] $queries      * @return Integer      */     function matrixSumQueries($n, $queries) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func matrixSumQueries(_ n: Int, _ queries: [[Int]]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun matrixSumQueries(n: Int, queries: Array<IntArray>): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int matrixSumQueries(int n, List<List<int>> queries) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func matrixSumQueries(n int, queries [][]int) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n # @param {Integer[][]} queries # @return {Integer} def matrix_sum_queries(n, queries)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def matrixSumQueries(n: Int, queries: Array[Array[Int]]): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn matrix_sum_queries(n: i32, queries: Vec<Vec<i32>>) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (matrix-sum-queries n queries)   (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec matrix_sum_queries(N :: integer(), Queries :: [[integer()]]) -> integer(). matrix_sum_queries(N, Queries) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec matrix_sum_queries(n :: integer, queries :: [[integer]]) :: integer   def matrix_sum_queries(n, queries) do    end end"
        }
    ],
    "content": "You are given an integer n and a 0-indexed2D array queries where queries[i] = [typei, indexi, vali]. Initially, there is a 0-indexed n x n matrix filled with 0's. For each query, you must apply one of the following changes:  if typei == 0, set the values in the row with indexi to vali, overwriting any previous values. if typei == 1, set the values in the column with indexi to vali, overwriting any previous values.  Return the sum of integers in the matrix after all queries are applied.  Example 1:   Input: n = 3, queries = [[0,0,1],[1,2,2],[0,2,3],[1,0,4]] Output: 23 Explanation: The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 23.   Example 2:   Input: n = 3, queries = [[0,0,4],[0,1,2],[1,0,1],[0,2,3],[1,2,1]] Output: 17 Explanation: The image above describes the matrix after each query. The sum of the matrix after all queries are applied is 17.   Constraints:  1 <= n <= 104 1 <= queries.length <= 5 * 104 queries[i].length == 3 0 <= typei <= 1 0 <= indexi< n 0 <= vali <= 105  "
}