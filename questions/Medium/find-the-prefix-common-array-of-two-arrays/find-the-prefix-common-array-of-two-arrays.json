{
    "acRate": 80.2605382819221,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2657",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Prefix Common Array of Two Arrays",
    "titleSlug": "find-the-prefix-common-array-of-two-arrays",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Bit Manipulation",
            "id": "VG9waWNUYWdOb2RlOjE5",
            "slug": "bit-manipulation"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> findThePrefixCommonArray(vector<int>& A, vector<int>& B) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] findThePrefixCommonArray(int[] A, int[] B) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def findThePrefixCommonArray(self, A, B):         \"\"\"         :type A: List[int]         :type B: List[int]         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def findThePrefixCommonArray(self, A: List[int], B: List[int]) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* findThePrefixCommonArray(int* A, int ASize, int* B, int BSize, int* returnSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] FindThePrefixCommonArray(int[] A, int[] B) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} A  * @param {number[]} B  * @return {number[]}  */ var findThePrefixCommonArray = function(A, B) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findThePrefixCommonArray(A: number[], B: number[]): number[] {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $A      * @param Integer[] $B      * @return Integer[]      */     function findThePrefixCommonArray($A, $B) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func findThePrefixCommonArray(_ A: [Int], _ B: [Int]) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun findThePrefixCommonArray(A: IntArray, B: IntArray): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> findThePrefixCommonArray(List<int> A, List<int> B) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findThePrefixCommonArray(A []int, B []int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} a # @param {Integer[]} b # @return {Integer[]} def find_the_prefix_common_array(a, b)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def findThePrefixCommonArray(A: Array[Int], B: Array[Int]): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn find_the_prefix_common_array(a: Vec<i32>, b: Vec<i32>) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (find-the-prefix-common-array A B)   (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec find_the_prefix_common_array(A :: [integer()], B :: [integer()]) -> [integer()]. find_the_prefix_common_array(A, B) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec find_the_prefix_common_array(a :: [integer], b :: [integer]) :: [integer]   def find_the_prefix_common_array(a, b) do    end end"
        }
    ],
    "content": "You are given two 0-indexed integer permutations A and B of length n. A prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B. Return the prefix common array of A and B. A sequence of n integers is called apermutation if it contains all integers from 1 to n exactly once.  Example 1:  Input: A = [1,3,2,4], B = [3,1,2,4] Output: [0,2,3,4] Explanation: At i = 0: no number is common, so C[0] = 0. At i = 1: 1 and 3 are common in A and B, so C[1] = 2. At i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3. At i = 3: 1, 2, 3, and 4 are common in A and B, so C[3] = 4.  Example 2:  Input: A = [2,3,1], B = [3,1,2] Output: [0,1,3] Explanation: At i = 0: no number is common, so C[0] = 0. At i = 1: only 3 is common in A and B, so C[1] = 1. At i = 2: 1, 2, and 3 are common in A and B, so C[2] = 3.   Constraints:  1 <= A.length == B.length == n <= 50 1 <= A[i], B[i] <= n It is guaranteed that A and B are both a permutation of n integers.  "
}