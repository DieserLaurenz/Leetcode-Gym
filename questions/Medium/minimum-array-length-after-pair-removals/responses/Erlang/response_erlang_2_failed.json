{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 150984000,
    "question_id": "3081",
    "elapsed_time": 2085,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,4,9]",
    "expected_output": "0",
    "task_finish_time": 1707742352031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 132,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1173158071",
    "input_formatted": "[1,3,4,9]",
    "input": "[1,3,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_length_after_removals(Nums :: [integer()]) -> integer().\nmin_length_after_removals(Nums) ->\n    Count = lists:foldl(fun(X, Map) ->\n                            case maps:find(X, Map) of\n                                {ok, C} -> Map#{X => C+1};\n                                error -> Map#{X => 1}\n                            end\n                        end, #{}, Nums),\n    TotalPairs = maps:fold(fun(_Key, Val, Acc) -> Acc + (Val div 2) end, 0, Count),\n    Length = length(Nums),\n    Length - 2*TotalPairs."
}