{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59920000,
    "display_runtime": "1",
    "question_id": "3081",
    "elapsed_time": 553,
    "compare_result": "11011111111111111111111111001000111010000111110110000000011111110000000011111001111000000001010110111100000110111110000001011111000011100100000000000001011111000011101111110000011111111000000010011000000000000011110111110000000000010111110000011101100000000000001110011110000111111111000000000111000011111111111000001100111111000000000011111000000100111111000000000011111111100000111011111100001001100001011111100111011010000001111100000011111111000001011111110000000000110111111111000000111100000010000011110001111111110111000011000000101111000011100100001111000011001001000111000101100001001111000011111110001111110111011111111001101",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707731402637,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 318,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1173046977",
    "input_formatted": "[1,1,2]",
    "input": "[1,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minLengthAfterRemovals(List<Integer> nums) {\n        // If the total number of elements is odd, one element will always remain after pairing.\n        // If all elements are the same in a sorted array, no pairs can be formed, so the length remains unchanged.\n        if (nums.size() % 2 == 1 || nums.get(0).equals(nums.get(nums.size() - 1))) {\n            return nums.size();\n        }\n        // In all other cases, the array can be reduced to an empty array by repeatedly removing pairs.\n        return 0;\n    }\n}"
}