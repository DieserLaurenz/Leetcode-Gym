{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59468000,
    "display_runtime": "14",
    "question_id": "3081",
    "elapsed_time": 496,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707731360126,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 241,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1173046555",
    "input_formatted": "[1,1,2]",
    "input": "[1,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minLengthAfterRemovals(List<Integer> nums) {\n        // Since the array is sorted, pairs can only be formed if the array has an even number of distinct elements.\n        // If the count of distinct elements is odd, one element will always be left.\n        int distinctCount = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (i == 0 || !nums.get(i).equals(nums.get(i - 1))) {\n                distinctCount++;\n            }\n        }\n        return distinctCount % 2;\n    }\n}"
}