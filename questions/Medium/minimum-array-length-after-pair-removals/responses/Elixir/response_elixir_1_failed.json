{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 159152000,
    "question_id": "3081",
    "elapsed_time": 1032,
    "compare_result": "11000000000011111111111100000000100100000110000000000000010000000000000011110000010000000001000000000000000100000000000001000000000010000000000000000001000000000011100000000000010000000000000010000000000000000000000000000000000000010000000000011000000000000000001110000000000000000000000000000111000000000000000000001100000000000000000000000000000100000000000000000010000000000000111000000000001000000001000000000110000000000000000000000000000000000001000000000000000000110000000000000000100000000000000000000001000000000000000000000000101000000000000000000000000000000001000000000100000000000000000000011000000111110111011111101000001",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707742429617,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 81,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173158955",
    "input_formatted": "[1,1,2]",
    "input": "[1,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_length_after_removals(nums :: [integer]) :: integer\n  def min_length_after_removals(nums) do\n    nums\n    |> Enum.chunk_every(2, 2, :discard)\n    |> Enum.reduce(0, fn [a, b], acc ->\n      if a < b, do: acc, else: acc + 2\n    end)\n  end\nend"
}