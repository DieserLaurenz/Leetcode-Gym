{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 162900000,
    "question_id": "3081",
    "elapsed_time": 1066,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1]",
    "expected_output": "1",
    "task_finish_time": 1707742458305,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 32,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173159248",
    "input_formatted": "[1]",
    "input": "[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_length_after_removals(nums :: [integer]) :: integer\n  def min_length_after_removals(nums) do\n    {count, _} = Enum.reduce(nums, {0, nil}, fn x, {acc, prev} ->\n      case prev do\n        nil -> {acc, x}\n        ^x -> {acc + 1, prev}\n        _ -> {acc, nil}\n      end\n    end)\n    if rem(count, 2) == 0, do: 0, else: 1\n  end\nend"
}