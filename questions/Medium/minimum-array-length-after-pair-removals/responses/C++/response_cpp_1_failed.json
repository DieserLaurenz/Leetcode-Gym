{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 151284000,
    "question_id": "3081",
    "elapsed_time": 172,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,1,2,2]",
    "expected_output": "0",
    "task_finish_time": 1707731275327,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 155,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173045775",
    "input_formatted": "[1,1,2,2]",
    "input": "[1,1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minLengthAfterRemovals(vector<int>& nums) {\n        int n = nums.size();\n        // Initialize a counter for pairs.\n        int pairs = 0;\n        for (int i = 0; i < n - 1; i++) {\n            // Since the array is sorted, check adjacent elements for a possible pair.\n            if (nums[i] < nums[i + 1]) {\n                // If a valid pair is found, increment the pair counter and skip the next element.\n                pairs++;\n                i++;\n            }\n        }\n        // Calculate remaining elements after removals.\n        int remaining = n - 2 * pairs;\n        return remaining;\n    }\n};"
}