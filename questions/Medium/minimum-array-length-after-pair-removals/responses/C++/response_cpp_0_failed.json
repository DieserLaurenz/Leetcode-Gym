{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 151168000,
    "question_id": "3081",
    "elapsed_time": 182,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707731244847,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 241,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173045484",
    "input_formatted": "[1,1,2]",
    "input": "[1,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minLengthAfterRemovals(vector<int>& nums) {\n        // Since the array is sorted, elements can only be removed in pairs if they are different.\n        // If there's an odd number of unique elements, one will remain.\n        // Thus, we only need to determine if the count of unique elements is odd or even.\n        int uniqueCount = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            // Count unique elements by comparing each element with the next one.\n            if (i == nums.size() - 1 || nums[i] != nums[i + 1]) uniqueCount++;\n        }\n        // If uniqueCount is odd, one element cannot be removed and will remain.\n        // If uniqueCount is even, all elements can be paired and removed.\n        return uniqueCount % 2;\n    }\n};"
}