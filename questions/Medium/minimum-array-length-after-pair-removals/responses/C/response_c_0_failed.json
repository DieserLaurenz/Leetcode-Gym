{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15628000,
    "question_id": "3081",
    "elapsed_time": 150,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707731461514,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 81,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1173047563",
    "input_formatted": "[1,1,2]",
    "input": "[1,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int minLengthAfterRemovals(int* nums, int numsSize){\n    int evenPairs = 0; // Count of pairs (i < j and nums[i] < nums[j])\n    for (int i = 0; i < numsSize - 1; ++i) {\n        if (nums[i] < nums[i + 1]) {\n            evenPairs++;\n            i++; // Skip the next element as it has been paired\n        }\n    }\n    // The minimum length after removals is determined by whether we have an odd or even number of elements\n    // If the total number of elements is odd, one element will always be left after maximal pair removals\n    // If it's even, all elements can be removed through the operation\n    return numsSize % 2 == 0 ? numsSize - 2 * evenPairs : numsSize - 2 * evenPairs + 1;\n}"
}