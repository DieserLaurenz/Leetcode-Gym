{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 129132000,
    "question_id": "3081",
    "elapsed_time": 590,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1]",
    "expected_output": "1",
    "task_finish_time": 1707742217337,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 24,
    "total_testcases": 635,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1173156695",
    "input_formatted": "[1]",
    "input": "[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-length-after-removals nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (define (remove-pairs lst)\n    (if (null? lst) 0\n        (let loop ([lst lst] [removed 0])\n          (if (or (null? lst) (null? (cdr lst))) (+ removed (length lst))\n              (if (< (car lst) (cadr lst))\n                  (loop (cddr lst) (+ removed 2))\n                  (loop (cdr lst) removed)))))\n    )\n  (- (length nums) (remove-pairs nums)))"
}