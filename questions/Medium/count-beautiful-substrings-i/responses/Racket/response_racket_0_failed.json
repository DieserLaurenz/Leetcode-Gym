{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 127884000,
    "question_id": "3210",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"baeyh\"\n2",
    "expected_output": "2",
    "task_finish_time": 1707074041986,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 239,
    "total_testcases": 619,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1166130234",
    "input_formatted": "\"baeyh\", 2",
    "input": "\"baeyh\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (beautiful-substrings s k)\n  (-> string? exact-integer? exact-integer?)\n  (let ([len (string-length s)])\n    (define (vowel? c)\n      (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (count-beautiful i j vowels consonants)\n      (if (> i j)\n          0\n          (let* ([c (string-ref s i)]\n                 [vowels (if (vowel? c) (+ vowels 1) vowels)]\n                 [consonants (if (vowel? c) consonants (+ consonants 1))]\n                 [next-count (count-beautiful (+ i 1) j vowels consonants)])\n            (if (and (= vowels consonants) (= (modulo (* vowels consonants) k) 0))\n                (+ 1 next-count)\n                next-count))))\n    (define (count-substrings i j)\n      (if (> i len)\n          0\n          (if (> j len)\n              (count-substrings (+ i 1) (+ i 2))\n              (+ (count-beautiful i (- j 1) 0 0) (count-substrings i (+ j 1))))))\n    (count-substrings 0 1)))"
}