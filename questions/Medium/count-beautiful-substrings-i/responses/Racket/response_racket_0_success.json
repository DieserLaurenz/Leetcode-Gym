{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "3631 ms",
    "memory": 125768000,
    "question_id": "3210",
    "elapsed_time": 3861,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707074076955,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 100,
    "status_memory": "125.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1166130707",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (beautiful-substrings s k)\n  (-> string? exact-integer? exact-integer?)\n  (let ([len (string-length s)])\n    (define (is-vowel? char)\n      (member char '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n    (define (beautiful-count start)\n      (let loop ([end start] [vowels 0] [consonants 0] [count 0])\n        (if (= end len)\n            count\n            (let* ([char (string-ref s end)]\n                   [vowels (if (is-vowel? (string char)) (+ vowels 1) vowels)]\n                   [consonants (if (is-vowel? (string char)) consonants (+ consonants 1))]\n                   [is-beautiful (and (= vowels consonants) (= (modulo (* vowels consonants) k) 0))]\n                   [new-count (if is-beautiful (+ count 1) count)])\n              (loop (+ end 1) vowels consonants new-count)))))\n    (let loop ([start 0] [total 0])\n      (if (= start len)\n          total\n          (loop (+ start 1) (+ total (beautiful-count start)))))))"
}