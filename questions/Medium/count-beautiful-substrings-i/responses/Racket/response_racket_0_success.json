{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "2789 ms",
    "memory": 126800000,
    "question_id": "3210",
    "elapsed_time": 3034,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707117623797,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 100,
    "status_memory": "126.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1166563024",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (beautiful-substrings s k)\n  (-> string? exact-integer? exact-integer?)\n  (let ([len (string-length s)])\n    (define (vowel? c)\n      (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (count-beautiful i j vowels consonants)\n      (cond [(= j len) 0]\n            [else\n             (let* ([c (string-ref s j)]\n                    [new-vowels (if (vowel? c) (+ vowels 1) vowels)]\n                    [new-consonants (if (vowel? c) consonants (+ consonants 1))]\n                    [beautiful (if (and (= new-vowels new-consonants) \n                                        (= 0 (modulo (* new-vowels new-consonants) k)))\n                                   1\n                                   0)])\n               (+ beautiful\n                  (count-beautiful i (+ j 1) new-vowels new-consonants)))]))\n    (define (loop i total)\n      (if (= i len) \n          total\n          (loop (+ i 1) (+ total (count-beautiful i i 0 0)))))\n    (loop 0 0)))"
}