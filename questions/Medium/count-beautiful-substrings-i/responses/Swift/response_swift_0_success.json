{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "352 ms",
    "memory": 16016000,
    "question_id": "3210",
    "elapsed_time": 508,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707064682348,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 66.66660000000002,
    "status_memory": "16 MB",
    "memory_percentile": 33.33330000000001,
    "pretty_lang": "Swift",
    "submission_id": "1165997148",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func beautifulSubstrings(_ s: String, _ k: Int) -> Int {\n        let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n        var beautifulCount = 0\n\n        // Convert the input string to an array of characters for easy access by index\n        let chars = Array(s)\n\n        // Iterate over all possible substrings\n        for start in 0..<chars.count {\n            var vowelCount = 0\n            var consonantCount = 0\n            for end in start..<chars.count {\n                // Increment vowel or consonant count based on the current character\n                if vowels.contains(chars[end]) {\n                    vowelCount += 1\n                } else {\n                    consonantCount += 1\n                }\n\n                // Check if the current substring is beautiful\n                if vowelCount == consonantCount && (vowelCount * consonantCount) % k == 0 {\n                    beautifulCount += 1\n                }\n            }\n        }\n\n        return beautifulCount\n    }\n}"
}