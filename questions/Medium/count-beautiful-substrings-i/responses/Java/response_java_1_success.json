{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "17 ms",
    "memory": 42284000,
    "display_runtime": "17",
    "question_id": "3210",
    "elapsed_time": 232,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707064085343,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 619,
    "total_testcases": 619,
    "runtime_percentile": 92.00750000000001,
    "status_memory": "42.3 MB",
    "memory_percentile": 43.30870000000003,
    "pretty_lang": "Java",
    "submission_id": "1165988974",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int beautifulSubstrings(String s, int k) {\n        // Precompute vowel and consonant counts\n        int n = s.length();\n        int[] vowelCounts = new int[n+1];\n        int[] consonantCounts = new int[n+1];\n        \n        // Populate the precomputed arrays\n        for (int i = 0; i < n; i++) {\n            vowelCounts[i+1] = vowelCounts[i] + (isVowel(s.charAt(i)) ? 1 : 0);\n            consonantCounts[i+1] = consonantCounts[i] + (!isVowel(s.charAt(i)) ? 1 : 0);\n        }\n        \n        int count = 0;\n        // Efficiently check all substrings using the precomputed counts\n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j <= n; j++) {\n                int vowels = vowelCounts[j] - vowelCounts[i];\n                int consonants = consonantCounts[j] - consonantCounts[i];\n                if (vowels == consonants && (vowels * consonants) % k == 0) {\n                    count++;\n                }\n            }\n        }\n        \n        return count;\n    }\n    \n    private boolean isVowel(char c) {\n        return \"aeiou\".indexOf(c) >= 0;\n    }\n}"
}