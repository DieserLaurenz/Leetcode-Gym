{
    "acRate": 52.7182028410968,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2707",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Extra Characters in a String",
    "titleSlug": "extra-characters-in-a-string",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Trie",
            "id": "VG9waWNUYWdOb2RlOjI3",
            "slug": "trie"
        }
    ],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minExtraChar(string s, vector<string>& dictionary) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minExtraChar(String s, String[] dictionary) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minExtraChar(self, s, dictionary):         \"\"\"         :type s: str         :type dictionary: List[str]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minExtraChar(self, s: str, dictionary: List[str]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minExtraChar(char * s, char ** dictionary, int dictionarySize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinExtraChar(string s, string[] dictionary) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @param {string[]} dictionary  * @return {number}  */ var minExtraChar = function(s, dictionary) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minExtraChar(s: string, dictionary: string[]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @param String[] $dictionary      * @return Integer      */     function minExtraChar($s, $dictionary) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minExtraChar(_ s: String, _ dictionary: [String]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minExtraChar(s: String, dictionary: Array<String>): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minExtraChar(String s, List<String> dictionary) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minExtraChar(s string, dictionary []string) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @param {String[]} dictionary # @return {Integer} def min_extra_char(s, dictionary)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minExtraChar(s: String, dictionary: Array[String]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn min_extra_char(s: String, dictionary: Vec<String>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (min-extra-char s dictionary)   (-> string? (listof string?) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec min_extra_char(S :: unicode:unicode_binary(), Dictionary :: [unicode:unicode_binary()]) -> integer(). min_extra_char(S, Dictionary) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec min_extra_char(s :: String.t, dictionary :: [String.t]) :: integer   def min_extra_char(s, dictionary) do    end end"
        }
    ],
    "content": "You are given a 0-indexed string s and a dictionary of words dictionary. You have to break s into one or more non-overlapping substrings such that each substring is present in dictionary. There may be some extra characters in s which are not present in any of the substrings. Return the minimum number of extra characters left over if you break up s optimally.  Example 1:  Input: s = \"leetscode\", dictionary = [\"leet\",\"code\",\"leetcode\"] Output: 1 Explanation: We can break s in two substrings: \"leet\" from index 0 to 3 and \"code\" from index 5 to 8. There is only 1 unused character (at index 4), so we return 1.   Example 2:  Input: s = \"sayhelloworld\", dictionary = [\"hello\",\"world\"] Output: 3 Explanation: We can break s in two substrings: \"hello\" from index 3 to 7 and \"world\" from index 8 to 12. The characters at indices 0, 1, 2 are not used in any substring and thus are considered as extra characters. Hence, we return 3.   Constraints:  1 <= s.length <= 50 1 <= dictionary.length <= 50 1 <= dictionary[i].length <= 50 dictionary[i]and s consists of only lowercase English letters dictionary contains distinct words  "
}