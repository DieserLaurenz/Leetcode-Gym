{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 10: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 10: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:10: anonymous fn/4 in Solution.min_extra_char/2\n    (elixir 1.15.7) lib/enum.ex:984: Enum.\"-each/2-lists^foreach/1-0-\"/2\n    solution.ex:7: anonymous fn/5 in Solution.min_extra_char/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:6: Solution.min_extra_char/2\n    solution.ex:40: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73336000,
    "question_id": "2755",
    "elapsed_time": 379,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"leetscode\"\n[\"leet\",\"code\",\"leetcode\"]",
    "expected_output": "1",
    "task_finish_time": 1707221431063,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2028,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1167755602",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  def min_extra_char(s, dictionary) do\n    dp = for _ <- 0..String.length(s), do: nil\n    dp = List.replace_at(dp, 0, 0)\n\n    for i <- 0..(String.length(s) - 1) do\n      Enum.each(dictionary, fn word ->\n        if String.starts_with?(String.slice(s, i..-1), word) do\n          j = i + String.length(word)\n          if dp[i] != nil do\n            dp = if dp[j] == nil, do: List.replace_at(dp, j, dp[i]), else: List.replace_at(dp, j, min(dp[i], dp[j]))\n          end\n        end\n      end)\n    end\n\n    String.length(s) - Enum.reduce(dp, 0, fn\n      nil, acc -> acc\n      x, acc when not is_nil(x) -> max(acc, x)\n    end)\n  end\nend"
}