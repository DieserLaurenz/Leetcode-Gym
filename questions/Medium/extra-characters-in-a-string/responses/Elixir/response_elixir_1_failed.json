{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71728000,
    "question_id": "2755",
    "elapsed_time": 2427,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"leetscode\"\n[\"leet\",\"code\",\"leetcode\"]",
    "expected_output": "1",
    "task_finish_time": 1707221402237,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 77,
    "total_testcases": 2028,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1167755275",
    "input_formatted": "\"leetscode\", [\"leet\",\"code\",\"leetcode\"]",
    "input": "\"leetscode\"\n[\"leet\",\"code\",\"leetcode\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  def min_extra_char(s, dictionary) do\n    dp = Enum.reduce(0..String.length(s), %{0 => 0}, fn i, acc ->\n      min_val = Map.get(acc, i, String.length(s)) + 1\n      acc = Map.put(acc, i + 1, min(min_val, Map.get(acc, i + 1, String.length(s))))\n      Enum.reduce(dictionary, acc, fn word, acc ->\n        if String.starts_with?(String.slice(s, i..-1), word) do\n          j = i + String.length(word)\n          min_val = min(min_val, Map.get(acc, j, String.length(s)))\n          Map.put(acc, j, min_val)\n        else\n          acc\n        end\n      end)\n    end)\n    Map.get(dp, String.length(s), 0) - 1\n  end\nend"
}