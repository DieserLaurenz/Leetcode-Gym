{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "76 ms",
    "memory": 63400000,
    "display_runtime": "76",
    "question_id": "3225",
    "elapsed_time": 483,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484033981,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 31.906299999999987,
    "status_memory": "63.4 MB",
    "memory_percentile": 6.822300000000008,
    "pretty_lang": "Java",
    "submission_id": "1170609520",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxSubarrayLength(int[] nums, int k) {\n        int left = 0, maxLength = 0;\n        HashMap<Integer, Integer> countMap = new HashMap<>();\n        for (int right = 0; right < nums.length; right++) {\n            countMap.put(nums[right], countMap.getOrDefault(nums[right], 0) + 1);\n            while (countMap.get(nums[right]) > k) {\n                countMap.put(nums[left], countMap.get(nums[left]) - 1);\n                if (countMap.get(nums[left]) == 0) {\n                    countMap.remove(nums[left]);\n                }\n                left++;\n            }\n            maxLength = Math.max(maxLength, right - left + 1);\n        }\n        return maxLength;\n    }\n}"
}