{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "1065 ms",
    "memory": 83504000,
    "question_id": "3225",
    "elapsed_time": 1342,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484695832,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 100,
    "status_memory": "83.5 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Scala",
    "submission_id": "1170615927",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxSubarrayLength(nums: Array[Int], k: Int): Int = {\n        var left = 0\n        var maxLength = 0\n        val countMap = scala.collection.mutable.Map[Int, Int]()\n\n        for (right <- nums.indices) {\n            countMap(nums(right)) = countMap.getOrElse(nums(right), 0) + 1\n\n            while (countMap(nums(right)) > k) {\n                countMap(nums(left)) -= 1\n                if (countMap(nums(left)) == 0) countMap.remove(nums(left))\n                left += 1\n            }\n\n            maxLength = math.max(maxLength, right - left + 1)\n        }\n\n        maxLength\n    }\n}"
}