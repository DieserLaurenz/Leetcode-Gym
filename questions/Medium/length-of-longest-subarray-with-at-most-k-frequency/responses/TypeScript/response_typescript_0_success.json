{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "166 ms",
    "memory": 73320000,
    "question_id": "3225",
    "elapsed_time": 191,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484313897,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 23.809600000000025,
    "status_memory": "73.3 MB",
    "memory_percentile": 9.523900000000033,
    "pretty_lang": "TypeScript",
    "submission_id": "1170612158",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function maxSubarrayLength(nums: number[], k: number): number {\n    let left = 0, maxLength = 0;\n    const countMap = new Map<number, number>();\n\n    for (let right = 0; right < nums.length; right++) {\n        countMap.set(nums[right], (countMap.get(nums[right]) || 0) + 1);\n\n        while (countMap.get(nums[right])! > k) {\n            countMap.set(nums[left], countMap.get(nums[left])! - 1);\n            if (countMap.get(nums[left]) === 0) {\n                countMap.delete(nums[left]);\n            }\n            left++;\n        }\n\n        maxLength = Math.max(maxLength, right - left + 1);\n    }\n\n    return maxLength;\n};"
}