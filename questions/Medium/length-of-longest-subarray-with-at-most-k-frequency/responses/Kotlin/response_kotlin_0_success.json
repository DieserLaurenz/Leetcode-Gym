{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "724 ms",
    "memory": 69084000,
    "question_id": "3225",
    "elapsed_time": 918,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484479553,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 61.90480000000002,
    "status_memory": "69.1 MB",
    "memory_percentile": 23.80960000000004,
    "pretty_lang": "Kotlin",
    "submission_id": "1170613723",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxSubarrayLength(nums: IntArray, k: Int): Int {\n        var maxLength = 0\n        var left = 0\n        val countMap = mutableMapOf<Int, Int>()\n        \n        for (right in nums.indices) {\n            countMap[nums[right]] = countMap.getOrDefault(nums[right], 0) + 1\n            \n            while (countMap[nums[right]]!! > k) {\n                countMap[nums[left]] = countMap[nums[left]]!! - 1\n                if (countMap[nums[left]] == 0) {\n                    countMap.remove(nums[left])\n                }\n                left++\n            }\n            \n            maxLength = maxOf(maxLength, right - left + 1)\n        }\n        \n        return maxLength\n    }\n}"
}