{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "60 ms",
    "memory": 4656000,
    "question_id": "3225",
    "elapsed_time": 79,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484749963,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 72.22200000000001,
    "status_memory": "4.7 MB",
    "memory_percentile": 88.8888,
    "pretty_lang": "Rust",
    "submission_id": "1170616481",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_subarray_length(nums: Vec<i32>, k: i32) -> i32 {\n        use std::collections::HashMap;\n\n        let mut map = HashMap::new();\n        let (mut start, mut end, mut max_len, mut count) = (0, 0, 0, 0);\n\n        while end < nums.len() {\n            *map.entry(nums[end]).or_insert(0) += 1;\n            if *map.get(&nums[end]).unwrap() <= k {\n                max_len = max_len.max(end - start + 1);\n            } else {\n                while *map.get(&nums[end]).unwrap() > k {\n                    *map.get_mut(&nums[start]).unwrap() -= 1;\n                    if *map.get(&nums[start]).unwrap() == 0 {\n                        map.remove(&nums[start]);\n                    }\n                    start += 1;\n                }\n            }\n            end += 1;\n        }\n        max_len as i32\n    }\n}"
}