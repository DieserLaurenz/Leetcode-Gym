{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "hash-update: contract violation",
    "full_runtime_error": "hash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  context...:\n   solution.rkt:1:0: max-subarray-length\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:18:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99936000,
    "question_id": "3225",
    "elapsed_time": 239,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,1,2,3,1,2]\n2",
    "expected_output": "6",
    "task_finish_time": 1707494452095,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 992,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1170727437",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (max-subarray-length nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let ([n (length nums)])\n    (let loop ([left 0] [right 0] [max-len 0] [freq (make-hash)])\n      (if (= right n)\n          max-len\n          (let* ([right-val (list-ref nums right)]\n                 [update-freq (hash-update freq right-val (lambda (x) (if (null? x) 1 (+ x 1))) 0)])\n            (if (> (hash-ref update-freq right-val 0) k)\n                (let* ([left-val (list-ref nums left)]\n                       [new-freq (hash-update update-freq left-val sub1)])\n                  (loop (+ left 1) right max-len new-freq))\n                (loop left (+ right 1) (max max-len (- right left 1)) update-freq)))))))"
}