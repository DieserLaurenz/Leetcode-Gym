{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "490 ms",
    "memory": 24452000,
    "question_id": "3225",
    "elapsed_time": 523,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484423734,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 100,
    "status_memory": "24.5 MB",
    "memory_percentile": 37.5,
    "pretty_lang": "Swift",
    "submission_id": "1170613189",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxSubarrayLength(_ nums: [Int], _ k: Int) -> Int {\n        var left = 0, right = 0, maxLength = 0\n        var frequency = [Int: Int]()\n        \n        while right < nums.count {\n            frequency[nums[right], default: 0] += 1\n            \n            while frequency[nums[right]]! > k {\n                frequency[nums[left]]! -= 1\n                left += 1\n            }\n            \n            maxLength = max(maxLength, right - left + 1)\n            right += 1\n        }\n        \n        return maxLength\n    }\n}"
}