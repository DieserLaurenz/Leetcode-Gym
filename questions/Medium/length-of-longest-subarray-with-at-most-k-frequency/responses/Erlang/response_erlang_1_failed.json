{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 28: exception error: function_clause",
    "full_runtime_error": "Line 28: exception error: function_clause\n[{solution,drop_elements,[[],4],[{file,\"solution.erl\"},{line,28}]},\n {solution,shrink_window,5,[{file,\"solution.erl\"},{line,20}]},\n {solution,max_subarray_length,5,[{file,\"solution.erl\"},{line,9}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,47}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,33}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,64}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65148000,
    "question_id": "3225",
    "elapsed_time": 1400,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,1,2,3,1,2]\n2",
    "expected_output": "6",
    "task_finish_time": 1707494563428,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 992,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1170728794",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec max_subarray_length(Nums :: [integer()], K :: integer()) -> integer().\nmax_subarray_length(Nums, K) ->\n    max_subarray_length(Nums, K, #{}, 0, {0,0}).\n\nmax_subarray_length([], _K, _Counts, MaxLen, {_Start, End}) ->\n    MaxLen;\nmax_subarray_length([H|T], K, Counts, MaxLen, {Start, End}) ->\n    NewCounts = update_counts(Counts, H, 1),\n    {NewStart, NewEnd, ValidCounts} = shrink_window(NewCounts, K, [H|T], Start, End),\n    NewMaxLen = max(MaxLen, NewEnd - NewStart),\n    max_subarray_length(T, K, ValidCounts, NewMaxLen, {NewStart, NewEnd + 1}).\n\nupdate_counts(Counts, Key, Val) ->\n    maps:update_with(Key, fun(C) -> C + Val end, Val, Counts).\n\nshrink_window(Counts, K, Nums, Start, End) ->\n    case is_good(Counts, K) of\n        true -> {Start, End, Counts};\n        false ->\n            [First|Rest] = drop_elements(Nums, End - Start),\n            NewCounts = update_counts(Counts, First, -1),\n            shrink_window(NewCounts, K, Rest, Start + 1, End)\n    end.\n\nis_good(Counts, K) ->\n    not lists:any(fun({_Key, Val}) -> Val > K end, maps:to_list(Counts)).\n\ndrop_elements(Nums, 0) -> Nums;\ndrop_elements([_H|T], N) when N > 0 -> drop_elements(T, N-1)."
}