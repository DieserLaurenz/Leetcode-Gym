{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68004000,
    "question_id": "3225",
    "elapsed_time": 5082,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[1,2,1,2,1,2,1,2]\n1",
    "expected_output": "2",
    "task_finish_time": 1707494516447,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 466,
    "total_testcases": 992,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1170728182",
    "input_formatted": "[1,2,1,2,1,2,1,2], 1",
    "input": "[1,2,1,2,1,2,1,2]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_subarray_length(Nums :: [integer()], K :: integer()) -> integer().\nmax_subarray_length(Nums, K) ->\n    max_subarray_length(Nums, K, #{}).\n\nmax_subarray_length([], _K, _Counts) ->\n    0;\nmax_subarray_length(Nums, K, Counts) when map_size(Counts) > K ->\n    [First | Rest] = Nums,\n    NewCounts = case maps:get(First, Counts, 0) of\n        1 -> maps:remove(First, Counts);\n        C -> maps:put(First, C - 1, Counts)\n    end,\n    max_subarray_length(Rest, K, NewCounts);\nmax_subarray_length([H | T], K, Counts) ->\n    UpdatedCounts = maps:update_with(H, fun(C) -> C + 1 end, 1, Counts),\n    max(1 + max_subarray_length(T, K, UpdatedCounts), max_subarray_length(T, K, Counts))."
}