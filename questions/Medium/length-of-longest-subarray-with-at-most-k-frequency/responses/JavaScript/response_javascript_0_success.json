{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "135 ms",
    "memory": 69332000,
    "question_id": "3225",
    "elapsed_time": 231,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484254671,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 92.63799999999998,
    "status_memory": "69.3 MB",
    "memory_percentile": 26.38,
    "pretty_lang": "JavaScript",
    "submission_id": "1170611599",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maxSubarrayLength = function(nums, k) {\n    let left = 0, right = 0, maxLength = 0;\n    const count = new Map();\n\n    while (right < nums.length) {\n        count.set(nums[right], (count.get(nums[right]) || 0) + 1);\n\n        while (count.get(nums[right]) > k) {\n            count.set(nums[left], count.get(nums[left]) - 1);\n            left++;\n        }\n\n        maxLength = Math.max(maxLength, right - left + 1);\n        right++;\n    }\n\n    return maxLength;\n};"
}