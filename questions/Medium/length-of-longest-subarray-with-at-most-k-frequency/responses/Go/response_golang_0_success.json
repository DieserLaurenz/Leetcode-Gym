{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "213 ms",
    "memory": 17172000,
    "question_id": "3225",
    "elapsed_time": 280,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484584803,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 49.999599999999916,
    "status_memory": "17.2 MB",
    "memory_percentile": 95.65199999999999,
    "pretty_lang": "Go",
    "submission_id": "1170614833",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func maxSubarrayLength(nums []int, k int) int {\n    maxLength := 0\n    left := 0\n    freqMap := make(map[int]int)\n\n    for right, num := range nums {\n        freqMap[num]++\n        for freqMap[num] > k {\n            freqMap[nums[left]]--\n            left++\n        }\n        if right-left+1 > maxLength {\n            maxLength = right - left + 1\n        }\n    }\n    return maxLength\n}"
}