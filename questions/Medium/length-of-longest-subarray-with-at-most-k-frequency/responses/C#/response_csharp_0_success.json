{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "461 ms",
    "memory": 93428000,
    "question_id": "3225",
    "elapsed_time": 558,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707484197687,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 67.07350000000007,
    "status_memory": "93.4 MB",
    "memory_percentile": 20.732100000000088,
    "pretty_lang": "C#",
    "submission_id": "1170611066",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxSubarrayLength(int[] nums, int k) {\n        Dictionary<int, int> count = new Dictionary<int, int>();\n        int left = 0, maxLen = 0;\n        for (int right = 0; right < nums.Length; right++) {\n            if (count.ContainsKey(nums[right])) {\n                count[nums[right]]++;\n            } else {\n                count[nums[right]] = 1;\n            }\n            while (count[nums[right]] > k) {\n                count[nums[left]]--;\n                left++;\n            }\n            maxLen = Math.Max(maxLen, right - left + 1);\n        }\n        return maxLen;\n    }\n}"
}