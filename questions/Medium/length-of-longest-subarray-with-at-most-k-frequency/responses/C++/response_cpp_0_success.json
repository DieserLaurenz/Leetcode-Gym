{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "218 ms",
    "memory": 148304000,
    "question_id": "3225",
    "elapsed_time": 311,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707483980349,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 992,
    "runtime_percentile": 63.99570000000005,
    "status_memory": "148.3 MB",
    "memory_percentile": 22.823100000000018,
    "pretty_lang": "C++",
    "submission_id": "1170609002",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maxSubarrayLength(vector<int>& nums, int k) {\n        unordered_map<int, int> count;\n        int maxLength = 0, left = 0;\n        for (int right = 0; right < nums.size(); ++right) {\n            count[nums[right]]++;\n            while (count[nums[right]] > k) {\n                count[nums[left]]--;\n                left++;\n            }\n            maxLength = max(maxLength, right - left + 1);\n        }\n        return maxLength;\n    }\n};"
}