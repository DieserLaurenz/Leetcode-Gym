{
    "acRate": 29.718410640626313,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2800",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Shortest String That Contains Three Strings",
    "titleSlug": "shortest-string-that-contains-three-strings",
    "topicTags": [
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Enumeration",
            "id": "VG9waWNUYWdOb2RlOjYxMDY2",
            "slug": "enumeration"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     string minimumString(string a, string b, string c) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public String minimumString(String a, String b, String c) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimumString(self, a, b, c):         \"\"\"         :type a: str         :type b: str         :type c: str         :rtype: str         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimumString(self, a: str, b: str, c: str) -> str:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "char * minimumString(char * a, char * b, char * c){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public string MinimumString(string a, string b, string c) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} a  * @param {string} b  * @param {string} c  * @return {string}  */ var minimumString = function(a, b, c) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimumString(a: string, b: string, c: string): string {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $a      * @param String $b      * @param String $c      * @return String      */     function minimumString($a, $b, $c) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimumString(_ a: String, _ b: String, _ c: String) -> String {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimumString(a: String, b: String, c: String): String {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   String minimumString(String a, String b, String c) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimumString(a string, b string, c string) string {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} a # @param {String} b # @param {String} c # @return {String} def minimum_string(a, b, c)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimumString(a: String, b: String, c: String): String = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimum_string(a: String, b: String, c: String) -> String {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimum-string a b c)   (-> string? string? string? string?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimum_string(A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), C :: unicode:unicode_binary()) -> unicode:unicode_binary(). minimum_string(A, B, C) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimum_string(a :: String.t, b :: String.t, c :: String.t) :: String.t   def minimum_string(a, b, c) do    end end"
        }
    ],
    "content": "Given three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings. If there are multiple such strings, return the lexicographically smallest one. Return a string denoting the answer to the problem. Notes  A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. A substring is a contiguous sequence of characters within a string.   Example 1:  Input: a = \"abc\", b = \"bca\", c = \"aaa\" Output: \"aaabca\" Explanation:  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one. Example 2:  Input: a = \"ab\", b = \"ba\", c = \"aba\" Output: \"aba\" Explanation: We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one.   Constraints:  1 <= a.length, b.length, c.length <= 100 a, b, c consist only of lowercase English letters.  "
}