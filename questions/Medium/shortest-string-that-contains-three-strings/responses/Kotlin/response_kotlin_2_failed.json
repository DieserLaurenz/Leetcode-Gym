{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53232000,
    "question_id": "2877",
    "elapsed_time": 737,
    "compare_result
    "code_output": "\"shmlrrlhp\"",
    "std_output": "",
    "last_testcase": "\"hmlrrl\"\n\"sh\"\n\"hp\"",
    "expected_output": "\"hmlrrlshp\"",
    "task_finish_time": 1708154494139,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5217,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1177592618",
    "input_formatted": "\"hmlrrl\", \"sh\", \"hp\"",
    "input": "\"hmlrrl\"\n\"sh\"\n\"hp\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumString(a: String, b: String, c: String): String {\n        val strings = listOf(a, b, c)\n        val permutations = strings.permutations()\n        var result = \"\"\n\n        for (perm in permutations) {\n            val merged = merge(merge(perm[0], perm[1]), perm[2])\n            if (result.isEmpty() || merged.length < result.length || (merged.length == result.length && merged < result)) {\n                result = merged\n            }\n        }\n\n        return result\n    }\n\n    private fun merge(s1: String, s2: String): String {\n        if (s1.contains(s2)) return s1\n        if (s2.contains(s1)) return s2\n\n        var maxOverlap = 0\n        var merged = s1 + s2\n\n        for (i in 1..minOf(s1.length, s2.length)) {\n            if (s1.endsWith(s2.substring(0, i))) {\n                val candidate = s1 + s2.substring(i)\n                if (candidate.length < merged.length) {\n                    merged = candidate\n                    maxOverlap = i\n                }\n            }\n            if (s2.endsWith(s1.substring(0, i))) {\n                val candidate = s2 + s1.substring(i)\n                if (candidate.length < merged.length) {\n                    merged = candidate\n                    maxOverlap = i\n                }\n            }\n        }\n\n        return if (maxOverlap > 0) merged else s1 + s2\n    }\n\n    private fun <T> List<T>.permutations(): List<List<T>> {\n        if (isEmpty()) return listOf(listOf())\n\n        val result = mutableListOf<List<T>>()\n        for (i in indices) {\n            val rest = toMutableList().apply { removeAt(i) }\n            rest.permutations().forEach { perm ->\n                result.add(listOf(this[i]) + perm)\n            }\n        }\n        return result\n    }\n}"
}