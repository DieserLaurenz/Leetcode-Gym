{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17968000,
    "question_id": "2877",
    "elapsed_time": 53,
    "compare_result
    "code_output": "\"abcbcaaaa\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708145497928,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1192,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1177490871",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <algorithm>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string minimumString(string a, string b, string c) {\n        vector<string> strings = {a, b, c};\n        sort(strings.begin(), strings.end(), [](const string &x, const string &y) {\n            return x.size() > y.size();\n        });\n        \n        string &longest = strings[0], &mid = strings[1], &shortest = strings[2];\n        \n        if (longest.find(mid) != string::npos && longest.find(shortest) != string::npos) {\n            return longest;\n        }\n        \n        if (mid.find(shortest) != string::npos && longest.find(mid) != string::npos) {\n            return longest;\n        }\n        \n        string result = longest + mid;\n        if (result.find(shortest) != string::npos) {\n            return result;\n        } else {\n            return result + shortest;\n        }\n    }\n};"
}