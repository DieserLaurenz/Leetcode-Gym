{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 379984000,
    "question_id": "2877",
    "elapsed_time": 1473,
    "compare_result
    "code_output": "\"xyyyzxzyzzzz\"",
    "std_output": "",
    "last_testcase": "\"xyyyz\"\n\"xzyz\"\n\"zzz\"",
    "expected_output": "\"xyyyzxzyzzz\"",
    "task_finish_time": 1708145473611,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1755,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1177490610",
    "input_formatted": "\"xyyyz\", \"xzyz\", \"zzz\"",
    "input": "\"xyyyz\"\n\"xzyz\"\n\"zzz\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string minimumString(string a, string b, string c) {\n        string permutations[] = {a + b + c, a + c + b, b + a + c, b + c + a, c + a + b, c + b + a};\n        string minStr = \"\";\n        for (auto &p : permutations) {\n            // Reduce the string by removing overlap\n            for (size_t i = 1; i < p.size(); ++i) {\n                string prefix = p.substr(0, i);\n                string suffix = p.substr(i);\n                if (suffix.find(a) != string::npos && suffix.find(b) != string::npos && suffix.find(c) != string::npos) {\n                    string candidate = p.substr(i);\n                    if (minStr.empty() || candidate.size() < minStr.size() || (candidate.size() == minStr.size() && candidate < minStr)) {\n                        minStr = candidate;\n                    }\n                }\n            }\n        }\n        if (minStr.empty()) return a + b + c; // Fallback, should not happen\n        return minStr;\n    }\n};"
}