{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 223308000,
    "question_id": "2877",
    "elapsed_time": 465,
    "compare_result
    "code_output": "\"abaca\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708145439856,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 859,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1177490313",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\n    int lcs(const string &a, const string &b) {\n        int m = a.size(), n = b.size();\n        vector<vector<int>> dp(m + 1, vector<int>(n + 1));\n        for (int i = 1; i <= m; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (a[i - 1] == b[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n\n    string merge(const string &a, const string &b) {\n        int m = a.size(), n = b.size();\n        int maxLength = lcs(a, b);\n        string res;\n        for (int i = 0, j = 0; i < m || j < n;) {\n            if (i < m && j < n && a[i] == b[j]) {\n                res += a[i];\n                ++i;\n                ++j;\n            } else if (m - i > n - j) {\n                res += a[i++];\n            } else {\n                res += b[j++];\n            }\n        }\n        return res;\n    }\n\npublic:\n    string minimumString(string a, string b, string c) {\n        string mergedAB = merge(a, b);\n        string mergedABC1 = merge(mergedAB, c);\n        string mergedAC = merge(a, c);\n        string mergedACB = merge(mergedAC, b);\n        string mergedBC = merge(b, c);\n        string mergedBCA = merge(mergedBC, a);\n\n        vector<string> candidates = {mergedABC1, mergedACB, mergedBCA};\n        sort(candidates.begin(), candidates.end(), [](const string &s1, const string &s2) {\n            return s1.size() < s2.size() || (s1.size() == s2.size() && s1 < s2);\n        });\n\n        return candidates.front();\n    }\n};"
}