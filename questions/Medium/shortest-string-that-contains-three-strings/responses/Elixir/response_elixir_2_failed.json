{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72416000,
    "question_id": "2877",
    "elapsed_time": 1719,
    "compare_result
    "code_output": "\"aaaabcbca\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708164612149,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 838,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177694080",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_string(a :: String.t, b :: String.t, c :: String.t) :: String.t\n  def minimum_string(a, b, c) do\n    [a, b, c]\n    |> Enum.reduce(\"\", &find_min_string/2)\n  end\n\n  defp find_min_string(str, acc) when acc == \"\", do: str\n  defp find_min_string(str, acc) do\n    merge_strings(acc, str)\n    |> Enum.min_by(fn x -> {String.length(x), x} end)\n  end\n\n  defp merge_strings(s1, s2) do\n    [s1 <> s2, s2 <> s1]\n    |> Enum.filter(fn str -> String.contains?(str, s1) and String.contains?(str, s2) end)\n  end\nend"
}