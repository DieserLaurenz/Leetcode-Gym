{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11812000,
    "question_id": "2877",
    "elapsed_time": 436,
    "compare_result
    "code_output": "\"a\"",
    "std_output": "",
    "last_testcase": "\"a\"\n\"aa\"\n\"a\"",
    "expected_output": "\"aa\"",
    "task_finish_time": 1708849248114,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2617,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185598610",
    "input_formatted": "\"a\", \"aa\", \"a\"",
    "input": "\"a\"\n\"aa\"\n\"a\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumString(self, a, b, c):\n        def merge(s1, s2):\n            for i in range(max(len(s1), len(s2)), -1, -1):\n                if s1.endswith(s2[:i]) or s2.endswith(s1[:i]):\n                    return s1 + s2[i:]\n            return s1 + s2\n\n        candidates = []\n        for x, y, z in [(a, b, c), (a, c, b), (b, a, c), (b, c, a), (c, a, b), (c, b, a)]:\n            candidates.append(merge(merge(x, y), z))\n        \n        return min(candidates)"
}