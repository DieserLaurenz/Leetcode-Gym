{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11928000,
    "question_id": "2877",
    "elapsed_time": 308,
    "compare_result
    "code_output": "\"acab\"",
    "std_output": "",
    "last_testcase": "\"cab\"\n\"a\"\n\"b\"",
    "expected_output": "\"cab\"",
    "task_finish_time": 1708849305497,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4719,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185599208",
    "input_formatted": "\"cab\", \"a\", \"b\"",
    "input": "\"cab\"\n\"a\"\n\"b\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumString(self, a, b, c):\n        from itertools import permutations\n\n        def merge(s1, s2):\n            max_len = min(len(s1), len(s2))\n            for i in range(max_len, 0, -1):\n                if s1.endswith(s2[:i]) or s2.startswith(s1[-i:]):\n                    return s1 + s2[i:]\n            return s1 + s2\n\n        strings = [a, b, c]\n        min_str = None\n        for perm in permutations(strings):\n            temp = merge(merge(perm[0], perm[1]), perm[2])\n            if min_str is None or len(temp) < len(min_str) or (len(temp) == len(min_str) and temp < min_str):\n                min_str = temp\n        return min_str"
}