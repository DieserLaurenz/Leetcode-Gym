{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62624000,
    "question_id": "2877",
    "elapsed_time": 248,
    "compare_result
    "code_output": "\"bca\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708154049275,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 696,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1177587761",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumString(a: string, b: string, c: string): string {\n    const substrings = [a, b, c];\n    substrings.sort((x, y) => x.length - y.length || x.localeCompare(y));\n    let result = substrings[2];\n\n    for (let i = 0; i < substrings.length; i++) {\n        for (let j = 0; j < substrings.length; j++) {\n            if (i !== j) {\n                const temp = substrings[i] + substrings[j];\n                if (temp.includes(substrings[0]) && temp.includes(substrings[1]) && temp.includes(substrings[2])) {\n                    if (temp.length < result.length || (temp.length === result.length && temp < result)) {\n                        result = temp;\n                    }\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < substrings.length; i++) {\n        for (let j = 0; j < substrings.length; j++) {\n            for (let k = 0; k < substrings.length; k++) {\n                if (i !== j && i !== k && j !== k) {\n                    const temp = mergeStrings(mergeStrings(substrings[i], substrings[j]), substrings[k]);\n                    if (temp.length < result.length || (temp.length === result.length && temp < result)) {\n                        result = temp;\n                    }\n                }\n            }\n        }\n    }\n\n    function mergeStrings(s1: string, s2: string): string {\n        for (let i = 0; i < s1.length; i++) {\n            if (s2.startsWith(s1.substring(i))) {\n                return s1.substring(0, i) + s2;\n            }\n        }\n        return s1 + s2;\n    }\n\n    return result;\n};"
}