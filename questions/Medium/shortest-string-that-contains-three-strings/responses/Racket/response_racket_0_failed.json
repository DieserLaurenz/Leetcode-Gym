{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126812000,
    "question_id": "2877",
    "elapsed_time": 2066,
    "compare_result
    "code_output": "\"bcabcaa\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708155178664,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 571,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1177599856",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-string a b c)\n  (-> string? string? string? string?)\n  (let ([strs (sort (list a b c) string<?)])\n    (define (contains? s sub) (not (equal? (regexp-match (regexp-quote sub) s) #f)))\n    (define (merge s1 s2)\n      (if (contains? s1 s2) s1\n          (let loop ((i (string-length s2)))\n            (if (<= i 0) (string-append s1 s2)\n                (if (contains? s1 (substring s2 0 i))\n                    (string-append s1 (substring s2 i))\n                    (loop (- i 1)))))))\n    (foldl merge (first strs) (rest strs))))"
}