{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 120976000,
    "question_id": "2877",
    "elapsed_time": 293,
    "compare_result
    "code_output": "\"aca\"",
    "std_output": "",
    "last_testcase": "\"ca\"\n\"a\"\n\"a\"",
    "expected_output": "\"ca\"",
    "task_finish_time": 1708153853115,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3071,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1177585514",
    "input_formatted": "\"ca\", \"a\", \"a\"",
    "input": "\"ca\"\n\"a\"\n\"a\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    private string MergeStrings(string first, string second) {\n        int m = first.Length, n = second.Length;\n        for (int i = 0; i < m; i++) {\n            if (i + n <= m) {\n                if (first.Substring(i, n).Equals(second)) return first;\n            } else {\n                if (second.StartsWith(first.Substring(i))) {\n                    return first + second.Substring(m - i);\n                }\n            }\n        }\n        return first + second;\n    }\n\n    private string FindMinimumString(string a, string b, string c) {\n        string minStr = MergeStrings(MergeStrings(a, b), c);\n        minStr = System.String.Compare(minStr, MergeStrings(MergeStrings(a, c), b)) < 0 ? minStr : MergeStrings(MergeStrings(a, c), b);\n        minStr = System.String.Compare(minStr, MergeStrings(MergeStrings(b, a), c)) < 0 ? minStr : MergeStrings(MergeStrings(b, a), c);\n        minStr = System.String.Compare(minStr, MergeStrings(MergeStrings(b, c), a)) < 0 ? minStr : MergeStrings(MergeStrings(b, c), a);\n        minStr = System.String.Compare(minStr, MergeStrings(MergeStrings(c, a), b)) < 0 ? minStr : MergeStrings(MergeStrings(c, a), b);\n        minStr = System.String.Compare(minStr, MergeStrings(MergeStrings(c, b), a)) < 0 ? minStr : MergeStrings(MergeStrings(c, b), a);\n        return minStr;\n    }\n\n    public string MinimumString(string a, string b, string c) {\n        return FindMinimumString(a, b, c);\n    }\n}"
}