{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2092000,
    "question_id": "2877",
    "elapsed_time": 34,
    "compare_result
    "code_output": "\"aca\"",
    "std_output": "",
    "last_testcase": "\"ca\"\n\"a\"\n\"a\"",
    "expected_output": "\"ca\"",
    "task_finish_time": 1708154952778,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2727,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1177597533",
    "input_formatted": "\"ca\", \"a\", \"a\"",
    "input": "\"ca\"\n\"a\"\n\"a\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_string(a: String, b: String, c: String) -> String {\n        fn overlap(s1: &str, s2: &str) -> usize {\n            let mut max_overlap = 0;\n            for i in 1..=std::cmp::min(s1.len(), s2.len()) {\n                if s1.ends_with(&s2[..i]) {\n                    max_overlap = i;\n                }\n            }\n            max_overlap\n        }\n\n        fn merge(s1: &str, s2: &str) -> String {\n            let o = overlap(s1, s2);\n            format!(\"{}{}\", s1, &s2[o..])\n        }\n\n        let mut candidates = vec![\n            merge(&a, &merge(&b, &c)),\n            merge(&a, &merge(&c, &b)),\n            merge(&b, &merge(&a, &c)),\n            merge(&b, &merge(&c, &a)),\n            merge(&c, &merge(&a, &b)),\n            merge(&c, &merge(&b, &a)),\n        ];\n\n        candidates.sort_unstable();\n        candidates[0].clone()\n    }\n}"
}