{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16688000,
    "question_id": "2877",
    "elapsed_time": 867,
    "compare_result
    "code_output": "\"shmlrrlhp\"",
    "std_output": "",
    "last_testcase": "\"hmlrrl\"\n\"sh\"\n\"hp\"",
    "expected_output": "\"hmlrrlshp\"",
    "task_finish_time": 1708154356074,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5217,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1177591074",
    "input_formatted": "\"hmlrrl\", \"sh\", \"hp\"",
    "input": "\"hmlrrl\"\n\"sh\"\n\"hp\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumString(_ a: String, _ b: String, _ c: String) -> String {\n        let substrings = [a, b, c]\n        var minString = a + b + c // start with a string that's guaranteed to be long enough\n        \n        // Generate all permutations of the substrings\n        let permutations = permutationsOf(substrings)\n        \n        for permutation in permutations {\n            let candidate = mergeStrings(permutation)\n            if candidate.count < minString.count || (candidate.count == minString.count && candidate < minString) {\n                minString = candidate\n            }\n        }\n        \n        return minString\n    }\n    \n    private func mergeStrings(_ strings: [String]) -> String {\n        var merged = strings[0]\n        for i in 1..<strings.count {\n            merged = merge(merged, strings[i])\n        }\n        return merged\n    }\n    \n    private func merge(_ s1: String, _ s2: String) -> String {\n        if s1.contains(s2) { return s1 }\n        if s2.contains(s1) { return s2 }\n        \n        // Try to merge s2 into s1 with the maximum overlap\n        for overlap in stride(from: min(s1.count, s2.count), to: 0, by: -1) {\n            if s1.hasSuffix(String(s2.prefix(overlap))) {\n                return s1 + s2.dropFirst(overlap)\n            }\n            if s2.hasSuffix(String(s1.prefix(overlap))) {\n                return s2 + s1.dropFirst(overlap)\n            }\n        }\n        \n        return s1 + s2 // No overlap found\n    }\n    \n    private func permutationsOf(_ array: [String], _ prefix: [String] = []) -> [[String]] {\n        if array.isEmpty { return [prefix] }\n        \n        var result = [[String]]()\n        for (index, element) in array.enumerated() {\n            var newArray = array\n            newArray.remove(at: index)\n            result.append(contentsOf: permutationsOf(newArray, prefix + [element]))\n        }\n        \n        return result\n    }\n}"
}