{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16652000,
    "question_id": "2877",
    "elapsed_time": 913,
    "compare_result
    "code_output": "\"abc\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708154290782,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 696,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1177590343",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumString(_ a: String, _ b: String, _ c: String) -> String {\n        let strings = [a, b, c].sorted { $0.count > $1.count }\n        var result = strings[0]\n        \n        for i in 1..<strings.count {\n            let current = strings[i]\n            if result.contains(current) {\n                continue\n            }\n            \n            for j in 0...result.count {\n                let index = result.index(result.startIndex, offsetBy: j)\n                var temp = result\n                temp.insert(contentsOf: current, at: index)\n                if temp.contains(a) && temp.contains(b) && temp.contains(c) {\n                    if temp.count < result.count || (temp.count == result.count && temp < result) {\n                        result = temp\n                    }\n                    break\n                }\n            }\n        }\n        \n        return result\n    }\n}"
}