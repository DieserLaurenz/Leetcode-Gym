{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19024000,
    "question_id": "2877",
    "elapsed_time": 98,
    "compare_result
    "code_output": "\"aaaabcbca\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708153691536,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177583629",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar *minimumString(char *a, char *b, char *c) {\n    // Helper function to check if str1 contains str2\n    int contains(char *str1, char *str2) {\n        return strstr(str1, str2) != NULL;\n    }\n\n    // Helper function to concatenate two strings with memory allocation\n    char *concat(const char *s1, const char *s2) {\n        char *result = malloc(strlen(s1) + strlen(s2) + 1); // +1 for the null-terminator\n        if (!result) return NULL; // Check for malloc failure\n        strcpy(result, s1);\n        strcat(result, s2);\n        return result;\n    }\n\n    // Helper function to find the lexicographically smallest string\n    char *lexicoMin(char *s1, char *s2) {\n        if (strcmp(s1, s2) < 0) return s1;\n        else return s2;\n    }\n\n    // Generate all possible combinations and keep track of the minimum string\n    char *minStr = NULL;\n    char *temp, *temp2;\n    char *combinations[6];\n    combinations[0] = concat(a, concat(b, c));\n    combinations[1] = concat(a, concat(c, b));\n    combinations[2] = concat(b, concat(a, c));\n    combinations[3] = concat(b, concat(c, a));\n    combinations[4] = concat(c, concat(a, b));\n    combinations[5] = concat(c, concat(b, a));\n\n    for (int i = 0; i < 6; i++) {\n        if (contains(combinations[i], a) && contains(combinations[i], b) && contains(combinations[i], c)) {\n            if (minStr == NULL || strcmp(combinations[i], minStr) < 0) {\n                free(minStr); // Free previous minimum string\n                minStr = strdup(combinations[i]); // Duplicate string to keep it\n            }\n        }\n        free(combinations[i]); // Free memory allocated for combinations\n    }\n\n    // Check for overlapping substrings to further minimize the string if possible\n    for (int i = 0; i < 3; i++) {\n        for (int j = i + 1; j < 3; j++) {\n            char *first = i == 0 ? a : (i == 1 ? b : c);\n            char *second = j == 0 ? a : (j == 1 ? b : c);\n            for (int len = strlen(first); len > 0; len--) {\n                temp = strndup(first, len); // Take len characters from first\n                if (strstr(second, temp) == second) { // If second starts with temp\n                    temp2 = concat(temp, second + len); // Create new string with overlapping part\n                    if (contains(temp2, a) && contains(temp2, b) && contains(temp2, c)) {\n                        minStr = lexicoMin(minStr, temp2);\n                    }\n                    free(temp2);\n                }\n                free(temp);\n            }\n        }\n    }\n\n    return minStr;\n}"
}