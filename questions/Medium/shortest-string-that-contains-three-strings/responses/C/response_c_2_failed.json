{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9464000,
    "question_id": "2877",
    "elapsed_time": 104,
    "compare_result
    "code_output": "\"abcaaa\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708153767074,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1098,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177584556",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n#include <stdlib.h>\n\n// Function to merge two strings minimizing overlap\nchar *mergeStrings(char *a, char *b) {\n    int lenA = strlen(a), lenB = strlen(b);\n    int overlap = 0;\n    for (int i = 1; i <= lenA && i <= lenB; i++) {\n        if (strncmp(a + lenA - i, b, i) == 0) {\n            overlap = i; // Maximum overlap found\n        }\n    }\n    char *result = (char *)malloc(lenA + lenB - overlap + 1); // +1 for null terminator\n    strncpy(result, a, lenA);\n    strcpy(result + lenA - overlap, b);\n    return result;\n}\n\n// Function to find the minimum string containing all three substrings\nchar *minimumString(char *a, char *b, char *c) {\n    // Merge a and b with minimum overlap\n    char *mergeAB = mergeStrings(a, b);\n    // Merge result of mergeAB and c with minimum overlap\n    char *temp = mergeStrings(mergeAB, c);\n    free(mergeAB); // Free the temporary memory allocated\n\n    // Attempt merging in different orders to ensure minimum length\n    char *mergeBC = mergeStrings(b, c);\n    char *mergeABC = mergeStrings(a, mergeBC);\n    free(mergeBC); // Free the temporary memory allocated\n\n    if (strlen(temp) < strlen(mergeABC)) {\n        free(mergeABC);\n        return temp;\n    } else {\n        free(temp);\n        return mergeABC;\n    }\n}"
}