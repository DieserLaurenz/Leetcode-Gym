{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16640000,
    "question_id": "2877",
    "elapsed_time": 170,
    "compare_result": "11111111101011111011110111110101110111001111100001111111111100011110010111111111111111100110111010101110011011101110111111111111011110101011001111101001111101111111110101011111111111011110110111111010100011101011110011000110011110100101100101111111101111110111110100111100010010001111100111101111011111110111111111011101111111111111111111111001100111111001100111111011100011011110111111110110111110000111010011100111010011011011100101011001011001110111110011011111101011101010101111111010100111111011111111111110100011010111011011111011111111011000101110001111111101110010011101000010101111001101011101100101010010101100101011110111001110110101111111101111110001001010101010110111111111010101101101011010111101111111111100111011100011000101110000101010101011010000011110100101111101100110100101010111101000111010100101111110111111000110010010110100111101101001101010010101110001101011010011011110011000111010010010001100000110101000110110000101010111111001110010010110001101011110011100100101101001111111011100100001110011011111011010110000001101111000110100001110010111010010010100010110101111001111111100111110110100100100001001111111100000100001010100100100011100000100111111010000100001100111000010001001100011100010001010001010100111110011000000000111000010111100110010010000100011100000100000000010101010101111101101110011111101000111100101011101101011011001100101001011101100101110001001100010001001010000011110010011010001000001101110001110001100001011011010101101111111010110110100001101100011101111001001111000001100110110111000001111101101101100000011100010011100011001011010100101111110110010101111001010110100001110001000010011111101001001111010110000011111110001110011100001100101100011110011100111000101011110011001101000001101111011011100001010000001010101010111010010111111111000010000011001111011101100110100111011011101000111100100000000010101000110100000100101111001011110111100010111010100001011110000010001100100110000101100101111001101000010000101110010011101001110001110101010111001110101110001100110001001001000100000000001001111111111001011111010100100101011010010001101000101000001000110000001111111011100101101001100001001000101100101110100010110011100011000001011010000100010111111110110111000100001101111100100100110000101001011110001000100100111101011011010010010001010101101010111110100000111100000101100010011011111101000101110011100101101000010101101100011111110000100011001010011111110011100101011100001000101100110110000101011111101001010010010001110000000110111100100001101111100011011011111100000001111101000100101000000000001011100101100001100101010001100110101111100010011000010011111101111100011000000000101000000111001100101100000011011111001100000011100011110010010101011111101010001111001000000011010011101100001110010001010010010100010110000010111001100111010101110011110000010100001000100010010010001000100010000011011011001011010100001001100010011011010100101101001010011010000001011001000110100000110111001001001010100111010000001100111111110011001000011010000001100101110101000101011101111011101100101001011110011101100011000101010111010010010100011000100000000101011010100010010100001011000100011011100101101011011010010110010000001100100111000101101101000001101001010011110001001000001000011101100100001000111011100001111001101000100011100001100000000000000001100001101100001000001110001011011101000101110100011000000110011100000110111101000100100110101110001110111001101101001100100000011001000111011000101001111000100011101000110101111010001001100101001101011001011100001110000111010010111010001100000010011000011001110010111011001101001000010010101011001110010001001011000001001110110001001000101001011011010000011000011000100101001101110000100111111001000001110111000111010000011000011001100101110001010110100001111101101110110010001001010111111000001101110101110010110111111110110001001010111010010011111000001101011010011111001110010111101100000000001101101000101101000010010011001000001101110000010110001010101011010110010010011010011101101000001110101010010101100100110000110101001011010000000011111000111000001000001110000100000001111001010001001000111010110000000011100000110010011110000011000101100000000011111011000001101011000000100010001110101011101110000010111110111010010101000100110110110010011101010011011010011001110010100000011100101010011001111010101000000100001111100001001110010111011010111010000100111110100101000110101011111000101010001001111110101001000001001100111011100001100111110010010011000011000110110111000011101100000001001000101010011101010001111000011101110110100110011001010010110000001000111011010011011001111100011100111110100001110000000100000101111100000010111111111100000010010111101010101110011000000101110010010010011000010011111011011001100010100000111000111101111100000011101110001000011011110001010111101010010000000011110111110100000000001101010110011011001001000100001000100100100000011011010100101000101100010011010000111111101101001010101100111111101110110001111010100111000011111010110010000111110101000001001010000000101000010100000110110000111001101110010111011110000101001010001111001010111011010111000011010110100110100101110111100101101100100110111010100010001100111001101001101111000001001100001111111110110001111100001100111010110100011010110011010011000001110111110010110110001100011000010111100011000001111011001",
    "code_output": "\"acb\"",
    "std_output": "",
    "last_testcase": "\"a\"\n\"c\"\n\"b\"",
    "expected_output": "\"abc\"",
    "task_finish_time": 1708849398088,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2704,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185600155",
    "input_formatted": "\"a\", \"c\", \"b\"",
    "input": "\"a\"\n\"c\"\n\"b\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n        def find_overlaps(s1, s2):\n            for i in range(len(s1) + 1):\n                if s2.startswith(s1[i:]):\n                    return s1 + s2[len(s1[i:]):]\n            return s1 + s2\n\n        def all_combinations(strs):\n            if len(strs) == 1:\n                return strs[0]\n            combinations = []\n            for i in range(len(strs)):\n                for j in range(i + 1, len(strs)):\n                    merged = find_overlaps(strs[i], strs[j])\n                    new_strs = strs[:i] + strs[i+1:j] + strs[j+1:] + [merged]\n                    combinations.append(all_combinations(new_strs))\n            return min(combinations, key=lambda x: (len(x), x))\n\n        return all_combinations([a, b, c])"
}