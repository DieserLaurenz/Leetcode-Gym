{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16604000,
    "question_id": "2877",
    "elapsed_time": 364,
    "compare_result
    "code_output": "\"abc\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708849431768,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 65,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185600456",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n        from itertools import permutations\n\n        def overlap(s1, s2):\n            max_len = min(len(s1), len(s2))\n            for i in range(max_len, 0, -1):\n                if s1[-i:] == s2[:i]:\n                    return s1 + s2[i:]\n            return s1 + s2\n\n        def shortest_superstring(strs):\n            if not strs:\n                return \"\"\n            elif len(strs) == 1:\n                return strs[0]\n            else:\n                shortest = strs[0] + strs[1]  # Initialize with a non-overlapped case\n                for s1, s2 in permutations(strs, 2):\n                    candidate = overlap(s1, s2)\n                    if len(candidate) < len(shortest):\n                        shortest = candidate\n                return shortest\n\n        strs = [a, b, c]\n        result = strs[0]\n        for perm in permutations(strs):\n            candidate = shortest_superstring(list(perm))\n            if len(candidate) < len(result) or (len(candidate) == len(result) and candidate < result):\n                result = candidate\n        return result"
}