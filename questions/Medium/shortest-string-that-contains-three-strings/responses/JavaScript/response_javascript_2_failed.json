{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60176000,
    "question_id": "2877",
    "elapsed_time": 282,
    "compare_result
    "code_output": "\"abcaaa\"",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"bca\"\n\"aaa\"",
    "expected_output": "\"aaabca\"",
    "task_finish_time": 1708153990683,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1911,
    "total_testcases": 5324,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1177587116",
    "input_formatted": "\"abc\", \"bca\", \"aaa\"",
    "input": "\"abc\"\n\"bca\"\n\"aaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} a\n * @param {string} b\n * @param {string} c\n * @return {string}\n */\nvar minimumString = function(a, b, c) {\n    const substrings = [a, b, c];\n    substrings.sort((x, y) => x.length - y.length);\n\n    function checkOverlap(mainStr, subStr) {\n        const len = Math.min(mainStr.length, subStr.length);\n        for (let i = 0; i <= mainStr.length; i++) {\n            if (subStr.startsWith(mainStr.substring(i))) {\n                return mainStr.substring(0, i) + subStr;\n            }\n        }\n        return \"\";\n    }\n\n    function findMinString() {\n        let temp = substrings[0];\n        for (let i = 1; i < substrings.length; i++) {\n            let overlapStr = checkOverlap(temp, substrings[i]);\n            if (overlapStr) {\n                temp = overlapStr;\n            } else {\n                temp += substrings[i];\n            }\n        }\n        return temp;\n    }\n\n    let minStr = findMinString();\n    for (let i = 0; i < substrings.length; i++) {\n        for (let j = i + 1; j < substrings.length; j++) {\n            let temp = checkOverlap(substrings[i], substrings[j]);\n            if (temp) {\n                let other = substrings[3 - i - j];\n                let combined = checkOverlap(temp, other);\n                if (combined && combined.length < minStr.length) {\n                    minStr = combined;\n                }\n            }\n        }\n    }\n\n    return minStr;\n};"
}