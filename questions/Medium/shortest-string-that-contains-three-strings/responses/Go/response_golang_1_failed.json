{
    "status_code": 20,
    "lang": "golang",
    "run_success": false,
    "compile_error": "Line 4: Char 5: \"sort\" imported and not used (solution.go)",
    "full_compile_error": "Line 4: Char 5: \"sort\" imported and not used (solution.go)",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2877",
    "task_finish_time": 1708154703805,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1177594893",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "package main\n\nimport (\n    \"sort\"\n)\n\nfunc minimumString(a string, b string, c string) string {\n    // Helper function to check if s1 contains s2\n    contains := func(s1, s2 string) bool {\n        return strings.Contains(s1, s2)\n    }\n\n    // Helper function to merge two strings with minimum overlap\n    merge := func(s1, s2 string) string {\n        maxOverlap := 0\n        for i := 1; i <= len(s1) && i <= len(s2); i++ {\n            if strings.HasSuffix(s1, s2[:i]) {\n                maxOverlap = i\n            }\n        }\n        return s1 + s2[maxOverlap:]\n    }\n\n    // Generate all permutations of the strings\n    strs := []string{a, b, c}\n    perms := [][]string{}\n    var permute func([]string, int)\n    permute = func(arr []string, n int) {\n        if n == len(arr)-1 {\n            tmp := make([]string, len(arr))\n            copy(tmp, arr)\n            perms = append(perms, tmp)\n            return\n        }\n        for i := n; i < len(arr); i++ {\n            arr[n], arr[i] = arr[i], arr[n]\n            permute(arr, n+1)\n            arr[n], arr[i] = arr[i], arr[n]\n        }\n    }\n    permute(strs, 0)\n\n    // Try all permutations to find the minimum string\n    minStr := \"\"\n    for _, perm := range perms {\n        cur := perm[0]\n        for i := 1; i < len(perm); i++ {\n            if contains(cur, perm[i]) {\n                continue\n            } else {\n                cur = merge(cur, perm[i])\n            }\n        }\n        if minStr == \"\" || len(cur) < len(minStr) || (len(cur) == len(minStr) && cur < minStr) {\n            minStr = cur\n        }\n    }\n\n    return minStr\n}"
}