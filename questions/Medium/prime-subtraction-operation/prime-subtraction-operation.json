{
    "acRate": 37.15863012360154,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2601",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Prime Subtraction Operation",
    "titleSlug": "prime-subtraction-operation",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Binary Search",
            "id": "VG9waWNUYWdOb2RlOjEx",
            "slug": "binary-search"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Number Theory",
            "id": "VG9waWNUYWdOb2RlOjYxMDY3",
            "slug": "number-theory"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     bool primeSubOperation(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public boolean primeSubOperation(int[] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def primeSubOperation(self, nums):         \"\"\"         :type nums: List[int]         :rtype: bool         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def primeSubOperation(self, nums: List[int]) -> bool:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "bool primeSubOperation(int* nums, int numsSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public bool PrimeSubOperation(int[] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {boolean}  */ var primeSubOperation = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function primeSubOperation(nums: number[]): boolean {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Boolean      */     function primeSubOperation($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func primeSubOperation(_ nums: [Int]) -> Bool {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun primeSubOperation(nums: IntArray): Boolean {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   bool primeSubOperation(List<int> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func primeSubOperation(nums []int) bool {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Boolean} def prime_sub_operation(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def primeSubOperation(nums: Array[Int]): Boolean = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn prime_sub_operation(nums: Vec<i32>) -> bool {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (prime-sub-operation nums)   (-> (listof exact-integer?) boolean?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec prime_sub_operation(Nums :: [integer()]) -> boolean(). prime_sub_operation(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec prime_sub_operation(nums :: [integer]) :: boolean   def prime_sub_operation(nums) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums of length n. You can perform the following operation as many times as you want:  Pick an index i that you havent picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i].  Return true if you can make nums a strictly increasing array using the above operation and false otherwise. A strictly increasing array is an array whose each element is strictly greater than its preceding element.  Example 1:  Input: nums = [4,9,6,10] Output: true Explanation: In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10]. In the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10]. After the second operation, nums is sorted in strictly increasing order, so the answer is true. Example 2:  Input: nums = [6,8,11,12] Output: true Explanation: Initially nums is sorted in strictly increasing order, so we don't need to make any operations. Example 3:  Input: nums = [5,8,3] Output: false Explanation: It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false.  Constraints:  1 <= nums.length <= 1000 1 <= nums[i] <= 1000 nums.length == n  "
}