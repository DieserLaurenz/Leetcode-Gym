{
    "status_code": 14,
    "lang": "ruby",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 783652000,
    "question_id": "3142",
    "elapsed_time": 3062,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1707536913250,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171096168",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @param {String[]} words\n# @param {Integer[]} groups\n# @return {String[]}\ndef get_words_in_longest_subsequence(n, words, groups)\n  edges = []\n  (0...n).each do |i|\n    (i+1...n).each do |j|\n      if words[i].length == words[j].length && hamming_distance(words[i], words[j]) == 1\n        edges << [i, j] if groups[i] != groups[j]\n      end\n    end\n  end\n\n  dp = Array.new(n, 1)\n  parent = Array.new(n, nil)\n  \n  edges.each do |i, j|\n    if dp[i] + 1 > dp[j]\n      dp[j] = dp[i] + 1\n      parent[j] = i\n    end\n    if dp[j] + 1 > dp[i]\n      dp[i] = dp[j] + 1\n      parent[i] = j\n    end\n  end\n\n  max_length, max_index = dp.each_with_index.max\n  sequence = []\n  while !max_index.nil?\n    sequence << words[max_index]\n    max_index = parent[max_index]\n  end\n\n  sequence.reverse\nend\n\ndef hamming_distance(word1, word2)\n  word1.chars.zip(word2.chars).count { |a, b| a != b }\nend"
}