{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 213684000,
    "question_id": "3142",
    "elapsed_time": 3181,
    "compare_result": "001111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111000000",
    "code_output": "[\"bab\"]",
    "std_output": "",
    "last_testcase": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1707536881560,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 38,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171095961",
    "input_formatted": "3, [\"bab\",\"dab\",\"cab\"], [1,2,2]",
    "input": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @param {String[]} words\n# @param {Integer[]} groups\n# @return {String[]}\ndef get_words_in_longest_subsequence(n, words, groups)\n  graph = Array.new(n) { [] }\n  (0...n).each do |i|\n    (i+1...n).each do |j|\n      if groups[i] != groups[j] && words[i].length == words[j].length && hamming_distance(words[i], words[j]) == 1\n        graph[i] << j\n        graph[j] << i\n      end\n    end\n  end\n  \n  max_path, max_path_nodes = [], []\n  visited = [false] * n\n  \n  graph.each_index do |i|\n    if !visited[i]\n      current_path = dfs(graph, i, visited)\n      if current_path.length > max_path.length\n        max_path = current_path\n        max_path_nodes = [i]\n      elsif current_path.length == max_path.length\n        max_path_nodes << i\n      end\n    end\n  end\n\n  max_path_nodes.map { |i| words[i] }\nend\n\ndef dfs(graph, node, visited, path = [])\n  return path if visited[node]\n  \n  visited[node] = true\n  path << node\n  graph[node].each do |adj|\n    dfs(graph, adj, visited, path)\n  end\n  \n  path\nend\n\ndef hamming_distance(word1, word2)\n  distance = 0\n  (0...word1.length).each do |i|\n    distance += 1 if word1[i] != word2[i]\n  end\n  distance\nend"
}