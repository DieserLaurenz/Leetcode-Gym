{
    "status_code": 14,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 785744000,
    "question_id": "3142",
    "elapsed_time": 5039,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1707537325777,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1171099055",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (get-words-in-longest-subsequence n words groups)\n  (-> exact-integer? (listof string?) (listof exact-integer?) (listof string?))\n  \n  (define (hamming-distance s1 s2)\n    (for/sum ([i (in-range (string-length s1))])\n      (if (equal? (string-ref s1 i) (string-ref s2 i)) 0 1)))\n\n  (define (valid-pair? i j)\n    (and (not (= (list-ref groups i) (list-ref groups j)))\n         (= (string-length (list-ref words i)) (string-length (list-ref words j)))\n         (= 1 (hamming-distance (list-ref words i) (list-ref words j)))))\n\n  (define (extend-path path)\n    (let ((last (if (null? path) -1 (car (reverse path)))))\n      (foldl (lambda (i acc)\n               (if (or (negative? last) (valid-pair? last i))\n                   (cons (append path (list i)) acc)\n                   acc))\n             '()\n             (range n))))\n\n  (define (find-longest-sequence)\n    (let loop ((paths (map list (range n))) (max-path '()))\n      (if (null? paths)\n          max-path\n          (let* ((new-paths (apply append (map extend-path paths)))\n                 (filtered-paths (filter (lambda (path) (> (length path) (length max-path))) new-paths)))\n            (loop filtered-paths (if (null? filtered-paths) max-path (first filtered-paths)))))))\n\n  (let* ((longest-sequence (find-longest-sequence))\n         (words-in-sequence (map (lambda (index) (list-ref words index)) longest-sequence)))\n    words-in-sequence))"
}