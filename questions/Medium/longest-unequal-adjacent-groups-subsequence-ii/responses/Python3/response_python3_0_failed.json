{
    "status_code": 15,
    "lang": "python3",
    "run_success": false,
    "runtime_error": "Line 54: TypeError: Solution.getWordsInLongestSubsequence() missing 1 required positional argument: 'groups'",
    "full_runtime_error": "TypeError: Solution.getWordsInLongestSubsequence() missing 1 required positional argument: 'groups'\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ret = Solution().getWordsInLongestSubsequence(param_1, param_2)\nLine 54 in _driver (Solution.py)\n    _driver()\nLine 65 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 16684000,
    "question_id": "3142",
    "elapsed_time": 49,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1708786717878,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184892177",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def getWordsInLongestSubsequence(self, n: int, words: List[str], groups: List[int]) -> List[str]:\n        def hammingDistance(s1: str, s2: str) -> int:\n            return sum(c1 != c2 for c1, c2 in zip(s1, s2))\n        \n        edges = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if groups[i] != groups[j] and len(words[i]) == len(words[j]) and hammingDistance(words[i], words[j]) == 1:\n                    edges[i].append(j)\n                    edges[j].append(i)\n        \n        max_path = []\n        \n        def dfs(node: int, path: List[int]):\n            nonlocal max_path\n            if len(path) > len(max_path):\n                max_path = path.copy()\n            for next_node in edges[node]:\n                if next_node not in path:\n                    path.append(next_node)\n                    dfs(next_node, path)\n                    path.pop()\n        \n        for i in range(n):\n            dfs(i, [i])\n        \n        return [words[i] for i in max_path]"
}