{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25016000,
    "question_id": "3142",
    "elapsed_time": 11009,
    "compare_result": "011111111111111111111111111111111111111111111111111111111111011111111111111111011110011011010111110101001001010011011011111000101101001001110001111111010100111110110010000100110111110111011100001001100100010101000100111100001001010001000111010101001000000100001100000000000010100010010010001000100000000000000000010000000001100000000000000000000000000000000000000000010001000000000000000000000000000000111111111111111111111111111111111000000",
    "code_output": "[\"dab\",\"bab\",\"cab\"]",
    "std_output": "",
    "last_testcase": "[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1708786794053,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 214,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184893003",
    "input_formatted": "[\"bab\",\"dab\",\"cab\"], [1,2,2]",
    "input": "[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def getWordsInLongestSubsequence(self, words: List[str], groups: List[int]) -> List[str]:\n        n = len(words)\n        def hammingDistance(s1: str, s2: str) -> int:\n            return sum(c1 != c2 for c1, c2 in zip(s1, s2))\n        \n        adj = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if groups[i] != groups[j] and len(words[i]) == len(words[j]) and hammingDistance(words[i], words[j]) == 1:\n                    adj[i].append(j)\n                    adj[j].append(i)\n        \n        visited = [False] * n\n        longest_path = []\n        best_path = []\n        \n        def dfs(u, path):\n            nonlocal longest_path\n            if len(path) > len(longest_path):\n                longest_path = path.copy()\n            for v in adj[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    dfs(v, path + [v])\n                    visited[v] = False\n        \n        for i in range(n):\n            visited[i] = True\n            dfs(i, [i])\n            visited[i] = False\n        \n        return [words[i] for i in longest_path]"
}