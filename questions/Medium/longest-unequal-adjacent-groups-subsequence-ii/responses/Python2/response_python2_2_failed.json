{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 51: TypeError: getWordsInLongestSubsequence() takes exactly 4 arguments (3 given)",
    "full_runtime_error": "TypeError: getWordsInLongestSubsequence() takes exactly 4 arguments (3 given)\n    ret = Solution().getWordsInLongestSubsequence(param_1, param_2)\nLine 51 in _driver (Solution.py)\n    _driver()\nLine 61 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11728000,
    "question_id": "3142",
    "elapsed_time": 27,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1708786659174,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184891469",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def getWordsInLongestSubsequence(self, n, words, groups):\n        def hammingDistance(s1, s2):\n            return sum(c1 != c2 for c1, c2 in zip(s1, s2))\n        \n        def canFollow(i, j):\n            return groups[i] != groups[j] and len(words[i]) == len(words[j]) and hammingDistance(words[i], words[j]) == 1\n        \n        dp = [1] * n\n        parent = [-1] * n\n        maxLength, maxIndex = 1, 0\n        \n        for i in range(n):\n            for j in range(i):\n                if canFollow(j, i) and dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    parent[i] = j\n                    if dp[i] > maxLength:\n                        maxLength = dp[i]\n                        maxIndex = i\n        \n        result = []\n        while maxIndex != -1:\n            result.append(words[maxIndex])\n            maxIndex = parent[maxIndex]\n        \n        return result[::-1]"
}