{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 57: TypeError: getWordsInLongestSubsequence() takes exactly 4 arguments (3 given)",
    "full_runtime_error": "TypeError: getWordsInLongestSubsequence() takes exactly 4 arguments (3 given)\n    ret = Solution().getWordsInLongestSubsequence(param_1, param_2)\nLine 57 in _driver (Solution.py)\n    _driver()\nLine 67 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11752000,
    "question_id": "3142",
    "elapsed_time": 26,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1708786593356,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184890612",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def getWordsInLongestSubsequence(self, n, words, groups):\n        def hammingDistance(s1, s2):\n            return sum(c1 != c2 for c1, c2 in zip(s1, s2))\n        \n        adj = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if words[i] != words[j] and len(words[i]) == len(words[j]) and hammingDistance(words[i], words[j]) == 1 and groups[i] != groups[j]:\n                    adj[i].append(j)\n                    adj[j].append(i)\n        \n        def dfs(node, path):\n            visited[node] = True\n            path.append(node)\n            maxPath = list(path)\n            for nei in adj[node]:\n                if not visited[nei]:\n                    curPath = dfs(nei, path)\n                    if len(curPath) > len(maxPath):\n                        maxPath = curPath\n            path.pop()\n            visited[node] = False\n            return maxPath\n        \n        longest = []\n        for i in range(n):\n            visited = [False] * n\n            curLongest = dfs(i, [])\n            if len(curLongest) > len(longest):\n                longest = curLongest\n                \n        return [words[i] for i in longest]"
}