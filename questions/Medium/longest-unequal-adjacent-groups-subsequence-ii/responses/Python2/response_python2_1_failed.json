{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 17: SyntaxError: invalid syntax",
    "full_runtime_error": "SyntaxError: invalid syntax\n                      ^\n    nonlocal max_length, max_path\nLine 17  (Solution.py)",
    "status_runtime": "N/A",
    "memory": 6804000,
    "question_id": "3142",
    "elapsed_time": 14,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1708786626683,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184891049",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def getWordsInLongestSubsequence(self, words, groups):\n        n = len(words)\n        def hammingDistance(s1, s2):\n            return sum(c1 != c2 for c1, c2 in zip(s1, s2))\n        \n        adj = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if len(words[i]) == len(words[j]) and hammingDistance(words[i], words[j]) == 1 and groups[i] != groups[j]:\n                    adj[i].append(j)\n                    adj[j].append(i)\n        \n        max_length, max_path = 0, []\n        \n        def dfs(node, path):\n            nonlocal max_length, max_path\n            if len(path) > max_length:\n                max_length = len(path)\n                max_path = path[:]\n            for next_node in adj[node]:\n                if next_node not in path:\n                    dfs(next_node, path + [next_node])\n        \n        for i in range(n):\n            dfs(i, [i])\n        \n        return [words[i] for i in max_path]"
}