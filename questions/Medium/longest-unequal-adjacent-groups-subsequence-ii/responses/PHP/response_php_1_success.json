{
    "status_code": 10,
    "lang": "php",
    "run_success": true,
    "status_runtime": "649 ms",
    "memory": 20320000,
    "question_id": "3142",
    "elapsed_time": 676,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707536462490,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 441,
    "total_testcases": 441,
    "runtime_percentile": 100,
    "status_memory": "20.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "PHP",
    "submission_id": "1171093109",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param String[] $words\n     * @param Integer[] $groups\n     * @return String[]\n     */\n    function getWordsInLongestSubsequence($n, $words, $groups) {\n        $dp = array_fill(0, $n, 1);\n        $prev = array_fill(0, $n, -1);\n        $maxLength = 1;\n        $lastIndex = 0;\n\n        // Moved hammingDistance function inside getWordsInLongestSubsequence to avoid redeclaration error\n        $hammingDistance = function($str1, $str2) {\n            $count = 0;\n            for ($i = 0; $i < strlen($str1); $i++) {\n                if ($str1[$i] != $str2[$i]) $count++;\n            }\n            return $count;\n        };\n\n        // Build DP table\n        for ($i = 1; $i < $n; $i++) {\n            for ($j = 0; $j < $i; $j++) {\n                if ($groups[$i] != $groups[$j] && strlen($words[$i]) == strlen($words[$j]) && $hammingDistance($words[$i], $words[$j]) == 1) {\n                    if ($dp[$j] + 1 > $dp[$i]) {\n                        $dp[$i] = $dp[$j] + 1;\n                        $prev[$i] = $j;\n                        if ($dp[$i] > $maxLength) {\n                            $maxLength = $dp[$i];\n                            $lastIndex = $i;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Reconstruct the longest subsequence\n        $result = [];\n        while ($lastIndex != -1) {\n            array_unshift($result, $words[$lastIndex]);\n            $lastIndex = $prev[$lastIndex];\n        }\n\n        return $result;\n    }\n}"
}