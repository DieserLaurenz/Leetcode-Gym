{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "158 ms",
    "memory": 55812000,
    "question_id": "3142",
    "elapsed_time": 263,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707536250013,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 441,
    "total_testcases": 441,
    "runtime_percentile": 73.91309999999997,
    "status_memory": "55.8 MB",
    "memory_percentile": 91.30439999999999,
    "pretty_lang": "C#",
    "submission_id": "1171091616",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public IList<string> GetWordsInLongestSubsequence(int n, string[] words, int[] groups) {\n        var dp = new int[n];\n        var path = new int[n];\n        var resultIndices = new List<int>();\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            path[i] = -1;\n            for (int j = 0; j < i; j++) {\n                if (groups[j] != groups[i] && words[j].Length == words[i].Length && HammingDistance(words[j], words[i]) == 1 && dp[j] + 1 > dp[i]) {\n                    dp[i] = dp[j] + 1;\n                    path[i] = j;\n                }\n            }\n        }\n\n        int idx = 0;\n        for (int i = 1; i < n; i++) {\n            if (dp[i] > dp[idx]) idx = i;\n        }\n\n        while (idx != -1) {\n            resultIndices.Add(idx);\n            idx = path[idx];\n        }\n\n        resultIndices.Reverse();\n        var result = resultIndices.Select(i => words[i]).ToList();\n        return result;\n    }\n\n    private int HammingDistance(string a, string b) {\n        int distance = 0;\n        for (int i = 0; i < a.Length; i++) {\n            if (a[i] != b[i]) distance++;\n        }\n        return distance;\n    }\n}"
}