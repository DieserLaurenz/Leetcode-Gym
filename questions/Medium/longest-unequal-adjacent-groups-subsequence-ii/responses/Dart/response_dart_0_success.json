{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "429 ms",
    "memory": 149992000,
    "question_id": "3142",
    "elapsed_time": 526,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707536702025,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 441,
    "total_testcases": 441,
    "runtime_percentile": 100,
    "status_memory": "150 MB",
    "memory_percentile": 100,
    "pretty_lang": "Dart",
    "submission_id": "1171094711",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<String> getWordsInLongestSubsequence(int n, List<String> words, List<int> groups) {\n    List<List<int>> dp = List.generate(n, (_) => [-1, -1]);\n    int maxLen = 0, lastIndex = -1;\n\n    for (int i = 0; i < n; ++i) {\n      dp[i] = [1, -1];\n      for (int j = 0; j < i; ++j) {\n        if (groups[j] != groups[i] && words[j].length == words[i].length && _hammingDistance(words[j], words[i]) == 1) {\n          if (dp[j][0] + 1 > dp[i][0]) {\n            dp[i] = [dp[j][0] + 1, j];\n          }\n        }\n      }\n      if (dp[i][0] > maxLen) {\n        maxLen = dp[i][0];\n        lastIndex = i;\n      }\n    }\n\n    List<String> result = [];\n    while (lastIndex != -1) {\n      result.insert(0, words[lastIndex]);\n      lastIndex = dp[lastIndex][1];\n    }\n\n    return result;\n  }\n\n  int _hammingDistance(String a, String b) {\n    int distance = 0;\n    for (int i = 0; i < a.length; ++i) {\n      if (a[i] != b[i]) ++distance;\n    }\n    return distance;\n  }\n}"
}