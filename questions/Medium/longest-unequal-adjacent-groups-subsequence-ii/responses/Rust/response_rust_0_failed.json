{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2176000,
    "question_id": "3142",
    "elapsed_time": 40,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111011111111111111111111111111111111111111111111101111111111111111111111111111100111010111011111111111111011110111111111111111111111111111111111111011111111111111111110111111111011111101110111111110110101111110111101111010111101110111111001110101110111101011111110111111111110110111111111111111111111111111111111111110111",
    "code_output": "[\"bad\",\"cad\"]",
    "std_output": "",
    "last_testcase": "9\n[\"bad\",\"dc\",\"bc\",\"ccd\",\"dd\",\"da\",\"cad\",\"dba\",\"aba\"]\n[9,7,1,2,6,8,3,7,2]",
    "expected_output": "[\"dc\",\"dd\",\"da\"]",
    "task_finish_time": 1707537202827,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 406,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1171098188",
    "input_formatted": "9, [\"bad\",\"dc\",\"bc\",\"ccd\",\"dd\",\"da\",\"cad\",\"dba\",\"aba\"], [9,7,1,2,6,8,3,7,2]",
    "input": "9\n[\"bad\",\"dc\",\"bc\",\"ccd\",\"dd\",\"da\",\"cad\",\"dba\",\"aba\"]\n[9,7,1,2,6,8,3,7,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn get_words_in_longest_subsequence(n: i32, words: Vec<String>, groups: Vec<i32>) -> Vec<String> {\n        let mut max_length = 0;\n        let mut best_sequence = Vec::new();\n\n        // Check all pairs to find sequences\n        for i in 0..n as usize {\n            let mut current_sequence = vec![i];\n            let mut last_group = groups[i];\n            let mut last_word = &words[i];\n\n            for j in i+1..n as usize {\n                if groups[j] != last_group && words[j].len() == last_word.len() {\n                    let mut diff = 0;\n                    for (a, b) in last_word.chars().zip(words[j].chars()) {\n                        if a != b {\n                            diff += 1;\n                        }\n                    }\n                    if diff == 1 {\n                        current_sequence.push(j);\n                        last_group = groups[j];\n                        last_word = &words[j];\n                    }\n                }\n            }\n\n            if current_sequence.len() > max_length {\n                max_length = current_sequence.len();\n                best_sequence = current_sequence;\n            }\n        }\n\n        best_sequence.into_iter().map(|i| words[i].clone()).collect()\n    }\n}"
}