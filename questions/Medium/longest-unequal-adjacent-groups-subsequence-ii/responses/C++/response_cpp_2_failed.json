{
    "status_code": 12,
    "lang": "cpp",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 975336000,
    "question_id": "3142",
    "elapsed_time": 1151,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1707535997051,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171089968",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<string> getWordsInLongestSubsequence(int n, vector<string>& words, vector<int>& groups) {\n        vector<vector<int>> adj(n);\n        auto hamming = [](const string &a, const string &b) {\n            int diff = 0;\n            for (int i = 0; i < a.size(); ++i)\n                if (a[i] != b[i]) ++diff;\n            return diff;\n        };\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (groups[i] != groups[j] && words[i].size() == words[j].size() && hamming(words[i], words[j]) == 1) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n\n        vector<int> dp(n, 1), parent(n, -1);\n        int max_length = 1, last_index = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j : adj[i]) {\n                if (dp[j] < dp[i] + 1) {\n                    dp[j] = dp[i] + 1;\n                    parent[j] = i;\n                    if (dp[j] > max_length) {\n                        max_length = dp[j];\n                        last_index = j;\n                    }\n                }\n            }\n        }\n\n        vector<string> result;\n        while (last_index != -1) {\n            result.push_back(words[last_index]);\n            last_index = parent[last_index];\n        }\n        reverse(result.begin(), result.end());\n        return result;\n    }\n};"
}