{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72196000,
    "question_id": "3142",
    "elapsed_time": 145,
    "compare_result": "001111111111111111111111110110111111111011111111011001101100001110010110011011011100001001010100100100001001010000010010100000001001001000010000111101000100001010000010000100000001000010010000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111101011111111111111111111111111000000",
    "code_output": "[\"bab\"]",
    "std_output": "",
    "last_testcase": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1707535959249,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 124,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171089725",
    "input_formatted": "3, [\"bab\",\"dab\",\"cab\"], [1,2,2]",
    "input": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<string> getWordsInLongestSubsequence(int n, vector<string>& words, vector<int>& groups) {\n        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n        vector<int> path(n, -1);\n        auto hammingDistance = [](const string& a, const string& b) {\n            int count = 0;\n            for (int i = 0; i < a.size(); ++i) {\n                if (a[i] != b[i]) ++count;\n            }\n            return count;\n        };\n\n        // Build graph\n        vector<vector<int>> graph(n);\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (groups[i] != groups[j] && words[i].size() == words[j].size() && hammingDistance(words[i], words[j]) == 1) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        // Longest path in graph\n        vector<int> longestSequence;\n        for (int i = 0; i < n; ++i) {\n            vector<int> currentSequence;\n            int current = i;\n            while (current != -1) {\n                currentSequence.push_back(current);\n                current = path[current];\n            }\n            if (currentSequence.size() > longestSequence.size()) {\n                longestSequence = move(currentSequence);\n            }\n        }\n\n        vector<string> result;\n        for (auto index : longestSequence) {\n            result.push_back(words[index]);\n        }\n        return result;\n    }\n};"
}