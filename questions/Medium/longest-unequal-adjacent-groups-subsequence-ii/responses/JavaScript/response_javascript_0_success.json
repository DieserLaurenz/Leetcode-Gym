{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "188 ms",
    "memory": 51524000,
    "question_id": "3142",
    "elapsed_time": 253,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707536308465,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 441,
    "total_testcases": 441,
    "runtime_percentile": 33.33320000000002,
    "status_memory": "51.5 MB",
    "memory_percentile": 16.66650000000002,
    "pretty_lang": "JavaScript",
    "submission_id": "1171092029",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {string[]} words\n * @param {number[]} groups\n * @return {string[]}\n */\nvar getWordsInLongestSubsequence = function(n, words, groups) {\n    const hammingDistance = (word1, word2) => {\n        let distance = 0;\n        for (let i = 0; i < word1.length; i++) {\n            if (word1[i] !== word2[i]) distance++;\n        }\n        return distance;\n    };\n\n    let dp = Array.from({ length: n }, () => 1), prev = Array.from({ length: n }, () => -1);\n    let maxLength = 1, lastIndex = 0;\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (groups[i] !== groups[j] && words[i].length === words[j].length && hammingDistance(words[i], words[j]) === 1) {\n                if (dp[j] + 1 > dp[i]) {\n                    dp[i] = dp[j] + 1;\n                    prev[i] = j;\n                }\n            }\n        }\n        if (dp[i] > maxLength) {\n            maxLength = dp[i];\n            lastIndex = i;\n        }\n    }\n\n    let result = [];\n    while (lastIndex !== -1) {\n        result.unshift(words[lastIndex]);\n        lastIndex = prev[lastIndex];\n    }\n\n    return result;\n};"
}