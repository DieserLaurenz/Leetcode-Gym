{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 6: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:6: anonymous fn/5 in Solution.get_words_in_longest_subsequence/3\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:4: Solution.get_words_in_longest_subsequence/3\n    solution.ex:42: Driver.consume_test_cases/2\n    solution.ex:26: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73016000,
    "question_id": "3142",
    "elapsed_time": 300,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1707537518906,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171100470",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec get_words_in_longest_subsequence(n :: integer, words :: [String.t], groups :: [integer]) :: [String.t]\n  def get_words_in_longest_subsequence(n, words, groups) do\n    Enum.reduce(0..n-2, [], fn i, acc ->\n      Enum.reduce(i+1..n-1, acc, fn j, acc_inner ->\n        if groups[i] != groups[j] and String.length(words[i]) == String.length(words[j]) and hamming_distance(words[i], words[j]) == 1 do\n          [words[i], words[j]] |> Enum.concat(acc_inner) |> Enum.uniq()\n        else\n          acc_inner\n        end\n      end)\n    end)\n    |> Enum.chunk_every(2)\n    |> Enum.max_by(&length/1, [])\n  end\n\n  defp hamming_distance(s1, s2) do\n    String.codepoints(s1)\n    |> Enum.zip(String.codepoints(s2))\n    |> Enum.count(fn {a, b} -> a != b end)\n  end\nend"
}