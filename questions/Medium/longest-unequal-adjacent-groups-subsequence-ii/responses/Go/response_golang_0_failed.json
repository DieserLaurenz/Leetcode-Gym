{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17460000,
    "question_id": "3142",
    "elapsed_time": 64,
    "compare_result": "110000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000111111",
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "1\n[\"abbbb\"]\n[1]",
    "expected_output": "[\"abbbb\"]",
    "task_finish_time": 1707536755357,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 403,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171095084",
    "input_formatted": "1, [\"abbbb\"], [1]",
    "input": "1\n[\"abbbb\"]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func getWordsInLongestSubsequence(n int, words []string, groups []int) []string {\n    dp := make([][]int, n)\n    for i := range dp {\n        dp[i] = make([]int, n)\n    }\n    next := make([]int, n)\n    for i := range next {\n        next[i] = -1\n    }\n    maxLen, lastIndex := 0, -1\n\n    hammingDistance := func(a, b string) int {\n        diffs := 0\n        for i := range a {\n            if a[i] != b[i] {\n                diffs++\n            }\n        }\n        return diffs\n    }\n\n    for i := n - 1; i >= 0; i-- {\n        dp[i][i] = 1\n        for j := i + 1; j < n; j++ {\n            if groups[i] != groups[j] && len(words[i]) == len(words[j]) && hammingDistance(words[i], words[j]) == 1 {\n                if dp[i][i] < dp[j][j]+1 {\n                    dp[i][i] = dp[j][j] + 1\n                    next[i] = j\n                }\n            }\n            if dp[i][i] > maxLen {\n                maxLen = dp[i][i]\n                lastIndex = i\n            }\n        }\n    }\n\n    result := make([]string, 0)\n    for lastIndex != -1 {\n        result = append(result, words[lastIndex])\n        lastIndex = next[lastIndex]\n    }\n\n    return result\n}"
}