{
    "status_code": 14,
    "lang": "java",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 44028000,
    "question_id": "3142",
    "elapsed_time": 4010,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1707536122394,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171090746",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n    public List<String> getWordsInLongestSubsequence(int n, String[] words, int[] groups) {\n        List<Integer>[] adj = new List[n];\n        for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (words[i].length() == words[j].length() && hammingDistance(words[i], words[j]) == 1 && groups[i] != groups[j]) {\n                    adj[i].add(j);\n                    adj[j].add(i);\n                }\n            }\n        }\n        \n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        int[] parent = new int[n];\n        Arrays.fill(parent, -1);\n        \n        int maxLength = 0, endIndex = -1;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == -1) {\n                dfs(i, adj, dp, parent);\n                if (dp[i] > maxLength) {\n                    maxLength = dp[i];\n                    endIndex = i;\n                }\n            }\n        }\n        \n        List<String> result = new ArrayList<>();\n        while (endIndex != -1) {\n            result.add(0, words[endIndex]);\n            endIndex = parent[endIndex];\n        }\n        \n        return result;\n    }\n    \n    private void dfs(int u, List<Integer>[] adj, int[] dp, int[] parent) {\n        if (dp[u] != -1) return;\n        dp[u] = 1;\n        for (int v : adj[u]) {\n            dfs(v, adj, dp, parent);\n            if (dp[v] + 1 > dp[u]) {\n                dp[u] = dp[v] + 1;\n                parent[u] = v;\n            }\n        }\n    }\n    \n    private int hammingDistance(String word1, String word2) {\n        int distance = 0;\n        for (int i = 0; i < word1.length(); i++) {\n            if (word1.charAt(i) != word2.charAt(i)) distance++;\n        }\n        return distance;\n    }\n}"
}