{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44760000,
    "question_id": "3142",
    "elapsed_time": 4010,
    "compare_result": "100000000000000000000000001001000000000100000000100110010010110001101001100100000011010010000010010011110010001011101101000000100110100001101001000010010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[\"a\",\"b\"]",
    "std_output": "",
    "last_testcase": "4\n[\"a\",\"b\",\"c\",\"d\"]\n[1,2,3,4]",
    "expected_output": "[\"a\",\"b\",\"c\",\"d\"]",
    "task_finish_time": 1707536089350,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171090511",
    "input_formatted": "4, [\"a\",\"b\",\"c\",\"d\"], [1,2,3,4]",
    "input": "4\n[\"a\",\"b\",\"c\",\"d\"]\n[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n    public List<String> getWordsInLongestSubsequence(int n, String[] words, int[] groups) {\n        int[][] dp = new int[n][n];\n        int[] prev = new int[n];\n        Arrays.fill(prev, -1);\n        int maxLength = 0, lastIndex = -1;\n\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (groups[i] != groups[j] && words[i].length() == words[j].length() && hammingDistance(words[i], words[j]) == 1) {\n                    dp[j][i] = dp[i][j] = 2;\n                    if (2 > maxLength) {\n                        maxLength = 2;\n                        lastIndex = i;\n                        prev[i] = j;\n                    }\n                }\n            }\n        }\n\n        for (int len = 3; len <= n; len++) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < i; j++) {\n                    if (dp[j][i] == len - 1) {\n                        for (int k = 0; k < n; k++) {\n                            if (dp[i][k] == 2 && dp[j][k] == 0 && groups[j] != groups[k]) {\n                                dp[j][k] = len;\n                                if (len > maxLength) {\n                                    maxLength = len;\n                                    lastIndex = k;\n                                    prev[k] = i;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        List<String> result = new ArrayList<>();\n        while (lastIndex != -1) {\n            result.add(0, words[lastIndex]);\n            lastIndex = prev[lastIndex];\n        }\n\n        return result;\n    }\n\n    private int hammingDistance(String a, String b) {\n        int distance = 0;\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) != b.charAt(i)) distance++;\n        }\n        return distance;\n    }\n}"
}