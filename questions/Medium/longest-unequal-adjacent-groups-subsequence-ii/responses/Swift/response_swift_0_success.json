{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "2410 ms",
    "memory": 15908000,
    "question_id": "3142",
    "elapsed_time": 2512,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707536520985,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 441,
    "total_testcases": 441,
    "runtime_percentile": 100,
    "status_memory": "15.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Swift",
    "submission_id": "1171093473",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func getWordsInLongestSubsequence(_ n: Int, _ words: [String], _ groups: [Int]) -> [String] {\n        var dp = Array(repeating: (count: 0, last: -1), count: n)\n        var maxLen = 0, lastIndex = -1\n\n        func hammingDistance(_ a: String, _ b: String) -> Int {\n            let aChars = Array(a), bChars = Array(b)\n            return zip(aChars, bChars).filter { $0 != $1 }.count\n        }\n\n        for i in 0..<n {\n            dp[i] = (1, -1) // Base case: each word alone forms a valid subsequence\n            for j in 0..<i {\n                if groups[i] != groups[j] && words[i].count == words[j].count && hammingDistance(words[i], words[j]) == 1 {\n                    if dp[j].count + 1 > dp[i].count {\n                        dp[i] = (dp[j].count + 1, j)\n                    }\n                }\n            }\n            if dp[i].count > maxLen {\n                maxLen = dp[i].count\n                lastIndex = i\n            }\n        }\n\n        var result = [String]()\n        while lastIndex != -1 {\n            result.insert(words[lastIndex], at: 0)\n            lastIndex = dp[lastIndex].last\n        }\n\n        return result\n    }\n}"
}