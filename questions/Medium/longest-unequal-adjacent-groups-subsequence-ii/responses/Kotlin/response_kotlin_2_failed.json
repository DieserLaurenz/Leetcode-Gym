{
    "status_code": 12,
    "lang": "kotlin",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 171960000,
    "question_id": "3142",
    "elapsed_time": 508,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n[\"bab\",\"dab\",\"cab\"]\n[1,2,2]",
    "expected_output": "[\"bab\",\"cab\"]",
    "task_finish_time": 1707536649011,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1171094340",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun getWordsInLongestSubsequence(n: Int, words: Array<String>, groups: IntArray): List<String> {\n        val edges = mutableListOf<Triple<Int, Int, Int>>() // (weight, from, to)\n        val wordIndices = words.indices.groupBy { words[it].length }\n        wordIndices.forEach { (_, indices) ->\n            for (i in indices) {\n                for (j in indices) {\n                    if (i < j && groups[i] != groups[j] && hammingDistance(words[i], words[j]) == 1) {\n                        edges.add(Triple(1, i, j))\n                        edges.add(Triple(1, j, i))\n                    }\n                }\n            }\n        }\n\n        val (dist, prev) = bellmanFord(edges, n, 0)\n\n        var longest = dist.withIndex().maxByOrNull { it.value }?.index ?: return emptyList()\n        val path = mutableListOf<Int>()\n        while (longest != -1) {\n            path.add(longest)\n            longest = prev[longest]\n        }\n\n        return path.asReversed().map { words[it] }\n    }\n\n    private fun bellmanFord(edges: List<Triple<Int, Int, Int>>, n: Int, start: Int): Pair<IntArray, IntArray> {\n        val dist = IntArray(n) { -1 }\n        val prev = IntArray(n) { -1 }\n        dist[start] = 0\n\n        for (i in 1 until n) {\n            var update = false\n            for ((weight, u, v) in edges) {\n                if (dist[u] != -1 && (dist[v] < dist[u] + weight)) {\n                    dist[v] = dist[u] + weight\n                    prev[v] = u\n                    update = true\n                }\n            }\n            if (!update) break\n        }\n\n        return dist to prev\n    }\n\n    private fun hammingDistance(s1: String, s2: String): Int = s1.indices.count { s1[it] != s2[it] }\n}"
}