{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66244000,
    "question_id": "3142",
    "elapsed_time": 2448,
    "compare_result": "110000000000000000000000001001000000000100000000100110010011110001101001100100100011110110101011011011110110101111101101011111110110110111101111000010111011110101111101111011111110111101101111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000010100000000000000000000000000111111",
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "1\n[\"abbbb\"]\n[1]",
    "expected_output": "[\"abbbb\"]",
    "task_finish_time": 1707537041145,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 317,
    "total_testcases": 441,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1171097055",
    "input_formatted": "1, [\"abbbb\"], [1]",
    "input": "1\n[\"abbbb\"]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def getWordsInLongestSubsequence(n: Int, words: Array[String], groups: Array[Int]): List[String] = {\n        def hammingDistance(s1: String, s2: String): Int = s1.zip(s2).count { case (c1, c2) => c1 != c2 }\n\n        // DP table to store the longest path ending at each node\n        val dp = Array.fill(n)(List[Int]())\n        // Precompute which nodes are connected\n        val connections = Array.fill(n)(List[Int]())\n        for {\n            i <- 0 until n\n            j <- 0 until n\n            if words(i).length == words(j).length && hammingDistance(words(i), words(j)) == 1 && groups(i) != groups(j)\n        } connections(i) = j :: connections(i)\n\n        for (i <- 0 until n) {\n            for (j <- connections(i)) {\n                if (dp(i).length + 1 > dp(j).length) {\n                    dp(j) = i :: dp(i)\n                }\n            }\n        }\n\n        val longest = dp.maxBy(_.length)\n        longest.map(words(_)).reverse\n    }\n}"
}