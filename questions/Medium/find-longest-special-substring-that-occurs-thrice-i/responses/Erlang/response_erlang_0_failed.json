{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59440000,
    "question_id": "3267",
    "elapsed_time": 1464,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707275265535,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1168377161",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_length(S :: unicode:unicode_binary()) -> integer().\nmaximum_length(S) ->\n  MaxLen = byte_size(S),\n  lists:foldl(fun(Length, Acc) ->\n                case lists:foldl(fun(Char, {PrevChar, Count, MaxCount}) ->\n                                   if\n                                     Char =:= PrevChar -> {Char, Count + 1, max(Count + 1, MaxCount)};\n                                     true -> {Char, 1, MaxCount}\n                                   end\n                                 end, {0, 0, 0}, binary_to_list(S)) of\n                  {_, _, MaxCount} when MaxCount >= 3 -> max(Acc, Length);\n                  _ -> Acc\n                end\n              end, -1, lists:seq(1, MaxLen))."
}