{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 10: exception error: function_clause",
    "full_runtime_error": "Line 10: exception error: function_clause\n[{solution,'-find_max/3-fun-1-',[4],[{file,\"solution.erl\"},{line,10}]},\n {lists,any,2,[{file,\"lists.erl\"},{line,1535}]},\n {solution,find_max,3,[{file,\"solution.erl\"},{line,10}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,43}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,31}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,60}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59320000,
    "question_id": "3267",
    "elapsed_time": 1469,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707275343378,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1168377952",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_length(S :: unicode:unicode_binary()) -> integer().\nmaximum_length(S) ->\n    find_max(S, -1, 1).\n\nfind_max(S, Max, Len) when Len =< byte_size(S) div 3 ->\n    Occurrences = [begin\n                       Sub = binary:part(S, Index, Len),\n                       Count = count_occurrences(S, Sub, 0, 0)\n                   end || Index <- lists:seq(0, byte_size(S) - Len)],\n    NewMax = case lists:any(fun({_, Count}) -> Count >= 3 end, Occurrences) of\n                 true -> Len;\n                 false -> Max\n             end,\n    find_max(S, NewMax, Len + 1);\nfind_max(_S, Max, _Len) ->\n    case Max of\n        -1 -> -1;\n        _ -> Max\n    end.\n\ncount_occurrences(S, Sub, Index, Count) when Index + byte_size(Sub) =< byte_size(S) ->\n    case binary:part(S, Index, byte_size(Sub)) of\n        Sub -> count_occurrences(S, Sub, Index + 1, Count + 1);\n        _ -> count_occurrences(S, Sub, Index + 1, Count)\n    end;\ncount_occurrences(_S, _Sub, _Index, Count) ->\n    Count."
}