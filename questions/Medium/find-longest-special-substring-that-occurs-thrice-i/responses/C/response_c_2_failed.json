{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5416000,
    "question_id": "3267",
    "elapsed_time": 22,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707273744750,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 40,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1168362229",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximumLength(char* s) {\n    int maxLen = -1;\n    for (char ch = 'a'; ch <= 'z'; ++ch) { // Iterate through all lowercase letters\n        int count = 0, curLen = 0;\n        for (int i = 0; s[i]; ++i) {\n            if (s[i] == ch) {\n                curLen++; // Increase current length if the current char matches ch\n                if (curLen >= 3 && count < 2) {\n                    count = 2; // Ensure count is at least 2 if curLen >= 3\n                }\n            } else {\n                if (curLen >= 3) count++; // Increment count if a segment of ch ends\n                if (count >= 3) maxLen = maxLen < curLen ? curLen : maxLen;\n                curLen = 0; // Reset current length for the next segment\n            }\n        }\n        if (curLen >= 3) count++; // Check after loop ends for the last segment\n        if (count >= 3) maxLen = maxLen < curLen ? curLen : maxLen;\n    }\n    return maxLen;\n}"
}