{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5244000,
    "question_id": "3267",
    "elapsed_time": 17,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707273678911,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 18,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1168361559",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximumLength(char* s) {\n    int maxLen = -1;\n    for (int i = 0; s[i]; ++i) {\n        for (int len = 1; s[i + len - 1]; ++len) {\n            int count = 0;\n            for (int j = i; s[j]; ++j) {\n                if (s[j] == s[i] && strncmp(s + i, s + j, len) == 0) {\n                    ++count;\n                    j += len - 1; // Skip over this substring\n                }\n                if (count == 3) {\n                    maxLen = maxLen < len ? len : maxLen;\n                    break;\n                }\n            }\n            if (count < 3) break; // If less than 3 occurrences, no longer substring will match 3 times\n        }\n    }\n    return maxLen - 1; // Adjust for the extra increment\n}"
}