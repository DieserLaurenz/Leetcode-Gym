{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126120000,
    "question_id": "3267",
    "elapsed_time": 333,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707275165378,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 208,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1168376148",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-length s)\n  (-> string? exact-integer?)\n  (let loop ((i 1) (max-len -1))\n    (if (> i (string-length s)) max-len\n        (let loop-inner ((j 0) (count 0) (len 0))\n          (cond\n           ((>= j (- (string-length s) i))\n            (if (>= count 3)\n                (loop (+ i 1) (max max-len len))\n                (loop (+ i 1) max-len)))\n           ((equal? (substring s j (+ j i)) (make-string i (string-ref s j)))\n            (loop-inner (+ j i) (+ count 1) i))\n           (else (loop-inner (+ j 1) count len)))))\n    ))"
}