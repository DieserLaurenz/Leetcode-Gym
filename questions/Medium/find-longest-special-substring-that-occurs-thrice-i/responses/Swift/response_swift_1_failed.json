{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16340000,
    "question_id": "3267",
    "elapsed_time": 40,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707274483965,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1168369457",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumLength(_ s: String) -> Int {\n        var maxLen = -1\n        let sArray = Array(s)\n        var count: [Character: [Int]] = [:]\n\n        for (i, char) in sArray.enumerated() {\n            if count[char] == nil {\n                count[char] = [i]\n            } else {\n                count[char]?.append(i)\n            }\n        }\n\n        for (_, indexes) in count where indexes.count >= 3 {\n            var localMax = 1\n            for i in 0..<(indexes.count - 2) {\n                for j in (i + 2)..<indexes.count {\n                    let length = indexes[j] - indexes[i] + 1\n                    if length > localMax {\n                        localMax = length\n                    }\n                }\n            }\n            maxLen = max(maxLen, localMax - 1)\n        }\n\n        return maxLen\n    }\n}"
}