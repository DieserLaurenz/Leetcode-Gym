{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11740000,
    "question_id": "3267",
    "elapsed_time": 43,
    "compare_result": "0110001111010000000000000000000000011000000001100000100000000000000000000000000000000000000000010000000000101001010010000000000000000000000000000000000000000000000000000001100001000100010000011000000000000000000001000000010001000000100000000000000000000000000000000010001000000000000000001000000000000001001000000000000000000000010000000000001000000000000000000000000000000000000000000100000000000000000010000000000000000000000001000100000000000000000000110100001100101011000000000011000100001011000100001000110000000010000001100000000000000000000001000100000000000000010000000000000000100000000100000010000000000000000011001000001110000000001000110010000000000000000000001001000000000000000001000000000000000000000000000010000000000000100010000000100000000000000000000100000000000000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1708766122925,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 86,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184681987",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumLength(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        max_len = -1\n        for char in set(s):\n            start = 0\n            while start < len(s):\n                # Find the start index of the next sequence of char\n                start = s.find(char, start)\n                if start == -1:\n                    break\n                end = start\n                # Extend the end index to the end of the sequence\n                while end < len(s) and s[end] == char:\n                    end += 1\n                # Check if this sequence occurs at least thrice\n                length = end - start\n                if s.count(char * length) >= 3:\n                    max_len = max(max_len, length)\n                start = end\n        return max_len"
}