{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34528000,
    "question_id": "3267",
    "elapsed_time": 345,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707274565311,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 40,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1168370328",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumLength(s: String): Int {\n        val counts = IntArray(26)\n        s.forEach { counts[it - 'a']++ }\n        \n        var maxLength = -1\n        for (i in counts.indices) {\n            if (counts[i] >= 3) {\n                val char = 'a' + i\n                var tempLength = 0\n                var maxTempLength = 0\n                s.forEach { c ->\n                    if (c == char) {\n                        tempLength++\n                        maxTempLength = maxOf(maxTempLength, tempLength)\n                    } else {\n                        tempLength = 0\n                    }\n                }\n                maxLength = maxOf(maxLength, maxTempLength)\n            }\n        }\n        return if (maxLength >= 3) maxLength else -1\n    }\n}"
}