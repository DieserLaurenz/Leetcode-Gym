{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71212000,
    "question_id": "3267",
    "elapsed_time": 2168,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707283796183,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 171,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168476022",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_length(s :: String.t) :: integer\n  def maximum_length(s) do\n    1..String.length(s)\n    |> Enum.reduce(-1, fn len, acc ->\n      for i <- 0..(String.length(s) - len) do\n        substring = String.slice(s, i, len)\n        if String.duplicate(substring, 1) == substring and String.length(substring) > 0 and String.contains?(s, String.duplicate(substring, 3)) do\n          len\n        else\n          acc\n        end\n      end\n      |> Enum.max()\n    end)\n  end\nend"
}