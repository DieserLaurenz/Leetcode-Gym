{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72328000,
    "question_id": "3267",
    "elapsed_time": 633,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707283826165,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168476442",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_length(s :: String.t) :: integer\n  def maximum_length(s) do\n    s\n    |> String.graphemes()\n    |> Enum.chunk_while([], fn x, acc ->\n      case acc do\n        [] -> {:cont, [x]}\n        [h | _] = acc when h == x -> {:cont, [x | acc]}\n        _acc -> {:cont, [x], [acc]}\n      end\n    end, fn acc -> {:cont, [acc]} end)\n    |> Enum.map(&Enum.reverse(&1))\n    |> Enum.filter(fn x -> Enum.count(x) >= 3 end)\n    |> Enum.map(&length(&1))\n    |> Enum.max(fn -> -1 end)\n  end\nend"
}