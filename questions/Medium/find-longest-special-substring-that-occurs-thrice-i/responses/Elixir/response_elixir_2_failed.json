{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 14: ** (MatchError) no match of right hand side value: ~c\"aa\"",
    "full_runtime_error": "Line 14: ** (MatchError) no match of right hand side value: ~c\"aa\"\n    solution.ex:14: Solution.valid_special_substring?/2\n    solution.ex:7: anonymous fn/4 in Solution.maximum_length/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:4: Solution.maximum_length/1\n    solution.ex:34: Driver.consume_test_cases/2\n    solution.ex:22: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72972000,
    "question_id": "3267",
    "elapsed_time": 329,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707283854544,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168476784",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_length(s :: String.t) :: integer\n  def maximum_length(s) do\n    max_length = Enum.reduce(0..String.length(s)-1, -1, fn start, acc ->\n      Enum.reduce(start..String.length(s)-1, acc, fn finish, acc_inner ->\n        substring = String.slice(s, start, finish - start + 1)\n        if valid_special_substring?(substring, s), do: max(acc_inner, String.length(substring)), else: acc_inner\n      end)\n    end)\n    if max_length >= 3, do: max_length, else: -1\n  end\n\n  defp valid_special_substring?(substring, s) do\n    [char] = String.to_charlist(substring)\n    regex = ~r/#{char}{#{String.length(substring)}}/\n    Regex.scan(regex, s) |> length() >= 3\n  end\nend"
}