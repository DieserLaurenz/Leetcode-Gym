{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 48432000,
    "question_id": "3267",
    "elapsed_time": 191,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707273863467,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 171,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1168363349",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaximumLength(string s) {\n        int maxLen = -1;\n        for (int i = 0; i < s.Length; i++) {\n            for (int j = i + 1; j < s.Length; j++) {\n                if (s[i] != s[j]) continue;\n                int len = j - i;\n                if (j + len < s.Length && s.Substring(i, len) == s.Substring(j, len) && \n                    j + 2 * len <= s.Length && s.Substring(i, len) == s.Substring(j + len, len)) {\n                    maxLen = Math.Max(maxLen, len);\n                }\n            }\n        }\n        return maxLen;\n    }\n}"
}