{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8004000,
    "question_id": "3267",
    "elapsed_time": 15,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707264347822,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1168282588",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maximumLength(string s) {\n        int maxLen = -1;\n        for (char c = 'a'; c <= 'z'; ++c) {\n            int count = 0;\n            int currentMax = 0;\n            for (int i = 0; i < s.size(); ++i) {\n                if (s[i] == c) {\n                    ++count;\n                    int len = 0;\n                    while (i < s.size() && s[i] == c) {\n                        ++len;\n                        ++i;\n                    }\n                    currentMax = max(currentMax, len);\n                    --i; // Adjust for the increment in the for-loop.\n                }\n            }\n            if (count >= 3) maxLen = max(maxLen, currentMax);\n        }\n        return maxLen;\n    }\n};"
}