{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52348000,
    "question_id": "3267",
    "elapsed_time": 97,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707274075784,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 40,
    "total_testcases": 811,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1168365351",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumLength(s: string): number {\n    let maxLen = -1;\n    for (let char of new Set(s.split(''))) {\n        const regex = new RegExp(`${char}{3,}`, 'g');\n        let match;\n        while ((match = regex.exec(s)) !== null) {\n            for (let len = match[0].length; len >= 3; len--) {\n                if (s.indexOf(char.repeat(len)) !== -1) {\n                    maxLen = Math.max(maxLen, len);\n                    break; // Found the longest for this character, no need to check shorter lengths\n                }\n            }\n        }\n    }\n    return maxLen;\n};"
}