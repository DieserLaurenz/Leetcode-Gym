{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "130 ms",
    "memory": 13996000,
    "question_id": "2845",
    "elapsed_time": 149,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707366538279,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 806,
    "total_testcases": 806,
    "runtime_percentile": 100,
    "status_memory": "14 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "C",
    "submission_id": "1169384937",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int compare(const void * a, const void * b) {\n    return (*(int*)a - *(int*)b);\n}\n\nint findValueOfPartition(int* nums, int numsSize) {\n    int minValue = __INT_MAX__;\n    // Efficient sorting using Quick Sort from stdlib.h\n    qsort(nums, numsSize, sizeof(int), compare);\n    // Efficiently find the minimum value of partition\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] - nums[i - 1] < minValue) {\n            minValue = nums[i] - nums[i - 1];\n        }\n    }\n    return minValue;\n}"
}