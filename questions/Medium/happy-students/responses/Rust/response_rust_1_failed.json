{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3340000,
    "question_id": "3104",
    "elapsed_time": 28,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707386219353,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1169604686",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_ways(nums: Vec<i32>) -> i32 {\n        let mut sorted = nums.clone();\n        sorted.sort_unstable();\n        let mut left = 0;\n        let mut right = nums.len();\n        let mut res = 0;\n        while left <= right {\n            let mid = left + (right - left) / 2;\n            let mut happy = true;\n            for &num in &sorted {\n                if num < mid as i32 && nums.len() - mid < num as usize {\n                    happy = false;\n                    break;\n                } else if num >= mid as i32 && mid <= num as usize {\n                    happy = false;\n                    break;\n                }\n            }\n            if happy {\n                res = mid as i32 + 1;\n                left = mid + 1;\n            } else {\n                if mid == 0 {\n                    break;\n                }\n                right = mid - 1;\n            }\n        }\n        res\n    }\n}"
}