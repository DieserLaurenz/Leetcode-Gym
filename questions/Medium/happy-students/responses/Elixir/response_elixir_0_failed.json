{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 140560000,
    "question_id": "3104",
    "elapsed_time": 821,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707386544092,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 202,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1169607942",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_ways(nums :: [integer]) :: integer\n  def count_ways(nums) do\n    min = Enum.min(nums)\n    max = Enum.max(nums)\n    count_min = Enum.count(nums, &(&1 == min))\n    count_max = Enum.count(nums, &(&1 == max))\n\n    if min == max, do: 1, else: Enum.reduce(nums, 0, fn x, acc -> if x == min or x == max, do: acc + 1, else: acc end) |> Kernel.-(count_max) |> max(1)\n  end\nend"
}