{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79992000,
    "question_id": "3104",
    "elapsed_time": 6035,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[6,0,3,3,6,7,2,7]",
    "expected_output": "3",
    "task_finish_time": 1707386571493,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 200,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1169608159",
    "input_formatted": "[6,0,3,3,6,7,2,7]",
    "input": "[6,0,3,3,6,7,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_ways(nums :: [integer]) :: integer\n  def count_ways(nums) do\n    sorted = Enum.sort(nums)\n    len = length(nums)\n\n    Enum.reduce(0..len, 0, fn i, acc ->\n      less = Enum.count(sorted, &(&1 < i))\n      equal = Enum.count(sorted, &(&1 == i))\n\n      if less + equal >= i and len - less >= i, do: acc + 1, else: acc\n    end)\n  end\nend"
}