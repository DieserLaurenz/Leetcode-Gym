{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 139808000,
    "question_id": "3104",
    "elapsed_time": 947,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707386601247,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1169608517",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_ways(nums :: [integer]) :: integer\n  def count_ways(nums) do\n    max = Enum.max(nums)\n    counts = Enum.frequencies(nums)\n    selected = 0\n    not_selected = length(nums)\n\n    Enum.reduce(0..max, 0, fn i, acc ->\n      if counts[i] do\n        selected = selected + counts[i]\n        not_selected = not_selected - counts[i]\n      end\n\n      if selected > i and not_selected > length(nums) - i - 1, do: acc + 1, else: acc\n    end)\n  end\nend"
}