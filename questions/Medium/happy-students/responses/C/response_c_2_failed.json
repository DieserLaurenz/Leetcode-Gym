{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 14288000,
    "question_id": "3104",
    "elapsed_time": 89,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707376024156,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 104,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1169500491",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int countWays(int* nums, int numsSize) {\n    int maxSelected = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] < numsSize) maxSelected++;\n    }\n    \n    int *happy = (int *)calloc(numsSize + 1, sizeof(int));\n    for (int i = 0; i < numsSize; i++) {\n        happy[nums[i]]++;\n    }\n    \n    int totalWays = 0, selected = 0;\n    for (int i = 0; i <= maxSelected && selected <= numsSize; i++) {\n        if (selected >= numsSize - selected) totalWays++;\n        selected += happy[i];\n    }\n    \n    free(happy);\n    return totalWays;\n}"
}