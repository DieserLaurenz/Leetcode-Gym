{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126828000,
    "question_id": "3104",
    "elapsed_time": 5018,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707386377899,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1169606236",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (count-ways nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (helper max-idx)\n    (if (> max-idx (length nums))\n        0\n        (let ([count (count (lambda (x) (< x max-idx)) nums)])\n          (if (or (= count max-idx) (= count 0))\n              (+ 1 (helper (+ max-idx 1)))\n              (helper (+ max-idx 1))))))\n  \n  (+ 1 (helper 1)))"
}