{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126348000,
    "question_id": "3104",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707386310085,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 75,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1169605525",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (count-ways nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (let ([sorted-nums (sort nums <)])\n    (let loop ([i 0] [count 0] [ways 0])\n      (cond\n        [(= i (length nums)) (if (= count 0) (+ ways 1) ways)]\n        [else\n         (let ([cur (list-ref sorted-nums i)])\n           (if (and (> cur i) (or (= i 0) (not (= cur (list-ref sorted-nums (sub1 i))))))\n               (loop (+ i 1) count (+ ways 1))\n               (loop (+ i 1) (+ count 1) ways)))]))))"
}