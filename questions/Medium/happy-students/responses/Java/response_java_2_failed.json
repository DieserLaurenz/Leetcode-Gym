{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56324000,
    "display_runtime": "32",
    "question_id": "3104",
    "elapsed_time": 319,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707375926640,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 61,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1169499302",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int countWays(List<Integer> nums) {\n        long mod = 1000000007;\n        int max = 0;\n        for (int num : nums) {\n            max = Math.max(max, num);\n        }\n        int[] count = new int[max + 1];\n        for (int num : nums) {\n            count[num]++;\n        }\n        long result = 1;\n        for (int i = 0; i <= max; i++) {\n            if (count[i] == 0) continue;\n            long ways = 0;\n            long comb = 1;\n            for (int j = 0; j <= count[i]; j++) {\n                if (i >= j) {\n                    ways = (ways + comb) % mod;\n                }\n                comb = comb * (count[i] - j) % mod * modInverse(j + 1, mod) % mod;\n            }\n            result = result * ways % mod;\n        }\n        return (int) result;\n    }\n\n    private long modInverse(long a, long mod) {\n        long m0 = mod;\n        long y = 0, x = 1;\n        if (mod == 1) return 0;\n        while (a > 1) {\n            long q = a / mod;\n            long t = mod;\n            mod = a % mod;\n            a = t;\n            t = y;\n            y = x - q * y;\n            x = t;\n        }\n        if (x < 0) x += m0;\n        return x;\n    }\n}"
}