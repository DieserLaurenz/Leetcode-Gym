{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8532000,
    "question_id": "3104",
    "elapsed_time": 84,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707385907361,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 198,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1169601424",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countWays(nums []int) int {\n    maxNum := 0\n    for _, num := range nums {\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    \n    count := make([]int, len(nums)+1)\n    for _, num := range nums {\n        count[num]++\n    }\n    \n    total := 0\n    for i, c := range count {\n        if total < i && len(nums)-total < i {\n            return 0\n        }\n        if total >= i && total <= len(nums)-c {\n            if total == i || total == len(nums)-c {\n                return 1\n            }\n        }\n        total += c\n    }\n    \n    return 2\n}"
}