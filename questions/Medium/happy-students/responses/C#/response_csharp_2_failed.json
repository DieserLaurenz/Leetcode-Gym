{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65844000,
    "question_id": "3104",
    "elapsed_time": 316,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "2",
    "task_finish_time": 1707376122466,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1169501666",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int CountWays(IList<int> nums) {\n        int max = nums.Max();\n        long[] prefixSum = new long[max + 2];\n        foreach (var num in nums) {\n            prefixSum[num]++;\n        }\n        for (int i = 1; i < prefixSum.Length; i++) {\n            prefixSum[i] += prefixSum[i - 1];\n        }\n        long ways = 0;\n        for (int i = 0; i <= max; i++) {\n            if (prefixSum[i] == i && (i == 0 || prefixSum[i - 1] == prefixSum[i])) {\n                ways++;\n            }\n        }\n        return (int)ways;\n    }\n}"
}