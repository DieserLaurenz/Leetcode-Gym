{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 75500000,
    "question_id": "3104",
    "elapsed_time": 126,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[6,0,3,3,6,7,2,7]",
    "expected_output": "3",
    "task_finish_time": 1707375759204,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 84,
    "total_testcases": 727,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1169497209",
    "input_formatted": "[6,0,3,3,6,7,2,7]",
    "input": "[6,0,3,3,6,7,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int countWays(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int totalWays = 1; // At least one way (selecting none)\n        int distinctWays = 1; // Counting the current distinct way\n        int n = nums.size();\n        \n        for (int i = 0; i < n; ++i) {\n            // If the current number is less than the number of elements to its right,\n            // it means selecting i+1 students will make this and all previous students happy.\n            if (nums[i] < i + 1) {\n                distinctWays = 0;\n            }\n            distinctWays++;\n            if (i + 1 == n || nums[i] != nums[i + 1]) {\n                totalWays += distinctWays; // Add distinct ways for this segment\n                distinctWays = 1; // Reset for next segment\n            }\n        }\n        return totalWays;\n    }\n};"
}