{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 22628000,
    "question_id": "3228",
    "elapsed_time": 533,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1708797693491,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185043128",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import Counter\n\nclass Solution:\n    def maximumSetSize(self, nums1: List[int], nums2: List[int]) -> int:\n        freq = Counter(nums1 + nums2)\n        n = len(nums1)\n        removals = n // 2\n        frequencies = sorted(freq.values(), reverse=True)\n        elements_to_remove = 0\n        for frequency in frequencies:\n            if removals <= 0:\n                break\n            if frequency > 1:\n                to_remove = min(removals, frequency // 2)\n                removals -= to_remove\n                frequency -= to_remove * 2\n            elements_to_remove += 1 if frequency > 0 else 0\n        return elements_to_remove"
}