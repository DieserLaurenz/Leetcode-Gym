{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25912000,
    "question_id": "3228",
    "elapsed_time": 695,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1708797636324,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 172,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185042261",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import Counter\n\nclass Solution:\n    def maximumSetSize(self, nums1: List[int], nums2: List[int]) -> int:\n        count1 = Counter(nums1)\n        count2 = Counter(nums2)\n        n = len(nums1)\n        remove_count = n // 2\n\n        # Merge and sort counts by frequency\n        merged_counts = (count1 + count2).most_common()\n        removed = 0\n        for _, count in merged_counts:\n            # Calculate how many times we can remove this number\n            times = min(remove_count - removed, count // 2)\n            removed += times\n            if removed == remove_count:\n                break\n\n        # Calculate the size of the set after removals\n        size_after_removals = sum((count - 2*min(remove_count, count // 2)) > 0 for _, count in merged_counts)\n        return size_after_removals"
}