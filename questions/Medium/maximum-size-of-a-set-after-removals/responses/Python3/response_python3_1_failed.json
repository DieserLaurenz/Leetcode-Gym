{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 22516000,
    "question_id": "3228",
    "elapsed_time": 568,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1708797660735,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 291,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185042639",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maximumSetSize(self, nums1: List[int], nums2: List[int]) -> int:\n        nums = nums1 + nums2\n        half_n = len(nums) // 4\n        nums_count = {}\n        for num in nums:\n            if num in nums_count:\n                nums_count[num] += 1\n            else:\n                nums_count[num] = 1\n        freqs = sorted(nums_count.values(), reverse=True)\n        removed, idx = 0, 0\n        while removed < half_n and idx < len(freqs):\n            removed += freqs[idx] // 2\n            idx += 1\n        return len(nums_count) - max(0, (removed - half_n))"
}