{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18588000,
    "question_id": "3228",
    "elapsed_time": 349,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638109535,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 298,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1172119684",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumSetSize(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        let n = nums1.count\n        var countMap = [Int: Int]()\n        for i in 0..<n {\n            countMap[nums1[i], default: 0] += 1\n            countMap[nums2[i], default: 0] += 1\n        }\n        let counts = countMap.values.sorted(by: >)\n        var elementsRemoved = 0, uniqueElements = 0\n        for count in counts {\n            if elementsRemoved + count > n {\n                uniqueElements += 1\n            } else {\n                elementsRemoved += count\n            }\n        }\n        return uniqueElements\n    }\n}"
}