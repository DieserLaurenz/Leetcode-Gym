{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79472000,
    "question_id": "3228",
    "elapsed_time": 342,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707629100063,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 102,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1172023641",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maximumSetSize = function(nums1, nums2) {\n    const countMap = {};\n    nums1.forEach(num => countMap[num] = (countMap[num] || 0) + 1);\n    nums2.forEach(num => countMap[num] = (countMap[num] || 0) + 1);\n\n    const counts = Object.values(countMap).sort((a, b) => b - a);\n    let removed = 0, i = 0, n = nums1.length;\n    \n    while (removed < n / 2 && i < counts.length) {\n        removed += Math.min(counts[i], n / 2 - removed) > 0 ? 1 : 0;\n        i++;\n    }\n\n    return Object.keys(countMap).length - removed;\n};"
}