{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79056000,
    "question_id": "3228",
    "elapsed_time": 228,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707629078088,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1172023388",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maximumSetSize = function(nums1, nums2) {\n    const combined = nums1.concat(nums2);\n    const frequency = {};\n    for (const num of combined) {\n        frequency[num] = (frequency[num] || 0) + 1;\n    }\n    const frequencies = Object.values(frequency).sort((a, b) => a - b);\n    let removals = nums1.length / 2;\n    let size = frequencies.length;\n    for (let i = 0; i < frequencies.length && removals > 0; i++) {\n        if (frequencies[i] <= removals * 2) {\n            removals -= frequencies[i] / 2;\n            size--;\n        } else {\n            break;\n        }\n    }\n    return size;\n};"
}