{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 77784000,
    "question_id": "3228",
    "elapsed_time": 434,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707629121788,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 299,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1172023884",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar maximumSetSize = function(nums1, nums2) {\n    const map = {};\n    for (const num of nums1) map[num] = (map[num] || 0) + 1;\n    for (const num of nums2) map[num] = (map[num] || 0) + 1;\n\n    const counts = Object.values(map).sort((a, b) => b - a);\n    let result = 0, removed = 0, half = nums1.length / 2;\n    \n    for (const count of counts) {\n        if (removed < half) {\n            removed += count / 2;\n        } else {\n            result++;\n        }\n    }\n    \n    return result;\n};"
}