{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8144000,
    "question_id": "3228",
    "elapsed_time": 312,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "expected_output": "5",
    "task_finish_time": 1707628864223,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 952,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1172021258",
    "input_formatted": "[1,2,3,4,5,6], [2,3,2,3,2,3]",
    "input": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximumSetSize(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    int map[200001] = {0}; // Using a map to count occurrences, considering the constraints\n    for (int i = 0; i < nums1Size; ++i) {\n        map[nums1[i]]++; // Increment for nums1\n    }\n    for (int i = 0; i < nums2Size; ++i) {\n        map[nums2[i]]++; // Increment for nums2\n    }\n\n    int removals = nums1Size / 2; // Total removals required\n    int setSize = 0; // To keep track of the set size\n\n    // Sorting the map indices based on frequency in descending order could be done, but since the problem does not require specific element removals to achieve the max set size,\n    // We just need to count how many unique numbers we have after removing n/2 elements from both arrays.\n    // Count unique numbers\n    for (int i = 0; i < 200001; ++i) {\n        if (map[i] > 0) {\n            setSize++; // Increment set size for each unique number\n        }\n    }\n\n    // Calculate the maximum possible size of set s\n    int maxSetSize = nums1Size - removals + nums2Size - removals; // Total elements left after removals\n    if (setSize > maxSetSize) {\n        return maxSetSize; // The maximum size of the set cannot exceed the total elements left after removals\n    } else {\n        return setSize; // If there are fewer unique elements than the total elements left, then all unique elements can be in the set\n    }\n}"
}