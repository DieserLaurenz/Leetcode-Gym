{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12108000,
    "question_id": "3228",
    "elapsed_time": 191,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707628835085,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 775,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1172020989",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint cmp(const void *a, const void *b) {\n    return (*(int*)a - *(int*)b);\n}\n\nint maximumSetSize(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    qsort(nums1, nums1Size, sizeof(int), cmp);\n    qsort(nums2, nums2Size, sizeof(int), cmp);\n    \n    int totalUnique = 0;\n    int i = 0, j = 0;\n    while (i < nums1Size && j < nums2Size) {\n        if (nums1[i] < nums2[j]) {\n            totalUnique++;\n            i++;\n        } else if (nums1[i] > nums2[j]) {\n            totalUnique++;\n            j++;\n        } else {\n            totalUnique++;\n            while (i < nums1Size && nums1[i] == nums2[j]) i++;\n            while (j < nums2Size && nums2[j] == nums1[i - 1]) j++;\n        }\n    }\n    \n    while (i < nums1Size) {\n        totalUnique++;\n        i++;\n    }\n    \n    while (j < nums2Size) {\n        totalUnique++;\n        j++;\n    }\n    \n    int toRemove = (nums1Size / 2) + (nums2Size / 2);\n    int maxPossible = nums1Size + nums2Size - toRemove;\n    return totalUnique > maxPossible ? maxPossible : totalUnique;\n}"
}