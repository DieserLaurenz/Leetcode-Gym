{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 239396000,
    "question_id": "3228",
    "elapsed_time": 258,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638565727,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1172124159",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef maximum_set_size(nums1, nums2)\n    # Combine both arrays and count the occurrence of each number\n    counts = Hash.new(0)\n    (nums1 + nums2).each { |num| counts[num] += 1 }\n    # Sort counts by the frequency of each number in descending order\n    sorted_counts = counts.values.sort.reverse\n    n = nums1.length\n    # Calculate the number of elements to remove from each array\n    remove_count = n / 2\n    removed = 0\n    unique_numbers = 0\n    # Iterate through sorted counts to find the maximum set size\n    sorted_counts.each do |count|\n        # If we have removed enough elements, break\n        break if removed >= remove_count\n        # Calculate how many times we can remove this number from one of the arrays\n        times = [count / 2, remove_count - removed].min\n        # Update the count of removed elements\n        removed += times\n        # Update the count of unique numbers\n        unique_numbers += 1\n    end\n    # The maximum possible size of the set is the number of unique numbers\n    unique_numbers\nend"
}