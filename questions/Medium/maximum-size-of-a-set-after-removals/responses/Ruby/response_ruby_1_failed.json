{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 239332000,
    "question_id": "3228",
    "elapsed_time": 292,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638535590,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 95,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1172123887",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef maximum_set_size(nums1, nums2)\n    combined = (nums1 + nums2).tally\n    half_n = nums1.length / 2\n    unique_count = combined.length\n    removals_needed = combined.values.sum - unique_count\n\n    if removals_needed <= half_n * 2\n        unique_count\n    else\n        over = removals_needed - half_n * 2\n        unique_count - (over + 1) / 2\n    end\nend"
}