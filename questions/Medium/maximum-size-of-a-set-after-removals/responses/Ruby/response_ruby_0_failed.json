{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 242088000,
    "question_id": "3228",
    "elapsed_time": 301,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638515148,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 725,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1172123693",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef maximum_set_size(nums1, nums2)\n    n = nums1.size\n    combined = nums1 + nums2\n    freq = combined.tally\n    freq = freq.values.sort.reverse\n    to_remove = n / 2\n    removed = 0\n    freq.each do |f|\n        break if to_remove <= 0\n        if f > 1\n            remove = [f / 2, to_remove].min\n            to_remove -= remove\n            removed += remove * 2\n        end\n    end\n    [combined.size - removed, n].min\nend"
}