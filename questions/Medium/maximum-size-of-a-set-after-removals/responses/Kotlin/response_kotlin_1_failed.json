{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72548000,
    "question_id": "3228",
    "elapsed_time": 1198,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "expected_output": "6",
    "task_finish_time": 1707638228085,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 373,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1172120822",
    "input_formatted": "[1,1,2,2,3,3], [4,4,5,5,6,6]",
    "input": "[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSetSize(nums1: IntArray, nums2: IntArray): Int {\n        val frequency = (nums1 + nums2).groupBy { it }.mapValues { it.value.size }\n        var totalRemoved = 0\n        var setSize = frequency.size\n        val removals = frequency.values.sortedDescending()\n\n        for (removal in removals) {\n            if (totalRemoved + removal > nums1.size) break\n            totalRemoved += removal\n            setSize--\n        }\n\n        return setSize\n    }\n}"
}