{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56108000,
    "question_id": "3228",
    "elapsed_time": 735,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638250950,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 92,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1172121046",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSetSize(nums1: IntArray, nums2: IntArray): Int {\n        val combined = (nums1.toList() + nums2.toList()).groupingBy { it }.eachCount()\n        val n = nums1.size\n        val halfN = n / 2\n        var removed = 0\n        var setSize = 0\n\n        val frequencies = combined.values.sortedByDescending { it }\n        for (frequency in frequencies) {\n            if (removed < halfN) {\n                val minRemoval = Math.min(frequency / 2, halfN - removed)\n                removed += minRemoval\n            } else {\n                setSize++\n            }\n        }\n\n        return setSize + (frequencies.size - removed)\n    }\n}"
}