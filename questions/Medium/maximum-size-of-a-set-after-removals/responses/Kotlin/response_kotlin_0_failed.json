{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58524000,
    "question_id": "3228",
    "elapsed_time": 646,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638203477,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 174,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1172120615",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSetSize(nums1: IntArray, nums2: IntArray): Int {\n        val n = nums1.size\n        val countMap = mutableMapOf<Int, Int>()\n\n        for (num in nums1 + nums2) {\n            countMap[num] = countMap.getOrDefault(num, 0) + 1\n        }\n\n        val countList = countMap.values.sortedDescending()\n        var elementsToRemove = n / 2\n        var i = 0\n\n        while (elementsToRemove > 0 && i < countList.size) {\n            elementsToRemove -= countList[i]\n            i++\n        }\n\n        return countMap.size - (if (elementsToRemove < 0) 1 else 0)\n    }\n}"
}