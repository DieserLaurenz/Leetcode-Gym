{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74116000,
    "question_id": "3228",
    "elapsed_time": 422,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "expected_output": "6",
    "task_finish_time": 1707628958813,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 206,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1172022190",
    "input_formatted": "[1,1,2,2,3,3], [4,4,5,5,6,6]",
    "input": "[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaximumSetSize(int[] nums1, int[] nums2) {\n        var combinedFreq = new Dictionary<int, int>();\n\n        foreach (var num in nums1) {\n            if (!combinedFreq.ContainsKey(num)) combinedFreq[num] = 0;\n            combinedFreq[num]++;\n        }\n\n        foreach (var num in nums2) {\n            if (!combinedFreq.ContainsKey(num)) combinedFreq[num] = 0;\n            combinedFreq[num]++;\n        }\n\n        var frequencies = combinedFreq.Values.ToList();\n        frequencies.Sort((a, b) => b.CompareTo(a));\n\n        int totalRemoved = 0, maxSize = 0;\n        foreach (var freq in frequencies) {\n            if (totalRemoved < nums1.Length / 2) {\n                int toRemove = Math.Min(freq / 2, nums1.Length / 2 - totalRemoved);\n                totalRemoved += toRemove;\n                maxSize += freq - 2 * toRemove > 0 ? 1 : 0;\n            } else {\n                maxSize++;\n            }\n        }\n\n        return maxSize;\n    }\n}"
}