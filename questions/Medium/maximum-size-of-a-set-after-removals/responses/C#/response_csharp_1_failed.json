{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73244000,
    "question_id": "3228",
    "elapsed_time": 428,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "expected_output": "5",
    "task_finish_time": 1707628938056,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 331,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1172022000",
    "input_formatted": "[1,2,3,4,5,6], [2,3,2,3,2,3]",
    "input": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaximumSetSize(int[] nums1, int[] nums2) {\n        Dictionary<int, int> freq = new Dictionary<int, int>();\n        for (int j = 0; j < nums1.Length; j++) {\n            if (!freq.ContainsKey(nums1[j])) freq[nums1[j]] = 0;\n            freq[nums1[j]]++;\n            if (!freq.ContainsKey(nums2[j])) freq[nums2[j]] = 0;\n            freq[nums2[j]]++;\n        }\n\n        List<int> values = new List<int>(freq.Values);\n        values.Sort((a, b) => b.CompareTo(a));\n\n        int n = nums1.Length / 2, setSize = 0, removed = 0;\n        while (n > 0 && removed < values.Count) {\n            int remove = Math.Min(values[removed++] / 2, n);\n            n -= remove;\n            setSize++;\n        }\n\n        return setSize + values.Count - removed;\n    }\n}"
}