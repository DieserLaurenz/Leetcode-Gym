{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8120000,
    "question_id": "3228",
    "elapsed_time": 121,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "expected_output": "6",
    "task_finish_time": 1707638465189,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 206,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1172123213",
    "input_formatted": "[1,1,2,2,3,3], [4,4,5,5,6,6]",
    "input": "[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumSetSize(nums1 []int, nums2 []int) int {\n    allNums := append(nums1, nums2...)\n    count := make(map[int]int)\n    for _, num := range allNums {\n        count[num]++\n    }\n    \n    counts := make([]int, 0, len(count))\n    for _, c := range count {\n        counts = append(counts, c)\n    }\n    \n    sort.Sort(sort.Reverse(sort.IntSlice(counts)))\n    \n    n := len(nums1)\n    toRemove := n / 2\n    removed := 0\n    setSize := 0\n    \n    for _, c := range counts {\n        if toRemove > 0 {\n            if c >= 2 && removed < toRemove {\n                diff := min(toRemove-removed, c/2)\n                removed += diff\n                c -= diff * 2\n            }\n        }\n        if c > 0 {\n            setSize++\n        }\n    }\n    \n    return setSize\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}