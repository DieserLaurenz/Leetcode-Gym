{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8296000,
    "question_id": "3228",
    "elapsed_time": 132,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638434545,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1172122877",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumSetSize(nums1 []int, nums2 []int) int {\n    combined := append(nums1, nums2...)\n    freqMap := make(map[int]int)\n    for _, num := range combined {\n        freqMap[num]++\n    }\n\n    freqs := make([]int, 0, len(freqMap))\n    for _, freq := range freqMap {\n        freqs = append(freqs, freq)\n    }\n\n    sort.Slice(freqs, func(i, j int) bool {\n        return freqs[i] > freqs[j]\n    })\n\n    n := len(nums1)\n    toRemove := n / 2\n    setSize := 0\n\n    for i := 0; i < len(freqs) && toRemove > 0; i++ {\n        if freqs[i] <= 2 {\n            setSize++\n            continue\n        }\n        remove := min(freqs[i]/2, toRemove)\n        toRemove -= remove\n        freqs[i] -= remove * 2\n        setSize++\n    }\n    return setSize + len(freqs) - len(freqMap) + toRemove\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}