{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 7: ** (UndefinedFunctionError) function Enum.values/1 is undefined or private",
    "full_runtime_error": "Line 7: ** (UndefinedFunctionError) function Enum.values/1 is undefined or private\n    (elixir 1.15.7) Enum.values(%{1 => 6, 2 => 2})\n    solution.ex:7: Solution.maximum_set_size/2\n    solution.ex:30: Driver.consume_test_cases/2\n    solution.ex:16: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 74776000,
    "question_id": "3228",
    "elapsed_time": 355,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707639152071,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1172129838",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_set_size(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def maximum_set_size(nums1, nums2) do\n    nums1\n    |> Enum.concat(nums2)\n    |> Enum.frequencies()\n    |> Enum.values()\n    |> Enum.sort(:desc)\n    |> Enum.with_index()\n    |> Enum.reduce(0, fn {freq, idx}, acc -> acc + Enum.min([freq, div(length(nums1), 2) - idx]) end)\n  end\nend"
}