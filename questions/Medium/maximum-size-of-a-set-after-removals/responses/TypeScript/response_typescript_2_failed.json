{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 75424000,
    "question_id": "3228",
    "elapsed_time": 183,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "expected_output": "5",
    "task_finish_time": 1707629225363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1172024872",
    "input_formatted": "[1,2,3,4,5,6], [2,3,2,3,2,3]",
    "input": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumSetSize(nums1: number[], nums2: number[]): number {\n    const frequency = new Map<number, number>();\n    nums1.forEach(num => frequency.set(num, (frequency.get(num) || 0) + 1));\n    nums2.forEach(num => frequency.set(num, (frequency.get(num) || 0) + 1));\n\n    let removals = nums1.length / 2;\n    const frequencies = Array.from(frequency.values()).sort((a, b) => b - a);\n    let uniqueNumbers = 0;\n\n    for (const freq of frequencies) {\n        if (removals > 0) {\n            const remove = Math.min(removals, Math.floor(freq / 2));\n            removals -= remove;\n        }\n        if (freq - 2 * removals > 0) uniqueNumbers++;\n    }\n\n    return uniqueNumbers;\n}"
}