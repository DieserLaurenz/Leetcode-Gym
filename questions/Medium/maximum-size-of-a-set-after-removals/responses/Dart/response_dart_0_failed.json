{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 185104000,
    "question_id": "3228",
    "elapsed_time": 613,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638298386,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 159,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1172121535",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maximumSetSize(List<int> nums1, List<int> nums2) {\n    Map<int, int> freq = {};\n    for (int num in nums1) {\n      freq[num] = (freq[num] ?? 0) + 1;\n    }\n    for (int num in nums2) {\n      freq[num] = (freq[num] ?? 0) + 1;\n    }\n    List<int> values = freq.values.toList();\n    values.sort((a, b) => b.compareTo(a));\n    int removeCount = nums1.length ~/ 2;\n    int setSize = 0;\n    for (int i = 0; i < values.length; i++) {\n      if (removeCount >= values[i]) {\n        removeCount -= values[i];\n      } else {\n        setSize++;\n      }\n    }\n    return setSize + removeCount;\n  }\n}"
}