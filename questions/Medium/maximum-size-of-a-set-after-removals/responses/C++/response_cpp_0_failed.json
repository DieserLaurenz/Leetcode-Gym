{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 131428000,
    "question_id": "3228",
    "elapsed_time": 245,
    "compare_result": "110000100011010000101011001110101001110000110100101110010011100101111010010001111110011101010100001010010000000000000010000000000000000000000000000000000001000000010110101000010000001100000001000000100000111000000101000000000001000100000010100000000001010101010011010000000010000000101101010000000110000100010000010001000100010010000000100000001100100101000010001000010000000000000010000000000010000000111101001001011011101100000010110101011000001000000100011001000001000110101101000011011011010000110001100010010001010100010111001100100011001000000010010011000100000010101001000000110011010111110000001000110000111001000000000100000000010010000101010110000000000000000001000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000001010000000001000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "expected_output": "6",
    "task_finish_time": 1707628597175,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 206,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1172018597",
    "input_formatted": "[1,1,2,2,3,3], [4,4,5,5,6,6]",
    "input": "[1,1,2,2,3,3]\n[4,4,5,5,6,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maximumSetSize(vector<int>& nums1, vector<int>& nums2) {\n        unordered_map<int, int> freq;\n        for (int num : nums1) ++freq[num];\n        for (int num : nums2) ++freq[num];\n        priority_queue<int> pq;\n        for (auto& [_, count] : freq) pq.push(count);\n        int removeCount = nums1.size() / 2, setSize = 0;\n        while (!pq.empty()) {\n            int top = pq.top(); pq.pop();\n            if (removeCount > 0) {\n                int remove = min(top / 2, removeCount);\n                top -= remove * 2;\n                removeCount -= remove;\n            }\n            if (top > 0) ++setSize;\n        }\n        return setSize;\n    }\n};"
}