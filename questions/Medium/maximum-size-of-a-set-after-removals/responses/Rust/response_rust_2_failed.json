{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4480000,
    "question_id": "3228",
    "elapsed_time": 37,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638771639,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1172126196",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_set_size(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        use std::collections::HashMap;\n\n        let mut count_map = HashMap::new();\n        for &num in nums1.iter().chain(&nums2) {\n            *count_map.entry(num).or_insert(0) += 1;\n        }\n\n        let mut counts: Vec<_> = count_map.values().cloned().collect();\n        counts.sort_unstable_by(|a, b| b.cmp(a));\n\n        let mut result = 0;\n        let mut removed = 0;\n        let half = nums1.len() / 2;\n\n        for count in counts {\n            if removed < half {\n                result += 1;\n                removed += count.min(half) as usize;\n            } else {\n                break;\n            }\n        }\n\n        result\n    }\n}"
}