{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2852000,
    "question_id": "3228",
    "elapsed_time": 31,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "expected_output": "5",
    "task_finish_time": 1707638740938,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 51,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1172125906",
    "input_formatted": "[1,2,3,4,5,6], [2,3,2,3,2,3]",
    "input": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_set_size(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        use std::collections::HashSet;\n\n        let n = nums1.len();\n        let mut set: HashSet<i32> = HashSet::new();\n        for i in 0..n {\n            set.insert(nums1[i]);\n            set.insert(nums2[i]);\n        }\n\n        let max_possible_size = n as i32;\n        let set_size = set.len() as i32;\n\n        if set_size >= max_possible_size / 2 {\n            max_possible_size / 2 + (n as i32) % 2\n        } else {\n            set_size\n        }\n    }\n}"
}