{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52880000,
    "display_runtime": "37",
    "question_id": "3228",
    "elapsed_time": 300,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "expected_output": "5",
    "task_finish_time": 1707628693144,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 186,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1172019566",
    "input_formatted": "[1,2,3,4,5,6], [2,3,2,3,2,3]",
    "input": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maximumSetSize(int[] nums1, int[] nums2) {\n        HashMap<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int num : nums1) frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        for (int num : nums2) frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);\n        for (int freq : frequencyMap.values()) maxHeap.add(freq);\n        int n = nums1.length, removeCount = n / 2, setSize = 0;\n        while (!maxHeap.isEmpty() && removeCount > 0) {\n            int freq = maxHeap.poll();\n            if (freq <= removeCount) {\n                removeCount -= freq;\n            } else {\n                maxHeap.add(freq - removeCount);\n                removeCount = 0;\n            }\n        }\n        return maxHeap.size();\n    }\n}"
}