{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53340000,
    "display_runtime": "43",
    "question_id": "3228",
    "elapsed_time": 309,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707628751527,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 205,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1172020164",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maximumSetSize(int[] nums1, int[] nums2) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums1) map.put(num, map.getOrDefault(num, 0) + 1);\n        for (int num : nums2) map.put(num, map.getOrDefault(num, 0) + 1);\n        int n = nums1.length, toRemove = n / 2, removed = 0, setSize = 0;\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\n        pq.addAll(map.values());\n        while (!pq.isEmpty() && removed < toRemove) {\n            int top = pq.poll();\n            if (top >= 2 && removed + top / 2 <= toRemove) {\n                removed += top / 2;\n                if (top % 2 == 1) setSize++;\n            } else {\n                setSize++;\n            }\n        }\n        setSize += pq.size();\n        return setSize;\n    }\n}"
}