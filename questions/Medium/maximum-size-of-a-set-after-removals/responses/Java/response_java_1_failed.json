{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54180000,
    "display_runtime": "44",
    "question_id": "3228",
    "elapsed_time": 329,
    "compare_result": "000000000001000000101011001110101001110000110100101100000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000001000000010000000000000000000100000000000000000000000000000000000000000001000100000000000000000000010000000011010000000000000000001000000000000010000000000000010000000100010000000000000000000100000000000000001000000000000000000000000000000000000000110000000000011000100100000000000000000000001000000000001001000000000100000000000010001010000000000001000000010000000000010001000100100010001000000000000010000000000000001000000000000000000001010000000000100000011001000000000100000000000000000001010010000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707628722703,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 74,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1172019862",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maximumSetSize(int[] nums1, int[] nums2) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums1) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        for (int num : nums2) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> frequencies = new ArrayList<>(countMap.values());\n        Collections.sort(frequencies, Collections.reverseOrder());\n        int n = nums1.length;\n        int totalRemovals = n / 2, setSize = 0, i = 0;\n        while (totalRemovals > 0 && i < frequencies.size()) {\n            int freq = frequencies.get(i);\n            if (freq >= 2) {\n                totalRemovals -= Math.min(freq / 2, totalRemovals);\n            }\n            i++;\n        }\n        for (; i < frequencies.size(); i++) {\n            if (frequencies.get(i) > 0) {\n                setSize++;\n            }\n        }\n        return setSize;\n    }\n}"
}