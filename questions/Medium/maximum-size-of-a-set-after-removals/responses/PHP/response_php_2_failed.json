{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 28360000,
    "question_id": "3228",
    "elapsed_time": 467,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "expected_output": "5",
    "task_finish_time": 1707629324901,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1172025871",
    "input_formatted": "[1,2,3,4,5,6], [2,3,2,3,2,3]",
    "input": "[1,2,3,4,5,6]\n[2,3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function maximumSetSize($nums1, $nums2) {\n        $n = count($nums1);\n        $counts = array_count_values(array_merge($nums1, $nums2));\n        $values = array_keys($counts);\n        usort($values, function($a, $b) use ($counts) {\n            return $counts[$b] <=> $counts[$a];\n        });\n        $removed = 0;\n        $set = [];\n        foreach ($values as $value) {\n            if ($removed < $n) {\n                $removed += min($counts[$value], $n / 2);\n                $set[$value] = true;\n            } else {\n                break;\n            }\n        }\n        return count($set);\n    }\n}"
}