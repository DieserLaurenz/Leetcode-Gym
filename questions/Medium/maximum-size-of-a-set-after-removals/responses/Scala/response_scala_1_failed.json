{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71280000,
    "question_id": "3228",
    "elapsed_time": 10284,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,1,2]\n[1,1,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707638645722,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 88,
    "total_testcases": 969,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1172124858",
    "input_formatted": "[1,2,1,2], [1,1,1,1]",
    "input": "[1,2,1,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumSetSize(nums1: Array[Int], nums2: Array[Int]): Int = {\n        val totalLength = nums1.length + nums2.length\n        val combinedCounts = (nums1 ++ nums2).groupBy(identity).mapValues(_.length)\n        val requiredRemovals = nums1.length / 2\n        val sortedByCount = combinedCounts.toList.sortBy(-_._2)\n        var removals = 0\n        var index = 0\n\n        while (removals < requiredRemovals && index < sortedByCount.size) {\n            val (_, count) = sortedByCount(index)\n            val toRemove = Math.min(count / 2, requiredRemovals - removals)\n            removals += toRemove\n            index += 1\n        }\n\n        totalLength / 2 - removals + combinedCounts.size - index\n    }\n}"
}