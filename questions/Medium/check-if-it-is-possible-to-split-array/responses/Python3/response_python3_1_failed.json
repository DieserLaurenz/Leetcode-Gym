{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16540000,
    "question_id": "2916",
    "elapsed_time": 71,
    "compare_result": "101100110101011111101010001111101101111100111111011111110011101101001011000000000010111000010001000000001100001010100100010011010100001110111110111000001010101100011010010111111101011111000011111001101000001111001100110100111111111111010111011011110110111111001001111000001000000000001101001101010010000001011000010000010000000001000001000000011010001000000111000000000110001011010101100010000101001111011011011000111100011101101010000100011111000101010011101011111010100010011000010111111110000001110101001100001110000010111001010",
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[2, 1, 3]\n5",
    "expected_output": "false",
    "task_finish_time": 1708744886128,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 255,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184474169",
    "input_formatted": "[2, 1, 3], 5",
    "input": "[2, 1, 3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def canSplitArray(self, nums: List[int], m: int) -> bool:\n        def can_split(max_splits):\n            splits, current_sum = 0, 0\n            for num in nums:\n                current_sum += num\n                if current_sum > m:\n                    splits += 1\n                    current_sum = num\n            return splits < max_splits\n\n        left, right = max(nums), sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if can_split(len(nums)):\n                right = mid\n            else:\n                left = mid + 1\n        return left <= m"
}