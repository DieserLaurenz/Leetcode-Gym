{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16772000,
    "question_id": "2916",
    "elapsed_time": 83,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1708744929829,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 270,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184474506",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def canSplitArray(self, nums: List[int], m: int) -> bool:\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n\n        def can_split(mid):\n            count, i = 0, 0\n            for j in range(1, n + 1):\n                if prefix_sum[j] - prefix_sum[i] > mid:\n                    i = j - 1\n                    count += 1\n            return count + 1 <= n\n\n        left, right = max(nums), prefix_sum[n]\n        if right < m:\n            return False\n\n        while left < right:\n            mid = (left + right) // 2\n            if can_split(mid):\n                right = mid\n            else:\n                left = mid + 1\n\n        # Check if it's possible to split the array according to the original problem statement\n        if left < m:\n            return False\n\n        # Additional checks specific to the problem constraints\n        sum_subarrays = [0] * n\n        for i in range(n):\n            sum_subarrays[i] = nums[i]\n            if i > 0:\n                if sum_subarrays[i - 1] < m and sum_subarrays[i] + sum_subarrays[i - 1] < m:\n                    return False\n                if sum_subarrays[i - 1] < m:\n                    sum_subarrays[i] += sum_subarrays[i - 1]\n\n        return True"
}