{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 23908000,
    "question_id": "2916",
    "elapsed_time": 43,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[2, 1, 3]\n5",
    "expected_output": "false",
    "task_finish_time": 1706772113629,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 337,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162737235",
    "input_formatted": "[2, 1, 3], 5",
    "input": "[2, 1, 3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <numeric>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    bool canSplitArray(vector<int>& nums, int m) {\n        int n = nums.size();\n        vector<vector<bool>> dp(n + 1, vector<bool>(n + 1, false));\n        vector<int> prefixSum(n + 1, 0);\n        \n        // Calculate prefix sums for easy sum calculation of subarrays\n        for (int i = 1; i <= n; ++i) {\n            prefixSum[i] = prefixSum[i - 1] + nums[i - 1];\n        }\n        \n        // Subarrays of length 1 are always valid\n        for (int i = 0; i < n; ++i) {\n            dp[i][1] = true;\n        }\n        \n        // Check for all lengths from 2 to n\n        for (int len = 2; len <= n; ++len) {\n            for (int i = 0; i <= n - len; ++i) {\n                int sum = prefixSum[i + len] - prefixSum[i];\n                \n                // If the whole subarray meets the condition\n                if (sum >= m) {\n                    dp[i][len] = true;\n                    continue;\n                }\n                \n                // Try splitting the subarray into two parts at every possible position\n                for (int k = 1; k < len; ++k) {\n                    if (dp[i][k] && dp[i + k][len - k]) {\n                        dp[i][len] = true;\n                        break;\n                    }\n                }\n            }\n        }\n        \n        // Check if the entire array can be split into valid subarrays\n        return dp[0][n];\n    }\n};"
}