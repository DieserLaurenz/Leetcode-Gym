{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13972000,
    "question_id": "2916",
    "elapsed_time": 4009,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706772165409,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 157,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162737787",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool canSplitArray(vector<int>& nums, int m) {\n        int n = nums.size();\n        // Edge case: If the array itself meets the condition or if it's already of length n.\n        if (accumulate(nums.begin(), nums.end(), 0) < m && n > 1) return false;\n        return canSplit(nums, 0, n, m, 0, 0);\n    }\n\nprivate:\n    bool canSplit(const vector<int>& nums, int start, int n, int m, int currentSum, int splits) {\n        int len = nums.size();\n        // If we've made enough splits and the remaining part is valid\n        if (splits == n - 1) {\n            return true;\n        }\n\n        for (int i = start; i < len; ++i) {\n            currentSum += nums[i];\n            // If current sum is valid, we can choose to split here or continue adding to currentSum\n            if (currentSum >= m) {\n                // Split here and check the rest\n                if (canSplit(nums, i + 1, n, m, 0, splits + 1)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n};"
}