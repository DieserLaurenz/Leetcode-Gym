{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20256000,
    "question_id": "2916",
    "elapsed_time": 22,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706772222677,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 213,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162738512",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <numeric>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    bool canSplitArray(vector<int>& nums, int m) {\n        int left = *max_element(nums.begin(), nums.end()); // Minimum possible value of m\n        int right = accumulate(nums.begin(), nums.end(), 0); // Maximum possible value of m\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (isValid(nums, mid, m)) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        \n        return isValid(nums, left, m);\n    }\n    \nprivate:\n    bool isValid(const vector<int>& nums, int threshold, int m) {\n        int currentSum = 0;\n        int count = 0; // Counts the number of arrays formed\n        \n        for (int num : nums) {\n            currentSum += num;\n            if (currentSum >= m) {\n                count++;\n                currentSum = 0;\n            }\n        }\n        \n        return count >= nums.size();\n    }\n};"
}