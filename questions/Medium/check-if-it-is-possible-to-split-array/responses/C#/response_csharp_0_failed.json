{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 47244000,
    "question_id": "2916",
    "elapsed_time": 409,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[1, 1]\n3",
    "expected_output": "true",
    "task_finish_time": 1706772614960,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 526,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1162742900",
    "input_formatted": "[1, 1], 3",
    "input": "[1, 1]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool CanSplitArray(IList<int> nums, int m) {\n        int n = nums.Count;\n        int[] prefixSum = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n\n        bool[,] memo = new bool[n, n];\n        bool[,] calculated = new bool[n, n];\n        \n        return CanSplit(0, n - 1, m, nums, prefixSum, memo, calculated);\n    }\n\n    private bool CanSplit(int start, int end, int m, IList<int> nums, int[] prefixSum, bool[,] memo, bool[,] calculated) {\n        if (start == end) return true; // Single element\n        if (calculated[start, end]) return memo[start, end];\n\n        int sum = prefixSum[end + 1] - prefixSum[start];\n        if (sum < m) { // If sum of the segment is less than m, it's impossible to split accordingly\n            calculated[start, end] = true;\n            memo[start, end] = false;\n            return false;\n        }\n\n        for (int i = start; i < end; i++) {\n            int leftSum = prefixSum[i + 1] - prefixSum[start];\n            int rightSum = prefixSum[end + 1] - prefixSum[i + 1];\n            if ((leftSum >= m || i == start) && (rightSum >= m || i == end - 1)) {\n                if (CanSplit(start, i, m, nums, prefixSum, memo, calculated) && CanSplit(i + 1, end, m, nums, prefixSum, memo, calculated)) {\n                    calculated[start, end] = true;\n                    memo[start, end] = true;\n                    return true;\n                }\n            }\n        }\n\n        calculated[start, end] = true;\n        memo[start, end] = false;\n        return false;\n    }\n}"
}