{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15376000,
    "question_id": "2916",
    "elapsed_time": 794,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706775079154,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 213,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1162769877",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func canSplitArray(_ nums: [Int], _ m: Int) -> Bool {\n        // Calculate the total sum to check if the entire array can be one segment.\n        let totalSum = nums.reduce(0, +)\n        \n        // If the total sum is less than m, it's not possible to split as required.\n        if totalSum < m {\n            return false\n        }\n        \n        // If nums contains exactly one element, return true if it's >= m or false otherwise.\n        if nums.count == 1 {\n            return nums[0] >= m\n        }\n        \n        // Dynamic programming cache to remember subproblems' solutions.\n        var memo = [String: Bool]()\n        \n        // Helper function to check feasibility of splitting from index `start` with `count` splits remaining.\n        func canSplit(from start: Int, remainingSplits: Int, currentSum: Int) -> Bool {\n            // Base case: if start reaches the end of nums, check if we've made all splits.\n            if start == nums.count {\n                return remainingSplits == 0\n            }\n            \n            // If only one split remains, we can directly check the sum of the remaining elements.\n            if remainingSplits == 1 {\n                let sumRemaining = nums[start...].reduce(0, +)\n                return sumRemaining >= m\n            }\n            \n            let key = \"\\(start)-\\(remainingSplits)-\\(currentSum)\"\n            if let cached = memo[key] {\n                return cached\n            }\n            \n            var result = false\n            var sum = currentSum\n            \n            for i in start..<nums.count {\n                sum += nums[i]\n                // Once the sum reaches m, we try to split here.\n                if sum >= m {\n                    if canSplit(from: i + 1, remainingSplits: remainingSplits - 1, currentSum: 0) {\n                        result = true\n                        break\n                    }\n                }\n            }\n            \n            memo[key] = result\n            return result\n        }\n        \n        return canSplit(from: 0, remainingSplits: nums.count, currentSum: 0)\n    }\n}"
}