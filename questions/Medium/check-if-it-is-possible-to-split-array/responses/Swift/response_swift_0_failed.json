{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15264000,
    "question_id": "2916",
    "elapsed_time": 76,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706775025125,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 194,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1162769296",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func canSplitArray(_ nums: [Int], _ m: Int) -> Bool {\n        let n = nums.count\n        var prefixSum = [Int](repeating: 0, count: n+1)\n        for i in 0..<n {\n            prefixSum[i+1] = prefixSum[i] + nums[i]\n        }\n        \n        var dp = [[Bool]](repeating: [Bool](repeating: false, count: n+1), count: n+1)\n        dp[0][0] = true // Base case: zero elements can always form 0 arrays\n        \n        for end in 1...n {\n            for start in stride(from: end-1, through: 0, by: -1) {\n                for splitPoint in start..<end {\n                    let leftSum = prefixSum[splitPoint+1] - prefixSum[start]\n                    let rightSum = prefixSum[end] - prefixSum[splitPoint+1]\n                    if (leftSum >= m || splitPoint+1-start == 1) && (rightSum >= m || end-splitPoint-1 == 1) && dp[start][splitPoint] && dp[splitPoint+1][end] {\n                        dp[start][end] = true\n                        break\n                    }\n                }\n            }\n        }\n        \n        return dp[0][n]\n    }\n}"
}