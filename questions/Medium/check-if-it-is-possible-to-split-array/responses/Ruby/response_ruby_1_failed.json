{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212116000,
    "question_id": "2916",
    "elapsed_time": 285,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706782395212,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 211,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162848707",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Boolean}\ndef can_split_array(nums, m)\n  # Binary search to find the minimum possible sum for splitting\n  low = nums.max\n  high = nums.sum\n  result = false\n  \n  while low <= high\n    mid = (low + high) / 2\n    if can_split(nums, mid, m)\n      result = true\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  \n  result\nend\n\n# Helper function to check if it's possible to split the array\n# into subarrays with sums at least `mid` and at most `m`\ndef can_split(nums, mid, m)\n  count = 0\n  current_sum = 0\n  \n  nums.each do |num|\n    current_sum += num\n    if current_sum >= mid\n      count += 1\n      current_sum = 0\n    end\n  end\n  \n  count >= nums.size\nend"
}