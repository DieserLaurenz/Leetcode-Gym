{
    "status_code": 14,
    "lang": "ruby",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 211736000,
    "question_id": "2916",
    "elapsed_time": 3041,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[38, 96, 25, 55, 62, 62, 58, 55, 4, 32, 35, 100, 12, 87, 16, 55, 16, 53, 77, 57, 44, 87, 23]\n143",
    "expected_output": "false",
    "task_finish_time": 1706782335999,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 288,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162848050",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} m\n# @return {Boolean}\ndef can_split_array(nums, m)\n  # Helper function to check if the array can be split into valid subarrays\n  def dfs(subarray, m)\n    # Base case: if subarray length is 1, it's always valid\n    return true if subarray.length == 1\n\n    # Try to split the subarray at every possible index\n    (1...subarray.length).each do |i|\n      left = subarray[0...i]\n      right = subarray[i..-1]\n\n      # Check if both left and right subarrays satisfy the conditions\n      if (left.length == 1 || left.sum >= m) && (right.length == 1 || right.sum >= m)\n        # If both subarrays are valid, check if further splits are possible/needed\n        return true if dfs(left, m) && dfs(right, m)\n      end\n    end\n\n    # If no valid split is found, return false\n    false\n  end\n\n  # Initial call to the helper function with the entire array\n  dfs(nums, m)\nend"
}