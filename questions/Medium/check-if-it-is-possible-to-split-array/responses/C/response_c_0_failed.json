{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5640000,
    "question_id": "2916",
    "elapsed_time": 26,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[2, 1, 3]\n5",
    "expected_output": "false",
    "task_finish_time": 1706772448580,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 343,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162741086",
    "input_formatted": "[2, 1, 3], 5",
    "input": "[2, 1, 3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n\nbool canSplitArray(int* nums, int numsSize, int m) {\n    // Base case: if the array itself meets the condition or is a single element\n    int totalSum = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        totalSum += nums[i];\n    }\n    if (totalSum >= m || numsSize == 1) {\n        return true;\n    }\n    \n    // Try to split the array\n    for (int i = 1; i < numsSize; ++i) {\n        int leftSum = 0;\n        for (int j = 0; j < i; ++j) {\n            leftSum += nums[j];\n        }\n        int rightSum = totalSum - leftSum;\n        \n        // Check if both subarrays after splitting meet the condition\n        if ((leftSum >= m || i == 1) && (rightSum >= m || (numsSize - i) == 1)) {\n            // Check if further splitting is needed and possible\n            bool leftSplitPossible = (i == 1) ? true : canSplitArray(nums, i, m);\n            bool rightSplitPossible = ((numsSize - i) == 1) ? true : canSplitArray(nums + i, numsSize - i, m);\n            \n            if (leftSplitPossible && rightSplitPossible) {\n                return true;\n            }\n        }\n    }\n    \n    // If no valid split is found\n    return false;\n}"
}