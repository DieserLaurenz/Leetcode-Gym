{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 153660000,
    "question_id": "2916",
    "elapsed_time": 501,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[2, 1, 3]\n5",
    "expected_output": "false",
    "task_finish_time": 1706781851367,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 330,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162842656",
    "input_formatted": "[2, 1, 3], 5",
    "input": "[2, 1, 3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  bool canSplitArray(List<int> nums, int m) {\n    // Calculate the total sum of the array\n    int totalSum = nums.fold(0, (sum, item) => sum + item);\n\n    // Edge case: if total sum is less than m, cannot split as required\n    if (totalSum < m) return false;\n\n    // Since we need to check if it's possible without explicit splits,\n    // we look for whether all elements can be part of subarrays that meet the criteria\n    // This involves checking if the array as a whole meets the criteria\n    // or if individual or combined elements can form subarrays meeting the criteria\n\n    // Dynamic programming table for subarray sums\n    List<bool> dp = List.filled(totalSum + 1, false);\n    dp[0] = true; // base case\n\n    // Update DP table based on current nums\n    for (int num in nums) {\n      for (int i = totalSum; i >= num; i--) {\n        dp[i] = dp[i] || dp[i - num];\n      }\n    }\n\n    // Check if we can form a subarray with sum >= m\n    for (int i = m; i <= totalSum; i++) {\n      if (dp[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}"
}