{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 149396000,
    "question_id": "2916",
    "elapsed_time": 482,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706781784192,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 213,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162841917",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  bool canSplitArray(List<int> nums, int m) {\n    // Helper function to check if the array can be split according to the rules.\n    bool canSplit(int start, int parts, int sum, List<int> nums, int m) {\n      if (parts == 0) return sum >= m; // Last part must have sum >= m\n      if (sum < m * parts) return false; // Not enough sum left for remaining parts\n\n      int currentSum = 0;\n      for (int i = start; i <= nums.length - parts; i++) {\n        currentSum += nums[i];\n        // Only proceed if currentSum is enough for a part, or we're making the last split.\n        if (currentSum >= m && canSplit(i + 1, parts - 1, sum - currentSum, nums, m)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    int totalSum = nums.reduce((a, b) => a + b);\n    return canSplit(0, nums.length - 1, totalSum, nums, m);\n  }\n}"
}