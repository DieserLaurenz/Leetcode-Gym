{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 147900000,
    "question_id": "2916",
    "elapsed_time": 5018,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[1]\n1",
    "expected_output": "true",
    "task_finish_time": 1706781901137,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 299,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162843129",
    "input_formatted": "[1], 1",
    "input": "[1]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  bool canSplitArray(List<int> nums, int m) {\n    // Function to check if the current partition is valid.\n    bool isValidPartition(int start, int end, int m, List<int> nums) {\n      int sum = 0;\n      for (int i = start; i <= end; i++) {\n        sum += nums[i];\n      }\n      return sum >= m || end - start == 0;\n    }\n\n    // DFS function to try all possible splits.\n    bool dfs(int index, int m, List<int> nums, int splits, int n) {\n      if (index == n) {\n        // If we've reached the end, check if we've made enough splits.\n        return splits == n - 1;\n      }\n      int sum = 0;\n      for (int i = index; i < n; i++) {\n        sum += nums[i];\n        // If the sum from the current index to i meets the requirement,\n        // or we're considering a single element, explore further.\n        if (sum >= m || i == index) {\n          if (dfs(i + 1, m, nums, splits + 1, n)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    return dfs(0, m, nums, 0, nums.length);\n  }\n}"
}