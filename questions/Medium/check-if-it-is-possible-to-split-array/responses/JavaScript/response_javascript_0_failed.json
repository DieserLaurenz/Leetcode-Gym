{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55692000,
    "question_id": "2916",
    "elapsed_time": 208,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706774239984,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 299,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162760683",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} m\n * @return {boolean}\n */\nvar canSplitArray = function(nums, m) {\n    const n = nums.length;\n    let prefixSums = new Array(n).fill(0);\n    prefixSums[0] = nums[0];\n    for (let i = 1; i < n; i++) {\n        prefixSums[i] = prefixSums[i - 1] + nums[i];\n    }\n    \n    // Helper function to calculate the sum of a subarray\n    const subArraySum = (start, end) => {\n        return prefixSums[end] - (start > 0 ? prefixSums[start - 1] : 0);\n    };\n    \n    // DP array initialization\n    let dp = Array.from({ length: n }, () => new Array(n + 1).fill(false));\n    dp[0][1] = nums[0] >= m || nums.length === 1; // Initial condition\n    \n    // DP iteration\n    for (let i = 0; i < n; i++) {\n        for (let j = 1; j <= i + 1; j++) {\n            if (i > 0 && !dp[i - 1][j - 1]) continue;\n            for (let k = i; k < n; k++) {\n                if (subArraySum(i, k) >= m || k - i === 0) {\n                    dp[k][j + 1] = true;\n                }\n            }\n        }\n    }\n    \n    return dp[n - 1][n];\n};"
}