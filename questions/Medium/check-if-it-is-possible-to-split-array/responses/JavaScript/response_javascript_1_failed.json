{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51332000,
    "question_id": "2916",
    "elapsed_time": 173,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[2, 1, 3]\n5",
    "expected_output": "false",
    "task_finish_time": 1706774291979,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 337,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162761232",
    "input_formatted": "[2, 1, 3], 5",
    "input": "[2, 1, 3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} m\n * @return {boolean}\n */\nvar canSplitArray = function(nums, m) {\n    const n = nums.length;\n    let memo = {};\n\n    // Helper function to calculate the sum of a subarray\n    const getSum = (start, end) => {\n        let sum = 0;\n        for (let i = start; i <= end; i++) {\n            sum += nums[i];\n        }\n        return sum;\n    };\n\n    // Recursive function with memoization\n    function canSplit(start, parts) {\n        // If the start index reaches the end and we have made the required splits\n        if (start == n && parts == 0) return true;\n        if (start >= n || parts < 0) return false;\n        let memoKey = `${start}-${parts}`;\n        if (memoKey in memo) return memo[memoKey];\n\n        // Attempt to split the array and recursively check if the remaining parts can be split\n        for (let end = start; end < n; end++) {\n            if (getSum(start, end) >= m || end - start == 0) {\n                if (canSplit(end + 1, parts - 1)) {\n                    memo[memoKey] = true;\n                    return true;\n                }\n            }\n        }\n\n        memo[memoKey] = false;\n        return false;\n    }\n\n    // We subtract 1 from 'n' because we want to split into 'n' parts, so we need 'n-1' splits.\n    return canSplit(0, n);\n};\n\n// Example Test Cases\nconsole.log(canSplitArray([2, 2, 1], 4)); // Expected output: true\nconsole.log(canSplitArray([2, 1, 3], 5)); // Expected output: false\nconsole.log(canSplitArray([2, 3, 3, 2, 3], 6)); // Expected output: true"
}