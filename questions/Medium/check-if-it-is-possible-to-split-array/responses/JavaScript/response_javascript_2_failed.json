{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 49776000,
    "question_id": "2916",
    "elapsed_time": 4019,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706774356663,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 128,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162761941",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} m\n * @return {boolean}\n */\nvar canSplitArray = function(nums, m) {\n    // Calculate the total sum to check if it's even possible to split as required.\n    const totalSum = nums.reduce((acc, val) => acc + val, 0);\n\n    // Early exit if the total sum is less than m times (n-1), meaning we cannot form n segments with each at least m.\n    if (totalSum < m * (nums.length - 1)) return false;\n\n    // Function to check if it's possible to form segments with sum >= m\n    function canFormSegments(index, segmentsFormed, currentSum) {\n        // Base case: if we've reached the end of the array\n        if (index === nums.length) {\n            // Check if we've formed exactly n-1 segments with sum >= m, and the last segment also has sum >= m\n            return segmentsFormed === nums.length - 1 && currentSum >= m;\n        }\n\n        // If adding the current element exceeds or meets the required sum, we can try to form a new segment\n        if (currentSum + nums[index] >= m) {\n            // Case 1: Form a new segment and include the current element in the new segment\n            if (canFormSegments(index + 1, segmentsFormed + 1, nums[index])) {\n                return true;\n            }\n        }\n        \n        // Case 2: Continue adding to the current segment\n        if (segmentsFormed < nums.length - 1) { // Ensure we don't form more segments than allowed\n            if (canFormSegments(index + 1, segmentsFormed, currentSum + nums[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // Start recursion from the first element, no segments formed yet, and current sum as 0.\n    return canFormSegments(0, 0, 0);\n};"
}