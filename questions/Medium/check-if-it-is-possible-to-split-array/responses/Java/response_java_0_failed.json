{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42316000,
    "display_runtime": "2",
    "question_id": "2916",
    "elapsed_time": 310,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[1, 1]\n3",
    "expected_output": "true",
    "task_finish_time": 1706772272367,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 354,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1162739101",
    "input_formatted": "[1, 1], 3",
    "input": "[1, 1]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public boolean canSplitArray(List<Integer> nums, int m) {\n        // Base case: If there's only one element, we don't need to split further.\n        if (nums.size() == 1) return true;\n\n        int sum = 0;\n        // Calculate the total sum to see if splitting is necessary at all.\n        for (int num : nums) sum += num;\n\n        // If the total sum is less than m, we cannot split in a way that every subarray has a sum >= m\n        if (sum < m) return false;\n\n        // Try splitting the array from every possible position and check if both parts satisfy the condition.\n        for (int i = 1; i < nums.size(); i++) {\n            List<Integer> left = nums.subList(0, i);\n            List<Integer> right = nums.subList(i, nums.size());\n\n            if ((canSplitOrValid(left, m) && canSplitOrValid(right, m))) return true;\n        }\n\n        return false;\n    }\n\n    // Helper method to check if a subarray can be split or is already valid.\n    private boolean canSplitOrValid(List<Integer> subArray, int m) {\n        int sum = 0;\n        for (int num : subArray) sum += num;\n\n        // If the sum is >= m, or it's a single element array, it's valid.\n        if (sum >= m || subArray.size() == 1) return true;\n\n        // Otherwise, try to split it further.\n        return canSplitArray(subArray, m);\n    }\n}"
}