{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19960000,
    "question_id": "2916",
    "elapsed_time": 150,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[2, 1, 3]\n5",
    "expected_output": "false",
    "task_finish_time": 1706774684076,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 330,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162765684",
    "input_formatted": "[2, 1, 3], 5",
    "input": "[2, 1, 3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $m\n     * @return Boolean\n     */\n    function canSplitArray($nums, $m) {\n        // Calculate total sum to check if initial array can be split at all\n        $totalSum = array_sum($nums);\n        if ($totalSum < $m) return false; // Cannot split into required parts\n\n        // Initialize memoization array\n        $memo = [];\n\n        // Helper function to check if we can make the splits recursively\n        $canSplit = function($index, $parts, $currentSum) use ($nums, $m, &$memo) {\n            // Base cases\n            if ($index == count($nums)) {\n                return $parts == 1 && $currentSum >= $m;\n            }\n            if ($parts == 1) {\n                return array_sum(array_slice($nums, $index)) >= $m;\n            }\n\n            $key = $index . '-' . $parts . '-' . $currentSum;\n            if (isset($memo[$key])) return $memo[$key];\n\n            // Try splitting here\n            if ($currentSum >= $m) {\n                if ($canSplit($index + 1, $parts - 1, $nums[$index])) {\n                    $memo[$key] = true;\n                    return true;\n                }\n            }\n\n            // Continue without splitting\n            if ($canSplit($index + 1, $parts, $currentSum + $nums[$index])) {\n                $memo[$key] = true;\n                return true;\n            }\n\n            // Memoize and return result\n            $memo[$key] = false;\n            return false;\n        };\n\n        // Try splitting the array into n arrays from index 0\n        for ($i = 1; $i <= count($nums); $i++) {\n            if ($canSplit(0, $i, 0)) return true;\n        }\n\n        return false;\n    }\n}"
}