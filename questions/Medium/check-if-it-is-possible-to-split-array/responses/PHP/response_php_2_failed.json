{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19864000,
    "question_id": "2916",
    "elapsed_time": 169,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706774821765,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 208,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162767172",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * Helper function to check if it's possible to split the array into given number of parts\n     * with each part having a sum of at least `mid`.\n     */\n    private function isValid($nums, $m, $mid) {\n        $count = 1;\n        $sum = 0;\n        foreach ($nums as $num) {\n            $sum += $num;\n            if ($sum >= $mid) {\n                $count++;\n                $sum = 0;\n            }\n        }\n        return $count >= $m;\n    }\n\n    /**\n     * Main function to determine if the array can be split as per the problem statement.\n     */\n    function canSplitArray($nums, $m) {\n        $left = max($nums); // Minimum possible value for a split\n        $right = array_sum($nums); // Maximum possible value for a split\n\n        while ($left < $right) {\n            $mid = $left + (int)(($right - $left) / 2);\n            if ($this->isValid($nums, $m, $mid)) {\n                $right = $mid;\n            } else {\n                $left = $mid + 1;\n            }\n        }\n\n        // After the loop, left is the smallest sum we can achieve for a valid split\n        // Check if we can achieve exactly m splits with this sum\n        return $this->isValid($nums, $m, $left);\n    }\n}"
}