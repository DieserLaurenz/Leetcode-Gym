{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19888000,
    "question_id": "2916",
    "elapsed_time": 177,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706774753826,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 213,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162766451",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * Check if it's possible to split the array following the given rules.\n     * \n     * @param Integer[] $nums Array of integers to split.\n     * @param Integer $m The minimum sum for a subarray to be valid if its length > 1.\n     * @return Boolean True if it's possible to split the array into n arrays under the conditions; otherwise, false.\n     */\n    function canSplitArray($nums, $m) {\n        $n = count($nums);\n\n        // Early check: if single element is less than m and m > 0, split is impossible.\n        foreach ($nums as $num) {\n            if ($num < $m && $m > 0) return false;\n        }\n\n        // Dynamic programming approach to check if we can form subarrays with sum >= m\n        // dp[i] represents if we can split array from 0 to i into valid subarrays.\n        $dp = array_fill(0, $n, false);\n        $cumulativeSum = array_fill(0, $n, 0);\n        $cumulativeSum[0] = $nums[0];\n\n        // Precompute cumulative sums to efficiently calculate segment sums later\n        for ($i = 1; $i < $n; $i++) {\n            $cumulativeSum[$i] = $cumulativeSum[$i - 1] + $nums[$i];\n        }\n\n        // Initialize dp[0] based on the first element\n        $dp[0] = $nums[0] >= $m;\n\n        // Fill dp array\n        for ($i = 1; $i < $n; $i++) {\n            for ($j = 0; $j <= $i; $j++) {\n                $sum = $cumulativeSum[$i] - ($j > 0 ? $cumulativeSum[$j - 1] : 0);\n                if ($sum >= $m) {\n                    if ($j == 0 || $dp[$j - 1]) {\n                        $dp[$i] = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        // If the entire array can be validly split, the last element in dp will be true.\n        return $dp[$n - 1];\n    }\n}"
}