{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72172000,
    "question_id": "2916",
    "elapsed_time": 419,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[2, 1, 3]\n5",
    "expected_output": "false",
    "task_finish_time": 1706792766626,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 337,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1162954297",
    "input_formatted": "[2, 1, 3], 5",
    "input": "[2, 1, 3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec can_split_array(nums :: [integer], m :: integer) :: boolean\n  def can_split_array(nums, m) do\n    # Base case: If the array can be split into single elements or meets the sum condition\n    if Enum.count(nums) == 1 or Enum.sum(nums) >= m, do: true, else: split_check(nums, m)\n  end\n\n  defp split_check(nums, m, start \\\\ 1)\n\n  defp split_check(nums, m, start) when start < length(nums) do\n    # Split the array into two parts\n    {left, right} = Enum.split(nums, start)\n\n    # Check conditions for both parts\n    left_ok = Enum.count(left) == 1 or Enum.sum(left) >= m\n    right_ok = Enum.count(right) == 1 or Enum.sum(right) >= m\n\n    # If both parts are ok, or if further splitting is possible and successful\n    if left_ok and right_ok or (left_ok and split_check(right, m)) or (right_ok and split_check(left, m)) do\n      true\n    else\n      split_check(nums, m, start + 1)\n    end\n  end\n\n  defp split_check(_, _, _), do: false\nend"
}