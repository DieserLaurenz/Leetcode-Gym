{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11400000,
    "question_id": "2916",
    "elapsed_time": 11008,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1708735495953,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184415743",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def canSplitArray(self, nums, m):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :rtype: bool\n        \"\"\"\n        def dfs(nums, m, start, subarrays):\n            if start == len(nums):\n                return subarrays == 0\n            cur_sum = 0\n            for i in range(start, len(nums)):\n                cur_sum += nums[i]\n                if cur_sum >= m and dfs(nums, m, i + 1, subarrays - 1):\n                    return True\n            return False\n        \n        total_sum = sum(nums)\n        if total_sum < m * (len(nums) - 1):\n            return False\n        return dfs(nums, m, 0, len(nums))"
}