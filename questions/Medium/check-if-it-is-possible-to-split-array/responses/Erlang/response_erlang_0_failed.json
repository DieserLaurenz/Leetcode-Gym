{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 6: exception error: function_clause",
    "full_runtime_error": "Line 6: exception error: function_clause\n[{solution,'-can_split_array/2-fun-0-',\n              [#Fun<solution.0.108865315>,[2,2,1],4,[]],\n              [{file,\"solution.erl\"},{line,6}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,35}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,21}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,52}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59120000,
    "question_id": "2916",
    "elapsed_time": 1523,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706792552429,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162951970",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec can_split_array(Nums :: [integer()], M :: integer()) -> boolean().\ncan_split_array(Nums, M) ->\n    % Define an inner function to check if it's possible to split the array\n    % into subarrays according to the problem's rules.\n    % This function will recursively check all possible splits.\n    CheckSplit = fun(Check, [], _, _) -> false; % Base case: empty array cannot be split further\n                      (Check, [X], _, _) -> true; % Base case: single element array is always valid\n                      (Check, SubArray, M, Acc) when length(Acc) >= 1 ->\n                          % Calculate the sum of the current subarray\n                          Sum = lists:sum(SubArray),\n                          % Check if the sum of the subarray meets the requirement\n                          % or if we can recursively split the remaining array\n                          Sum >= M orelse\n                          Check(Check, tl(SubArray), M, [hd(SubArray)|Acc])\n                      end,\n    % Start checking from the full array and an empty accumulator for the split part\n    CheckSplit(CheckSplit, Nums, M, [])."
}