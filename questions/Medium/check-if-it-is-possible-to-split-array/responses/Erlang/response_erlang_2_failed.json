{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59608000,
    "question_id": "2916",
    "elapsed_time": 1439,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706792673313,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 256,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162953269",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec can_split_array(Nums :: [integer()], M :: integer()) -> boolean().\ncan_split_array(Nums, M) ->\n    % Calculate the total sum of the array.\n    TotalSum = lists:sum(Nums),\n    % Find the smallest element in the array.\n    MinElement = lists:min(Nums),\n    % The length of the nums list.\n    LengthNums = length(Nums),\n    % Check if the total sum minus the smallest element is still greater than or equal to M,\n    % which is a simplified heuristic to check if we have enough \"value\" to split the array\n    % satisfying the condition for sums. This also inherently checks if splitting into individual\n    % elements (where each element is a subarray) is possible, as required for n non-empty arrays.\n    (TotalSum - MinElement >= M * (LengthNums - 1)) andalso TotalSum >= M."
}