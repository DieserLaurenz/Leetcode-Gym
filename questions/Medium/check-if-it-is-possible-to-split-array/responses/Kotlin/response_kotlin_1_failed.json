{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37728000,
    "question_id": "2916",
    "elapsed_time": 5648,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706781667382,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 128,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1162840565",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun canSplitArray(nums: List<Int>, m: Int): Boolean {\n        // Recursive function to check if the array can be split into valid subarrays\n        fun canSplit(start: Int, end: Int, subarrays: Int): Boolean {\n            // Base case: if only one subarray is needed, check if the current segment meets the criteria\n            if (subarrays == 1) return nums.subList(start, end + 1).sum() >= m || end - start == 0\n            \n            for (i in start until end) {\n                val leftSum = nums.subList(start, i + 1).sum()\n                // If the left sum is valid, recursively check the right part\n                if (leftSum >= m && canSplit(i + 1, end, subarrays - 1)) {\n                    return true\n                }\n            }\n            return false\n        }\n\n        // Start with the assumption that we need to split the array into n subarrays, where n is the length of the array\n        // Since we start counting subarrays from 1 but our function uses 0-based indexing, adjust accordingly\n        return canSplit(0, nums.size - 1, nums.size)\n    }\n}"
}