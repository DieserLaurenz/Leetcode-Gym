{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36292000,
    "question_id": "2916",
    "elapsed_time": 210,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706781617211,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 228,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1162840091",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun canSplitArray(nums: List<Int>, m: Int): Boolean {\n        // Memoization table to store subproblem results\n        val memo = mutableMapOf<String, Boolean>()\n\n        // Helper function to check if we can split the array starting from index `start`\n        fun canSplitFrom(start: Int, remainingSplits: Int): Boolean {\n            val key = \"$start,$remainingSplits\" // Unique key for memoization\n\n            // Check if result is already computed\n            memo[key]?.let { return it }\n\n            // Base case: if no more splits are needed, return true\n            if (remainingSplits == 0) return true\n\n            var sum = 0\n\n            // Try to split the array at every possible index\n            for (i in start until nums.size - remainingSplits) {\n                sum += nums[i]\n                // If sum >= m, check if the remaining part can be split accordingly\n                if (sum >= m && canSplitFrom(i + 1, remainingSplits - 1)) {\n                    memo[key] = true\n                    return true\n                }\n            }\n\n            memo[key] = false\n            return false\n        }\n\n        // Initial call: we need to split the array into (nums.size) parts\n        return canSplitFrom(0, nums.size - 1)\n    }\n}"
}