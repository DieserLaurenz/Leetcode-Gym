{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "31 ms",
    "memory": 5324000,
    "question_id": "2916",
    "elapsed_time": 48,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706782025477,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 531,
    "total_testcases": 531,
    "runtime_percentile": 40.0,
    "status_memory": "5.3 MB",
    "memory_percentile": 40.0,
    "pretty_lang": "Go",
    "submission_id": "1162844602",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func canSplitArray(nums []int, m int) bool {\n    n := len(nums)\n    dp := make([][]bool, n+1)\n    prefixSum := make([]int, n+1)\n\n    // Initialize DP array\n    for i := range dp {\n        dp[i] = make([]bool, n+1)\n    }\n\n    // Calculate prefix sums for efficient sum calculations\n    for i := 1; i <= n; i++ {\n        prefixSum[i] = prefixSum[i-1] + nums[i-1]\n    }\n\n    // Single elements can always form a valid subarray\n    for i := 0; i < n; i++ {\n        dp[i][i+1] = true\n    }\n\n    // Check for every possible subarray length\n    for length := 2; length <= n; length++ {\n        for start := 0; start <= n-length; start++ {\n            end := start + length\n            // Check if we can split the current subarray into two valid parts\n            for mid := start + 1; mid < end; mid++ {\n                leftSum := prefixSum[mid] - prefixSum[start]\n                rightSum := prefixSum[end] - prefixSum[mid]\n\n                if (leftSum >= m || mid-start == 1) && (rightSum >= m || end-mid == 1) && dp[start][mid] && dp[mid][end] {\n                    dp[start][end] = true\n                    break\n                }\n            }\n        }\n    }\n\n    return dp[0][n]\n}"
}