{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2220000,
    "question_id": "2916",
    "elapsed_time": 3012,
    "compare_result": "010111011110100000011111110111111111111111100100100001011100010010110100111111111100001111101110111111010101110101011011101100101010010001000001000111110101010001100001101000000010100000100000000110010111110000110011001000000000000000101000100100001001000000110110000111100011111101000000110010100001110110000111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706781966378,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 149,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1162843898",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func canSplitArray(nums []int, m int) bool {\n    // Helper function to check if the array can be split into non-empty subarrays\n    // with each subarray sum >= m or length == 1\n    var canSplit func(int, int, int) bool\n    canSplit = func(start int, end int, splits int) bool {\n        if splits == 0 { // Check if no more splits are needed\n            return true\n        }\n        sum := 0\n        for i := start; i <= end; i++ {\n            sum += nums[i]\n            // If sum >= m, check the possibility of further splits\n            if sum >= m {\n                // Check both possibilities: taking current subarray and not taking it\n                if canSplit(i+1, end, splits-1) {\n                    return true\n                }\n            }\n        }\n        return false\n    }\n\n    totalSum := 0\n    for _, num := range nums {\n        totalSum += num\n    }\n\n    // Edge case: if total sum is less than m, it's not possible to split\n    if totalSum < m {\n        return false\n    }\n\n    // Check if it's possible to split the array into (len(nums) - 1) parts\n    // as the last part does not need to be explicitly split\n    return canSplit(0, len(nums)-1, len(nums)-1)\n}"
}