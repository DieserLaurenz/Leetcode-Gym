{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68196000,
    "question_id": "2916",
    "elapsed_time": 10927,
    "compare_result": "010111111111111111111111111111111111111111111111100000000000010010110100011111111100000111101110000000010000010101011011101100001000010000000001000111110101010001100001101000000010100000100000000110010111110000110011001000000000000000101000100100001001000000110100000001000011111101000000110010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706782539188,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 132,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162850204",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def canSplitArray(nums: List[Int], m: Int): Boolean = {\n        // Helper function to check if we can split the array from index `start` to `end` into valid subarrays\n        def canSplit(start: Int, end: Int, splits: Int): Boolean = {\n            // If we have made enough splits, check if the final segment is valid\n            if (splits == 0) {\n                return (end - start == 0) || nums.slice(start, end + 1).sum >= m\n            }\n\n            // Try to split the array at every possible position\n            for (i <- start until end) {\n                val leftSum = nums.slice(start, i + 1).sum\n                val rightSum = nums.slice(i + 1, end + 1).sum\n\n                // Check if both resulting subarrays after a split are valid\n                val leftValid = (i - start == 0) || leftSum >= m\n                val rightValid = (end - (i + 1) == 0) || rightSum >= m\n\n                // If both subarrays are valid, recursively check if further splits can be made\n                if (leftValid && rightValid) {\n                    if (canSplit(start, i, splits - 1) && canSplit(i + 1, end, splits - 1)) {\n                        return true\n                    }\n                }\n            }\n\n            // If no valid split was found, return false\n            false\n        }\n\n        // We need to make `nums.length - 1` splits to end up with `n` single-element arrays\n        canSplit(0, nums.length - 1, nums.length - 1)\n    }\n}"
}