{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59232000,
    "question_id": "2916",
    "elapsed_time": 10467,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706782660357,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 152,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162851566",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def canSplitArray(nums: List[Int], m: Int): Boolean = {\n        // Base case: if sum of all elements is less than m and length is more than 1, cannot split as required\n        if (nums.sum < m && nums.length > 1) return false\n\n        // Check if it's possible to split the array into valid subarrays\n        def isValidSplit(start: Int, end: Int, splits: Int): Boolean = {\n            // If no more splits are required, return true\n            if (splits == 0) return true\n\n            var sum = 0\n            for (i <- start until end) {\n                sum += nums(i)\n                // If sum >= m, we can attempt to split here\n                if (sum >= m) {\n                    // Check if the rest of the array can be split into the required number of subarrays\n                    if (isValidSplit(i + 1, end, splits - 1)) return true\n                }\n            }\n            false\n        }\n\n        // Attempt to split the array into (nums.length) subarrays\n        isValidSplit(0, nums.length, nums.length - 1)\n    }\n}"
}