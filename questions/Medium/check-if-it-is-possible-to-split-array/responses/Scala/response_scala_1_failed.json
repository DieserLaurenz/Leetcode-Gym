{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54572000,
    "question_id": "2916",
    "elapsed_time": 10322,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706782599388,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162850873",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n  def canSplitArray(nums: List[Int], m: Int): Boolean = {\n    // Recursive function to check if the array can be split into valid subarrays.\n    def check(parts: Int, index: Int, currentSum: Int, maxParts: Int): Boolean = {\n      if (index == nums.length) {\n        // If we've reached the end, we should have exactly `maxParts` parts.\n        return parts == maxParts && currentSum >= m\n      }\n      if (currentSum >= m) {\n        // If current sum is enough, we can choose to split here or not.\n        if (check(parts + 1, index + 1, nums(index), maxParts)) return true\n      }\n      // Continue adding to the current subarray.\n      if (check(parts, index + 1, currentSum + nums(index), maxParts)) return true\n      \n      false\n    }\n\n    // The goal is to split into `nums.length` parts, each part is a valid subarray.\n    nums.indices.exists(start => check(1, start + 1, nums(start), nums.length))\n  }\n}"
}