{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50916000,
    "question_id": "2916",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2, 2, 1]\n4",
    "expected_output": "true",
    "task_finish_time": 1706774466386,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 89,
    "total_testcases": 531,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162763159",
    "input_formatted": "[2, 2, 1], 4",
    "input": "[2, 2, 1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function canSplitArray(nums: number[], m: number): boolean {\n    // Helper function to check if it's possible to split the array into n subarrays\n    // with each subarray sum >= m (except for single-element subarrays)\n    function canSplit(start: number, subarraysCount: number, currentSum: number): boolean {\n        // Base case: If we've reached the end of the array\n        if (start == nums.length) {\n            return subarraysCount == nums.length && currentSum >= m;\n        }\n\n        // If adding the current element to the current subarray doesn't exceed the sum,\n        // continue adding to the current subarray.\n        if (currentSum + nums[start] >= m) {\n            if (canSplit(start + 1, subarraysCount + 1, 0)) {\n                return true;\n            }\n        }\n\n        // Try to start a new subarray from the next element, if it's not the last element\n        if (start + 1 < nums.length || currentSum + nums[start] >= m) {\n            if (canSplit(start + 1, subarraysCount, currentSum + nums[start])) {\n                return true;\n            }\n        }\n\n        // If none of the above work, return false\n        return false;\n    }\n\n    // Initial call to the helper function, starting from the first element\n    return canSplit(0, 0, 0);\n}"
}