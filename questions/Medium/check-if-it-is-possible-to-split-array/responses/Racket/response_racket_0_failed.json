{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 23: Char 37: read-syntax: missing `)` to close `(` on line 25, found instead `]`",
    "full_compile_error": "Line 23: Char 37: read-syntax: missing `)` to close `(` on line 25, found instead `]`\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2916",
    "task_finish_time": 1706782943991,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1162854947",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (can-split-array nums m)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  \n  ; Helper function to calculate the sum of elements in a list\n  (define (sum lst)\n    (foldl + 0 lst))\n  \n  ; Recursive function to check if the array can be split\n  (define (can-split? lst)\n    (cond\n      [(null? lst) #f] ; Cannot split an empty list\n      [(= (length lst) 1) #t] ; A single element list satisfies the condition\n      [else\n       (let loop ((i 1))\n         (if (> i (- (length lst) 1))\n             #f ; Tried all positions, cannot split\n             (let ((left (take lst i))\n                   (right (drop lst i)))\n               (or (and (or (= (length left) 1) (>= (sum left) m))\n                        (or (= (length right) 1) (>= (sum right) m))\n                        (can-split? left)\n                        (can-split? right))\n                   (loop (+ i 1)))))]))\n  \n  ; Start the recursive splitting process\n  (can-split? nums)\n)"
}