{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62688000,
    "display_runtime": "84",
    "question_id": "2834",
    "elapsed_time": 654,
    "compare_result
    "code_output": "[1,2,3]",
    "std_output": "",
    "last_testcase": "[1,1,3,3]\n[1,3]\n[2,2]",
    "expected_output": "[2]",
    "task_finish_time": 1708112581772,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1161,
    "total_testcases": 2129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1177253504",
    "input_formatted": "[1,1,3,3], [1,3], [2,2]",
    "input": "[1,1,3,3]\n[1,3]\n[2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    public List<Integer> relocateMarbles(int[] nums, int[] moveFrom, int[] moveTo) {\n        Map<Integer, Integer> marbleMap = new HashMap<>();\n        for (int num : nums) {\n            marbleMap.put(num, marbleMap.getOrDefault(num, 0) + 1);\n        }\n        for (int i = 0; i < moveFrom.length; i++) {\n            if (marbleMap.containsKey(moveFrom[i])) {\n                int count = marbleMap.get(moveFrom[i]);\n                if (count == 1) {\n                    marbleMap.remove(moveFrom[i]);\n                } else {\n                    marbleMap.put(moveFrom[i], count - 1);\n                }\n                marbleMap.put(moveTo[i], marbleMap.getOrDefault(moveTo[i], 0) + 1);\n            }\n        }\n        return marbleMap.keySet().stream().sorted().collect(Collectors.toList());\n    }\n}"
}