{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 130240000,
    "question_id": "2834",
    "elapsed_time": 735,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[3,4]\n[4,3,1,2,2,3,2,4,1]\n[3,1,2,2,3,2,4,1,1]",
    "expected_output": "[1]",
    "task_finish_time": 1708114059421,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1555,
    "total_testcases": 2129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1177268503",
    "input_formatted": "[3,4], [4,3,1,2,2,3,2,4,1], [3,1,2,2,3,2,4,1,1]",
    "input": "[3,4]\n[4,3,1,2,2,3,2,4,1]\n[3,1,2,2,3,2,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (relocate-marbles nums moveFrom moveTo)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  (let ([marble-positions (make-hash)])\n    ;; Initialize positions with marbles\n    (for ([num nums])\n      (hash-update! marble-positions num add1 0))\n    ;; Process moves\n    (for ([from moveFrom] [to moveTo])\n      (let ([count (hash-ref marble-positions from 0)])\n        (when (> count 0)\n          (hash-update! marble-positions to (lambda (old) (+ old count)) 0)\n          (hash-remove! marble-positions from))))\n    ;; Return sorted list of occupied positions\n    (sort (hash-keys marble-positions) <)))"
}