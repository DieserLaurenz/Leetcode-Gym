{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 493436000,
    "question_id": "2834",
    "elapsed_time": 3033,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[3,4]\n[4,3,1,2,2,3,2,4,1]\n[3,1,2,2,3,2,4,1,1]",
    "expected_output": "[1]",
    "task_finish_time": 1708112666462,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 2129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177254353",
    "input_formatted": "[3,4], [4,3,1,2,2,3,2,4,1], [3,1,2,2,3,2,4,1,1]",
    "input": "[3,4]\n[4,3,1,2,2,3,2,4,1]\n[3,1,2,2,3,2,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* relocateMarbles(int* nums, int numsSize, int* moveFrom, int moveFromSize, int* moveTo, int moveToSize, int* returnSize){\n    int* hashTable = (int*)calloc(1000000000, sizeof(int));\n    int maxVal = 0;\n    for(int i = 0; i < numsSize; i++){\n        hashTable[nums[i]] += 1;\n        if(nums[i] > maxVal){\n            maxVal = nums[i];\n        }\n    }\n    for(int i = 0; i < moveFromSize; i++){\n        if(hashTable[moveFrom[i]] > 0){\n            hashTable[moveTo[i]] += hashTable[moveFrom[i]];\n            hashTable[moveFrom[i]] = 0;\n            if(moveTo[i] > maxVal){\n                maxVal = moveTo[i];\n            }\n        }\n    }\n    int occupiedCount = 0;\n    for(int i = 1; i <= maxVal; i++){\n        if(hashTable[i] > 0){\n            occupiedCount++;\n        }\n    }\n    *returnSize = occupiedCount;\n    int* result = (int*)malloc(occupiedCount * sizeof(int));\n    int index = 0;\n    for(int i = 1; i <= maxVal; i++){\n        if(hashTable[i] > 0){\n            result[index++] = i;\n        }\n    }\n    free(hashTable);\n    return result;\n}"
}