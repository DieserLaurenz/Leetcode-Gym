{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39028000,
    "question_id": "2834",
    "elapsed_time": 3021,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[3,4]\n[4,3,1,2,2,3,2,4,1]\n[3,1,2,2,3,2,4,1,1]",
    "expected_output": "[1]",
    "task_finish_time": 1708112763441,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 582,
    "total_testcases": 2129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177255335",
    "input_formatted": "[3,4], [4,3,1,2,2,3,2,4,1], [3,1,2,2,3,2,4,1,1]",
    "input": "[3,4]\n[4,3,1,2,2,3,2,4,1]\n[3,1,2,2,3,2,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* relocateMarbles(int* nums, int numsSize, int* moveFrom, int moveFromSize, int* moveTo, int moveToSize, int* returnSize) {\n    // Create a map to track the final positions of marbles.\n    int* map = (int*)calloc(1000001, sizeof(int)); // Assuming 1 <= nums[i], moveFrom[i], moveTo[i] <= 10^9 and using a smaller size for demonstration\n    for (int i = 0; i < numsSize; i++) {\n        map[nums[i]]++;\n    }\n    for (int i = 0; i < moveFromSize; i++) {\n        if (map[moveFrom[i]] > 0) { // Check if there are marbles to move\n            map[moveTo[i]] += map[moveFrom[i]]; // Move marbles\n            map[moveFrom[i]] = 0; // Remove marbles from original position\n        }\n    }\n    int count = 0;\n    for (int i = 0; i < 1000001; i++) { // Count final occupied positions\n        if (map[i] > 0) count++;\n    }\n    *returnSize = count;\n    int* result = (int*)malloc(count * sizeof(int));\n    for (int i = 0, j = 0; i < 1000001; i++) { // Collect final occupied positions\n        if (map[i] > 0) {\n            result[j++] = i;\n        }\n    }\n    free(map); // Free the allocated memory for the map\n    return result;\n}"
}