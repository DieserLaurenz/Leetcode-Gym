{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 4: ** (ArgumentError) argument error",
    "full_runtime_error": "Line 4: ** (ArgumentError) argument error\n    (stdlib 5.1.1) :maps.from_list([1, 6, 7, 8])\n    (elixir 1.15.7) lib/enum.ex:1521: Enum.into_map/1\n    solution.ex:4: Solution.relocate_marbles/3\n    solution.ex:42: Driver.consume_test_cases/2\n    solution.ex:26: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 75068000,
    "question_id": "2834",
    "elapsed_time": 443,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,6,7,8]\n[1,7,2]\n[2,9,5]",
    "expected_output": "[5,6,8,9]",
    "task_finish_time": 1708114267569,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177270616",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec relocate_marbles(nums :: [integer], move_from :: [integer], move_to :: [integer]) :: [integer]\n  def relocate_marbles(nums, move_from, move_to) do\n    final_positions = Enum.reduce(Enum.zip(move_from, move_to), Enum.into(nums, %{}), fn {from, to}, acc ->\n      if Map.has_key?(acc, from) do\n        acc\n        |> Map.update!(from, fn count -> count - 1 end)\n        |> Map.update(to, 1, &(&1 + 1))\n      else\n        acc\n      end\n    end)\n    |> Enum.filter(fn {_pos, count} -> count > 0 end)\n    |> Enum.map(fn {pos, _count} -> pos end)\n    |> Enum.sort()\n\n    case Enum.empty?(final_positions) do\n      true -> nums |> Enum.uniq() |> Enum.sort()\n      false -> final_positions\n    end\n  end\nend"
}