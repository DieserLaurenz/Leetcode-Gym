{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 208852000,
    "question_id": "2834",
    "elapsed_time": 2316,
    "compare_result
    "code_output": "[1,2,5,6,7,8,9]",
    "std_output": "",
    "last_testcase": "[1,6,7,8]\n[1,7,2]\n[2,9,5]",
    "expected_output": "[5,6,8,9]",
    "task_finish_time": 1708114227152,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 191,
    "total_testcases": 2129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177270188",
    "input_formatted": "[1,6,7,8], [1,7,2], [2,9,5]",
    "input": "[1,6,7,8]\n[1,7,2]\n[2,9,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec relocate_marbles(nums :: [integer], move_from :: [integer], move_to :: [integer]) :: [integer]\n  def relocate_marbles(nums, move_from, move_to) do\n    moves = Enum.zip(move_from, move_to)\n    |> Enum.reduce(%{}, fn {from, to}, acc ->\n      Map.update(acc, from, -1, &(&1 - 1))\n      |> Map.update(to, 1, &(&1 + 1))\n    end)\n\n    nums\n    |> Enum.concat(moves |> Map.keys())\n    |> Enum.reduce(%{}, fn num, acc ->\n      Map.update(acc, num, 1, &(&1 + 1))\n    end)\n    |> Enum.filter(fn {_, v} -> v > 0 end)\n    |> Enum.map(fn {k, _} -> k end)\n    |> Enum.uniq()\n    |> Enum.sort()\n  end\nend"
}