{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64988000,
    "question_id": "2828",
    "elapsed_time": 1346,
    "compare_result
    "code_output": "\"cbabc\"",
    "std_output": "",
    "last_testcase": "\"cbabc\"",
    "expected_output": "\"baabc\"",
    "task_finish_time": 1707515162206,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2241,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1170968092",
    "input_formatted": "\"cbabc\"",
    "input": "\"cbabc\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec smallest_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_string(S) ->\n    FirstNonA = case re:run(S, \"[b-z]\", [{capture, first, binary}]) of\n                    {match, [Match]} -> Match;\n                    nomatch -> <<>>\n                end,\n    case FirstNonA of\n        <<>> -> S; % If there's no b-z, return S as it's all 'a's\n        _ ->\n            Before = binary_part(S, 0, size(FirstNonA)),\n            [FirstChar|_] = binary_to_list(FirstNonA),\n            NewChar = case FirstChar of\n                          $a -> $z;\n                          _ -> FirstChar - 1\n                      end,\n            After = binary_part(S, size(Before) + 1, byte_size(S) - size(Before) - 1),\n            <<Before/binary, NewChar, After/binary>>\n    end."
}