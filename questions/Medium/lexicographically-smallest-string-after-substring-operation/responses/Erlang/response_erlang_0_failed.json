{
    "status_code": 20,
    "lang": "erlang",
    "run_success": false,
    "compile_error": "Line 10: Char 30: variable 'SmallestString' is unbound",
    "full_compile_error": "Line 10: Char 30: variable 'SmallestString' is unbound\n%   10|                              SmallestString(T, Acc ++ [NewChar])\n%     |                              ^\nLine 19: Char 9: variable 'Start' unsafe in 'case' (line 16, column 17)\n%   19|         Start ->\n%     |         ^",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2828",
    "task_finish_time": 1707515101428,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1170967617",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "-spec smallest_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nsmallest_string(S) ->\n    SmallestString = fun(Str, Acc) when length(Str) =:= 0 -> Acc;\n                         (Str, Acc) ->\n                             [H|T] = Str,\n                             NewChar = case H of\n                                           $a -> $z;\n                                           _ -> H - 1\n                                       end,\n                             SmallestString(T, Acc ++ [NewChar])\n                     end,\n    FirstNonA = case re:run(S, \"[b-z]\", [{capture, first, list}]) of\n                    {match, [{Start, _}]} -> Start;\n                    nomatch -> -1\n                end,\n    case FirstNonA of\n        -1 -> SmallestString(binary_to_list(S), []);\n        0 -> binary_to_list(S);\n        Start ->\n            Before = binary_part(S, {0, Start}),\n            ToChange = binary_part(S, {Start, byte_size(S) - Start}),\n            Before ++ SmallestString(binary_to_list(ToChange), [])\n    end."
}