{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 7: ** (ArgumentError) ranges (first..last) expect both sides to be integers, got: \"c\"..\"c\"",
    "full_runtime_error": "Line 7: ** (ArgumentError) ranges (first..last) expect both sides to be integers, got: \"c\"..\"c\"\n    (elixir 1.15.7) lib/range.ex:193: Range.new/2\n    solution.ex:7: anonymous fn/3 in Solution.smallest_string/1\n    (elixir 1.15.7) lib/enum.ex:4830: Enumerable.List.reduce/3\n    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3\n    solution.ex:33: Driver.consume_test_cases/2\n    solution.ex:21: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 76400000,
    "question_id": "2828",
    "elapsed_time": 460,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"cbabc\"",
    "expected_output": "\"baabc\"",
    "task_finish_time": 1707515419503,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2241,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1170969912",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec smallest_string(s :: String.t) :: String.t\n  def smallest_string(s) do\n    s\n    |> String.graphemes()\n    |> Enum.reduce_while(\"\", fn char, acc ->\n      if char == \"a\", do: {:cont, acc <> \"a\"}, else: {:halt, acc <> Enum.map_join(char..char, \"\", &shift_char/1) <> String.slice(s, String.length(acc) + 1)}\n    end)\n  end\n\n  defp shift_char(\"a\"), do: \"z\"\n  defp shift_char(char) do\n    [char]\n    |> Enum.map(&(&1 - 1))\n    |> List.to_string()\n  end\nend"
}