{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 11: ** (FunctionClauseError) no function clause matching in String.slice/2",
    "full_runtime_error": "Line 11: ** (FunctionClauseError) no function clause matching in String.slice/2\n    The following arguments were given to String.slice/2:\n        # 1\n        \"cbabc\"\n        # 2\n        1\n    Attempted function clauses (showing 2 out of 2):\n        def slice(+string+, -first..last//step = range-) when +is_binary(string)+\n        def slice(+string+, -%{__struct__: Range, first: first, last: last} = range-) when +is_binary(string)+\n    (elixir 1.15.7) lib/string.ex:2241: String.slice/2\n    solution.ex:11: anonymous fn/3 in Solution.smallest_string/1\n    (elixir 1.15.7) lib/enum.ex:4830: Enumerable.List.reduce/3\n    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3\n    solution.ex:33: Driver.consume_test_cases/2\n    solution.ex:21: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 78588000,
    "question_id": "2828",
    "elapsed_time": 579,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"cbabc\"",
    "expected_output": "\"baabc\"",
    "task_finish_time": 1707515399175,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2241,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1170969769",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec smallest_string(s :: String.t) :: String.t\n  def smallest_string(s) do\n    s\n    |> String.graphemes()\n    |> Enum.with_index()\n    |> Enum.reduce_while(\"\", fn {char, index}, acc ->\n      new_char = \n        if index == 0 or (char != \"a\" and acc <> String.at(s, index - 1) < char), do: shift_char(char), else: char\n        \n      if new_char < char, do: {:halt, acc <> new_char <> String.slice(s, index + 1)}, else: {:cont, acc <> char}\n    end)\n  end\n\n  defp shift_char(\"a\"), do: \"z\"\n  defp shift_char(char), do: String.to_charlist(char) |> Enum.map(&(&1 - 1)) |> List.to_string()\nend"
}