{
    "acRate": 48.09589672660212,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2925",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Maximum Score After Applying Operations on a Tree",
    "titleSlug": "maximum-score-after-applying-operations-on-a-tree",
    "topicTags": [
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Tree",
            "id": "VG9waWNUYWdOb2RlOjIw",
            "slug": "tree"
        },
        {
            "name": "Depth-First Search",
            "id": "VG9waWNUYWdOb2RlOjIx",
            "slug": "depth-first-search"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long maximumScoreAfterOperations(vector<vector<int>>& edges, vector<int>& values) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long maximumScoreAfterOperations(int[][] edges, int[] values) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def maximumScoreAfterOperations(self, edges, values):         \"\"\"         :type edges: List[List[int]]         :type values: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def maximumScoreAfterOperations(self, edges: List[List[int]], values: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long maximumScoreAfterOperations(int** edges, int edgesSize, int* edgesColSize, int* values, int valuesSize) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long MaximumScoreAfterOperations(int[][] edges, int[] values) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} edges  * @param {number[]} values  * @return {number}  */ var maximumScoreAfterOperations = function(edges, values) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maximumScoreAfterOperations(edges: number[][], values: number[]): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $edges      * @param Integer[] $values      * @return Integer      */     function maximumScoreAfterOperations($edges, $values) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func maximumScoreAfterOperations(_ edges: [[Int]], _ values: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun maximumScoreAfterOperations(edges: Array<IntArray>, values: IntArray): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int maximumScoreAfterOperations(List<List<int>> edges, List<int> values) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maximumScoreAfterOperations(edges [][]int, values []int) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} edges # @param {Integer[]} values # @return {Integer} def maximum_score_after_operations(edges, values)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def maximumScoreAfterOperations(edges: Array[Array[Int]], values: Array[Int]): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn maximum_score_after_operations(edges: Vec<Vec<i32>>, values: Vec<i32>) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (maximum-score-after-operations edges values)   (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec maximum_score_after_operations(Edges :: [[integer()]], Values :: [integer()]) -> integer(). maximum_score_after_operations(Edges, Values) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec maximum_score_after_operations(edges :: [[integer]], values :: [integer]) :: integer   def maximum_score_after_operations(edges, values) do        end end"
        }
    ],
    "content": "There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are givena 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node. You start with a score of 0. In one operation, you can:  Pick any node i. Add values[i] to your score. Set values[i] to 0.  A tree is healthy if the sum of values on the path from the root to any leaf node is different than zero. Return the maximum score you can obtain after performing these operations on the tree any number of times so that it remains healthy.  Example 1:   Input: edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1] Output: 11 Explanation: We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11. It can be shown that 11 is the maximum score obtainable after any number of operations on the tree.  Example 2:   Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5] Output: 40 Explanation: We can choose nodes 0, 2, 3, and 4. - The sum of values on the path from 0 to 4 is equal to 10. - The sum of values on the path from 0 to 3 is equal to 10. - The sum of values on the path from 0 to 5 is equal to 3. - The sum of values on the path from 0 to 6 is equal to 5. Therefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40. It can be shown that 40 is the maximum score obtainable after any number of operations on the tree.   Constraints:  2 <= n <= 2 * 104 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n values.length == n 1 <= values[i] <= 109 The input is generated such that edges represents a valid tree.  "
}