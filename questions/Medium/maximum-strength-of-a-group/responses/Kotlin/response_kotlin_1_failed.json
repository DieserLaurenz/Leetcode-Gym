{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40108000,
    "question_id": "2754",
    "elapsed_time": 266,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[-9]",
    "expected_output": "-9",
    "task_finish_time": 1707649724303,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1916,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1172228460",
    "input_formatted": "[-9]",
    "input": "[-9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxStrength(nums: IntArray): Long {\n        // Convert nums to a list of Longs for larger product calculation\n        val longNums = nums.map { it.toLong() }.sorted()\n\n        // Separate positive and negative numbers\n        val positives = longNums.filter { it > 0 }\n        val negatives = longNums.filter { it < 0 }\n\n        // Compute the product of positives\n        val positiveProduct = positives.fold(1L) { acc, num -> acc * num }\n\n        // Handle negatives: if odd number of negatives, exclude the largest (which is closest to zero)\n        val negativeProduct = if (negatives.size % 2 == 1) {\n            negatives.dropLast(1).fold(1L) { acc, num -> acc * num }\n        } else {\n            negatives.fold(1L) { acc, num -> acc * num }\n        }\n\n        // Consider zero case: if there are no positives and at least one zero, result is 0\n        // because including a zero in the product would maximize the strength to 0\n        if (positives.isEmpty() && longNums.contains(0L)) {\n            return 0\n        }\n\n        // Calculate the final product, considering only positive or only negative or both\n        return if (negatives.isEmpty()) {\n            positiveProduct\n        } else {\n            positiveProduct * negativeProduct\n        }\n    }\n}"
}