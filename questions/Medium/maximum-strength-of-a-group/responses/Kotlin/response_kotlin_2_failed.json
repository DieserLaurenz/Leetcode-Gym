{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41356000,
    "question_id": "2754",
    "elapsed_time": 267,
    "compare_result
    "code_output": "-675",
    "std_output": "",
    "last_testcase": "[3,-1,-5,2,5,-9]",
    "expected_output": "1350",
    "task_finish_time": 1707649752716,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1049,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1172228714",
    "input_formatted": "[3,-1,-5,2,5,-9]",
    "input": "[3,-1,-5,2,5,-9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxStrength(nums: IntArray): Long {\n        // Special case for single negative number\n        if (nums.size == 1) return nums[0].toLong()\n\n        val sortedNums = nums.sortedBy { Math.abs(it) }\n        var result = 1L\n        var hasPositive = false\n        var smallestPositive = Int.MAX_VALUE\n        var largestNegative = Int.MIN_VALUE\n\n        for (num in sortedNums) {\n            if (num > 0) {\n                hasPositive = true\n                smallestPositive = Math.min(smallestPositive, num)\n            }\n            if (num < 0) {\n                largestNegative = Math.max(largestNegative, num)\n            }\n            result *= num\n        }\n\n        // If result is positive or there's no positive number and result is negative (even count of negatives)\n        if (result > 0 || (!hasPositive && result < 0 && nums.count { it < 0 } % 2 == 0)) {\n            return result\n        }\n\n        // If all negatives and odd count, remove the negative closest to zero\n        if (!hasPositive) {\n            return result / largestNegative\n        }\n\n        // If mixed and result is negative, adjust based on smallest positive or largest negative\n        if (result < 0) {\n            if (Math.abs(smallestPositive) < Math.abs(largestNegative)) {\n                return result / largestNegative\n            } else {\n                return result / smallestPositive\n            }\n        }\n\n        return result\n    }\n}"
}