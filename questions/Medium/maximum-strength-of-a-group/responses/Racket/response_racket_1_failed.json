{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101116000,
    "question_id": "2754",
    "elapsed_time": 273,
    "compare_result
    "code_output": "150",
    "std_output": "",
    "last_testcase": "[3,-1,-5,2,5,-9]",
    "expected_output": "1350",
    "task_finish_time": 1707658880613,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 995,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172317913",
    "input_formatted": "[3,-1,-5,2,5,-9]",
    "input": "[3,-1,-5,2,5,-9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (max-strength nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([sorted (sort nums >)])\n    (let loop ([nums sorted] [max-product (if (>= (car nums) 0) (car nums) 0)] [current-product 1])\n      (if (null? nums)\n          max-product\n          (let* ([n (car nums)]\n                 [new-product (* current-product n)])\n            (cond\n              [(> new-product 0)\n               (loop (cdr nums) (max max-product new-product) new-product)]\n              [else\n               (loop (cdr nums) max-product new-product)]))))))"
}