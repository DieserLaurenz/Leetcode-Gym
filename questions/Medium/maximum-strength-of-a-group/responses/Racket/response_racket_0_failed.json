{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 100016000,
    "question_id": "2754",
    "elapsed_time": 317,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "[3,-1,-5,2,5,-9]",
    "expected_output": "1350",
    "task_finish_time": 1707658850882,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 440,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172317553",
    "input_formatted": "[3,-1,-5,2,5,-9]",
    "input": "[3,-1,-5,2,5,-9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (max-strength nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let loop ((nums nums) (max-so-far 0) (current-multiplier 1) (has-positive #f) (min-negative #f) (count-negative 0))\n    (cond\n      [(null? nums)\n       (if (and (not has-positive) (odd? count-negative))\n           (if min-negative (* max-so-far min-negative) 0)\n           max-so-far)]\n      [else\n       (let ((n (car nums)))\n         (cond\n           [(> n 0)\n            (loop (cdr nums) (max max-so-far (* current-multiplier n)) (* current-multiplier n) #t min-negative count-negative)]\n           [(< n 0)\n            (loop (cdr nums) max-so-far current-multiplier has-positive\n                  (if (or (not min-negative) (> n min-negative)) n min-negative)\n                  (+ count-negative 1))]\n           [else\n            (loop (cdr nums) max-so-far current-multiplier has-positive min-negative count-negative)]))])))"
}