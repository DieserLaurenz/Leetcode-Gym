{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "application: not a procedure;",
    "full_runtime_error": "application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 30\n  context...:\n   /usr/share/racket/collects/racket/private/list.rkt:248:4: foldl\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:20:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99924000,
    "question_id": "2754",
    "elapsed_time": 326,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,-1,-5,2,5,-9]",
    "expected_output": "1350",
    "task_finish_time": 1707658910624,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172318197",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (max-strength nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (define (product lst)\n    (foldl * 1 lst))\n  (define (all-combinations lst)\n    (if (null? lst)\n        '(())\n        (let ((rest (all-combinations (cdr lst))))\n          (append rest (map (lambda (x) (cons (car lst) x)) rest)))))\n  (define (max-product combinations)\n    (foldl (lambda (combo max)\n             (max max (product combo)))\n           (product (filter (lambda (x) (> x 0)) nums)) ; Base case: product of all positive numbers\n           combinations))\n  (max-product (all-combinations nums)))"
}