{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59068000,
    "question_id": "2754",
    "elapsed_time": 1836,
    "compare_result
    "code_output": "150",
    "std_output": "",
    "last_testcase": "[3,-1,-5,2,5,-9]",
    "expected_output": "1350",
    "task_finish_time": 1707659004788,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1217,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1172319222",
    "input_formatted": "[3,-1,-5,2,5,-9]",
    "input": "[3,-1,-5,2,5,-9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_strength(Nums :: [integer()]) -> integer().\nmax_strength(Nums) ->\n    Sorted = lists:sort(Nums),\n    Filtered = lists:filter(fun(X) -> X /= 0 end, Sorted),\n    NegCount = length([X || X <- Filtered, X < 0]),\n    case {NegCount rem 2, lists:member(0, Nums)} of\n        {0, _} -> lists:foldl(fun(X, Acc) -> X * Acc end, 1, Filtered);\n        {1, false} -> lists:foldl(fun(X, Acc) -> X * Acc end, 1, tl(Filtered));\n        {1, true} -> lists:foldl(fun(X, Acc) -> X * Acc end, 1, Filtered)\n    end."
}