{
    "status_code": 20,
    "lang": "erlang",
    "run_success": false,
    "compile_error": "Line 11: Char 57: syntax error before: true",
    "full_compile_error": "Line 11: Char 57: syntax error before: true\n%   11|     lists:foldl(fun(X, Acc) when Acc == 0; X == 0 -> 0; true -> X * Acc end, 1, AllNums).\n%     |                                                         ^\nLine 1: Char 2: spec for undefined function max_strength/1\n%    1| -spec max_strength(Nums :: [integer()]) -> integer().\n%     |  ^\nLine 27: Char 13: function max_strength/1 undefined\n%   27|       Ret = max_strength(Param_1),\n%     |             ^",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2754",
    "task_finish_time": 1707659025683,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1172319489",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "-spec max_strength(Nums :: [integer()]) -> integer().\nmax_strength(Nums) ->\n    Positives = [X || X <- Nums, X > 0],\n    Negatives = lists:sort([X || X <- Nums, X < 0]),\n    NegLen = length(Negatives),\n    MaxNeg = if \n                NegLen rem 2 == 0 -> Negatives; \n                true -> tl(Negatives) \n             end,\n    AllNums = Positives ++ MaxNeg,\n    lists:foldl(fun(X, Acc) when Acc == 0; X == 0 -> 0; true -> X * Acc end, 1, AllNums)."
}