{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43436000,
    "display_runtime": "1",
    "question_id": "2754",
    "elapsed_time": 133,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,2,7,0,-4,9,4]",
    "expected_output": "1008",
    "task_finish_time": 1707639421507,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1770,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1172132452",
    "input_formatted": "[2,2,7,0,-4,9,4]",
    "input": "[2,2,7,0,-4,9,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long maxStrength(int[] nums) {\n        long maxPositiveProduct = 0;\n        long maxNegativeProduct = Long.MIN_VALUE;\n        long product = 1;\n        int negativeCount = 0;\n        int zeroCount = 0;\n        int maxNegative = Integer.MIN_VALUE;\n        for (int num : nums) {\n            if (num > 0) {\n                maxPositiveProduct = Math.max(maxPositiveProduct, num); // Initialize maxPositiveProduct for single positive number case\n                product *= num;\n            } else if (num < 0) {\n                negativeCount++;\n                maxNegative = Math.max(maxNegative, num);\n                product *= num;\n            } else {\n                zeroCount++;\n            }\n        }\n        if (negativeCount % 2 == 0) {\n            maxNegativeProduct = product;\n        } else if (negativeCount > 1) {\n            maxNegativeProduct = product / maxNegative;\n        }\n\n        if (negativeCount == 0 && zeroCount == nums.length) {\n            return 0; // All zeros\n        }\n\n        if (product > 0) { // All positives or even number of negatives\n            maxPositiveProduct = product;\n        } else if (zeroCount > 0 && (negativeCount == 0 || negativeCount == 1)) {\n            maxPositiveProduct = 0; // At least one zero and at most one negative\n        }\n\n        return Math.max(maxPositiveProduct, maxNegativeProduct);\n    }\n}"
}