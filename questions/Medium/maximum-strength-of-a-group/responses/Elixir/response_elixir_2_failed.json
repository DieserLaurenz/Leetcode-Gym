{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72052000,
    "question_id": "2754",
    "elapsed_time": 605,
    "compare_result": "00110110110000000110010100001011111111110011011111001111000011010100110001011111100110011111101111110001000110101000101110101100000110011100111111011100000010010111100001111001100101111111100100101000000001101010011011110011101001100010100101010000011011011001101010010010111111110100101001001011100000110100100111101101010101101000111101000111100010100110111100111110001010000011100101111011100010100011011110001101111111110000001101101011000110010010110000001001101001100110111111101000110111100111010110001111101000000111000100110010110100010100011111010110110111110100111000000111010011011000001111111111011110000110101111001110000101101101110010010111111101110110001011110111011001011011010110111100110001010011100100101000010101110101100010001100011011011001001111010001100111111111000000101011011111011111101100010110101001111001010001011110011110111101111010000111100110000110011010100010111101111010000000001000101000111110001011011000110100011000010000001111101010000110110100101101101111000110000100010110101100001110101001111110101011000110000001111000110101101010101010111111111000111000000110001111111001101110001111011110111111101000110000101001101101011100111000100001110111111011010110001000101100100011010111011111101011100010100001010110111011101010000001000101110011100010010110011111111011111011100011110101000011010001001101100010110101100010111010010011100001011011010111101110100111101011110001011000010111001100010101111001110110101001011000110111110101110100000110001101011101001111011011111000101001100011000111011001011101011010001010010111101011101101100110101011000010010101100011011101110111111000000111111101011110001010001011111100000110001101010001111011011010010011011110111101100110100111001111011001000000110111010101010101111011110011000000111110001110100001101001011010010010011011110001110001100110011101110001111000110100101111011111111101110011010001101100111100011010101111000110011101000001011011110010011111110101011101010110110101011011001101110101110101101101111110",
    "code_output": "-1350",
    "std_output": "",
    "last_testcase": "[3,-1,-5,2,5,-9]",
    "expected_output": "1350",
    "task_finish_time": 1707659259412,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1097,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1172321991",
    "input_formatted": "[3,-1,-5,2,5,-9]",
    "input": "[3,-1,-5,2,5,-9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_strength(nums :: [integer]) :: integer\n  def max_strength(nums) do\n    sorted = Enum.sort(nums)\n    negs = Enum.filter(sorted, &(&1 < 0))\n    pos = Enum.filter(sorted, &(&1 > 0))\n    neg_count = length(negs)\n\n    if neg_count |> rem(2) == 1 and neg_count != length(sorted) do\n      negs = Enum.drop(negs, -1)\n    end\n\n    max_neg = Enum.reduce(negs, 1, &(&1 * &2))\n    max_pos = Enum.reduce(pos, 1, &(&1 * &2))\n\n    if Enum.empty?(pos) and Enum.member?(nums, 0) do\n      0\n    else\n      max_neg * max_pos\n    end\n  end\nend"
}