{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54216000,
    "question_id": "2754",
    "elapsed_time": 104,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[0,-1]",
    "expected_output": "0",
    "task_finish_time": 1707648831101,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1752,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1172219945",
    "input_formatted": "[0,-1]",
    "input": "[0,-1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxStrength = function(nums) {\n    // Sort the array to handle negative and positive numbers properly\n    nums.sort((a, b) => Math.abs(b) - Math.abs(a));\n    let maxProduct = nums[0];\n    let tempProduct = 1;\n    let hasPositive = false;\n    let firstNegative = null;\n    let lastNegative = null;\n\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > 0) {\n            hasPositive = true;\n            tempProduct *= nums[i];\n        } else if (nums[i] < 0) {\n            if (firstNegative === null) firstNegative = i;\n            lastNegative = i;\n            tempProduct *= nums[i];\n        }\n    }\n\n    if (tempProduct < 0) {\n        // If the overall product is negative, try to make it positive by excluding\n        // either the first or the last negative number encountered (whichever maximizes the product)\n        if (firstNegative !== null && lastNegative !== null && firstNegative !== lastNegative) {\n            let productExcludingFirstNegative = tempProduct / nums[firstNegative];\n            let productExcludingLastNegative = tempProduct / nums[lastNegative];\n            tempProduct = Math.max(productExcludingFirstNegative, productExcludingLastNegative);\n        } else if (!hasPositive) {\n            // If there are no positive numbers, the max product can only be negative\n            // and should be the largest (least negative) single value\n            return nums[0];\n        }\n    }\n\n    return hasPositive || firstNegative !== lastNegative ? tempProduct : maxProduct;\n};"
}