{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11596000,
    "question_id": "2754",
    "elapsed_time": 53,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "[3,-1,-5,2,5,-9]",
    "expected_output": "1350",
    "task_finish_time": 1708797790120,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1306,
    "total_testcases": 2012,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185044487",
    "input_formatted": "[3,-1,-5,2,5,-9]",
    "input": "[3,-1,-5,2,5,-9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxStrength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        if nums[-1] <= 0:\n            return nums[-1]\n        pos_product = 1\n        neg_product = float('inf')\n        for num in nums:\n            if num > 0:\n                pos_product *= num\n            if num < 0:\n                if neg_product == float('inf'):\n                    neg_product = num\n                else:\n                    neg_product *= num\n        if len(nums) > 1 and neg_product != float('inf'):\n            return max(pos_product, neg_product * pos_product)\n        return pos_product"
}