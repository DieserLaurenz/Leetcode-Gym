{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 77700000,
    "question_id": "3166",
    "elapsed_time": 168,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707855808799,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 20,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1174515824",
    "input_formatted": "[3,2,3,2,3]",
    "input": "[3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minGroupsForValidAssignment(nums: number[]): number {\n    const freqMap = new Map<number, number>();\n    nums.forEach(num => {\n        freqMap.set(num, (freqMap.get(num) || 0) + 1);\n    });\n\n    const frequencies = Array.from(freqMap.values()).sort((a, b) => a - b);\n    let groups = 0, i = 0;\n\n    while (i < frequencies.length) {\n        let count = 1, j = i + 1;\n        while (j < frequencies.length && frequencies[j] === frequencies[i]) {\n            count++;\n            j++;\n        }\n        groups = Math.max(groups, Math.ceil(count / 2));\n        i = j;\n    }\n\n    return groups;\n};"
}