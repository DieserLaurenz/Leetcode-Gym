{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6060000,
    "question_id": "3166",
    "elapsed_time": 108,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[10,10,10,3,1,1]",
    "expected_output": "4",
    "task_finish_time": 1707855469055,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 125,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1174512420",
    "input_formatted": "[10,10,10,3,1,1]",
    "input": "[10,10,10,3,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int minGroupsForValidAssignment(int* nums, int numsSize) {\n    int count[100001] = {0}, maxCount = 0;\n    for (int i = 0; i < numsSize; i++) {\n        count[nums[i]]++;\n        if (count[nums[i]] > maxCount) {\n            maxCount = count[nums[i]];\n        }\n    }\n    int evenGroups = 0, oddGroups = 0;\n    for (int i = 0; i < 100001; i++) {\n        if (count[i] == 0) continue;\n        if (count[i] % 2 == 0) {\n            evenGroups += count[i] / 2;\n        } else {\n            oddGroups += (count[i] + 1) / 2;\n        }\n    }\n    return (evenGroups >= oddGroups) ? evenGroups : oddGroups;\n}"
}