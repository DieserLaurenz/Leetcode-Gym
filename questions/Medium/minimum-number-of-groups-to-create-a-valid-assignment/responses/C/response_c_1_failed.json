{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6720000,
    "question_id": "3166",
    "elapsed_time": 119,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707855498642,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 74,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1174512722",
    "input_formatted": "[3,2,3,2,3]",
    "input": "[3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int minGroupsForValidAssignment(int* nums, int numsSize) {\n    int freq[100001] = {0}, maxFreq = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        freq[nums[i]]++;\n        if (freq[nums[i]] > maxFreq) {\n            maxFreq = freq[nums[i]];\n        }\n    }\n    int groupCounts[100001] = {0};\n    for (int i = 0; i < 100001; ++i) {\n        if (freq[i] > 0) {\n            groupCounts[freq[i]]++;\n        }\n    }\n    int groupsNeeded = 0, remaining = 0;\n    for (int i = maxFreq; i > 0; --i) {\n        groupsNeeded += (groupCounts[i] + remaining) / (i + 1);\n        remaining = (groupCounts[i] + remaining) % (i + 1);\n        if (remaining > 0) {\n            groupsNeeded++;\n            remaining = i + 1 - remaining;\n        }\n    }\n    return groupsNeeded;\n}"
}