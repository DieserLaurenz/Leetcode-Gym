{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 216156000,
    "question_id": "3166",
    "elapsed_time": 2264,
    "compare_result": "101100000001110001110010111101111111011111111000001100000000000000000010000000100010000000000000000000000001000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110111000000001000110000000",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[10,10,10,3,1,1]",
    "expected_output": "4",
    "task_finish_time": 1707865805527,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 46,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174602651",
    "input_formatted": "[10,10,10,3,1,1]",
    "input": "[10,10,10,3,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_groups_for_valid_assignment(Nums :: [integer()]) -> integer().\nmin_groups_for_valid_assignment(Nums) ->\n    Counts = lists:foldl(fun(X, Acc) -> maps:update_with(X, fun(C) -> C + 1 end, 1, Acc) end, #{}, Nums),\n    SortedCounts = lists:sort(maps:values(Counts)),\n    GroupCount = lists:foldl(fun(C, {Groups, PrevCount}) ->\n                                 if\n                                     C == PrevCount -> {Groups, C};\n                                     true -> {Groups + 1, C}\n                                 end\n                             end, {0, -1}, SortedCounts),\n    element(1, GroupCount)."
}