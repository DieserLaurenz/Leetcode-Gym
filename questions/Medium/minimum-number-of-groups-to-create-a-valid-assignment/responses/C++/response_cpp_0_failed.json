{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 132536000,
    "question_id": "3166",
    "elapsed_time": 245,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[10,10,10,3,1,1]",
    "expected_output": "4",
    "task_finish_time": 1707855248833,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 93,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1174509965",
    "input_formatted": "[10,10,10,3,1,1]",
    "input": "[10,10,10,3,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minGroupsForValidAssignment(vector<int>& nums) {\n        unordered_map<int, int> freq;\n        for (int num : nums) {\n            ++freq[num];\n        }\n        priority_queue<int, vector<int>, greater<int>> pq;\n        for (auto& [_, count] : freq) {\n            pq.push(count);\n        }\n        int groups = 0;\n        while (!pq.empty()) {\n            int top = pq.top();\n            pq.pop();\n            ++groups;\n            if (!pq.empty() && pq.top() == top) {\n                pq.pop();\n                if (top - 1 > 0) pq.push(top - 1);\n            }\n        }\n        return groups;\n    }\n};"
}