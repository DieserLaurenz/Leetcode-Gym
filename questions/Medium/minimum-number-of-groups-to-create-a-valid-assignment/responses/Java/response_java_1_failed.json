{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63812000,
    "display_runtime": "64",
    "question_id": "3166",
    "elapsed_time": 476,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[10,10,10,3,1,1]",
    "expected_output": "4",
    "task_finish_time": 1707855377579,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 157,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174511397",
    "input_formatted": "[10,10,10,3,1,1]",
    "input": "[10,10,10,3,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minGroupsForValidAssignment(int[] nums) {\n        Map<Integer, Integer> frequency = new HashMap<>();\n        for (int num : nums) {\n            frequency.put(num, frequency.getOrDefault(num, 0) + 1);\n        }\n        \n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int freq : frequency.values()) {\n            pq.offer(freq);\n        }\n        \n        int groups = 0;\n        while (!pq.isEmpty()) {\n            int top = pq.poll();\n            groups++;\n            List<Integer> temp = new ArrayList<>();\n            while (!pq.isEmpty() && top > 1) {\n                int next = pq.poll() - 1;\n                if (next > 0) temp.add(next);\n                top--;\n            }\n            pq.addAll(temp);\n        }\n        \n        return groups;\n    }\n}"
}