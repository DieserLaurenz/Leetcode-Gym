{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44732000,
    "question_id": "3166",
    "elapsed_time": 794,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707855348883,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 158,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174511075",
    "input_formatted": "[3,2,3,2,3]",
    "input": "[3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minGroupsForValidAssignment(int[] nums) {\n        int[] count = new int[1000001]; // Considering the maximum value of nums[i] is 10^9\n        for (int num : nums) {\n            count[num]++;\n        }\n        int prev = 0, groups = 0;\n        for (int c : count) {\n            if (c > 0) {\n                int diff = Math.abs(c - prev);\n                if (diff > 1) {\n                    groups += (c + prev) / 2;\n                    prev = (c + prev) % 2;\n                } else {\n                    groups += diff;\n                    prev = Math.min(c, prev);\n                }\n            }\n        }\n        return groups + (prev > 0 ? 1 : 0);\n    }\n}"
}