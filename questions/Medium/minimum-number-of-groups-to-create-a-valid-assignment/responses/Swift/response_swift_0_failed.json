{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26396000,
    "question_id": "3166",
    "elapsed_time": 504,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707856036832,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 51,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1174518101",
    "input_formatted": "[3,2,3,2,3]",
    "input": "[3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minGroupsForValidAssignment(_ nums: [Int]) -> Int {\n        var frequency = [Int: Int]()\n        for num in nums {\n            frequency[num, default: 0] += 1\n        }\n        let frequencies = frequency.values.sorted(by: >)\n        var groups = 0\n        var i = 0\n        while i < frequencies.count {\n            groups += 1\n            var capacity = 1\n            var j = i + 1\n            while j < frequencies.count, capacity < frequencies[i] {\n                capacity += 1\n                j += 1\n            }\n            i = j\n        }\n        return groups\n    }\n}"
}