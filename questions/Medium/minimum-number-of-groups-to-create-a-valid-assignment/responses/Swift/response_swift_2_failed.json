{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26260000,
    "question_id": "3166",
    "elapsed_time": 496,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[10,10,10,3,1,1]",
    "expected_output": "4",
    "task_finish_time": 1707856086663,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 157,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1174518563",
    "input_formatted": "[10,10,10,3,1,1]",
    "input": "[10,10,10,3,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minGroupsForValidAssignment(_ nums: [Int]) -> Int {\n        var counts = [Int: Int]()\n        for num in nums {\n            counts[num, default: 0] += 1\n        }\n        var freqs = Array(repeating: 0, count: nums.count + 1)\n        for count in counts.values {\n            freqs[count] += 1\n        }\n        var groups = 0\n        var remaining = nums.count\n        for i in stride(from: freqs.count - 1, through: 1, by: -1) where freqs[i] > 0 {\n            while freqs[i] > 0 {\n                var j = i\n                while j > 0 && freqs[j] > 0 {\n                    freqs[j] -= 1\n                    j -= 2\n                }\n                groups += 1\n                remaining -= i\n                if remaining <= 0 { break }\n            }\n        }\n        return groups\n    }\n}"
}