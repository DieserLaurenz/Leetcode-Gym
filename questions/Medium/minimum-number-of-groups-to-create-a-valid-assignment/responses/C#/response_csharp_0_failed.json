{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 93216000,
    "question_id": "3166",
    "elapsed_time": 481,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[10,10,10,3,1,1]",
    "expected_output": "4",
    "task_finish_time": 1707855593269,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 115,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1174513675",
    "input_formatted": "[10,10,10,3,1,1]",
    "input": "[10,10,10,3,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinGroupsForValidAssignment(int[] nums) {\n        Dictionary<int, int> frequency = new Dictionary<int, int>();\n        foreach (int num in nums) {\n            if (frequency.ContainsKey(num)) frequency[num]++;\n            else frequency[num] = 1;\n        }\n\n        List<int> frequencies = new List<int>(frequency.Values);\n        frequencies.Sort();\n\n        int groups = 0;\n        while (frequencies.Count > 0) {\n            int last = frequencies[frequencies.Count - 1];\n            frequencies.RemoveAt(frequencies.Count - 1);\n            groups++;\n            for (int i = frequencies.Count - 1; i >= 0 && last > 1; i--) {\n                frequencies[i]--;\n                last--;\n                if (frequencies[i] == 0) frequencies.RemoveAt(i);\n            }\n        }\n        return groups;\n    }\n}"
}