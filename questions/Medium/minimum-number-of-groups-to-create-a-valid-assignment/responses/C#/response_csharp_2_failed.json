{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 92144000,
    "question_id": "3166",
    "elapsed_time": 542,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[10,10,10,3,1,1]",
    "expected_output": "4",
    "task_finish_time": 1707855644174,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 164,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1174514178",
    "input_formatted": "[10,10,10,3,1,1]",
    "input": "[10,10,10,3,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinGroupsForValidAssignment(int[] nums) {\n        Dictionary<int, int> freq = new Dictionary<int, int>();\n        foreach (var num in nums) {\n            if (!freq.ContainsKey(num)) freq[num] = 0;\n            freq[num]++;\n        }\n\n        int maxGroup = 0;\n        foreach (var pair in freq) {\n            maxGroup = Math.Max(maxGroup, (pair.Value + 1) / 2);\n        }\n\n        return freq.Count > maxGroup ? freq.Count : maxGroup;\n    }\n}"
}