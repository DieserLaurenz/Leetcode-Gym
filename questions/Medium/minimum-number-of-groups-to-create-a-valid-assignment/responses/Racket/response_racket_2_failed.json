{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "for-each: contract violation",
    "full_runtime_error": "for-each: contract violation\n  expected: list?\n  given: '#hash((2 . 2) (3 . 3))\n  context...:\n   /usr/share/racket/collects/racket/private/map.rkt:267:2: gen-for-each\n   solution.rkt:1:0: min-groups-for-valid-assignment\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:22:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99992000,
    "question_id": "3166",
    "elapsed_time": 262,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707865716031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1174601995",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (min-groups-for-valid-assignment nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (define (max-freq-counts freqs)\n    (let ([max-count 0])\n      (for-each (lambda (pair)\n                  (let ([count (cdr pair)])\n                    (when (> count max-count)\n                      (set! max-count count))))\n                freqs)\n      max-count))\n  (let ([freqs (make-hash)])\n    (for-each (lambda (num) (hash-update! freqs num add1 0)) nums)\n    (let* ([max-count (max-freq-counts freqs)]\n           [groups (if (even? max-count)\n                       max-count\n                       (+ max-count 1))])\n      groups)))"
}