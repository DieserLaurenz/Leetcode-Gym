{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 138196000,
    "question_id": "3166",
    "elapsed_time": 758,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707865655813,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 41,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1174601593",
    "input_formatted": "[3,2,3,2,3]",
    "input": "[3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-groups-for-valid-assignment nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let* ((freq (make-hash))\n         (max-count 0))\n    (for-each (lambda (num)\n                (hash-update! freq num add1 0)\n                (set! max-count (max max-count (hash-ref freq num 0))))\n              nums)\n    (let ((group-counts (hash-values freq)))\n      (let loop ((counts group-counts) (groups 0) (rem 0))\n        (if (null? counts)\n            groups\n            (let* ((count (car counts))\n                   (div (+ count rem))\n                   (new-groups (quotient div 2))\n                   (new-rem (remainder div 2)))\n              (loop (cdr counts) (max groups new-groups) new-rem)))))))"
}