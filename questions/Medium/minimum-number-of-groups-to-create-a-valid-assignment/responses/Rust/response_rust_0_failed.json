{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5376000,
    "question_id": "3166",
    "elapsed_time": 57,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707865538032,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 51,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1174600744",
    "input_formatted": "[3,2,3,2,3]",
    "input": "[3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_groups_for_valid_assignment(nums: Vec<i32>) -> i32 {\n        use std::collections::HashMap;\n\n        let mut count_map: HashMap<i32, i32> = HashMap::new();\n        for &num in &nums {\n            *count_map.entry(num).or_insert(0) += 1;\n        }\n\n        let mut counts: Vec<i32> = count_map.values().cloned().collect();\n        counts.sort_unstable();\n\n        let mut groups = 0;\n        let mut i = 0;\n        while i < counts.len() {\n            let mut capacity = 1;\n            groups += 1;\n            while i + 1 < counts.len() && capacity < counts[i + 1] {\n                capacity += 1;\n                i += 1;\n            }\n            i += 1;\n        }\n\n        groups\n    }\n}"
}