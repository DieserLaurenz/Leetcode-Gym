{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31748000,
    "question_id": "3166",
    "elapsed_time": 1064,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1708819493368,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 206,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185251560",
    "input_formatted": "[3,2,3,2,3]",
    "input": "[3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minGroupsForValidAssignment(self, nums):\n        from collections import Counter\n        count = Counter(nums)\n        freq = sorted(count.values(), reverse=True)\n        \n        l, r = 1, len(nums)\n        while l < r:\n            m = (l + r) // 2\n            req = 0\n            for f in freq:\n                req += (f + m - 1) // m\n            if req <= m:\n                r = m\n            else:\n                l = m + 1\n        return l"
}