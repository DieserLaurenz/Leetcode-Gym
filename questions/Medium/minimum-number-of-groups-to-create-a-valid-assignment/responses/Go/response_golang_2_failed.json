{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20200000,
    "question_id": "3166",
    "elapsed_time": 334,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[10,10,10,3,1,1]",
    "expected_output": "4",
    "task_finish_time": 1707856417457,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 124,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1174521877",
    "input_formatted": "[10,10,10,3,1,1]",
    "input": "[10,10,10,3,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minGroupsForValidAssignment(nums []int) int {\n    countMap := make(map[int]int)\n    maxCount := 0\n    for _, num := range nums {\n        countMap[num]++\n        if countMap[num] > maxCount {\n            maxCount = countMap[num]\n        }\n    }\n\n    return (len(nums) + maxCount - 1) / maxCount\n}"
}