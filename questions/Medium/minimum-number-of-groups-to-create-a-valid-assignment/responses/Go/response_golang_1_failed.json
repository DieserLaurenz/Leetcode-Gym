{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2900000,
    "question_id": "3166",
    "elapsed_time": 15,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[3,2,3,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707856394008,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 194,
    "total_testcases": 630,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1174521629",
    "input_formatted": "[3,2,3,2,3]",
    "input": "[3,2,3,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minGroupsForValidAssignment(nums []int) int {\n    freq := make(map[int]int)\n    for _, num := range nums {\n        freq[num]++\n    }\n\n    var counts []int\n    for _, count := range freq {\n        counts = append(counts, count)\n    }\n\n    sort.Ints(counts)\n\n    left, right := 0, len(nums)\n    for left < right {\n        mid := (left + right) / 2\n        if isValid(counts, mid) {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n\n    return left\n}\n\nfunc isValid(counts []int, groups int) bool {\n    requiredGroups := 0\n    for i := len(counts) - 1; i >= 0; i-- {\n        requiredGroups += (counts[i] + groups - 1) / groups\n    }\n    return requiredGroups <= groups\n}"
}