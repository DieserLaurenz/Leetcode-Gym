{
    "acRate": 32.00856007337205,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2772",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Apply Operations to Make All Array Elements Equal to Zero",
    "titleSlug": "apply-operations-to-make-all-array-elements-equal-to-zero",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Prefix Sum",
            "id": "VG9waWNUYWdOb2RlOjYxMDY4",
            "slug": "prefix-sum"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     bool checkArray(vector<int>& nums, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public boolean checkArray(int[] nums, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def checkArray(self, nums, k):         \"\"\"         :type nums: List[int]         :type k: int         :rtype: bool         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def checkArray(self, nums: List[int], k: int) -> bool:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "bool checkArray(int* nums, int numsSize, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public bool CheckArray(int[] nums, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} k  * @return {boolean}  */ var checkArray = function(nums, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function checkArray(nums: number[], k: number): boolean {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $k      * @return Boolean      */     function checkArray($nums, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func checkArray(_ nums: [Int], _ k: Int) -> Bool {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun checkArray(nums: IntArray, k: Int): Boolean {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   bool checkArray(List<int> nums, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func checkArray(nums []int, k int) bool {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} k # @return {Boolean} def check_array(nums, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def checkArray(nums: Array[Int], k: Int): Boolean = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn check_array(nums: Vec<i32>, k: i32) -> bool {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (check-array nums k)   (-> (listof exact-integer?) exact-integer? boolean?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec check_array(Nums :: [integer()], K :: integer()) -> boolean(). check_array(Nums, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec check_array(nums :: [integer], k :: integer) :: boolean   def check_array(nums, k) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums and a positive integer k. You can apply the following operation on the array any number of times:  Choose any subarray of size k from the array and decrease all its elements by 1.  Return true if you can make all the array elements equal to 0, or false otherwise. A subarray is a contiguous non-empty part of an array.  Example 1:  Input: nums = [2,2,3,1,1,0], k = 3 Output: true Explanation: We can do the following operations: - Choose the subarray [2,2,3]. The resulting array will be nums = [1,1,2,1,1,0]. - Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,1,0,0,0]. - Choose the subarray [1,1,1]. The resulting array will be nums = [0,0,0,0,0,0].  Example 2:  Input: nums = [1,3,1,1], k = 2 Output: false Explanation: It is not possible to make all the array elements equal to 0.   Constraints:  1 <= k <= nums.length <= 105 0 <= nums[i] <= 106  "
}