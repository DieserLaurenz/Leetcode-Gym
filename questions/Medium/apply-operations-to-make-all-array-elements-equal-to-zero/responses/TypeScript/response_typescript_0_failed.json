{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65020000,
    "question_id": "2878",
    "elapsed_time": 174,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706720532708,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 386,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162187019",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function checkArray(nums: number[], k: number): boolean {\n    const n = nums.length;\n    const diff = new Array(n).fill(0);\n    let extraDecrement = 0;\n\n    for (let i = 0; i < n; i++) {\n        nums[i] -= extraDecrement; // Apply pending decrements\n        if (nums[i] < 0) return false; // If over-decremented, return false\n\n        // Calculate the required decrement to make current element 0\n        const decrement = nums[i];\n        if (decrement > 0) {\n            if (i + k > n) return false; // If there's not enough space to apply operation, return false\n            extraDecrement += decrement; // Update the total decrement to apply to future elements\n            if (i + k < n) diff[i + k] += decrement; // Schedule future decrements\n        }\n\n        // Subtract scheduled decrement from extraDecrement to only affect elements within the current subarray of size k\n        extraDecrement -= diff[i];\n    }\n\n    return true;\n}"
}