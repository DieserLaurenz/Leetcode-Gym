{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64848000,
    "question_id": "2878",
    "elapsed_time": 4013,
    "compare_result": "010001011010100000110000001111001000011100000001010001110010110011010001001011000001000010110000000001001010001110100010010000010101000000000100000000010000000010001000110100111000000001001000011100010100010100000111011010000110100011000111111000000010001000101010101000010000000001101100111100011000011111010010011001100010101000001000001001011001001100000100000100010110010001011111000000000001110000110001010001101101000000101110100101001000000001001100101100111001100001100010011010100011001110000110011100000010000010001000000001100000011011110101011011011000110000000101111000010010001010100011001111001100000000010100011010000000100010010100110111000000000001000000000100001000010000010000001110000101000011000100010010100011001101000010100111110000001000010101000010010001000000000010100101001100000010010001100001000001000000110000001001011000000011100000101001001000001000000001100010001000111101011100110001000100000001000000101001100000010000100010000000011001000110100111000100001001110100100001101000000001100000",
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706720655751,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 342,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162188958",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function checkArray(nums: number[], k: number): boolean {\n    let totalOps = 0; // Track the total operations needed\n\n    for (let i = 0; i < nums.length; i++) {\n        // Apply previously counted operations to the current element\n        nums[i] -= totalOps;\n\n        if (nums[i] < 0) {\n            // If any element goes below 0, it's impossible to make all elements equal to 0\n            return false;\n        }\n\n        if (i <= nums.length - k) {\n            // If the current element is not zero, calculate the operations needed to make it zero\n            let opsNeeded = nums[i];\n            totalOps += opsNeeded;\n\n            // Apply the operations needed to the next k elements\n            for (let j = 1; j < k; j++) {\n                nums[i + j] -= opsNeeded;\n                if (nums[i + j] < 0) {\n                    // If applying operations makes any future element go below 0, return false\n                    return false;\n                }\n            }\n        } else {\n            // For the last few elements where a full subarray of size k cannot be chosen,\n            // ensure they have already been reduced to 0 by previous operations\n            if (nums[i] != 0) return false;\n        }\n    }\n\n    // If all elements are reduced to 0 without any going below 0, return true\n    return true;\n}"
}