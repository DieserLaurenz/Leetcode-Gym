{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65132000,
    "question_id": "2878",
    "elapsed_time": 147,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "expected_output": "false",
    "task_finish_time": 1706720592389,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 979,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162188023",
    "input_formatted": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3], 2",
    "input": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function checkArray(nums: number[], k: number): boolean {\n    // The length of the operations array will be nums.length to ensure we can apply operations\n    // throughout the entire array, but we only really need to track up to nums.length - k + 1,\n    // as any operation must start within this range to not exceed the array bounds.\n    const operations = new Array(nums.length).fill(0);\n    let sum = 0; // This will keep track of the cumulative effect of operations.\n\n    for (let i = 0; i < nums.length; i++) {\n        sum += operations[i]; // Update the sum with the effect of previous operations.\n        \n        // Determine the number of operations needed to reduce the current element to 0.\n        // This is the difference between the current element and the sum of operations applied.\n        let opsNeeded = nums[i] - sum;\n\n        if (opsNeeded > 0) {\n            if (i + k > nums.length) {\n                // If we're too close to the end to perform an operation of size k, return false.\n                return false;\n            }\n            // Record the operations needed at this point.\n            sum += opsNeeded;\n            // If within bounds, schedule the inverse operation to \"undo\" the effect beyond the current subarray of size k.\n            if (i + k < nums.length) operations[i + k] -= opsNeeded;\n        }\n    }\n\n    // If the loop completes without returning false, all elements can be reduced to 0.\n    return true;\n}"
}