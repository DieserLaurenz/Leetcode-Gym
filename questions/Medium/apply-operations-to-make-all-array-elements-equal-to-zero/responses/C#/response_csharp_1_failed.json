{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 76092000,
    "question_id": "2878",
    "elapsed_time": 748,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706711444213,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 385,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1162061459",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool CheckArray(int[] nums, int k) {\n        if (nums.Length < k) return false; // Early exit if k is larger than array size\n\n        long extraOps = 0; // Track extra operations needed due to previous decreases\n        for (int i = 0; i < nums.Length; i++) {\n            nums[i] -= (int)extraOps; // Apply any extra operations to the current element\n            \n            if (nums[i] < 0) return false; // If any element goes below 0, return false\n            \n            if (i + k <= nums.Length) { // Only proceed if there's room for a k-length subarray\n                if (nums[i] > 0) {\n                    if (i + k == nums.Length) { // Special handling for the last possible subarray\n                        extraOps += nums[i];\n                    } else {\n                        extraOps += nums[i];\n                        // Ensure the extra operations are reverted at the end of the subarray's reach\n                        if (i + k < nums.Length) nums[i + k] -= nums[i];\n                    }\n                }\n            }\n        }\n        \n        // Check if the last few elements are zeroes (as the loop might not zero them out)\n        for (int i = nums.Length - k + 1; i < nums.Length; i++) {\n            if (nums[i] != 0) return false;\n        }\n        \n        return true;\n    }\n}"
}