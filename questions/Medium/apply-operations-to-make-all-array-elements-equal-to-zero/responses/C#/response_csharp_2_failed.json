{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 76948000,
    "question_id": "2878",
    "elapsed_time": 499,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706711512850,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 327,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1162062326",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool CheckArray(int[] nums, int k) {\n        long neededOps = 0; // Total operations needed so far\n        Queue<long> ops = new Queue<long>(); // Queue to track operations over the next k elements\n\n        for (int i = 0; i < nums.Length; i++) {\n            if (ops.Count == k) {\n                neededOps -= ops.Dequeue(); // Remove the effect of the operation that no longer affects the current element\n            }\n\n            nums[i] -= (int)neededOps; // Apply all previous operations to the current element\n\n            if (nums[i] < 0) {\n                // Cannot make an element less than zero, so return false\n                return false;\n            } else if (nums[i] > 0) {\n                // If the current element is greater than 0, calculate and queue the needed operations\n                ops.Enqueue(nums[i]);\n                neededOps += nums[i]; // Update the total operations needed\n            }\n        }\n\n        // Check if there are elements that cannot be zeroed out\n        foreach (var extra in ops) {\n            if (extra > 0) {\n                // If any operation in the queue is still positive, it means not all elements can be zeroed out\n                return false;\n            }\n        }\n\n        // If all checks pass, then it's possible to zero out the array\n        return true;\n    }\n}"
}