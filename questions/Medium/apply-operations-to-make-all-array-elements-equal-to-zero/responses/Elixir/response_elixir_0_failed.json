{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 196912000,
    "question_id": "2878",
    "elapsed_time": 6019,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706722033319,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 635,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1162211313",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec check_array(nums :: [integer], k :: integer) :: boolean\n  def check_array(nums, k) do\n    # Initialize the current sum of adjustments to 0\n    current_sum = 0\n\n    # Iterate through the array with indexes\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce_while({current_sum, true}, fn {num, idx}, {acc_sum, _} ->\n      # Apply adjustments made so far\n      adjusted_num = num - acc_sum\n\n      if adjusted_num < 0 do\n        # If any adjusted number is negative, it's not possible to equalize to 0\n        {:halt, {acc_sum, false}}\n      else\n        # Calculate the new sum of adjustments if needed\n        new_sum = if adjusted_num > 0 and idx <= length(nums) - k, do: acc_sum + adjusted_num, else: acc_sum\n\n        # Continue if the end of the array has not been reached, else halt\n        if idx < length(nums) - k, do: {:cont, {new_sum, true}}, else: {:halt, {new_sum, true}}\n      end\n    end)\n    |> case do\n      {_, true} -> true\n      _ -> false\n    end\n  end\nend"
}