{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 140232000,
    "question_id": "2878",
    "elapsed_time": 5305,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721829451,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 306,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162208004",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec check_array(Nums :: [integer()], K :: integer()) -> boolean().\ncheck_array(Nums, K) ->\n    check_array_helper(Nums, K, 0, 0, []).\n\ncheck_array_helper([], _, _, 0, []) -> true;\ncheck_array_helper([H|T], K, Index, Carry, Ops) when Index < K ->\n    NewOps = [H+Carry | Ops],\n    RequiredDec = lists:last(NewOps),\n    if\n        RequiredDec < 0 -> false;\n        true -> \n            NewCarry = if RequiredDec > 0 -> RequiredDec; true -> 0 end,\n            check_array_helper(T, K, Index+1, NewCarry, NewOps)\n    end;\ncheck_array_helper([H|T], K, Index, Carry, [FirstOp|RestOps]) ->\n    NewOp = H + Carry,\n    RequiredDec = NewOp - FirstOp,\n    if\n        RequiredDec < 0 -> false;\n        true -> \n            NewCarry = if RequiredDec > 0 -> RequiredDec + Carry; true -> Carry end,\n            check_array_helper(T, K, Index+1, NewCarry, [NewOp|RestOps])\n    end;\ncheck_array_helper([], _, _, _, _) -> false."
}