{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 26: exception error: {bad_filter,0}",
    "full_runtime_error": "Line 26: exception error: {bad_filter,0}\n[{solution,'-check_array_recursive/5-lc$^0/1-0-',3,\n              [{file,\"solution.erl\"},{line,26}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,50}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,36}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,67}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65808000,
    "question_id": "2878",
    "elapsed_time": 1412,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721884127,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162208909",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec check_array(Nums :: [integer()], K :: integer()) -> boolean().\ncheck_array(Nums, K) ->\n    % Initialize a list to track the extra decrements needed due to operations performed\n    % on earlier elements, starting with all zeros.\n    ExtraDecs = lists:duplicate(length(Nums), 0),\n    check_array_recursive(Nums, ExtraDecs, K, 0, 1).\n\n% The base case for recursion, when we've processed all elements.\ncheck_array_recursive([], _, _, _, _) ->\n    true;\n\n% Process each element in the list.\ncheck_array_recursive([H|T], ExtraDecs, K, AccumulatedDecs, Index) ->\n    % Calculate the actual value after applying all decrements.\n    ActualValue = H - AccumulatedDecs,\n    % If the actual value is negative, it's impossible to make all elements zero.\n    if ActualValue < 0 ->\n        false;\n    true ->\n        % Calculate the new accumulated decrements and update ExtraDecs if needed.\n        NewAccumulated = AccumulatedDecs + hd(ExtraDecs),\n        NewExtraDecs = case length(ExtraDecs) >= K of\n            true ->\n                % Subtract the current decrement from the K-th next element.\n                [NewDec || {NewDec, Idx} <- lists:zip(ExtraDecs, lists:seq(1, length(ExtraDecs))),\n                          if Idx == K -> NewDec - ActualValue; true -> NewDec end];\n            false ->\n                ExtraDecs\n        end,\n        % Recurse with the tail of the list, updated ExtraDecs, and incremented index.\n        check_array_recursive(T, tl(NewExtraDecs) ++ [ActualValue], K, NewAccumulated, Index + 1)\n    end."
}