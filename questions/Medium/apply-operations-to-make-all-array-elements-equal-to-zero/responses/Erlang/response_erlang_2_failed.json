{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 28: exception error: undef",
    "full_runtime_error": "Line 28: exception error: undef\n[{lists,update_nth,[4,#Fun<solution.0.48684466>,[0,0,0,0,0,0]],[]},\n {solution,check_array_ops,5,[{file,\"solution.erl\"},{line,28}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,53}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,39}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,70}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65620000,
    "question_id": "2878",
    "elapsed_time": 1329,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721969427,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162210369",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec check_array(Nums :: [integer()], K :: integer()) -> boolean().\ncheck_array(Nums, K) ->\n    % Length of the nums list\n    N = length(Nums),\n    % Initialize a dynamic array (list) to track the required operations on each element\n    Ops = lists:duplicate(N, 0),\n    check_array_ops(Nums, Ops, K, 1, 0).\n\ncheck_array_ops([], _, _, _, _) ->\n    true; % Successfully made all elements 0\ncheck_array_ops([H|T], Ops, K, Index, Carry) when Index =< length(Ops) ->\n    % Calculate the total decrements needed for the current element\n    TotalDec = lists:nth(Index, Ops) + Carry,\n    % Adjust the current element by the total decrements applied so far\n    AdjustedH = H - TotalDec,\n    % Check if it's possible to proceed\n    if\n        AdjustedH < 0 ->\n            false; % Not possible to make all elements 0\n        true ->\n            % Calculate the new carry and update Ops if necessary\n            NewCarry = if Index + K =< length(Ops) ->\n                           lists:nth(Index + K, Ops) + AdjustedH;\n                       true ->\n                           0\n                       end,\n            NewOps = if Index + K =< length(Ops) ->\n                         lists:update_nth(Index + K, fun(X) -> X + AdjustedH end, Ops);\n                     true ->\n                         Ops\n                     end,\n            check_array_ops(T, NewOps, K, Index + 1, NewCarry)\n    end;\ncheck_array_ops(_, _, _, _, _) ->\n    false."
}