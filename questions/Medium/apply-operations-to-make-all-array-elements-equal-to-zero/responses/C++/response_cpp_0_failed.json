{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 97160000,
    "question_id": "2878",
    "elapsed_time": 148,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706710947895,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 321,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162054934",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool checkArray(vector<int>& nums, int k) {\n        int n = nums.size();\n        int carry = 0; // To keep track of decrements needed due to previous elements.\n        for (int i = 0; i < n; ++i) {\n            nums[i] -= carry; // Apply the decrements accumulated from previous operations.\n            if (nums[i] < 0) return false; // If any element goes negative, it's not possible.\n            carry -= min(nums[i], carry); // Adjust carry for the decrements already applied.\n            if (i + k < n) {\n                carry += nums[i]; // Add current element's value to carry for next k elements.\n                nums[i + k] -= nums[i]; // Apply decrement in advance for the k-th next element.\n            } else if (nums[i] > 0) { // If there are not enough elements left to decrement.\n                return false;\n            }\n        }\n        return true;\n    }\n};"
}