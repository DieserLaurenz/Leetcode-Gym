{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "103 ms",
    "memory": 100780000,
    "question_id": "2878",
    "elapsed_time": 160,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706711001698,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1026,
    "total_testcases": 1026,
    "runtime_percentile": 93.86299999999999,
    "status_memory": "100.8 MB",
    "memory_percentile": 18.773100000000024,
    "pretty_lang": "C++",
    "submission_id": "1162055607",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool checkArray(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> diff(n + 1, 0); // Difference array to manage the decrease operations.\n        int sum = 0; // Sum to keep track of the total decrease needed at current position.\n        \n        for (int i = 0; i < n; ++i) {\n            sum += diff[i]; // Update sum with the previous operations.\n            int decrease = nums[i] - sum; // Calculate the decrease needed for the current element.\n            if (decrease < 0) return false; // If decrease is negative, not possible to make all elements 0.\n            if (decrease > 0) {\n                if (i + k > n) return false; // Check if there's enough room to apply the operation.\n                sum += decrease; // Apply the decrease to sum, affecting next elements.\n                diff[i] += decrease; // Mark the start of the decrease.\n                diff[i + k] -= decrease; // Offset the decrease at the end of the subarray.\n            }\n        }\n        \n        // If we've managed to process all elements without issues, return true.\n        return true;\n    }\n};"
}