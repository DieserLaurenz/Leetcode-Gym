{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63560000,
    "question_id": "2878",
    "elapsed_time": 126,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706711631037,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 353,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162063878",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar checkArray = function(nums, k) {\n    let n = nums.length;\n    let diff = new Array(n).fill(0);\n    let totalDiff = 0;\n\n    for (let i = 0; i < n; i++) {\n        nums[i] -= totalDiff; // Apply the accumulated difference to the current element\n        if (nums[i] < 0) {\n            // It's impossible to make all elements 0 if any element becomes negative\n            return false;\n        }\n        if (nums[i] > 0) {\n            // If the current element needs to be decremented\n            if (i + k > n) {\n                // If there's not enough room for a subarray of size k starting at i, return false\n                return false;\n            }\n            diff[i] += nums[i]; // Add the needed decrement to the difference array\n            totalDiff += nums[i]; // Accumulate this difference\n            if (i + k < n) {\n                diff[i + k] -= nums[i]; // Subtract this difference when the subarray end is reached\n            }\n        }\n        totalDiff -= diff[i]; // Adjust totalDiff for the next element\n    }\n    // If we can process all elements according to the rules, return true\n    return true;\n};"
}