{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71904000,
    "question_id": "2878",
    "elapsed_time": 184,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[1,3,1,1]\n2",
    "expected_output": "false",
    "task_finish_time": 1706711571794,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 868,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162063102",
    "input_formatted": "[1,3,1,1], 2",
    "input": "[1,3,1,1]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar checkArray = function(nums, k) {\n    // Array to simulate the queue for decrement operations\n    let decOps = new Array(nums.length).fill(0);\n    let totalDec = 0; // Total decrements to apply at current position\n\n    for (let i = 0; i < nums.length; i++) {\n        // Apply decrements up to this point\n        nums[i] -= totalDec;\n\n        // Check if it's impossible to make this element 0\n        if (nums[i] < 0) return false;\n\n        // If the element is already 0, no need to add a new operation\n        if (nums[i] > 0) {\n            totalDec += nums[i]; // Increase total decrements by the amount needed for this element\n            decOps[i] = nums[i]; // Record this operation\n\n            // If we're at a point where a previous operation should no longer affect future elements\n            if (i + k < nums.length) {\n                totalDec -= decOps[i + k - k]; // Subtract the operation that 'exits' the subarray\n            }\n        }\n\n        // Move the 'window' forward, ensuring we only subtract operations that are 'exiting' the window\n        if (i >= k - 1) {\n            totalDec -= decOps[i - k + 1];\n        }\n    }\n\n    // If we've made it through the array without returning false, it's possible to make all elements 0\n    return true;\n};"
}