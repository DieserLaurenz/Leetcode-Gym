{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63064000,
    "question_id": "2878",
    "elapsed_time": 145,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706711676200,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 434,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162064450",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {boolean}\n */\nvar checkArray = function(nums, k) {\n    let n = nums.length;\n    let operation = new Array(n).fill(0); // Track the operations to be applied\n    let opSum = 0; // Running sum of operations\n\n    for (let i = 0; i < n; i++) {\n        // Apply operations up to this point\n        nums[i] += opSum;\n\n        // Determine the operation needed to make nums[i] zero\n        let diff = -nums[i];\n        if (diff != 0) {\n            // Update operation at the current index\n            operation[i] += diff;\n            opSum += diff;\n\n            // If the operation affects elements beyond the current subarray, cancel it out after k elements\n            if (i + k < n) {\n                operation[i + k] -= diff;\n            }\n        }\n\n        // Subtract the operation that's 'exiting' its effect range\n        if (i - k + 1 >= 0) {\n            opSum -= operation[i - k + 1];\n        }\n    }\n\n    // If the last k-1 elements have operations applied, they should cancel out to zero\n    for (let i = n - k + 1; i < n; i++) {\n        if (operation[i] != 0) {\n            return false; // If there's any operation left, it's not possible to make all elements 0\n        }\n    }\n\n    return true;\n};"
}