{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 683120000,
    "question_id": "2878",
    "elapsed_time": 4276,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1708734498252,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 392,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184409950",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def checkArray(self, nums: List[int], k: int) -> bool:\n        need = [0] * len(nums)\n        acc = 0  # Accumulate the total decreases needed as we iterate\n        for i in range(len(nums)):\n            if i >= k: acc -= need[i-k]  # Subtract the decrease applied k steps ago\n            if nums[i] + acc > 0:  # If the current value + accumulated decreases is still positive\n                diff = nums[i] + acc  # Calculate the difference needed to zero this element\n                need[i] = diff  # Record the needed decrease at current position\n                acc += diff  # Add this decrease to the accumulator\n        # Check if the last k elements can be made zero with the accumulated operations\n        for i in range(len(nums)-k, len(nums)):\n            if i >= 0: acc -= need[i]\n            if acc != 0: return False\n        return True"
}