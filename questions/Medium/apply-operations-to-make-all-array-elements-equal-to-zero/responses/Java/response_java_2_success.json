{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "2 ms",
    "memory": 60628000,
    "display_runtime": "2",
    "question_id": "2878",
    "elapsed_time": 304,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706711173413,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1026,
    "total_testcases": 1026,
    "runtime_percentile": 74.8899,
    "status_memory": "60.6 MB",
    "memory_percentile": 21.5861,
    "pretty_lang": "Java",
    "submission_id": "1162057839",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public boolean checkArray(int[] nums, int k) {\n        // Array to hold the required operations to make an element zero\n        int[] operations = new int[nums.length];\n        int op = 0; // Current number of operations to apply\n\n        for (int i = 0; i < nums.length; i++) {\n            // Adjust the number of operations based on previously applied operations\n            if (i >= k) {\n                op -= operations[i - k]; // Remove operations that are 'out of range'\n            }\n\n            // Calculate the difference needed to make the current element zero\n            int diff = nums[i] - op;\n            if (diff > 0) {\n                // If diff is positive, we need more operations\n                op += diff;\n                operations[i] = diff;\n            } else if (diff < 0) {\n                // If the adjusted number is negative, it's impossible to balance the array\n                return false;\n            }\n\n            // No need to explicitly handle diff == 0, as no additional operations are needed\n        }\n\n        // Check the last k elements for any 'overflow' operations\n        for (int i = nums.length - k; i < nums.length; i++) {\n            if (i >= 0) {\n                op -= operations[i];\n                if (op != 0) {\n                    // If there are still operations needed beyond the end of the array, return false\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}"
}