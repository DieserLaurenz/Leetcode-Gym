{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56592000,
    "display_runtime": "2",
    "question_id": "2878",
    "elapsed_time": 342,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "expected_output": "false",
    "task_finish_time": 1706711113202,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 979,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1162057038",
    "input_formatted": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3], 2",
    "input": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public boolean checkArray(int[] nums, int k) {\n        // The total adjustments needed for each position, initialized to 0.\n        long[] adjustments = new long[nums.length];\n        long totalAdjustment = 0; // Total adjustments made so far.\n\n        for (int i = 0; i < nums.length; i++) {\n            // Apply previous adjustments to the current position.\n            if (i > 0) {\n                adjustments[i] += adjustments[i - 1];\n            }\n            \n            // Calculate the current value after adjustments.\n            long currentValue = nums[i] - adjustments[i];\n            \n            // If additional adjustments are needed to make currentValue zero.\n            if (currentValue > 0) {\n                totalAdjustment += currentValue;\n                \n                // Check if there's enough space to apply the operation.\n                if (i + k > nums.length) {\n                    return false; // Not enough space for k-sized operation.\n                }\n                \n                // Apply the adjustment forward for k elements.\n                adjustments[i] += currentValue;\n                if (i + k < nums.length) {\n                    adjustments[i + k] -= currentValue;\n                }\n            }\n        }\n        \n        // If all elements can be adjusted to 0, return true.\n        return true;\n    }\n}"
}