{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "584 ms",
    "memory": 58580000,
    "question_id": "2878",
    "elapsed_time": 616,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706720915514,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1026,
    "total_testcases": 1026,
    "runtime_percentile": 25.0,
    "status_memory": "58.6 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Kotlin",
    "submission_id": "1162193286",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun checkArray(nums: IntArray, k: Int): Boolean {\n        val n = nums.size\n        val diff = LongArray(n + 1) // Extra space for handling prefix sum easily\n\n        var currentSum: Long = 0 // Tracks the current cumulative reduction required\n        for (i in nums.indices) {\n            currentSum += diff[i] // Apply previous reductions to the current element\n            val actualValue = nums[i] - currentSum // The effective value after reductions\n            \n            if (actualValue < 0) return false // If any value becomes negative, it's not possible\n            \n            if (actualValue > 0) {\n                if (i + k > n) return false // If there's not enough room to make a k-sized subarray reduction\n                \n                val reduction = actualValue\n                currentSum += reduction // Apply this reduction\n                diff[i + k] -= reduction // Mark the end of the current k-sized subarray to reverse the increase\n            }\n        }\n        \n        return true\n    }\n}"
}