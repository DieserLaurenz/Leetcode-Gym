{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26612000,
    "question_id": "2878",
    "elapsed_time": 491,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "expected_output": "false",
    "task_finish_time": 1706720812351,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 979,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162191678",
    "input_formatted": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3], 2",
    "input": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function checkArray($nums, $k) {\n        $n = count($nums);\n        $need = 0; // Tracks the total decrease needed up to the current position\n        $operations = array_fill(0, $n, 0); // Tracks the operations applied at each position\n\n        for ($i = 0; $i < $n; $i++) {\n            if ($i >= $k) {\n                // Subtract the operations that are 'exiting' their effect range as we move forward\n                $need -= $operations[$i - $k];\n            }\n            $delta = $nums[$i] - $need; // The additional operations needed at this position\n            if ($delta > 0) {\n                $need += $delta; // Update the total decrease needed\n                $operations[$i] = $delta; // Record the operations needed at this position\n                if ($i + $k > $n) {\n                    // If we can't apply the operation to a full subarray of size k, return false\n                    return false;\n                }\n            }\n        }\n\n        // If we've managed to apply all necessary operations within the array bounds, return true\n        return true;\n    }\n}"
}