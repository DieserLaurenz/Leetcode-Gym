{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26972000,
    "question_id": "2878",
    "elapsed_time": 291,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706720768311,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 476,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162190902",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Boolean\n     */\n    function checkArray($nums, $k) {\n        $totalSum = array_sum($nums);\n        \n        // If the total sum is not divisible by k, it's impossible to make all elements 0\n        if ($totalSum % $k !== 0) {\n            return false;\n        }\n        \n        // The total number of operations needed to make the sum 0\n        $totalOps = $totalSum / $k;\n        \n        // Count how many times each number appears\n        $countNums = array_count_values($nums);\n        \n        foreach ($countNums as $num => $count) {\n            // If a number is present more times than the totalOps, it's impossible to make all 0\n            if ($num * $count > $totalOps) {\n                return false;\n            }\n        }\n        \n        // If we pass all checks, it's possible to make all elements 0\n        return true;\n    }\n}"
}