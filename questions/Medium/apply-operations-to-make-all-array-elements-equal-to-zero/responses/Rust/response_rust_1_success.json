{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "9 ms",
    "memory": 3332000,
    "question_id": "2878",
    "elapsed_time": 34,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706721638598,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1026,
    "total_testcases": 1026,
    "runtime_percentile": 100,
    "status_memory": "3.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Rust",
    "submission_id": "1162205043",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn check_array(nums: Vec<i32>, k: i32) -> bool {\n        let n = nums.len();\n        let k = k as usize;\n        let mut diff = vec![0; n + 1]; // Create a difference array with one extra space for easier handling of the end condition\n        \n        let mut ops = 0; // Track the total adjustments (operations) needed\n        for i in 0..n {\n            ops += diff[i]; // Update operations based on previous adjustments\n            let actual_value = nums[i] - ops; // Calculate the actual value after adjustments\n            if actual_value < 0 {\n                // It's impossible to have negative values if all operations are correct\n                return false;\n            }\n            if actual_value > 0 {\n                // If the actual value needs to be decreased to 0\n                if i + k > n {\n                    // If the subarray extends beyond the array's end, it's impossible to adjust\n                    return false;\n                }\n                ops += actual_value; // Increase ops to reflect the need for decrementing this value to 0\n                diff[i] += actual_value; // Record this operation in the difference array\n                diff[i + k] -= actual_value; // Neutralize the effect after the subarray\n            }\n        }\n        true\n    }\n}"
}