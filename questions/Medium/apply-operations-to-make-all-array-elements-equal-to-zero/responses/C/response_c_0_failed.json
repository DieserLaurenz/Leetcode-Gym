{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5796000,
    "question_id": "2878",
    "elapsed_time": 14,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706711225216,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 257,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162058549",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n\nbool checkArray(int* nums, int numsSize, int k) {\n    long long extraDecreases = 0; // Running total of extra decreases\n    long long neededDecreases = 0; // Total decreases needed to make all elements 0\n\n    for (int i = 0; i < numsSize; i++) {\n        if (i >= k) {\n            extraDecreases -= nums[i - k]; // Remove the effect of the decrease applied k elements ago\n        }\n        if (nums[i] + extraDecreases > 0) {\n            neededDecreases = nums[i] + extraDecreases;\n            if (i + k <= numsSize) {\n                extraDecreases += neededDecreases; // Apply the decrease to the next k elements\n                nums[i] = -extraDecreases; // Update the current element to reflect the total decreases applied\n            } else {\n                // If there are not enough elements left to apply the decrease, return false\n                return false;\n            }\n        }\n    }\n\n    // Check if the last k elements have been properly decreased\n    for (int i = numsSize - k; i < numsSize; i++) {\n        if (i >= 0 && nums[i] + extraDecreases > 0) {\n            return false;\n        }\n    }\n\n    return true;\n}"
}