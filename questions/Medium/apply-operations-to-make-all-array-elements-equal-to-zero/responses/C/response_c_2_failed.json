{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16812000,
    "question_id": "2878",
    "elapsed_time": 119,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "expected_output": "false",
    "task_finish_time": 1706711332918,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 979,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162059977",
    "input_formatted": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3], 2",
    "input": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n#include <stdlib.h>\n\nbool checkArray(int* nums, int numsSize, int k) {\n    long long* diff = (long long*)calloc(numsSize + 1, sizeof(long long)); // Difference array\n    if (!diff) return false; // Fail-safe for memory allocation\n\n    long long currentOperation = 0; // Accumulate the effect of operations\n\n    for (int i = 0; i < numsSize; ++i) {\n        currentOperation += diff[i]; // Apply the effect of previous operations\n        long long requiredDecrease = nums[i] - currentOperation; // Required decrease for current element\n        if (requiredDecrease > 0) { // Need to apply operations\n            if (i + k > numsSize) { // Can't apply operation if it goes beyond array bounds\n                free(diff);\n                return false;\n            }\n            currentOperation += requiredDecrease; // Apply operation\n            diff[i] += requiredDecrease; // Update difference array at current position\n            diff[i + k] -= requiredDecrease; // Cancel the operation effect outside of the subarray\n        }\n    }\n\n    free(diff); // Clean up allocated memory\n    return true;\n}"
}