{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 181732000,
    "question_id": "2878",
    "elapsed_time": 950,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721011632,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 386,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162194914",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  bool checkArray(List<int> nums, int k) {\n    int n = nums.length;\n    List<int> diff = List.filled(n, 0); // Track adjustments needed per index\n    int ops = 0; // Operations applied up to the current index\n    \n    for (int i = 0; i < n; i++) {\n      nums[i] -= ops; // Apply all previous operations to current element\n      if (nums[i] < 0) return false; // Cannot have negative values after operations\n      \n      if (i + k > n) { // Check if there's enough room left for k elements\n        if (nums[i] != 0) return false; // If not, current element must already be zero\n      } else {\n        ops += nums[i]; // Add current element's value to total operations\n        if (i + k < n) diff[i + k] += nums[i]; // Schedule subtraction from future operations\n      }\n      \n      if (i + k < n) ops -= diff[i]; // Remove operations no longer affecting new elements\n    }\n    \n    return true;\n  }\n}"
}