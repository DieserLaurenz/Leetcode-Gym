{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 187064000,
    "question_id": "2878",
    "elapsed_time": 595,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "expected_output": "false",
    "task_finish_time": 1706720958112,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 979,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162194062",
    "input_formatted": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3], 2",
    "input": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  bool checkArray(List<int> nums, int k) {\n    int n = nums.length;\n    List<int> operations = List.filled(n, 0);\n    int sum = 0; // Tracks the total decrement needed at current position\n    \n    for (int i = 0; i < n; i++) {\n      sum += operations[i]; // Apply previous operations to current element\n      int current = nums[i] - sum; // Adjusted value after applying operations\n      if (current > 0) {\n        if (i + k > n) return false; // Not enough elements to decrement\n        sum += current; // Increment sum to reflect new operations\n        if (i + k < n) operations[i + k] -= current; // Schedule reversal of this operation\n      }\n    }\n    \n    return true;\n  }\n}"
}