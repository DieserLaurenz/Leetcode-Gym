{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 184420000,
    "question_id": "2878",
    "elapsed_time": 604,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721072560,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 392,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162195870",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  bool checkArray(List<int> nums, int k) {\n    int n = nums.length;\n    List<int> prefixSum = List.filled(n + 1, 0); // To manage the impact of operations\n    \n    for (int i = 0; i < n; i++) {\n      // Calculate the actual value at nums[i] after operations\n      int actualValue = nums[i] - (prefixSum[i] - (i - k >= 0 ? prefixSum[i - k] : 0));\n      if (actualValue < 0) return false; // If actual value is negative, return false\n      \n      // If actualValue is positive, we need to decrease the next k elements by actualValue\n      if (actualValue > 0) {\n        if (i + k > n) return false; // Not enough elements to perform the operation\n        prefixSum[i] += actualValue; // Increase current prefix sum to reflect the operation\n        prefixSum[i + 1] -= actualValue; // Decrease next element in prefix sum to balance\n        if (i + k < n) prefixSum[i + k] += actualValue; // Counteract the operation at the end of k elements\n      }\n    }\n    \n    // Check if the last k-1 elements have been correctly reduced to 0\n    for (int i = n - k + 1; i < n; i++) {\n      if (nums[i] - (prefixSum[i] - (i - k >= 0 ? prefixSum[i - k] : 0)) != 0) {\n        return false; // If any of the last k-1 elements is not 0, return false\n      }\n    }\n    \n    return true;\n  }\n}"
}