{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 928296000,
    "question_id": "2878",
    "elapsed_time": 1713,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721273544,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 392,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162199081",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef check_array(nums, k)\n    # Create an array to keep track of operations needed to decrease each element to 0\n    operations = Array.new(nums.size, 0)\n    \n    total_operations = 0\n    \n    nums.each_with_index do |num, i|\n        # Add previous operations to current element to simulate the effect of all operations before it\n        num += total_operations\n        \n        # Check if current element needs to be decreased\n        if num > 0\n            # Calculate the number of operations needed to make current element 0\n            decrease_ops = num\n            \n            # Check if there's enough space left in the array to perform these operations\n            if i + k > nums.size\n                return false\n            end\n            \n            # Record the operations needed for the current position\n            operations[i] = decrease_ops\n            \n            # Update total operations including the current operations\n            total_operations += decrease_ops\n            \n            # Subtract the operations at the point where the effect of current operations should end\n            operations[i + k] -= decrease_ops if i + k < nums.size\n        end\n        \n        # Subtract the operations that should no longer affect subsequent elements\n        total_operations -= operations[i] if i >= k\n    end\n    \n    true\nend"
}