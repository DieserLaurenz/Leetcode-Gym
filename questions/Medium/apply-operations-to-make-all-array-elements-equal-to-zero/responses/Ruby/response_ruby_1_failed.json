{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 223156000,
    "question_id": "2878",
    "elapsed_time": 169,
    "compare_result": "010101011010100010110100111111101001011100001101010001110010110011010001011011000001100010110000000011001010001111110110010100010101000001000100000000010001100010001000110100111000001101001000011101010101010000100111011110000110000011000111111000000011001000101010111100110000010001101100111100111000111111110010011001100010101000001000101101011101001110000100000100011110111001011111001000000001111000110101010001101101000001101111100101011000101001001101111100111001110001100010011110100011001110000110011100010010010010011100001001100000011011110101011011011000110000000111111000110011001010100011001111011100000000010100011010000000100010110100110111000000000001000000000100001000010000010000001110000101000011000100010010100011001101000010100111110000001000010101000010010001000000000010100101001100000010010001100001000001000100110000001001011000000011100000101001001000001000000001100010001000111101011100110001000100000001000000101001100000010000100010000000011001000110100111000100001001110100100001101000000001100010",
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721316214,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 404,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162199778",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Boolean}\ndef check_array(nums, k)\n  # Initialize a variable to keep track of the required decrement operations\n  required_decrement = 0\n\n  # Iterate through the array\n  (0...nums.size).each do |i|\n    if i == 0\n      # For the first element, directly set the required decrement\n      required_decrement = nums[i] % k\n    else\n      # For subsequent elements, calculate the difference needed to make\n      # the current element equal to the previous one modulo k\n      difference = nums[i] - nums[i - 1]\n\n      # If the calculated difference modulo k doesn't match the required decrement,\n      # it's impossible to make all elements equal to 0\n      if difference % k != required_decrement\n        return false\n      end\n    end\n  end\n\n  # If we've made it through the array without finding a mismatch, return true\n  true\nend"
}