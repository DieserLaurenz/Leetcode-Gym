{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79012000,
    "question_id": "2878",
    "elapsed_time": 1170,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "expected_output": "false",
    "task_finish_time": 1706721498252,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 979,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162202700",
    "input_formatted": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3], 2",
    "input": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def checkArray(nums: Array[Int], k: Int): Boolean = {\n        val n = nums.length\n        // Array to track extra operations needed due to previous changes.\n        val extraOps = Array.ofDim[Int](n)\n        var opsNeeded = 0\n        \n        for (i <- 0 until n) {\n            // Apply any extra operations required from previous steps.\n            if (i > 0) {\n                extraOps(i) += extraOps(i - 1)\n            }\n            \n            // Adjust the current number by the extra operations already applied.\n            val adjustedNum = nums(i) - extraOps(i)\n            \n            if (adjustedNum > 0) {\n                // Calculate how many operations are needed to make this element 0.\n                val ops = adjustedNum\n                opsNeeded += ops\n                \n                // If we're within bounds, spread out the effect of these operations.\n                if (i + k <= n) {\n                    extraOps(i) += ops\n                    if (i + k < n) extraOps(i + k) -= ops\n                } else {\n                    // If we cannot make this element 0 with k operations, return false.\n                    return false\n                }\n            }\n        }\n        \n        true\n    }\n}"
}