{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`",
    "full_compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2878",
    "task_finish_time": 1706721735553,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1162206583",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (check-array nums k)\n  (-> (listof exact-integer?) exact-integer? boolean?)\n  (let* ([len (length nums)]\n         [diffs (make-vector (+ len 1) 0)] ; Extended by 1 to avoid index out of bounds\n         [total 0]) ; Tracks the total adjustments made\n    (for ([i (in-range len)])\n      (set! total (+ total (vector-ref diffs i))) ; Update total adjustments up to i\n      (let* ([current (list-ref nums i)] ; Current value at nums[i]\n             [required (- current total)]) ; Required decrease to make nums[i] 0\n        (if (< required 0)\n            (return #f) ; If required decrease is negative, return false\n            (begin\n              (when (< (+ i k) len)\n                (vector-set! diffs (+ i k) (+ (vector-ref diffs (+ i k)) required))) ; Adjust future decreases\n              (set! total (+ total required))))) ; Update total adjustments\n    (>= 0 (- (list-ref nums (sub1 len)) total)))) ; Check if the last element can be made 0"
}