{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9600000,
    "question_id": "2878",
    "elapsed_time": 141,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721227806,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 386,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1162198369",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func checkArray(nums []int, k int) bool {\n    // Create an additional array to track the total decrement needed at each position.\n    decrement := make([]int, len(nums))\n    totalDecrement := 0\n\n    for i := 0; i < len(nums); i++ {\n        // Apply the total decrement accumulated so far to the current number.\n        nums[i] -= totalDecrement\n        if nums[i] < 0 {\n            // If the number becomes negative, it's impossible to make all elements 0.\n            return false\n        }\n        if i+k > len(nums) {\n            // If the operation cannot be applied due to the subarray extending beyond the array length.\n            if nums[i] != 0 {\n                return false\n            }\n        } else {\n            // Determine the additional decrement needed to make the current number 0.\n            totalDecrement += nums[i]\n            // Schedule the removal of this decrement once it's out of the scope of the next k elements.\n            if i+k < len(nums) {\n                decrement[i+k] = nums[i]\n            }\n        }\n        // Remove the scheduled decrement as it goes out of scope.\n        totalDecrement -= decrement[i]\n    }\n\n    return true\n}"
}