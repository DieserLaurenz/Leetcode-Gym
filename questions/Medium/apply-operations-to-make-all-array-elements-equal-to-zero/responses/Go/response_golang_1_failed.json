{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9188000,
    "question_id": "2878",
    "elapsed_time": 272,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[2,2,3,1,1,0]\n3",
    "expected_output": "true",
    "task_finish_time": 1706721176975,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 320,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1162197523",
    "input_formatted": "[2,2,3,1,1,0], 3",
    "input": "[2,2,3,1,1,0]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func checkArray(nums []int, k int) bool {\n    n := len(nums)\n    if n < k {\n        return false\n    }\n\n    diff := make([]int, n)\n    sum := 0\n\n    for i := 0; i < n; i++ {\n        nums[i] -= sum\n        if nums[i] < 0 {\n            return false // If any number becomes negative, it's impossible\n        }\n\n        if i+k <= n {\n            diff[i] = nums[i]\n            sum += diff[i] // Add the difference to the sum for the next elements\n            if i+k < n {\n                sum -= diff[i+k] // Ensure to subtract the out-of-scope difference when it's no longer in effect\n            }\n        } else if nums[i] != 0 {\n            return false // If there's not enough room to make more adjustments and the number isn't zero, it's impossible\n        }\n    }\n\n    for i := n - k; i < n; i++ {\n        if nums[i] != 0 { // Check if the last elements are zero\n            return false\n        }\n    }\n\n    return true\n}"
}