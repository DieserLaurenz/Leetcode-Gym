{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8956000,
    "question_id": "2878",
    "elapsed_time": 120,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "expected_output": "false",
    "task_finish_time": 1706721132310,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 979,
    "total_testcases": 1026,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1162196816",
    "input_formatted": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3], 2",
    "input": "[27,99,7,1,94,63,84,46,76,35,97,77,19,72,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func checkArray(nums []int, k int) bool {\n    n := len(nums)\n    decrement := make([]int, n)\n    currentDecrement := 0\n\n    for i := 0; i < n; i++ {\n        if i >= k {\n            // Subtract the decrement that was added k steps ago, as its effect ends\n            currentDecrement -= decrement[i-k]\n        }\n\n        // Calculate the actual value after applying all decrements so far\n        nums[i] -= currentDecrement\n\n        if nums[i] > 0 {\n            // If the current element is greater than 0, we need to apply the operation\n            if i+k > n {\n                // If there's not enough space to apply the operation, return false\n                return false\n            }\n            // Increment the decrement array and current decrement by the value needed to make nums[i] zero\n            decrement[i] += nums[i]\n            currentDecrement += nums[i]\n            nums[i] = 0\n        }\n    }\n\n    // If all operations are successful, return true\n    return true\n}"
}