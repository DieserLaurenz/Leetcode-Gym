{
    "acRate": 50.02495306447396,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2661",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "First Completely Painted Row or Column",
    "titleSlug": "first-completely-painted-row-or-column",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Matrix",
            "id": "VG9waWNUYWdOb2RlOjYxMDUz",
            "slug": "matrix"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int firstCompleteIndex(int[] arr, int[][] mat) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def firstCompleteIndex(self, arr, mat):         \"\"\"         :type arr: List[int]         :type mat: List[List[int]]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def firstCompleteIndex(self, arr: List[int], mat: List[List[int]]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int firstCompleteIndex(int* arr, int arrSize, int** mat, int matSize, int* matColSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int FirstCompleteIndex(int[] arr, int[][] mat) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} arr  * @param {number[][]} mat  * @return {number}  */ var firstCompleteIndex = function(arr, mat) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function firstCompleteIndex(arr: number[], mat: number[][]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $arr      * @param Integer[][] $mat      * @return Integer      */     function firstCompleteIndex($arr, $mat) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func firstCompleteIndex(_ arr: [Int], _ mat: [[Int]]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun firstCompleteIndex(arr: IntArray, mat: Array<IntArray>): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int firstCompleteIndex(List<int> arr, List<List<int>> mat) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func firstCompleteIndex(arr []int, mat [][]int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} arr # @param {Integer[][]} mat # @return {Integer} def first_complete_index(arr, mat)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def firstCompleteIndex(arr: Array[Int], mat: Array[Array[Int]]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn first_complete_index(arr: Vec<i32>, mat: Vec<Vec<i32>>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (first-complete-index arr mat)   (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec first_complete_index(Arr :: [integer()], Mat :: [[integer()]]) -> integer(). first_complete_index(Arr, Mat) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec first_complete_index(arr :: [integer], mat :: [[integer]]) :: integer   def first_complete_index(arr, mat) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n]. Go through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i]. Return the smallest index i at which either a row or a column will be completely painted in mat.  Example 1:   Input: arr = [1,3,4,2], mat = [[1,4],[2,3]] Output: 2 Explanation: The moves are shown in order, and both the first row and second column of the matrix become fully painted at arr[2].  Example 2:   Input: arr = [2,8,7,4,1,3,5,6,9], mat = [[3,2,5],[1,4,6],[8,7,9]] Output: 3 Explanation: The second column becomes fully painted at arr[3].   Constraints:  m == mat.length n = mat[i].length arr.length == m * n 1 <= m, n <= 105 1 <= m * n <= 105 1 <= arr[i], mat[r][c] <= m * n All the integers of arr are unique. All the integers of mat are unique.  "
}