{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40460000,
    "question_id": "3095",
    "elapsed_time": 176,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707588432057,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171623580",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {\n        int maxAlloys = 0;\n        for (int machine = 0; machine < k; machine++) {\n            int minPossibleAlloys = Integer.MAX_VALUE;\n            for (int metal = 0; metal < n; metal++) {\n                int totalNeeded = composition.get(machine).get(metal);\n                int totalCostForMetal = (totalNeeded > stock.get(metal)) ? (totalNeeded - stock.get(metal)) * cost.get(metal) : 0;\n                if (totalNeeded == 0) continue; // Avoid division by zero\n                int possibleAlloysForMetal = budget / totalCostForMetal;\n                minPossibleAlloys = Math.min(minPossibleAlloys, possibleAlloysForMetal);\n            }\n            int totalCost = 0;\n            for (int metal = 0; metal < n; metal++) {\n                int neededForOneAlloy = composition.get(machine).get(metal);\n                int extraNeeded = Math.max(0, neededForOneAlloy * minPossibleAlloys - stock.get(metal));\n                totalCost += extraNeeded * cost.get(metal);\n            }\n            if (totalCost <= budget) {\n                for (int alloys = minPossibleAlloys; alloys >= 1; alloys--) {\n                    totalCost = 0;\n                    for (int metal = 0; metal < n; metal++) {\n                        int neededForAlloys = composition.get(machine).get(metal) * alloys;\n                        int extraNeeded = Math.max(0, neededForAlloys - stock.get(metal));\n                        totalCost += extraNeeded * cost.get(metal);\n                    }\n                    if (totalCost <= budget) {\n                        maxAlloys = Math.max(maxAlloys, alloys);\n                        break;\n                    }\n                }\n            }\n        }\n        return maxAlloys;\n    }\n}"
}