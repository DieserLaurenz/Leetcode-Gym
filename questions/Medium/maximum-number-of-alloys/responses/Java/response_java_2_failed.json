{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45416000,
    "display_runtime": "70",
    "question_id": "3095",
    "elapsed_time": 262,
    "compare_result
    "code_output": "2147483647",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707588460411,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 181,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171623980",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {\n        int result = 0;\n        for (int i = 0; i < k; i++) {\n            int minAlloy = Integer.MAX_VALUE;\n            for (int j = 0; j < n; j++) {\n                int totalCost = 0;\n                for (int m = 0; m < n; m++) {\n                    int needed = composition.get(i).get(m) * (j + 1) - stock.get(m);\n                    if (needed > 0) {\n                        totalCost += needed * cost.get(m);\n                    }\n                }\n                if (totalCost <= budget) {\n                    minAlloy = j + 1;\n                } else {\n                    break;\n                }\n            }\n            result = Math.max(result, minAlloy);\n        }\n        return result;\n    }\n}"
}