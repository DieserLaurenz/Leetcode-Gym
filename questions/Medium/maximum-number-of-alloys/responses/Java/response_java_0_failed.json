{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44920000,
    "display_runtime": "5",
    "question_id": "3095",
    "elapsed_time": 241,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707588394484,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 263,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171623058",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxNumberOfAlloys(int n, int k, int budget, List<List<Integer>> composition, List<Integer> stock, List<Integer> cost) {\n        int maxAlloys = 0;\n        for (int i = 0; i < k; i++) {\n            int totalCost = 0;\n            for (int j = 0; j < n; j++) {\n                int requiredMetal = composition.get(i).get(j);\n                int availableStock = stock.get(j);\n                int metalCost = cost.get(j);\n                if (requiredMetal > availableStock) {\n                    totalCost += (requiredMetal - availableStock) * metalCost;\n                }\n            }\n            if (totalCost <= budget) {\n                int minAlloys = Integer.MAX_VALUE;\n                for (int j = 0; j < n; j++) {\n                    int requiredMetalPerAlloy = composition.get(i).get(j);\n                    if (requiredMetalPerAlloy > 0) {\n                        int totalMetalAvailable = stock.get(j) + (budget - totalCost) / cost.get(j);\n                        minAlloys = Math.min(minAlloys, totalMetalAvailable / requiredMetalPerAlloy);\n                    }\n                }\n                maxAlloys = Math.max(maxAlloys, minAlloys);\n            }\n        }\n        return maxAlloys;\n    }\n}"
}