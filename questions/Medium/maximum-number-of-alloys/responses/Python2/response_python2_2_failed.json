{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 978428000,
    "question_id": "3095",
    "elapsed_time": 9470,
    "compare_result": "10000000001000100100010000101000001011100100010101000000000000100001101000010000000010000000001010000000000000000100000000000100010100011000000000010110100000000001000010011000011100011000001000100010100001000000000011000000010101100000011000000000000010000011100001000000100010110100001011001000000011001010010101000010000100110000100100101000010011000000000011000001000001000101000000100000001011001000000001000000000100001001000000000000000001001000010000001001000000010000011000000100000000100011001000000000000000001000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000001110111110000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,100]\n[1,2,3]",
    "expected_output": "5",
    "task_finish_time": 1708796754603,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 126,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185029199",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,100], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,100]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n        max_alloys = 0\n        for machine in range(k):\n            min_cost_per_alloy = sum(composition[machine][j] * cost[j] for j in range(n))\n            if min_cost_per_alloy == 0:\n                return float('inf')\n            alloys_possible = budget // min_cost_per_alloy\n            for alloys in range(alloys_possible + 1):\n                total_cost = 0\n                for metal in range(n):\n                    metal_needed = alloys * composition[machine][metal] - stock[metal]\n                    if metal_needed > 0:\n                        total_cost += metal_needed * cost[metal]\n                if total_cost <= budget:\n                    max_alloys = max(max_alloys, alloys)\n        return max_alloys"
}