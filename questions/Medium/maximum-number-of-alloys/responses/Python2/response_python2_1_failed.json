{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12100000,
    "question_id": "3095",
    "elapsed_time": 602,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1708796719091,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 723,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185028766",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n        def can_produce(machine, alloys):\n            total_cost = 0\n            for metal in range(n):\n                required = alloys * composition[machine][metal]\n                need_to_buy = max(0, required - stock[metal])\n                total_cost += need_to_buy * cost[metal]\n            return total_cost <= budget\n\n        max_alloys = 0\n        for machine in range(k):\n            low, high = 0, budget\n            while low <= high:\n                mid = (low + high) // 2\n                if can_produce(machine, mid):\n                    max_alloys = max(max_alloys, mid)\n                    low = mid + 1\n                else:\n                    high = mid - 1\n        return max_alloys"
}