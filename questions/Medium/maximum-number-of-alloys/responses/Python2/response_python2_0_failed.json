{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12000000,
    "question_id": "3095",
    "elapsed_time": 210,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "expected_output": "2",
    "task_finish_time": 1708796687162,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 271,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185028256",
    "input_formatted": "2, 3, 10, [[2,1],[1,2],[1,1]], [1,1], [5,5]",
    "input": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxNumberOfAlloys(self, n, k, budget, composition, stock, cost):\n        max_alloys = 0\n        for machine in range(k):\n            total_cost = 0\n            for metal in range(n):\n                required_units = composition[machine][metal]\n                if stock[metal] < required_units:\n                    total_cost += (required_units - stock[metal]) * cost[metal]\n                if total_cost > budget:\n                    break\n            else:\n                # Calculate maximum number of alloys for this machine\n                min_alloys = budget // total_cost if total_cost else float('inf')\n                for metal in range(n):\n                    if composition[machine][metal] > 0:\n                        available_units = stock[metal] + (budget - total_cost) // cost[metal]\n                        min_alloys = min(min_alloys, available_units // composition[machine][metal])\n                max_alloys = max(max_alloys, min_alloys)\n        return max_alloys"
}