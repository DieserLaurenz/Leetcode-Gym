{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51800000,
    "question_id": "3095",
    "elapsed_time": 105,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1707588830647,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 723,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1171629061",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number} k\n * @param {number} budget\n * @param {number[][]} composition\n * @param {number[]} stock\n * @param {number[]} cost\n * @return {number}\n */\nvar maxNumberOfAlloys = function(n, k, budget, composition, stock, cost) {\n    let maxAlloys = 0;\n    for (let machine = 0; machine < k; machine++) {\n        let low = 0, high = budget, maxMachineAlloys = 0;\n        while (low <= high) {\n            let mid = Math.floor((low + high) / 2);\n            let costForMidAlloys = 0;\n            for (let metal = 0; metal < n; metal++) {\n                let totalNeeded = composition[machine][metal] * mid;\n                let needToBuy = Math.max(0, totalNeeded - stock[metal]);\n                costForMidAlloys += needToBuy * cost[metal];\n            }\n            if (costForMidAlloys <= budget) {\n                maxMachineAlloys = mid;\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        maxAlloys = Math.max(maxAlloys, maxMachineAlloys);\n    }\n    return maxAlloys;\n};"
}