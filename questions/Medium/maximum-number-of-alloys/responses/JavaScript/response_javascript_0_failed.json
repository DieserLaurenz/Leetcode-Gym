{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51956000,
    "question_id": "3095",
    "elapsed_time": 119,
    "compare_result
    "code_output": "Infinity",
    "std_output": "",
    "last_testcase": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "expected_output": "2",
    "task_finish_time": 1707588774499,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 186,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1171628278",
    "input_formatted": "2, 3, 10, [[2,1],[1,2],[1,1]], [1,1], [5,5]",
    "input": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number} k\n * @param {number} budget\n * @param {number[][]} composition\n * @param {number[]} stock\n * @param {number[]} cost\n * @return {number}\n */\nvar maxNumberOfAlloys = function(n, k, budget, composition, stock, cost) {\n    let maxAlloys = 0;\n    for (let i = 0; i < k; i++) { // Iterate through each machine\n        let totalCost = 0;\n        for (let j = 0; j < n; j++) { // Iterate through each metal\n            // Calculate the cost for the required amount of metal j for machine i\n            let required = composition[i][j];\n            let available = stock[j];\n            let additionalCost = (required > available) ? (required - available) * cost[j] : 0;\n            totalCost += additionalCost;\n        }\n        // Determine the maximum number of alloys that can be made by machine i within the budget\n        let alloys = Math.floor(budget / totalCost);\n        maxAlloys = Math.max(maxAlloys, alloys);\n    }\n    return maxAlloys;\n};"
}