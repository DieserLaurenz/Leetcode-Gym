{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51088000,
    "question_id": "3095",
    "elapsed_time": 82,
    "compare_result": "00000000000001000000000000001000000001100100010000000000000000100000000000000000000000000000000010000000000000000000000000000000001000011000001000000001100000000000000000000010011100100101001000000010100000000000000011000000010001000000000000000000000000000010010000000000000010000100000010001000000000001010000000100010000000100000000000000000001010000000000000010001000001000000000000000000001001001000000000100000000000001000000000000000000000000000000000000001000000010000011000000000000010001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111110001000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707588803100,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1171628667",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number} k\n * @param {number} budget\n * @param {number[][]} composition\n * @param {number[]} stock\n * @param {number[]} cost\n * @return {number}\n */\nvar maxNumberOfAlloys = function(n, k, budget, composition, stock, cost) {\n    let maxAlloys = 0;\n    for (let i = 0; i < k; i++) { // Iterate through each machine\n        let minAlloyPossible = Infinity;\n        for (let j = 0; j < n; j++) { // Iterate through each metal type\n            let totalMetalCost = 0;\n            if (composition[i][j] > 0) {\n                let metalNeeded = composition[i][j]; // Metal needed for one alloy\n                let additionalMetalNeeded = Math.max(0, metalNeeded - stock[j]);\n                totalMetalCost = additionalMetalNeeded * cost[j];\n                let alloysWithThisMetal = Math.floor(budget / totalMetalCost);\n                minAlloyPossible = Math.min(minAlloyPossible, alloysWithThisMetal);\n            }\n        }\n        maxAlloys = Math.max(maxAlloys, minAlloyPossible);\n    }\n    return isFinite(maxAlloys) ? maxAlloys : 0;\n};"
}