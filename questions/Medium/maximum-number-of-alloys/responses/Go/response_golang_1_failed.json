{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7792000,
    "question_id": "3095",
    "elapsed_time": 78,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707597977766,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 208,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171728000",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxNumberOfAlloys(n int, k int, budget int, composition [][]int, stock []int, cost []int) int {\n maxAlloys := 0\n for i := 0; i < k; i++ {\n  minAlloys := budget + 1\n  for j := 0; j < n; j++ {\n   needed := composition[i][j] - stock[j]\n   if needed < 0 {\n    needed = 0\n   }\n   totalCostForMetal := needed * cost[j]\n   alloysForThisMetal := (budget - totalCostForMetal) / (composition[i][j] * cost[j])\n   if stock[j] >= composition[i][j] {\n    alloysForThisMetal = budget / (composition[i][j] * cost[j])\n   }\n   if needed == 0 {\n    alloysForThisMetal = budget / (composition[i][j] * cost[j])\n   }\n   if alloysForThisMetal < minAlloys {\n    minAlloys = alloysForThisMetal\n   }\n  }\n  if minAlloys > maxAlloys {\n   maxAlloys = minAlloys\n  }\n }\n return maxAlloys\n}"
}