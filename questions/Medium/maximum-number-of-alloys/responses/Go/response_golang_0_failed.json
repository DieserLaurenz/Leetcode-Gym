{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2044000,
    "question_id": "3095",
    "elapsed_time": 3008,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707597948994,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171727731",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxNumberOfAlloys(n int, k int, budget int, composition [][]int, stock []int, cost []int) int {\n maxAlloys := 0\n for i := 0; i < k; i++ {\n  totalCost := 0\n  maxPossible := int(1e9)\n  for j := 0; j < n; j++ {\n   required := composition[i][j]\n   if required > 0 {\n    available := stock[j]\n    if required <= available {\n     continue\n    }\n    needed := required - available\n    totalCostForMetal := needed * cost[j]\n    totalCost += totalCostForMetal\n    maxForThisMetal := (budget - totalCost) / cost[j]\n    if maxForThisMetal < maxPossible {\n     maxPossible = maxForThisMetal\n    }\n   }\n  }\n  if totalCost <= budget {\n   alloysWithCurrentMachine := 1\n   for totalCost <= budget && alloysWithCurrentMachine <= maxPossible {\n    totalCost += sumOfCosts(composition[i], cost, stock)\n    if totalCost <= budget {\n     alloysWithCurrentMachine++\n    }\n   }\n   if alloysWithCurrentMachine-1 > maxAlloys {\n    maxAlloys = alloysWithCurrentMachine - 1\n   }\n  }\n }\n return maxAlloys\n}\n\nfunc sumOfCosts(composition []int, cost []int, stock []int) int {\n total := 0\n for i, required := range composition {\n  if required > stock[i] {\n   needed := required - stock[i]\n   total += needed * cost[i]\n  }\n }\n return total\n}"
}