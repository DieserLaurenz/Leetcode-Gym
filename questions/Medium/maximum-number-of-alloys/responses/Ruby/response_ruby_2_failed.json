{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 214040000,
    "question_id": "3095",
    "elapsed_time": 223,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707598134668,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 91,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171729413",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer} budget\n# @param {Integer[][]} composition\n# @param {Integer[]} stock\n# @param {Integer[]} cost\n# @return {Integer}\ndef max_number_of_alloys(n, k, budget, composition, stock, cost)\n  max_alloys = 0\n  (0...k).each do |machine|\n    total_cost = 0\n    alloys_possible_for_machine = Float::INFINITY\n    (0...n).each do |metal|\n      required_metal_per_alloy = composition[machine][metal]\n      total_required_metal = required_metal_per_alloy - stock[metal]\n      if total_required_metal > 0\n        cost_for_metal = total_required_metal * cost[metal]\n        total_cost += cost_for_metal\n        alloys_for_this_metal = (budget - total_cost) / (required_metal_per_alloy * cost[metal])\n        alloys_possible_for_machine = [alloys_possible_for_machine, alloys_for_this_metal].min\n      end\n    end\n    if total_cost <= budget\n      total_alloys_possible = [(budget - total_cost) / composition[machine].map.with_index { |comp, index| comp * cost[index] }.sum, 0].max\n      max_alloys = [max_alloys, total_alloys_possible].max\n    end\n  end\n  max_alloys\nend"
}