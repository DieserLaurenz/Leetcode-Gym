{
    "status_code": 15,
    "lang": "ruby",
    "run_success": false,
    "runtime_error": "Line 20: divided by 0 (ZeroDivisionError) in solution.rb (/)",
    "full_runtime_error": "Line 20: divided by 0 (ZeroDivisionError) in solution.rb (/)\nLine 20 in solution.rb (block in max_number_of_alloys)\nLine 10 in solution.rb (each)\nLine 10 in solution.rb (max_number_of_alloys)\nLine 30 in solution.rb (__driver_helper__)\nLine 53 in solution.rb (block in _driver)\nLine 40 in solution.rb (each)\nLine 40 in solution.rb (each_slice)\nLine 40 in solution.rb (_driver)\nLine 65 in solution.rb (<main>)",
    "status_runtime": "N/A",
    "memory": 211160000,
    "question_id": "3095",
    "elapsed_time": 128,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "expected_output": "2",
    "task_finish_time": 1707598097623,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171729075",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @param {Integer} k\n# @param {Integer} budget\n# @param {Integer[][]} composition\n# @param {Integer[]} stock\n# @param {Integer[]} cost\n# @return {Integer}\ndef max_number_of_alloys(n, k, budget, composition, stock, cost)\n  max_alloys = 0\n  (0...k).each do |machine|\n    min_alloys_possible = Float::INFINITY\n    total_cost_for_one_alloy = 0\n    (0...n).each do |metal|\n      required_metal = composition[machine][metal]\n      if stock[metal] < required_metal\n        total_cost_for_one_alloy += (required_metal - stock[metal]) * cost[metal]\n      end\n    end\n    if total_cost_for_one_alloy <= budget\n      alloys_possible_with_budget = budget / total_cost_for_one_alloy\n      max_alloys = [max_alloys, alloys_possible_with_budget].max\n    end\n  end\n  max_alloys\nend"
}