{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 12: ** (ArithmeticError) bad argument in arithmetic expression: {:cont, 0} + 1",
    "full_runtime_error": "Line 12: ** (ArithmeticError) bad argument in arithmetic expression: {:cont, 0} + 1\n    :erlang.+({:cont, 0}, 1)\n    solution.ex:12: anonymous fn/6 in Solution.max_number_of_alloys/6\n    (elixir 1.15.7) lib/range.ex:526: Enumerable.Range.reduce/5\n    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3\n    solution.ex:6: anonymous fn/5 in Solution.max_number_of_alloys/6\n    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2\n    solution.ex:4: Solution.max_number_of_alloys/6\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73576000,
    "question_id": "3095",
    "elapsed_time": 321,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707598854802,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171735528",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_number_of_alloys(n :: integer, k :: integer, budget :: integer, composition :: [[integer]], stock :: [integer], cost :: [integer]) :: integer\n  def max_number_of_alloys(_n, k, budget, composition, stock, cost) do\n    Enum.map(0..k-1, fn machine_index ->\n      machine_composition = Enum.at(composition, machine_index)\n      max_alloys = Enum.reduce_while(1..budget, {:cont, 0}, fn _alloy_attempt, acc ->\n        total_cost = Enum.reduce(0..Enum.count(machine_composition)-1, 0, fn i, cost_acc ->\n          metal_needed = Enum.at(machine_composition, i) - Enum.at(stock, i, 0)\n          metal_needed = if metal_needed > 0, do: metal_needed, else: 0\n          cost_acc + metal_needed * Enum.at(cost, i)\n        end)\n        if total_cost <= budget, do: {:cont, acc + 1}, else: {:halt, acc}\n      end)\n      |> elem(1)\n    end)\n    |> Enum.max()\n  end\nend"
}