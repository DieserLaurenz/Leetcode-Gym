{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 6: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:6: anonymous fn/5 in Solution.max_number_of_alloys/6\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    (elixir 1.15.7) lib/enum.ex:1693: Enum.\"-map/2-lists^map/1-1-\"/2\n    solution.ex:4: Solution.max_number_of_alloys/6\n    solution.ex:41: Driver.consume_test_cases/2\n    solution.ex:19: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73508000,
    "question_id": "3095",
    "elapsed_time": 424,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707598796103,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171735044",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_number_of_alloys(n :: integer, k :: integer, budget :: integer, composition :: [[integer]], stock :: [integer], cost :: [integer]) :: integer\n  def max_number_of_alloys(n, k, budget, composition, stock, cost) do\n    Enum.map(composition, fn machine ->\n      Enum.reduce(0..n-1, budget, fn i, acc ->\n        needed = Enum.at(machine, i) * max(0, -stock[i])\n        acc - needed * Enum.at(cost, i)\n      end)\n    end)\n    |> Enum.map(fn remaining_budget ->\n      if remaining_budget < 0, do: 0, else: div(remaining_budget, Enum.min(Enum.zip_with(composition, cost, fn comp, c -> Enum.sum(Enum.map(comp, &(&1 * c))) end)))\n    end)\n    |> Enum.max()\n  end\nend"
}