{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2272000,
    "question_id": "3095",
    "elapsed_time": 19,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1707598476339,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 511,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1171732311",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_number_of_alloys(n: i32, k: i32, budget: i32, composition: Vec<Vec<i32>>, stock: Vec<i32>, cost: Vec<i32>) -> i32 {\n        let mut result = 0;\n        for machine in 0..k as usize {\n            let mut low = 0;\n            let mut high = budget + 1;\n            while low < high {\n                let mid = low + (high - low) / 2;\n                let mut temp_budget = budget;\n                for metal in 0..n as usize {\n                    let required = composition[machine][metal] * mid;\n                    let buy = (required - stock[metal]).max(0);\n                    temp_budget -= buy * cost[metal];\n                }\n                if temp_budget >= 0 {\n                    low = mid + 1;\n                    result = result.max(mid);\n                } else {\n                    high = mid;\n                }\n            }\n        }\n        result\n    }\n}"
}