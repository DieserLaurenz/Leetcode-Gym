{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2312000,
    "question_id": "3095",
    "elapsed_time": 17,
    "compare_result
    "code_output": "52",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,100]\n[1,2,3]",
    "expected_output": "5",
    "task_finish_time": 1707598505031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 445,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1171732550",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,100], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,100]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_number_of_alloys(n: i32, k: i32, budget: i32, composition: Vec<Vec<i32>>, stock: Vec<i32>, cost: Vec<i32>) -> i32 {\n        let mut max_alloys = 0;\n        for machine in 0..k as usize {\n            let mut left = 0;\n            let mut right = 100000; // Set the right boundary high enough to cover the possible maximum alloys\n            while left < right {\n                let mid = (left + right + 1) / 2; // Aim to find the maximum possible number of alloys\n                let mut sum_cost = 0;\n                for j in 0..n as usize {\n                    let required = composition[machine][j] * mid; // Total required units of each metal\n                    let shortage = required.saturating_sub(stock[j]); // Calculate shortage, if any\n                    sum_cost += shortage * cost[j]; // Total cost to cover the shortage\n                }\n                if sum_cost <= budget {\n                    left = mid; // If within budget, try a higher number\n                } else {\n                    right = mid - 1; // Otherwise, lower the search range\n                }\n            }\n            max_alloys = max_alloys.max(left); // Keep the maximum number of alloys that can be produced\n        }\n        max_alloys\n    }\n}"
}