{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17040000,
    "question_id": "3095",
    "elapsed_time": 425,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1708796898973,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 723,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185031459",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxNumberOfAlloys(self, n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n        def alloysCanBeMade(machine: int, alloys: int) -> bool:\n            total_cost = 0\n            for metal in range(n):\n                metal_needed = alloys * composition[machine][metal] - stock[metal]\n                if metal_needed > 0:\n                    total_cost += metal_needed * cost[metal]\n            return total_cost <= budget\n        \n        max_alloys = 0\n        for machine in range(k):\n            low, high = 0, budget\n            while low <= high:\n                mid = (low + high) // 2\n                if alloysCanBeMade(machine, mid):\n                    max_alloys = max(max_alloys, mid)\n                    low = mid + 1\n                else:\n                    high = mid - 1\n        return max_alloys"
}