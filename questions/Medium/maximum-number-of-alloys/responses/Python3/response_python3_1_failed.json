{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16856000,
    "question_id": "3095",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "expected_output": "2",
    "task_finish_time": 1708796866164,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 308,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185030861",
    "input_formatted": "2, 3, 10, [[2,1],[1,2],[1,1]], [1,1], [5,5]",
    "input": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxNumberOfAlloys(self, n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n        max_alloys = 0\n        for machine in range(k):\n            max_machine_alloys = float('inf')\n            for metal in range(n):\n                metal_needed = max(0, composition[machine][metal] - stock[metal])\n                if metal_needed > 0:\n                    max_alloys_with_budget = (budget // (metal_needed * cost[metal]))\n                else:\n                    total_metal_available = stock[metal] // composition[machine][metal]\n                    max_alloys_with_budget = total_metal_available if total_metal_available > 0 else float('inf')\n                max_machine_alloys = min(max_machine_alloys, max_alloys_with_budget)\n            \n            # Calculate the total cost for creating max_machine_alloys with this machine\n            total_cost = sum(max(0, composition[machine][metal] * max_machine_alloys - stock[metal]) * cost[metal] for metal in range(n))\n            if total_cost <= budget:\n                max_alloys = max(max_alloys, max_machine_alloys)\n            else:\n                # Adjust the number of alloys to fit the budget\n                while max_machine_alloys > 0:\n                    max_machine_alloys -= 1\n                    total_cost = sum(max(0, composition[machine][metal] * max_machine_alloys - stock[metal]) * cost[metal] for metal in range(n))\n                    if total_cost <= budget:\n                        max_alloys = max(max_alloys, max_machine_alloys)\n                        break\n        return max_alloys"
}