{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17072000,
    "question_id": "3095",
    "elapsed_time": 239,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "expected_output": "2",
    "task_finish_time": 1708796814302,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 185,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185030264",
    "input_formatted": "2, 3, 10, [[2,1],[1,2],[1,1]], [1,1], [5,5]",
    "input": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxNumberOfAlloys(self, n: int, k: int, budget: int, composition: List[List[int]], stock: List[int], cost: List[int]) -> int:\n        max_alloys = 0\n        for machine in range(k):\n            total_cost = 0\n            for metal in range(n):\n                needed = composition[machine][metal] - stock[metal]\n                if needed > 0:\n                    total_cost += needed * cost[metal]\n            if total_cost <= budget:\n                max_alloys_for_machine = budget // total_cost if total_cost > 0 else float('inf')\n                for metal in range(n):\n                    if composition[machine][metal] > 0:\n                        max_alloys_for_machine = min(max_alloys_for_machine, (stock[metal] + budget // (composition[machine][metal] * cost[metal])) // composition[machine][metal])\n                max_alloys = max(max_alloys, max_alloys_for_machine)\n        return max_alloys"
}