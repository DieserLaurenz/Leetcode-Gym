{
    "status_code": 15,
    "lang": "php",
    "run_success": false,
    "runtime_error": "Line 22: PHP Fatal error:  Uncaught DivisionByZeroError: Division by zero in solution.php",
    "full_runtime_error": "Line 22: PHP Fatal error:  Uncaught DivisionByZeroError: Division by zero in solution.php\nStack trace:\n#0 solution.php: Solution->maxNumberOfAlloys()\n#1 {main}",
    "status_runtime": "N/A",
    "memory": 20236000,
    "question_id": "3095",
    "elapsed_time": 150,
    "compare_result": "11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "expected_output": "2",
    "task_finish_time": 1707597418797,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171722854",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer $budget\n     * @param Integer[][] $composition\n     * @param Integer[] $stock\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function maxNumberOfAlloys($n, $k, $budget, $composition, $stock, $cost) {\n        $maxAlloys = 0;\n        for ($i = 0; $i < $k; $i++) {\n            $totalCost = 0;\n            for ($j = 0; $j < $n; $j++) {\n                $requiredMetal = $composition[$i][$j];\n                $availableStock = $stock[$j];\n                $additionalMetalNeeded = max(0, $requiredMetal - $availableStock);\n                $totalCost += $additionalMetalNeeded * $cost[$j];\n            }\n            $possibleAlloys = $budget / $totalCost;\n            $maxAlloys = max($maxAlloys, floor($possibleAlloys));\n        }\n        return $maxAlloys;\n    }\n}"
}