{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21196000,
    "question_id": "3095",
    "elapsed_time": 431,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1707597501971,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 723,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171723665",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer $budget\n     * @param Integer[][] $composition\n     * @param Integer[] $stock\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function maxNumberOfAlloys($n, $k, $budget, $composition, $stock, $cost) {\n        $maxAlloys = 0;\n        for ($i = 0; $i < $k; $i++) {\n            $low = 0;\n            $high = $budget;\n            while ($low <= $high) {\n                $mid = intdiv($low + $high, 2);\n                $totalCost = 0;\n                for ($j = 0; $j < $n; $j++) {\n                    $metalNeeded = $mid * $composition[$i][$j];\n                    $buyNeeded = max(0, $metalNeeded - $stock[$j]);\n                    $totalCost += $buyNeeded * $cost[$j];\n                }\n                if ($totalCost <= $budget) {\n                    $maxAlloys = max($maxAlloys, $mid);\n                    $low = $mid + 1;\n                } else {\n                    $high = $mid - 1;\n                }\n            }\n        }\n        return $maxAlloys;\n    }\n}"
}