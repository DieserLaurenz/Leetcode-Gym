{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20980000,
    "question_id": "3095",
    "elapsed_time": 195,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707597464089,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171723319",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer $k\n     * @param Integer $budget\n     * @param Integer[][] $composition\n     * @param Integer[] $stock\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function maxNumberOfAlloys($n, $k, $budget, $composition, $stock, $cost) {\n        $maxAlloys = 0;\n        for ($machine = 0; $machine < $k; $machine++) {\n            $minAlloysPossible = PHP_INT_MAX;\n            for ($metalType = 0; $metalType < $n; $metalType++) {\n                $totalMetalNeeded = $composition[$machine][$metalType] - $stock[$metalType];\n                if ($totalMetalNeeded > 0) {\n                    $alloysPossibleWithThisMetal = floor($budget / ($totalMetalNeeded * $cost[$metalType]));\n                } else {\n                    $alloysPossibleWithThisMetal = PHP_INT_MAX;\n                }\n                $minAlloysPossible = min($minAlloysPossible, $alloysPossibleWithThisMetal);\n            }\n            $maxAlloys = max($maxAlloys, $minAlloysPossible);\n        }\n        return $maxAlloys;\n    }\n}"
}