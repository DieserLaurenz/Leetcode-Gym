{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "434 ms",
    "memory": 153156000,
    "question_id": "3095",
    "elapsed_time": 939,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707597882079,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 731,
    "total_testcases": 731,
    "runtime_percentile": 100,
    "status_memory": "153.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Dart",
    "submission_id": "1171727135",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maxNumberOfAlloys(int n, int k, int budget, List<List<int>> composition, List<int> stock, List<int> cost) {\n    int result = 0;\n    for (int i = 0; i < k; i++) {\n      int minPossible = 1;\n      int maxPossible = 1000000000;\n      while (minPossible <= maxPossible) {\n        int mid = minPossible + (maxPossible - minPossible) ~/ 2;\n        int requiredBudget = 0;\n        for (int j = 0; j < n; j++) {\n          int required = composition[i][j] * mid;\n          int needToBuy = required > stock[j] ? required - stock[j] : 0;\n          requiredBudget += needToBuy * cost[j];\n        }\n        if (requiredBudget <= budget) {\n          result = mid > result ? mid : result;\n          minPossible = mid + 1;\n        } else {\n          maxPossible = mid - 1;\n        }\n      }\n    }\n    return result;\n  }\n}"
}