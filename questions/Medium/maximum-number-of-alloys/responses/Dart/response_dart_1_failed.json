{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 149952000,
    "question_id": "3095",
    "elapsed_time": 5019,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707597853428,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 284,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1171726825",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maxNumberOfAlloys(int n, int k, int budget, List<List<int>> composition, List<int> stock, List<int> cost) {\n    int maxAlloys = 0;\n    for (int machine = 0; machine < k; machine++) {\n      int totalCost = 0;\n      int maxPossibleAlloys = budget + 1;\n      for (int metal = 0; metal < n; metal++) {\n        int requiredMetal = composition[machine][metal] * maxPossibleAlloys;\n        int metalToBuy = requiredMetal > stock[metal] ? requiredMetal - stock[metal] : 0;\n        totalCost += metalToBuy * cost[metal];\n        while (totalCost > budget && maxPossibleAlloys > 0) {\n          maxPossibleAlloys--;\n          totalCost = 0;\n          for (int j = 0; j < n; j++) {\n            requiredMetal = composition[machine][j] * maxPossibleAlloys;\n            metalToBuy = requiredMetal > stock[j] ? requiredMetal - stock[j] : 0;\n            totalCost += metalToBuy * cost[j];\n          }\n        }\n      }\n      if (maxPossibleAlloys > maxAlloys) {\n        maxAlloys = maxPossibleAlloys;\n      }\n    }\n    return maxAlloys;\n  }\n}"
}