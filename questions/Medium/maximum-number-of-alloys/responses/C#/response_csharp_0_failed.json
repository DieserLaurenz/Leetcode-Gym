{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53804000,
    "question_id": "3095",
    "elapsed_time": 1964,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707588652540,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 344,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1171626566",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxNumberOfAlloys(int n, int k, int budget, IList<IList<int>> composition, IList<int> stock, IList<int> cost) {\n        int maxAlloys = 0;\n        for (int machine = 0; machine < k; machine++) {\n            int totalCost = 0, alloys = 0;\n            while (true) {\n                int alloyCost = 0;\n                for (int metal = 0; metal < n; metal++) {\n                    int required = composition[machine][metal] * (alloys + 1) - stock[metal];\n                    if (required > 0) {\n                        alloyCost += required * cost[metal];\n                    }\n                }\n                if (totalCost + alloyCost > budget) break;\n                totalCost += alloyCost;\n                alloys++;\n            }\n            maxAlloys = Math.Max(maxAlloys, alloys);\n        }\n        return maxAlloys;\n    }\n}"
}