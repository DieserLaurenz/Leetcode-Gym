{
    "status_code": 15,
    "lang": "csharp",
    "run_success": false,
    "runtime_error": "Unhandled exception. System.DivideByZeroException: Attempted to divide by zero.",
    "full_runtime_error": "Unhandled exception. System.DivideByZeroException: Attempted to divide by zero.\nAt Solution.MaxNumberOfAlloys(Int32 n, Int32 k, Int32 budget, IList`1 composition, IList`1 stock, IList`1 cost)\nAt __DriverSolution__.__Helper__(Int32 param_1, Int32 param_2, Int32 param_3, IList`1 param_4, IList`1 param_5, IList`1 param_6)\nAt __Driver__.Main(String[] args)",
    "status_runtime": "N/A",
    "memory": 43976000,
    "question_id": "3095",
    "elapsed_time": 267,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "expected_output": "2",
    "task_finish_time": 1707588719925,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1171627518",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxNumberOfAlloys(int n, int k, int budget, IList<IList<int>> composition, IList<int> stock, IList<int> cost) {\n        int maxAlloys = 0;\n        for (int i = 0; i < k; i++) {\n            int minAlloyCost = 0;\n            for (int j = 0; j < n; j++) {\n                minAlloyCost += (composition[i][j] - stock[j] > 0 ? composition[i][j] - stock[j] : 0) * cost[j];\n            }\n            if (minAlloyCost > budget) continue;\n            int low = 1, high = (budget - minAlloyCost) / minAlloyCost + 1;\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                long totalCost = 0;\n                for (int j = 0; j < n; j++) {\n                    totalCost += (long)Math.Max(0, composition[i][j] * mid - stock[j]) * cost[j];\n                }\n                if (totalCost <= budget) {\n                    maxAlloys = Math.Max(maxAlloys, mid);\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n        return maxAlloys;\n    }\n}"
}