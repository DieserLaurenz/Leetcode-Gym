{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57612000,
    "question_id": "3095",
    "elapsed_time": 742,
    "compare_result": "01010010100101010000000001101000000111100110010010100010000000100000000111000000001011100010000010000001010000000110100111011110101110001000001100100101110010100001000000100111011100111101001000001010110000100100000111101000010001000110010110100001101000100011010000000101110010000100000000001000000001100100010010100111010000100110101001000011001011011001000001110001011011000100000010000010010011101000010010101001001100000100000001110001010001110001000001000001010101010010111000010000001010001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000001111100001001",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707598190494,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 183,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1171729894",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxNumberOfAlloys(n: Int, k: Int, budget: Int, composition: List[List[Int]], stock: List[Int], cost: List[Int]): Int = {\n        var maxAlloys = 0\n        for (machine <- 0 until k) {\n            var totalCost = 0\n            var minAlloysPossible = Int.MaxValue\n            for (metal <- 0 until n) {\n                val totalMetalNeeded = composition(machine)(metal)\n                val metalInStock = stock(metal)\n                val metalToBuy = math.max(0, totalMetalNeeded - metalInStock)\n                totalCost += metalToBuy * cost(metal)\n                if (totalMetalNeeded > 0) {\n                    minAlloysPossible = math.min(minAlloysPossible, (budget - totalCost) / (totalMetalNeeded * cost(metal)) + 1)\n                }\n            }\n            maxAlloys = math.max(maxAlloys, minAlloysPossible)\n        }\n        maxAlloys\n    }\n}"
}