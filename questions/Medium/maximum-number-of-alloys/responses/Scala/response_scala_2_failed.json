{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58948000,
    "question_id": "3095",
    "elapsed_time": 1194,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1707598249408,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 511,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1171730396",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxNumberOfAlloys(n: Int, k: Int, budget: Int, composition: List[List[Int]], stock: List[Int], cost: List[Int]): Int = {\n        var maxAlloys = 0\n        for (machine <- composition.indices) {\n            var lo = 0\n            var hi = budget\n            while (lo <= hi) {\n                val mid = lo + (hi - lo) / 2\n                var tempBudget = budget\n                for (metal <- 0 until n) {\n                    val required = composition(machine)(metal) * mid\n                    val buy = Math.max(0, required - stock(metal))\n                    tempBudget -= buy * cost(metal)\n                }\n                if (tempBudget >= 0) {\n                    maxAlloys = Math.max(maxAlloys, mid)\n                    lo = mid + 1\n                } else {\n                    hi = mid - 1\n                }\n            }\n        }\n        maxAlloys\n    }\n}"
}