{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59040000,
    "question_id": "3095",
    "elapsed_time": 61,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707588297091,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171621701",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxNumberOfAlloys(int n, int k, int budget, vector<vector<int>>& composition, vector<int>& stock, vector<int>& cost) {\n        int maxAlloys = 0;\n        for (int i = 0; i < k; ++i) {\n            int minAlloyPossible = INT_MAX;\n            for (int j = 0; j < n; ++j) {\n                int totalNeeded = composition[i][j];\n                if (totalNeeded > 0) {\n                    int canProduce = stock[j] / totalNeeded;\n                    int additionalRequired = totalNeeded - stock[j] % totalNeeded;\n                    int totalCost = additionalRequired * cost[j];\n                    int additionalCanProduce = budget / totalCost;\n                    minAlloyPossible = min(minAlloyPossible, canProduce + additionalCanProduce);\n                }\n            }\n            maxAlloys = max(maxAlloys, minAlloyPossible);\n        }\n        return maxAlloys;\n    }\n};"
}