{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59164000,
    "question_id": "3095",
    "elapsed_time": 81,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707588327380,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 202,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171622092",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxNumberOfAlloys(int n, int k, int budget, vector<vector<int>>& composition, vector<int>& stock, vector<int>& cost) {\n        int result = 0;\n        for (int i = 0; i < k; ++i) {\n            int minAlloys = INT_MAX;\n            for (int j = 0; j < n; ++j) {\n                int needed = composition[i][j];\n                int available = stock[j];\n                int totalCost = 0;\n                if (needed > 0) {\n                    if (needed * cost[j] > budget) {\n                        minAlloys = 0;\n                        break;\n                    }\n                    if (available < needed) {\n                        totalCost = (needed - available) * cost[j];\n                    }\n                    int possibleAlloys = (budget - totalCost) / (needed * cost[j]);\n                    minAlloys = min(minAlloys, possibleAlloys + (available / needed));\n                }\n            }\n            result = max(result, minAlloys);\n        }\n        return result;\n    }\n};"
}