{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59244000,
    "question_id": "3095",
    "elapsed_time": 65,
    "compare_result": "01101010000001001010000000001000000111100100010111110000000100101000010110101000000000000011010110000010000000000100001000011111110010111000001000000110110110100011000001100001011100110000011011001010101000100011000111010000010001001010110000101100100000000010000100101001110010010101000010001000100000001011100111000110000100100010100101001001010011010010001010000011000001010000110000010010101011001000101011010100000100001100000010101100110000100001100001010001011101010011011010010100000010000011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000111110001000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707588276473,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 184,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171621414",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxNumberOfAlloys(int n, int k, int budget, vector<vector<int>>& composition, vector<int>& stock, vector<int>& cost) {\n        int maxAlloys = 0;\n        for (int machine = 0; machine < k; ++machine) {\n            int minAlloys = budget + 1;\n            for (int metal = 0; metal < n; ++metal) {\n                int totalCost = max(0, composition[machine][metal] - stock[metal]) * cost[metal];\n                int alloysForThisMetal = totalCost > 0 ? budget / totalCost : budget;\n                if (composition[machine][metal] > 0) {\n                    alloysForThisMetal = min((budget / (composition[machine][metal] * cost[metal])), (stock[metal] / composition[machine][metal]) + alloysForThisMetal);\n                }\n                minAlloys = min(minAlloys, alloysForThisMetal);\n            }\n            maxAlloys = max(maxAlloys, minAlloys);\n        }\n        return maxAlloys;\n    }\n};"
}