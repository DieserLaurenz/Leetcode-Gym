{
    "status_code": 15,
    "lang": "kotlin",
    "run_success": false,
    "runtime_error": "Line 12: Exception in thread \"main\" java.lang.ArithmeticException: / by zero",
    "full_runtime_error": "Line 12: Exception in thread \"main\" java.lang.ArithmeticException: / by zero",
    "status_runtime": "N/A",
    "memory": 33736000,
    "question_id": "3095",
    "elapsed_time": 393,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "2\n3\n10\n[[2,1],[1,2],[1,1]]\n[1,1]\n[5,5]",
    "expected_output": "2",
    "task_finish_time": 1707597728031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1171725734",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxNumberOfAlloys(n: Int, k: Int, budget: Int, composition: List<List<Int>>, stock: List<Int>, cost: List<Int>): Int {\n        var maxAlloys = 0\n        for (i in 0 until k) {\n            var totalCost = 0L\n            for (j in 0 until n) {\n                val needed = maxOf(0, composition[i][j] - stock[j])\n                totalCost += needed * cost[j]\n            }\n            if (totalCost <= budget) {\n                var low = 1\n                var high = (budget / totalCost).toInt()\n                while (low <= high) {\n                    val mid = low + (high - low) / 2\n                    var currentCost = 0L\n                    for (j in 0 until n) {\n                        val needed = maxOf(0, mid * composition[i][j] - stock[j])\n                        currentCost += needed * cost[j]\n                    }\n                    if (currentCost <= budget) {\n                        maxAlloys = maxOf(maxAlloys, mid)\n                        low = mid + 1\n                    } else {\n                        high = mid - 1\n                    }\n                }\n            }\n        }\n        return maxAlloys\n    }\n}"
}