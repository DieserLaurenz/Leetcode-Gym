{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44300000,
    "question_id": "3095",
    "elapsed_time": 375,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1707597689948,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 511,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1171725403",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxNumberOfAlloys(n: Int, k: Int, budget: Int, composition: List<List<Int>>, stock: List<Int>, cost: List<Int>): Int {\n        var maxAlloys = 0\n        for (machine in 0 until k) {\n            var totalCost = 0\n            var possible = true\n            for (metal in 0 until n) {\n                val required = composition[machine][metal]\n                val available = stock[metal]\n                val additional = required - available\n                if (additional > 0) {\n                    totalCost += additional * cost[metal]\n                }\n                if (totalCost > budget) {\n                    possible = false\n                    break\n                }\n            }\n            if (possible) {\n                var low = 0\n                var high = budget\n                while (low <= high) {\n                    val mid = (low + high) / 2\n                    var currentCost = 0\n                    for (metal in 0 until n) {\n                        val needed = mid * composition[machine][metal] - stock[metal]\n                        if (needed > 0) {\n                            currentCost += needed * cost[metal]\n                        }\n                    }\n                    if (currentCost <= budget) {\n                        maxAlloys = maxOf(maxAlloys, mid)\n                        low = mid + 1\n                    } else {\n                        high = mid - 1\n                    }\n                }\n            }\n        }\n        return maxAlloys\n    }\n}"
}