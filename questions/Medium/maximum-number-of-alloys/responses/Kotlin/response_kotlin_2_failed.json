{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39648000,
    "question_id": "3095",
    "elapsed_time": 283,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707597758108,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 168,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1171726001",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxNumberOfAlloys(n: Int, k: Int, budget: Int, composition: List<List<Int>>, stock: List<Int>, cost: List<Int>): Int {\n        var maxAlloys = 0\n        for (machine in 0 until k) {\n            var minAlloysPossible = Int.MAX_VALUE\n            for (metal in 0 until n) {\n                val totalMetalNeeded = composition[machine][metal]\n                val totalCostForMetal = if (totalMetalNeeded > 0) (budget + stock[metal] * cost[metal]) / (totalMetalNeeded * cost[metal]) else Int.MAX_VALUE\n                minAlloysPossible = minOf(minAlloysPossible, totalCostForMetal)\n            }\n            maxAlloys = maxOf(maxAlloys, minAlloysPossible)\n        }\n        return maxAlloys\n    }\n}"
}