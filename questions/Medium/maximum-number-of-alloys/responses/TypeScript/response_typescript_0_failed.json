{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54668000,
    "question_id": "3095",
    "elapsed_time": 94,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707597293145,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 110,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1171721734",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maxNumberOfAlloys(n: number, k: number, budget: number, composition: number[][], stock: number[], cost: number[]): number {\n    let maxAlloys = 0;\n    for (let i = 0; i < k; i++) { // Loop through each machine\n        let minPossibleAlloys = Number.MAX_SAFE_INTEGER;\n        for (let j = 0; j < n; j++) { // Loop through each metal type\n            let needed = composition[i][j] * (stock[j] + 1) - stock[j]; // Calculate how much of each metal type is needed\n            let canProduce = Math.floor((budget + stock[j] * cost[j]) / (composition[i][j] * cost[j])); // Calculate how many alloys can be produced with current metal\n            minPossibleAlloys = Math.min(minPossibleAlloys, canProduce, Math.max(0, Math.floor((budget - needed * cost[j] + stock[j] * cost[j]) / (composition[i][j] * cost[j])))); // Update the minimum possible alloys that can be produced\n        }\n        maxAlloys = Math.max(maxAlloys, minPossibleAlloys); // Update the maximum number of alloys that can be produced\n    }\n    return maxAlloys;\n}"
}