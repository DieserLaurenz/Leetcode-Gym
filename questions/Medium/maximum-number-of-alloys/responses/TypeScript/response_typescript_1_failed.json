{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53712000,
    "question_id": "3095",
    "elapsed_time": 113,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1707597329829,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 723,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1171722042",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maxNumberOfAlloys(n: number, k: number, budget: number, composition: number[][], stock: number[], cost: number[]): number {\n    let maxAlloys = 0;\n    for (let machine = 0; machine < k; machine++) {\n        let totalCost = 0;\n        for (let metalType = 0; metalType < n; metalType++) {\n            let metalNeeded = composition[machine][metalType] - stock[metalType];\n            if (metalNeeded < 0) metalNeeded = 0;\n            totalCost += metalNeeded * cost[metalType];\n        }\n        if (totalCost <= budget) {\n            let low = 1, high = budget;\n            while (low <= high) {\n                let mid = Math.floor((low + high) / 2);\n                let currentCost = 0;\n                for (let metalType = 0; metalType < n; metalType++) {\n                    let metalNeeded = composition[machine][metalType] * mid - stock[metalType];\n                    if (metalNeeded < 0) metalNeeded = 0;\n                    currentCost += metalNeeded * cost[metalType];\n                }\n                if (currentCost <= budget) {\n                    maxAlloys = Math.max(maxAlloys, mid);\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n        }\n    }\n    return maxAlloys;\n}"
}