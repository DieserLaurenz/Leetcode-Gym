{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53036000,
    "question_id": "3095",
    "elapsed_time": 129,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1707597358998,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 723,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1171722290",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maxNumberOfAlloys(n: number, k: number, budget: number, composition: number[][], stock: number[], cost: number[]): number {\n    let maxAlloys = 0;\n    for (let i = 0; i < k; i++) {\n        let totalCost = 0;\n        for (let j = 0; j < n; j++) {\n            if (stock[j] < composition[i][j]) {\n                totalCost += (composition[i][j] - stock[j]) * cost[j];\n            }\n        }\n        if (totalCost > budget) continue;\n        let low = 1, high = budget, possibleAlloys = 0;\n        while (low <= high) {\n            let mid = Math.floor((low + high) / 2);\n            let currentCost = 0;\n            for (let j = 0; j < n; j++) {\n                let additionalMetalsNeeded = Math.max(0, composition[i][j] * mid - stock[j]);\n                currentCost += additionalMetalsNeeded * cost[j];\n            }\n            if (currentCost <= budget) {\n                possibleAlloys = mid;\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        maxAlloys = Math.max(maxAlloys, possibleAlloys);\n    }\n    return maxAlloys;\n}"
}