{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 8: exception error: {badmatch,{6,4}}",
    "full_runtime_error": "Line 8: exception error: {badmatch,{6,4}}\n[{solution,'-max_number_of_alloys/6-fun-1-',5,\n              [{file,\"solution.erl\"},{line,8}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,38}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,16}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,55}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 60032000,
    "question_id": "3095",
    "elapsed_time": 1312,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707598680078,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1171734033",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec max_number_of_alloys(N :: integer(), K :: integer(), Budget :: integer(), Composition :: [[integer()]], Stock :: [integer()], Cost :: [integer()]) -> integer().\nmax_number_of_alloys(N, K, Budget, Composition, Stock, Cost) ->\n    MaxAlloys = lists:foldl(fun(MachineComp, Acc) ->\n                                TotalCosts = lists:foldl(fun(Req, {Sum, Idx}) ->\n                                                             Needed = max(Req - lists:nth(Idx, Stock), 0),\n                                                             {Sum + Needed * lists:nth(Idx, Cost), Idx + 1}\n                                                         end, {0, 1}, MachineComp),\n                                {Cost, _} = TotalCosts,\n                                Alloys = if Cost =< Budget -> floor(Budget / Cost); true -> 0 end,\n                                max(Acc, Alloys)\n                            end, 0, Composition),\n    MaxAlloys."
}