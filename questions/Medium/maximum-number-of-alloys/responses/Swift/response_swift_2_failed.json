{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15340000,
    "question_id": "3095",
    "elapsed_time": 91,
    "compare_result
    "code_output": "48",
    "std_output": "",
    "last_testcase": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "expected_output": "54",
    "task_finish_time": 1707597625289,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 723,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1171724798",
    "input_formatted": "1, 7, 48, [[1],[5],[9],[6],[4],[2],[4]], [6], [1]",
    "input": "1\n7\n48\n[[1],[5],[9],[6],[4],[2],[4]]\n[6]\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxNumberOfAlloys(_ n: Int, _ k: Int, _ budget: Int, _ composition: [[Int]], _ stock: [Int], _ cost: [Int]) -> Int {\n        var maxAlloys = 0\n        for machineIndex in 0..<k {\n            var low = 0\n            var high = budget\n            while low <= high {\n                let mid = low + (high - low) / 2\n                var currentCost = 0\n                for metalIndex in 0..<n {\n                    let requiredMetal = composition[machineIndex][metalIndex] * mid\n                    let metalToBuy = max(0, requiredMetal - stock[metalIndex])\n                    currentCost += metalToBuy * cost[metalIndex]\n                }\n                if currentCost <= budget {\n                    maxAlloys = max(maxAlloys, mid)\n                    low = mid + 1\n                } else {\n                    high = mid - 1\n                }\n            }\n        }\n        return maxAlloys\n    }\n}"
}