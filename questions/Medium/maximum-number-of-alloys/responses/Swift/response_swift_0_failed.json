{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15440000,
    "question_id": "3095",
    "elapsed_time": 85,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "expected_output": "2",
    "task_finish_time": 1707597565974,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 254,
    "total_testcases": 731,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1171724238",
    "input_formatted": "3, 2, 15, [[1,1,1],[1,1,10]], [0,0,0], [1,2,3]",
    "input": "3\n2\n15\n[[1,1,1],[1,1,10]]\n[0,0,0]\n[1,2,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxNumberOfAlloys(_ n: Int, _ k: Int, _ budget: Int, _ composition: [[Int]], _ stock: [Int], _ cost: [Int]) -> Int {\n        var maxAlloys = 0\n        for machine in 0..<k {\n            var totalCost = 0\n            var minAlloys = Int.max\n            for metal in 0..<n {\n                let requiredMetal = composition[machine][metal]\n                let availableMetal = stock[metal]\n                let metalCost = cost[metal]\n                if requiredMetal > 0 {\n                    let additionalMetalNeeded = max(0, requiredMetal - availableMetal)\n                    totalCost += additionalMetalNeeded * metalCost\n                    minAlloys = min(minAlloys, (budget - totalCost) / (requiredMetal * metalCost) + availableMetal / requiredMetal)\n                }\n            }\n            if totalCost <= budget {\n                for metal in 0..<n {\n                    let requiredMetal = composition[machine][metal]\n                    if requiredMetal > 0 {\n                        let possibleAlloys = (stock[metal] + (budget - totalCost) / cost[metal]) / requiredMetal\n                        minAlloys = min(minAlloys, possibleAlloys)\n                    }\n                }\n            }\n            maxAlloys = max(maxAlloys, minAlloys)\n        }\n        return maxAlloys\n    }\n}"
}