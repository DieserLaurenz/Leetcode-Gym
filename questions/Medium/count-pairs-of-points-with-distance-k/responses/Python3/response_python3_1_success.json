{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "3633 ms",
    "memory": 36292000,
    "question_id": "2953",
    "elapsed_time": 3722,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708746596754,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1007,
    "total_testcases": 1007,
    "runtime_percentile": 35.867299999999815,
    "status_memory": "36.3 MB",
    "memory_percentile": 93.47809999999998,
    "pretty_lang": "Python3",
    "submission_id": "1184486978",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def countPairs(self, coordinates: List[List[int]], k: int) -> int:\n        count = 0\n        seen = {}\n        for x, y in coordinates:\n            for delta in range(-k, k+1):\n                if (x ^ delta, y ^ (k - delta)) in seen:\n                    count += seen[(x ^ delta, y ^ (k - delta))]\n            seen[(x, y)] = seen.get((x, y), 0) + 1\n        return count"
}