{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 102156000,
    "question_id": "2953",
    "elapsed_time": 690,
    "compare_result
    "code_output": "40",
    "std_output": "",
    "last_testcase": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "expected_output": "2",
    "task_finish_time": 1707094878935,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1007,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1166320854",
    "input_formatted": "[[1,2],[4,2],[1,3],[5,2]], 5",
    "input": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int CountPairs(IList<IList<int>> coordinates, int k) {\n        int count = 0;\n        var map = new Dictionary<int, List<int>>();\n\n        foreach (var point in coordinates) {\n            for (int bit = 0; bit < 22; bit++) {\n                int xorX = point[0] ^ (k * (bit % 2));\n                int xorY = point[1] ^ (k * ((bit + 1) % 2));\n                int hash = (xorX << 10) ^ xorY;\n\n                if (map.ContainsKey(hash)) {\n                    count += map[hash].Count;\n                }\n\n                if (bit == 0) {\n                    if (!map.ContainsKey(hash)) {\n                        map[hash] = new List<int>();\n                    }\n                    map[hash].Add(bit);\n                }\n            }\n        }\n\n        return count;\n    }\n}"
}