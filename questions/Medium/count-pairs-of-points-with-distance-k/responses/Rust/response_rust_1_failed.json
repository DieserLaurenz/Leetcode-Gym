{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6912000,
    "question_id": "2953",
    "elapsed_time": 722,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "expected_output": "2",
    "task_finish_time": 1707096059792,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 37,
    "total_testcases": 1007,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1166330454",
    "input_formatted": "[[1,2],[4,2],[1,3],[5,2]], 5",
    "input": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_pairs(coordinates: Vec<Vec<i32>>, k: i32) -> i32 {\n        use std::collections::HashMap;\n\n        let mut count = 0;\n        let mut map = HashMap::new();\n        \n        for coord in coordinates.iter() {\n            for x_offset in 0..=k {\n                let y_offset = k - x_offset;\n                if let Some(&c) = map.get(&(coord[0] ^ x_offset, coord[1] ^ y_offset)) {\n                    count += c;\n                }\n                if x_offset != y_offset {\n                    if let Some(&c) = map.get(&(coord[0] ^ y_offset, coord[1] ^ x_offset)) {\n                        count += c;\n                    }\n                }\n            }\n            *map.entry((coord[0], coord[1])).or_insert(0) += 1;\n        }\n\n        count\n    }\n}"
}