{
    "status_code": 20,
    "lang": "scala",
    "run_success": false,
    "compile_error": "/leetcode/user_code/1166329269/prog_joined.scala:10: warning: match may not be exhaustive.",
    "full_compile_error": "/leetcode/user_code/1166329269/prog_joined.scala:10: warning: match may not be exhaustive.\nIt would fail on the following inputs: List(_), Nil\n        coordinates.combinations(2).count { case List(a, b) =>\n                                          ^\nwarning: 1 deprecation (since 2.13.3); re-run with -deprecation for details",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2953",
    "task_finish_time": 1707095904544,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1166329269",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countPairs(coordinates: List[List[Int]], k: Int): Int = {\n        coordinates.combinations(2).count { case List(a, b) =>\n            (a(0) ^ b(0)) + (a(1) ^ b(1)) == k\n        }\n    }\n}"
}