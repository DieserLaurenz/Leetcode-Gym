{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59480000,
    "question_id": "2953",
    "elapsed_time": 10283,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[[1,3],[1,3],[1,3],[1,3],[1,3]]\n0",
    "expected_output": "10",
    "task_finish_time": 1707095937016,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 588,
    "total_testcases": 1007,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1166329439",
    "input_formatted": "[[1,3],[1,3],[1,3],[1,3],[1,3]], 0",
    "input": "[[1,3],[1,3],[1,3],[1,3],[1,3]]\n0",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countPairs(coordinates: List[List[Int]], k: Int): Int = {\n        coordinates.combinations(2).count {\n            case List(a, b) => (a.head ^ b.head) + (a(1) ^ b(1)) == k\n            case _ => false\n        }\n    }\n}"
}