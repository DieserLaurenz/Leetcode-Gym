{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 161220000,
    "question_id": "2953",
    "elapsed_time": 350,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "expected_output": "2",
    "task_finish_time": 1707085468232,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 31,
    "total_testcases": 1007,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1166244086",
    "input_formatted": "[[1,2],[4,2],[1,3],[5,2]], 5",
    "input": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int countPairs(vector<vector<int>>& coordinates, int k) {\n        int count = 0;\n        unordered_map<int, unordered_map<int, int>> mp; // Map to store frequency of (x XOR k, y) and (x, y XOR k) pairs\n        for (auto& p : coordinates) {\n            int x = p[0], y = p[1];\n            // Check for (x, y XOR k) and (x XOR k, y) because both will give the required distance when XORed with another point\n            count += mp[x][y ^ k] + mp[x ^ k][y];\n            mp[x][y]++; // Increase the frequency of the point\n        }\n        return count;\n    }\n};"
}