{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13492000,
    "question_id": "2953",
    "elapsed_time": 162,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[[27,94],[61,68],[47,0],[100,4],[127,89],[61,103],[26,4],[51,54],[91,26],[98,23],[80,74],[19,93]]\n95",
    "expected_output": "5",
    "task_finish_time": 1707095724292,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 94,
    "total_testcases": 1007,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1166327794",
    "input_formatted": "[[27,94],[61,68],[47,0],[100,4],[127,89],[61,103],[26,4],[51,54],[91,26],[98,23],[80,74],[19,93]], 95",
    "input": "[[27,94],[61,68],[47,0],[100,4],[127,89],[61,103],[26,4],[51,54],[91,26],[98,23],[80,74],[19,93]]\n95",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countPairs(coordinates [][]int, k int) int {\n    count := 0\n    seen := make(map[int]int)\n    for _, coord := range coordinates {\n        xorSum := coord[0] ^ coord[1]\n        count += seen[xorSum ^ k]\n        seen[xorSum]++\n    }\n    return count\n}"
}