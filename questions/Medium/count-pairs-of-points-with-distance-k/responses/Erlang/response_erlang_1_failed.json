{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 4: exception error: function_clause",
    "full_runtime_error": "Line 4: exception error: function_clause\n[{solution,'-count_pairs/2-inlined-0-',\n              [[1,2],0],\n              [{file,\"solution.erl\"},{line,4}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,32}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,18}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,49}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 63140000,
    "question_id": "2953",
    "elapsed_time": 1319,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "expected_output": "2",
    "task_finish_time": 1707105555570,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1007,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1166417813",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec count_pairs(Coordinates :: [[integer()]], K :: integer()) -> integer().\ncount_pairs(Coordinates, K) ->\n    Count = fun(Idx, CountAcc) ->\n                lists:foldl(fun({X, Y}, Acc) ->\n                                case Idx of\n                                    {X1, Y1, Idx1} when Idx1 < length(Coordinates) ->\n                                        Distance = (X bxor X1) + (Y bxor Y1),\n                                        if Distance == K -> Acc + 1; true -> Acc end;\n                                    _ ->\n                                        Acc\n                                end\n                            end, CountAcc, Coordinates)\n            end,\n    lists:foldl(fun({Coord, Idx}, Acc) -> Count({Coord, Idx}, Acc) end, 0, lists:zip(Coordinates, lists:seq(0, length(Coordinates) - 1)))."
}