{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 149524000,
    "question_id": "2953",
    "elapsed_time": 1936,
    "compare_result": "00000000000000100000000000000100000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000010000010000000000001000000000000000000000001001000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000001000000000000000000000000000000000000000000000000100000000001000000000000000000000000000000000000000000000100000000100000000000000001000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "expected_output": "2",
    "task_finish_time": 1707105586202,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 19,
    "total_testcases": 1007,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1166418153",
    "input_formatted": "[[1,2],[4,2],[1,3],[5,2]], 5",
    "input": "[[1,2],[4,2],[1,3],[5,2]]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_pairs(Coordinates :: [[integer()]], K :: integer()) -> integer().\ncount_pairs(Coordinates, K) ->\n    pairs(Coordinates, K, 0, 1, 0).\n\npairs(_, _, _, _, Acc) when is_integer(Acc) -> Acc;\npairs(Coordinates, K, I, J, Acc) when I < length(Coordinates), J < length(Coordinates) ->\n    [[Xi, Yi]] = [lists:nth(I, Coordinates)],\n    [[Xj, Yj]] = [lists:nth(J, Coordinates)],\n    NewAcc = if (Xi bxor Xj) + (Yi bxor Yj) == K -> Acc + 1; true -> Acc end,\n    if J + 1 < length(Coordinates) -> pairs(Coordinates, K, I, J + 1, NewAcc);\n       true -> pairs(Coordinates, K, I + 1, I + 2, NewAcc)\n    end."
}