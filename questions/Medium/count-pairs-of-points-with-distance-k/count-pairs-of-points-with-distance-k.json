{
    "acRate": 31.755165219732152,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2857",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Count Pairs of Points With Distance k",
    "titleSlug": "count-pairs-of-points-with-distance-k",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Bit Manipulation",
            "id": "VG9waWNUYWdOb2RlOjE5",
            "slug": "bit-manipulation"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int countPairs(vector<vector<int>>& coordinates, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int countPairs(List<List<Integer>> coordinates, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def countPairs(self, coordinates, k):         \"\"\"         :type coordinates: List[List[int]]         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def countPairs(self, coordinates: List[List[int]], k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int countPairs(int** coordinates, int coordinatesSize, int* coordinatesColSize, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int CountPairs(IList<IList<int>> coordinates, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} coordinates  * @param {number} k  * @return {number}  */ var countPairs = function(coordinates, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function countPairs(coordinates: number[][], k: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $coordinates      * @param Integer $k      * @return Integer      */     function countPairs($coordinates, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func countPairs(_ coordinates: [[Int]], _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun countPairs(coordinates: List<List<Int>>, k: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int countPairs(List<List<int>> coordinates, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func countPairs(coordinates [][]int, k int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} coordinates # @param {Integer} k # @return {Integer} def count_pairs(coordinates, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def countPairs(coordinates: List[List[Int]], k: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn count_pairs(coordinates: Vec<Vec<i32>>, k: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (count-pairs coordinates k)   (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec count_pairs(Coordinates :: [[integer()]], K :: integer()) -> integer(). count_pairs(Coordinates, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec count_pairs(coordinates :: [[integer]], k :: integer) :: integer   def count_pairs(coordinates, k) do    end end"
        }
    ],
    "content": "You are given a 2D integer array coordinates and an integer k, where coordinates[i] = [xi, yi] are the coordinates of the ith point in a 2D plane. We define the distance between two points (x1, y1) and (x2, y2) as (x1 XOR x2) + (y1 XOR y2) where XOR is the bitwise XOR operation. Return the number of pairs (i, j) such that i < j and the distance between points i and j is equal to k.  Example 1:  Input: coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5 Output: 2 Explanation: We can choose the following pairs: - (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5. - (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5.  Example 2:  Input: coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0 Output: 10 Explanation: Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs.   Constraints:  2 <= coordinates.length <= 50000 0 <= xi, yi <= 106 0 <= k <= 100  "
}