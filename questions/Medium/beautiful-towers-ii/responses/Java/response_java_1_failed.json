{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68276000,
    "display_runtime": "6",
    "question_id": "3113",
    "elapsed_time": 346,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751119507,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1162506921",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public long maximumSumOfHeights(List<Integer> maxHeights) {\n        int n = maxHeights.size();\n        long result = 0;\n\n        // Create prefix and suffix arrays to hold the maximum height that can be achieved from left and right\n        long[] prefix = new long[n];\n        long[] suffix = new long[n];\n\n        prefix[0] = maxHeights.get(0);\n        for (int i = 1; i < n; i++) {\n            prefix[i] = Math.min(prefix[i - 1] + 1, maxHeights.get(i));\n        }\n\n        suffix[n - 1] = maxHeights.get(n - 1);\n        for (int i = n - 2; i >= 0; i--) {\n            suffix[i] = Math.min(suffix[i + 1] + 1, maxHeights.get(i));\n        }\n\n        // Calculate maximum possible sum by considering the minimum of prefix and suffix values at each point\n        for (int i = 0; i < n; i++) {\n            result += Math.min(prefix[i], suffix[i]);\n        }\n\n        return result;\n    }\n}"
}