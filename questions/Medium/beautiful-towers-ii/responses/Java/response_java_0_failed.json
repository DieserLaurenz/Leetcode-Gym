{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67068000,
    "display_runtime": "6",
    "question_id": "3113",
    "elapsed_time": 351,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751081470,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 8,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1162506622",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public long maximumSumOfHeights(List<Integer> maxHeights) {\n        int n = maxHeights.size();\n        long[] leftMax = new long[n];\n        long[] rightMax = new long[n];\n        long sum = 0;\n\n        // Calculate the maximum height possible from the left to the peak\n        leftMax[0] = maxHeights.get(0);\n        for (int i = 1; i < n; i++) {\n            leftMax[i] = Math.min(leftMax[i - 1], maxHeights.get(i));\n        }\n\n        // Calculate the maximum height possible from the right to the peak\n        rightMax[n - 1] = maxHeights.get(n - 1);\n        for (int i = n - 2; i >= 0; i--) {\n            rightMax[i] = Math.min(rightMax[i + 1], maxHeights.get(i));\n        }\n\n        // Calculate the maximum sum of heights by taking the maximum at each position\n        // considering both left and right maximums to maintain the mountain property\n        for (int i = 0; i < n; i++) {\n            sum += Math.min(leftMax[i], rightMax[i]);\n        }\n\n        return sum;\n    }\n}"
}