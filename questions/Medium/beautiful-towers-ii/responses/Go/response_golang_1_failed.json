{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7060000,
    "question_id": "3113",
    "elapsed_time": 3010,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706761972616,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1162609100",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumSumOfHeights(maxHeights []int) int64 {\n    n := len(maxHeights)\n    var maxSum int64 = 0\n\n    for peakIndex := 0; peakIndex < n; peakIndex++ {\n        // Calculate sum assuming the peak is at peakIndex\n        sum := int64(maxHeights[peakIndex])\n        leftMax := maxHeights[peakIndex]\n        rightMax := maxHeights[peakIndex]\n\n        // Expand to the left\n        for i := peakIndex - 1; i >= 0; i-- {\n            leftMax = min(maxHeights[i], leftMax-1)\n            sum += int64(leftMax)\n        }\n\n        // Expand to the right\n        for i := peakIndex + 1; i < n; i++ {\n            rightMax = min(maxHeights[i], rightMax-1)\n            sum += int64(rightMax)\n        }\n\n        // Update maxSum if this configuration has a higher sum\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n\n    return maxSum\n}\n\n// Utility function to find the minimum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}