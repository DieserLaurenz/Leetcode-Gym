{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9876000,
    "question_id": "3113",
    "elapsed_time": 133,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706762024792,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1162609763",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumSumOfHeights(maxHeights []int) int64 {\n    n := len(maxHeights)\n    leftMax := make([]int, n)\n    rightMax := make([]int, n)\n\n    // Calculate maximum possible heights from the left\n    leftMax[0] = maxHeights[0]\n    for i := 1; i < n; i++ {\n        leftMax[i] = min(maxHeights[i], leftMax[i-1]+1)\n    }\n\n    // Calculate maximum possible heights from the right\n    rightMax[n-1] = maxHeights[n-1]\n    for i := n - 2; i >= 0; i-- {\n        rightMax[i] = min(maxHeights[i], rightMax[i+1]+1)\n    }\n\n    // Calculate the maximum sum by taking the minimum of leftMax and rightMax for each position\n    var maxSum int64 = 0\n    for i := 0; i < n; i++ {\n        maxSum += int64(min(leftMax[i], rightMax[i]))\n    }\n\n    return maxSum\n}\n\n// Utility function to find the minimum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}