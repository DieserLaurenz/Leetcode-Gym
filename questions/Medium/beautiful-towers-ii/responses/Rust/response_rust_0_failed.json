{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4612000,
    "question_id": "3113",
    "elapsed_time": 22,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706762599718,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 8,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1162616590",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_sum_of_heights(max_heights: Vec<i32>) -> i64 {\n        let n = max_heights.len();\n        let mut left_max = vec![0; n];\n        let mut right_max = vec![0; n];\n        let mut result = 0;\n\n        // Compute maximum heights from the left to the right\n        left_max[0] = max_heights[0];\n        for i in 1..n {\n            left_max[i] = left_max[i - 1].min(max_heights[i]);\n        }\n\n        // Compute maximum heights from the right to the left\n        right_max[n - 1] = max_heights[n - 1];\n        for i in (0..n - 1).rev() {\n            right_max[i] = right_max[i + 1].min(max_heights[i]);\n        }\n\n        // Calculate the maximum possible sum of heights\n        for i in 0..n {\n            // The height at each position is the maximum possible height considering both sides\n            let height = left_max[i].min(right_max[i]);\n            result += height as i64;\n        }\n\n        result\n    }\n}"
}