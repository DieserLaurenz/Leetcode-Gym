{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3996000,
    "question_id": "3113",
    "elapsed_time": 23,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706762696378,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1162617829",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_sum_of_heights(max_heights: Vec<i32>) -> i64 {\n        let n = max_heights.len();\n        let mut heights = max_heights.clone();\n\n        // Forward pass to ensure non-decreasing heights up to the peak\n        for i in 1..n {\n            heights[i] = heights[i].min(heights[i - 1] + 1);\n        }\n\n        // Backward pass to ensure non-increasing heights after the peak\n        for i in (0..n - 1).rev() {\n            heights[i] = heights[i].min(heights[i + 1] + 1);\n        }\n\n        // Calculate the maximum sum of heights\n        heights.into_iter().map(|h| h as i64).sum()\n    }\n}"
}