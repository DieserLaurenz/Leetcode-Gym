{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4660000,
    "question_id": "3113",
    "elapsed_time": 23,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706762651917,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1162617286",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_sum_of_heights(max_heights: Vec<i32>) -> i64 {\n        let n = max_heights.len();\n        let mut prefix_max = vec![0; n]; // Max height from left to right\n        let mut suffix_max = vec![0; n]; // Max height from right to left\n        let mut result = 0;\n\n        // Calculate prefix max\n        prefix_max[0] = max_heights[0];\n        for i in 1..n {\n            prefix_max[i] = prefix_max[i - 1].min(max_heights[i]);\n        }\n\n        // Calculate suffix max\n        suffix_max[n - 1] = max_heights[n - 1];\n        for i in (0..n-1).rev() {\n            suffix_max[i] = suffix_max[i + 1].min(max_heights[i]);\n        }\n\n        // Calculate the maximum sum considering each position as the peak\n        for i in 0..n {\n            let current_height = prefix_max[i].min(suffix_max[i]);\n            result = result.max(prefix_max[i] as i64 + suffix_max[i] as i64 - current_height as i64);\n        }\n\n        // Adjust the result since the peak was counted twice\n        result\n    }\n}"
}