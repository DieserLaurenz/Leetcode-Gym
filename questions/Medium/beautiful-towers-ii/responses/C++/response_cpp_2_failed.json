{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 92444000,
    "question_id": "3113",
    "elapsed_time": 145,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751045060,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162506319",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumSumOfHeights(vector<int>& maxHeights) {\n        int n = maxHeights.size();\n        vector<long long> prefixMax(n, 0), suffixMax(n, 0);\n        long long result = 0;\n\n        // Calculate prefix max heights\n        for (int i = 0; i < n; ++i) {\n            if (i == 0) prefixMax[i] = maxHeights[i];\n            else prefixMax[i] = min(prefixMax[i - 1] + 1, static_cast<long long>(maxHeights[i]));\n        }\n\n        // Calculate suffix max heights\n        for (int i = n - 1; i >= 0; --i) {\n            if (i == n - 1) suffixMax[i] = maxHeights[i];\n            else suffixMax[i] = min(suffixMax[i + 1] + 1, static_cast<long long>(maxHeights[i]));\n        }\n\n        // Calculate the maximum sum of heights by taking the minimum of prefixMax and suffixMax for each tower\n        for (int i = 0; i < n; ++i) {\n            result += min(prefixMax[i], suffixMax[i]);\n        }\n\n        return result;\n    }\n};"
}