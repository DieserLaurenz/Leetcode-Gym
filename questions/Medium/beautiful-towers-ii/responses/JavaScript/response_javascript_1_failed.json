{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64864000,
    "question_id": "3113",
    "elapsed_time": 131,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751819887,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162512740",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} maxHeights\n * @return {number}\n */\nvar maximumSumOfHeights = function(maxHeights) {\n    let n = maxHeights.length;\n    let prefixMax = new Array(n).fill(0);\n    let suffixMax = new Array(n).fill(0);\n    let maxSum = 0;\n\n    // Calculate prefix max, ensuring it doesn't exceed maxHeights and increases towards the peak\n    for (let i = 0; i < n; ++i) {\n        if (i == 0) prefixMax[i] = maxHeights[i];\n        else prefixMax[i] = Math.min(prefixMax[i - 1] + 1, maxHeights[i]);\n    }\n\n    // Calculate suffix max, ensuring it doesn't exceed maxHeights and increases towards the peak from the right\n    for (let i = n - 1; i >= 0; --i) {\n        if (i == n - 1) suffixMax[i] = maxHeights[i];\n        else suffixMax[i] = Math.min(suffixMax[i + 1] + 1, maxHeights[i]);\n    }\n\n    // Calculate maximum sum by taking the minimum of prefixMax and suffixMax at each point\n    // This ensures we adhere to the mountain array rules and the maxHeights constraint\n    for (let i = 0; i < n; ++i) {\n        maxSum += Math.min(prefixMax[i], suffixMax[i]);\n    }\n\n    return maxSum;\n};"
}