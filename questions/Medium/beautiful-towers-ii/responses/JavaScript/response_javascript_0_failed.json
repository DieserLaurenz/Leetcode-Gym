{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57656000,
    "question_id": "3113",
    "elapsed_time": 4007,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751777165,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162512357",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} maxHeights\n * @return {number}\n */\nvar maximumSumOfHeights = function(maxHeights) {\n    let n = maxHeights.length;\n    let maxSum = 0;\n\n    // Function to calculate the maximum sum for a given peak\n    const calculateSum = (peak) => {\n        let sum = maxHeights[peak];\n        let leftHeight = maxHeights[peak];\n        let rightHeight = maxHeights[peak];\n        \n        // Calculate sum towards the left\n        for (let i = peak - 1; i >= 0; i--) {\n            leftHeight = Math.min(maxHeights[i], leftHeight - 1);\n            sum += leftHeight;\n        }\n\n        // Calculate sum towards the right\n        for (let i = peak + 1; i < n; i++) {\n            rightHeight = Math.min(maxHeights[i], rightHeight - 1);\n            sum += rightHeight;\n        }\n\n        return sum;\n    };\n\n    // Try each position as a peak and calculate the maximum sum\n    for (let i = 0; i < n; i++) {\n        let currentSum = calculateSum(i);\n        maxSum = Math.max(maxSum, currentSum);\n    }\n\n    return maxSum;\n};"
}