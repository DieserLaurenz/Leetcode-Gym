{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53236000,
    "question_id": "3113",
    "elapsed_time": 4018,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751432741,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1162509463",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaximumSumOfHeights(IList<int> maxHeights) {\n        long maxSum = 0;\n        \n        for (int peak = 0; peak < maxHeights.Count; peak++) {\n            long sum = maxHeights[peak];\n            int minHeight = maxHeights[peak];\n\n            // Expand left from the peak\n            for (int i = peak - 1; i >= 0; i--) {\n                minHeight = Math.Min(minHeight - 1, maxHeights[i]);\n                if (minHeight <= 0) break; // Ensure height is at least 1\n                sum += minHeight;\n            }\n\n            minHeight = maxHeights[peak];\n            // Expand right from the peak\n            for (int i = peak + 1; i < maxHeights.Count; i++) {\n                minHeight = Math.Min(minHeight - 1, maxHeights[i]);\n                if (minHeight <= 0) break; // Ensure height is at least 1\n                sum += minHeight;\n            }\n\n            maxSum = Math.Max(maxSum, sum);\n        }\n\n        return maxSum;\n    }\n}"
}