{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67920000,
    "question_id": "3113",
    "elapsed_time": 437,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751477803,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1162509860",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaximumSumOfHeights(IList<int> maxHeights) {\n        int n = maxHeights.Count;\n        long[] leftMax = new long[n];\n        long[] rightMax = new long[n];\n        \n        // Initialize leftMax with the first element\n        leftMax[0] = maxHeights[0];\n        // Calculate max height from the left\n        for (int i = 1; i < n; i++) {\n            leftMax[i] = Math.Min(leftMax[i - 1] + 1, maxHeights[i]);\n        }\n        \n        // Initialize rightMax with the last element\n        rightMax[n - 1] = maxHeights[n - 1];\n        // Calculate max height from the right\n        for (int i = n - 2; i >= 0; i--) {\n            rightMax[i] = Math.Min(rightMax[i + 1] + 1, maxHeights[i]);\n        }\n        \n        // Calculate the maximum sum\n        long maximumSum = 0;\n        for (int i = 0; i < n; i++) {\n            // The height at each position is the minimum of the left and right max heights\n            maximumSum += Math.Min(leftMax[i], rightMax[i]);\n        }\n        \n        return maximumSum;\n    }\n}"
}