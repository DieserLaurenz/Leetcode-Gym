{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72812000,
    "question_id": "3113",
    "elapsed_time": 10129,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706762417299,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 59,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162614258",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumSumOfHeights(maxHeights: List[Int]): Long = {\n        val n = maxHeights.length\n        var dp = Array.fill[Long](n)(0)\n\n        // Forward pass for the left side (ascending part of the mountain)\n        dp(0) = maxHeights(0)\n        for (i <- 1 until n) {\n            dp(i) = Math.min(dp(i - 1) + 1, maxHeights(i))\n        }\n\n        // Backward pass for the right side (descending part of the mountain)\n        for (i <- (n - 2) to 0 by -1) {\n            dp(i) = Math.min(dp(i), dp(i + 1) + 1)\n        }\n\n        // Calculate the sum of the optimal heights\n        dp.sum\n    }\n}"
}