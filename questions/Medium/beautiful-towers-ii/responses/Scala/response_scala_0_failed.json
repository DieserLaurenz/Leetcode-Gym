{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67520000,
    "question_id": "3113",
    "elapsed_time": 10271,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706762298641,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 59,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162612811",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n  def maximumSumOfHeights(maxHeights: List[Int]): Long = {\n    val n = maxHeights.length\n    var prefixMax = Array.fill(n)(0)\n    var suffixMax = Array.fill(n)(0)\n    var result: Long = 0\n\n    // Calculate prefix max, ensuring it doesn't exceed maxHeights\n    prefixMax(0) = maxHeights(0)\n    for (i <- 1 until n) {\n      prefixMax(i) = Math.min(prefixMax(i - 1) + 1, maxHeights(i))\n    }\n\n    // Calculate suffix max, ensuring it doesn't exceed maxHeights\n    suffixMax(n - 1) = maxHeights(n - 1)\n    for (i <- (n - 2) to 0 by -1) {\n      suffixMax(i) = Math.min(suffixMax(i + 1) + 1, maxHeights(i))\n    }\n\n    // Calculate the maximum possible sum by taking the minimum of prefixMax and suffixMax\n    for (i <- 0 until n) {\n      result += Math.min(prefixMax(i), suffixMax(i))\n    }\n\n    result\n  }\n}"
}