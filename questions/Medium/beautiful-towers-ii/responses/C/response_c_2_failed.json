{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13164000,
    "question_id": "3113",
    "elapsed_time": 101,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751306689,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162508461",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long maximumSumOfHeights(int* maxHeights, int maxHeightsSize) {\n    // Arrays to store the max height up to that point from left and right\n    int left[maxHeightsSize];\n    int right[maxHeightsSize];\n\n    left[0] = maxHeights[0];\n    for (int i = 1; i < maxHeightsSize; ++i) {\n        left[i] = (left[i - 1] < maxHeights[i]) ? left[i - 1] + 1 : maxHeights[i];\n    }\n\n    right[maxHeightsSize - 1] = maxHeights[maxHeightsSize - 1];\n    for (int i = maxHeightsSize - 2; i >= 0; --i) {\n        right[i] = (right[i + 1] < maxHeights[i]) ? right[i + 1] + 1 : maxHeights[i];\n    }\n\n    // Calculating the maximum sum of heights\n    long long maxSum = 0;\n    for (int i = 0; i < maxHeightsSize; ++i) {\n        int minHeight = left[i] < right[i] ? left[i] : right[i];\n        maxSum += minHeight;\n    }\n\n    return maxSum;\n}"
}