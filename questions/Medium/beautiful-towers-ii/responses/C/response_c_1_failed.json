{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18100000,
    "question_id": "3113",
    "elapsed_time": 112,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751260832,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162508122",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n\nlong long maximumSumOfHeights(int* maxHeights, int maxHeightsSize) {\n    long long maxSum = 0;\n\n    // Arrays to store the maximum height of tower from left to right and right to left\n    int* leftMax = (int*)malloc(maxHeightsSize * sizeof(int));\n    int* rightMax = (int*)malloc(maxHeightsSize * sizeof(int));\n\n    // Initialize leftMax and rightMax arrays\n    leftMax[0] = maxHeights[0];\n    for (int i = 1; i < maxHeightsSize; i++) {\n        leftMax[i] = (maxHeights[i] < leftMax[i-1] + 1) ? maxHeights[i] : leftMax[i-1] + 1;\n    }\n\n    rightMax[maxHeightsSize - 1] = maxHeights[maxHeightsSize - 1];\n    for (int i = maxHeightsSize - 2; i >= 0; i--) {\n        rightMax[i] = (maxHeights[i] < rightMax[i+1] + 1) ? maxHeights[i] : rightMax[i+1] + 1;\n    }\n\n    // Calculate the maximum possible sum of heights\n    for (int i = 0; i < maxHeightsSize; i++) {\n        int minHeight = (leftMax[i] < rightMax[i]) ? leftMax[i] : rightMax[i];\n        maxSum += minHeight;\n    }\n\n    // Clean up\n    free(leftMax);\n    free(rightMax);\n\n    return maxSum;\n}"
}