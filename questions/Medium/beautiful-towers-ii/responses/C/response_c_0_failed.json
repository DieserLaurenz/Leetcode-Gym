{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8364000,
    "question_id": "3113",
    "elapsed_time": 3012,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751215708,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 187,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162507709",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long maximumSumOfHeights(int* maxHeights, int maxHeightsSize) {\n    long long maxSum = 0;\n    for (int peak = 0; peak < maxHeightsSize; ++peak) {\n        long long sum = maxHeights[peak];\n        int leftMax = maxHeights[peak];\n        // Increase towards the peak from the left\n        for (int i = peak - 1; i >= 0; --i) {\n            leftMax = leftMax < maxHeights[i] ? leftMax : maxHeights[i];\n            sum += leftMax;\n            if (leftMax > 1) --leftMax;\n        }\n        int rightMax = maxHeights[peak];\n        // Decrease away from the peak to the right\n        for (int i = peak + 1; i < maxHeightsSize; ++i) {\n            rightMax = rightMax < maxHeights[i] ? rightMax : maxHeights[i];\n            sum += rightMax;\n            if (rightMax > 1) --rightMax;\n        }\n        // Update maxSum if this configuration has a higher sum\n        if (sum > maxSum) {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n}"
}