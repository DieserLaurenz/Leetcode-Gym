{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25252000,
    "question_id": "3113",
    "elapsed_time": 680,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735282589,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184414530",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumSumOfHeights(self, maxHeights):\n        n = len(maxHeights)\n        prefix = [0] * n\n        suffix = [0] * n\n        result = 0\n\n        # Calculate prefix maximum heights in ascending order\n        for i in range(n):\n            if i == 0:\n                prefix[i] = maxHeights[i]\n            else:\n                prefix[i] = min(prefix[i-1]+1, maxHeights[i])\n\n        # Calculate suffix maximum heights in descending order\n        for i in range(n-1, -1, -1):\n            if i == n-1:\n                suffix[i] = maxHeights[i]\n            else:\n                suffix[i] = min(suffix[i+1]+1, maxHeights[i])\n\n        # Calculate the maximum sum of heights by taking the minimum of prefix and suffix values\n        for i in range(n):\n            result += min(prefix[i], suffix[i])\n\n        return result"
}