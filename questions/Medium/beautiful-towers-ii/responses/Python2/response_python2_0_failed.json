{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25520000,
    "question_id": "3113",
    "elapsed_time": 638,
    "compare_result": "00011101111011111000101000100000111100000000000010000000000000000000011001000100110000000100110000100000000000101010000011100000000000000000000000000000000000000000001000001000010010010110111010000000010000000010000000000010000000000000000000000000000000000000000100000000000000010001100000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735257790,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184414384",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumSumOfHeights(self, maxHeights):\n        n = len(maxHeights)\n        leftMax = [0] * n\n        rightMax = [0] * n\n        \n        leftMax[0] = maxHeights[0]\n        for i in range(1, n):\n            leftMax[i] = min(leftMax[i-1] + 1, maxHeights[i])\n        \n        rightMax[n-1] = maxHeights[n-1]\n        for i in range(n-2, -1, -1):\n            rightMax[i] = min(rightMax[i+1] + 1, maxHeights[i])\n        \n        maxSum = 0\n        for i in range(n):\n            maxSum += min(leftMax[i], rightMax[i])\n        \n        return maxSum"
}