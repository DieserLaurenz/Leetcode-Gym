{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 28024000,
    "question_id": "3113",
    "elapsed_time": 283,
    "compare_result": "00011101111011111000101000100000111100000000000010000000000000000000011001000100110000000100110000100000000000101010000011100000000000000000000000000000000000000000001000001000010010010110111010000000010000000010000000000010000000000000000000000000000000000000000100000000000000010001100000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706761101351,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162599066",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $maxHeights\n     * @return Integer\n     */\n    function maximumSumOfHeights($maxHeights) {\n        $n = count($maxHeights);\n        $left = array_fill(0, $n, 0); // Initialize left array for ascending part\n        $right = array_fill(0, $n, 0); // Initialize right array for descending part\n\n        // From left to right\n        $left[0] = $maxHeights[0];\n        for ($i = 1; $i < $n; $i++) {\n            $left[$i] = min($maxHeights[$i], $left[$i - 1] + 1);\n        }\n\n        // From right to left\n        $right[$n - 1] = $maxHeights[$n - 1];\n        for ($i = $n - 2; $i >= 0; $i--) {\n            $right[$i] = min($maxHeights[$i], $right[$i + 1] + 1);\n        }\n\n        // Calculate the maximum possible sum of heights\n        $maxSum = 0;\n        for ($i = 0; $i < $n; $i++) {\n            $maxSum += min($left[$i], $right[$i]);\n        }\n\n        return $maxSum;\n    }\n}"
}