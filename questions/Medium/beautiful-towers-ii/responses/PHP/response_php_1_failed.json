{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20372000,
    "question_id": "3113",
    "elapsed_time": 5225,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706761160764,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162599641",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $maxHeights\n     * @return Integer\n     */\n    function maximumSumOfHeights($maxHeights) {\n        $n = count($maxHeights);\n        $maxSum = 0;\n\n        for ($peak = 0; $peak < $n; $peak++) {\n            // Calculate maximum height for the peak\n            $peakHeight = $maxHeights[$peak];\n            $sum = $peakHeight;\n\n            // Expand to the left from the peak\n            $leftHeight = $peakHeight;\n            for ($i = $peak - 1; $i >= 0; $i--) {\n                $leftHeight = min($leftHeight - 1, $maxHeights[$i]);\n                if ($leftHeight < 1) break; // Ensure the height is at least 1\n                $sum += $leftHeight;\n            }\n\n            // Expand to the right from the peak\n            $rightHeight = $peakHeight;\n            for ($i = $peak + 1; $i < $n; $i++) {\n                $rightHeight = min($rightHeight - 1, $maxHeights[$i]);\n                if ($rightHeight < 1) break; // Ensure the height is at least 1\n                $sum += $rightHeight;\n            }\n\n            // Update maximum sum if this configuration has a higher sum\n            $maxSum = max($maxSum, $sum);\n        }\n\n        return $maxSum;\n    }\n}"
}