{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27720000,
    "question_id": "3113",
    "elapsed_time": 442,
    "compare_result": "00011101111011111000101000100000111100000000000010000000000000000000011001000100110000000100110000100000000000101010000011100000000000000000000000000000000000000000001000001000010010010110111010000000010000000010000000000010000000000000000000000000000000000000000100000000000000010001100000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706761207057,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162600246",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $maxHeights\n     * @return Integer\n     */\n    function maximumSumOfHeights($maxHeights) {\n        $n = count($maxHeights);\n        $ascending = array_fill(0, $n, 0);\n        $descending = array_fill(0, $n, 0);\n\n        // Ascend to the peak\n        $ascending[0] = $maxHeights[0];\n        for ($i = 1; $i < $n; $i++) {\n            $ascending[$i] = min($maxHeights[$i], $ascending[$i - 1] + 1);\n        }\n\n        // Descend from the peak\n        $descending[$n - 1] = $maxHeights[$n - 1];\n        for ($i = $n - 2; $i >= 0; $i--) {\n            $descending[$i] = min($maxHeights[$i], $descending[$i + 1] + 1);\n        }\n\n        // Calculate the maximum possible sum of heights by taking the minimum\n        // of ascending and descending at each position, which ensures the mountain property\n        $maxSum = 0;\n        for ($i = 0; $i < $n; $i++) {\n            $maxSum += min($ascending[$i], $descending[$i]);\n        }\n\n        return $maxSum;\n    }\n}"
}