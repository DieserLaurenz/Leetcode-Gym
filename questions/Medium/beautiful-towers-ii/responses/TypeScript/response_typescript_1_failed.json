{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61152000,
    "question_id": "3113",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706752000890,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 172,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162514186",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumSumOfHeights(maxHeights: number[]): number {\n    const n = maxHeights.length;\n    let maxSum = 0;\n\n    // Calculate prefix max to ensure non-decreasing order from left to peak\n    let left = new Array(n);\n    left[0] = maxHeights[0];\n    for (let i = 1; i < n; i++) {\n        left[i] = Math.min(maxHeights[i], left[i - 1]);\n    }\n\n    // Calculate suffix max to ensure non-increasing order from peak to right\n    let right = new Array(n);\n    right[n - 1] = maxHeights[n - 1];\n    for (let i = n - 2; i >= 0; i--) {\n        right[i] = Math.min(maxHeights[i], right[i + 1]);\n    }\n\n    // Iterate through all possible peaks\n    for (let peak = 0; peak < n; peak++) {\n        let currentSum = 0;\n        let minHeight = maxHeights[peak];\n\n        // Sum heights to the left of the peak\n        for (let i = peak - 1; i >= 0; i--) {\n            minHeight = Math.min(minHeight, left[i]);\n            currentSum += minHeight;\n        }\n\n        minHeight = maxHeights[peak];\n        currentSum += minHeight; // Add peak height\n\n        // Sum heights to the right of the peak\n        for (let i = peak + 1; i < n; i++) {\n            minHeight = Math.min(minHeight, right[i]);\n            currentSum += minHeight;\n        }\n\n        maxSum = Math.max(maxSum, currentSum);\n    }\n\n    return maxSum;\n}"
}