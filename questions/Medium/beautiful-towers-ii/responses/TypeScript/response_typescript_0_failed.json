{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65256000,
    "question_id": "3113",
    "elapsed_time": 136,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706751936368,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162513701",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumSumOfHeights(maxHeights: number[]): number {\n    const n = maxHeights.length;\n    let leftSum = new Array(n).fill(0);\n    let rightSum = new Array(n).fill(0);\n    let maxSum = 0;\n\n    // Calculate leftSum for the increasing part\n    leftSum[0] = maxHeights[0];\n    for (let i = 1; i < n; i++) {\n        leftSum[i] = Math.min(maxHeights[i], leftSum[i - 1] + 1);\n    }\n\n    // Calculate rightSum for the decreasing part\n    rightSum[n - 1] = maxHeights[n - 1];\n    for (let i = n - 2; i >= 0; i--) {\n        rightSum[i] = Math.min(maxHeights[i], rightSum[i + 1] + 1);\n    }\n\n    // Find the maximum possible sum of heights\n    for (let i = 0; i < n; i++) {\n        // The minimum of leftSum and rightSum ensures we do not exceed maxHeights[i]\n        maxSum = Math.max(maxSum, Math.min(leftSum[i], rightSum[i]));\n    }\n\n    // Calculate total maximum sum by summing the optimal heights at each position\n    let totalMaxSum = 0;\n    for (let i = 0; i < n; i++) {\n        totalMaxSum += Math.min(leftSum[i], rightSum[i]);\n    }\n\n    return totalMaxSum;\n}"
}