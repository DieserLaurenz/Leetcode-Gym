{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 30520000,
    "question_id": "3113",
    "elapsed_time": 680,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735402192,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184415234",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n        n = len(maxHeights)\n        prefix_max = [0] * n\n        suffix_max = [0] * n\n        highest = 0\n\n        # Forward pass to find max height at each position from the left\n        for i in range(n):\n            if i == 0:\n                highest = maxHeights[i]\n            else:\n                highest = min(highest + 1, maxHeights[i])\n            prefix_max[i] = highest\n\n        highest = 0\n        # Backward pass to find max height at each position from the right\n        for i in range(n - 1, -1, -1):\n            if i == n - 1:\n                highest = maxHeights[i]\n            else:\n                highest = min(highest + 1, maxHeights[i])\n            suffix_max[i] = highest\n\n        # Calculate the maximum possible sum by taking the minimum of\n        # prefix_max and suffix_max at each position\n        result = sum(min(prefix_max[i], suffix_max[i]) for i in range(n))\n        return result"
}