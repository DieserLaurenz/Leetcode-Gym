{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34528000,
    "question_id": "3113",
    "elapsed_time": 533,
    "compare_result
    "code_output": "26",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735434530,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184415448",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n        def calculate_max_sum(arr):\n            n = len(arr)\n            stack = []\n            left = [0] * n\n            for i in range(n):\n                while stack and arr[stack[-1]] >= arr[i]:\n                    stack.pop()\n                left[i] = i if not stack else (i - stack[-1] - 1)\n                stack.append(i)\n\n            stack = []\n            right = [0] * n\n            for i in range(n - 1, -1, -1):\n                while stack and arr[stack[-1]] >= arr[i]:\n                    stack.pop()\n                right[i] = (n - i - 1) if not stack else (stack[-1] - i - 1)\n                stack.append(i)\n\n            max_sum = 0\n            for i in range(n):\n                max_sum += arr[i] * (left[i] + right[i] + 1)\n            return max_sum\n\n        left_max = maxHeights.copy()\n        for i in range(1, len(maxHeights)):\n            left_max[i] = min(left_max[i], left_max[i - 1] + 1)\n\n        right_max = maxHeights.copy()\n        for i in range(len(maxHeights) - 2, -1, -1):\n            right_max[i] = min(right_max[i], right_max[i + 1] + 1)\n\n        final_heights = [min(left_max[i], right_max[i]) for i in range(len(maxHeights))]\n        return calculate_max_sum(final_heights)"
}