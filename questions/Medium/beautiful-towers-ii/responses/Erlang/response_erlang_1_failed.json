{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 239128000,
    "question_id": "3113",
    "elapsed_time": 2401,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706771842801,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162734006",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_sum_of_heights(MaxHeights :: [integer()]) -> integer().\nmaximum_sum_of_heights(MaxHeights) ->\n    N = length(MaxHeights),\n    Left = lists:foldl(fun(X, Acc) -> [min(X, hd(Acc) + 1) | Acc] end, [0], tl(MaxHeights)),\n    Right = lists:foldl(fun(X, Acc) -> [min(X, hd(Acc) + 1) | Acc] end, [0], tl(lists:reverse(MaxHeights))),\n    LeftRev = lists:reverse(Left),\n    Heights = lists:zipwith(fun(X, Y) -> min(X, Y) end, LeftRev, Right),\n    SumHeights = lists:zipwith(fun(X, Max) -> min(X, Max) end, Heights, MaxHeights),\n    lists:sum(SumHeights)."
}