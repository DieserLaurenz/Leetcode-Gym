{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20684000,
    "question_id": "3113",
    "elapsed_time": 1205,
    "compare_result
    "code_output": "26",
    "std_output": "",
    "last_testcase": "[6,5,3,9,2,7]",
    "expected_output": "22",
    "task_finish_time": 1706761399054,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 130,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1162602369",
    "input_formatted": "[6,5,3,9,2,7]",
    "input": "[6,5,3,9,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumSumOfHeights(_ maxHeights: [Int]) -> Int {\n        let n = maxHeights.count\n        var leftMax = Array(repeating: 0, count: n)\n        var rightMax = Array(repeating: 0, count: n)\n        var maxSum = 0\n\n        // Forward pass to find max height we can achieve from left to i\n        leftMax[0] = maxHeights[0]\n        for i in 1..<n {\n            leftMax[i] = min(leftMax[i-1], maxHeights[i] - 1)\n        }\n\n        // Backward pass to find max height we can achieve from right to i\n        rightMax[n-1] = maxHeights[n-1]\n        for i in stride(from: n-2, through: 0, by: -1) {\n            rightMax[i] = min(rightMax[i+1], maxHeights[i] - 1)\n        }\n\n        // Calculate the maximum sum of heights by taking the higher possible value\n        // between left and right adjustments for each tower\n        for i in 0..<n {\n            maxSum += min(maxHeights[i], max(leftMax[i], rightMax[i]) + 1)\n        }\n\n        return maxSum\n    }\n}"
}