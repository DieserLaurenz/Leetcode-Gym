{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20356000,
    "question_id": "3113",
    "elapsed_time": 1141,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706761452231,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1162603004",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumSumOfHeights(_ maxHeights: [Int]) -> Int {\n        // Precompute the maximum height we can achieve on the left and right for each position\n        let n = maxHeights.count\n        var leftMax = Array(repeating: 0, count: n)\n        var rightMax = Array(repeating: 0, count: n)\n\n        leftMax[0] = maxHeights[0]\n        for i in 1..<n {\n            leftMax[i] = min(leftMax[i - 1] + 1, maxHeights[i])\n        }\n\n        rightMax[n - 1] = maxHeights[n - 1]\n        for i in stride(from: n - 2, through: 0, by: -1) {\n            rightMax[i] = min(rightMax[i + 1] + 1, maxHeights[i])\n        }\n\n        // Calculate the maximum sum by choosing the minimum between leftMax and rightMax for each position\n        var sum = 0\n        for i in 0..<n {\n            sum += min(leftMax[i], rightMax[i])\n        }\n\n        return sum\n    }\n}"
}