{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20644000,
    "question_id": "3113",
    "elapsed_time": 1678,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706761362190,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1162601961",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumSumOfHeights(_ maxHeights: [Int]) -> Int {\n        let n = maxHeights.count\n        var prefixMax = Array(repeating: 0, count: n)\n        var suffixMax = Array(repeating: 0, count: n)\n        \n        // Calculate prefix max (left to right)\n        prefixMax[0] = maxHeights[0]\n        for i in 1..<n {\n            prefixMax[i] = min(prefixMax[i-1] + 1, maxHeights[i])\n        }\n        \n        // Calculate suffix max (right to left)\n        suffixMax[n-1] = maxHeights[n-1]\n        for i in stride(from: n-2, through: 0, by: -1) {\n            suffixMax[i] = min(suffixMax[i+1] + 1, maxHeights[i])\n        }\n        \n        // Calculate maximum possible sum of heights\n        var maxSum = 0\n        for i in 0..<n {\n            // Height at each position is the minimum of prefixMax and suffixMax to satisfy mountain property\n            maxSum += min(prefixMax[i], suffixMax[i])\n        }\n        \n        return maxSum\n    }\n}"
}