{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212072000,
    "question_id": "3113",
    "elapsed_time": 3177,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706762071870,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162610278",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} max_heights\n# @return {Integer}\ndef maximum_sum_of_heights(max_heights)\n  n = max_heights.size\n  max_sum = 0\n  \n  # Iterate over each position as a potential peak\n  (0...n).each do |peak|\n    sum = max_heights[peak]\n    left_max = max_heights[peak]\n    right_max = max_heights[peak]\n\n    # Calculate sum on the left side of the peak\n    (peak-1).downto(0) do |i|\n      left_max = [left_max-1, max_heights[i]].min\n      sum += left_max\n    end\n\n    # Calculate sum on the right side of the peak\n    (peak+1...n).each do |i|\n      right_max = [right_max-1, max_heights[i]].min\n      sum += right_max\n    end\n\n    # Update max_sum if this peak results in a higher sum\n    max_sum = [max_sum, sum].max\n  end\n  \n  max_sum\nend"
}