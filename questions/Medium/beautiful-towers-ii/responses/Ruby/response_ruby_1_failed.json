{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 229548000,
    "question_id": "3113",
    "elapsed_time": 434,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706762115785,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162610820",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} max_heights\n# @return {Integer}\ndef maximum_sum_of_heights(max_heights)\n  n = max_heights.size\n  left_max = Array.new(n, 0)\n  right_max = Array.new(n, 0)\n  \n  # Forward pass to calculate max heights in a non-decreasing manner\n  left_max[0] = max_heights[0]\n  (1...n).each do |i|\n    left_max[i] = [left_max[i-1] + 1, max_heights[i]].min\n  end\n\n  # Backward pass to calculate max heights in a non-increasing manner\n  right_max[n-1] = max_heights[n-1]\n  (n-2).downto(0) do |i|\n    right_max[i] = [right_max[i+1] + 1, max_heights[i]].min\n  end\n\n  # Calculate the minimum of left_max and right_max for each tower to ensure mountain shape\n  max_sum = 0\n  (0...n).each do |i|\n    max_sum += [left_max[i], right_max[i]].min\n  end\n\n  max_sum\nend"
}