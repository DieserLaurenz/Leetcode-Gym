{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 5: ** (ArgumentError) errors were found at the given arguments:\n  * 1st argument: not a nonempty list\n    :erlang.hd([])\n    solution.ex:5: anonymous fn/2 in Solution.maximum_sum_of_heights/1\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:4: Solution.maximum_sum_of_heights/1\n    solution.ex:32: Driver.consume_test_cases/2\n    solution.ex:20: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75316000,
    "question_id": "3113",
    "elapsed_time": 674,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706771956311,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1162735397",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_sum_of_heights(max_heights :: [integer]) :: integer\n  def maximum_sum_of_heights(max_heights) do\n    left_max = Enum.reduce(max_heights, [], fn x, acc -> \n      [max(x, hd(acc) || 0) | acc] \n    end) |> Enum.reverse()\n    right_max = Enum.reduce(Enum.reverse(max_heights), [], fn x, acc -> \n      [max(x, hd(acc) || 0) | acc] \n    end)\n\n    combined_max = Enum.zip(left_max, Enum.reverse(right_max))\n                     |> Enum.map(fn {l, r} -> min(l, r) end)\n    \n    Enum.sum(combined_max)\n  end\nend"
}