{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 138012000,
    "question_id": "3113",
    "elapsed_time": 6021,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706772064151,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 56,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1162736591",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_sum_of_heights(max_heights :: [integer]) :: integer\n  def maximum_sum_of_heights(max_heights) do\n    n = length(max_heights)\n    left_heights = Enum.reduce(1..n-1, [Enum.at(max_heights, 0)], fn i, acc ->\n      [min(Enum.at(max_heights, i), Enum.at(acc, 0) + 1) | acc]\n    end) |> Enum.reverse()\n    \n    right_heights = Enum.reduce(1..n-1, [Enum.at(max_heights, n-1)], fn i, acc ->\n      [min(Enum.at(max_heights, n-i-1), Enum.at(acc, 0) + 1) | acc]\n    end)\n    \n    combined_heights = Enum.zip(left_heights, right_heights)\n                        |> Enum.map(fn {left, right} -> min(left, right) end)\n    \n    Enum.sum(combined_heights)\n  end\nend"
}