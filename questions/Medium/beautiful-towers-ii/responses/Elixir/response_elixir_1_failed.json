{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 240184000,
    "question_id": "3113",
    "elapsed_time": 1314,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706772006618,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1162735971",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_sum_of_heights(max_heights :: [integer]) :: integer\n  def maximum_sum_of_heights(max_heights) do\n    # Find the maximum height in the array to determine the peak of the mountain\n    peak_height = Enum.max(max_heights)\n    \n    peak_index = Enum.find_index(max_heights, &(&1 == peak_height))\n    \n    # Calculate the maximum sum by building up to the peak from both sides\n    left_sum = calculate_side_sum(Enum.slice(max_heights, 0, peak_index + 1))\n    right_sum = calculate_side_sum(Enum.reverse(Enum.slice(max_heights, peak_index, length(max_heights))))\n    \n    # Combine the sums of both sides, subtracting the peak to avoid double counting\n    left_sum + right_sum - peak_height\n  end\n\n  defp calculate_side_sum(heights) do\n    Enum.reduce(heights, {0, 0}, fn height, {prev_height, sum} -> \n      new_height = min(height, prev_height + 1)\n      {new_height, sum + new_height}\n    end)\n    |> elem(1)\n  end\nend"
}