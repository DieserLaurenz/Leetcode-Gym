{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126864000,
    "question_id": "3113",
    "elapsed_time": 5016,
    "compare_result
    "code_output": "28",
    "std_output": "",
    "last_testcase": "[6,5,3,9,2,7]",
    "expected_output": "22",
    "task_finish_time": 1706771734028,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 32,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1162732602",
    "input_formatted": "[6,5,3,9,2,7]",
    "input": "[6,5,3,9,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-sum-of-heights maxHeights)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (calc-sum heights peak)\n    (let* ((left (if (> peak 0) (apply max (take heights (add1 peak))) 0))\n           (right (if (< peak (sub1 (length heights))) (apply max (drop heights peak)) 0))\n           (sum (+ left right)))\n      (for/list ((i (in-range (length heights))))\n        (when (and (> i 0) (< i peak))\n          (set! sum (+ sum (min (list-ref heights i) (list-ref heights (sub1 i))))))\n        (when (and (> i peak) (< i (sub1 (length heights))))\n          (set! sum (+ sum (min (list-ref heights i) (list-ref heights (add1 i)))))))\n      sum))\n\n  (define (find-max-sum heights)\n    (let loop ((i 0) (max-sum 0))\n      (if (= i (length heights))\n          max-sum\n          (let ((current-sum (calc-sum heights i)))\n            (loop (add1 i) (max max-sum current-sum))))))\n  \n  (find-max-sum maxHeights))"
}