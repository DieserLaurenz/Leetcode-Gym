{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "list-ref: index -1 is not an exact nonnegative integer",
    "full_runtime_error": "list-ref: index -1 is not an exact nonnegative integer\n  context...:\n   solution.rkt:4:17: maxSum\n   solution.rkt:1:0: maximum-sum-of-heights\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:25:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100032000,
    "question_id": "3113",
    "elapsed_time": 276,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706771623803,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1162731328",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-sum-of-heights maxHeights)\n  (-> (listof exact-integer?) exact-integer?)\n  (let* ((n (length maxHeights))\n         (maxSum (lambda (peak)\n                   (let loop ((i peak) (sum 0) (leftHeight 0))\n                     (if (< i 0)\n                         sum\n                         (let ((newHeight (min (list-ref maxHeights i) leftHeight 1)))\n                           (loop (- i 1) (+ sum newHeight) newHeight))))\n                   (let loop ((i peak) (sum 0) (rightHeight 0))\n                     (if (>= i n)\n                         sum\n                         (let ((newHeight (min (list-ref maxHeights i) rightHeight 1)))\n                           (loop (+ i 1) (+ sum newHeight) newHeight))))))\n         (maxTotal 0))\n    (for/list ((i (in-range n)))\n      (let ((total (+ (maxSum (- i 1)) (maxSum (+ i 1)) (list-ref maxHeights i))))\n        (when (> total maxTotal)\n          (set! maxTotal total))))\n    maxTotal))"
}