{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 78248000,
    "question_id": "3113",
    "elapsed_time": 1132,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706761546640,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 785,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1162604050",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSumOfHeights(maxHeights: List<Int>): Long {\n        val n = maxHeights.size\n        val left = LongArray(n) { 0 }\n        val right = LongArray(n) { 0 }\n\n        // Build up from the left\n        left[0] = maxHeights[0].toLong()\n        for (i in 1 until n) {\n            left[i] = kotlin.math.min(left[i - 1] + 1, maxHeights[i].toLong())\n        }\n\n        // Build down from the right\n        right[n - 1] = maxHeights[n - 1].toLong()\n        for (i in n - 2 downTo 0) {\n            right[i] = kotlin.math.min(right[i + 1] + 1, maxHeights[i].toLong())\n        }\n\n        // Find the maximum sum possible with the constraints\n        var maxSum = 0L\n        for (i in 0 until n) {\n            val minHeight = kotlin.math.min(left[i], right[i])\n            maxSum += minHeight\n        }\n\n        return maxSum\n    }\n}"
}