{
    "acRate": 54.452868620572595,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2930",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
    "titleSlug": "number-of-strings-which-can-be-rearranged-to-contain-substring",
    "topicTags": [
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Combinatorics",
            "id": "VG9waWNUYWdOb2RlOjYxMDU2",
            "slug": "combinatorics"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int stringCount(int n) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int stringCount(int n) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def stringCount(self, n):         \"\"\"         :type n: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def stringCount(self, n: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int stringCount(int n) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int StringCount(int n) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} n  * @return {number}  */ var stringCount = function(n) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function stringCount(n: number): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $n      * @return Integer      */     function stringCount($n) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func stringCount(_ n: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun stringCount(n: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int stringCount(int n) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func stringCount(n int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n # @return {Integer} def string_count(n)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def stringCount(n: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn string_count(n: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (string-count n)   (-> exact-integer? exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec string_count(N :: integer()) -> integer(). string_count(N) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec string_count(n :: integer) :: integer   def string_count(n) do        end end"
        }
    ],
    "content": "You are given an integer n. A string s is called good if it contains only lowercase English characters and it is possible to rearrange the characters of s such that the new string contains \"leet\" as a substring. For example:  The string \"lteer\" is good because we can rearrange it to form \"leetr\" . \"letl\" is not good because we cannot rearrange it to contain \"leet\" as a substring.  Return the total number of good strings of length n. Since the answer may be large, return it modulo 109 + 7. A substring is a contiguous sequence of characters within a string.   Example 1:  Input: n = 4 Output: 12 Explanation: The 12 strings which can be rearranged to have \"leet\" as a substring are: \"eelt\", \"eetl\", \"elet\", \"elte\", \"etel\", \"etle\", \"leet\", \"lete\", \"ltee\", \"teel\", \"tele\", and \"tlee\".  Example 2:  Input: n = 10 Output: 83943898 Explanation: The number of strings with length 10 which can be rearranged to have \"leet\" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.   Constraints:  1 <= n <= 105  "
}