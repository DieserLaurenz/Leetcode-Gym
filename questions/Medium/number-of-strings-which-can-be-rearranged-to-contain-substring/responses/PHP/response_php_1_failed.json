{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20188000,
    "question_id": "3200",
    "elapsed_time": 149,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "24",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708082373977,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1176891468",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    \n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function stringCount($n) {\n        $mod = 1000000007;\n\n        // Function to compute a^b under modulo m\n        function power($a, $b, $m) {\n            $res = 1;\n            $a = $a % $m;\n            while ($b > 0) {\n                if ($b & 1)\n                    $res = ($res * $a) % $m;\n                $b = $b >> 1;\n                $a = ($a * $a) % $m;\n            }\n            return $res;\n        }\n\n        // Function to compute factorial % mod\n        function factorial($n, $mod) {\n            $result = 1;\n            for ($i = 2; $i <= $n; $i++) {\n                $result = ($result * $i) % $mod;\n            }\n            return $result;\n        }\n\n        if ($n < 4) return 0; // If n is less than 4, no valid strings\n\n        // Total permutations of n characters where 4 are distinct (leet)\n        $totalPerms = factorial($n, $mod);\n        $permsOfLeet = factorial(4, $mod);\n        $duplicates = power(26, $n - 4, $mod); // Since we can choose 26 letters for the rest\n\n        // Correct calculation for the number of good strings\n        $goodStrings = ($totalPerms * $duplicates) % $mod;\n\n        return $goodStrings;\n    }\n}"
}