{
    "status_code": 15,
    "lang": "php",
    "run_success": false,
    "runtime_error": "Line 21: PHP Fatal error:  Uncaught ArgumentCountError: pow() expects exactly 2 arguments, 3 given in solution.php",
    "full_runtime_error": "Line 21: PHP Fatal error:  Uncaught ArgumentCountError: pow() expects exactly 2 arguments, 3 given in solution.php\nStack trace:\n#0 solution.php: pow()\n#1 solution.php: Solution->{closure}()\n#2 solution.php: Solution->stringCount()\n#3 {main}",
    "status_runtime": "N/A",
    "memory": 20280000,
    "question_id": "3200",
    "elapsed_time": 21,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708082414133,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1176891820",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function stringCount($n) {\n        $mod = 1000000007;\n        \n        // Compute factorial modulo mod\n        $factorial = function($n) use ($mod) {\n            $result = 1;\n            for ($i = 2; $i <= $n; $i++) {\n                $result = ($result * $i) % $mod;\n            }\n            return $result;\n        };\n        \n        // Function to compute nPr modulo mod\n        $nPr = function($n, $r) use ($factorial, $mod) {\n            return $factorial($n) * pow($factorial($n - $r), $mod - 2, $mod) % $mod;\n        };\n        \n        if ($n < 4) {\n            return 0;\n        }\n        \n        $count = 0;\n        // Count of permutations of \"leet\"\n        $countOfLeet = $factorial(4);\n        // For each position where \"leet\" can start, count the permutations of the rest of the letters\n        for ($i = 4; $i <= $n; $i++) {\n            $rest = $n - $i; // Rest of the positions after placing \"leet\"\n            $count = ($count + $countOfLeet * $nPr(26, $rest)) % $mod;\n        }\n        \n        return $count;\n    }\n}"
}