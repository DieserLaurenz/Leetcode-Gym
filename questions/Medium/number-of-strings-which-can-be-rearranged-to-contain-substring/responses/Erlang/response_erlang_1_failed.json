{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59628000,
    "question_id": "3200",
    "elapsed_time": 1296,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708083769968,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1176904676",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec string_count(N :: integer()) -> integer().\nstring_count(N) ->\n    Mod = 1000000007,\n    Total = pow(25, N - 4, Mod),\n    Comb = comb(N - 1, 3, Mod),\n    (Total * Comb) rem Mod.\n\npow(_, 0, _) -> 1;\npow(Base, Exp, Mod) when Exp > 0 ->\n    case Exp rem 2 of\n        0 -> pow((Base * Base) rem Mod, Exp div 2, Mod);\n        1 -> (Base * pow(Base, Exp - 1, Mod)) rem Mod\n    end.\n\ncomb(N, K, Mod) ->\n    (fact(N, Mod) * inv(fact(K, Mod), Mod) rem Mod * inv(fact(N - K, Mod), Mod)) rem Mod.\n\nfact(0, _) -> 1;\nfact(N, Mod) -> (N * fact(N - 1, Mod)) rem Mod.\n\ninv(N, Mod) -> pow(N, Mod - 2, Mod)."
}