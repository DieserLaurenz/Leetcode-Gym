{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67184000,
    "question_id": "3200",
    "elapsed_time": 1298,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708083803696,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1176905000",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec string_count(N :: integer()) -> integer().\nstring_count(N) ->\n    Mod = 1000000007,\n    if\n        N < 4 -> 0;\n        true ->\n            Factorial = lists:foldl(fun(X, Acc) -> (X * Acc) rem Mod end, 1, lists:seq(1, N)),\n            Permutations = (Factorial div (factorial(N - 4, Mod) * 24)) rem Mod,\n            Choices = pow(25, N - 4, Mod),\n            (Permutations * Choices) rem Mod\n    end.\n\npow(_, 0, _) -> 1;\npow(Base, Exp, Mod) ->\n    case Exp rem 2 of\n        0 -> pow((Base * Base) rem Mod, Exp div 2, Mod);\n        1 -> (Base * pow(Base, Exp - 1, Mod)) rem Mod\n    end.\n\nfactorial(0, _) -> 1;\nfactorial(N, Mod) ->\n    lists:foldl(fun(X, Acc) -> (X * Acc) rem Mod end, 1, lists:seq(1, N))."
}