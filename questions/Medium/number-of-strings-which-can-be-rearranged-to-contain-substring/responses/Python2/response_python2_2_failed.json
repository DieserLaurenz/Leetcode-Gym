{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20820000,
    "question_id": "3200",
    "elapsed_time": 109,
    "compare_result": "101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "401979625",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "83943898",
    "task_finish_time": 1708839361611,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185482187",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def stringCount(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        MOD = 10**9 + 7\n\n        # Calculate factorials up to n and their modular inverses for nCr calculation\n        factorial = [1] * (n + 1)\n        inv_factorial = [1] * (n + 1)\n        for i in range(2, n + 1):\n            factorial[i] = factorial[i - 1] * i % MOD\n        inv_factorial[n] = pow(factorial[n], MOD - 2, MOD)\n        for i in range(n - 1, 0, -1):\n            inv_factorial[i] = inv_factorial[i + 1] * (i + 1) % MOD\n\n        def nCr(n, r):\n            if n < r:\n                return 0\n            return factorial[n] * inv_factorial[r] % MOD * inv_factorial[n - r] % MOD\n\n        if n == 4:\n            return 12\n\n        total = 0\n        for i in range(4, n + 1):\n            combos = nCr(i, 4)\n            rest = i - 4\n            total += combos * pow(26, rest, MOD)\n            total %= MOD\n        return total"
}