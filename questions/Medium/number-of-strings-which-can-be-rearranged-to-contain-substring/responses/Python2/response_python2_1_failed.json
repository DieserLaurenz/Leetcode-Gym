{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21088000,
    "question_id": "3200",
    "elapsed_time": 276,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "24",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708839328981,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185481812",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def stringCount(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        MOD = 10**9 + 7\n\n        if n < 4:\n            return 0\n\n        # Calculate factorial of numbers up to n to avoid recalculating\n        fact = [1] * (n + 1)\n        for i in range(2, n + 1):\n            fact[i] = fact[i - 1] * i % MOD\n\n        # Function to calculate inverse factorial\n        inv_fact = [1] * (n + 1)\n        inv_fact[n] = pow(fact[n], MOD - 2, MOD)\n        for i in range(n - 1, 0, -1):\n            inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n        # Function to calculate nCr\n        def nCr(n, r):\n            return fact[n] * inv_fact[r] % MOD * inv_fact[n - r] % MOD\n\n        # Counting good strings\n        res = 0\n        for i in range(4, n + 1):\n            # Each position can be any of 26 letters\n            res += nCr(i - 1, 3) * fact[i - 4] % MOD\n            res %= MOD\n\n        return res * 24 % MOD  # Multiply by permutations of \"leet\""
}