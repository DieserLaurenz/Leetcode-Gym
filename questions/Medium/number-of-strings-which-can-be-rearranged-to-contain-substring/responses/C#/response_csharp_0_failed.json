{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 28540000,
    "question_id": "3200",
    "elapsed_time": 117,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708072927690,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1176793649",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int StringCount(int n) {\n        const int MOD = 1000000007;\n        long[] factorial = new long[n + 1];\n        factorial[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial[i] = factorial[i - 1] * i % MOD;\n        }\n\n        long Power(long x, int y, int p) {\n            long res = 1;\n            x = x % p;\n            while (y > 0) {\n                if ((y & 1) != 0) res = (res * x) % p;\n                y = y >> 1;\n                x = (x * x) % p;\n            }\n            return res;\n        }\n\n        long ModInverse(long n, int p) {\n            return Power(n, p - 2, p);\n        }\n\n        long nCrModPFermat(int n, int r, int p) {\n            if (r == 0) return 1;\n            return (factorial[n] * ModInverse(factorial[r], p) % p\n                    * ModInverse(factorial[n - r], p) % p) % p;\n        }\n\n        if (n < 4) return 0;\n\n        long count = 0;\n        for (int i = 4; i <= n; i++) {\n            long combinations = nCrModPFermat(n - 1, i - 1, MOD);\n            long arrangements = factorial[i] / factorial[4] * factorial[i - 4] % MOD;\n            count = (count + combinations * arrangements % MOD) % MOD;\n        }\n\n        return (int)count;\n    }\n}"
}