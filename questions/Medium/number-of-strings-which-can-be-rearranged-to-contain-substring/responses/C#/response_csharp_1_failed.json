{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 29816000,
    "question_id": "3200",
    "elapsed_time": 61,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708072970797,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1176794114",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int StringCount(int n) {\n        const int MOD = 1000000007;\n        if (n < 4) return 0;\n        long[] fact = new long[n + 1];\n        long[] invFact = new long[n + 1];\n        fact[0] = invFact[0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            fact[i] = fact[i - 1] * i % MOD;\n        }\n        invFact[n] = ModInverse(fact[n], MOD);\n        for (int i = n - 1; i > 0; --i) {\n            invFact[i] = invFact[i + 1] * (i + 1) % MOD;\n        }\n\n        long ModInverse(long a, long m) {\n            long m0 = m, t, q;\n            long x0 = 0, x1 = 1;\n            if (m == 1) return 0;\n            while (a > 1) {\n                q = a / m;\n                t = m;\n                m = a % m;\n                a = t;\n                t = x0;\n                x0 = x1 - q * x0;\n                x1 = t;\n            }\n            if (x1 < 0) x1 += m0;\n            return x1;\n        }\n\n        long nCrMod(long n, long r, long p) {\n            if (r == 0) return 1;\n            return (fact[(int)n] * invFact[(int)r] % p * invFact[(int)(n - r)] % p) % p;\n        }\n\n        long res = 0;\n        for (int i = 1; i <= n - 3; i++) {\n            res = (res + nCrMod(n - 4, i - 1, MOD) * fact[i + 3] % MOD * invFact[4] % MOD) % MOD;\n        }\n        return (int)res;\n    }\n}"
}