{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211168000,
    "question_id": "3200",
    "elapsed_time": 208,
    "compare_result": "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "306367993",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "83943898",
    "task_finish_time": 1708083242351,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1176899706",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @return {Integer}\ndef string_count(n)\n    mod = 10**9 + 7\n    factorial = [1]\n    (1..n).each { |i| factorial[i] = factorial[i-1] * i % mod }\n\n    total = factorial[n]\n    counts = {'e' => 2, 'l' => 1, 't' => 1}\n    counts.each do |_, count|\n        total = total * inverse_mod(factorial[count], mod) % mod\n    end\n\n    total = total * factorial[n - 4] % mod if n >= 4\n    total\nend\n\ndef inverse_mod(x, mod)\n    pow(x, mod - 2, mod)\nend\n\ndef pow(base, exponent, mod)\n    result = 1\n    while exponent > 0\n        result = result * base % mod if exponent.odd?\n        base = base * base % mod\n        exponent >>= 1\n    end\n    result\nend"
}