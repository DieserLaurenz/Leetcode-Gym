{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 22: java.lang.ArrayIndexOutOfBoundsException: 26 (at nCr$1)",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: 26\nLine 22: Solution$.nCr$1 (solution.scala)\nLine 27: Solution$.$anonfun$stringCount$3 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 26: Solution$.stringCount (solution.scala)\nLine 35: Main$.__helper__ (solution.scala)\nLine 49: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 51880000,
    "question_id": "3200",
    "elapsed_time": 586,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708083346503,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1176900726",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def stringCount(n: Int): Int = {\n        val mod = 1000000007\n        if (n < 4) return 0\n        val factorial = Array.fill(n + 1)(1L)\n        for (i <- 1 to n) factorial(i) = factorial(i - 1) * i % mod\n        \n        def modInv(a: Long, m: Long): Long = {\n            def extGcd(a: Long, b: Long): (Long, Long, Long) = {\n                if (b == 0L) (a, 1L, 0L)\n                else {\n                    val (g, x, y) = extGcd(b, a % b)\n                    (g, y, x - (a / b) * y)\n                }\n            }\n            val (_, x, _) = extGcd(a, m)\n            (x % m + m) % m\n        }\n        \n        def nCr(n: Int, r: Int): Long = {\n            if (n < r) 0\n            else factorial(n) * modInv(factorial(r), mod) % mod * modInv(factorial(n - r), mod) % mod\n        }\n        \n        var total = 0L\n        for (i <- 4 to n) {\n            total = (total + nCr(26, 4) * nCr(i - 1, 3) % mod * factorial(i - 4) % mod) % mod\n        }\n        total.toInt\n    }\n}"
}