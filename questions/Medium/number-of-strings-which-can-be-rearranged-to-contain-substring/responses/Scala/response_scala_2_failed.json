{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52044000,
    "question_id": "3200",
    "elapsed_time": 429,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "24",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708083417634,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1176901380",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    val mod = 1000000007\n\n    def fastPow(x: Long, y: Int): Long = {\n        var res = 1L\n        var base = x\n        var exponent = y\n        while (exponent > 0) {\n            if ((exponent & 1) != 0) res = (res * base) % mod\n            base = (base * base) % mod\n            exponent >>= 1\n        }\n        res\n    }\n\n    def stringCount(n: Int): Int = {\n        if (n < 4) return 0\n        val permutations = fastPow(25, n - 4)\n        val combinations = ((n - 1) * (n - 2) * (n - 3) / 6) % mod\n        val total = (permutations * combinations) % mod * 24 % mod\n        (total.toInt + mod) % mod\n    }\n}"
}