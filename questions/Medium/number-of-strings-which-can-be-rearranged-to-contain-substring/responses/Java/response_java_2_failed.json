{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42720000,
    "display_runtime": "28",
    "question_id": "3200",
    "elapsed_time": 144,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "24",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708072716738,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1176791422",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int stringCount(int n) {\n        long mod = 1000000007;\n        // Precalculate factorials and their modular inverses\n        long[] fact = new long[n + 1];\n        long[] invFact = new long[n + 1];\n        fact[0] = 1;\n        invFact[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            fact[i] = fact[i - 1] * i % mod;\n            invFact[i] = modInverse(fact[i], mod);\n        }\n\n        long res = 0;\n        for (int i = 4; i <= n; i++) {\n            // Count permutations of \"leet\" + (i - 4) characters, avoiding overcounting\n            long permutations = fact[n - 4] * invFact[n - i] % mod;\n            long arrangements = 24; // \"leet\" can be arranged in 24 ways\n            res = (res + permutations * arrangements) % mod;\n        }\n\n        return (int) res;\n    }\n\n    private long modInverse(long a, long mod) {\n        return powMod(a, mod - 2, mod); // Fermat's little theorem\n    }\n\n    private long powMod(long a, long b, long mod) {\n        long res = 1;\n        a = a % mod;\n        while (b > 0) {\n            if ((b & 1) != 0) res = (res * a) % mod;\n            a = (a * a) % mod;\n            b >>= 1;\n        }\n        return res;\n    }\n}"
}