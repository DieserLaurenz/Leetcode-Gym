{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15924000,
    "question_id": "3200",
    "elapsed_time": 20,
    "compare_result": "101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "948925009",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "83943898",
    "task_finish_time": 1708082555729,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1176893189",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func stringCount(_ n: Int) -> Int {\n        let mod = 1000000007\n        if n < 4 { return 0 }\n        \n        var dp = Array(repeating: 0, count: n + 1)\n        dp[0] = 1\n        \n        for i in 1...n {\n            dp[i] = dp[i-1] * 26 % mod\n        }\n        \n        if n == 4 { return 12 }\n        \n        let combinations = ((factorial(n-1, mod) * modInverse(factorial(n-4, mod), mod)) % mod * modInverse(factorial(3, mod), mod)) % mod\n        return combinations * dp[n-4] % mod\n    }\n    \n    private func factorial(_ n: Int, _ mod: Int) -> Int {\n        var result = 1\n        for i in 1...n {\n            result = (result * i) % mod\n        }\n        return result\n    }\n    \n    private func modInverse(_ a: Int, _ mod: Int) -> Int {\n        return power(a, mod-2, mod)\n    }\n    \n    private func power(_ x: Int, _ y: Int, _ mod: Int) -> Int {\n        if y == 0 {\n            return 1\n        }\n        var p = power(x, y/2, mod) % mod\n        p = (p * p) % mod\n        return y % 2 == 0 ? p : (x * p) % mod\n    }\n}"
}