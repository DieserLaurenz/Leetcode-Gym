{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10780000,
    "question_id": "3200",
    "elapsed_time": 25,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "625",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708072571307,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1176789851",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n\nclass Solution {\npublic:\n    static const int MOD = 1000000007;\n\n    int stringCount(int n) {\n        if (n < 4) return 0; // Can't form \"leet\"\n\n        // Calculate factorials and their modular inverses\n        std::vector<long long> fact(n + 1, 1), invFact(n + 1, 1);\n        for (int i = 2; i <= n; ++i)\n            fact[i] = (fact[i - 1] * i) % MOD;\n        invFact[n] = modInverse(fact[n], MOD);\n        for (int i = n - 1; i > 0; --i)\n            invFact[i] = (invFact[i + 1] * (i + 1)) % MOD;\n\n        auto nCr = [&](int N, int R) -> long long {\n            return ((fact[N] * invFact[R]) % MOD * invFact[N - R]) % MOD;\n        };\n\n        long long total = 0;\n        for (int i = 4; i <= n; ++i) {\n            // Choose positions for \"leet\", then fill the rest with any characters\n            long long ways = nCr(i - 1, 3); // Ways to choose positions for \"e\", \"e\", and \"t\" in \"leet\"\n            long long rest = (25 * 25) % MOD; // \"l\" is fixed, choose for the other two \"e\"s\n            long long fillRest = modPow(26, n - i, MOD); // Fill the rest of the positions\n            total = (total + ways * rest % MOD * fillRest % MOD) % MOD;\n        }\n\n        return total;\n    }\n\nprivate:\n    long long modPow(long long base, int exponent, int modulus) {\n        long long result = 1;\n        while (exponent > 0) {\n            if (exponent & 1) result = (result * base) % modulus;\n            base = (base * base) % modulus;\n            exponent >>= 1;\n        }\n        return result;\n    }\n\n    long long modInverse(long long a, long long m) {\n        long long m0 = m, t, q;\n        long long x0 = 0, x1 = 1;\n\n        if (m == 1)\n            return 0;\n\n        // Apply extended Euclid Algorithm\n        while (a > 1) {\n            // q is quotient\n            q = a / m;\n            t = m;\n\n            // m is remainder now, process same as\n            // Euclid's algo\n            m = a % m, a = t;\n            t = x0;\n            x0 = x1 - q * x0;\n            x1 = t;\n        }\n\n        // Make x1 positive\n        if (x1 < 0)\n            x1 += m0;\n\n        return x1;\n    }\n};"
}