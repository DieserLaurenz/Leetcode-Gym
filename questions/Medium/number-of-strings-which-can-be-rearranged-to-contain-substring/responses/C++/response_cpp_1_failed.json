{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7152000,
    "question_id": "3200",
    "elapsed_time": 30,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "456976",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708072527608,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1176789413",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <iostream>\n#include <vector>\n\nclass Solution {\npublic:\n    static const int MOD = 1000000007;\n    long long fastPow(long long base, int power) {\n        long long result = 1;\n        while (power > 0) {\n            if (power & 1) result = (result * base) % MOD;\n            base = (base * base) % MOD;\n            power >>= 1;\n        }\n        return result;\n    }\n    \n    int stringCount(int n) {\n        if (n < 4) return 0; // Impossible to form \"leet\"\n        long long total = fastPow(26, n); // Total strings without restriction\n        long long subtract = 0;\n        for (int i = 1; i <= n - 4; ++i) {\n            // Ways to choose positions for non-\"leet\" characters * permutations of those characters\n            long long ways = fastPow(25, i);\n            long long positions = fastPow(26, n - i - 4);\n            subtract = (subtract + ways * positions % MOD) % MOD;\n        }\n        long long answer = (total - subtract + MOD) % MOD; // Ensure non-negative result\n        return (int)answer;\n    }\n};"
}