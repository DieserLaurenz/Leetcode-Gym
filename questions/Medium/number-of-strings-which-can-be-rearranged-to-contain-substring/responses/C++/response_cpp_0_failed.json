{
    "status_code": 15,
    "lang": "cpp",
    "run_success": false,
    "runtime_error": "AddressSanitizer: heap-buffer-overflow on address 0x504000000120 at pc 0x55b7727bdd9c bp 0x7ffffbd64930 sp 0x7ffffbd64928",
    "full_runtime_error": "=================================================================\n==20==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x504000000120 at pc 0x55b7727bdd9c bp 0x7ffffbd64930 sp 0x7ffffbd64928\nREAD of size 8 at 0x504000000120 thread T0\n    #3 0x7fbccb013d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\n    #4 0x7fbccb013e3f  (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\n0x504000000120 is located 168 bytes after 40-byte region [0x504000000050,0x504000000078)\nallocated by thread T0 here:\n    #5 0x7fbccb013d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\nShadow bytes around the buggy address:\n  0x503ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x503fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x503fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x504000000000: fa fa 00 00 00 00 00 05 fa fa 00 00 00 00 00 fa\n  0x504000000080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=>0x504000000100: fa fa fa fa[fa]fa fa fa fa fa fa fa fa fa fa fa\n  0x504000000180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x504000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x504000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x504000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x504000000380: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==20==ABORTING",
    "status_runtime": "N/A",
    "memory": 7872000,
    "question_id": "3200",
    "elapsed_time": 13,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708072485916,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1176788969",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int stringCount(int n) {\n        const int MOD = 1e9 + 7;\n        std::vector<long long> factorial(n + 1, 1);\n        for (int i = 2; i <= n; ++i) {\n            factorial[i] = factorial[i - 1] * i % MOD;\n        }\n\n        auto modPow = [&](long long x, int y) {\n            long long res = 1;\n            while (y > 0) {\n                if (y % 2 == 1) res = res * x % MOD;\n                x = x * x % MOD;\n                y /= 2;\n            }\n            return res;\n        };\n\n        auto modInv = [&](long long x) {\n            return modPow(x, MOD - 2);\n        };\n\n        auto nCr = [&](int n, int r) {\n            return factorial[n] * modInv(factorial[r]) % MOD * modInv(factorial[n - r]) % MOD;\n        };\n\n        if (n < 4) return 0;\n        long long result = 0;\n        for (int i = 4; i <= n; ++i) {\n            result += nCr(26, i - 4) * factorial[i - 1] % MOD;\n            result %= MOD;\n        }\n\n        return result;\n    }\n};"
}