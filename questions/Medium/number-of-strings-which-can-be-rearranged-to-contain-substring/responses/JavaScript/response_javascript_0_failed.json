{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54592000,
    "question_id": "3200",
    "elapsed_time": 292,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "457230475",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708082096612,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1176888865",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar stringCount = function(n) {\n    const mod = 1e9 + 7;\n    const factorial = [1];\n    for (let i = 1; i <= n; ++i) factorial[i] = (factorial[i - 1] * i) % mod;\n    \n    const powMod = (base, exponent, modulus) => {\n        let result = 1;\n        base %= modulus;\n        while (exponent > 0) {\n            if (exponent % 2 === 1) result = (result * base) % modulus;\n            exponent >>= 1;\n            base = (base * base) % modulus;\n        }\n        return result;\n    };\n\n    const inverse = x => powMod(x, mod - 2, mod);\n\n    const nCr = (n, r) => {\n        if (n < r) return 0;\n        return (factorial[n] * inverse((factorial[r] * factorial[n - r]) % mod)) % mod;\n    };\n\n    let total = 0;\n    for (let i = 4; i <= n; ++i) {\n        let count = nCr(i, 4) * factorial[4] % mod; // Choose 4 positions for \"leet\" and permute them\n        count = (count * powMod(25, i - 4, mod)) % mod; // Fill the rest with any of the 25 other letters\n        total = (total + count) % mod;\n    }\n    return total;\n};"
}