{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 78860000,
    "question_id": "3200",
    "elapsed_time": 436,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "26",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708092046258,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1176986892",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec string_count(n :: integer) :: integer\n  def string_count(n) do\n    modulo = 1_000_000_007\n    factorial = Stream.iterate(1, &(&1 + 1))\n                |> Enum.take(n)\n                |> Enum.reduce(1, fn x, acc -> rem(x * acc, modulo) end)\n\n    count_if_included = if n >= 4 do\n                          combinations = div(factorial, 24)\n                          rem(combinations * Enum.reduce(0..(n-4), 1, fn _, acc -> rem(acc * 26, modulo) end), modulo)\n                        else\n                          0\n                        end\n\n    rem(count_if_included, modulo)\n  end\nend"
}