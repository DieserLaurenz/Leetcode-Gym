{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71876000,
    "question_id": "3200",
    "elapsed_time": 348,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708092095023,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1176987453",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec string_count(n :: integer) :: integer\n  def string_count(n) do\n    modulo = 1_000_000_007\n\n    # Calculate n! modulo 10^9+7\n    factorial_n = Enum.reduce(1..n, 1, fn x, acc -> rem(x * acc, modulo) end)\n\n    # Calculate the number of ways to arrange \"leet\"\n    # Since \"leet\" contains 4 unique characters, we use 4! (factorial of 4) for its arrangements\n    factorial_4 = Enum.reduce(1..4, 1, fn x, acc -> rem(x * acc, modulo) end)\n\n    # Calculate the number of ways to fill the remaining positions with any of the 26 letters\n    remaining_positions = n - 4\n    fill_remaining = pow(26, remaining_positions, modulo)\n\n    # Calculate total good strings\n    total_good_strings = rem(factorial_n * fill_remaining, modulo)\n    total_good_strings = rem(total_good_strings * invert_mod(factorial_4, modulo), modulo)\n\n    total_good_strings\n  end\n\n  defp pow(_base, 0, _modulo), do: 1\n  defp pow(base, exp, modulo) do\n    case exp do\n      1 -> base\n      _ ->\n        half_exp = pow(base, div(exp, 2), modulo)\n        squared_half_exp = rem(half_exp * half_exp, modulo)\n        if rem(exp, 2) == 0, do: squared_half_exp, else: rem(squared_half_exp * base, modulo)\n    end\n  end\n\n  defp invert_mod(a, m) do\n    gdc_res = gcd_extended(a, m)\n    rem(gdc_res + m, m)\n  end\n\n  defp gcd_extended(0, b), do: 0\n  defp gcd_extended(a, b) do\n    if b == 0 do\n      1\n    else\n      x1 = gcd_extended(rem(b, a), a)\n      x1 - div(b, a) * x1\n    end\n  end\nend"
}