{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71884000,
    "question_id": "3200",
    "elapsed_time": 358,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "576",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708092012484,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1176986523",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec string_count(n :: integer) :: integer\n  def string_count(n) do\n    modulo = 1_000_000_007\n\n    if n < 4 do\n      0\n    else\n      factorial = Enum.reduce(1..n, 1, fn x, acc -> rem(x * acc, modulo) end)\n      leet_perms = rem(24 * factorial, modulo)\n      leet_count = rem(leet_perms * pow(25, n - 4, modulo), modulo)\n      rem(leet_count, modulo)\n    end\n  end\n\n  defp pow(_base, 0, _modulo), do: 1\n  defp pow(base, exp, modulo) when exp > 0 do\n    p = pow(rem(base * base, modulo), div(exp, 2), modulo)\n    if rem(exp, 2) == 0, do: p, else: rem(base * p, modulo)\n  end\nend"
}