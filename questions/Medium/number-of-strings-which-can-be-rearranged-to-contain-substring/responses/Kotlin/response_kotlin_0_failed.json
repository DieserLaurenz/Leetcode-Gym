{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34628000,
    "question_id": "3200",
    "elapsed_time": 264,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "28",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708082772912,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1176895274",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun stringCount(n: Int): Int {\n        val mod = 1000000007\n        if (n < 4) return 0\n        var factorial = LongArray(n + 1)\n        factorial[0] = 1\n        for (i in 1..n) {\n            factorial[i] = factorial[i - 1] * i % mod\n        }\n        var count = factorial[n]\n        for (i in 1..n - 3) {\n            count = (count + factorial[n] * modInverse(factorial[i], mod) % mod * modInverse(factorial[n - i], mod) % mod) % mod\n        }\n        return count.toInt()\n    }\n\n    private fun modInverse(a: Long, mod: Int): Long {\n        return power(a, mod - 2, mod)\n    }\n\n    private fun power(x: Long, y: Int, p: Int): Long {\n        var x = x % p\n        var y = y\n        var res: Long = 1\n        while (y > 0) {\n            if (y and 1 != 0) res = res * x % p\n            y = y shr 1\n            x = x * x % p\n        }\n        return res\n    }\n}"
}