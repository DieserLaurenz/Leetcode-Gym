{
    "status_code": 15,
    "lang": "python3",
    "run_success": false,
    "runtime_error": "Line 19: IndexError: list index out of range",
    "full_runtime_error": "IndexError: list index out of range\n           ~~~~^^^\n    return fact[n] * inv_fact[r] * inv_fact[n - r] % MOD\nLine 19 in nCr (Solution.py)\n                   ^^^^^^^^^^\n    combinations = nCr(26, 4) if i == 4 else nCr(26, 4) * nCr(n - 4, i - 4) % MOD\nLine 24 in stringCount (Solution.py)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ret = Solution().stringCount(param_1)\nLine 48 in _driver (Solution.py)\n    _driver()\nLine 59 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 16836000,
    "question_id": "3200",
    "elapsed_time": 71,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708839501273,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185483756",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution:\n    def stringCount(self, n: int) -> int:\n        MOD = 10**9 + 7\n\n        if n < 4:\n            return 0\n\n        # Calculate factorials and their modular inverses for later use\n        fact = [1] * (n + 1)\n        inv_fact = [1] * (n + 1)\n        for i in range(2, n + 1):\n            fact[i] = fact[i - 1] * i % MOD\n        inv_fact[n] = pow(fact[n], MOD - 2, MOD)\n        for i in range(n - 1, 0, -1):\n            inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n        # Function to compute nCr % MOD\n        def nCr(n, r):\n            return fact[n] * inv_fact[r] * inv_fact[n - r] % MOD\n\n        # Count the total number of good strings\n        total = 0\n        for i in range(4, n + 1):\n            combinations = nCr(26, 4) if i == 4 else nCr(26, 4) * nCr(n - 4, i - 4) % MOD\n            arrangements = fact[i - 4]\n            total += combinations * arrangements % MOD\n            total %= MOD\n\n        return total"
}