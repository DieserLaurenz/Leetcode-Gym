{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20512000,
    "question_id": "3200",
    "elapsed_time": 1045,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "24",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708839421102,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185482846",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def stringCount(self, n: int) -> int:\n        MOD = 10**9 + 7\n        # Factorial memoization\n        fact = [1] * (n+1)\n        for i in range(2, n+1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        # Fast exponentiation\n        def fast_exp(base, exp):\n            result = 1\n            while exp > 0:\n                if exp % 2 == 1:\n                    result = (result * base) % MOD\n                base = (base * base) % MOD\n                exp //= 2\n            return result\n        \n        # Combinatorial function\n        def comb(n, k):\n            return fact[n] * fast_exp(fact[k], MOD-2) * fast_exp(fact[n-k], MOD-2) % MOD\n        \n        # Main calculation\n        total = 0\n        for i in range(1, n - 2):  # Loop over positions for \"leet\"\n            # Positions left * positions right * permutations of \"leet\" * permutations of the rest\n            total += comb(n-4, i) * fact[4] * fact[n-4-i] % MOD\n            total %= MOD\n        \n        return total"
}