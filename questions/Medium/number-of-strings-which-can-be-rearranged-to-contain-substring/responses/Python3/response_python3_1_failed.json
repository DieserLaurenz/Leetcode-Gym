{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16608000,
    "question_id": "3200",
    "elapsed_time": 11010,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708839471209,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185483263",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def stringCount(self, n: int) -> int:\n        MOD = 10**9 + 7\n\n        def factorial(x):\n            ans = 1\n            for i in range(1, x + 1):\n                ans = (ans * i) % MOD\n            return ans\n\n        def power(x, y, p):\n            res = 1\n            x = x % p\n            while y > 0:\n                if y & 1:\n                    res = (res * x) % p\n                y = y >> 1\n                x = (x * x) % p\n            return res\n\n        def modInverse(x, p):\n            return power(x, p - 2, p)\n\n        def nCr(n, r, p):\n            if r == 0:\n                return 1\n            return (factorial(n) * modInverse(factorial(r), p) % p *\n                    modInverse(factorial(n - r), p) % p) % p\n\n        if n < 4:\n            return 0\n        total = 0\n        for i in range(4, n + 1):\n            total += nCr(26, i - 4, MOD) * factorial(i - 1)\n            total %= MOD\n        return total"
}