{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6368000,
    "question_id": "3200",
    "elapsed_time": 32,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708083038807,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1176897769",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func stringCount(n int) int {\n    const mod = 1e9 + 7\n    if n < 4 {\n        return 0\n    }\n    fact := make([]int, n+1)\n    invFact := make([]int, n+1)\n    fact[0], invFact[0] = 1, 1\n    for i := 1; i <= n; i++ {\n        fact[i] = i * fact[i-1] % mod\n        invFact[i] = pow(fact[i], mod-2, mod)\n    }\n    pow25 := make([]int, n+1)\n    pow25[0] = 1\n    for i := 1; i <= n; i++ {\n        pow25[i] = 25 * pow25[i-1] % mod\n    }\n    var total int\n    for i := 4; i <= n; i++ {\n        total = (total + comb(i-1, 3, fact, invFact, mod)*pow25[n-i]%mod) % mod\n    }\n    return total\n}\n\nfunc pow(x, n, mod int) int {\n    res := 1\n    for n > 0 {\n        if n&1 == 1 {\n            res = res * x % mod\n        }\n        x = x * x % mod\n        n >>= 1\n    }\n    return res\n}\n\nfunc comb(n, k int, fact, invFact []int, mod int) int {\n    return fact[n] * invFact[k] % mod * invFact[n-k] % mod\n}"
}