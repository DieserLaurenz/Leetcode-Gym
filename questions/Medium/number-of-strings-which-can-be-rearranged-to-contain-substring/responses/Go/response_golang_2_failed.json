{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6500000,
    "question_id": "3200",
    "elapsed_time": 16,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708083150258,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1176898860",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func stringCount(n int) int {\n    mod := 1000000007\n    if n < 4 {\n        return 0\n    }\n    // Calculate factorial of n and modular inverse of factorial\n    factorial := make([]int, n+1)\n    invFactorial := make([]int, n+1)\n    factorial[0], invFactorial[0] = 1, 1\n    for i := 1; i <= n; i++ {\n        factorial[i] = factorial[i-1] * i % mod\n    }\n    invFactorial[n] = pow(factorial[n], mod-2, mod)\n    for i := n - 1; i > 0; i-- {\n        invFactorial[i] = invFactorial[i+1] * (i + 1) % mod\n    }\n\n    // Calculate pow(25, i, mod) for i in range [0, n-4]\n    pow25 := make([]int, n-3)\n    pow25[0] = 1\n    for i := 1; i < n-3; i++ {\n        pow25[i] = pow25[i-1] * 25 % mod\n    }\n\n    // Calculate pow(26, i, mod) for i in range [0, n-4]\n    pow26 := make([]int, n-3)\n    pow26[0] = 1\n    for i := 1; i < n-3; i++ {\n        pow26[i] = pow26[i-1] * 26 % mod\n    }\n\n    ans := 0\n    for i := 4; i <= n; i++ {\n        temp := factorial[i-1] * invFactorial[4-1] % mod * invFactorial[i-4] % mod // C(i-1, 3)\n        temp = temp * pow25[i-4] % mod // Multiply by 25^(i-4)\n        temp = temp * pow26[n-i] % mod // Multiply by 26^(n-i)\n        ans = (ans + temp) % mod\n    }\n\n    return ans\n}\n\n// Modular exponentiation\nfunc pow(x, y, p int) int {\n    res := 1\n    x = x % p\n    for y > 0 {\n        if y&1 == 1 {\n            res = res * x % p\n        }\n        y = y >> 1\n        x = x * x % p\n    }\n    return res\n}"
}