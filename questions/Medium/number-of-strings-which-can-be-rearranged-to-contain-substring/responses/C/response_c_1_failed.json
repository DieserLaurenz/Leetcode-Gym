{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5296000,
    "question_id": "3200",
    "elapsed_time": 19,
    "compare_result": "001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "4",
    "expected_output": "12",
    "task_finish_time": 1708072820874,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 264,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1176792527",
    "input_formatted": "4",
    "input": "4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nconst int MOD = 1000000007;\n\nlong long modPow(long long base, int exp, int mod) {\n    long long result = 1;\n    while (exp > 0) {\n        if (exp % 2 == 1)\n            result = (result * base) % mod;\n        base = (base * base) % mod;\n        exp /= 2;\n    }\n    return result;\n}\n\nint stringCount(int n) {\n    if (n < 4) return 0;\n    long long count = 1;\n    for (int i = 0; i < 4; ++i) {\n        count = (count * (n - i)) % MOD;\n    }\n    count = (count * modPow(24, MOD - 2, MOD)) % MOD; // Inverse of 4! because we are considering permutations of \"leet\"\n    \n    long long total = modPow(26, n - 4, MOD); // Remaining positions can be filled with any character\n    count = (count * total) % MOD;\n    \n    return (int)count;\n}"
}