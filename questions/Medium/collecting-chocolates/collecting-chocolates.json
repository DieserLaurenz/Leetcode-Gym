{
    "acRate": 32.3888720895071,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2735",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Collecting Chocolates",
    "titleSlug": "collecting-chocolates",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Enumeration",
            "id": "VG9waWNUYWdOb2RlOjYxMDY2",
            "slug": "enumeration"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long minCost(vector<int>& nums, int x) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long minCost(int[] nums, int x) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minCost(self, nums, x):         \"\"\"         :type nums: List[int]         :type x: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minCost(self, nums: List[int], x: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long minCost(int* nums, int numsSize, int x){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long MinCost(int[] nums, int x) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} x  * @return {number}  */ var minCost = function(nums, x) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minCost(nums: number[], x: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $x      * @return Integer      */     function minCost($nums, $x) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minCost(_ nums: [Int], _ x: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minCost(nums: IntArray, x: Int): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minCost(List<int> nums, int x) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minCost(nums []int, x int) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} x # @return {Integer} def min_cost(nums, x)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minCost(nums: Array[Int], x: Int): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn min_cost(nums: Vec<i32>, x: i32) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (min-cost nums x)   (-> (listof exact-integer?) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec min_cost(Nums :: [integer()], X :: integer()) -> integer(). min_cost(Nums, X) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec min_cost(nums :: [integer], x :: integer) :: integer   def min_cost(nums, x) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums of size n representing the cost of collecting different chocolates. The cost of collecting the chocolate at the index iis nums[i]. Each chocolate is of a different type, and initially, the chocolate at the indexiis of ith type. In one operation, you can do the following with an incurred cost of x:  Simultaneously change the chocolate of ith type to ((i + 1) mod n)th type for all chocolates.  Return the minimum cost to collect chocolates of all types, given that you can perform as many operations as you would like.  Example 1:  Input: nums = [20,1,15], x = 5 Output: 13 Explanation: Initially, the chocolate types are [0,1,2]. We will buy the 1sttype of chocolate at a cost of 1. Now, we will perform the operation at a cost of 5, and the types of chocolates will become [1,2,0]. We will buy the 2nd type of chocolate at a cost of 1. Now, we will again perform the operation at a cost of 5, and the chocolate types will become [2,0,1]. We will buy the 0th type of chocolate at a cost of 1.  Thus, the total cost will become (1 + 5 + 1 + 5 + 1) = 13. We can prove that this is optimal.  Example 2:  Input: nums = [1,2,3], x = 4 Output: 6 Explanation: We will collect all three types of chocolates at their own price without performing any operations. Therefore, the total cost is 1 + 2 + 3 = 6.   Constraints:  1 <= nums.length <= 1000 1 <= nums[i] <= 109 1 <= x <= 109  "
}