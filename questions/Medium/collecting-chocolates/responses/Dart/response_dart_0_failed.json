{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 16: Char 19: Error: The getter 'Math' isn't defined for the class 'Solution'.",
    "full_runtime_error": "Line 16: Char 19: Error: The getter 'Math' isn't defined for the class 'Solution'.\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'Math'.\n        minCost = Math.min(minCost, currentCost + totalCost - nums[currentIndex]); // Update minCost\n                  ^^^^",
    "status_runtime": "N/A",
    "memory": 148028000,
    "question_id": "2810",
    "elapsed_time": 407,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706813413885,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1163258153",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minCost(List<int> nums, int x) {\n    int n = nums.length;\n    int totalCost = nums.reduce((a, b) => a + b); // Step 1: Direct purchase cost\n    int minCost = totalCost; // Initialize minCost with totalCost\n\n    // Step 2: Calculate minimum cost for each starting chocolate type\n    for (int start = 0; start < n; start++) {\n      int currentCost = 0;\n      int operations = 0;\n      for (int i = 0; i < n; i++) { // Simulate purchasing and rotating\n        int currentIndex = (start + i) % n;\n        int operationCost = x * operations; // Cost of operations so far\n        currentCost += operationCost + nums[currentIndex]; // Total cost with current operation\n        operations++; // Increase the number of operations for the next chocolate\n        minCost = Math.min(minCost, currentCost + totalCost - nums[currentIndex]); // Update minCost\n      }\n    }\n\n    return minCost; // Step 3: Return the minimum cost found\n  }\n}"
}