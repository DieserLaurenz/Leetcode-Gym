{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 14: ** (UndefinedFunctionError) function Enum.nth/2 is undefined or private",
    "full_runtime_error": "Line 14: ** (UndefinedFunctionError) function Enum.nth/2 is undefined or private\n    (elixir 1.15.7) Enum.nth([20, 1, 15], 0)\n    (elixir 1.15.7) lib/enum.ex:1693: Enum.\"-map/2-lists^map/1-1-\"/2\n    solution.ex:14: Solution.collect_chocolates/2\n    solution.ex:6: anonymous fn/4 in Solution.min_cost/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:39: Driver.consume_test_cases/2\n    solution.ex:25: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73272000,
    "question_id": "2810",
    "elapsed_time": 335,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706823086204,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1163365617",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_cost(nums :: [integer], x :: integer) :: integer\n  def min_cost(nums, x) do\n    Enum.reduce(0..length(nums)-1, Enum.sum(nums), fn i, acc ->\n      operation_cost = i * x\n      collected_cost = collect_chocolates(nums, i)\n      min(acc, collected_cost + operation_cost)\n    end)\n  end\n\n  defp collect_chocolates(nums, operations) do\n    nums\n    |> Enum.with_index()\n    |> Enum.map(fn {cost, index} ->\n      shifted_index = rem(index - operations, length(nums))\n      Enum.nth(nums, shifted_index)\n    end)\n    |> Enum.min()\n    |> Kernel.*(length(nums))\n  end\nend"
}