{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15456000,
    "question_id": "2810",
    "elapsed_time": 121,
    "compare_result
    "code_output": "21",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706813078707,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 512,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1163253485",
    "input_formatted": "[20,1,15], 5",
    "input": "[20,1,15]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minCost(_ nums: [Int], _ x: Int) -> Int {\n        let n = nums.count\n        var minCost = nums.reduce(0, +) // Sum of all elements as the base cost without any operations\n        var currentCost = minCost\n        \n        for i in 0..<n {\n            // For each chocolate, calculate the cost if we decide to make it the next type to collect\n            // This includes the cost of operations and the cost of collecting the chocolates so far\n            currentCost -= nums[i] // Remove the cost of the current chocolate as it will be bought in a future operation\n            let operationCost = x * (i + 1) // Cost of operations to make the current chocolate the next type to collect\n            currentCost += operationCost // Add the operation cost to the total cost\n            minCost = min(minCost, currentCost) // Update the minimum cost found so far\n        }\n        \n        return minCost\n    }\n}"
}