{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 11: exception error: function_clause",
    "full_runtime_error": "Line 11: exception error: function_clause\n[{lists,nth,[0,[20,1,15]],[{file,\"lists.erl\"},{line,198}]},\n {solution,min_cost,7,[{file,\"solution.erl\"},{line,11}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,32}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,18}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,49}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59980000,
    "question_id": "2810",
    "elapsed_time": 1404,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706815017768,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1163279355",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec min_cost(Nums :: [integer()], X :: integer()) -> integer().\nmin_cost(Nums, X) ->\n    N = length(Nums),\n    TotalCost = lists:sum(Nums),\n    min_cost(Nums, N, X, TotalCost, 0, TotalCost, 0).\n\nmin_cost(_Nums, 0, _X, _TotalCost, _CurrentCost, MinCost, _Ops) ->\n    MinCost;\nmin_cost(Nums, N, X, TotalCost, CurrentCost, MinCost, Ops) ->\n    NewOps = Ops + 1,\n    ShiftCost = (NewOps * X) + lists:nth(NewOps rem N, Nums),\n    NewCurrentCost = CurrentCost - TotalCost + ShiftCost,\n    NewMinCost = min(MinCost, NewCurrentCost),\n    min_cost(Nums, N - 1, X, TotalCost, NewCurrentCost, NewMinCost, NewOps)."
}