{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57380000,
    "question_id": "2810",
    "elapsed_time": 937,
    "compare_result
    "code_output": "26",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706814257138,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 507,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1163269515",
    "input_formatted": "[20,1,15], 5",
    "input": "[20,1,15]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minCost(nums: Array[Int], x: Int): Long = {\n        val n = nums.length\n        var totalCost = 0L\n        var minCost = Long.MaxValue\n        var sum = 0L\n\n        // First, calculate the total cost without any operations\n        for (cost <- nums) {\n            totalCost += cost\n        }\n        minCost = totalCost\n\n        // Calculate the minimum cost with operations\n        for (i <- 1 to n) {\n            sum += nums(i - 1)\n            // Calculate the cost of making all chocolates of type i-1 (0-indexed)\n            // The cost includes buying some chocolates directly and using operations to change the types of the rest\n            val currentCost = sum + (n.toLong - i) * x\n            minCost = math.min(minCost, currentCost)\n        }\n\n        minCost\n    }\n}"
}