{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53916000,
    "question_id": "2810",
    "elapsed_time": 254,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706804588811,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 239,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1163112298",
    "input_formatted": "[20,1,15], 5",
    "input": "[20,1,15]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar minCost = function(nums, x) {\n    let n = nums.length;\n    let minCost = nums.reduce((a, b) => a + b, 0); // Direct purchase cost without operations\n    \n    for (let start = 0; start < n; ++start) {\n        let cost = 0, sum = 0, ops = 0;\n        for (let i = 0; i < n; ++i) {\n            let idx = (start + i) % n; // Calculate current index after rotations\n            cost += nums[idx]; // Add cost of the current chocolate\n            ops++; // Increment number of operations\n            sum = cost + ops * x - nums[idx]; // Calculate total cost minus the current chocolate's price (since it's already included in 'cost')\n            minCost = Math.min(minCost, sum); // Update minimum cost\n        }\n    }\n    \n    return minCost;\n};"
}