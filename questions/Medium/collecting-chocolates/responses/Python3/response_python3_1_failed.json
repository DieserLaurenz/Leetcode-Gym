{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16812000,
    "question_id": "2810",
    "elapsed_time": 131,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1708745270099,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 364,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184476971",
    "input_formatted": "[20,1,15], 5",
    "input": "[20,1,15]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nimport heapq\n\nclass Solution:\n    def minCost(self, nums: List[int], x: int) -> int:\n        n = len(nums)\n        nums.sort()\n        cost = sum(nums[:n//2+1])\n        min_cost = cost\n        heapq.heapify(nums)\n        for i in range(1, n):\n            if n % 2 == 1 or i <= n//2:\n                cost += x\n                removed = heapq.heappop(nums)\n                cost -= removed\n                heapq.heappush(nums, removed + x)\n                if i >= n//2:\n                    cost += nums[0]\n            min_cost = min(min_cost, cost)\n        return min_cost"
}