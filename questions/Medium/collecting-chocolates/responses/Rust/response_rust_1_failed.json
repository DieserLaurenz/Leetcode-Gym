{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2196000,
    "question_id": "2810",
    "elapsed_time": 49,
    "compare_result
    "code_output": "31",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706814374460,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 23,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1163271097",
    "input_formatted": "[20,1,15], 5",
    "input": "[20,1,15]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_cost(nums: Vec<i32>, x: i32) -> i64 {\n        let n = nums.len();\n        let mut total_cost = nums.iter().map(|&cost| cost as i64).sum::<i64>(); // Cost of buying each chocolate without operations.\n        let mut min_additional_cost = i64::MAX;\n\n        // Iterate over each chocolate type to calculate the minimum additional cost\n        // of making all types available at some point through operations.\n        for i in 0..n {\n            let mut additional_cost = 0i64;\n            for j in 0..n {\n                // Calculate the cost of operations needed to bring the j-th type chocolate\n                // to the position i using the formula: (operation cost) * (distance in types).\n                let distance = ((j + n) - i) % n; // Ensure positive distance\n                additional_cost += distance as i64 * x as i64;\n            }\n            // Find the minimum additional cost across all starting points.\n            min_additional_cost = min_additional_cost.min(additional_cost);\n        }\n\n        // The minimum cost is the sum of direct buying costs and the minimum additional cost found.\n        total_cost + min_additional_cost - nums.iter().map(|&cost| cost as i64).max().unwrap() // Subtract the cost of the most expensive chocolate, since we're adding operation costs\n    }\n}"
}