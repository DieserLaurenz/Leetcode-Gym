{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2128000,
    "question_id": "2810",
    "elapsed_time": 184,
    "compare_result
    "code_output": "51",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706814320807,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1163270347",
    "input_formatted": "[20,1,15], 5",
    "input": "[20,1,15]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_cost(nums: Vec<i32>, x: i32) -> i64 {\n        let n = nums.len() as i64;\n        let mut min_cost = i64::MAX;\n        let nums: Vec<i64> = nums.into_iter().map(|num| num as i64).collect();\n        let x = x as i64;\n\n        // Try collecting each type of chocolate as the starting point.\n        for start in 0..n {\n            let mut cost = 0;\n            let mut operation_cost = 0;\n\n            // Calculate the cost for this start point.\n            for i in 0..n {\n                let current_index = (start + i) % n;\n                // Calculate the cost of collecting the current type of chocolate.\n                let current_cost = nums[current_index as usize] + operation_cost;\n                cost += current_cost;\n                // Update the operation cost for the next chocolate type.\n                operation_cost += x;\n            }\n\n            // Update the minimum cost if the current cost is lower.\n            min_cost = min_cost.min(cost);\n        }\n\n        min_cost\n    }\n}"
}