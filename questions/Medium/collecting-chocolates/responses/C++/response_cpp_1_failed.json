{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66052000,
    "question_id": "2810",
    "elapsed_time": 121,
    "compare_result": "00000001000000000000000100000000000000000100001001000000000000000000000000010001000000000000000000000010000001000000000000000000000000101000000000000000000000000000000000010000000000010000000000000000001000000000001000000000000001000000000000100010000100000000000000000001010000000000100000000000000001000000010000000000000100000000000000000000000000000000000000101000000000000010011000000000000000100000000000100000000001000000000001000000000000100000000000010001000000000000000100000100000010000110010000000100000110000000000000000001100000000000010000000000000000000100101000000000001000000001000000010000000000100000000000000000000000010000000000000000000000000000100000000000001000100000100010001000000100000000001000000100000000000000000000000010000010000000000000000000000000000010000000011100000000000000000000000000001001100000000000000000000000000100001010000000000000000001110100011000000000000010010000000000000000000000000101000000000000000000000000010010000000000000000000001000000010000010000000000001000000000000100000000000000000000000000000000000000000000000100101001000000000000000000000000000010000000110000100010000000000000000000000010000000000000000100000000000000000000000000000000000000000000000000100000001000000010001000000010000000100000000000000000010000000000000000000000000000100000100000000001000000000000000001000000000000000000000000000010000000001000000100000001100000100000000000000000000000000000000000000000000000001000000100000001000000100010000010000001001000000000000000010000000000001000000000000000100000000000000000001000000000000000000100000100001100000000000001000110000000000010010100000000000000000000000010000010010100000001000000000000000000001000000000010000100000000000010000000000001000100000010000001010000000000100000010000000000010000000000000000000010000100000100000000010001000000010010100100010100000010010000100000000000001000010000000000100000000000000000000000000000000000000000001000100000000000010000000010000001000000000000000000001010000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000010000000000001000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[20,1,15]\n5",
    "expected_output": "13",
    "task_finish_time": 1706803930842,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 2564,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1163101851",
    "input_formatted": "[20,1,15], 5",
    "input": "[20,1,15]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm> // For std::min\n\nclass Solution {\npublic:\n    long long minCost(vector<int>& nums, int x) {\n        long long minCost = 0;\n        int n = nums.size();\n        vector<long long> prefixSum(n);\n        \n        // Calculate the prefix sum to use it for calculating the cost of operations\n        prefixSum[0] = nums[0];\n        for (int i = 1; i < n; ++i) {\n            prefixSum[i] = prefixSum[i - 1] + nums[i];\n        }\n        \n        // Calculate the total cost without any operation as the initial minimum cost\n        minCost = prefixSum[n - 1];\n        \n        // Try to buy chocolates with performing operations, starting from buying each chocolate as the first one\n        for (int i = 0; i < n; ++i) {\n            long long cost = 0;\n            for (int j = 0; j < n; ++j) { // j is the number of operations\n                int idx = (i + j) % n; // Current index considering the operations\n                long long opCost = (long long)j * x; // Cost of performing j operations\n                // Cost to buy chocolates up to idx (inclusive) and perform j operations\n                if (idx >= i)\n                    cost = prefixSum[idx] - (i > 0 ? prefixSum[i - 1] : 0) + opCost;\n                else\n                    cost = prefixSum[idx] + (prefixSum[n - 1] - prefixSum[i - 1]) + opCost;\n                \n                // Update the minimum cost\n                minCost = std::min(minCost, cost);\n            }\n        }\n        \n        return minCost;\n    }\n};"
}