{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "=: contract violation",
    "full_runtime_error": "=: contract violation\n  expected: number?\n  given: #\\a\n  context...:\n   solution.rkt:1:0: remove-almost-equal-characters\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:15:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100172000,
    "question_id": "3230",
    "elapsed_time": 236,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"aaaaa\"",
    "expected_output": "2",
    "task_finish_time": 1708124389422,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1177350518",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (remove-almost-equal-characters word)\n  (-> string? exact-integer?)\n  (let loop ([i 0] [ops 0] [last #\\space])\n    (if (= i (string-length word))\n        ops\n        (let ([cur (string-ref word i)])\n          (if (or (= cur last)\n                  (= (abs (- (char->integer cur) (char->integer last))) 1))\n              (loop (+ i 1) (+ ops 1) (if (= (char->integer last) 122) #\\a (integer->char (+ (char->integer last) 2))))\n              (loop (+ i 1) ops cur))))))"
}