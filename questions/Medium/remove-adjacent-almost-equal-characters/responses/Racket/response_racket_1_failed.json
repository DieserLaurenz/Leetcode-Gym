{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101320000,
    "question_id": "3230",
    "elapsed_time": 250,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"aaaaa\"",
    "expected_output": "2",
    "task_finish_time": 1708124421277,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 160,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1177350763",
    "input_formatted": "\"aaaaa\"",
    "input": "\"aaaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (remove-almost-equal-characters word)\n  (-> string? exact-integer?)\n  (define (almost-equal? a b)\n    (or (= a b) (= (abs (- a b)) 1)))\n  (let loop ([i 1] [ops 0] [prev (char->integer (string-ref word 0))])\n    (if (= i (string-length word))\n        ops\n        (let* ([cur (char->integer (string-ref word i))]\n               [next-ops (if (or (almost-equal? prev cur)\n                                 (almost-equal? prev (if (= cur 122) 97 (if (= cur 97) 122 (+ cur 1)))))\n                             (add1 ops)\n                             ops)])\n          (loop (add1 i) next-ops cur)))))"
}