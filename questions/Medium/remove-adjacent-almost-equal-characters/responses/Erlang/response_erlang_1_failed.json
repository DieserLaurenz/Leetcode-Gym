{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59808000,
    "question_id": "3230",
    "elapsed_time": 1328,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"abddez\"",
    "expected_output": "2",
    "task_finish_time": 1708124549979,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 498,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1177351570",
    "input_formatted": "\"abddez\"",
    "input": "\"abddez\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec remove_almost_equal_characters(Word :: unicode:unicode_binary()) -> integer().\nremove_almost_equal_characters(Word) ->\n    Bytes = binary_to_list(Word),\n    remove_adj(Bytes, 1, 0).\n\nremove_adj([], _Prev, Acc) -> Acc;\nremove_adj([H | T], Prev, Acc) when H =:= Prev; abs(H - Prev) =:= 1 ->\n    remove_adj(T, (H + 2) rem 123, Acc + 1); % Use H + 2 to ensure a different and non-adjacent character in 'a' to 'z' range\nremove_adj([H | T], _Prev, Acc) ->\n    remove_adj(T, H, Acc)."
}