{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2176000,
    "question_id": "3230",
    "elapsed_time": 10,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"abddez\"",
    "expected_output": "2",
    "task_finish_time": 1708124295234,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 222,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1177349865",
    "input_formatted": "\"abddez\"",
    "input": "\"abddez\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn remove_almost_equal_characters(word: String) -> i32 {\n        let mut ops = 0;\n        let mut i = 0;\n        let chars = word.as_bytes();\n        while i < chars.len() {\n            let mut j = i;\n            while j + 1 < chars.len() && (chars[j + 1] == chars[j] || (chars[j + 1] as i8 - chars[j] as i8).abs() == 1) {\n                j += 1;\n            }\n            let length = j - i + 1;\n            ops += match length {\n                1 | 2 => 1,\n                _ => (length + 1) / 3,\n            };\n            i = j + 1;\n        }\n        ops as i32\n    }\n}"
}