{
    "status_code": 15,
    "lang": "c",
    "run_success": false,
    "runtime_error": "AddressSanitizer: heap-buffer-overflow on address 0x602000000193 at pc 0x559e3d8d490a bp 0x7ffc8e12f2f0 sp 0x7ffc8e12f2e0",
    "full_runtime_error": "=================================================================\n==22==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000193 at pc 0x559e3d8d490a bp 0x7ffc8e12f2f0 sp 0x7ffc8e12f2e0\nREAD of size 1 at 0x602000000193 thread T0\n    #1 0x7f6aedaecd8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #2 0x7f6aedaece3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n0x602000000193 is located 0 bytes to the right of 3-byte region [0x602000000190,0x602000000193)\nallocated by thread T0 here:\n    #0 0x7f6aee4bc887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145\n    #3 0x7f6aedaecd8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\nShadow bytes around the buggy address:\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff8000: fa fa 06 fa fa fa 04 fa fa fa 07 fa fa fa 04 fa\n  0x0c047fff8010: fa fa 00 fa fa fa 04 fa fa fa 02 fa fa fa 04 fa\n  0x0c047fff8020: fa fa 02 fa fa fa 04 fa fa fa 02 fa fa fa 04 fa\n=>0x0c047fff8030: fa fa[03]fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8060: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8070: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==22==ABORTING",
    "status_runtime": "N/A",
    "memory": 13336000,
    "question_id": "3230",
    "elapsed_time": 50,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"aa\"",
    "expected_output": "1",
    "task_finish_time": 1708123399314,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177343938",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint removeAlmostEqualCharacters(char* word) {\n    int count = 0;\n    for (int i = 1; word[i] != '\\0'; i++) {\n        if (word[i] == word[i - 1] || abs(word[i] - word[i - 1]) == 1) {\n            count++;\n            i++; // Skip next character to avoid double counting\n        }\n    }\n    return count;\n}"
}