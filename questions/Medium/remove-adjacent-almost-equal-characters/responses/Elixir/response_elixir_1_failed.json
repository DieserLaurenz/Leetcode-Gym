{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 19: ** (FunctionClauseError) no function clause matching in String.to_charlist/1",
    "full_runtime_error": "Line 19: ** (FunctionClauseError) no function clause matching in String.to_charlist/1\n    The following arguments were given to String.to_charlist/1:\n        # 1\n        ~c\"?\"\n    Attempted function clauses (showing 1 out of 1):\n        def to_charlist(+string+) when -is_binary(string)-\n    (elixir 1.15.7) lib/string.ex:2577: String.to_charlist/1\n    solution.ex:19: Solution.almost_equal/2\n    solution.ex:7: anonymous fn/2 in Solution.remove_almost_equal_characters/1\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:6: Solution.remove_almost_equal_characters/1\n    solution.ex:47: Driver.consume_test_cases/2\n    solution.ex:35: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75084000,
    "question_id": "3230",
    "elapsed_time": 340,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"aaaaa\"",
    "expected_output": "2",
    "task_finish_time": 1708124671888,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177352362",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec remove_almost_equal_characters(word :: String.t) :: integer\n  def remove_almost_equal_characters(word) do\n    word\n    |> String.graphemes()\n    |> Enum.reduce({0, '?'}, fn x, {acc, prev} ->\n      if almost_equal(x, prev) do\n        {acc + 1, alternate_char(x)}\n      else\n        {acc, x}\n      end\n    end)\n    |> elem(0)\n  end\n\n  defp almost_equal(a, b) when a == b, do: true\n  defp almost_equal(a, b) do\n    [code_a] = String.to_charlist(a)\n    [code_b] = String.to_charlist(b)\n    abs(code_a - code_b) == 1\n  end\n\n  defp alternate_char(char) do\n    [code] = String.to_charlist(char)\n    case code do\n      122 -> \"a\" # 'z' -> 'a'\n      97 -> \"b\"  # 'a' -> 'b'\n      _ -> <<code + 2 :: utf8>> # Move two steps to avoid adjacent almost-equal\n    end\n  end\nend"
}