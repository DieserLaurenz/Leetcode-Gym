{
    "acRate": 50.581711116828174,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2957",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Remove Adjacent Almost-Equal Characters",
    "titleSlug": "remove-adjacent-almost-equal-characters",
    "topicTags": [
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int removeAlmostEqualCharacters(string word) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int removeAlmostEqualCharacters(String word) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def removeAlmostEqualCharacters(self, word):         \"\"\"         :type word: str         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def removeAlmostEqualCharacters(self, word: str) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int removeAlmostEqualCharacters(char* word) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int RemoveAlmostEqualCharacters(string word) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} word  * @return {number}  */ var removeAlmostEqualCharacters = function(word) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function removeAlmostEqualCharacters(word: string): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $word      * @return Integer      */     function removeAlmostEqualCharacters($word) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func removeAlmostEqualCharacters(_ word: String) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun removeAlmostEqualCharacters(word: String): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int removeAlmostEqualCharacters(String word) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func removeAlmostEqualCharacters(word string) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} word # @return {Integer} def remove_almost_equal_characters(word)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def removeAlmostEqualCharacters(word: String): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn remove_almost_equal_characters(word: String) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (remove-almost-equal-characters word)   (-> string? exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec remove_almost_equal_characters(Word :: unicode:unicode_binary()) -> integer(). remove_almost_equal_characters(Word) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec remove_almost_equal_characters(word :: String.t) :: integer   def remove_almost_equal_characters(word) do        end end"
        }
    ],
    "content": "You are given a 0-indexed string word. In one operation, you can pick any index i of word and change word[i] to any lowercase English letter. Return the minimum number of operations needed to remove all adjacent almost-equal characters from word. Two characters a and b are almost-equal if a == b or a and b are adjacent in the alphabet.  Example 1:  Input: word = \"aaaaa\" Output: 2 Explanation: We can change word into \"acaca\" which does not have any adjacent almost-equal characters. It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.  Example 2:  Input: word = \"abddez\" Output: 2 Explanation: We can change word into \"ybdoez\" which does not have any adjacent almost-equal characters. It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2. Example 3:  Input: word = \"zyxyxyz\" Output: 3 Explanation: We can change word into \"zaxaxaz\" which does not have any adjacent almost-equal characters.  It can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 3.   Constraints:  1 <= word.length <= 100 word consists only of lowercase English letters.  "
}