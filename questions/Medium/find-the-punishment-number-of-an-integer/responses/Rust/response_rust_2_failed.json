{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2200000,
    "question_id": "2802",
    "elapsed_time": 18,
    "compare_result": "101111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "182",
    "std_output": "",
    "last_testcase": "37",
    "expected_output": "1478",
    "task_finish_time": 1707366027596,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1169379179",
    "input_formatted": "37",
    "input": "37",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn punishment_number(n: i32) -> i32 {\n        fn is_valid(i: i32, square: i32) -> bool {\n            let s = square.to_string();\n            for split_at in 1..=s.len() {\n                let mut sum = 0;\n                let mut temp = &s[..];\n                while !temp.is_empty() && temp.len() >= split_at {\n                    if let Ok(num) = temp[0..split_at].parse::<i32>() {\n                        sum += num;\n                        temp = &temp[split_at..];\n                    } else {\n                        break;\n                    }\n                }\n                if sum == i {\n                    return true;\n                }\n            }\n            false\n        }\n\n        let mut sum = 0;\n        for i in 1..=n {\n            let square = i * i;\n            if is_valid(i, square) || i == 1 {\n                sum += square;\n            }\n        }\n        sum\n    }\n}"
}