{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56792000,
    "question_id": "2802",
    "elapsed_time": 223,
    "compare_result": "001111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "82",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "182",
    "task_finish_time": 1707365161096,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1169369878",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function punishmentNumber(n: number): number {\n    const canBePartitioned = (i: number, square: string): boolean => {\n        for (let len = 1; len <= square.length; len++) {\n            const part = parseInt(square.substring(0, len), 10);\n            const next = square.substring(len);\n            if (next.length > 0 && next[0] === '0') continue;\n            if (part > i) break;\n            if (part === i || (part < i && canBePartitioned(i - part, next))) return true;\n        }\n        return false;\n    };\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        const square = (i * i).toString();\n        if (canBePartitioned(i, square)) {\n            sum += i * i;\n        }\n    }\n    return sum;\n};"
}