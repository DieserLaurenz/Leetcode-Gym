{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "210 ms",
    "memory": 52856000,
    "question_id": "2802",
    "elapsed_time": 243,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707365229595,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 216,
    "total_testcases": 216,
    "runtime_percentile": 75.0,
    "status_memory": "52.9 MB",
    "memory_percentile": 25.0,
    "pretty_lang": "TypeScript",
    "submission_id": "1169370625",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function punishmentNumber(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        const square = i * i;\n        const strSquare = square.toString();\n        if (canPartition(strSquare, i)) {\n            sum += square;\n        }\n    }\n    return sum;\n    \n    function canPartition(str: string, target: number): boolean {\n        const N = str.length;\n        for (let i = 1; i < (1 << N); i++) {\n            let sum = 0;\n            let part = 0;\n            for (let j = 0; j < N; j++) {\n                part = part * 10 + parseInt(str[j], 10);\n                if (((i >> j) & 1) === 1) {\n                    sum += part;\n                    part = 0;\n                }\n            }\n            if (sum + part === target) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"
}