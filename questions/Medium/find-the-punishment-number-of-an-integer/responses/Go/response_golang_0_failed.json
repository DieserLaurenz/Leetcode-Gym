{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2612000,
    "question_id": "2802",
    "elapsed_time": 132,
    "compare_result": "001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "143",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "182",
    "task_finish_time": 1707365667327,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1169375225",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func punishmentNumber(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sq := i * i\n        if checkPartition(sq, i) {\n            sum += sq\n        }\n    }\n    return sum\n}\n\nfunc checkPartition(sq, target int) bool {\n    str := strconv.Itoa(sq)\n    for length := 1; length <= len(str); length++ {\n        if partition(str, length, 0, target) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc partition(str string, length, start, target int) bool {\n    if start == len(str) {\n        return target == 0\n    }\n    if target < 0 {\n        return false\n    }\n    if length > len(str)-start {\n        return false\n    }\n    num, _ := strconv.Atoi(str[start : start+length])\n    return partition(str, length, start+length, target-num) || partition(str, 1, start+1, target)\n}"
}