{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "136 ms",
    "memory": 2608000,
    "question_id": "2802",
    "elapsed_time": 153,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707365695760,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 216,
    "total_testcases": 216,
    "runtime_percentile": 20.0,
    "status_memory": "2.6 MB",
    "memory_percentile": 35.0,
    "pretty_lang": "Go",
    "submission_id": "1169375523",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func punishmentNumber(n int) int {\n    sum := 0\n    for i := 1; i <= n; i++ {\n        if isValid(i) {\n            sum += i * i\n        }\n    }\n    return sum\n}\n\nfunc isValid(i int) bool {\n    square := i * i\n    squareStr := strconv.Itoa(square)\n    for j := 1; j <= len(squareStr); j++ {\n        if canPartition(squareStr, i, 0, j) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc canPartition(s string, target, start, length int) bool {\n    if target == 0 && start == len(s) {\n        return true\n    }\n    if target < 0 || start >= len(s) {\n        return false\n    }\n    for length := 1; start+length <= len(s); length++ {\n        num, _ := strconv.Atoi(s[start : start+length])\n        if start+length < len(s) || num == target {\n            if canPartition(s, target-num, start+length, 1) {\n                return true\n            }\n        }\n    }\n    return false\n}"
}