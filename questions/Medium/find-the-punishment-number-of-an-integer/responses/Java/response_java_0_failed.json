{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44236000,
    "display_runtime": "44",
    "question_id": "2802",
    "elapsed_time": 151,
    "compare_result": "001111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "82",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "182",
    "task_finish_time": 1707355649112,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1169286665",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int punishmentNumber(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            String square = String.valueOf(i * i);\n            for (int j = 1; j <= square.length(); j++) {\n                int partSum = 0;\n                int lastIdx = 0;\n                boolean isValid = true;\n                for (int k = 1; k <= j && isValid; k++) {\n                    if (lastIdx < square.length()) {\n                        String part = square.substring(lastIdx, Math.min(lastIdx + k, square.length()));\n                        lastIdx += k;\n                        partSum += Integer.parseInt(part);\n                    } else {\n                        isValid = false;\n                    }\n                }\n                if (isValid && partSum == i) {\n                    sum += i * i;\n                    break;\n                }\n            }\n        }\n        return sum;\n    }\n}"
}