{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "59 ms",
    "memory": 43300000,
    "display_runtime": "59",
    "question_id": "2802",
    "elapsed_time": 178,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707355677599,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 216,
    "total_testcases": 216,
    "runtime_percentile": 65.9423000000001,
    "status_memory": "43.3 MB",
    "memory_percentile": 72.46380000000006,
    "pretty_lang": "Java",
    "submission_id": "1169286889",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int punishmentNumber(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int square = i * i;\n            String strSquare = String.valueOf(square);\n            if (canBePartitioned(strSquare, i)) {\n                sum += square;\n            }\n        }\n        return sum;\n    }\n\n    private boolean canBePartitioned(String strSquare, int target) {\n        for (int i = 1; i < (1 << strSquare.length()); i++) {\n            int sum = 0;\n            int current = 0;\n            for (int j = 0; j < strSquare.length(); j++) {\n                current = current * 10 + (strSquare.charAt(j) - '0');\n                if ((i & (1 << j)) != 0) {\n                    sum += current;\n                    current = 0;\n                }\n            }\n            if (sum + current == target) return true;\n        }\n        return false;\n    }\n}"
}