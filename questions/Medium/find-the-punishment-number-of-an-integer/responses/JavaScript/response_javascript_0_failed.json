{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54228000,
    "question_id": "2802",
    "elapsed_time": 113,
    "compare_result": "101111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "182",
    "std_output": "",
    "last_testcase": "37",
    "expected_output": "1478",
    "task_finish_time": 1707365042462,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1169368611",
    "input_formatted": "37",
    "input": "37",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @return {number}\n */\nvar punishmentNumber = function(n) {\n    function canPartition(i, square) {\n        const s = square.toString();\n        for (let len = 1; len <= s.length; len++) {\n            let sum = parseInt(s.substring(0, len), 10);\n            let idx = len;\n            while (idx < s.length) {\n                const nextNum = parseInt(s.substring(idx, idx + len), 10);\n                if (sum + nextNum === i) {\n                    sum += nextNum;\n                    idx += len;\n                } else if (sum + nextNum < i) {\n                    sum += nextNum;\n                    idx += len;\n                } else {\n                    break;\n                }\n            }\n            if (sum === i) return true;\n        }\n        return false;\n    }\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        const square = i * i;\n        if (canPartition(i, square)) {\n            sum += square;\n        }\n    }\n    return sum;\n};"
}