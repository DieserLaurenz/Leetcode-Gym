{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126592000,
    "question_id": "2802",
    "elapsed_time": 756,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "31334",
    "std_output": "",
    "last_testcase": "100",
    "expected_output": "41334",
    "task_finish_time": 1707366116332,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 100,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1169380112",
    "input_formatted": "100",
    "input": "100",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (punishment-number n)\n  (-> exact-integer? exact-integer?)\n  (let loop ((i 1) (sum 0))\n    (if (> i n)\n        sum\n        (let ((sq (sqr i)))\n          (if (letrec ((check (lambda (num acc)\n                                (cond\n                                  [(string=? num \"\") (= acc i)]\n                                  [else (or (check (substring num 1) (+ acc (string->number (substring num 0 1))))\n                                            (and (> (string-length num) 1)\n                                                 (check (substring num 2) (+ acc (string->number (substring num 0 2))))))]))))\n                (check (number->string sq) 0))\n              (loop (+ i 1) (+ sum sq))\n              (loop (+ i 1) sum))))))"
}