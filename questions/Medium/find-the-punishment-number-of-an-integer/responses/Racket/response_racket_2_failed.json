{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126348000,
    "question_id": "2802",
    "elapsed_time": 1761,
    "compare_result": "001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "143",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "182",
    "task_finish_time": 1707366157458,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1169380534",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (punishment-number n)\n  (-> exact-integer? exact-integer?)\n  (define (can-partition? s i)\n    (define (helper remaining target acc)\n      (cond [(zero? target) #t]\n            [(or (string=? remaining \"\") (< target 0)) #f]\n            [else (or (helper (substring remaining 1) (- target (string->number (substring remaining 0 1))) (+ acc (string->number (substring remaining 0 1))))\n                      (and (< acc i)\n                           (> (string-length remaining) 1)\n                           (helper (substring remaining 1) i 0)))]))\n    (helper s i 0))\n  (define (sum-squares i)\n    (if (> i n)\n        0\n        (let ((square (* i i)))\n          (+ (if (can-partition? (number->string square) i) square 0)\n             (sum-squares (+ i 1))))))\n  (sum-squares 1))"
}