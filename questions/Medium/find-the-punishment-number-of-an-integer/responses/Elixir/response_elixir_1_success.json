{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "1627 ms",
    "memory": 71088000,
    "question_id": "2802",
    "elapsed_time": 1730,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707366371030,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 216,
    "total_testcases": 216,
    "runtime_percentile": 100,
    "status_memory": "71.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1169382972",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec punishment_number(n :: integer) :: integer\n  def punishment_number(n) do\n    1..n\n    |> Enum.filter(&matches_condition?(&1))\n    |> Enum.map(&(&1 * &1))\n    |> Enum.sum()\n  end\n\n  defp matches_condition?(i) do\n    square_str = Integer.to_string(i * i)\n    partition_sum(square_str, i)\n  end\n\n  defp partition_sum(str, target, sum \\\\ 0)\n\n  defp partition_sum(\"\", target, sum), do: sum == target\n\n  defp partition_sum(_str, target, sum) when sum > target, do: false\n\n  defp partition_sum(str, target, sum) do\n    1..byte_size(str)\n    |> Enum.any?(fn len ->\n      part = String.slice(str, 0, len) |> String.to_integer()\n      partition_sum(String.slice(str, len..-1), target, sum + part)\n    end)\n  end\nend"
}