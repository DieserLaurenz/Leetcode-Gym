{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70496000,
    "question_id": "2802",
    "elapsed_time": 2136,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "182",
    "task_finish_time": 1707366338504,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1169382604",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec punishment_number(n :: integer) :: integer\n  def punishment_number(n) do\n    Enum.reduce(1..n, 0, fn i, acc ->\n      square = i * i\n      if can_be_partitioned?(Integer.to_string(square), i), do: acc + square, else: acc\n    end)\n  end\n\n  defp can_be_partitioned?(str, target), do: can_be_partitioned?(str, target, 0)\n\n  defp can_be_partitioned?(\"\", 0, sum), do: sum == 0\n  defp can_be_partitioned?(\"\", _target, _sum), do: false\n  defp can_be_partitioned?(str, target, sum) do\n    Enum.any?(1..String.length(str), fn len ->\n      part = String.slice(str, 0, len) |> String.to_integer()\n      can_be_partitioned?(String.slice(str, len..-1), target, sum + part)\n    end) and sum == target\n  end\nend"
}