{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211428000,
    "question_id": "2802",
    "elapsed_time": 1665,
    "compare_result": "001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "243",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "182",
    "task_finish_time": 1707365827460,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1169376964",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @return {Integer}\ndef punishment_number(n)\n    sum = 0\n    (1..n).each do |i|\n        square = i * i\n        1.upto(square.to_s.length) do |len|\n            0.upto(len - 1) do |start|\n                parts = []\n                (start...square.to_s.length).step(len) do |index|\n                    parts << square.to_s[index, len].to_i\n                    break if parts.sum > i # Early termination if sum exceeds i\n                end\n                if parts.sum == i\n                    sum += square\n                    break # Avoid double counting for the same i\n                end\n            end\n        end\n    end\n    sum\nend"
}