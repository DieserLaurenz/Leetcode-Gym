{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55920000,
    "question_id": "2802",
    "elapsed_time": 1144,
    "compare_result": "101111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2847",
    "std_output": "",
    "last_testcase": "37",
    "expected_output": "1478",
    "task_finish_time": 1707365894536,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 37,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1169377666",
    "input_formatted": "37",
    "input": "37",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def punishmentNumber(n: Int): Int = {\n        def canPartition(i: Int): Boolean = {\n            val sqrStr = (i * i).toString\n            def helper(s: String, target: Int): Boolean = {\n                if (target == 0) return true\n                if (s.isEmpty) return false\n                (1 to s.length).exists(j => s.substring(0, j).toInt <= target && helper(s.substring(j), target - s.substring(0, j).toInt))\n            }\n            helper(sqrStr, i)\n        }\n\n        (1 to n).filter(canPartition).map(i => i * i).sum\n    }\n}"
}