{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "833 ms",
    "memory": 54936000,
    "question_id": "2802",
    "elapsed_time": 1263,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707365915794,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 216,
    "total_testcases": 216,
    "runtime_percentile": 100,
    "status_memory": "54.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1169377906",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def punishmentNumber(n: Int): Int = {\n        def isValid(i: Int): Boolean = {\n            val square = i * i\n            val strSquare = square.toString\n            def partition(index: Int, sum: Int): Boolean = {\n                if (index == strSquare.length) return sum == i\n                (1 to strSquare.length - index).exists(j => sum + strSquare.substring(index, index + j).toInt <= i && partition(index + j, sum + strSquare.substring(index, index + j).toInt))\n            }\n            partition(0, 0)\n        }\n\n        (1 to n).filter(isValid).map(i => i * i).sum\n    }\n}"
}