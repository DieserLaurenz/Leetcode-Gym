{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9432000,
    "question_id": "2802",
    "elapsed_time": 156,
    "compare_result": "001111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "82",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "182",
    "task_finish_time": 1707355594187,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1169286260",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int punishmentNumber(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; ++i) {\n            if (check(i)) {\n                sum += i * i;\n            }\n        }\n        return sum;\n    }\n\nprivate:\n    bool check(int num) {\n        string square = to_string(num * num);\n        for (int i = 1; i <= square.size(); ++i) {\n            if (dfs(square, 0, i, num)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    bool dfs(const string& square, int start, int len, int num) {\n        if (start == square.size() && num == 0) return true;\n        if (start + len > square.size()) return false;\n\n        string substr = square.substr(start, len);\n        int part = stoi(substr);\n        if ((start + len < square.size() && square[start] == '0') || part > num) return false;\n\n        return dfs(square, start + len, len, num - part) ||\n               dfs(square, start + len, len + 1, num - part);\n    }\n};"
}