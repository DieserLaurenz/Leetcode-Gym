{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "157 ms",
    "memory": 36408000,
    "question_id": "2802",
    "elapsed_time": 204,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707365501299,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 216,
    "total_testcases": 216,
    "runtime_percentile": 100,
    "status_memory": "36.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Kotlin",
    "submission_id": "1169373469",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun punishmentNumber(n: Int): Int {\n        fun canBePartitioned(i: Int, squared: String, start: Int, sum: Int): Boolean {\n            if (start == squared.length) return sum == i\n            var num = 0\n            for (j in start until squared.length) {\n                num = num * 10 + (squared[j] - '0')\n                if (canBePartitioned(i, squared, j + 1, sum + num)) return true\n            }\n            return false\n        }\n\n        var total = 0\n        for (i in 1..n) {\n            val squared = (i * i).toString()\n            if (canBePartitioned(i, squared, 0, 0)) {\n                total += i * i\n            }\n        }\n        return total\n    }\n}"
}