{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19872000,
    "question_id": "2802",
    "elapsed_time": 149,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "181",
    "std_output": "",
    "last_testcase": "10",
    "expected_output": "182",
    "task_finish_time": 1707365336359,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1169371807",
    "input_formatted": "10",
    "input": "10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function punishmentNumber($n) {\n        function canBePartitioned($num, $i) {\n            $str = (string)($num);\n            $length = strlen($str);\n            for ($mask = 1; $mask < (1 << ($length - 1)); $mask++) {\n                $sum = 0;\n                $current = 0;\n                for ($j = 0; $j < $length; $j++) {\n                    $current = $current * 10 + (int)$str[$j];\n                    if ($mask & (1 << $j)) {\n                        $sum += $current;\n                        $current = 0;\n                    }\n                }\n                $sum += $current; // Add the last number\n                if ($sum == $i) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        $sum = 0;\n        for ($i = 1; $i <= $n; $i++) {\n            $square = $i * $i;\n            if (canBePartitioned($square, $i)) {\n                $sum += $square;\n            }\n        }\n        return $sum;\n    }\n}"
}