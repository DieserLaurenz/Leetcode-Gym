{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15204000,
    "question_id": "2802",
    "elapsed_time": 58,
    "compare_result": "101111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "182",
    "std_output": "",
    "last_testcase": "37",
    "expected_output": "1478",
    "task_finish_time": 1707365392893,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 216,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1169372408",
    "input_formatted": "37",
    "input": "37",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func punishmentNumber(_ n: Int) -> Int {\n        func canPartition(_ num: Int, _ i: Int) -> Bool {\n            let s = String(num)\n            var sum = 0\n            for length in 1...s.count {\n                var index = s.startIndex\n                while index < s.endIndex {\n                    let endIndex = s.index(index, offsetBy: length, limitedBy: s.endIndex) ?? s.endIndex\n                    let substring = s[index..<endIndex]\n                    if let val = Int(substring) {\n                        sum += val\n                        if sum > i { return false }\n                        index = endIndex\n                    } else {\n                        break\n                    }\n                }\n                if sum == i { return true }\n                sum = 0 // Reset sum for the next length\n            }\n            return false\n        }\n\n        var result = 0\n        for i in 1...n {\n            let square = i * i\n            if canPartition(square, i) {\n                result += square\n            }\n        }\n        return result\n    }\n}"
}