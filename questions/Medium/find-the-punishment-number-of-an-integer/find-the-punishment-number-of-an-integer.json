{
    "acRate": 61.29099139569439,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2698",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Punishment Number of an Integer",
    "titleSlug": "find-the-punishment-number-of-an-integer",
    "topicTags": [
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Backtracking",
            "id": "VG9waWNUYWdOb2RlOjE0",
            "slug": "backtracking"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int punishmentNumber(int n) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int punishmentNumber(int n) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def punishmentNumber(self, n):         \"\"\"         :type n: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def punishmentNumber(self, n: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int punishmentNumber(int n){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int PunishmentNumber(int n) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} n  * @return {number}  */ var punishmentNumber = function(n) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function punishmentNumber(n: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $n      * @return Integer      */     function punishmentNumber($n) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func punishmentNumber(_ n: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun punishmentNumber(n: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int punishmentNumber(int n) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func punishmentNumber(n int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n # @return {Integer} def punishment_number(n)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def punishmentNumber(n: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn punishment_number(n: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (punishment-number n)   (-> exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec punishment_number(N :: integer()) -> integer(). punishment_number(N) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec punishment_number(n :: integer) :: integer   def punishment_number(n) do    end end"
        }
    ],
    "content": "Given a positive integer n, return the punishment number of n. The punishment number of n is defined as the sum of the squares of all integers i such that:  1 <= i <= n The decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.   Example 1:  Input: n = 10 Output: 182 Explanation: There are exactly 3 integers i that satisfy the conditions in the statement: - 1 since 1 * 1 = 1 - 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. - 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. Hence, the punishment number of 10 is 1 + 81 + 100 = 182  Example 2:  Input: n = 37 Output: 1478 Explanation: There are exactly 4 integers i that satisfy the conditions in the statement: - 1 since 1 * 1 = 1.  - 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.  - 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.  - 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6. Hence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478   Constraints:  1 <= n <= 1000  "
}