{
    "acRate": 44.01642202498832,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2616",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimize the Maximum Difference of Pairs",
    "titleSlug": "minimize-the-maximum-difference-of-pairs",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Binary Search",
            "id": "VG9waWNUYWdOb2RlOjEx",
            "slug": "binary-search"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minimizeMax(vector<int>& nums, int p) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minimizeMax(int[] nums, int p) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimizeMax(self, nums, p):         \"\"\"         :type nums: List[int]         :type p: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimizeMax(self, nums: List[int], p: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minimizeMax(int* nums, int numsSize, int p){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinimizeMax(int[] nums, int p) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} p  * @return {number}  */ var minimizeMax = function(nums, p) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimizeMax(nums: number[], p: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $p      * @return Integer      */     function minimizeMax($nums, $p) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimizeMax(_ nums: [Int], _ p: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimizeMax(nums: IntArray, p: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minimizeMax(List<int> nums, int p) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimizeMax(nums []int, p int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} p # @return {Integer} def minimize_max(nums, p)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimizeMax(nums: Array[Int], p: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimize_max(nums: Vec<i32>, p: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimize-max nums p)   (-> (listof exact-integer?) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimize_max(Nums :: [integer()], P :: integer()) -> integer(). minimize_max(Nums, P) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimize_max(nums :: [integer], p :: integer) :: integer   def minimize_max(nums, p) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums and an integer p. Find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. Also, ensure no index appears more than once amongst the p pairs. Note that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x. Return the minimum maximum difference among all p pairs. We define the maximum of an empty set to be zero.  Example 1:  Input: nums = [10,1,2,7,1,3], p = 2 Output: 1 Explanation: The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5.  The maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1.  Example 2:  Input: nums = [4,2,1,2], p = 1 Output: 0 Explanation: Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain.   Constraints:  1 <= nums.length <= 105 0 <= nums[i] <= 109 0 <= p <= (nums.length)/2  "
}