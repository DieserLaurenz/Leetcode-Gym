{
    "acRate": 28.946566952049004,
    "difficulty": "Medium",
    "freqBar": null,
    "questionId": "2837",
    "frontendQuestionId": "2749",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Operations to Make the Integer Zero",
    "titleSlug": "minimum-operations-to-make-the-integer-zero",
    "topicTags": [
        {
            "name": "Bit Manipulation",
            "id": "VG9waWNUYWdOb2RlOjE5",
            "slug": "bit-manipulation"
        },
        {
            "name": "Brainteaser",
            "id": "VG9waWNUYWdOb2RlOjMy",
            "slug": "brainteaser"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    int makeTheIntegerZero(int num1, int num2) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int makeTheIntegerZero(int num1, int num2) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def makeTheIntegerZero(self, num1, num2):\n        \"\"\"\n        :type num1: int\n        :type num2: int\n        :rtype: int\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def makeTheIntegerZero(self, num1: int, num2: int) -> int:\n        "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int makeTheIntegerZero(int num1, int num2){\n\n}"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int MakeTheIntegerZero(int num1, int num2) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number} num1\n * @param {number} num2\n * @return {number}\n */\nvar makeTheIntegerZero = function(num1, num2) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function makeTheIntegerZero(num1: number, num2: number): number {\n\n};"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @return Integer\n     */\n    function makeTheIntegerZero($num1, $num2) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func makeTheIntegerZero(_ num1: Int, _ num2: Int) -> Int {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun makeTheIntegerZero(num1: Int, num2: Int): Int {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  int makeTheIntegerZero(int num1, int num2) {\n\n  }\n}"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func makeTheIntegerZero(num1 int, num2 int) int {\n    \n}"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} num1\n# @param {Integer} num2\n# @return {Integer}\ndef make_the_integer_zero(num1, num2)\n    \nend"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def makeTheIntegerZero(num1: Int, num2: Int): Int = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn make_the_integer_zero(num1: i32, num2: i32) -> i32 {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (make-the-integer-zero num1 num2)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec make_the_integer_zero(Num1 :: integer(), Num2 :: integer()) -> integer().\nmake_the_integer_zero(Num1, Num2) ->\n  ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec make_the_integer_zero(num1 :: integer, num2 :: integer) :: integer\n  def make_the_integer_zero(num1, num2) do\n\n  end\nend"
        }
    ],
    "content": "You are given two integers num1 and num2.\nIn one operation, you can choose integer i in the range [0, 60] and subtract 2i + num2 from num1.\nReturn the integer denoting the minimum number of operations needed to make num1 equal to 0.\nIf it is impossible to make num1 equal to 0, return -1.\n\nExample 1:\n\nInput: num1 = 3, num2 = -2\nOutput: 3\nExplanation: We can make 3 equal to 0 with the following operations:\n- We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1.\n- We choose i = 2 and substract 22+ (-2) from 1, 1 - (4 + (-2)) = -1.\n- We choose i = 0 and substract 20+ (-2) from -1, (-1) - (1 + (-2)) = 0.\nIt can be proven, that 3 is the minimum number of operations that we need to perform.\n\nExample 2:\n\nInput: num1 = 5, num2 = 7\nOutput: -1\nExplanation: It can be proven, that it is impossible to make 5 equal to 0 with the given operation.\n\n\nConstraints:\n\n1 <= num1 <= 109\n-109<= num2 <= 109\n\n"
}