{
    "acRate": 28.900908255944486,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2749",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Operations to Make the Integer Zero",
    "titleSlug": "minimum-operations-to-make-the-integer-zero",
    "topicTags": [
        {
            "name": "Bit Manipulation",
            "id": "VG9waWNUYWdOb2RlOjE5",
            "slug": "bit-manipulation"
        },
        {
            "name": "Brainteaser",
            "id": "VG9waWNUYWdOb2RlOjMy",
            "slug": "brainteaser"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int makeTheIntegerZero(int num1, int num2) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int makeTheIntegerZero(int num1, int num2) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def makeTheIntegerZero(self, num1, num2):         \"\"\"         :type num1: int         :type num2: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def makeTheIntegerZero(self, num1: int, num2: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int makeTheIntegerZero(int num1, int num2){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MakeTheIntegerZero(int num1, int num2) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} num1  * @param {number} num2  * @return {number}  */ var makeTheIntegerZero = function(num1, num2) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function makeTheIntegerZero(num1: number, num2: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $num1      * @param Integer $num2      * @return Integer      */     function makeTheIntegerZero($num1, $num2) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func makeTheIntegerZero(_ num1: Int, _ num2: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun makeTheIntegerZero(num1: Int, num2: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int makeTheIntegerZero(int num1, int num2) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func makeTheIntegerZero(num1 int, num2 int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} num1 # @param {Integer} num2 # @return {Integer} def make_the_integer_zero(num1, num2)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def makeTheIntegerZero(num1: Int, num2: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn make_the_integer_zero(num1: i32, num2: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (make-the-integer-zero num1 num2)   (-> exact-integer? exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec make_the_integer_zero(Num1 :: integer(), Num2 :: integer()) -> integer(). make_the_integer_zero(Num1, Num2) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec make_the_integer_zero(num1 :: integer, num2 :: integer) :: integer   def make_the_integer_zero(num1, num2) do    end end"
        }
    ],
    "content": "You are given two integers num1 and num2. In one operation, you can choose integer i in the range [0, 60] and subtract 2i + num2 from num1. Return the integer denoting the minimum number of operations needed to make num1 equal to 0. If it is impossible to make num1 equal to 0, return -1.  Example 1:  Input: num1 = 3, num2 = -2 Output: 3 Explanation: We can make 3 equal to 0 with the following operations: - We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1. - We choose i = 2 and substract 22+ (-2) from 1, 1 - (4 + (-2)) = -1. - We choose i = 0 and substract 20+ (-2) from -1, (-1) - (1 + (-2)) = 0. It can be proven, that 3 is the minimum number of operations that we need to perform.  Example 2:  Input: num1 = 5, num2 = 7 Output: -1 Explanation: It can be proven, that it is impossible to make 5 equal to 0 with the given operation.   Constraints:  1 <= num1 <= 109 -109<= num2 <= 109  "
}