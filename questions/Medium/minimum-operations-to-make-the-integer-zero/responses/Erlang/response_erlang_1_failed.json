{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58460000,
    "question_id": "2837",
    "elapsed_time": 5274,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707928195242,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175268023",
    "input_formatted": "3, -2",
    "input": "3\n-2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec make_the_integer_zero(Num1 :: integer(), Num2 :: integer()) -> integer().\nmake_the_integer_zero(Num1, Num2) ->\n    if \n        Num2 rem 2 == 0 -> -1;\n        true ->\n            Num = abs(Num1),\n            Total = lists:foldl(fun(I, Acc) -> Acc + trunc(math:pow(2, I)) end, 0, lists:seq(0, 60)),\n            if \n                Num > Total -> -1;\n                true -> calculate_operations(Num, Num2, 0, 60)\n            end\n    end.\n\ncalculate_operations(0, _, Ops, _) -> \n    Ops;\ncalculate_operations(_, _, Ops, -1) -> \n    Ops;\ncalculate_operations(Num, Num2, Ops, I) ->\n    Value = trunc(math:pow(2, I)) + Num2,\n    if \n        Num >= Value ->\n            calculate_operations(Num - Value, Num2, Ops + 1, I);\n        true ->\n            calculate_operations(Num, Num2, Ops, I - 1)\n    end."
}