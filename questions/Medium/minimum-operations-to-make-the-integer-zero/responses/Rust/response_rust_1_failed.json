{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2012000,
    "question_id": "2837",
    "elapsed_time": 11,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707927923673,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 187,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175264024",
    "input_formatted": "3, -2",
    "input": "3\n-2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn make_the_integer_zero(num1: i32, num2: i32) -> i32 {\n        let mut num1 = num1;\n        let mut operations = 0;\n\n        while num1 > 0 {\n            let mut i = 0;\n            while i <= 60 {\n                if num1 >= (2_i32.pow(i) + num2).abs() {\n                    break;\n                }\n                i += 1;\n            }\n            if i == 0 && num1 < (2_i32.pow(i) + num2).abs() {\n                return -1;\n            }\n            i = i.max(0);\n            num1 -= 2_i32.pow(i.max(0) as u32) + num2;\n            operations += 1;\n            if operations > 1000 { // Prevent infinite loop\n                return -1;\n            }\n        }\n\n        if num1 < 0 {\n            return -1;\n        }\n\n        operations\n    }\n}"
}