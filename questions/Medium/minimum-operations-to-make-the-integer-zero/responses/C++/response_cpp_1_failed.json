{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7376000,
    "question_id": "2837",
    "elapsed_time": 17,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707917344261,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175133413",
    "input_formatted": "3, -2",
    "input": "3\n-2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int makeTheIntegerZero(int num1, int num2) {\n        if (num2 == 0) return -1; // If num2 is 0, operation has no effect on num1\n        int operations = 0;\n        while (num1 != 0 && operations < 61) {\n            long long i = 60;\n            bool found = false;\n            // Iterate from the largest possible i down to 0 to find a valid operation\n            while (i >= 0 && !found) {\n                long long operation = (1LL << i) + num2;\n                if (num1 - operation >= 0 || num1 - operation == num1) {\n                    num1 -= operation;\n                    operations++;\n                    found = true;\n                } else {\n                    i--;\n                }\n            }\n            if (!found) return -1; // If no valid operation found, return -1\n        }\n        return num1 == 0 ? operations : -1; // Check if num1 has been reduced to 0\n    }\n};"
}