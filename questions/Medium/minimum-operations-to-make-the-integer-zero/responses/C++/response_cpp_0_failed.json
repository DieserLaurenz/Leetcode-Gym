{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7336000,
    "question_id": "2837",
    "elapsed_time": 14,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707917304085,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175132955",
    "input_formatted": "3, -2",
    "input": "3\n-2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int makeTheIntegerZero(int num1, int num2) {\n        if (num2 == 0) return -1; // Impossible if num2 is 0 since we cannot change num1\n        int operations = 0;\n        while (num1 != 0 && operations <= 60) {\n            long long i = 0;\n            // Find the largest 2^i such that 2^i + num2 <= num1\n            while ((1LL << i) + num2 <= num1 && i <= 60) i++;\n            // If we can't find such i, or it exceeds num1, reduce i to make the subtraction possible\n            if (i > 0 && (1LL << i) + num2 > num1) i--;\n            if (i > 60 || (1LL << i) + num2 > num1) return -1; // If i is out of bounds or operation invalid, return -1\n            num1 -= ((1LL << i) + num2); // Perform the operation\n            operations++;\n        }\n        return operations > 60 ? -1 : operations; // If more than 60 operations, return -1, else return the count\n    }\n};"
}