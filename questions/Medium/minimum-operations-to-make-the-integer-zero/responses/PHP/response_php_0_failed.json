{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20020000,
    "question_id": "2837",
    "elapsed_time": 160,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707918175921,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 222,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175142891",
    "input_formatted": "3, -2",
    "input": "3\n-2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $num1\n     * @param Integer $num2\n     * @return Integer\n     */\n    function makeTheIntegerZero($num1, $num2) {\n        $operations = 0;\n        while ($num1 > 0 && $operations <= 60) {\n            $found = false;\n            for ($i = 60; $i >= 0; $i--) {\n                $value = pow(2, $i) + $num2;\n                if ($num1 >= $value) {\n                    $num1 -= $value;\n                    $operations++;\n                    $found = true;\n                    break;\n                }\n            }\n            if (!$found) return -1;\n        }\n        return $num1 == 0 ? $operations : -1;\n    }\n}"
}