{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72512000,
    "question_id": "2837",
    "elapsed_time": 545,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707928299562,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 185,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1175269654",
    "input_formatted": "3, -2",
    "input": "3\n-2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec make_the_integer_zero(num1 :: integer, num2 :: integer) :: integer\n  def make_the_integer_zero(num1, num2) do\n    make_the_integer_zero_helper(num1, num2, 0)\n  end\n\n  defp make_the_integer_zero_helper(0, _, count), do: count\n  defp make_the_integer_zero_helper(_, _, 61), do: -1\n  defp make_the_integer_zero_helper(num1, num2, count) do\n    best = Enum.reduce(0..60, {1.0e9, nil}, fn i, {min_count, _} ->\n      delta = :math.pow(2, i) + num2\n      new_num1 = num1 - delta\n      abs_new_num1 = abs(new_num1)\n      if abs_new_num1 < abs(num1) and abs_new_num1 < min_count, do: {abs_new_num1, i}, else: {min_count, nil}\n    end)\n\n    case best do\n      {_, nil} -> -1\n      {_, i} -> make_the_integer_zero_helper(num1 - (:math.pow(2, i) + num2), num2, count + 1)\n    end\n  end\nend"
}