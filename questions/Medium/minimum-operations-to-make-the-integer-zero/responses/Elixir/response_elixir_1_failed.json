{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 41: ** (FunctionClauseError) no function clause matching in Enumerable.Range.reduce/5",
    "full_runtime_error": "Line 41: ** (FunctionClauseError) no function clause matching in Enumerable.Range.reduce/5\n    The following arguments were given to Enumerable.Range.reduce/5:\n        # 1\n        3\n        # 2\n        60\n        # 3\n        -1\n        # 4\n        #Function<0.33365137/2 in Solution.solve/3>\n        # 5\n        1\n    Attempted function clauses (showing 4 out of 4):\n        defp reduce(+_first+, +_last+, -{:halt, acc}-, +_fun+, +_step+)\n        defp reduce(+first+, +last+, -{:suspend, acc}-, +fun+, +step+)\n        defp reduce(+first+, +last+, -{:cont, acc}-, +fun+, +step+) when +step > 0+ and +first <= last+ when -step < 0- and -first >= last-\n        defp reduce(+_+, +_+, -{:cont, acc}-, +_fun+, +_up+)\n    (elixir 1.15.7) lib/range.ex:515: Enumerable.Range.reduce/5\n    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3\n    solution.ex:41: Driver.consume_test_cases/2\n    solution.ex:27: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 73088000,
    "question_id": "2837",
    "elapsed_time": 463,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707928335734,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1175270197",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec make_the_integer_zero(num1 :: integer, num2 :: integer) :: integer\n  def make_the_integer_zero(num1, num2) do\n    solve(num1, num2, 0)\n  end\n\n  defp solve(0, _, _), do: 0\n  defp solve(_, _, 61), do: -1\n  defp solve(num1, num2, steps) do\n    Enum.reduce_while(0..60, {:cont, -1}, fn i, _acc ->\n      delta = :math.pow(2, i) + num2\n      if num1 - delta == 0 do\n        {:halt, steps + 1}\n      else\n        if abs(num1 - delta) < abs(num1) do\n          solve(num1 - delta, num2, steps + 1)\n        else\n          {:cont, -1}\n        end\n      end\n    end)\n  end\nend"
}