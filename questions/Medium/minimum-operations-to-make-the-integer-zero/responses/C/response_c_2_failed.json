{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5312000,
    "question_id": "2837",
    "elapsed_time": 26,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707917657851,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 195,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175136853",
    "input_formatted": "3, -2",
    "input": "3\n-2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int makeTheIntegerZero(int num1, int num2) {\n    long long target = num1, adder = num2;\n    int operations = 0;\n\n    while (target != 0 && operations < 64) {\n        if (adder == 0) return -1; // If adder is 0, impossible to reach 0\n\n        long long operationValue = 1; // Start with 2^0\n        int i = 0;\n        for (; i <= 60; ++i) {\n            if ((operationValue << i) + adder > target || (operationValue << i) + adder <= 0) break;\n        }\n\n        // Perform the operation with the largest value of i that does not exceed target\n        if (i > 0) {\n            target -= ((operationValue << (i - 1)) + adder);\n            operations++;\n        } else {\n            // If no such i can be found that makes progress, break\n            break;\n        }\n    }\n\n    if (target == 0) return operations;\n    else return -1;\n}"
}