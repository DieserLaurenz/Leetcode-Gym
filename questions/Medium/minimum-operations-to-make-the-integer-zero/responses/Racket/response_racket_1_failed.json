{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101136000,
    "question_id": "2837",
    "elapsed_time": 263,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "3\n-2",
    "expected_output": "3",
    "task_finish_time": 1707928056424,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 196,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175265968",
    "input_formatted": "3, -2",
    "input": "3\n-2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (make-the-integer-zero num1 num2)\n  (-> exact-integer? exact-integer? exact-integer?)\n  (let loop ((num1 num1) (count 0))\n    (if (= num1 0)\n        count\n        (letrec ((helper (lambda (i)\n                           (if (> i 60)\n                               -1\n                               (let ((result (- num1 (+ (expt 2 i) num2))))\n                                 (if (or (= result 0) (< result 0))\n                                     (if (= result 0) (add1 count) -1)\n                                     (helper (add1 i))))))))\n          (helper 0)))))"
}