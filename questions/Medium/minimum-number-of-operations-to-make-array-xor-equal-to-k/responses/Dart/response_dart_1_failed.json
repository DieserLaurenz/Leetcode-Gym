{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 180176000,
    "question_id": "3249",
    "elapsed_time": 765,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707886222213,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 98,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1174788850",
    "input_formatted": "[2,1,3,4], 1",
    "input": "[2,1,3,4]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minOperations(List<int> nums, int k) {\n    int xorSum = nums.fold(0, (previousValue, element) => previousValue ^ element);\n    if (xorSum == k) return 0;\n    int maxBit = 0;\n    for (int num in nums) {\n      int currentMaxBit = num.bitLength;\n      if (currentMaxBit > maxBit) {\n        maxBit = currentMaxBit;\n      }\n    }\n    int kBitLength = k.bitLength;\n    if (maxBit < kBitLength) maxBit = kBitLength;\n\n    List<int> bitCounts = List.filled(maxBit, 0);\n    for (int num in nums) {\n      for (int i = 0; i < maxBit; i++) {\n        if (((num >> i) & 1) == 1) {\n          bitCounts[i]++;\n        }\n      }\n    }\n\n    int operations = 0;\n    for (int i = 0; i < maxBit; i++) {\n      if (((xorSum >> i) & 1) != ((k >> i) & 1)) {\n        operations += min(bitCounts[i], nums.length - bitCounts[i]);\n      }\n    }\n    return operations;\n  }\n\n  int min(int a, int b) => (a < b) ? a : b;\n}"
}