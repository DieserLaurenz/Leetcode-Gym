{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20048000,
    "question_id": "3249",
    "elapsed_time": 486,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707877221136,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 117,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1174692402",
    "input_formatted": "[2,1,3,4], 1",
    "input": "[2,1,3,4]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minOperations(_ nums: [Int], _ k: Int) -> Int {\n        let xorResult = nums.reduce(0, ^) ^ k\n        if xorResult == 0 { return 0 }\n        \n        var bitCounts = Array(repeating: 0, count: 32)\n        for num in nums {\n            for i in 0..<32 where (num >> i) & 1 == 1 {\n                bitCounts[i] += 1\n            }\n        }\n        \n        var operations = 0\n        for i in 0..<32 {\n            if (xorResult >> i) & 1 == 1 {\n                if bitCounts[i] > 0 {\n                    return operations + 1\n                } else {\n                    operations += 1\n                }\n            }\n        }\n        \n        return -1\n    }\n}"
}