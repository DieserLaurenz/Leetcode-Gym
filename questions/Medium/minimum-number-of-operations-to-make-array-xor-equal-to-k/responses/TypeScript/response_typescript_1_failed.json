{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62204000,
    "question_id": "3249",
    "elapsed_time": 187,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707877064784,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 99,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1174691071",
    "input_formatted": "[2,1,3,4], 1",
    "input": "[2,1,3,4]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(nums: number[], k: number): number {\n    let xorAll = nums.reduce((a, b) => a ^ b, 0) ^ k;\n    if (xorAll === 0) return 0;\n\n    let count = Array(31).fill(0);\n    nums.forEach(num => {\n        for (let i = 0; i < 31; ++i) {\n            if ((num >> i) & 1) count[i]++;\n        }\n    });\n\n    let ops = 0;\n    for (let i = 30; i >= 0; --i) {\n        if ((xorAll >> i) & 1) {\n            if (count[i] > 0) {\n                ops += Math.min(count[i], nums.length - count[i]);\n                break;\n            }\n        }\n    }\n\n    if (ops === 0) return -1;\n    return ops;\n}"
}