{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62532000,
    "question_id": "3249",
    "elapsed_time": 197,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707877094240,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 93,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1174691314",
    "input_formatted": "[2,1,3,4], 1",
    "input": "[2,1,3,4]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(nums: number[], k: number): number {\n    let xorSum = nums.reduce((acc, val) => acc ^ val, 0) ^ k;\n    if (xorSum === 0) return 0; // No operation needed if already equal to k\n\n    // Count the frequency of bits set at each position for all numbers\n    let bitFrequency = new Array(32).fill(0);\n    nums.forEach(num => {\n        for (let i = 0; i < 32; i++) {\n            if ((num & (1 << i)) !== 0) bitFrequency[i]++;\n        }\n    });\n\n    let operations = 0;\n    for (let i = 31; i >= 0; i--) {\n        if ((xorSum & (1 << i)) !== 0) {\n            if (bitFrequency[i] > 0) { // If there's at least one bit to flip\n                operations = Math.max(operations, 1);\n                if (bitFrequency[i] < nums.length) return operations; // If not all bits are set, just one operation is enough\n            }\n        }\n    }\n\n    return -1; // If no such operation can lead to the desired result\n}"
}