{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 180100000,
    "question_id": "3249",
    "elapsed_time": 1092,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707886758231,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 66,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174796170",
    "input_formatted": "[2,1,3,4], 1",
    "input": "[2,1,3,4]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    current_xor = Enum.reduce(nums, 0, fn x, acc -> Bitwise.bxor(x, acc) end)\n    if current_xor == k do\n      0\n    else\n      required_xor = Bitwise.bxor(current_xor, k)\n      nums\n      |> Enum.map(fn x -> Bitwise.bxor(x, required_xor) end)\n      |> Enum.filter(fn x -> x != 0 end)\n      |> Enum.count()\n      |> case do\n        0 -> 1\n        count -> count\n      end\n    end\n  end\nend"
}