{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 181992000,
    "question_id": "3249",
    "elapsed_time": 1559,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707886794939,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 112,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174796663",
    "input_formatted": "[2,1,3,4], 1",
    "input": "[2,1,3,4]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], k :: integer) :: integer\n  def min_operations(nums, k) do\n    xor_result = Enum.reduce(nums, 0, fn num, acc -> Bitwise.bxor(acc, num) end)\n    target_xor = Bitwise.bxor(xor_result, k)\n\n    if target_xor == 0 do\n      0\n    else\n      bit_counts = Enum.reduce(nums, %{}, fn num, acc ->\n        Map.update(acc, Bitwise.bxor(num, target_xor), 1, &(&1 + 1))\n      end)\n\n      if Map.has_key?(bit_counts, 0) do\n        1\n      else\n        bit_counts |> Map.values() |> Enum.min()\n      end\n    end\n  end\nend"
}