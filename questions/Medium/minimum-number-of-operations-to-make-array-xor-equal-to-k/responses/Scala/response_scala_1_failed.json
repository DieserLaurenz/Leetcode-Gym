{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 84880000,
    "question_id": "3249",
    "elapsed_time": 1014,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[4]\n7",
    "expected_output": "2",
    "task_finish_time": 1707886435437,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 573,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1174791714",
    "input_formatted": "[4], 7",
    "input": "[4]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minOperations(nums: Array[Int], k: Int): Int = {\n        var xorSum = nums.reduce(_ ^ _)\n        if (xorSum == k) return 0\n        val bitFrequency = new Array[Int](32)\n        for (num <- nums) {\n            for (i <- 0 until 32) {\n                if ((num & (1 << i)) != 0) {\n                    bitFrequency(i) += 1\n                }\n            }\n        }\n        var operations = 0\n        for (i <- 31 to 0 by -1) {\n            if ((xorSum & (1 << i)) != (k & (1 << i))) {\n                if (bitFrequency(i) > 0) {\n                    operations += 1\n                    xorSum ^= (1 << i)\n                } else {\n                    return -1\n                }\n            }\n        }\n        operations\n    }\n}"
}