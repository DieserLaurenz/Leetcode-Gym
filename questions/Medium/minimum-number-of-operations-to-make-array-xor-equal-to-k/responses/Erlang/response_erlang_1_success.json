{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "1018 ms",
    "memory": 176144000,
    "question_id": "3249",
    "elapsed_time": 2815,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707886689392,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 684,
    "total_testcases": 684,
    "runtime_percentile": 100,
    "status_memory": "176.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1174795168",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_operations(Nums, K) ->\n    Xor = lists:foldl(fun(X, Acc) -> X bxor Acc end, 0, Nums),\n    TargetXor = Xor bxor K,\n    CountBits = fun(Num, Acc) -> Acc + length([1 || <<Bit:1>> <= <<Num:64>>, Bit == 1]) end,\n    lists:foldl(CountBits, 0, [TargetXor])."
}