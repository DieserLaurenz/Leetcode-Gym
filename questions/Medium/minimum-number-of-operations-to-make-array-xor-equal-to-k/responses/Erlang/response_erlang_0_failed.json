{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 7: exception error: badarg",
    "full_runtime_error": "Line 7: exception error: badarg\n[{erlang,bit_size,[0],[{error_info,#{module => erl_erts_errors}}]},\n {solution,'-min_operations/2-fun-1-',3,\n              [{file,\"solution.erl\"},{line,7}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,min_operations,2,[{file,\"solution.erl\"},{line,7}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,25}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,11}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,42}]},\n {init,start_em,1,[]}]",
    "status_runtime": "N/A",
    "memory": 64840000,
    "question_id": "3249",
    "elapsed_time": 1504,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707886665267,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174794843",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec min_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_operations(Nums, K) ->\n    Xor = lists:foldl(fun(X, Acc) -> X bxor Acc end, 0, Nums),\n    TargetXor = Xor bxor K,\n    Bin = integer_to_binary(TargetXor, 2),\n    Length = byte_size(Bin),\n    lists:foldl(fun(X, Acc) -> Acc + bit_size(X band TargetXor) end, 0, Nums) div Length."
}