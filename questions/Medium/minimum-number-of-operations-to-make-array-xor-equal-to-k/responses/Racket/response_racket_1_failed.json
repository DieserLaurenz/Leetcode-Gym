{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 133644000,
    "question_id": "3249",
    "elapsed_time": 686,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000001000100010000000000010000000011000000000000000000000001000000000000000001000001010000000000000000001000000000000000000000000000100010000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000010000100000001000010000100000000000000000000000000000000001000110100000000000000000000000100000001001000000000000000000001000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707886588999,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 29,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1174793726",
    "input_formatted": "[2,1,3,4], 1",
    "input": "[2,1,3,4]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let* ([xor-all (foldl bitwise-xor 0 nums)]\n         [target-xor (bitwise-xor xor-all k)]\n         [bit-counts (make-vector 32 0)])\n    (for-each (lambda (num)\n                (for ([i (in-range 32)])\n                  (when (bitwise-bit-set? num i)\n                    (vector-set! bit-counts i (+ 1 (vector-ref bit-counts i))))))\n              nums)\n    (let ([ops (foldl (lambda (bit-count acc)\n                        (if (> bit-count 0)\n                            (+ acc (if (bitwise-bit-set? target-xor (sub1 (vector-length bit-counts)))\n                                       (if (= bit-count (length nums)) 0 1)\n                                       (min bit-count (- (length nums) bit-count))))\n                            acc))\n                      0\n                      (vector->list bit-counts))])\n      (if (= ops 0) (if (= xor-all k) 0 -1) ops))))"
}