{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 100080000,
    "question_id": "3249",
    "elapsed_time": 263,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,4]\n1",
    "expected_output": "2",
    "task_finish_time": 1707886619056,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 99,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1174794203",
    "input_formatted": "[2,1,3,4], 1",
    "input": "[2,1,3,4]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let* ([xor-all (apply bitwise-xor nums)]\n         [desired-xor (bitwise-xor xor-all k)]\n         [max-bit (integer-length (apply max (cons k nums)))]\n         [flip-counts (make-vector max-bit 0)])\n    (for-each (lambda (num)\n                (let* ([diff (bitwise-xor num k)]\n                       [diff-bits (for/list ([i (in-range max-bit)])\n                                    (bitwise-bit-set? diff i))])\n                  (for ([i (in-range max-bit)])\n                    (when (list-ref diff-bits i)\n                      (vector-set! flip-counts i (+ 1 (vector-ref flip-counts i)))))))\n              nums)\n    (let* ([flips-required (map (lambda (i)\n                                  (if (bitwise-bit-set? desired-xor i)\n                                      (vector-ref flip-counts i)\n                                      (- (length nums) (vector-ref flip-counts i))))\n                                (build-list max-bit values))]\n           [min-flips (apply min flips-required)])\n      (if (zero? desired-xor) 0 min-flips))))"
}