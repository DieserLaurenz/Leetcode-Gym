{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4848000,
    "question_id": "3174",
    "elapsed_time": 20,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"10\"",
    "expected_output": "1",
    "task_finish_time": 1707825861914,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 111,
    "total_testcases": 577,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1174112450",
    "input_formatted": "\"10\"",
    "input": "\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minChanges(s string) int {\n    count0, count1 := 0, 0 // Count for changes to make all characters at even indices 0 or 1\n    for i := 0; i < len(s); i += 2 {\n        if s[i] == '0' {\n            count1++\n        } else {\n            count0++\n        }\n    }\n\n    // Since the string length is even, the other half must be the opposite character\n    // No need to iterate over the string again, use total length / 2 for the other half\n    total := len(s) / 2\n    return min(count0, count1) + min(total-count0, total-count1)\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}