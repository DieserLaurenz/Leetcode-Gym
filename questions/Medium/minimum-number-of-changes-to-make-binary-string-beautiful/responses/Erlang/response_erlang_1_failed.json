{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70848000,
    "question_id": "3174",
    "elapsed_time": 5556,
    "compare_result": "0011010000000001000000001000001000000100010000110000000000101001001000011000000000100000110011000001000001000000011101000100010100100010100000001000000001000101010000100001010001001010001100100100001000000011000000000010000001000010111010000011000000001110011000001000100110000001000000110011010010101001010010000110000100010001000000000000100000000110000001000000100010100100000100000001000010011010000100000011001111110110000001000100100000110010101001100010000000110001000100000001001000000001100100000000000000000000000000000000000000000001001000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1001\"",
    "expected_output": "2",
    "task_finish_time": 1707834760798,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 577,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174216353",
    "input_formatted": "\"1001\"",
    "input": "\"1001\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_changes(S :: unicode:unicode_binary()) -> integer().\nmin_changes(S) ->\n    B = binary:bin_to_list(S),\n    Changes = fun\n        (Idx, Acc) when Idx rem 2 == 0 ->\n            case lists:nth(Idx, B) =:= lists:nth(Idx + 1, B) of\n                true -> Acc;\n                false -> Acc + 1\n            end;\n        (_, Acc) ->\n            Acc\n    end,\n    lists:foldl(Changes, 0, lists:seq(1, length(B) - 1))."
}