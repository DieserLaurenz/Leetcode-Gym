{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 94804000,
    "question_id": "3174",
    "elapsed_time": 1458,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1001\"",
    "expected_output": "2",
    "task_finish_time": 1707834717998,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 577,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174215852",
    "input_formatted": "\"1001\"",
    "input": "\"1001\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_changes(S :: unicode:unicode_binary()) -> integer().\nmin_changes(S) ->\n    B = binary:bin_to_list(S),\n    Changes = fun(C, {Count0, Count1}) ->\n        case C of\n            $0 -> {Count0 + 1, Count1};\n            $1 -> {Count0, Count1 + 1}\n        end\n    end,\n    {Zeros, Ones} = lists:foldl(Changes, {0, 0}, B),\n    Length = length(B),\n    MinChanges = min(Length div 2 - Zeros, Length div 2 - Ones),\n    abs(MinChanges)."
}