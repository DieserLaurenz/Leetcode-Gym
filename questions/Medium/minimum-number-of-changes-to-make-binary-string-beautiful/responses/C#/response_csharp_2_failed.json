{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45036000,
    "question_id": "3174",
    "elapsed_time": 101,
    "compare_result": "0000000000001001000000101000000000100000000100101000001000100000001000100010100010001100000000000000010000000000000000000000000000000000010010110000000010001000000000000000100001001100001101000000000100000001000011001000010000110000010010001011010000010010011000010000100010110010001000000010000001001000000010000100000010110000001101000100010000000000001000100000000000000000000000111100000110001000011000110001100000100100001001000000001000010000010010000000000010100010000000000100011000000000100100000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1001\"",
    "expected_output": "2",
    "task_finish_time": 1707825019405,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 100,
    "total_testcases": 577,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1174103866",
    "input_formatted": "\"1001\"",
    "input": "\"1001\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinChanges(string s) {\n        int changes = 0;\n        for (int i = 0; i < s.Length - 1; i += 2) {\n            // Check if two consecutive characters are the same\n            if (s[i] == s[i + 1]) {\n                // Increment the number of changes needed\n                changes++;\n                // Skip the next character as we consider it as part of a beautiful substring\n                i++;\n            }\n        }\n        return changes;\n    }\n}"
}