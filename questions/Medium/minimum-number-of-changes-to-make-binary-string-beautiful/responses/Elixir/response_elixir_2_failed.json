{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 114368000,
    "question_id": "3174",
    "elapsed_time": 818,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"1001\"",
    "expected_output": "2",
    "task_finish_time": 1709043772632,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 161,
    "total_testcases": 577,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1187766112",
    "input_formatted": "\"1001\"",
    "input": "\"1001\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_changes(s :: String.t) :: integer\n  def min_changes(s) do\n    half = div(String.length(s), 2)\n    {even_zeros, odd_zeros} = Enum.reduce(String.graphemes(s), {0, 0}, fn\n      \"0\", {even, odd} = acc when rem(elem(acc, 1) + elem(acc, 0), 2) == 0 -> {even + 1, odd}\n      \"0\", {even, odd} -> {even, odd + 1}\n      _, acc -> acc\n    end)\n    min(half - even_zeros, half - odd_zeros)\n  end\nend"
}