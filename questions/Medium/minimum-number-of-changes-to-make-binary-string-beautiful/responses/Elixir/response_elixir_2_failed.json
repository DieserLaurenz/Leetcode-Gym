{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 4: ** (Protocol.UndefinedError) protocol Enumerable not implemented for \"1001\" of type BitString",
    "full_runtime_error": "Line 4: ** (Protocol.UndefinedError) protocol Enumerable not implemented for \"1001\" of type BitString\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3\n    (elixir 1.15.7) lib/enum.ex:4387: Enum.map_reduce/3\n    (elixir 1.15.7) lib/enum.ex:3841: Enum.with_index/2\n    solution.ex:4: Solution.min_changes/1\n    solution.ex:30: Driver.consume_test_cases/2\n    solution.ex:18: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 74508000,
    "question_id": "3174",
    "elapsed_time": 424,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1001\"",
    "expected_output": "2",
    "task_finish_time": 1707834920729,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 577,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174218469",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_changes(s :: String.t) :: integer\n  def min_changes(s) do\n    Enum.reduce(Enum.with_index(s), {0, 0}, fn {char, idx}, {zero_changes, one_changes} ->\n      if rem(idx, 2) == 0 do\n        {zero_changes + if(char == '1', do: 1, else: 0), one_changes + if(char == '0', do: 1, else: 0)}\n      else\n        {zero_changes + if(char == '0', do: 1, else: 0), one_changes + if(char == '1', do: 1, else: 0)}\n      end\n    end)\n    |> Tuple.to_list()\n    |> Enum.min()\n  end\nend"
}