{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 123992000,
    "question_id": "3174",
    "elapsed_time": 1324,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1001\"",
    "expected_output": "2",
    "task_finish_time": 1709043743218,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 259,
    "total_testcases": 577,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1187765704",
    "input_formatted": "\"1001\"",
    "input": "\"1001\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_changes(s :: String.t) :: integer\n  def min_changes(s) do\n    Enum.reduce(String.graphemes(s), {0, 0}, fn\n      \"0\", {zeros, ones} when rem(zeros + ones, 2) == 0 -> {zeros + 1, ones}\n      \"1\", {zeros, ones} when rem(zeros + ones, 2) == 0 -> {zeros, ones + 1}\n      \"0\", {zeros, ones} -> {zeros, ones + 1}\n      \"1\", {zeros, ones} -> {zeros + 1, ones}\n    end)\n    |> (fn {zeros, ones} -> div(String.length(s), 2) - min(zeros, ones) end).()\n  end\nend"
}