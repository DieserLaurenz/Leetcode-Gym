{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 22: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 22: ** (ArgumentError) errors were found at the given arguments:\n  * 1st argument: not a list\n    :erlang.length(\"1001\")\n    solution.ex:22: anonymous fn/2 in Solution.min_changes/1\n    solution.ex:40: Driver.consume_test_cases/2\n    solution.ex:28: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 74036000,
    "question_id": "3174",
    "elapsed_time": 547,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1001\"",
    "expected_output": "2",
    "task_finish_time": 1709043717001,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 577,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1187765308",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_changes(s :: String.t) :: integer\n  def min_changes(s) do\n    s\n    |> String.graphemes()\n    |> Enum.with_index()\n    |> Enum.reduce({0, 0}, fn {char, index}, {zeros, ones} ->\n      if rem(index, 2) == 0 do\n        if char == \"0\" do\n          {zeros + 1, ones}\n        else\n          {zeros, ones + 1}\n        end\n      else\n        if char == \"0\" do\n          {zeros, ones + 1}\n        else\n          {zeros + 1, ones}\n        end\n      end\n    end)\n    |> (fn {zeros, ones} -> div(length(s), 2) - min(zeros, ones) end).()\n  end\nend"
}