{
    "acRate": 55.956354300385115,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2606",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Substring With Maximum Cost",
    "titleSlug": "find-the-substring-with-maximum-cost",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int maximumCostSubstring(string s, string chars, vector<int>& vals) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int maximumCostSubstring(String s, String chars, int[] vals) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def maximumCostSubstring(self, s, chars, vals):         \"\"\"         :type s: str         :type chars: str         :type vals: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int maximumCostSubstring(char* s, char* chars, int* vals, int valsSize) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MaximumCostSubstring(string s, string chars, int[] vals) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @param {string} chars  * @param {number[]} vals  * @return {number}  */ var maximumCostSubstring = function(s, chars, vals) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maximumCostSubstring(s: string, chars: string, vals: number[]): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @param String $chars      * @param Integer[] $vals      * @return Integer      */     function maximumCostSubstring($s, $chars, $vals) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func maximumCostSubstring(_ s: String, _ chars: String, _ vals: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun maximumCostSubstring(s: String, chars: String, vals: IntArray): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int maximumCostSubstring(String s, String chars, List<int> vals) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maximumCostSubstring(s string, chars string, vals []int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @param {String} chars # @param {Integer[]} vals # @return {Integer} def maximum_cost_substring(s, chars, vals)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def maximumCostSubstring(s: String, chars: String, vals: Array[Int]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn maximum_cost_substring(s: String, chars: String, vals: Vec<i32>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (maximum-cost-substring s chars vals)   (-> string? string? (listof exact-integer?) exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec maximum_cost_substring(S :: unicode:unicode_binary(), Chars :: unicode:unicode_binary(), Vals :: [integer()]) -> integer(). maximum_cost_substring(S, Chars, Vals) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec maximum_cost_substring(s :: String.t, chars :: String.t, vals :: [integer]) :: integer   def maximum_cost_substring(s, chars, vals) do        end end"
        }
    ],
    "content": "You are given a string s, a string chars of distinct characters and an integer array vals of the same length as chars. The cost of the substring is the sum of the values of each character in the substring. The cost of an empty string is considered 0. The value of the character is defined in the following way:  If the character is not in the string chars, then its value is its corresponding position (1-indexed) in the alphabet.    For example, the value of 'a' is 1, the value of 'b' is 2, and so on. The value of 'z' is 26.   Otherwise, assuming i is the index where the character occurs in the string chars, then its value is vals[i].  Return the maximum cost among all substrings of the string s.  Example 1:  Input: s = \"adaa\", chars = \"d\", vals = [-1000] Output: 2 Explanation: The value of the characters \"a\" and \"d\" is 1 and -1000 respectively. The substring with the maximum cost is \"aa\" and its cost is 1 + 1 = 2. It can be proven that 2 is the maximum cost.  Example 2:  Input: s = \"abc\", chars = \"abc\", vals = [-1,-1,-1] Output: 0 Explanation: The value of the characters \"a\", \"b\" and \"c\" is -1, -1, and -1 respectively. The substring with the maximum cost is the empty substring \"\" and its cost is 0. It can be proven that 0 is the maximum cost.   Constraints:  1 <= s.length <= 105 s consist of lowercase English letters. 1 <= chars.length <= 26 chars consist of distinct lowercase English letters. vals.length == chars.length -1000 <= vals[i] <= 1000  "
}