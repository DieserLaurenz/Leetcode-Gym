{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 84720000,
    "question_id": "3170",
    "elapsed_time": 10091,
    "compare_result
    "code_output": "[-1,-1]",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1707263813990,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 243,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1168278635",
    "input_formatted": "[5,1,4,1], 2, 4",
    "input": "[5,1,4,1]\n2\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findIndices(nums: Array[Int], indexDifference: Int, valueDifference: Int): Array[Int] = {\n        val n = nums.length\n        val sortedIndices = nums.indices.sortBy(nums)\n        for (i <- 0 until n) {\n            var j = i + 1\n            while (j < n && sortedIndices(j) - sortedIndices(i) < indexDifference) j += 1\n            if (j < n && Math.abs(nums(sortedIndices(i)) - nums(sortedIndices(j))) >= valueDifference) {\n                return Array(sortedIndices(i), sortedIndices(j))\n            }\n        }\n        Array(-1, -1)\n    }\n}"
}