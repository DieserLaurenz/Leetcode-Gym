{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (FunctionClauseError) no function clause matching in Enumerable.List.reduce/3",
    "full_runtime_error": "Line 5: ** (FunctionClauseError) no function clause matching in Enumerable.List.reduce/3\n    The following arguments were given to Enumerable.List.reduce/3:\n        # 1\n        [{1, 1}, {4, 2}, {1, 3}]\n        # 2\n        {[0, 3]}\n        # 3\n        #Function<0.112424465/2 in Solution.find_indices/3>\n    Attempted function clauses (showing 4 out of 4):\n        def reduce(+_list+, -{:halt, acc}-, +_fun+)\n        def reduce(+list+, -{:suspend, acc}-, +fun+)\n        def reduce(-[]-, -{:cont, acc}-, +_fun+)\n        def reduce(+[head | tail]+, -{:cont, acc}-, +fun+)\n    (elixir 1.15.7) lib/enum.ex:4827: Enumerable.List.reduce/3\n    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3\n    solution.ex:5: Solution.find_indices/3\n    solution.ex:46: Driver.consume_test_cases/2\n    solution.ex:30: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 76392000,
    "question_id": "3170",
    "elapsed_time": 457,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1707264309107,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168282292",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_indices(nums :: [integer], index_difference :: integer, value_difference :: integer) :: [integer]\n  def find_indices(nums, index_difference, value_difference) do\n    Enum.with_index(nums)\n    |> Enum.reduce_while([], fn {num, idx}, acc ->\n      case acc do\n        [] ->\n          Enum.with_index(nums)\n          |> Enum.find_value([], fn {other_num, other_idx} ->\n            if idx != other_idx and\n               abs(idx - other_idx) >= index_difference and\n               abs(num - other_num) >= value_difference do\n              {[idx, other_idx]}\n            else\n              nil\n            end\n          end)\n        acc -> {:halt, acc}\n      end\n    end)\n    |> case do\n      [] -> [-1, -1]\n      acc -> acc\n    end\n  end\nend"
}