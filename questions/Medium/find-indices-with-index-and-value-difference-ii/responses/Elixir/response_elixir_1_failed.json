{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 33: ** (BadFunctionError) expected a function, got: [-1, -1]",
    "full_runtime_error": "Line 33: ** (BadFunctionError) expected a function, got: [-1, -1]\n    (elixir 1.15.7) lib/enum.ex:4279: Enum.find_list/3\n    (elixir 1.15.7) lib/enum.ex:4279: Enum.find_list/3\n    solution.ex:33: Driver.consume_test_cases/2\n    solution.ex:17: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 75688000,
    "question_id": "3170",
    "elapsed_time": 485,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1707264287391,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168282119",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_indices(nums :: [integer], index_difference :: integer, value_difference :: integer) :: [integer]\n  def find_indices(nums, index_difference, value_difference) do\n    0..(length(nums) - 1)\n    |> Enum.flat_map(fn i ->\n      Enum.filter(0..(length(nums) - 1), fn j ->\n        abs(i - j) >= index_difference and abs(Enum.at(nums, i) - Enum.at(nums, j)) >= value_difference\n      end)\n      |> Enum.map(&[i, &1])\n    end)\n    |> Enum.find(&(&1), [-1, -1])\n  end\nend"
}