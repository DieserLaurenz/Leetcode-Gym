{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 136672000,
    "question_id": "3170",
    "elapsed_time": 5053,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111101011111111101111111011111010111110110111111101111111111011100111111111111011111011110101111100101111110111101110101111111101111101111111001001111111011111111110010111011111111011101110111111111111111111111011111110111111101111111110111111111111011111111111111111101111101111111111110010111101111111111111110010011001111111001111111111100111111010101111111101111111011111111101101110101110000001011110101111011110111110111111111111010000000",
    "code_output": "[-1,-1]",
    "std_output": "",
    "last_testcase": "[6,5,5,10,4,3]\n1\n5",
    "expected_output": "[1,3]",
    "task_finish_time": 1707264205079,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 430,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1168281477",
    "input_formatted": "[6,5,5,10,4,3], 1, 5",
    "input": "[6,5,5,10,4,3]\n1\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_indices(Nums :: [integer()], IndexDifference :: integer(), ValueDifference :: integer()) -> [integer()].\nfind_indices(Nums, IndexDifference, ValueDifference) ->\n    find_indices(Nums, IndexDifference, ValueDifference, 0, length(Nums), []).\n\nfind_indices(_Nums, _IndexDifference, _ValueDifference, _I, Length, Acc) when length(Acc) >= 2 ->\n    lists:sublist(Acc, 2); % Return first found pair\nfind_indices(Nums, IndexDifference, ValueDifference, I, Length, Acc) when I < Length ->\n    J = I + IndexDifference,\n    find_indices_j(Nums, IndexDifference, ValueDifference, I, J, Length, Acc);\nfind_indices(_Nums, _IndexDifference, _ValueDifference, _I, _Length, Acc) ->\n    [-1, -1].\n\nfind_indices_j(_Nums, _IndexDifference, _ValueDifference, _I, J, Length, Acc) when J >= Length, length(Acc) < 2 ->\n    [-1, -1];\nfind_indices_j(Nums, IndexDifference, ValueDifference, I, J, Length, Acc) when J < Length, length(Acc) < 2 ->\n    case abs(lists:nth(I + 1, Nums) - lists:nth(J + 1, Nums)) >= ValueDifference of\n        true ->\n            find_indices(Nums, IndexDifference, ValueDifference, I + 1, Length, [I, J]);\n        false ->\n            find_indices_j(Nums, IndexDifference, ValueDifference, I, J + 1, Length, Acc)\n    end;\nfind_indices_j(_Nums, _IndexDifference, _ValueDifference, _I, _J, _Length, Acc) ->\n    Acc."
}