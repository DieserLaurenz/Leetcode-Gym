{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63608000,
    "question_id": "3170",
    "elapsed_time": 775,
    "compare_result": "0101111001111111111011010111111111110001010000000011011001000101110010001001101000010001000000000000001000100000000010101000100100010011100000010011100000001001010001000000000101000000100010000010000000010000000000000000000000000100000000010111010000000001000000000011100001100100000011000010000000000100001100000100000100000010000100100000000000100001000011100000100000000000000000010000000000101001000001000001000001001000000010000000010010010000010000000000100000000000000000000000000000000000000001010011000000000",
    "code_output": "[0,2]",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1707263252379,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 120,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1168274566",
    "input_formatted": "[5,1,4,1], 2, 4",
    "input": "[5,1,4,1]\n2\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun findIndices(nums: IntArray, indexDifference: Int, valueDifference: Int): IntArray {\n        val map = TreeMap<Int, Int>()\n        for ((index, value) in nums.withIndex()) {\n            val floorEntry = map.floorEntry(value + valueDifference - 1)\n            val ceilingEntry = map.ceilingEntry(value - valueDifference + 1)\n            if (floorEntry != null && index - floorEntry.value >= indexDifference) return intArrayOf(floorEntry.value, index)\n            if (ceilingEntry != null && index - ceilingEntry.value >= indexDifference) return intArrayOf(ceilingEntry.value, index)\n            map[value] = index\n        }\n        return intArrayOf(-1, -1)\n    }\n}"
}