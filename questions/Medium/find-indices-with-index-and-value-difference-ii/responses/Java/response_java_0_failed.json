{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65184000,
    "display_runtime": "28",
    "question_id": "3170",
    "elapsed_time": 453,
    "compare_result": "0111111111111111111111101111111000011111111111111111111010101000110011111111111111101101111011111111111010111110011001110101001111111001100111101101111101101011111100111111111111110111011000111111110101111110100111001000011111111111111011111101111111101111101111111111011111111111111110101111111111101111111111111011101110011111111101111111111111011110111111110011111111011110111111111111101101111111111111011111101111111011111111111101111111011111111111111111111111111101111111101111111110111111111101111111101011110",
    "code_output": "[-1,-1]",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1707253138933,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 430,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1168190092",
    "input_formatted": "[5,1,4,1], 2, 4",
    "input": "[5,1,4,1]\n2\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int[] findIndices(int[] nums, int indexDifference, int valueDifference) {\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = Math.max(0, i - indexDifference); j <= Math.min(nums.length - 1, i + indexDifference); j++) {\n                if (Math.abs(nums[i] - nums[j]) >= valueDifference && Math.abs(i - j) >= indexDifference) {\n                    return new int[]{i, j};\n                }\n            }\n        }\n        return new int[]{-1, -1};\n    }\n}"
}