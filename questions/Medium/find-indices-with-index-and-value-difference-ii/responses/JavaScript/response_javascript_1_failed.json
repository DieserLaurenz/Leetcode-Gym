{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60812000,
    "question_id": "3170",
    "elapsed_time": 111,
    "compare_result": "0111011111111111011111101110111000011110110111110001011010000000010001101110110101001000100011001010101000011100010001000100000011001000100001000000110000001001001000110000010100100000000000011010010000000100000000000000000000000010000011101000001000000010000000001000010011110000100100000010100001000001001110100000000100000010000100000000010001000000001010000000000000000000100000001000100000001001000101000001000000001000101010000000010000000000011000001000110000000001000010101000000110000000000000011111101000000",
    "code_output": "[1,0]",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1707253549143,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 146,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1168194056",
    "input_formatted": "[5,1,4,1], 2, 4",
    "input": "[5,1,4,1]\n2\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} indexDifference\n * @param {number} valueDifference\n * @return {number[]}\n */\nvar findIndices = function(nums, indexDifference, valueDifference) {\n    let minQueue = [], maxQueue = []; // For storing indices\n    for (let i = 0, j = 0; j < nums.length; j++) {\n        // Remove indices from front if they are out of the current window of interest\n        while (minQueue.length && minQueue[0] < j - indexDifference) minQueue.shift();\n        while (maxQueue.length && maxQueue[0] < j - indexDifference) maxQueue.shift();\n\n        // Maintain minQueue and maxQueue\n        while (minQueue.length && nums[minQueue[minQueue.length - 1]] > nums[j]) minQueue.pop();\n        while (maxQueue.length && nums[maxQueue[maxQueue.length - 1]] < nums[j]) maxQueue.pop();\n\n        minQueue.push(j);\n        maxQueue.push(j);\n\n        // Check if current window satisfies the condition\n        if (nums[maxQueue[0]] - nums[minQueue[0]] >= valueDifference) return [minQueue[0], maxQueue[0]];\n    }\n    return [-1, -1];\n};"
}