{
    "status_code": 20,
    "lang": "rust",
    "run_success": false,
    "compile_error": "Line 14, Char 24: type annotations needed (solution.rs)",
    "full_compile_error": "Line 14, Char 24: type annotations needed (solution.rs)\n   |\n14 |                     if (i as i32 - j).abs() >= index_difference {\n   |                        ^^^^^^^^^^^^^^ cannot infer type\nFor more information about this error, try `rustc --explain E0282`.\nerror: could not compile `prog` (bin \"prog\") due to previous error\nmv: cannot stat '/leetcode/rust_compile/target/release/prog': No such file or directory",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3170",
    "task_finish_time": 1707263929681,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1168279524",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_indices(nums: Vec<i32>, index_difference: i32, value_difference: i32) -> Vec<i32> {\n        let mut answer = vec![-1, -1];\n        let mut map = std::collections::HashMap::new();\n\n        for (i, &num) in nums.iter().enumerate() {\n            let keys = vec![\n                num / value_difference,\n                num / value_difference + if num % value_difference > 0 { 1 } else { 0 },\n                num / value_difference - 1,\n            ];\n            for &key in &keys {\n                if let Some(&j) = map.get(&key) {\n                    if (i as i32 - j).abs() >= index_difference {\n                        return vec![j, i as i32];\n                    }\n                }\n            }\n            map.insert(num / value_difference, i as i32);\n        }\n\n        answer\n    }\n}"
}