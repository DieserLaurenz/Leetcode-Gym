{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2056000,
    "question_id": "3170",
    "elapsed_time": 8,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[0,2]",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1707263949642,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1168279664",
    "input_formatted": "[5,1,4,1], 2, 4",
    "input": "[5,1,4,1]\n2\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_indices(nums: Vec<i32>, index_difference: i32, value_difference: i32) -> Vec<i32> {\n        use std::collections::HashMap;\n\n        let mut map: HashMap<i32, usize> = HashMap::new();\n        for (i, &num) in nums.iter().enumerate() {\n            let bucket = num / value_difference;\n            for &k in &[bucket - 1, bucket, bucket + 1] {\n                if let Some(&j) = map.get(&k) {\n                    if i >= j + index_difference as usize || j >= i + index_difference as usize {\n                        return vec![j as i32, i as i32];\n                    }\n                }\n            }\n            map.insert(bucket, i);\n        }\n        vec![-1, -1]\n    }\n}"
}