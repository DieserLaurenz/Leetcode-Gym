{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 132100000,
    "question_id": "3170",
    "elapsed_time": 5017,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111101011111111101111111011111010111110110111111101111111111011100111111111111011111011110101111100101111110111101110101111111101111101111111001001111111011111111110010111011111111011101110111111111111111111111011111110111111101111111110111111111111011111111111111111101111101111111111110010111101111111111111110010011001111111001111111111100111111010101111111101111111011111111101101110101110000001011110101111011110111110111111111111010000000",
    "code_output": "[-1,-1]",
    "std_output": "",
    "last_testcase": "[6,5,5,10,4,3]\n1\n5",
    "expected_output": "[1,3]",
    "task_finish_time": 1707264010716,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 430,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1168280028",
    "input_formatted": "[6,5,5,10,4,3], 1, 5",
    "input": "[6,5,5,10,4,3]\n1\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (find-indices nums indexDifference valueDifference)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))\n  (let loop ((i 0) (j 0) (found #f))\n    (cond\n      ((or (>= i (length nums)) (>= j (length nums))) (if found found '(-1 -1)))\n      ((and (>= (abs (- i j)) indexDifference)\n            (>= (abs (- (list-ref nums i) (list-ref nums j))) valueDifference))\n       (list i j))\n      ((>= j (length nums)) (loop (+ i 1) 0 found))\n      (else (loop i (+ j 1) found)))))"
}