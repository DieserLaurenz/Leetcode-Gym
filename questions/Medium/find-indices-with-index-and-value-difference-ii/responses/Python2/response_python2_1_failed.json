{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25536000,
    "question_id": "3170",
    "elapsed_time": 732,
    "compare_result": "0011111001111111011111101110111000011111100111110001011010000000100001100110111101000001100011001011101000011100010001000100000011001000100001000000010000000001011000110000010100100000000000011000010000001000000000000000000000000010000001101000001000000000000000000000010011110000100100000010100001000001001110100000000100000010000100000000010000000000001010000000000000000000100000000000100000000001000101000001000000001000101010000000010000000000011000000000110000000001000010101000000110000000000000010011101000000",
    "code_output": "[0,1]",
    "std_output": "",
    "last_testcase": "[5,1,4,1]\n2\n4",
    "expected_output": "[0,3]",
    "task_finish_time": 1708765883623,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 134,
    "total_testcases": 517,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184679647",
    "input_formatted": "[5,1,4,1], 2, 4",
    "input": "[5,1,4,1]\n2\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findIndices(self, nums, indexDifference, valueDifference):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDifference: int\n        :type valueDifference: int\n        :rtype: List[int]\n        \"\"\"\n        from collections import deque\n\n        def is_valid(pair):\n            return abs(pair[0] - pair[1]) >= valueDifference\n\n        min_queue = deque()  # Store indices of potential min values\n        max_queue = deque()  # Store indices of potential max values\n\n        for i in range(len(nums)):\n            # Remove indices from queues that are not within the current window of interest\n            while min_queue and i - min_queue[0] > indexDifference:\n                min_queue.popleft()\n            while max_queue and i - max_queue[0] > indexDifference:\n                max_queue.popleft()\n\n            # Check current value against potential min and max in the window\n            if min_queue and is_valid((nums[i], nums[min_queue[0]])):\n                return [i, min_queue[0]] if i < min_queue[0] else [min_queue[0], i]\n            if max_queue and is_valid((nums[i], nums[max_queue[0]])):\n                return [i, max_queue[0]] if i < max_queue[0] else [max_queue[0], i]\n\n            # Maintain sorted order in min_queue and max_queue\n            while min_queue and nums[i] <= nums[min_queue[-1]]:\n                min_queue.pop()\n            while max_queue and nums[i] >= nums[max_queue[-1]]:\n                max_queue.pop()\n\n            min_queue.append(i)\n            max_queue.append(i)\n\n        return [-1, -1]"
}