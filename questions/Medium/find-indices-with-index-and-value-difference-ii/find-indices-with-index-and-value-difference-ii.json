{
    "acRate": 32.07139655242675,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2905",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find Indices With Index and Value Difference II",
    "titleSlug": "find-indices-with-index-and-value-difference-ii",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Two Pointers",
            "id": "VG9waWNUYWdOb2RlOjk=",
            "slug": "two-pointers"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> findIndices(vector<int>& nums, int indexDifference, int valueDifference) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] findIndices(int[] nums, int indexDifference, int valueDifference) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def findIndices(self, nums, indexDifference, valueDifference):         \"\"\"         :type nums: List[int]         :type indexDifference: int         :type valueDifference: int         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def findIndices(self, nums: List[int], indexDifference: int, valueDifference: int) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* findIndices(int* nums, int numsSize, int indexDifference, int valueDifference, int* returnSize) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] FindIndices(int[] nums, int indexDifference, int valueDifference) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} indexDifference  * @param {number} valueDifference  * @return {number[]}  */ var findIndices = function(nums, indexDifference, valueDifference) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findIndices(nums: number[], indexDifference: number, valueDifference: number): number[] {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $indexDifference      * @param Integer $valueDifference      * @return Integer[]      */     function findIndices($nums, $indexDifference, $valueDifference) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func findIndices(_ nums: [Int], _ indexDifference: Int, _ valueDifference: Int) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun findIndices(nums: IntArray, indexDifference: Int, valueDifference: Int): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> findIndices(List<int> nums, int indexDifference, int valueDifference) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findIndices(nums []int, indexDifference int, valueDifference int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} index_difference # @param {Integer} value_difference # @return {Integer[]} def find_indices(nums, index_difference, value_difference)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def findIndices(nums: Array[Int], indexDifference: Int, valueDifference: Int): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn find_indices(nums: Vec<i32>, index_difference: i32, value_difference: i32) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (find-indices nums indexDifference valueDifference)   (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec find_indices(Nums :: [integer()], IndexDifference :: integer(), ValueDifference :: integer()) -> [integer()]. find_indices(Nums, IndexDifference, ValueDifference) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec find_indices(nums :: [integer], index_difference :: integer, value_difference :: integer) :: [integer]   def find_indices(nums, index_difference, value_difference) do        end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference. Your task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions:  abs(i - j) >= indexDifference, and abs(nums[i] - nums[j]) >= valueDifference  Return an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them. Note: i and j may be equal.  Example 1:  Input: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4 Output: [0,3] Explanation: In this example, i = 0 and j = 3 can be selected. abs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4. Hence, a valid answer is [0,3]. [3,0] is also a valid answer.  Example 2:  Input: nums = [2,1], indexDifference = 0, valueDifference = 0 Output: [0,0] Explanation: In this example, i = 0 and j = 0 can be selected. abs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0. Hence, a valid answer is [0,0]. Other valid answers are [0,1], [1,0], and [1,1].  Example 3:  Input: nums = [1,2,3], indexDifference = 2, valueDifference = 4 Output: [-1,-1] Explanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions. Hence, [-1,-1] is returned.  Constraints:  1 <= n == nums.length <= 105 0 <= nums[i] <= 109 0 <= indexDifference <= 105 0 <= valueDifference <= 109  "
}