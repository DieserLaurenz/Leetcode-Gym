{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 221140000,
    "question_id": "2787",
    "elapsed_time": 3075,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1708002978563,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 246,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1176028300",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec sum_distance(Nums :: [integer()], S :: unicode:unicode_binary(), D :: integer()) -> integer().\nsum_distance(Nums, S, D) ->\n    Mod = 1000000007,\n    IndexedNums = lists:zip(Nums, binary_to_list(S)),\n    SortedNums = lists:sort(fun({Num1, _}, {Num2, _}) -> Num1 < Num2 end, IndexedNums),\n    sum_distance_helper(SortedNums, D, Mod, 0).\n\nsum_distance_helper([], _, _, Acc) -> Acc;\nsum_distance_helper([_], _, _, Acc) -> Acc;\nsum_distance_helper([{Num1, Dir1}, {Num2, Dir2} | Rest], D, Mod, Acc) ->\n    case {Dir1, Dir2} of\n        {$R, $L} when Num2 - Num1 =< D * 2 ->\n            NewAcc = (Acc + (D * 2 - (Num2 - Num1)) rem Mod) rem Mod,\n            sum_distance_helper([{Num1, Dir1} | Rest], D, Mod, NewAcc);\n        _ ->\n            Dist = abs((Num1 + direction(Dir1) * D) - (Num2 + direction(Dir2) * D)),\n            NewAcc = (Acc + Dist) rem Mod,\n            sum_distance_helper([{Num2, Dir2} | Rest], D, Mod, NewAcc)\n    end.\n\ndirection($L) -> -1;\ndirection($R) -> 1."
}