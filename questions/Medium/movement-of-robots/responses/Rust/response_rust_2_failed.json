{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3536000,
    "question_id": "2787",
    "elapsed_time": 2194,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1708002756645,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 520,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1176025749",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn sum_distance(nums: Vec<i32>, s: String, d: i32) -> i32 {\n        let mut pairs = nums.into_iter().zip(s.chars()).collect::<Vec<_>>();\n        pairs.sort_unstable_by_key(|k| k.0);\n        let modulo = 1_000_000_007i64;\n        let mut result = 0i64;\n\n        for i in 0..pairs.len() {\n            for j in i + 1..pairs.len() {\n                let (pos_i, dir_i) = pairs[i];\n                let (pos_j, dir_j) = pairs[j];\n                let mut distance = pos_j as i64 - pos_i as i64;\n\n                if dir_i != dir_j {\n                    let collision_point = (pos_j as i64 + pos_i as i64) / 2;\n                    if dir_i == 'R' && pos_i as i64 + d as i64 >= collision_point {\n                        distance -= (pos_i as i64 + d as i64 - collision_point) * 2;\n                    } else if dir_j == 'L' && pos_j as i64 - d as i64 <= collision_point {\n                        distance -= (collision_point - (pos_j as i64 - d as i64)) * 2;\n                    }\n                }\n\n                result = (result + distance) % modulo;\n            }\n        }\n\n        result as i32\n    }\n}"
}