{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36348000,
    "question_id": "2787",
    "elapsed_time": 541,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1708839000219,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 29,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185478142",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n        mod = 10**9 + 7\n        pairs = [(pos + (d if direction == 'R' else -d), i) for i, (pos, direction) in enumerate(zip(nums, s))]\n        pairs.sort()\n\n        left_sum = right_sum = 0\n        left_count = right_count = 0\n        for _, i in pairs:\n            if s[i] == 'R':\n                right_sum += nums[i]\n                right_count += 1\n            else:\n                left_sum += nums[i] + d * 2\n                left_count += 1\n\n        total_distance = 0\n        for pos, i in pairs:\n            if s[i] == 'R':\n                right_sum -= nums[i]\n                right_count -= 1\n            else:\n                left_sum -= nums[i] + d * 2\n                left_count -= 1\n\n            if s[i] == 'R':\n                total_distance += (left_count * (nums[i] + d) - left_sum) + (right_sum - right_count * (nums[i] + d))\n            else:\n                total_distance += (left_sum - left_count * (nums[i] - d)) + (right_count * (nums[i] - d) - right_sum)\n\n        return total_distance % mod"
}