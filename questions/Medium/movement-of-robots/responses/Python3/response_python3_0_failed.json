{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44904000,
    "question_id": "2787",
    "elapsed_time": 11011,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1708838969153,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185477663",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def sumDistance(self, nums: List[int], s: str, d: int) -> int:\n        mod = 10**9 + 7\n        events = []\n        for i, (pos, dir) in enumerate(zip(nums, s)):\n            move = 1 if dir == 'R' else -1\n            start = pos - d * move\n            end = pos + d * move\n            events.append((start, end if move == 1 else -end))\n        events.sort(key=lambda x: (x[0], -x[1]))\n\n        sum_dist = 0\n        active = []\n        for start, end in events:\n            while active and active[0] < start:\n                active.pop(0)\n            sum_dist += len(active) * start + sum(active)\n            active.append(end if end >= 0 else -end)\n            active.sort()\n\n        return sum_dist % mod"
}