{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 75268000,
    "question_id": "2787",
    "elapsed_time": 639,
    "compare_result": "01000000010100000010100101000010000000100000011010100000000000000000000000000000000000000001000000000010001000000000000000000000001000000000000000000000000000000000100000000100000001000000000000000000000001000000000000000100100111000010000000000001000000000000000001000000000000010000100000001000000000010000000011000000000100001000000000000101000001001000001000010000100000001000000000001000000000100000000000000010000001000010000001000000000000000000000100000001000000000000000100000000000000000000000000000000000000000010000100000000000000100010000000000000000000000000000101000010100000000000000000000000000001000000000000001000000000000000011000100110000000000000000000000000010000001001000001000011000000000000000000000000100000001000111000000010000110110001000000010000000100000000000010000100010000000000000000000000001010110000000100000100000001001000100001000001001000000000000000000000000000000010000100000100000000100010100000100000010000000100000000000100000000000000000010100000000000000000000000000000001000001000000000010000010110000000000000100000000001000000000000001011100000100000000000000000000000000100000001001011000000000000001000000000000000001000000001010000000000000000000001000000100001000000000000000000000000000000000000001000000000000000000001000000000001000000000000000001000000000000000000000000000000000000000000000000000000000101000000000001100000000001000100000100010100010001000000000000000000010001000110000000000100000010000000001001000001001001000100101000010100000000000011000010000011000000001001000000000000000000000000001000000000000111000000000000000000000000000000000000000000000100000000000000000100101010000000000010000110000000000000000000000000000000000000100000010000100001010000000000000000001101001000001000000000000000000001001010000000000000000000000001100000000011000000000000001100000000000000000000010000010010000010010000100010000000000001011000000000000000000000000000100000000001000100000100100000010001000010000100000000110111000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000100000010010000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000100000000000000000000000000001000000000000000000000000000000000000000000000001000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010",
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1707993534921,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 246,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175934652",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun sumDistance(nums: IntArray, s: String, d: Int): Int {\n        val mod = 1_000_000_007\n        val n = nums.size\n        var sum: Long = 0\n        val positions = LongArray(n)\n        for (i in nums.indices) {\n            positions[i] = nums[i] + if (s[i] == 'L') -d.toLong() else d.toLong()\n        }\n        positions.sort()\n        var totalDistance = positions.foldIndexed(0L) { index, acc, value -> acc + value * index - (n - 1 - index) * value }\n        for (i in positions.indices) {\n            sum = (sum + totalDistance) % mod\n            if (i < n - 1) {\n                val diff = positions[i + 1] - positions[i]\n                totalDistance -= diff * (n - 1 - 2 * i)\n            }\n        }\n        return (sum % mod).toInt()\n    }\n}"
}