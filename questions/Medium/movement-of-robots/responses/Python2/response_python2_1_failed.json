{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12976000,
    "question_id": "2787",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1708838871926,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1256,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185476598",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def sumDistance(self, nums, s, d):\n        \"\"\"\n        :type nums: List[int]\n        :type s: str\n        :type d: int\n        :rtype: int\n        \"\"\"\n        mod = 10**9 + 7\n        pairs = sorted(zip(nums, s))\n        distances = 0\n\n        for i in range(len(pairs)):\n            for j in range(i + 1, len(pairs)):\n                initial_distance = abs(pairs[i][0] - pairs[j][0])\n                if pairs[i][1] == pairs[j][1]:\n                    # Moving in the same direction\n                    distances += initial_distance\n                else:\n                    # Moving towards each other\n                    if pairs[i][0] < pairs[j][0]:\n                        if pairs[i][1] == 'R' and pairs[j][1] == 'L':\n                            new_distance = initial_distance - 2 * min(d, (initial_distance // 2))\n                        else:\n                            new_distance = initial_distance + 2 * d\n                    else:\n                        if pairs[i][1] == 'L' and pairs[j][1] == 'R':\n                            new_distance = initial_distance - 2 * min(d, (initial_distance // 2))\n                        else:\n                            new_distance = initial_distance + 2 * d\n                    distances += new_distance\n\n        return distances % mod"
}