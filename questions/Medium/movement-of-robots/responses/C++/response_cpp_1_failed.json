{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 82988000,
    "question_id": "2787",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,0]\n\"RL\"\n2",
    "expected_output": "5",
    "task_finish_time": 1707992288687,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 262,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175921486",
    "input_formatted": "[1,0], \"RL\", 2",
    "input": "[1,0]\n\"RL\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int sumDistance(vector<int>& nums, string s, int d) {\n        const int mod = 1e9 + 7;\n        vector<pair<int, int>> robots; // Pair of initial position and direction (1 for right, -1 for left)\n        for (int i = 0; i < nums.size(); ++i) {\n            robots.emplace_back(nums[i], s[i] == 'R' ? 1 : -1);\n        }\n        // Sort the robots based on their initial positions\n        sort(robots.begin(), robots.end());\n\n        long long totalDistance = 0;\n        for (int i = 0; i < robots.size(); ++i) {\n            for (int j = i + 1; j < robots.size(); ++j) {\n                long long initialDistance = robots[j].first - robots[i].first;\n                long long moveDistance = (long long)d * (robots[i].second + robots[j].second);\n                long long finalDistance = initialDistance - moveDistance;\n                if (robots[i].second > robots[j].second) { // If they are moving towards each other\n                    if (initialDistance <= 2LL * d) {\n                        finalDistance = (2LL * d - initialDistance) % 2LL;\n                    }\n                }\n                totalDistance = (totalDistance + abs(finalDistance)) % mod;\n            }\n        }\n        return totalDistance;\n    }\n};"
}