{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54396000,
    "question_id": "2787",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1707992483132,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 19,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175923681",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int sumDistance(int[] nums, String s, int d) {\n        final int MOD = 1000000007;\n        int n = nums.length;\n        long sum = 0;\n        long[] left = new long[n];\n        long[] right = new long[n];\n\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == 'L') {\n                left[i] = nums[i] - (long) d;\n            } else {\n                right[i] = nums[i] + (long) d;\n            }\n        }\n\n        sort(nums, left, right);\n\n        long totalRight = 0;\n        for (int i = 0; i < n; i++) {\n            totalRight += right[i];\n        }\n\n        long sumLeft = 0, sumRight = totalRight;\n        for (int i = 0; i < n; i++) {\n            sumRight -= right[i];\n            sum = (sum + (right[i] * i - sumLeft) + (sumRight - right[i] * (n - i - 1))) % MOD;\n            sumLeft += left[i];\n        }\n\n        return (int) (sum % MOD);\n    }\n\n    private void sort(int[] nums, long[] left, long[] right) {\n        int n = nums.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (nums[i] > nums[j]) {\n                    swap(nums, i, j);\n                    swap(left, i, j);\n                    swap(right, i, j);\n                }\n            }\n        }\n    }\n\n    private void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    private void swap(long[] arr, int i, int j) {\n        long temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}"
}