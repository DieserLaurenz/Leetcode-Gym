{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70420000,
    "question_id": "2787",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1707993036123,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 112,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175929471",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function sumDistance(nums: number[], s: string, d: number): number {\n    const mod = 1e9 + 7;\n    let pairs = [];\n    for (let i = 0; i < nums.length; i++) {\n        pairs.push({ position: nums[i], direction: s[i] === 'R' ? 1 : -1 });\n    }\n    pairs.sort((a, b) => a.position - b.position);\n\n    let totalDistance = 0;\n    for (let i = 0; i < pairs.length; i++) {\n        for (let j = i + 1; j < pairs.length; j++) {\n            let distance = pairs[j].position - pairs[i].position;\n            let relativeSpeed = pairs[i].direction + pairs[j].direction;\n            if (pairs[i].direction > 0 && pairs[j].direction < 0) {\n                relativeSpeed = 2; // Approaching each other\n            } else if (pairs[i].direction < 0 && pairs[j].direction > 0) {\n                relativeSpeed = -2; // Moving away from each other\n            } else {\n                continue; // Parallel movement, no effective change in distance\n            }\n\n            let effectiveDistance = distance - d * relativeSpeed;\n            totalDistance = (totalDistance + Math.abs(effectiveDistance)) % mod;\n        }\n    }\n    return totalDistance;\n}"
}