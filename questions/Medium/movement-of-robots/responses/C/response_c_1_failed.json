{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12564000,
    "question_id": "2787",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[-2,0,2]\n\"RLL\"\n3",
    "expected_output": "8",
    "task_finish_time": 1707992591043,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 236,
    "total_testcases": 2567,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175924845",
    "input_formatted": "[-2,0,2], \"RLL\", 3",
    "input": "[-2,0,2]\n\"RLL\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int sumDistance(int* nums, int numsSize, char * s, int d){\n    long long sum = 0;\n    const int MOD = 1000000007;\n    for (int i = 0; i < numsSize - 1; i++) {\n        for (int j = i + 1; j < numsSize; j++) {\n            long long initialDistance = abs(nums[i] - nums[j]);\n            long long finalDistance;\n            if (s[i] == s[j]) {\n                finalDistance = initialDistance + 2LL * d;\n            } else {\n                if (initialDistance <= 2LL * d) {\n                    long long overlap = (2LL * d - initialDistance) / 2;\n                    finalDistance = 2LL * d - 2LL * overlap;\n                } else {\n                    finalDistance = initialDistance;\n                }\n            }\n            sum = (sum + finalDistance) % MOD;\n        }\n    }\n    return sum;\n}"
}