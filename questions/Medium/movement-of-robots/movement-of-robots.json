{
    "acRate": 28.02324767173167,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2731",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Movement of Robots",
    "titleSlug": "movement-of-robots",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Brainteaser",
            "id": "VG9waWNUYWdOb2RlOjMy",
            "slug": "brainteaser"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        },
        {
            "name": "Prefix Sum",
            "id": "VG9waWNUYWdOb2RlOjYxMDY4",
            "slug": "prefix-sum"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int sumDistance(vector<int>& nums, string s, int d) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int sumDistance(int[] nums, String s, int d) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def sumDistance(self, nums, s, d):         \"\"\"         :type nums: List[int]         :type s: str         :type d: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def sumDistance(self, nums: List[int], s: str, d: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int sumDistance(int* nums, int numsSize, char * s, int d){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int SumDistance(int[] nums, string s, int d) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {string} s  * @param {number} d  * @return {number}  */ var sumDistance = function(nums, s, d) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function sumDistance(nums: number[], s: string, d: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param String $s      * @param Integer $d      * @return Integer      */     function sumDistance($nums, $s, $d) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func sumDistance(_ nums: [Int], _ s: String, _ d: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun sumDistance(nums: IntArray, s: String, d: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int sumDistance(List<int> nums, String s, int d) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func sumDistance(nums []int, s string, d int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {String} s # @param {Integer} d # @return {Integer} def sum_distance(nums, s, d)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def sumDistance(nums: Array[Int], s: String, d: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn sum_distance(nums: Vec<i32>, s: String, d: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (sum-distance nums s d)   (-> (listof exact-integer?) string? exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec sum_distance(Nums :: [integer()], S :: unicode:unicode_binary(), D :: integer()) -> integer(). sum_distance(Nums, S, D) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec sum_distance(nums :: [integer], s :: String.t, d :: integer) :: integer   def sum_distance(nums, s, d) do    end end"
        }
    ],
    "content": "Some robots are standing on an infinite number line with their initial coordinates given by a 0-indexed integer array nums and will start moving once given the command to move. The robots will move a unit distance each second. You are given a string s denoting the direction in which robots will move on command. 'L' means the robot will move towards the left side or negative side of the number line, whereas 'R' means the robot will move towards the right side or positive side of the number line. If two robots collide, they will start moving in opposite directions. Return the sum of distances between all thepairs of robots d seconds afterthe command. Since the sum can be very large, return it modulo 109 + 7. Note:   For two robots at the index i and j, pair (i,j) and pair (j,i) are considered the same pair. When robots collide, they instantly change their directions without wasting any time. Collision happenswhen two robots share the same place in amoment.   For example, if a robot is positioned in 0 going to the right and another is positioned in 2 going to the left, the next second they'll be both in 1 and they will change direction and the next second the first one will be in 0, heading left, and another will be in 2, heading right. For example,if a robot is positioned in 0 going to the right and another is positioned in 1going to the left, the next second the first one will be in 0, heading left, and another will be in 1, heading right.     Example 1:  Input: nums = [-2,0,2], s = \"RLL\", d = 3 Output: 8 Explanation:  After 1 second, the positions are [-1,-1,1]. Now, the robot at index 0 will move left, and the robot at index 1 will move right. After 2 seconds, the positions are [-2,0,0]. Now, the robot at index 1 will move left, and the robot at index 2 will move right. After 3 seconds, the positions are [-3,-1,1]. The distance between the robot at index 0 and 1 is abs(-3 - (-1)) = 2. The distance between the robot at index 0 and 2 is abs(-3 - 1) = 4. The distance between the robot at index 1 and 2 is abs(-1 - 1) = 2. The sum of the pairs of all distances = 2 + 4 + 2 = 8.  Example 2:  Input: nums = [1,0], s = \"RL\", d = 2 Output: 5 Explanation:  After 1 second, the positions are [2,-1]. After 2 seconds, the positions are [3,-2]. The distance between the two robots is abs(-2 - 3) = 5.   Constraints:  2 <= nums.length <= 105 -2 * 109<= nums[i] <= 2 * 109 0 <= d <= 109 nums.length == s.length s consists of 'L' and 'R' only nums[i]will be unique.  "
}