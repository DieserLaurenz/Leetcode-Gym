{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "527 ms",
    "memory": 128872000,
    "question_id": "3245",
    "elapsed_time": 674,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707232571228,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 535,
    "total_testcases": 535,
    "runtime_percentile": 100,
    "status_memory": "128.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1167895003",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (beautiful-indices s a b k)\n  (-> string? string? string? exact-integer? (listof exact-integer?))\n  (let ([a-len (string-length a)]\n        [b-len (string-length b)]\n        [s-len (string-length s)])\n    (define (find-all-indices sub sub-len)\n      (let loop ([idx 0] [found-indices '()])\n        (if (< idx (- s-len sub-len -1))\n            (if (string=? sub (substring s idx (+ idx sub-len)))\n                (loop (+ idx 1) (cons idx found-indices))\n                (loop (+ idx 1) found-indices))\n            (reverse found-indices))))\n    (define a-indices (find-all-indices a a-len))\n    (define b-indices (find-all-indices b b-len))\n    (define (is-beautiful idx)\n      (define (within-k idx2) (<= (abs (- idx2 idx)) k))\n      (ormap within-k b-indices))\n    (filter is-beautiful a-indices)))"
}