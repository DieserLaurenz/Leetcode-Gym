{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "3197 ms",
    "memory": 21348000,
    "question_id": "3245",
    "elapsed_time": 3654,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708765583617,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 535,
    "total_testcases": 535,
    "runtime_percentile": 5.016199999999686,
    "status_memory": "21.3 MB",
    "memory_percentile": 7.124100000000016,
    "pretty_lang": "Python3",
    "submission_id": "1184676712",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n        def findAllSubstrIndices(haystack: str, needle: str) -> List[int]:\n            return [i for i in range(len(haystack) - len(needle) + 1) if haystack[i:i+len(needle)] == needle]\n        \n        a_indices = findAllSubstrIndices(s, a)\n        b_indices = findAllSubstrIndices(s, b)\n        beautiful_indices = []\n        \n        for i in a_indices:\n            if any(abs(i - j) <= k for j in b_indices):\n                beautiful_indices.append(i)\n        \n        return sorted(beautiful_indices)"
}