{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "193 ms",
    "memory": 14360000,
    "question_id": "3245",
    "elapsed_time": 210,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707221647224,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 535,
    "total_testcases": 535,
    "runtime_percentile": 70.27030000000005,
    "status_memory": "14.4 MB",
    "memory_percentile": 70.27030000000002,
    "pretty_lang": "C",
    "submission_id": "1167757772",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n#include <string.h>\n\nint* beautifulIndices(char* s, char* a, char* b, int k, int* returnSize) {\n    int sLen = strlen(s), aLen = strlen(a), bLen = strlen(b);\n    int* res = (int*)malloc(sizeof(int) * sLen);\n    *returnSize = 0;\n    int* aPositions = (int*)malloc(sizeof(int) * sLen);\n    int aPosSize = 0;\n    int* bPositions = (int*)malloc(sizeof(int) * sLen);\n    int bPosSize = 0;\n\n    // Find all occurrences of a and b in s\n    for (int i = 0; i <= sLen - aLen; i++) {\n        if (strncmp(s + i, a, aLen) == 0) {\n            aPositions[aPosSize++] = i;\n        }\n    }\n    for (int i = 0; i <= sLen - bLen; i++) {\n        if (strncmp(s + i, b, bLen) == 0) {\n            bPositions[bPosSize++] = i;\n        }\n    }\n\n    // Check for beautiful indices\n    for (int i = 0; i < aPosSize; i++) {\n        for (int j = 0; j < bPosSize; j++) {\n            if (abs(aPositions[i] - bPositions[j]) <= k) {\n                res[(*returnSize)++] = aPositions[i];\n                break; // Found a valid j, no need to check other j's for this i\n            }\n        }\n    }\n\n    free(aPositions);\n    free(bPositions);\n\n    return res;\n}"
}