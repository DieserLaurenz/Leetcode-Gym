{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 4: exception error: badarg",
    "full_runtime_error": "Line 4: exception error: badarg\n[{erlang,length,[<<\"my\">>],[{error_info,#{module => erl_erts_errors}}]},\n {solution,'-beautiful_indices/4-fun-1-',2,\n              [{file,\"solution.erl\"},{line,4}]},\n {solution,beautiful_indices,4,[{file,\"solution.erl\"},{line,8}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,37}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,19}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,54}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 60504000,
    "question_id": "3245",
    "elapsed_time": 1365,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "expected_output": "[16,33]",
    "task_finish_time": 1707242268850,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1168048900",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -> [integer()].\nbeautiful_indices(S, A, B, K) ->\n    FindMatches = fun(Pattern, String) ->\n                      PatternLen = length(Pattern),\n                      [I || I <- lists:seq(0, byte_size(String) - PatternLen),\n                       Pattern == binary:part(String, {I, PatternLen})]\n                  end,\n    IndicesA = FindMatches(A, S),\n    IndicesB = FindMatches(B, S),\n    FilteredIndicesA = lists:filter(fun(IdxA) ->\n                                         lists:any(fun(IdxB) ->\n                                                       abs(IdxA - IdxB) =< K\n                                                   end, IndicesB)\n                                     end, IndicesA),\n    lists:sort(FilteredIndicesA)."
}