{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "212 ms",
    "memory": 83864000,
    "question_id": "3245",
    "elapsed_time": 328,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707221710662,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 535,
    "total_testcases": 535,
    "runtime_percentile": 39.51430000000003,
    "status_memory": "83.9 MB",
    "memory_percentile": 5.643200000000036,
    "pretty_lang": "C#",
    "submission_id": "1167758395",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public IList<int> BeautifulIndices(string s, string a, string b, int k) {\n        List<int> beautifulIndices = new List<int>();\n        List<int> aIndices = new List<int>();\n        List<int> bIndices = new List<int>();\n        \n        // Find all occurrences of a\n        for (int i = 0; i <= s.Length - a.Length; i++) {\n            if (s.Substring(i, a.Length) == a) {\n                aIndices.Add(i);\n            }\n        }\n        \n        // Find all occurrences of b\n        for (int i = 0; i <= s.Length - b.Length; i++) {\n            if (s.Substring(i, b.Length) == b) {\n                bIndices.Add(i);\n            }\n        }\n        \n        // Check for beautiful indices\n        foreach (int ai in aIndices) {\n            foreach (int bi in bIndices) {\n                if (Math.Abs(ai - bi) <= k) {\n                    beautifulIndices.Add(ai);\n                    break; // Once a matching b is found, no need to check other b's for this a\n                }\n            }\n        }\n        \n        beautifulIndices.Sort(); // Ensure the result is sorted\n        return beautifulIndices;\n    }\n}"
}