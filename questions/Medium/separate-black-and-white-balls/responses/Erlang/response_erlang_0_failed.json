{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 106004000,
    "question_id": "3195",
    "elapsed_time": 1506,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"100\"",
    "expected_output": "2",
    "task_finish_time": 1708134366465,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 74,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1177408948",
    "input_formatted": "\"100\"",
    "input": "\"100\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_steps(S :: unicode:unicode_binary()) -> integer().\nminimum_steps(S) ->\n    List = binary_to_list(S),\n    {Steps, _, _} = lists:foldl(fun(Elem, {Acc, Pos, BlackCount}) ->\n                                     case Elem of\n                                         $0 -> {Acc, Pos + 1, BlackCount};\n                                         $1 -> {Acc + BlackCount, Pos + 1, BlackCount + 1}\n                                     end\n                                 end, {0, 0, 0}, List),\n    Steps."
}