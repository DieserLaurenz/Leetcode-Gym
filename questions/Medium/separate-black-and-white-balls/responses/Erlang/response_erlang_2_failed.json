{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62304000,
    "question_id": "3195",
    "elapsed_time": 1289,
    "compare_result": "00110000000001000010000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"101\"",
    "expected_output": "1",
    "task_finish_time": 1708134427768,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1177409317",
    "input_formatted": "\"101\"",
    "input": "\"101\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_steps(S :: unicode:unicode_binary()) -> integer().\nminimum_steps(S) ->\n    List = binary_to_list(S),\n    Blacks = [I || {Char, I} <- lists:zip(List, lists:seq(0, length(List) - 1)), Char == $1],\n    Mid = length(Blacks) div 2,\n    median_distance(Blacks, Mid).\n\nmedian_distance(Blacks, Mid) ->\n    Median = lists:nth(Mid + 1, Blacks),\n    lists:foldl(fun(X, Acc) -> Acc + abs(X - Median) end, 0, Blacks) - Mid * (Mid + 1)."
}