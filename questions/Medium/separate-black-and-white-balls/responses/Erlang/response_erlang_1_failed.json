{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 92496000,
    "question_id": "3195",
    "elapsed_time": 1536,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"101\"",
    "expected_output": "1",
    "task_finish_time": 1708134393303,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1177409107",
    "input_formatted": "\"101\"",
    "input": "\"101\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_steps(S :: unicode:unicode_binary()) -> integer().\nminimum_steps(S) ->\n    List = binary_to_list(S),\n    TotalBlack = length([X || X <- List, X == $1]),\n    {Steps, _, _} = lists:foldl(fun(Elem, {Acc, Pos, BlackToLeft}) ->\n                                     case Elem of\n                                         $0 -> {Acc, Pos + 1, BlackToLeft};\n                                         $1 -> {Acc + Pos - BlackToLeft, Pos + 1, BlackToLeft + 1}\n                                     end\n                                 end, {0, 0, 0}, List),\n    Steps - TotalBlack * (TotalBlack - 1) div 2."
}