{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55576000,
    "question_id": "3195",
    "elapsed_time": 580,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"100\"",
    "expected_output": "2",
    "task_finish_time": 1708134183680,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 67,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1177407892",
    "input_formatted": "\"100\"",
    "input": "\"100\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumSteps(s: String): Long = {\n        val n = s.length\n        var prefixSum = Array.fill(n+1)(0)\n        for (i <- 1 to n) {\n            prefixSum(i) = prefixSum(i-1) + (if (s(i-1) == '0') 0 else 1)\n        }\n        var minSteps = Long.MaxValue\n        for (i <- 0 to n) {\n            val leftZeros = i - prefixSum(i) // Swaps needed to move zeros to the left\n            val rightOnes = prefixSum(n) - prefixSum(i) // Swaps needed to move ones to the right\n            minSteps = math.min(minSteps, leftZeros + rightOnes)\n        }\n        minSteps\n    }\n}"
}