{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55816000,
    "question_id": "3195",
    "elapsed_time": 602,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"101\"",
    "expected_output": "1",
    "task_finish_time": 1708134208792,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1177408036",
    "input_formatted": "\"101\"",
    "input": "\"101\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumSteps(s: String): Long = {\n        var totalOnes = s.count(_ == '1')\n        var onesToTheRight = 0\n        var minSteps = Long.MaxValue\n        var steps = 0L\n\n        for (i <- s.indices) {\n            if (s(i) == '1') {\n                onesToTheRight += 1\n            } else {\n                steps = (i + 1 - onesToTheRight).toLong\n                minSteps = math.min(minSteps, totalOnes - onesToTheRight + steps)\n            }\n        }\n        if (minSteps == Long.MaxValue) 0 else minSteps\n    }\n}"
}