{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 110660000,
    "question_id": "3195",
    "elapsed_time": 6013,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"100\"",
    "expected_output": "2",
    "task_finish_time": 1708134484513,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 68,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177409649",
    "input_formatted": "\"100\"",
    "input": "\"100\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_steps(s :: String.t) :: integer\n  def minimum_steps(s) do\n    s\n    |> String.graphemes()\n    |> Enum.with_index()\n    |> Enum.filter(fn {c, _} -> c == \"1\" end)\n    |> Enum.map(fn {_, idx} -> idx end)\n    |> (fn indices -> \n          Enum.reduce(indices, {0, Enum.count(indices)}, fn index, {acc, count} ->\n            {acc + index - (Enum.count(indices) - count), count - 1}\n          end) \n        end).()\n    |> elem(0)\n  end\nend"
}