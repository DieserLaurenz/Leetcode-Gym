{
    "acRate": 33.26345503227547,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2787",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Ways to Express an Integer as Sum of Powers",
    "titleSlug": "ways-to-express-an-integer-as-sum-of-powers",
    "topicTags": [
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int numberOfWays(int n, int x) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int numberOfWays(int n, int x) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def numberOfWays(self, n, x):         \"\"\"         :type n: int         :type x: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def numberOfWays(self, n: int, x: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int numberOfWays(int n, int x){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int NumberOfWays(int n, int x) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} n  * @param {number} x  * @return {number}  */ var numberOfWays = function(n, x) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function numberOfWays(n: number, x: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $n      * @param Integer $x      * @return Integer      */     function numberOfWays($n, $x) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func numberOfWays(_ n: Int, _ x: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun numberOfWays(n: Int, x: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int numberOfWays(int n, int x) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func numberOfWays(n int, x int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n # @param {Integer} x # @return {Integer} def number_of_ways(n, x)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def numberOfWays(n: Int, x: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn number_of_ways(n: i32, x: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (number-of-ways n x)   (-> exact-integer? exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec number_of_ways(N :: integer(), X :: integer()) -> integer(). number_of_ways(N, X) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec number_of_ways(n :: integer, x :: integer) :: integer   def number_of_ways(n, x) do    end end"
        }
    ],
    "content": "Given two positive integers n and x. Return the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx. Since the result can be very large, return it modulo 109 + 7. For example, if n = 160 and x = 3, one way to express n is n = 23 + 33 + 53.  Example 1:  Input: n = 10, x = 2 Output: 1 Explanation: We can express n as the following: n = 32 + 12 = 10. It can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers.  Example 2:  Input: n = 4, x = 1 Output: 2 Explanation: We can express n in the following ways: - n = 41 = 4. - n = 31 + 11 = 4.   Constraints:  1 <= n <= 300 1 <= x <= 5  "
}