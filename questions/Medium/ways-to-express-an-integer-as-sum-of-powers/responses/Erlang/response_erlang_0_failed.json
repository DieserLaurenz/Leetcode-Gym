{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58780000,
    "question_id": "2882",
    "elapsed_time": 5121,
    "compare_result": "00000001111101111011110011101111011110011100011001110111100111001110011101111000110010101111011110011100111011110111100011001110011101011000110011100111011110000101110001110001100011001110011100111000110011100111011110011100111001110111100001001110011100111001110011100111001110001100111001110011100111001110011100111000000001100111011110011100111001110011100011000110011100111001110011100111001110000100101001010011100111001110011100111000110011100111000110001100111001110011100000001010010100011000110011100111001110001100111001110011100111001110011100111000010011100111001110011100111001110011100011001110011100111001110001100011001110000000111001110011100111000110001100111000110011100111001110011100111001110011100001001110011100111001110011100111001110001100011001110011100111001110011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "10\n2",
    "expected_output": "1",
    "task_finish_time": 1708227536105,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 438,
    "total_testcases": 1502,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178483597",
    "input_formatted": "10, 2",
    "input": "10\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_ways(N :: integer(), X :: integer()) -> integer().\nnumber_of_ways(N, X) ->\n    Memo = dict:new(),\n    find_ways(N, N, X, Memo).\n\nfind_ways(0, _, _, _) ->\n    1;\nfind_ways(_, 0, _, _) ->\n    0;\nfind_ways(N, Current, X, Memo) when N < 0 ->\n    0;\nfind_ways(N, Current, X, Memo) ->\n    case dict:find({N, Current}, Memo) of\n        {ok, Result} ->\n            Result;\n        error ->\n            Power = Current bsl X,\n            WithCurrent = if\n                N - Power >= 0 ->\n                    find_ways(N - Power, Current - 1, X, Memo);\n                true ->\n                    0\n            end,\n            WithoutCurrent = find_ways(N, Current - 1, X, Memo),\n            Result = (WithCurrent + WithoutCurrent) rem (1000000007),\n            Memo1 = dict:store({N, Current}, Result, Memo),\n            Result\n    end."
}