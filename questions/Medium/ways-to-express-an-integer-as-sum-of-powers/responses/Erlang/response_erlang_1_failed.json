{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59308000,
    "question_id": "2882",
    "elapsed_time": 5116,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "10\n2",
    "expected_output": "1",
    "task_finish_time": 1708227573427,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 462,
    "total_testcases": 1502,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178484473",
    "input_formatted": "10, 2",
    "input": "10\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_ways(N :: integer(), X :: integer()) -> integer().\nnumber_of_ways(N, X) ->\n    Ways = lists:foldl(fun(I, Acc) -> Acc + number_of_ways_helper(N - I bsl X, I - 1, X, #{}) end, 0, lists:seq(1, trunc(math:pow(N, 1/X)))),\n    Ways rem 1000000007.\n\nnumber_of_ways_helper(0, _, _, _) ->\n    1;\nnumber_of_ways_helper(N, Current, X, Memo) when N < 0; Current < 1 ->\n    0;\nnumber_of_ways_helper(N, Current, X, Memo) ->\n    case maps:find({N, Current}, Memo) of\n        {ok, Result} ->\n            Result;\n        error ->\n            Power = Current bsl X,\n            WithCurrent = number_of_ways_helper(N - Power, Current - 1, X, Memo),\n            WithoutCurrent = number_of_ways_helper(N, Current - 1, X, Memo),\n            Result = (WithCurrent + WithoutCurrent) rem 1000000007,\n            NewMemo = Memo#{ {N, Current} => Result },\n            Result\n    end."
}