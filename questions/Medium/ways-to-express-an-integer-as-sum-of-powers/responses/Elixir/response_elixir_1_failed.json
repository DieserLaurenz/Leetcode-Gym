{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 82280000,
    "question_id": "2882",
    "elapsed_time": 5960,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "10\n2",
    "expected_output": "1",
    "task_finish_time": 1708227691374,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 774,
    "total_testcases": 1502,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1178487148",
    "input_formatted": "10, 2",
    "input": "10\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @mod 1000000007\n\n  @spec number_of_ways(n :: integer, x :: integer) :: integer\n  def number_of_ways(n, x) do\n    dp = for _ <- 0..n, do: 0\n    dp = List.replace_at(dp, 0, 1)\n\n    for i <- 1..n do\n      max_val = :math.pow(i, x) |> round()\n      if max_val <= n do\n        for j <- (max_val..n) |> Enum.reverse() do\n          dp = List.replace_at(dp, j, rem((Enum.at(dp, j) + Enum.at(dp, j - max_val)), @mod))\n        end\n      end\n    end\n\n    Enum.at(dp, n)\n  end\nend"
}