{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "Line 1: Char 19: number-of-ways: broke its own contract",
    "full_runtime_error": "Line 1: Char 19: number-of-ways: broke its own contract\n  promised: exact-integer?\n  produced: 1.0\n  in: the range of\n      (->\n       exact-integer?\n       exact-integer?\n       exact-integer?)\n  contract from: (function number-of-ways)\n  blaming: (function number-of-ways)\n   (assuming the contract is correct)\n  context...:\n   /usr/share/racket/collects/racket/contract/private/blame.rkt:346:0: raise-blame-error\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:21:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 101028000,
    "question_id": "2882",
    "elapsed_time": 248,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "10\n2",
    "expected_output": "1",
    "task_finish_time": 1708227410004,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1502,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178480787",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-ways n x)\n  (-> exact-integer? exact-integer? exact-integer?)\n  (letrec ([mod (lambda (a b) (modulo a b))]\n           [dp (make-vector (+ n 1) 0)]\n           [max-base (floor (expt n (/ 1 x)))]\n           [helper (lambda (n x current)\n                     (if (> current max-base)\n                         (if (= n 0) 1 0)\n                         (let ([power (expt current x)])\n                           (if (> power n) \n                               0\n                               (mod (+ (helper n x (+ current 1))\n                                       (helper (- n power) x (+ current 1)))\n                                    (+ 1e9 7))))))])\n    (vector-set! dp 0 1)\n    (helper n x 1)))"
}