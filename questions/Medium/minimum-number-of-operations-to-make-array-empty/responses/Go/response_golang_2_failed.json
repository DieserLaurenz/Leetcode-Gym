{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11204000,
    "question_id": "3094",
    "elapsed_time": 134,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,1,2,2,3,3]",
    "expected_output": "-1",
    "task_finish_time": 1707876067528,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 306,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1174682423",
    "input_formatted": "[2,1,2,2,3,3]",
    "input": "[2,1,2,2,3,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(nums []int) int {\n    countMap := make(map[int]int)\n    for _, num := range nums {\n        countMap[num]++\n    }\n\n    var operations int\n    for _, count := range countMap {\n        operations += count / 3\n        count %= 3\n        if count == 2 {\n            operations++\n        }\n    }\n\n    leftover := 0\n    for _, count := range countMap {\n        leftover += count % 3\n    }\n\n    if leftover%3 != 0 {\n        return -1\n    }\n\n    return operations + leftover/3\n}"
}