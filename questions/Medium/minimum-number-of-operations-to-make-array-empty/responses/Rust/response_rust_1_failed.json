{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3796000,
    "question_id": "3094",
    "elapsed_time": 31,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876389753,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 182,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1174685233",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>) -> i32 {\n        use std::collections::HashMap;\n        \n        let mut count_map = HashMap::new();\n        for num in nums {\n            *count_map.entry(num).or_insert(0) += 1;\n        }\n        \n        let mut twos = 0;\n        let mut ones = 0;\n        for &count in count_map.values() {\n            twos += count / 2;\n            ones += count % 2;\n        }\n        \n        if (ones % 2 == 0) && (twos >= ones / 2) {\n            twos + ones / 2\n        } else {\n            -1\n        }\n    }\n}"
}