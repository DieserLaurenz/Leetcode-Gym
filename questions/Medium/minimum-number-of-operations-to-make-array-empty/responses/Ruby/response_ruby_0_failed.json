{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 223396000,
    "question_id": "3094",
    "elapsed_time": 358,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876134343,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 68,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1174682987",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_operations(nums)\n    count_map = nums.each_with_object(Hash.new(0)) { |num, count| count[num] += 1 }\n    operations = 0\n    twos = 0\n\n    count_map.each_value do |count|\n        operations += count / 3\n        twos += count % 3 / 2\n    end\n\n    operations += twos / 2\n    twos_remainder = twos % 2\n\n    if twos_remainder > 0 && count_map.any? { |_num, count| count % 3 == 1 }\n        operations += 1\n    elsif twos_remainder > 0\n        return -1\n    end\n\n    operations\nend"
}