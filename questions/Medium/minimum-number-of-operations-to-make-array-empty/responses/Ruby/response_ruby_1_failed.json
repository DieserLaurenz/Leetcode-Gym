{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 223408000,
    "question_id": "3094",
    "elapsed_time": 337,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876164041,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1174683249",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef min_operations(nums)\n    freq = Hash.new(0)\n    nums.each { |num| freq[num] += 1 }\n    ones, twos, operations = 0, 0, 0\n    \n    freq.each_value do |f|\n        operations += f / 3\n        if f % 3 == 1\n            ones += 1\n        elsif f % 3 == 2\n            twos += 1\n        end\n    end\n\n    if (ones > twos)\n        return -1 if (ones - twos) % 3 != 0\n        operations += (2 * ones - twos) / 3\n    else\n        operations += ones + (twos - ones) / 2\n    end\n\n    operations\nend"
}