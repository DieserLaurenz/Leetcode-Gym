{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25800000,
    "question_id": "3094",
    "elapsed_time": 735,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1708828300906,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185312596",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minOperations(self, nums):\n        from collections import Counter\n        count = Counter(nums)\n        ops = 0\n        pairs, triples = 0, 0\n        for c in count.values():\n            triples += c // 3\n            pairs += (c % 3) // 2\n        extra_pairs_needed = triples - pairs\n        if extra_pairs_needed > 0:\n            if extra_pairs_needed % 2 == 0 or (extra_pairs_needed % 2 == 1 and pairs > 0):\n                return triples + extra_pairs_needed // 2 + (1 if extra_pairs_needed % 2 == 1 else 0)\n            else:\n                return -1\n        return triples + pairs"
}