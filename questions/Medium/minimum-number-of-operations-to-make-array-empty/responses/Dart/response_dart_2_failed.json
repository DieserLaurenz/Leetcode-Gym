{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 189772000,
    "question_id": "3094",
    "elapsed_time": 689,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707875974697,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 504,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1174681625",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minOperations(List<int> nums) {\n    Map<int, int> countMap = {};\n    for (var num in nums) {\n      countMap[num] = (countMap[num] ?? 0) + 1;\n    }\n    int operations = 0;\n    for (var entry in countMap.entries) {\n      int value = entry.value;\n      operations += value ~/ 3; // For every three equal elements, it's one operation.\n      operations += value % 3 == 0 ? 0 : 1; // If there's a remainder of 1 or 2, it requires an additional operation.\n    }\n    // Calculate the total elements removed in the optimal operations\n    int totalElementsRemoved = countMap.entries.fold(0, (previousValue, element) => previousValue + (element.value ~/ 3) * 3 + ((element.value % 3) > 0 ? ((element.value % 3) == 2 ? 2 : 3) : 0));\n    // If the total elements removed equals the length of the original array, return the operations, else it's not possible (-1)\n    return totalElementsRemoved == nums.length ? operations : -1;\n  }\n}"
}