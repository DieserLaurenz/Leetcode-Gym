{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 185124000,
    "question_id": "3094",
    "elapsed_time": 1259,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876691089,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 100,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174687847",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer]) :: integer\n  def min_operations(nums) do\n    nums\n    |> Enum.frequencies()\n    |> Enum.reduce({0, 0}, fn {_, v}, {twos, threes} ->\n      {twos + div(v, 2), threes + div(v, 3)}\n    end)\n    |> case do\n      {twos, threes} when twos >= threes ->\n        twos + div(threes, 2)\n      _ -> -1\n    end\n  end\nend"
}