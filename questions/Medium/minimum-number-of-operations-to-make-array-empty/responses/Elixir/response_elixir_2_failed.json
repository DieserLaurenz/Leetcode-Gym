{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 205824000,
    "question_id": "3094",
    "elapsed_time": 1079,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876749202,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 170,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174688357",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer]) :: integer\n  def min_operations(nums) do\n    nums\n    |> Enum.frequencies()\n    |> Enum.map(fn {_key, value} -> rem(value, 3) end)\n    |> Enum.reduce(%{0 => 0, 1 => 0, 2 => 0}, fn rem, acc ->\n      Map.update!(acc, rem, &(&1 + 1))\n    end)\n    |> check_possibility()\n  end\n\n  defp check_possibility(%{0 => zeros, 1 => ones, 2 => twos}) do\n    total_ops = div(ones + 2 * twos, 3)\n    if ones == twos or (ones > 0 and twos == 0 and rem(ones - 1, 3) == 0) do\n      total_ops\n    else\n      -1\n    end\n  end\nend"
}