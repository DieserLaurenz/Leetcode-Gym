{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 201228000,
    "question_id": "3094",
    "elapsed_time": 1069,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876720348,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 423,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174688091",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer]) :: integer\n  def min_operations(nums) do\n    nums\n    |> Enum.frequencies()\n    |> Enum.reduce({0, 0, 0}, fn {_, v}, {ops, twos, ones} ->\n      case {div(v, 3), rem(v, 3)} do\n        {d, 2} -> {ops + d, twos + 1, ones}\n        {d, 1} -> {ops + d, twos, ones + 1}\n        {d, _} -> {ops + d, twos, ones}\n      end\n    end)\n    |> check_possibility()\n  end\n\n  defp check_possibility({ops, twos, ones}) do\n    if ones <= twos, do: ops + twos, else: -1\n  end\nend"
}