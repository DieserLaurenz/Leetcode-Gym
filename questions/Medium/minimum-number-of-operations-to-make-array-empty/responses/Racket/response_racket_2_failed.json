{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 135856000,
    "question_id": "3094",
    "elapsed_time": 624,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876537478,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 252,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1174686504",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([counts (make-hash)])\n    (for ([num nums])\n      (hash-update! counts num add1 0))\n    (let loop ([ops 0] [counts counts])\n      (define values (hash-values counts))\n      (define pairs (foldl (lambda (v acc) (+ acc (quotient v 2))) 0 values))\n      (define left (foldl (lambda (v acc) (+ acc (remainder v 3))) 0 values))\n      (if (and (= left 0) (not (hash-empty? counts)))\n          (+ ops pairs)\n          (if (zero? left)\n              (+ ops pairs)\n              -1)))))"
}