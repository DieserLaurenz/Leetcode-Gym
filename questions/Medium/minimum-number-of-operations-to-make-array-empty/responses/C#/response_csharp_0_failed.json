{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65276000,
    "question_id": "3094",
    "elapsed_time": 419,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[14,12,14,14,12,14,14,12,12,12,12,14,14,12,14,14,14,12,12]",
    "expected_output": "7",
    "task_finish_time": 1707866480201,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 437,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1174607822",
    "input_formatted": "[14,12,14,14,12,14,14,12,12,12,12,14,14,12,14,14,14,12,12]",
    "input": "[14,12,14,14,12,14,14,12,12,12,12,14,14,12,14,14,14,12,12]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinOperations(int[] nums) {\n        Dictionary<int, int> countMap = new Dictionary<int, int>();\n        foreach (int num in nums) {\n            if (countMap.ContainsKey(num)) {\n                countMap[num]++;\n            } else {\n                countMap[num] = 1;\n            }\n        }\n\n        int operations = 0;\n        foreach (var pair in countMap) {\n            int freq = pair.Value;\n            if (freq % 2 == 0) {\n                operations += freq / 2;\n            } else if (freq % 3 == 0) {\n                operations += freq / 3;\n            } else if ((freq - 2) % 3 == 0 && freq > 2) {\n                operations += 1 + (freq - 2) / 3;\n            } else {\n                return -1;\n            }\n        }\n\n        return operations;\n    }\n}"
}