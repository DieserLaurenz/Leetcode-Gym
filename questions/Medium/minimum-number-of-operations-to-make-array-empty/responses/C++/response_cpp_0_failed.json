{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 95308000,
    "question_id": "3094",
    "elapsed_time": 155,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707866001529,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 180,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1174604131",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        unordered_map<int, int> count;\n        for (int num : nums) {\n            ++count[num];\n        }\n        int operations = 0;\n        int remainTwo = 0; // Tracks the number of elements that can form pairs but not triples\n        for (auto& [_, c] : count) {\n            operations += c / 3;\n            c %= 3;\n            if (c == 2) {\n                ++remainTwo;\n            }\n        }\n        int pairsNeeded = remainTwo / 2; // Each pair of \"2s\" can be reduced by one operation\n        operations += pairsNeeded;\n        remainTwo %= 2; // Check if there's an odd pair out\n        if (remainTwo > 0) { // If there's an odd pair, it cannot be matched\n            return -1;\n        }\n        return operations;\n    }\n};"
}