{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 95388000,
    "question_id": "3094",
    "elapsed_time": 153,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707866030901,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 223,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1174604355",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        unordered_map<int, int> freq;\n        for (int num : nums) {\n            freq[num]++;\n        }\n        int ops = 0, leftOverTwos = 0, leftOverOnes = 0;\n        for (auto& [num, count] : freq) {\n            ops += count / 3;\n            if (count % 3 == 1) {\n                leftOverOnes++;\n                ops++;\n            } else if (count % 3 == 2) {\n                leftOverTwos++;\n            }\n        }\n        if (leftOverOnes > leftOverTwos) return -1;\n        return ops + (leftOverTwos - leftOverOnes) / 2;\n    }\n};"
}