{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 181900000,
    "question_id": "3094",
    "elapsed_time": 2036,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876594222,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 146,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174687005",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_operations(Nums :: [integer()]) -> integer().\nmin_operations(Nums) ->\n    CountMap = lists:foldl(fun(X, Acc) -> maps:update_with(X, fun(C) -> C + 1 end, 1, Acc) end, #{}, Nums),\n    {Result, _} = maps:fold(fun(_, V, {Ops, ThreeRem}) ->\n                                ThreeOps = V div 3,\n                                NewThreeRem = ThreeRem + (V rem 3),\n                                NewOps = Ops + ThreeOps + (NewThreeRem div 3),\n                                {NewOps, NewThreeRem rem 3}\n                            end, {0, 0}, CountMap),\n    TotalElems = lists:sum(maps:values(CountMap)),\n    if\n        TotalElems rem 2 == 0 -> Result;\n        true -> -1\n    end."
}