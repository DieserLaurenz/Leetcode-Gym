{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63996000,
    "question_id": "3094",
    "elapsed_time": 125,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707866701564,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 111,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1174609443",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(nums: number[]): number {\n    const countMap = new Map<number, number>();\n    nums.forEach(num => {\n        countMap.set(num, (countMap.get(num) || 0) + 1);\n    });\n\n    let operations = 0;\n    let remainTwo = 0;\n    for (const [_, count] of countMap) {\n        operations += Math.floor(count / 3);\n        const remain = count % 3;\n        if (remain === 2) remainTwo++;\n    }\n\n    const totalPairs = Math.floor(nums.length / 3) * 2 + remainTwo;\n    if (nums.length % 3 === 0 && totalPairs % 2 === 0) return operations + totalPairs / 2;\n    if (nums.length % 3 === 1 && (totalPairs - 1) % 2 === 0) return operations + (totalPairs - 1) / 2;\n    if (nums.length % 3 === 2 && totalPairs % 2 === 0) return operations + totalPairs / 2;\n\n    return -1;\n};"
}