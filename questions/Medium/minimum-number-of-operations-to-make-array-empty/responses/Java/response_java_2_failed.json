{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62708000,
    "display_runtime": "20",
    "question_id": "3094",
    "elapsed_time": 359,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707866161582,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 261,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174605362",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(int[] nums) {\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : nums) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n\n        int operations = 0, pairs = 0, singles = 0;\n        for (int count : freq.values()) {\n            operations += count / 3;\n            if (count % 3 == 2) pairs++;\n            if (count % 3 == 1) singles++;\n        }\n\n        if (singles != pairs || (singles + 2 * pairs) % 3 != 0) return -1;\n        return operations + singles;\n    }\n}"
}