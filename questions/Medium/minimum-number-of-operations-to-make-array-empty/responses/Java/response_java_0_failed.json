{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55500000,
    "display_runtime": "1007",
    "question_id": "3094",
    "elapsed_time": 1433,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707866102810,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 504,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174604902",
    "input_formatted": "[2,3,3,2,2,4,2,3,4]",
    "input": "[2,3,3,2,2,4,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(int[] nums) {\n        int[] count = new int[1000001];\n        for (int num : nums) {\n            count[num]++;\n        }\n        \n        int operations = 0;\n        for (int c : count) {\n            if (c % 3 == 0 && c != 0) {\n                operations += c / 3;\n            } else if ((c - 2) % 3 == 0 && c != 1) {\n                operations += (c - 2) / 3 + 1;\n            } else if (c != 0) {\n                return -1;\n            }\n        }\n        \n        return operations;\n    }\n}"
}