{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 14: java.lang.ArrayIndexOutOfBoundsException: -1 (at $anonfun$minOperations$4)",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: -1\nLine 14: Solution$.$anonfun$minOperations$4 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 8: Solution$.minOperations (solution.scala)\nLine 23: Main$.__helper__ (solution.scala)\nLine 37: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 55204000,
    "question_id": "3094",
    "elapsed_time": 493,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,3,2,2,4,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1707876302063,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 748,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1174684471",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minOperations(nums: Array[Int]): Int = {\n        val countMap = nums.groupBy(identity).mapValues(_.length)\n        val freq = new Array[Int](nums.length + 1)\n        countMap.values.foreach(count => freq(count) += 1)\n\n        var res = 0\n        for (i <- freq.indices.reverse) {\n            if (freq(i) > 0) {\n                res += freq(i)\n                val next = Math.min(freq(i), freq(i - 1))\n                freq(i - 1) -= next\n                freq(i - 2) += next\n                freq(i - 3) += freq(i) - next\n            }\n        }\n        if (freq(0) == nums.length) res else -1\n    }\n}"
}