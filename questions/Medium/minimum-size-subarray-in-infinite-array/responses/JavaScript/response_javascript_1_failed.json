{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61188000,
    "question_id": "3141",
    "elapsed_time": 166,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707971711525,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1175687811",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar minSizeSubarray = function(nums, target) {\n    let n = nums.length;\n    let minLen = Infinity;\n    let sum = 0;\n    for (let i = 0; i < n; i++) sum += nums[i];\n    if (sum < target) return -1;\n    \n    let prefixSums = new Array(2 * n + 1).fill(0);\n    for (let i = 0; i < 2 * n; i++) {\n        prefixSums[i + 1] = prefixSums[i] + nums[i % n];\n    }\n    \n    for (let i = 0; i < n; i++) {\n        let start = i, end = i + n, mid, found = false;\n        while (start <= end) {\n            mid = Math.floor((start + end) / 2);\n            let currSum = prefixSums[mid + 1] - prefixSums[i];\n            if (currSum >= target) {\n                minLen = Math.min(minLen, mid - i + 1);\n                end = mid - 1;\n                found = true;\n            } else {\n                start = mid + 1;\n            }\n        }\n        if (!found) break;\n    }\n    \n    return minLen === Infinity ? -1 : minLen;\n};"
}