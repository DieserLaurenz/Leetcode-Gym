{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 82440000,
    "question_id": "3141",
    "elapsed_time": 205,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707971670763,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 140,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1175687369",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar minSizeSubarray = function(nums, target) {\n    let sum = 0;\n    for (let num of nums) {\n        sum += num;\n    }\n    if (sum === target) return nums.length;\n    if (sum < target) return -1;\n    \n    let prefixSum = new Map([[0, -1]]);\n    let currentSum = 0, minLength = Infinity;\n    for (let i = 0; i < nums.length * 2; i++) {\n        currentSum += nums[i % nums.length];\n        if (prefixSum.has(currentSum - target)) {\n            minLength = Math.min(minLength, i - prefixSum.get(currentSum - target));\n        }\n        // To handle cases where the subarray starts after the first iteration over nums\n        if (i < nums.length) {\n            prefixSum.set(currentSum, i);\n        }\n    }\n    return minLength === Infinity ? -1 : minLength + 1;\n};"
}