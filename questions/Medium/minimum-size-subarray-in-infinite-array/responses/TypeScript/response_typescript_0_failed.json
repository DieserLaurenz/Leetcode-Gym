{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 89520000,
    "question_id": "3141",
    "elapsed_time": 307,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,1,5,7,7,1,6,3]\n39",
    "expected_output": "9",
    "task_finish_time": 1707971796537,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 364,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175688797",
    "input_formatted": "[2,1,5,7,7,1,6,3], 39",
    "input": "[2,1,5,7,7,1,6,3]\n39",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minSizeSubarray(nums: number[], target: number): number {\n    let sum = 0;\n    for (let num of nums) {\n        sum += num;\n    }\n\n    if (sum === target) return nums.length;\n    if (sum < target) return -1;\n\n    let minLen = Infinity;\n    let prefixSums = new Map<number, number>();\n    prefixSums.set(0, -1);\n    let currentSum = 0;\n\n    for (let i = 0; i < nums.length * 2; i++) {\n        currentSum += nums[i % nums.length];\n        if (prefixSums.has(currentSum - target)) {\n            minLen = Math.min(minLen, i - prefixSums.get(currentSum - target)!);\n        }\n        prefixSums.set(currentSum, i);\n    }\n\n    return minLen === Infinity ? -1 : minLen % nums.length === 0 ? nums.length : minLen % nums.length;\n}"
}