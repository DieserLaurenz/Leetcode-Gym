{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67604000,
    "question_id": "3141",
    "elapsed_time": 203,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707971829067,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 277,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175689202",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minSizeSubarray(nums: number[], target: number): number {\n    let n = nums.length;\n    let prefixSum = new Array(2 * n + 1).fill(0);\n    for (let i = 0; i < 2 * n; i++) {\n        prefixSum[i + 1] = prefixSum[i] + nums[i % n];\n    }\n\n    if (prefixSum[n] === target) return n;\n    if (prefixSum[n] < target && target % prefixSum[n] === 0) return n * (target / prefixSum[n]);\n    if (prefixSum[n] < target && prefixSum[2 * n] < target) return -1;\n\n    let minLen = Infinity;\n    for (let i = 0; i < n; i++) {\n        let targetSum = target;\n        let low = i + 1, high = 2 * n;\n        while (low <= high) {\n            let mid = Math.floor((low + high) / 2);\n            let currentSum = prefixSum[mid] - prefixSum[i];\n            if (currentSum < targetSum) {\n                low = mid + 1;\n            } else {\n                minLen = Math.min(minLen, mid - i);\n                high = mid - 1;\n            }\n        }\n    }\n\n    return minLen === Infinity ? -1 : minLen;\n}"
}