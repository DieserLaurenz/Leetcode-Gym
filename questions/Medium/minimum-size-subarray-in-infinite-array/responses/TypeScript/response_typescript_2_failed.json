{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63572000,
    "question_id": "3141",
    "elapsed_time": 4023,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707971866057,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 163,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175689628",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minSizeSubarray(nums: number[], target: number): number {\n    let totalSum = nums.reduce((a, b) => a + b, 0);\n    if (totalSum < target) return -1;\n\n    let ans = Number.MAX_SAFE_INTEGER;\n    let prefixSums = new Map();\n    prefixSums.set(0, -1);\n    let currentSum = 0;\n\n    for (let i = 0; i < nums.length; ++i) {\n        currentSum += nums[i];\n        if (currentSum >= target) {\n            let needed = currentSum - target;\n            if (prefixSums.has(needed)) {\n                ans = Math.min(ans, i - prefixSums.get(needed));\n            }\n            if (currentSum === target) ans = Math.min(ans, i + 1);\n        }\n\n        // Attempt to build a second round in the prefix sum array to handle circular cases\n        for (let j = 0; j < nums.length && currentSum + totalSum - nums[j] >= target; ++j) {\n            let newSum = currentSum + totalSum - nums[j];\n            let needed = newSum - target;\n            if (prefixSums.has(needed)) {\n                ans = Math.min(ans, nums.length + i - prefixSums.get(needed) - 1);\n            }\n            currentSum = newSum;\n        }\n\n        prefixSums.set(currentSum, i);\n    }\n\n    return ans === Number.MAX_SAFE_INTEGER ? -1 : ans;\n}"
}