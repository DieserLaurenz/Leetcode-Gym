{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20992000,
    "question_id": "3141",
    "elapsed_time": 468,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1708838528370,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 223,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185472840",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minSizeSubarray(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        sum_ = 0\n        min_len = float('inf')\n        left = 0\n\n        for right in range(n):\n            sum_ += nums[right]\n            while sum_ >= target:\n                min_len = min(min_len, right - left + 1)\n                sum_ -= nums[left]\n                left += 1\n        \n        # Check if wrapping is beneficial\n        sum_ = 0\n        nums_double = nums * 2\n        for right in range(n, 2*n):\n            sum_ += nums_double[right]\n            while sum_ >= target:\n                min_len = min(min_len, right - left + 1)\n                sum_ -= nums_double[left]\n                left += 1\n\n        return min_len if min_len != float('inf') else -1"
}