{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 23020000,
    "question_id": "3141",
    "elapsed_time": 11010,
    "compare_result": "0010010000000000000010000000000001001000101000000110010010001001010100000000000010000001011000110100101100001000000100000000010000010000010000000110100000101100000001000000000101101000001000000000001001000000100000000000110001001000000000001000001010100001000101100000100110000001000010000000000110111000000000000000000001000100000000000000010010110000100001010000000110000001000000000001000000000100100001000011000000000000100110010000010000000000000001010000000010000000100000000010000001000010000101000000100000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1708838496517,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 100,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185472378",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minSizeSubarray(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        prefix_sum = [0]\n        for num in nums:\n            prefix_sum.append(prefix_sum[-1] + num)\n\n        if prefix_sum[-1] == 0:\n            return -1\n\n        total_length = len(nums)\n        min_length = float('inf')\n\n        for i in range(total_length):\n            for j in range(i+1, total_length+1):\n                sum_ij = prefix_sum[j] - prefix_sum[i]\n                times = (target + sum_ij - 1) // sum_ij\n                if sum_ij * times == target:\n                    min_length = min(min_length, j - i)\n                    break\n\n        return min_length if min_length != float('inf') else -1"
}