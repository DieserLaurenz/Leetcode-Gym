{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 16: Char 21: Error: The getter 'Math' isn't defined for the class 'Solution'.",
    "full_runtime_error": "Line 16: Char 21: Error: The getter 'Math' isn't defined for the class 'Solution'.\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'Math'.\n        minLength = Math.min(minLength, end - start + 1);\n                    ^^^^",
    "status_runtime": "N/A",
    "memory": 148336000,
    "question_id": "3141",
    "elapsed_time": 334,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707972409053,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1175696309",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minSizeSubarray(List<int> nums, int target) {\n    final int n = nums.length;\n    int minLength = n + 1;\n    List<int> prefixSums = List.filled(n * 2, 0);\n    for (int i = 0; i < n * 2; i++) {\n      prefixSums[i] = nums[i % n] + (i == 0 ? 0 : prefixSums[i - 1]);\n    }\n\n    for (int start = 0; start < n; start++) {\n      int end = start;\n      while (end < start + n && prefixSums[end] - (start == 0 ? 0 : prefixSums[start - 1]) < target) {\n        end++;\n      }\n      if (end < start + n) {\n        minLength = Math.min(minLength, end - start + 1);\n      }\n    }\n\n    return minLength <= n ? minLength : -1;\n  }\n}"
}