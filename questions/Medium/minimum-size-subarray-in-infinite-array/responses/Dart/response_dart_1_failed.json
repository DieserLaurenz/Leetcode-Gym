{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 5: Char 19: Error: Member not found: 'max'.",
    "full_runtime_error": "Line 5: Char 19: Error: Member not found: 'max'.\n    int ans = int.max;\n                  ^^^\nLine 29: Char 23: Error: Member not found: 'max'.\n    return ans == int.max ? -1 : ans;\n                      ^^^",
    "status_runtime": "N/A",
    "memory": 150828000,
    "question_id": "3141",
    "elapsed_time": 336,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707972376047,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1175695923",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minSizeSubarray(List<int> nums, int target) {\n    int n = nums.length;\n    int sum = 0;\n    int ans = int.max;\n    int left = 0;\n\n    // Calculate the total sum of the array to check if it's possible to reach the target\n    for (int num in nums) {\n      sum += num;\n    }\n    if (sum == target) return n; // If the total sum equals to target, then the whole array is the answer\n    if (sum < target) return -1; // If total sum is less than target, it's impossible to find a subarray\n\n    // Extend the array to simulate the infinite appending\n    List<int> extendedNums = List.from(nums)..addAll(nums);\n\n    sum = 0; // Reset sum for the sliding window calculation\n    for (int right = 0; right < extendedNums.length; right++) {\n      sum += extendedNums[right];\n      while (sum - extendedNums[left] >= target && left < right) {\n        sum -= extendedNums[left++];\n      }\n      if (sum >= target) {\n        ans = min(ans, right - left + 1);\n      }\n    }\n\n    return ans == int.max ? -1 : ans;\n  }\n\n  int min(int a, int b) => a < b ? a : b;\n}"
}