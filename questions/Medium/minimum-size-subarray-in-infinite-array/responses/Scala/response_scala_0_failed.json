{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 77132000,
    "question_id": "3141",
    "elapsed_time": 1134,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707981842252,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 238,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1175811921",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minSizeSubarray(nums: Array[Int], target: Int): Int = {\n        val n = nums.length\n        var sum = 0\n        var minLen = Int.MaxValue\n        var j = 0\n\n        // Calculate the sum of all elements in nums\n        for (i <- nums.indices) sum += nums(i)\n\n        // If the sum is less than target, it's impossible to find such subarray\n        if (sum < target) return -1\n\n        sum = 0 // Reset sum to use it for subarray sum calculation\n\n        for (i <- 0 until n * 2) {\n            sum += nums(i % n) // Use modulo to simulate infinite array\n            while (sum >= target) {\n                minLen = math.min(minLen, i - j + 1)\n                sum -= nums(j % n)\n                j += 1\n            }\n        }\n\n        if (minLen == Int.MaxValue) -1 else minLen\n    }\n}"
}