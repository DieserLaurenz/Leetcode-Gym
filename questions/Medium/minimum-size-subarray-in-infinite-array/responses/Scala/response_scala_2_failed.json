{
    "status_code": 20,
    "lang": "scala",
    "run_success": false,
    "compile_error": "Line 18: error: reassignment to val (in solution.scala)",
    "full_compile_error": "Line 18: error: reassignment to val (in solution.scala)\n                    start = mid + 1\n                          ^",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3141",
    "task_finish_time": 1707981923261,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1175812949",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minSizeSubarray(nums: Array[Int], target: Int): Int = {\n        val sums = Array.fill(nums.length * 2 + 1)(0)\n        for (i <- nums.indices) sums(i + 1) = sums(i) + nums(i)\n        for (i <- nums.indices) sums(i + nums.length + 1) = sums(i + nums.length) + nums(i)\n        var result = Int.MaxValue\n        \n        for (start <- nums.indices) {\n            var end = start + nums.length\n            var found = false\n            while (start < end) {\n                val mid = (start + end) / 2\n                if (sums(mid + 1) - sums(mid + 1 - nums.length) >= target) {\n                    found = true\n                    result = result.min(mid + 1 - nums.length)\n                    end = mid\n                } else {\n                    start = mid + 1\n                }\n            }\n            if (!found && sums(start + 1) - sums(start + 1 - nums.length) >= target) {\n                result = result.min(start + 1 - nums.length)\n            }\n        }\n        \n        if (result == Int.MaxValue) -1 else result\n    }\n}"
}