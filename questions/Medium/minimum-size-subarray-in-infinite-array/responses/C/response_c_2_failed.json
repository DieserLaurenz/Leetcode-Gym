{
    "status_code": 15,
    "lang": "c",
    "run_success": false,
    "runtime_error": "Line 17: Char 19: runtime error: index 6 out of bounds for type 'int [*]' [solution.c]",
    "full_runtime_error": "Line 17: Char 19: runtime error: index 6 out of bounds for type 'int [*]' [solution.c]",
    "status_runtime": "N/A",
    "memory": 5468000,
    "question_id": "3141",
    "elapsed_time": 20,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707971482354,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175685250",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "int minSizeSubarray(int* nums, int numsSize, int target) {\n    int totalSum = 0;\n    for (int i = 0; i < numsSize; i++) {\n        totalSum += nums[i];\n    }\n    if (totalSum == target) {\n        return numsSize;\n    }\n    if (totalSum < target) {\n        return -1;\n    }\n\n    int result = INT_MAX;\n    int prefixSums[numsSize * 2];\n    prefixSums[0] = 0;\n    for (int i = 0; i < numsSize * 2; i++) {\n        prefixSums[i + 1] = prefixSums[i] + nums[i % numsSize];\n    }\n\n    for (int i = 0; i < numsSize; i++) {\n        int sum = 0;\n        for (int j = i; j < i + numsSize; j++) {\n            sum += nums[j % numsSize];\n            if (sum >= target) {\n                result = result < (j - i + 1) ? result : (j - i + 1);\n                break;\n            }\n        }\n    }\n\n    return result == INT_MAX ? -1 : result;\n}"
}