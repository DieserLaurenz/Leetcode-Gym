{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9524000,
    "question_id": "3141",
    "elapsed_time": 38,
    "compare_result": "1111111111010011111111111011100111101101111100011111111111001011111111111111101111101111111111111111111110011111101111101101111111011110011111000111101111111100111111101111101101101100111101111111101011011111100111111100110111111101111001011111011110110111101111111010111111100011100110101111111111111110110111011110011101110111110101011101110110110010111111111110111111101111110110110111000101110110101111010111111111011111111111110111111011100011111111111111100010100101101010111110111111001110101111111111111111111111111111110000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,2,2,1,2,1,2,1,2,1]\n83",
    "expected_output": "53",
    "task_finish_time": 1707971448628,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 415,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175684853",
    "input_formatted": "[1,2,2,2,1,2,1,2,1,2,1], 83",
    "input": "[1,2,2,2,1,2,1,2,1,2,1]\n83",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n\nint minSizeSubarray(int* nums, int numsSize, int target) {\n    int prefixSum[2 * numsSize + 1];\n    prefixSum[0] = 0;\n    for (int i = 0; i < 2 * numsSize; i++) {\n        prefixSum[i + 1] = prefixSum[i] + nums[i % numsSize];\n        if (i >= numsSize && prefixSum[i + 1] - prefixSum[i + 1 - numsSize] == target) {\n            return numsSize;\n        }\n    }\n\n    int minLen = INT_MAX;\n    for (int right = 1; right <= 2 * numsSize; right++) {\n        for (int left = 0; left < right; left++) {\n            if (prefixSum[right] - prefixSum[left] == target) {\n                minLen = minLen < (right - left) ? minLen : (right - left);\n            }\n        }\n    }\n\n    return minLen == INT_MAX ? -1 : minLen;\n}"
}