{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9536000,
    "question_id": "3141",
    "elapsed_time": 43,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707971413397,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 139,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175684468",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n\nint minSizeSubarray(int* nums, int numsSize, int target) {\n    int sum = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        sum += nums[i];\n    }\n\n    if (sum == target) return numsSize;\n    if (sum < target) return -1;\n\n    int minLen = INT_MAX, currentSum = 0;\n    for (int i = 0, j = 0; i < 2 * numsSize; ++i) {\n        currentSum += nums[i % numsSize];\n        while (currentSum - (i - j >= numsSize ? nums[j % numsSize] : 0) >= target) {\n            currentSum -= nums[j % numsSize];\n            ++j;\n        }\n        if (currentSum >= target) {\n            minLen = minLen < i - j + 1 ? minLen : i - j + 1;\n        }\n    }\n\n    return minLen == INT_MAX ? -1 : minLen;\n}"
}