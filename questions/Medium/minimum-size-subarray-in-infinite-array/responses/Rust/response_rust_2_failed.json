{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3296000,
    "question_id": "3141",
    "elapsed_time": 23,
    "compare_result": "0000110010000000000011000000100000100000001000010110010000001000010100001101000000000000001100100100101000000000000000100000010100010000000000000110000010001000000001000000000001101000000000000000001001000100000010000000010001001000110000000000000000100011100100000000100010000000000010000000000100111010010000010000000100000100100000001000010110100000100001010000000111100001000000100100000000000000100000000011000000001011100010010000000010000001001000010000000000000000100000000010010111000110000100000000100000000000010000000100001",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707982070101,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 104,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175814603",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_size_subarray(nums: Vec<i32>, target: i32) -> i32 {\n        let total_sum: i32 = nums.iter().sum();\n        if total_sum < target {\n            return -1;\n        }\n\n        let (mut min_len, n) = (i32::MAX as usize, nums.len());\n        let mut prefix_sums = vec![0; n * 2];\n        for i in 0..n * 2 {\n            prefix_sums[i] = nums[i % n] + if i == 0 { 0 } else { prefix_sums[i - 1] };\n            if prefix_sums[i] >= target {\n                let mut left = 0;\n                let mut right = i;\n                while left < right {\n                    let mid = (left + right) / 2;\n                    let sum = if mid > 0 { prefix_sums[i] - prefix_sums[mid - 1] } else { prefix_sums[i] };\n                    if sum >= target {\n                        right = mid;\n                    } else {\n                        left = mid + 1;\n                    }\n                }\n                min_len = min_len.min(i - left + 1);\n            }\n        }\n\n        if min_len == i32::MAX as usize {\n            -1\n        } else {\n            min_len as i32\n        }\n    }\n}"
}