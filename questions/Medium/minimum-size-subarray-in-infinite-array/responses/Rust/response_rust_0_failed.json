{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4624000,
    "question_id": "3141",
    "elapsed_time": 42,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n4",
    "expected_output": "2",
    "task_finish_time": 1707982005554,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 334,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175813916",
    "input_formatted": "[1,1,1,2,3], 4",
    "input": "[1,1,1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_size_subarray(nums: Vec<i32>, target: i32) -> i32 {\n        use std::collections::HashMap;\n\n        let sum: i32 = nums.iter().sum();\n        if sum == target {\n            return nums.len() as i32;\n        } else if sum < target && target % sum == 0 {\n            return (nums.len() * (target / sum) as usize) as i32;\n        } else if sum < target {\n            return -1;\n        }\n\n        let mut prefix_sum = 0;\n        let mut min_len = i32::MAX;\n        let mut sum_map = HashMap::new();\n        sum_map.insert(0, -1);\n\n        for (i, &num) in nums.iter().enumerate() {\n            prefix_sum += num;\n            if prefix_sum == target {\n                min_len = min_len.min((i + 1) as i32);\n            }\n            let remain = prefix_sum - target;\n            if let Some(&j) = sum_map.get(&remain) {\n                min_len = min_len.min((i as i32) - j);\n            }\n            sum_map.insert(prefix_sum, i as i32);\n\n            if prefix_sum > target && prefix_sum % sum == target {\n                min_len = min_len.min(nums.len() as i32);\n            }\n        }\n\n        if min_len == i32::MAX { -1 } else { min_len }\n    }\n}"
}