{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3260000,
    "question_id": "3141",
    "elapsed_time": 21,
    "compare_result": "1101000010000000010001000001000000100000000000001001010010001000010011000010001100101010000000000000001000000100001000100000111000000000000000000111000100100000000011100000000000100000010000010100101011000101000011000000010011001000100000010000010000100111000000000000000000100000000010000010001101100100100101000000000000000100100000001000010000100000110011110000000100000001000000100000000000000000001000000010100000000101010010110010110010000001000011010000000000000000100000000110001111000110000000000000000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707982037665,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 111,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175814252",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_size_subarray(nums: Vec<i32>, target: i32) -> i32 {\n        let mut result = i32::MAX;\n        let mut sum = 0;\n        let mut left = 0;\n        let n = nums.len();\n        let mut prefix_sum = vec![0; n * 2];\n        for i in 0..n * 2 {\n            sum += nums[i % n];\n            prefix_sum[i] = sum;\n            while sum - (if left == 0 { 0 } else { prefix_sum[left - 1] }) >= target {\n                sum -= nums[left % n];\n                left += 1;\n            }\n            if i >= n - 1 && sum >= target {\n                result = result.min((i - left + 1) as i32);\n            }\n        }\n        if result == i32::MAX { -1 } else { result }\n    }\n}"
}