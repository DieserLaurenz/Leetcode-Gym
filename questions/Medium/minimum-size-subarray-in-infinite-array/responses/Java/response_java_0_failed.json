{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55772000,
    "display_runtime": "27",
    "question_id": "3141",
    "elapsed_time": 294,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707971284627,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 262,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175683057",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minSizeSubarray(int[] nums, int target) {\n        int n = nums.length;\n        int minLen = Integer.MAX_VALUE;\n        int[] prefixSum = new int[2 * n + 1];\n        for (int i = 0; i < 2 * n; i++) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i % n];\n        }\n        \n        for (int i = 0; i < n; i++) {\n            int need = target + prefixSum[i];\n            int low = i + 1, high = 2 * n;\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                if (prefixSum[mid] < need) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n            if (low <= 2 * n) {\n                minLen = Math.min(minLen, low - i);\n            }\n        }\n        \n        return minLen == Integer.MAX_VALUE ? -1 : minLen;\n    }\n}"
}