{
    "status_code": 15,
    "lang": "java",
    "run_success": false,
    "runtime_error": "Line 16: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 6",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 6\n  at line 16, Solution.minSizeSubarray\n  at line 54, __DriverSolution__.__helper__\n  at line 87, __Driver__.main",
    "status_runtime": "N/A",
    "memory": 40440000,
    "question_id": "3141",
    "elapsed_time": 147,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707971318318,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175683422",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minSizeSubarray(int[] nums, int target) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        if (sum < target) return -1; // If total sum is less than target, it's impossible to find such subarray\n\n        int prefixSum = 0, minLen = Integer.MAX_VALUE;\n        int[] prefixSums = new int[nums.length * 2];\n        for (int i = 0; i < nums.length * 2; i++) {\n            prefixSum += nums[i % nums.length];\n            prefixSums[i] = prefixSum;\n            if (prefixSum >= target) {\n                for (int j = i - nums.length; j < i; j++) {\n                    if (prefixSum - prefixSums[j] >= target) {\n                        minLen = Math.min(minLen, i - j);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return minLen == Integer.MAX_VALUE ? -1 : minLen - nums.length + 1;\n    }\n}"
}