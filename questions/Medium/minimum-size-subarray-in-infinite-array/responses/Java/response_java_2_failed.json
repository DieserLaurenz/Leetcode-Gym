{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 47588000,
    "question_id": "3141",
    "elapsed_time": 3995,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707971355261,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 286,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175683798",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minSizeSubarray(int[] nums, int target) {\n        int n = nums.length, minSize = Integer.MAX_VALUE;\n        int[] prefixSums = new int[n + 1];\n        for (int i = 0; i < n; ++i) prefixSums[i + 1] = prefixSums[i] + nums[i];\n        \n        if (prefixSums[n] == 0) return -1; // If the sum of all elements is 0, can't form target\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j < n; ++j) {\n                int sum = 0;\n                int rounds = target / prefixSums[n];\n                if (rounds * prefixSums[n] < target) rounds++;\n                sum += rounds * prefixSums[n];\n                int extra = target - (sum - prefixSums[n]);\n                \n                if (prefixSums[j + 1] - prefixSums[i] >= extra) {\n                    int size = rounds * n + (j - i + 1) - n;\n                    if (size < minSize) minSize = size;\n                }\n            }\n        }\n\n        return minSize == Integer.MAX_VALUE ? -1 : minSize;\n    }\n}"
}