{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24972000,
    "question_id": "3141",
    "elapsed_time": 284,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n4",
    "expected_output": "2",
    "task_finish_time": 1707971989549,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 192,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175691196",
    "input_formatted": "[1,1,1,2,3], 4",
    "input": "[1,1,1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function minSizeSubarray($nums, $target) {\n        $n = count($nums);\n        $sum = array_sum($nums);\n        if ($sum < $target) return -1; // Early exit if total sum is less than target\n\n        $prefixSums = [0];\n        for ($i = 0; $i < $n * 2; $i++) {\n            $prefixSums[] = $prefixSums[$i] + $nums[$i % $n];\n            if ($prefixSums[$i + 1] >= $target) break; // No need to continue if we already have enough sum\n        }\n\n        $minLength = PHP_INT_MAX;\n        $left = 0;\n        for ($right = 1; $right < count($prefixSums); $right++) {\n            while ($prefixSums[$right] - $prefixSums[$left] >= $target) {\n                $minLength = min($minLength, $right - $left);\n                $left++;\n            }\n        }\n\n        return $minLength === PHP_INT_MAX ? -1 : $minLength;\n    }\n}"
}