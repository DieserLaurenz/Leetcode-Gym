{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25236000,
    "question_id": "3141",
    "elapsed_time": 242,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707971957430,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 258,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175690817",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function minSizeSubarray($nums, $target) {\n        $minLength = PHP_INT_MAX;\n        $sum = 0;\n        $left = 0;\n        $n = count($nums);\n        $found = false;\n\n        for ($i = 0; $i < $n; $i++) {\n            $sum += $nums[$i];\n            while ($sum >= $target) {\n                $found = true;\n                $minLength = min($minLength, $i - $left + 1);\n                $sum -= $nums[$left++];\n            }\n        }\n\n        // Attempt to find in the circular part\n        for ($i = 0; $i < $n - 1; $i++) {\n            $sum += $nums[$i % $n];\n            while ($sum >= $target) {\n                $found = true;\n                $minLength = min($minLength, $i - $left + 1 + $n);\n                $sum -= $nums[$left++ % $n];\n            }\n        }\n\n        return $found ? $minLength : -1;\n    }\n}"
}