{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19620000,
    "question_id": "3141",
    "elapsed_time": 271,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707972079250,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 137,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175692218",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minSizeSubarray(_ nums: [Int], _ target: Int) -> Int {\n        var prefixSum = [0]\n        var sum = 0\n        var result = Int.max\n\n        for num in nums {\n            sum += num\n            prefixSum.append(sum)\n        }\n\n        if sum == 0 {\n            return -1\n        }\n\n        var totalSum = 0\n        for i in 0..<prefixSum.count {\n            totalSum += prefixSum.last!\n            var targetSum = target + totalSum - prefixSum[i]\n\n            var left = i\n            var right = prefixSum.count - 1\n            while left <= right {\n                let mid = left + (right - left) / 2\n                if prefixSum[mid] < targetSum {\n                    left = mid + 1\n                } else {\n                    right = mid - 1\n                }\n            }\n\n            if left < prefixSum.count {\n                result = min(result, left - i + (targetSum - totalSum) / sum * nums.count)\n            }\n\n            if targetSum % sum == 0 {\n                break\n            }\n        }\n\n        return result == Int.max ? -1 : result\n    }\n}"
}