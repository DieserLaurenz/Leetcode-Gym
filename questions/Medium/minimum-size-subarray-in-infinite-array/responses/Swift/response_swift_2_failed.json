{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19532000,
    "question_id": "3141",
    "elapsed_time": 399,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707972141637,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175693014",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minSizeSubarray(_ nums: [Int], _ target: Int) -> Int {\n        var minLen = Int.max\n        var sum = 0\n        var start = 0\n\n        for (end, num) in nums.enumerated() {\n            sum += num\n            while sum >= target {\n                minLen = min(minLen, end - start + 1)\n                sum -= nums[start]\n                start += 1\n            }\n        }\n\n        if minLen == Int.max {\n            for num in nums {\n                if num == target {\n                    return 1\n                }\n            }\n            return -1\n        }\n\n        var totalSum = nums.reduce(0, +)\n        if totalSum < target {\n            return -1\n        }\n\n        start = 0\n        sum = 0\n        var index = 0\n        while index < nums.count * 2 {\n            sum += nums[index % nums.count]\n            while sum >= target {\n                minLen = min(minLen, index - start + 1)\n                sum -= nums[start % nums.count]\n                start += 1\n            }\n            index += 1\n        }\n\n        return minLen\n    }\n}"
}