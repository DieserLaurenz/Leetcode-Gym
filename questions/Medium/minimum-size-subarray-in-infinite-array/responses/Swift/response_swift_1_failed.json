{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19412000,
    "question_id": "3141",
    "elapsed_time": 2399,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707972108752,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175692562",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minSizeSubarray(_ nums: [Int], _ target: Int) -> Int {\n        var minSize = Int.max\n        let sum = nums.reduce(0, +)\n        var currentSum = 0\n        var queue = [(Int, Int)]() // (value, index)\n\n        if sum < target {\n            return -1\n        }\n\n        for i in 0..<nums.count*2 {\n            let num = nums[i % nums.count]\n            currentSum += num\n            queue.append((num, i))\n            while currentSum - queue.first!.0 >= target {\n                currentSum -= queue.first!.0\n                queue.removeFirst()\n            }\n            if currentSum >= target {\n                minSize = min(minSize, i - queue.first!.1 + 1)\n            }\n        }\n\n        return minSize == Int.max ? -1 : minSize\n    }\n}"
}