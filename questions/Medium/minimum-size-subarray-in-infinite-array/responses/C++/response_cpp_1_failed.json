{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 129948000,
    "question_id": "3141",
    "elapsed_time": 303,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,1,5,7,7,1,6,3]\n39",
    "expected_output": "9",
    "task_finish_time": 1707971185231,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 364,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175681842",
    "input_formatted": "[2,1,5,7,7,1,6,3], 39",
    "input": "[2,1,5,7,7,1,6,3]\n39",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minSizeSubarray(vector<int>& nums, int target) {\n        long long sum = 0;\n        for (int num : nums) sum += num;\n        if (sum == target) return nums.size();\n        if (sum < target) return -1;\n\n        int n = nums.size(), minLen = INT_MAX;\n        vector<long long> prefixSums(2 * n + 1, 0);\n        for (int i = 0; i < 2 * n; i++) {\n            prefixSums[i + 1] = prefixSums[i] + nums[i % n];\n        }\n\n        unordered_map<long long, int> hashMap;\n        for (int i = 0; i < prefixSums.size(); i++) {\n            if (hashMap.find(prefixSums[i] - target) != hashMap.end()) {\n                minLen = min(minLen, i - hashMap[prefixSums[i] - target]);\n            }\n            // To handle cases where the sum of the entire array is needed multiple times\n            if (hashMap.find(prefixSums[i]) == hashMap.end() || i < hashMap[prefixSums[i]])\n                hashMap[prefixSums[i]] = i;\n        }\n\n        return minLen == INT_MAX ? -1 : minLen % n == 0 ? n : minLen % n;\n    }\n};"
}