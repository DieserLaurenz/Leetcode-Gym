{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 117436000,
    "question_id": "3141",
    "elapsed_time": 307,
    "compare_result": "1111111111010011111111111011100111101101111100011111111111001011111111111111101111101111111111111111111110011111101111101101111111011110011111000111101111111100111111101111101101101100111101111111101011011111100111111100110111111101111001011111011110110111101111111010111111100011100110101111111111111110110111011110011101110111110101011101110110110010111111111110111111101111110110110111000101110110101111010111111111011111111111110111111011100011111111111111100010100101101010111110111111001110101111111111111111111111111111111111101",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,2,2,1,2,1,2,1,2,1]\n83",
    "expected_output": "53",
    "task_finish_time": 1707971152623,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 421,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175681484",
    "input_formatted": "[1,2,2,2,1,2,1,2,1,2,1], 83",
    "input": "[1,2,2,2,1,2,1,2,1,2,1]\n83",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minSizeSubarray(vector<int>& nums, int target) {\n        int n = nums.size();\n        vector<long long> prefixSums(2 * n + 1, 0);\n        for (int i = 0; i < 2 * n; ++i) {\n            prefixSums[i + 1] = prefixSums[i] + nums[i % n];\n        }\n\n        int minSize = INT_MAX;\n        unordered_map<int, int> hashMap;\n        for (int i = 0; i < prefixSums.size(); ++i) {\n            if (hashMap.find(prefixSums[i] - target) != hashMap.end()) {\n                minSize = min(minSize, i - hashMap[prefixSums[i] - target]);\n            }\n            hashMap[prefixSums[i]] = i;\n        }\n\n        return minSize == INT_MAX ? -1 : minSize;\n    }\n};"
}