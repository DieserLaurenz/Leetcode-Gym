{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61700000,
    "question_id": "3141",
    "elapsed_time": 367,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707971543438,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 123,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175685918",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinSizeSubarray(int[] nums, int target) {\n        int n = nums.Length;\n        long totalSum = 0;\n        foreach (int num in nums) {\n            totalSum += num;\n        }\n\n        if (totalSum == target) return n;\n        if (totalSum < target) return -1;\n\n        long currentSum = 0;\n        int minLength = int.MaxValue;\n        int start = 0;\n\n        for (int i = 0; i < n * 2; i++) {\n            currentSum += nums[i % n];\n\n            while (currentSum - (start <= i ? nums[start % n] : 0) >= target) {\n                if (currentSum >= target) {\n                    minLength = Math.Min(minLength, i - start + 1);\n                }\n                currentSum -= nums[start % n];\n                start++;\n            }\n        }\n\n        return minLength == int.MaxValue ? -1 : minLength;\n    }\n}"
}