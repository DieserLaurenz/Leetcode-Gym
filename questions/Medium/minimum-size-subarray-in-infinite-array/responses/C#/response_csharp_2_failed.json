{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51596000,
    "question_id": "3141",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707971611788,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175686666",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinSizeSubarray(int[] nums, int target) {\n        long sum = 0;\n        foreach (var num in nums) {\n            sum += num;\n        }\n        if (sum < target) {\n            return -1;\n        }\n        int minLen = int.MaxValue;\n        for (int i = 0; i < nums.Length; i++) {\n            long currentSum = 0;\n            for (int j = i; j < i + nums.Length; j++) {\n                currentSum += nums[j % nums.Length];\n                if (currentSum >= target) {\n                    minLen = Math.Min(minLen, j - i + 1);\n                    break;\n                }\n            }\n        }\n        return minLen == int.MaxValue ? -1 : minLen;\n    }\n}"
}