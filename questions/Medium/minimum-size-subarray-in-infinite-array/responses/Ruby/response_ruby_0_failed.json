{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 688396000,
    "question_id": "3141",
    "elapsed_time": 3370,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n4",
    "expected_output": "2",
    "task_finish_time": 1707972591889,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1175698426",
    "input_formatted": "[1,1,1,2,3], 4",
    "input": "[1,1,1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef min_size_subarray(nums, target)\n    prefix_sum = [0]\n    nums.each { |num| prefix_sum << prefix_sum.last + num }\n    return 1 if prefix_sum.include?(target)\n    min_length = Float::INFINITY\n    sum_map = {}\n    prefix_sum.each_with_index do |sum, index|\n        if sum_map[sum - target]\n            min_length = [min_length, index - sum_map[sum - target]].min\n        end\n        sum_map[sum] ||= index\n    end\n    min_length = [min_length, min_size_subarray(nums * 2, target)].min if min_length == Float::INFINITY && nums.sum >= target\n    min_length == Float::INFINITY ? -1 : min_length\nend"
}