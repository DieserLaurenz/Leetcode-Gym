{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27224000,
    "question_id": "3141",
    "elapsed_time": 516,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1708838672831,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185474482",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minSizeSubarray(self, nums: List[int], target: int) -> int:\n        from collections import deque\n        result = float('inf')\n        q = deque()\n        current_sum = 0\n        for i, num in enumerate(nums*2):\n            current_sum += num\n            q.append(num)\n            while current_sum - q[0] >= target:\n                current_sum -= q.popleft()\n            if current_sum >= target:\n                result = min(result, len(q))\n            if i >= len(nums) - 1 and current_sum < target:\n                break\n        return result if result != float('inf') else -1"
}