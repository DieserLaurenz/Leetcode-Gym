{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24940000,
    "question_id": "3141",
    "elapsed_time": 11030,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1708838622531,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 286,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185473802",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minSizeSubarray(self, nums: List[int], target: int) -> int:\n        prefix_sum = [0]\n        for num in nums:\n            prefix_sum.append(prefix_sum[-1] + num)\n        \n        if prefix_sum[-1] == 0: return -1\n        \n        total_sum = prefix_sum[-1]\n        min_length = float('inf')\n        \n        if total_sum >= target:\n            for i in range(len(nums)):\n                for j in range(i + 1, len(prefix_sum)):\n                    if prefix_sum[j] - prefix_sum[i] >= target:\n                        min_length = min(min_length, j - i)\n                        break\n        \n        if total_sum < target:\n            rounds = target // total_sum\n            remain_target = target % total_sum\n            if remain_target == 0:\n                min_length = rounds * len(nums)\n            else:\n                for i in range(len(nums)):\n                    for j in range(i + 1, len(prefix_sum)):\n                        if prefix_sum[j] - prefix_sum[i] + rounds * total_sum >= target:\n                            min_length = min(min_length, j - i + rounds * len(nums))\n                            break\n        \n        return min_length if min_length != float('inf') else -1"
}