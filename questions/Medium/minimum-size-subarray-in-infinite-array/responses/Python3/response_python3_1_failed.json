{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27460000,
    "question_id": "3141",
    "elapsed_time": 540,
    "compare_result": "0000110010000000000011000000000000101000001000010110010000001000010100001101000000000000001100100100101000000000000000100000010100010000000000000110000010001000000001000000000001101000000000000000001001000100100010000000010001001000100000000000000000100011100001000000100010000001000010000000000100111010000000010000000101000100000000001000010110100000100001010000000111100001000000100100000000000000100000000011000000001011100010010000000010000001001000010000000000000000100000000010010111000110000100000000100000000000010000000000000",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1708838647319,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 102,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185474196",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minSizeSubarray(self, nums: List[int], target: int) -> int:\n        total = sum(nums)\n        if total < target:\n            return -1\n        answer = float('inf')\n        prefix_sum = {0: -1}\n        current_sum = 0\n        for i, num in enumerate(nums):\n            current_sum += num\n            while current_sum - total >= target:\n                current_sum -= total\n            if current_sum >= target:\n                j = i - len(nums)\n                while current_sum - nums[j % len(nums)] >= target:\n                    current_sum -= nums[j % len(nums)]\n                    j += 1\n                answer = min(answer, i - j + 1)\n            if current_sum in prefix_sum:\n                answer = min(answer, i - prefix_sum[current_sum])\n            else:\n                prefix_sum[current_sum] = i\n        return answer if answer != float('inf') else -1"
}