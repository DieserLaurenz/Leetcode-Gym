{
    "status_code": 15,
    "lang": "golang",
    "run_success": false,
    "runtime_error": "Line 28: panic: runtime error: index out of range [3] with length 3",
    "full_runtime_error": "panic: runtime error: index out of range [3] with length 3\nmain.minSizeSubarray({0xc000080000?, 0xc000012090?, 0x1?}, 0x4b2060?)\nsolution.go, line 28\nmain.__helper__(...)\nsolution.go, line 48\nmain.main()\nsolution.go, line 87",
    "status_runtime": "N/A",
    "memory": 1972000,
    "question_id": "3141",
    "elapsed_time": 14,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707972527920,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175697732",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "func minSizeSubarray(nums []int, target int) int {\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    if total < target {\n        return -1\n    }\n\n    result := len(nums) + 1\n    sum, start := 0, 0\n    for end := 0; end < len(nums); end++ {\n        sum += nums[end]\n        for sum >= target {\n            if end-start+1 < result {\n                result = end - start + 1\n            }\n            sum -= nums[start]\n            start++\n        }\n    }\n\n    // Attempt to wrap around the array if needed\n    if total == target {\n        return len(nums)\n    } else if total > target {\n        for end := 0; end < start; end++ {\n            sum += nums[end]\n            for sum >= target {\n                if end+len(nums)-start+1 < result {\n                    result = end + len(nums) - start + 1\n                }\n                sum -= nums[start%len(nums)]\n                start++\n            }\n        }\n    }\n\n    if result == len(nums)+1 {\n        return -1\n    }\n    return result\n}"
}