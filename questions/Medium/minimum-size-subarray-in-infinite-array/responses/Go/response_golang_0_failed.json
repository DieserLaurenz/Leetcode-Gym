{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7700000,
    "question_id": "3141",
    "elapsed_time": 3012,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n4",
    "expected_output": "2",
    "task_finish_time": 1707972471503,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 92,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175697042",
    "input_formatted": "[1,1,1,2,3], 4",
    "input": "[1,1,1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minSizeSubarray(nums []int, target int) int {\n    n := len(nums)\n    prefixSum := make([]int, n+1)\n    for i := 0; i < n; i++ {\n        prefixSum[i+1] = prefixSum[i] + nums[i]\n    }\n\n    if prefixSum[n] == 0 {\n        return -1\n    }\n\n    minLen := int(^uint(0) >> 1) // max int value\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <= n; j++ {\n            sum := prefixSum[j] - prefixSum[i]\n            if sum == target {\n                if j-i < minLen {\n                    minLen = j - i\n                }\n                break // found the smallest subarray starting at i\n            } else if sum > target {\n                break // no need to extend the subarray further\n            }\n            if prefixSum[n]-prefixSum[i]+prefixSum[j%n] >= target {\n                additional := 0\n                for k := 0; k <= n && sum < target; k++ {\n                    sum += nums[k%n]\n                    additional++\n                }\n                if sum >= target && i+additional < minLen {\n                    minLen = i + additional\n                }\n            }\n        }\n    }\n\n    if minLen == int(^uint(0)>>1) {\n        return -1\n    }\n    return minLen\n}"
}