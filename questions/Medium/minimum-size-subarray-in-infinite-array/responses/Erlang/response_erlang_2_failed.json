{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 176828000,
    "question_id": "3141",
    "elapsed_time": 2755,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707982343774,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 137,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175817552",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_size_subarray(Nums :: [integer()], Target :: integer()) -> integer().\nmin_size_subarray(Nums, Target) ->\n    MinSize = min_subarray_size(Nums, Target, maps:new(), 0, {0, infinity}),\n    case MinSize of\n        {_, infinity} -> -1;\n        {_, Len} -> Len\n    end.\n\nmin_subarray_size([], _, Map, Sum, {StartIndex, MinLen}) ->\n    case maps:find(Sum, Map) of\n        {ok, _} -> {StartIndex, MinLen};\n        error -> {StartIndex, MinLen}\n    end;\nmin_subarray_size([H|T], Target, Map, Sum, {StartIndex, MinLen}) ->\n    NewSum = Sum + H,\n    UpdatedMap = maps:put(NewSum, StartIndex + 1, Map),\n    NewMinLen = case maps:find(NewSum - Target, Map) of\n        {ok, Index} -> min(MinLen, StartIndex - Index + 2);\n        error -> MinLen\n    end,\n    min_subarray_size(T, Target, UpdatedMap, NewSum, {StartIndex + 1, NewMinLen})."
}