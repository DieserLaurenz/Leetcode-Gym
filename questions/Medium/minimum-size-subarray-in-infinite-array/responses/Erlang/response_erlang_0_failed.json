{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 179032000,
    "question_id": "3141",
    "elapsed_time": 1690,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707982257834,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 137,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175816686",
    "input_formatted": "[1,2,3], 5",
    "input": "[1,2,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_size_subarray(Nums :: [integer()], Target :: integer()) -> integer().\nmin_size_subarray(Nums, Target) ->\n    PrefixSum = lists:foldl(fun(X, [H|T]) -> [X+H|T] end, [0], Nums),\n    MinLength = lists:foldl(fun(X, Acc) -> min(Acc, find_min_length(PrefixSum, X, Target, length(Nums))) end, infinity, PrefixSum),\n    if MinLength == infinity -> -1; true -> MinLength end.\n\nfind_min_length(PrefixSum, CurrentSum, Target, Length) ->\n    case lists:dropwhile(fun(X) -> X < CurrentSum - Target end, PrefixSum) of\n        [H|_] when CurrentSum - H >= Target -> Length - length(PrefixSum) + 1;\n        _ -> infinity\n    end."
}