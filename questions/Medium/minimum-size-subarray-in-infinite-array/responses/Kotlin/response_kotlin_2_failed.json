{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72440000,
    "question_id": "3141",
    "elapsed_time": 6018,
    "compare_result": "1000111111010011000111111001100110101101111100010111011110001010011110101101100000101100001110111111101000011101100011101000110110010100000101000110101010001100000101001011000101101000000000100011101001001100100010010100110001101000111001010000000000100011100111000010110011000001100110100110001100111010110000010010011101100111110100011100010110100010101001010100111111100101010000100100000100000010100000000111110110011111111011010100011011000001011111010000000000100001101010111010110111001110000100111100101110111011111000101000000",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n4",
    "expected_output": "2",
    "task_finish_time": 1707972285732,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 250,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175694700",
    "input_formatted": "[1,1,1,2,3], 4",
    "input": "[1,1,1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minSizeSubarray(nums: IntArray, target: Int): Int {\n        var sum = 0\n        var minLength = Int.MAX_VALUE\n        val prefixSums = mutableMapOf<Int, Int>()\n        prefixSums[0] = -1\n        for (i in nums.indices) {\n            sum += nums[i]\n            if (sum >= target) {\n                minLength = minOf(minLength, i + 1)\n            }\n            var toFind = sum - target\n            for (j in 0..(sum / target)) {\n                if (prefixSums.containsKey(toFind)) {\n                    minLength = minOf(minLength, i - prefixSums[toFind]!!)\n                }\n                toFind -= target\n            }\n            prefixSums[sum] = i\n        }\n        return if (minLength == Int.MAX_VALUE) -1 else minLength\n    }\n}"
}