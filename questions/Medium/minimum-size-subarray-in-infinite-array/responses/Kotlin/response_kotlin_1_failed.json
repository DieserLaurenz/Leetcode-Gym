{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70380000,
    "question_id": "3141",
    "elapsed_time": 2550,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,4,6,8]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707972245421,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 301,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175694260",
    "input_formatted": "[2,4,6,8], 3",
    "input": "[2,4,6,8]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minSizeSubarray(nums: IntArray, target: Int): Int {\n        var sum = 0\n        var minLen = Int.MAX_VALUE\n        var left = 0\n        val totalSum = nums.sum()\n        if (totalSum == 0) {\n            return if (target == 0) 1 else -1\n        }\n        val cycles = if (totalSum >= target) 2 else (target / totalSum) + 1\n\n        for (i in 0 until nums.size * cycles) {\n            sum += nums[i % nums.size]\n            while (sum >= target) {\n                minLen = minOf(minLen, i - left + 1)\n                sum -= nums[left % nums.size]\n                left++\n            }\n        }\n        return if (minLen == Int.MAX_VALUE) -1 else minLen\n    }\n}"
}