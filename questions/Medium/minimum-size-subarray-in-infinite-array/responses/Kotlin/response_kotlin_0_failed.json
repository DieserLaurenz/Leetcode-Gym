{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 69640000,
    "question_id": "3141",
    "elapsed_time": 664,
    "compare_result
    "code_output": "13",
    "std_output": "",
    "last_testcase": "[8,8,1,2,5,3,3,1,1,1,2,7,3]\n90",
    "expected_output": "26",
    "task_finish_time": 1707972209284,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 531,
    "total_testcases": 535,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175693854",
    "input_formatted": "[8,8,1,2,5,3,3,1,1,1,2,7,3], 90",
    "input": "[8,8,1,2,5,3,3,1,1,1,2,7,3]\n90",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minSizeSubarray(nums: IntArray, target: Int): Int {\n        val prefixSum = LongArray(nums.size + 1)\n        for (i in nums.indices) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i]\n        }\n        if (prefixSum.last() == 0L) return -1 // Avoid division by zero\n\n        val totalSum = prefixSum.last()\n        var result = Int.MAX_VALUE\n\n        for (i in nums.indices) {\n            var left = i + 1\n            var right = nums.size\n            var possible = false\n            while (left <= right) {\n                val mid = left + (right - left) / 2\n                val sum = prefixSum[mid] - prefixSum[i] + totalSum * ((mid - i) / nums.size)\n                if (sum == target.toLong()) {\n                    result = minOf(result, mid - i)\n                    possible = true\n                    break\n                } else if (sum < target) {\n                    left = mid + 1\n                } else {\n                    right = mid - 1\n                }\n            }\n            if (!possible && totalSum > 0) {\n                val extra = (target - (prefixSum.last() - prefixSum[i])) / totalSum\n                val remainder = target - (prefixSum.last() - prefixSum[i]) - totalSum * extra\n                if (remainder > 0) {\n                    left = 0\n                    right = nums.size - 1\n                    while (left <= right) {\n                        val mid = left + (right - left) / 2\n                        val sum = prefixSum[mid + 1]\n                        if (sum == remainder) {\n                            result = minOf(result, (nums.size - i) + mid + 1 + extra.toInt() * nums.size)\n                            break\n                        } else if (sum < remainder) {\n                            left = mid + 1\n                        } else {\n                            right = mid - 1\n                        }\n                    }\n                } else if (remainder == 0L) {\n                    result = minOf(result, nums.size - i + extra.toInt() * nums.size)\n                }\n            }\n        }\n        return if (result == Int.MAX_VALUE) -1 else result\n    }\n}"
}