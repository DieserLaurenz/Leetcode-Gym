{
    "acRate": 30.234688456112707,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2875",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Size Subarray in Infinite Array",
    "titleSlug": "minimum-size-subarray-in-infinite-array",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Sliding Window",
            "id": "VG9waWNUYWdOb2RlOjU1ODIx",
            "slug": "sliding-window"
        },
        {
            "name": "Prefix Sum",
            "id": "VG9waWNUYWdOb2RlOjYxMDY4",
            "slug": "prefix-sum"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minSizeSubarray(vector<int>& nums, int target) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minSizeSubarray(int[] nums, int target) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minSizeSubarray(self, nums, target):         \"\"\"         :type nums: List[int]         :type target: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minSizeSubarray(self, nums: List[int], target: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minSizeSubarray(int* nums, int numsSize, int target) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinSizeSubarray(int[] nums, int target) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} target  * @return {number}  */ var minSizeSubarray = function(nums, target) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minSizeSubarray(nums: number[], target: number): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $target      * @return Integer      */     function minSizeSubarray($nums, $target) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minSizeSubarray(_ nums: [Int], _ target: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minSizeSubarray(nums: IntArray, target: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minSizeSubarray(List<int> nums, int target) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minSizeSubarray(nums []int, target int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} target # @return {Integer} def min_size_subarray(nums, target)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minSizeSubarray(nums: Array[Int], target: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn min_size_subarray(nums: Vec<i32>, target: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (min-size-subarray nums target)   (-> (listof exact-integer?) exact-integer? exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec min_size_subarray(Nums :: [integer()], Target :: integer()) -> integer(). min_size_subarray(Nums, Target) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec min_size_subarray(nums :: [integer], target :: integer) :: integer   def min_size_subarray(nums, target) do        end end"
        }
    ],
    "content": "You are given a 0-indexed array nums and an integer target. A 0-indexed array infinite_nums is generated by infinitely appending the elements of nums to itself. Return the length of the shortest subarray of the array infinite_nums with a sum equal to target. If there is no such subarray return -1.  Example 1:  Input: nums = [1,2,3], target = 5 Output: 2 Explanation: In this example infinite_nums = [1,2,3,1,2,3,1,2,...]. The subarray in the range [1,2], has the sum equal to target = 5 and length = 2. It can be proven that 2 is the shortest length of a subarray with sum equal to target = 5.  Example 2:  Input: nums = [1,1,1,2,3], target = 4 Output: 2 Explanation: In this example infinite_nums = [1,1,1,2,3,1,1,1,2,3,1,1,...]. The subarray in the range [4,5], has the sum equal to target = 4 and length = 2. It can be proven that 2 is the shortest length of a subarray with sum equal to target = 4.  Example 3:  Input: nums = [2,4,6,8], target = 3 Output: -1 Explanation: In this example infinite_nums = [2,4,6,8,2,4,6,8,...]. It can be proven that there is no subarray with sum equal to target = 3.   Constraints:  1 <= nums.length <= 105 1 <= nums[i] <= 105 1 <= target <= 109  "
}