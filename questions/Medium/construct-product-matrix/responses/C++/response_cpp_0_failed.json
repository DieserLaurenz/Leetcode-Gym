{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 83640000,
    "question_id": "3031",
    "elapsed_time": 139,
    "compare_result": "011111111110011011111110110000000011111111011000000110000000100010110011110110000001110100001000000001000000000000000011110000001111100000000000000000000000000000000000100111110000000110001101011101011100011100000000100001011011011111111110110100000000011001111100100011111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111011111111111111111011111111111111111111111111111110010001000000000000000000000000000000000000000001000100000000100000000010000000100010010000011001000000000100000000000000111001100010000010000000011100000000001000000000000010010010000101001011011010011101011110100000011001100011100111010011011011110011010111110010000101100010000110010011000010110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[[6,4],[4,6]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706823665498,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 728,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1163370739",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<vector<int>> constructProductMatrix(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<int>> p(n, vector<int>(m, 1));\n        vector<vector<int>> prefixRow(n, vector<int>(m, 1)), suffixRow(n, vector<int>(m, 1));\n        vector<vector<int>> prefixCol(n, vector<int>(m, 1)), suffixCol(n, vector<int>(m, 1));\n\n        // Compute prefix and suffix products for rows\n        for (int i = 0; i < n; ++i) {\n            prefixRow[i][0] = grid[i][0];\n            for (int j = 1; j < m; ++j) {\n                prefixRow[i][j] = (prefixRow[i][j - 1] * grid[i][j]) % 12345;\n            }\n            suffixRow[i][m - 1] = grid[i][m - 1];\n            for (int j = m - 2; j >= 0; --j) {\n                suffixRow[i][j] = (suffixRow[i][j + 1] * grid[i][j]) % 12345;\n            }\n        }\n\n        // Compute prefix and suffix products for columns\n        for (int j = 0; j < m; ++j) {\n            prefixCol[0][j] = grid[0][j];\n            for (int i = 1; i < n; ++i) {\n                prefixCol[i][j] = (prefixCol[i - 1][j] * grid[i][j]) % 12345;\n            }\n            suffixCol[n - 1][j] = grid[n - 1][j];\n            for (int i = n - 2; i >= 0; --i) {\n                suffixCol[i][j] = (suffixCol[i + 1][j] * grid[i][j]) % 12345;\n            }\n        }\n\n        // Construct the product matrix\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                long long product = 1;\n                if (i > 0) product = (product * prefixCol[i - 1][j]) % 12345;\n                if (i < n - 1) product = (product * suffixCol[i + 1][j]) % 12345;\n                if (j > 0) product = (product * prefixRow[i][j - 1]) % 12345;\n                if (j < m - 1) product = (product * suffixRow[i][j + 1]) % 12345;\n                p[i][j] = product % 12345;\n            }\n        }\n\n        return p;\n    }\n};"
}