{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63116000,
    "question_id": "3031",
    "elapsed_time": 94,
    "compare_result
    "code_output": "[[24,24],[24,24]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706823725727,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1163371285",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<vector<int>> constructProductMatrix(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<int>> result(n, vector<int>(m, 1));\n        vector<int> rowProducts(n, 1), colProducts(m, 1);\n\n        // Calculate the product of all elements\n        int totalProduct = 1;\n        bool hasZero = false; // To check if there's any zero in the grid\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (grid[i][j] != 0) {\n                    totalProduct = (totalProduct * grid[i][j]) % 12345;\n                } else {\n                    hasZero = true;\n                }\n            }\n        }\n\n        // If there's a zero in the grid, totalProduct should be handled differently\n        if (hasZero) {\n            // Handle cases with zero differently as the product will be zero\n            // except for the position which had the original zero\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < m; ++j) {\n                    result[i][j] = 0; // Since there's at least one zero, most products will be zero\n                    if (grid[i][j] == 0) {\n                        // Calculate product for the zero position\n                        int product = 1;\n                        for (int x = 0; x < n; ++x) {\n                            for (int y = 0; y < m; ++y) {\n                                if (x != i || y != j) {\n                                    product = (product * grid[x][y]) % 12345;\n                                }\n                            }\n                        }\n                        result[i][j] = product;\n                    }\n                }\n            }\n        } else {\n            // If no zero, calculate normally as initially intended\n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < m; ++j) {\n                    int excludeCurrent = totalProduct;\n                    if (grid[i][j] != 0) {\n                        // Ideally, we'd divide totalProduct by grid[i][j] here,\n                        // but direct division isn't feasible with modulo.\n                        // A different strategy is needed.\n                    }\n                    result[i][j] = excludeCurrent;\n                }\n            }\n        }\n\n        return result;\n    }\n};"
}