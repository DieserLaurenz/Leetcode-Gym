{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24700000,
    "question_id": "3031",
    "elapsed_time": 5163,
    "compare_result": "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[[0,0],[0,0]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706836159145,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1163465689",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[][]\n     */\n    function constructProductMatrix($grid) {\n        $n = count($grid);\n        $m = count($grid[0]);\n        $productMatrix = array_fill(0, $n, array_fill(0, $m, 0));\n        $allProduct = 1;\n        $zeroCount = 0;\n\n        // Calculate allProduct and count zeros\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                if ($grid[$i][$j] != 0) {\n                    $allProduct = ($allProduct * $grid[$i][$j]) % 12345;\n                } else {\n                    $zeroCount++;\n                }\n            }\n        }\n\n        // If more than one zero, all products are zero\n        if ($zeroCount > 1) return $productMatrix;\n\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                if ($grid[$i][$j] == 0) {\n                    // For zero elements, calculate product of all other elements\n                    $productMatrix[$i][$j] = $this->calculateProductForZeroPosition($grid, $i, $j);\n                } else {\n                    if ($zeroCount == 0) {\n                        // If no zero, calculate product excluding current element\n                        $excludeCurrent = $allProduct;\n                        foreach ($grid as $row => $cols) {\n                            foreach ($cols as $col => $value) {\n                                if ($row == $i && $col == $j) continue;\n                                $excludeCurrent = ($excludeCurrent * $this->modInverse($grid[$row][$col], 12345)) % 12345;\n                            }\n                        }\n                        $productMatrix[$i][$j] = $excludeCurrent;\n                    } else {\n                        // If there's exactly one zero, all non-zero positions have product 0\n                        $productMatrix[$i][$j] = 0;\n                    }\n                }\n            }\n        }\n\n        return $productMatrix;\n    }\n\n    private function calculateProductForZeroPosition($grid, $excludeRow, $excludeColumn) {\n        $product = 1;\n        for ($i = 0; $i < count($grid); $i++) {\n            for ($j = 0; $j < count($grid[0]); $j++) {\n                if ($i != $excludeRow && $j != $excludeColumn && $grid[$i][$j] != 0) {\n                    $product = ($product * $grid[$i][$j]) % 12345;\n                }\n            }\n        }\n        return $product;\n    }\n\n    private function modInverse($a, $m) {\n        // Since the direct usage of modular inverse is incorrect for this context, this function is not needed.\n        // Placeholder to correct previous mistake. The concept of modular inverse does not directly apply here.\n    }\n}"
}