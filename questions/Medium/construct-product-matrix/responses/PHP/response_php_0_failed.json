{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20156000,
    "question_id": "3031",
    "elapsed_time": 5068,
    "compare_result
    "code_output": "[[24,12],[24,6]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706836050882,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 219,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1163464856",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[][]\n     */\n    function constructProductMatrix($grid) {\n        $n = count($grid);\n        $m = count($grid[0]);\n        $productMatrix = array_fill(0, $n, array_fill(0, $m, 0));\n        $totalProduct = 1;\n        $hasZero = false;\n        $zeroCount = 0;\n\n        // Calculate total product and check for zeros\n        foreach ($grid as $row) {\n            foreach ($row as $element) {\n                if ($element === 0) {\n                    $hasZero = true;\n                    $zeroCount++;\n                    continue;\n                }\n                $totalProduct = ($totalProduct * $element) % 12345;\n            }\n        }\n\n        if ($zeroCount > 1) {\n            // More than one zero means all elements in product matrix will be zero.\n            return $productMatrix;\n        }\n\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                if ($hasZero) {\n                    if ($grid[$i][$j] == 0) {\n                        // Calculate product for the elements in the row and column of the zero.\n                        $productMatrix[$i][$j] = $this->calculateProductExcludingSelf($grid, $i, $j);\n                    } else {\n                        $productMatrix[$i][$j] = 0;\n                    }\n                } else {\n                    // If there's no zero, calculate product excluding the element itself.\n                    $excludeElementProduct = $totalProduct * $this->modInverse($grid[$i][$j], 12345);\n                    $productMatrix[$i][$j] = $excludeElementProduct % 12345;\n                }\n            }\n        }\n\n        return $productMatrix;\n    }\n\n    private function calculateProductExcludingSelf($grid, $excludeRow, $excludeColumn) {\n        $product = 1;\n        foreach ($grid as $i => $row) {\n            foreach ($row as $j => $element) {\n                if ($i === $excludeRow || $j === $excludeColumn || $element === 0) continue;\n                $product = ($product * $element) % 12345;\n            }\n        }\n        return $product;\n    }\n\n    private function modInverse($a, $m) {\n        // Calculate Modular Inverse (Fermat's Little Theorem or Extended Euclidean Algorithm)\n        // Placeholder implementation, actual implementation depends on the method chosen.\n        for ($x = 1; $x < $m; $x++) {\n            if (($a * $x) % $m == 1) {\n                return $x;\n            }\n        }\n        return 1; // In case there's no modular inverse (should not happen in this context)\n    }\n}"
}