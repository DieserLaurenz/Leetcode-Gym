{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 12: ** (UndefinedFunctionError) function Enum.reduce_with_index/3 is undefined or private. Did you mean:",
    "full_runtime_error": "Line 12: ** (UndefinedFunctionError) function Enum.reduce_with_index/3 is undefined or private. Did you mean:\n      * reduce/2\n      * reduce/3\n      * reduce_while/3\n    (elixir 1.15.7) Enum.reduce_with_index([[1, 2], [3, 4]], 1, #Function<2.84577439/3 in Solution.construct_product_matrix/1>)\n    solution.ex:12: anonymous fn/3 in Solution.construct_product_matrix/1\n    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2\n    solution.ex:10: anonymous fn/3 in Solution.construct_product_matrix/1\n    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2\n    solution.ex:9: Solution.construct_product_matrix/1\n    solution.ex:44: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75204000,
    "question_id": "3031",
    "elapsed_time": 457,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706856227992,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1163670334",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec construct_product_matrix(grid :: [[integer]]) :: [[integer]]\n  def construct_product_matrix(grid) do\n    # Calculate the size of the grid\n    n = length(grid)\n    m = length(List.first(grid))\n    \n    # Generate the product matrix\n    for i <- 0..(n - 1) do\n      for j <- 0..(m - 1) do\n        # Calculate the product of all elements except grid[i][j]\n        product = Enum.reduce_with_index(grid, 1, fn (row, k, acc) ->\n          acc * Enum.reduce_with_index(row, 1, fn (element, l, acc_inner) ->\n            if k == i and l == j do\n              acc_inner\n            else\n              rem(acc_inner * element, 12345)\n            end\n          end)\n        end)\n        # Store the calculated product modulo 12345\n        rem(product, 12345)\n      end\n      |> Enum.to_list()\n    end\n    |> Enum.to_list()\n  end\nend"
}