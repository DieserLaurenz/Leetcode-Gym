{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 1980000,
    "question_id": "3031",
    "elapsed_time": 12,
    "compare_result
    "code_output": "[[6,4],[4,6]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706846496564,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1163555219",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func constructProductMatrix(grid [][]int) [][]int {\n    n, m := len(grid), len(grid[0])\n    mod := 12345\n\n    // Initialize the product matrix\n    p := make([][]int, n)\n    for i := range p {\n        p[i] = make([]int, m)\n    }\n\n    // Pre-compute the prefix products for rows and columns\n    prefixRow := make([][]int, n)\n    prefixCol := make([][]int, m)\n    for i := 0; i < n; i++ {\n        prefixRow[i] = make([]int, m)\n        for j := 0; j < m; j++ {\n            if j == 0 {\n                prefixRow[i][j] = grid[i][j]\n            } else {\n                prefixRow[i][j] = (prefixRow[i][j-1] * grid[i][j]) % mod\n            }\n        }\n    }\n    for j := 0; j < m; j++ {\n        prefixCol[j] = make([]int, n)\n        for i := 0; i < n; i++ {\n            if i == 0 {\n                prefixCol[j][i] = grid[i][j]\n            } else {\n                prefixCol[j][i] = (prefixCol[j][i-1] * grid[i][j]) % mod\n            }\n        }\n    }\n\n    // Compute the product matrix using prefix products\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            product := 1\n            // Multiply by the product of the row elements excluding the current element\n            if j > 0 {\n                product = (product * prefixRow[i][j-1]) % mod\n            }\n            if j < m-1 {\n                product = (product * prefixRow[i][m-1] / prefixRow[i][j]) % mod\n            }\n            // Multiply by the product of the column elements excluding the current element\n            if i > 0 {\n                product = (product * prefixCol[j][i-1]) % mod\n            }\n            if i < n-1 {\n                product = (product * prefixCol[j][n-1] / prefixCol[j][i]) % mod\n            }\n            p[i][j] = product\n        }\n    }\n\n    return p\n}"
}