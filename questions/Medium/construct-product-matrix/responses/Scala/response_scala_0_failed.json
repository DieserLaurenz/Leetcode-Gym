{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 31: java.lang.ArithmeticException: BigInteger not invertible. (at $anonfun$constructProductMatrix$8)",
    "full_runtime_error": "java.lang.ArithmeticException: BigInteger not invertible.\nLine 2121: java.math.MutableBigInteger.modInverse (MutableBigInteger.java)\nLine 1982: java.math.MutableBigInteger.mutableModInverse (MutableBigInteger.java)\nLine 3156: java.math.BigInteger.modInverse (BigInteger.java)\nLine 465: scala.math.BigInt.modInverse (BigInt.scala)\nLine 31: Solution$.$anonfun$constructProductMatrix$8 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 27: Solution$.$anonfun$constructProductMatrix$6 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 22: Solution$.constructProductMatrix (solution.scala)\nLine 44: Main$.__helper__ (solution.scala)\nLine 58: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 54872000,
    "question_id": "3031",
    "elapsed_time": 469,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706846803209,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1163558337",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def constructProductMatrix(grid: Array[Array[Int]]): Array[Array[Int]] = {\n        val n = grid.length\n        val m = grid(0).length\n        val mod = 12345\n        \n        // Initialize the product matrix with 1s\n        val productMatrix = Array.ofDim[Int](n, m)\n        for(i <- 0 until n; j <- 0 until m) productMatrix(i)(j) = 1\n        \n        // Calculate row and column products except self\n        for(i <- 0 until n) {\n            var rowProduct = 1\n            for(j <- 0 until m) {\n                rowProduct = (rowProduct * grid(i)(j)) % mod\n            }\n            for(j <- 0 until m) {\n                productMatrix(i)(j) = rowProduct\n            }\n        }\n        \n        for(j <- 0 until m) {\n            var colProduct = 1\n            for(i <- 0 until n) {\n                colProduct = (colProduct * grid(i)(j)) % mod\n            }\n            for(i <- 0 until n) {\n                // Since we already multiplied by rowProduct, we need to divide by grid(i)(j) but since we are in modulo arithmetic, we use multiplication by modulo inverse instead.\n                // This approach may not work directly because of modulo inverses and division in modular arithmetic, thus needing a different strategy to directly calculate each cell without division.\n                productMatrix(i)(j) = (productMatrix(i)(j) * colProduct) % mod\n                if(grid(i)(j) != 0) productMatrix(i)(j) = (productMatrix(i)(j) * BigInt(grid(i)(j)).modInverse(BigInt(mod)).toInt) % mod\n            }\n        }\n        \n        // Correct the product for each cell by excluding its own value, which we included earlier by mistake due to direct multiplication.\n        // This might require a different approach as direct exclusion after multiplication is not straightforward in modular arithmetic.\n        \n        productMatrix\n    }\n}"
}