{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54164000,
    "question_id": "3031",
    "elapsed_time": 11027,
    "compare_result
    "code_output": "[[24,1557],[4128,9966]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1708745426022,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 159,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184478051",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def constructProductMatrix(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        n, m = len(grid), len(grid[0])\n        # Initialize the product matrix with ones\n        p = [[1 for _ in range(m)] for __ in range(n)]\n        # Calculate row and column products\n        row_products = [1] * n\n        col_products = [1] * m\n        for i in range(n):\n            for j in range(m):\n                row_products[i] *= grid[i][j]\n                col_products[j] *= grid[i][j]\n        # Calculate total product\n        total_product = 1\n        for i in range(n):\n            total_product *= row_products[i]\n        total_product %= 12345\n        # Fill the product matrix\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] != 0:\n                    p[i][j] = (total_product * pow(grid[i][j], 12343, 12345)) % 12345\n                else:\n                    # Handle zero case separately\n                    product_without_row_col = total_product\n                    for k in range(n):\n                        if k != i:\n                            product_without_row_col = (product_without_row_col * pow(row_products[k], 12343, 12345)) % 12345\n                    for l in range(m):\n                        if l != j:\n                            product_without_row_col = (product_without_row_col * pow(col_products[l], 12343, 12345)) % 12345\n                    p[i][j] = product_without_row_col\n        return p"
}