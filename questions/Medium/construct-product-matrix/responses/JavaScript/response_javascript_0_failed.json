{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 84024000,
    "question_id": "3031",
    "elapsed_time": 474,
    "compare_result
    "code_output": "[[6,4],[4,6]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706835706540,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1175,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1163462324",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[][]} grid\n * @return {number[][]}\n */\nvar constructProductMatrix = function(grid) {\n    const n = grid.length, m = grid[0].length;\n    let p = new Array(n).fill(0).map(() => new Array(m).fill(1));\n    const mod = 12345;\n\n    // Temporary arrays to store prefix and suffix products for each row and column\n    let rowPrefix = new Array(m).fill(1);\n    let rowSuffix = new Array(m).fill(1);\n    let colPrefix, colSuffix;\n\n    for (let i = 0; i < n; i++) {\n        // Reset prefix and suffix products for this row\n        rowPrefix.fill(1);\n        rowSuffix.fill(1);\n\n        for (let j = 1; j < m; j++) {\n            rowPrefix[j] = (rowPrefix[j - 1] * grid[i][j - 1]) % mod;\n        }\n\n        for (let j = m - 2; j >= 0; j--) {\n            rowSuffix[j] = (rowSuffix[j + 1] * grid[i][j + 1]) % mod;\n        }\n\n        for (let j = 0; j < m; j++) {\n            p[i][j] *= rowPrefix[j] * rowSuffix[j] % mod;\n        }\n    }\n\n    for (let j = 0; j < m; j++) {\n        // Reset prefix and suffix products for this column\n        colPrefix = new Array(n).fill(1);\n        colSuffix = new Array(n).fill(1);\n\n        for (let i = 1; i < n; i++) {\n            colPrefix[i] = (colPrefix[i - 1] * grid[i - 1][j]) % mod;\n        }\n\n        for (let i = n - 2; i >= 0; i--) {\n            colSuffix[i] = (colSuffix[i + 1] * grid[i + 1][j]) % mod;\n        }\n\n        for (let i = 0; i < n; i++) {\n            p[i][j] = p[i][j] * colPrefix[i] * colSuffix[i] % mod;\n        }\n    }\n\n    return p;\n};"
}