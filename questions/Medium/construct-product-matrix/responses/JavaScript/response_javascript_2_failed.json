{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68504000,
    "question_id": "3031",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "[[24,12],[0,6]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706835814054,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 536,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1163463064",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[][]} grid\n * @return {number[][]}\n */\nvar constructProductMatrix = function(grid) {\n    const n = grid.length;\n    const m = grid[0].length;\n    let p = new Array(n).fill(0).map(() => new Array(m).fill(1));\n    const mod = 12345;\n\n    // Calculate row and column products separately and then combine, avoiding division.\n    \n    // Calculate the product of all numbers in the grid once, except for the row and column of interest.\n    let totalProduct = 1;\n    let zeroCount = 0; // Count of zeros in the grid\n    grid.forEach(row => {\n        row.forEach(value => {\n            if (value !== 0) {\n                totalProduct = (totalProduct * value) % mod;\n            } else {\n                zeroCount++;\n            }\n        });\n    });\n\n    if (zeroCount > 1) { // If more than one zero, all elements in product matrix will be zero.\n        return p; // Already filled with 1s, will be overridden below if not all zeros.\n    }\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 0) { // Special case: the current element is zero\n                // Calculate product of all elements except the current row and column.\n                let productWithoutCurrent = 1;\n                for (let x = 0; x < n; x++) {\n                    for (let y = 0; y < m; y++) {\n                        if (x !== i && y !== j && grid[x][y] !== 0) {\n                            productWithoutCurrent = (productWithoutCurrent * grid[x][y]) % mod;\n                        }\n                    }\n                }\n                p[i][j] = productWithoutCurrent;\n            } else if (zeroCount === 0) { // No zeros in grid\n                p[i][j] = totalProduct;\n                for (let x = 0; x < n; x++) {\n                    for (let y = 0; y < m; y++) {\n                        if (x === i && y === j) {\n                            p[i][j] = (p[i][j] * modInverse(grid[x][y], mod)) % mod;\n                        }\n                    }\n                }\n            } else { // If there's exactly one zero in the grid, and it's not the current element\n                p[i][j] = 0;\n            }\n        }\n    }\n\n    return p;\n};\n\n/**\n * Calculates the modular inverse of a number a under modulo m\n * @param {number} a - The number\n * @param {number} m - The modulo\n * @return {number} - The modular inverse\n */\nfunction modInverse(a, m) {\n    // Extended Euclidean Algorithm to find modular inverse\n    let m0 = m, t, q;\n    let x0 = 0, x1 = 1;\n\n    if (m === 1) return 0;\n\n    while (a > 1) {\n        // q is quotient\n        q = Math.floor(a / m);\n        t = m;\n\n        // m is remainder now, process same as Euclid's algo\n        m = a % m, a = t;\n        t = x0;\n\n        x0 = x1 - q * x0;\n        x1 = t;\n    }\n\n    // Make x1 positive\n    if (x1 < 0) x1 += m0;\n\n    return x1;\n}"
}