{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 57: IntegerDivisionByZeroException",
    "full_runtime_error": "Line 57: IntegerDivisionByZeroException\n#0      int.~/ (dart:core-patch/integers.dart:30:7)\n#1      Solution.modInverse (file:///solution.dart:57:17)\n#2      Solution.constructProductMatrix (file:///solution.dart:40:49)\n#3      main (file:///solution.dart:102:30)\n<asynchronous suspension>",
    "status_runtime": "N/A",
    "memory": 147516000,
    "question_id": "3031",
    "elapsed_time": 409,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706846019328,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1163550460",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<List<int>> constructProductMatrix(List<List<int>> grid) {\n    int n = grid.length;\n    int m = grid[0].length;\n    List<List<int>> productMatrix = List.generate(n, (_) => List.filled(m, 1));\n\n    // Compute the product of all elements in the grid modulo 12345, handling zeros if present.\n    int totalProduct = 1;\n    bool hasZero = false; // To check if there's a zero in the grid.\n    int zeroCount = 0; // Count zeros in grid.\n\n    // Calculate total product and zero count\n    for (var row in grid) {\n      for (var value in row) {\n        if (value != 0) {\n          totalProduct = (totalProduct * value) % 12345;\n        } else {\n          hasZero = true;\n          zeroCount++;\n        }\n      }\n    }\n\n    // If there's more than one zero, all products will be zero.\n    if (zeroCount > 1) {\n      return List.generate(n, (_) => List.filled(m, 0));\n    }\n\n    // Populate the productMatrix\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        if (hasZero) {\n          if (grid[i][j] != 0) {\n            productMatrix[i][j] = 0; // If there's a zero in the grid but not at current position.\n          } else {\n            productMatrix[i][j] = totalProduct; // If the current position is the zero.\n          }\n        } else {\n          // Calculate product excluding current element without direct division.\n          productMatrix[i][j] = (totalProduct * modInverse(grid[i][j], 12345)) % 12345;\n        }\n      }\n    }\n\n    return productMatrix;\n  }\n\n  // Implement the Extended Euclidean Algorithm to find the modular inverse\n  int modInverse(int a, int m) {\n    int m0 = m;\n    int y = 0, x = 1;\n\n    if (m == 1) return 0;\n\n    while (a > 1) {\n      // q is quotient\n      int q = a ~/ m;\n      int t = m;\n\n      // m is remainder now, process same as Euclid's algo\n      m = a % m;\n      a = t;\n      t = y;\n\n      // Update y and x\n      y = x - q * y;\n      x = t;\n    }\n\n    // Make x positive\n    if (x < 0) {\n      x += m0;\n    }\n\n    return x;\n  }\n}"
}