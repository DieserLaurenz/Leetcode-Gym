{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 97708000,
    "question_id": "3031",
    "elapsed_time": 1120,
    "compare_result
    "code_output": "[[24,24],[24,24]]",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1706845278644,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 160,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1163543174",
    "input_formatted": "[[1,2],[3,4]]",
    "input": "[[1,2],[3,4]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun constructProductMatrix(grid: Array<IntArray>): Array<IntArray> {\n        val n = grid.size\n        val m = grid[0].size\n        var totalProduct: Long = 1\n        var zeroCount = 0\n        var lastZeroRow = -1\n        var lastZeroCol = -1\n        val mod = 12345\n\n        // Calculate total product and count zeros\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                if (grid[i][j] == 0) {\n                    zeroCount++\n                    lastZeroRow = i\n                    lastZeroCol = j\n                } else {\n                    totalProduct = (totalProduct * grid[i][j]) % mod\n                }\n            }\n        }\n\n        val productMatrix = Array(n) { IntArray(m) }\n        \n        // If more than one zero, the entire matrix is zeros\n        if (zeroCount > 1) {\n            return productMatrix\n        }\n        \n        // If exactly one zero, compute products for that row and column only\n        if (zeroCount == 1) {\n            for (i in 0 until n) {\n                for (j in 0 until m) {\n                    if (i == lastZeroRow || j == lastZeroCol) {\n                        productMatrix[i][j] = 0\n                    }\n                }\n            }\n            productMatrix[lastZeroRow][lastZeroCol] = (totalProduct % mod).toInt()\n            return productMatrix\n        }\n\n        // If no zeros, compute product for each element\n        for (i in 0 until n) {\n            for (j in 0 until m) {\n                val inverse = modInverse(grid[i][j], mod)\n                productMatrix[i][j] = ((totalProduct * inverse) % mod).toInt()\n            }\n        }\n\n        return productMatrix\n    }\n\n    private fun modInverse(a: Int, m: Int): Long {\n        // Extended Euclidean Algorithm or Fermat's Little Theorem for modInverse,\n        // depending on what's allowed within the template constraints.\n        // Placeholder for actual implementation.\n        return 1L // Placeholder return\n    }\n}"
}