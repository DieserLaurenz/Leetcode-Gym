{
    "status_code": 15,
    "lang": "python3",
    "run_success": false,
    "runtime_error": "Line 33: ValueError: base is not invertible for the given modulus",
    "full_runtime_error": "ValueError: base is not invertible for the given modulus\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    p[i][j] = (total_product * pow(grid[i][j], -1, 12345)) % 12345\nLine 33 in constructProductMatrix (Solution.py)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ret = Solution().constructProductMatrix(param_1)\nLine 65 in _driver (Solution.py)\n    _driver()\nLine 76 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 16820000,
    "question_id": "3031",
    "elapsed_time": 52,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1708745482989,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184478526",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n        n, m = len(grid), len(grid[0])\n        row_product, col_product = [1] * n, [1] * m\n        total_product = 1\n        zero_count, zero_row, zero_col = 0, -1, -1\n        \n        # Compute product of each row and column, and total product\n        for i in range(n):\n            for j in range(m):\n                val = grid[i][j]\n                if val == 0:\n                    zero_count += 1\n                    zero_row, zero_col = i, j\n                    if zero_count > 1:\n                        break\n                    continue\n                row_product[i] *= val\n                col_product[j] *= val\n                total_product *= val\n        \n        # Handle the case with more than one zero\n        if zero_count > 1:\n            return [[0 for _ in range(m)] for _ in range(n)]\n        \n        # Compute the product matrix\n        p = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if zero_count == 0:\n                    p[i][j] = (total_product * pow(grid[i][j], -1, 12345)) % 12345\n                elif i == zero_row or j == zero_col:\n                    p[i][j] = 0\n                else:\n                    if zero_row != -1:\n                        p[i][j] = col_product[j] % 12345\n                    if zero_col != -1:\n                        p[i][j] = row_product[i] % 12345\n        \n        # Handle the case with exactly one zero\n        if zero_count == 1:\n            p[zero_row][zero_col] = (total_product % 12345)\n        \n        return p"
}