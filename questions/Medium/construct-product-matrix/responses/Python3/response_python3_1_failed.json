{
    "status_code": 15,
    "lang": "python3",
    "run_success": false,
    "runtime_error": "Line 29: ValueError: base is not invertible for the given modulus",
    "full_runtime_error": "ValueError: base is not invertible for the given modulus\n                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    product_except_self = (total_product * pow(grid[i][j], -1, 12345)) % 12345\nLine 29 in constructProductMatrix (Solution.py)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ret = Solution().constructProductMatrix(param_1)\nLine 65 in _driver (Solution.py)\n    _driver()\nLine 76 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 16808000,
    "question_id": "3031",
    "elapsed_time": 55,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,2],[3,4]]",
    "expected_output": "[[24,12],[8,6]]",
    "task_finish_time": 1708745536908,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1566,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184478903",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def constructProductMatrix(self, grid: List[List[int]]) -> List[List[int]]:\n        n, m = len(grid), len(grid[0])\n        total_product = 1\n        zero_positions = []\n\n        # Compute the total product and track positions of zeros\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 0:\n                    zero_positions.append((i, j))\n                else:\n                    total_product = (total_product * grid[i][j]) % 12345\n\n        # Initialize product matrix with ones\n        p = [[1 for _ in range(m)] for _ in range(n)]\n\n        # If more than one zero, all elements will be zero\n        if len(zero_positions) > 1:\n            return [[0 for _ in range(m)] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(m):\n                if len(zero_positions) == 0:  # No zero in grid\n                    product_except_self = total_product\n                    if grid[i][j] != 0:\n                        product_except_self = (total_product * pow(grid[i][j], -1, 12345)) % 12345\n                    p[i][j] = product_except_self\n                else:  # One zero in grid\n                    # If current position is not the zero position, then product is zero\n                    if (i, j) != zero_positions[0]:\n                        p[i][j] = 0\n                    else:\n                        # For the position of zero, calculate product of elements except this row and column\n                        row_product = col_product = 1\n                        for k in range(n):\n                            if k != i and grid[k][j] != 0:\n                                row_product = (row_product * grid[k][j]) % 12345\n                        for l in range(m):\n                            if l != j and grid[i][l] != 0:\n                                col_product = (col_product * grid[i][l]) % 12345\n                        p[i][j] = (row_product * col_product) % 12345\n\n        return p"
}