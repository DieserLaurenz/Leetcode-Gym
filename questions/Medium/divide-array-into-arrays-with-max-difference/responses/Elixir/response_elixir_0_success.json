{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "930 ms",
    "memory": 160568000,
    "question_id": "3241",
    "elapsed_time": 1113,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707191184572,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1115,
    "total_testcases": 1115,
    "runtime_percentile": 25.0,
    "status_memory": "160.6 MB",
    "memory_percentile": 35.0,
    "pretty_lang": "Elixir",
    "submission_id": "1167408219",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec divide_array(nums :: [integer], k :: integer) :: [[integer]]\n  def divide_array(nums, k) do\n    nums\n    |> Enum.sort()\n    |> Enum.chunk_every(3)\n    |> Enum.reduce_while([], fn chunk, acc ->\n      if Enum.max(chunk) - Enum.min(chunk) <= k, do: {:cont, [chunk | acc]}, else: {:halt, []}\n    end)\n    |> Enum.reverse()\n  end\nend"
}