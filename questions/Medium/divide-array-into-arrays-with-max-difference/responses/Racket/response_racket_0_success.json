{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "605 ms",
    "memory": 126820000,
    "question_id": "3241",
    "elapsed_time": 696,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707191064652,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1115,
    "total_testcases": 1115,
    "runtime_percentile": 100,
    "status_memory": "126.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1167406937",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (divide-array nums k)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  (let loop ((nums (sort nums <)) (acc '()))\n    (if (null? nums)\n        (reverse acc)\n        (let ((group (take nums 3)))\n          (if (and (<= (- (third group) (first group)) k)\n                   (= (length group) 3))\n              (loop (drop nums 3) (cons group acc))\n              '())))))"
}