{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "686 ms",
    "memory": 89108000,
    "question_id": "3241",
    "elapsed_time": 777,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707190353746,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1115,
    "total_testcases": 1115,
    "runtime_percentile": 31.104700000000246,
    "status_memory": "89.1 MB",
    "memory_percentile": 58.696000000000105,
    "pretty_lang": "C",
    "submission_id": "1167399450",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint cmp(const void *a, const void *b) {\n    return *(int *)a - *(int *)b;\n}\n\nint** divideArray(int* nums, int numsSize, int k, int* returnSize, int** returnColumnSizes) {\n    qsort(nums, numsSize, sizeof(int), cmp);\n    *returnSize = numsSize / 3;\n    *returnColumnSizes = (int *)malloc(*returnSize * sizeof(int));\n    int **result = (int **)malloc(*returnSize * sizeof(int *));\n    for (int i = 0; i < *returnSize; i++) {\n        (*returnColumnSizes)[i] = 3;\n        result[i] = (int *)malloc(3 * sizeof(int));\n        for (int j = 0; j < 3; j++) {\n            result[i][j] = nums[i * 3 + j];\n        }\n        if (result[i][2] - result[i][0] > k) {\n            free(*returnColumnSizes);\n            for (int x = 0; x <= i; x++) {\n                free(result[x]);\n            }\n            free(result);\n            *returnSize = 0;\n            return NULL;\n        }\n    }\n    return result;\n}"
}