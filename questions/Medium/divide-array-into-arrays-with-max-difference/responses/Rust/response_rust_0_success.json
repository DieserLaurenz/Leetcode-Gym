{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "52 ms",
    "memory": 5180000,
    "question_id": "3241",
    "elapsed_time": 71,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707191014001,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1115,
    "total_testcases": 1115,
    "runtime_percentile": 75.60770000000002,
    "status_memory": "5.2 MB",
    "memory_percentile": 75.4458,
    "pretty_lang": "Rust",
    "submission_id": "1167406428",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn divide_array(nums: Vec<i32>, k: i32) -> Vec<Vec<i32>> {\n        let mut nums = nums;\n        nums.sort_unstable();\n        let mut result = Vec::new();\n        let mut temp = Vec::new();\n        for &num in &nums {\n            if temp.len() < 3 {\n                if temp.is_empty() || num - temp[0] <= k {\n                    temp.push(num);\n                } else {\n                    temp.clear();\n                    temp.push(num);\n                }\n            }\n            if temp.len() == 3 {\n                result.push(temp.clone());\n                temp.clear();\n            }\n        }\n        if temp.len() == 3 {\n            result.push(temp);\n        }\n        if result.iter().flatten().count() != nums.len() {\n            return vec![];\n        }\n        result\n    }\n}"
}