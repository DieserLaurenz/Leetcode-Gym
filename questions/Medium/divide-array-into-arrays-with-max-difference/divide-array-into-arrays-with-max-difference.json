{
    "acRate": 57.63132069624503,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2966",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Divide Array Into Arrays With Max Difference",
    "titleSlug": "divide-array-into-arrays-with-max-difference",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        }
    ],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<vector<int>> divideArray(vector<int>& nums, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[][] divideArray(int[] nums, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def divideArray(self, nums, k):         \"\"\"         :type nums: List[int]         :type k: int         :rtype: List[List[int]]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def divideArray(self, nums: List[int], k: int) -> List[List[int]]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *returnColumnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** divideArray(int* nums, int numsSize, int k, int* returnSize, int** returnColumnSizes) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[][] DivideArray(int[] nums, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} k  * @return {number[][]}  */ var divideArray = function(nums, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function divideArray(nums: number[], k: number): number[][] {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $k      * @return Integer[][]      */     function divideArray($nums, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func divideArray(_ nums: [Int], _ k: Int) -> [[Int]] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun divideArray(nums: IntArray, k: Int): Array<IntArray> {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<List<int>> divideArray(List<int> nums, int k) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func divideArray(nums []int, k int) [][]int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} k # @return {Integer[][]} def divide_array(nums, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def divideArray(nums: Array[Int], k: Int): Array[Array[Int]] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn divide_array(nums: Vec<i32>, k: i32) -> Vec<Vec<i32>> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (divide-array nums k)   (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec divide_array(Nums :: [integer()], K :: integer()) -> [[integer()]]. divide_array(Nums, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec divide_array(nums :: [integer], k :: integer) :: [[integer]]   def divide_array(nums, k) do        end end"
        }
    ],
    "content": "You are given an integer array nums of size n and a positive integer k. Divide the array into one or more arrays of size 3 satisfying the following conditions:  Each element of nums should be in exactly one array. The difference between any two elements in one array is less than or equal to k.  Return a 2D array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.  Example 1:  Input: nums = [1,3,4,8,7,9,3,5,1], k = 2 Output: [[1,1,3],[3,4,5],[7,8,9]] Explanation: We can divide the array into the following arrays: [1,1,3], [3,4,5] and [7,8,9]. The difference between any two elements in each array is less than or equal to 2. Note that the order of elements is not important.  Example 2:  Input: nums = [1,3,3,2,7,3], k = 3 Output: [] Explanation: It is not possible to divide the array satisfying all the conditions.   Constraints:  n == nums.length 1 <= n <= 105 n is a multiple of 3. 1 <= nums[i] <= 105 1 <= k <= 105  "
}