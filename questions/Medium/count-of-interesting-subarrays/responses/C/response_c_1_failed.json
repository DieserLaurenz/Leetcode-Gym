{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 500232000,
    "question_id": "2915",
    "elapsed_time": 2839,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[11,12,21,31]\n10\n1",
    "expected_output": "5",
    "task_finish_time": 1707084141439,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 146,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1166232914",
    "input_formatted": "[11,12,21,31], 10, 1",
    "input": "[11,12,21,31]\n10\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long countInterestingSubarrays(int* nums, int numsSize, int modulo, int k){\n    long long result = 0;\n    int* prefixSum = (int*)malloc(sizeof(int) * (numsSize + 1));\n    int* count = (int*)calloc(modulo, sizeof(int));\n    prefixSum[0] = 0;\n\n    for (int i = 1; i <= numsSize; i++) {\n        if (nums[i - 1] % modulo == k) {\n            prefixSum[i] = (prefixSum[i - 1] + 1) % modulo;\n        } else {\n            prefixSum[i] = prefixSum[i - 1];\n        }\n    }\n\n    count[0] = 1; // Base case: empty subarray\n    for (int i = 1; i <= numsSize; i++) {\n        result += count[prefixSum[i]];\n        count[prefixSum[i]]++;\n    }\n\n    free(prefixSum);\n    free(count);\n    return result;\n}"
}