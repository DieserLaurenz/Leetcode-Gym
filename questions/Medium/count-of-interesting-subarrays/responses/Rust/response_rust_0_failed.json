{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7264000,
    "question_id": "2915",
    "elapsed_time": 67,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[11,12,21,31]\n10\n1",
    "expected_output": "5",
    "task_finish_time": 1707085026465,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 146,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1166240516",
    "input_formatted": "[11,12,21,31], 10, 1",
    "input": "[11,12,21,31]\n10\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_interesting_subarrays(nums: Vec<i32>, modulo: i32, k: i32) -> i64 {\n        let mut count = 0i64;\n        let mut prefix_sum = vec![0; nums.len() + 1];\n        let mut frequency = std::collections::HashMap::new();\n        frequency.insert((0, 0), 1i64);\n\n        for i in 0..nums.len() {\n            let current_mod = if nums[i] % modulo == k { 1 } else { 0 };\n            prefix_sum[i + 1] = (prefix_sum[i] + current_mod) % modulo;\n            let key = (prefix_sum[i + 1], (prefix_sum[i + 1] + modulo - k) % modulo);\n            count += *frequency.get(&key).unwrap_or(&0);\n            *frequency.entry(key).or_insert(0) += 1;\n        }\n\n        count\n    }\n}"
}