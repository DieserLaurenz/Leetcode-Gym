{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "33 ms",
    "memory": 6772000,
    "question_id": "2915",
    "elapsed_time": 50,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707085055972,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 617,
    "total_testcases": 617,
    "runtime_percentile": 100,
    "status_memory": "6.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Rust",
    "submission_id": "1166240733",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_interesting_subarrays(nums: Vec<i32>, modulo: i32, k: i32) -> i64 {\n        let mut count = 0i64;\n        let mut freq = std::collections::HashMap::new();\n        freq.insert(0, 1i64);\n        let mut sum = 0;\n        let mut interesting_count = 0;\n\n        for num in nums {\n            sum = (sum + if num % modulo == k { 1 } else { 0 }) % modulo;\n            interesting_count += *freq.get(&((sum + modulo - k) % modulo)).unwrap_or(&0);\n            *freq.entry(sum).or_insert(0) += 1;\n        }\n\n        interesting_count\n    }\n}"
}