{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "32 ms",
    "memory": 66652000,
    "display_runtime": "32",
    "question_id": "2915",
    "elapsed_time": 479,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707075923446,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 617,
    "total_testcases": 617,
    "runtime_percentile": 72.0588,
    "status_memory": "66.7 MB",
    "memory_percentile": 23.528799999999933,
    "pretty_lang": "Java",
    "submission_id": "1166152931",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long countInterestingSubarrays(List<Integer> nums, int modulo, int k) {\n        long count = 0;\n        Map<Integer, Integer> prefixSum = new HashMap<>();\n        prefixSum.put(0, 1); // Initialize with a sum of 0 having 1 occurrence\n        int currentSum = 0;\n\n        for (int num : nums) {\n            // If the current number satisfies the condition, increase the sum\n            if (num % modulo == k) currentSum++;\n            // Adjust currentSum to be within the range [0, modulo - 1]\n            int adjustedSum = (currentSum - k) % modulo;\n            if (adjustedSum < 0) adjustedSum += modulo;\n\n            // Add the occurrences of the adjustedSum to the count\n            count += prefixSum.getOrDefault(adjustedSum, 0);\n\n            // Increment the occurrence of the currentSum in the map\n            prefixSum.put(currentSum % modulo, prefixSum.getOrDefault(currentSum % modulo, 0) + 1);\n        }\n\n        return count;\n    }\n}"
}