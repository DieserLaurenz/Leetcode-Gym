{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "662 ms",
    "memory": 67732000,
    "question_id": "2915",
    "elapsed_time": 720,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707084628049,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 617,
    "total_testcases": 617,
    "runtime_percentile": 100,
    "status_memory": "67.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "Kotlin",
    "submission_id": "1166237048",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun countInterestingSubarrays(nums: List<Int>, modulo: Int, k: Int): Long {\n        val prefixCounts = LongArray(nums.size + 1)\n        val countMap = mutableMapOf<Long, Long>()\n        var count = 0L\n        var interestingCount = 0L\n\n        countMap[0] = 1L\n\n        for (i in nums.indices) {\n            if (nums[i] % modulo == k) count++\n            prefixCounts[i + 1] = count\n\n            val target = (count - k + modulo) % modulo\n            interestingCount += countMap.getOrDefault(target, 0L)\n\n            countMap[prefixCounts[i + 1] % modulo] = countMap.getOrDefault(prefixCounts[i + 1] % modulo, 0L) + 1\n        }\n\n        return interestingCount\n    }\n}"
}