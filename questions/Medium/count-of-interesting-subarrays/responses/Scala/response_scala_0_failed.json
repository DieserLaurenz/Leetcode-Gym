{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 111316000,
    "question_id": "2915",
    "elapsed_time": 2469,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[3,1,9,6]\n3\n0",
    "expected_output": "2",
    "task_finish_time": 1707084901194,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 211,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1166239358",
    "input_formatted": "[3,1,9,6], 3, 0",
    "input": "[3,1,9,6]\n3\n0",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countInterestingSubarrays(nums: List[Int], modulo: Int, k: Int): Long = {\n        val prefixSum = nums.scanLeft(0)((acc, num) => acc + (if (num % modulo == k) 1 else 0))\n        val counts = prefixSum.groupBy(identity).view.mapValues(_.length.toLong)\n        counts.foldLeft(0L) { case (acc, (value, count)) =>\n            if (value % modulo == k) acc + count * (count - 1) / 2 else acc\n        }\n    }\n}"
}