{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66588000,
    "question_id": "2915",
    "elapsed_time": 10205,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[11,12,21,31]\n10\n1",
    "expected_output": "5",
    "task_finish_time": 1707084939925,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 143,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1166239609",
    "input_formatted": "[11,12,21,31], 10, 1",
    "input": "[11,12,21,31]\n10\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countInterestingSubarrays(nums: List[Int], modulo: Int, k: Int): Long = {\n        val prefixSums = Array.fill(nums.length + 1)(0)\n        for (i <- nums.indices) {\n            prefixSums(i + 1) = (prefixSums(i) + (if (nums(i) % modulo == k) 1 else 0)) % modulo\n        }\n        val countMap = scala.collection.mutable.Map[Int, Long]()\n        prefixSums.foreach(sum => countMap(sum) = countMap.getOrElse(sum, 0L) + 1)\n        countMap.valuesIterator.foldLeft(0L)((acc, count) => acc + count * (count - 1) / 2)\n    }\n}"
}