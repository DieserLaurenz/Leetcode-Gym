{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63748000,
    "question_id": "2915",
    "elapsed_time": 4992,
    "compare_result": "11011111111111111111111011100111101011000110100001010011000001100110001011000000010000001111111001000100010110111000000000000000000001001010111000011010000010111000011010000011000011100000100000000000111100000000000010000010111000000010000011110010000000001000101100000000000000000100000000000000000110010000000110000001000000010100000000011100101001000000000100010011011000000000000011111011110100001011011111110111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[11,12,21,31]\n10\n1",
    "expected_output": "5",
    "task_finish_time": 1707085236431,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 147,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1166242176",
    "input_formatted": "[11,12,21,31], 10, 1",
    "input": "[11,12,21,31]\n10\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_interesting_subarrays(Nums :: [integer()], Modulo :: integer(), K :: integer()) -> integer().\ncount_interesting_subarrays(Nums, Modulo, K) ->\n    count_interesting_subarrays(Nums, Modulo, K, 0, 0).\n\ncount_interesting_subarrays([], _Modulo, _K, Count, _CurrentCount) ->\n    Count;\ncount_interesting_subarrays([H | T], Modulo, K, Count, CurrentCount) ->\n    NewCurrentCount = case H rem Modulo == K of\n        true -> CurrentCount + 1;\n        false -> CurrentCount\n    end,\n    NewCount = case NewCurrentCount rem Modulo == K of\n        true -> Count + 1;\n        false -> Count\n    end,\n    count_interesting_subarrays(T, Modulo, K, NewCount, NewCurrentCount) + \n    count_interesting_subarrays(T, Modulo, K, 0, 0)."
}