{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 35: exception error: {case_clause,#{0 => 1,1 => 3}}",
    "full_runtime_error": "Line 35: exception error: {case_clause,#{0 => 1,1 => 3}}\n[{lists,foldl,3,[{file,\"lists.erl\"},{line,1593}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,35}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,19}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,52}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 64384000,
    "question_id": "2915",
    "elapsed_time": 1385,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,2,4]\n2\n1",
    "expected_output": "3",
    "task_finish_time": 1707085266853,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1166242455",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec count_interesting_subarrays(Nums :: [integer()], Modulo :: integer(), K :: integer()) -> integer().\ncount_interesting_subarrays(Nums, Modulo, K) ->\n    PrefixSums = lists:foldl(fun(X, {Sum, Acc}) ->\n                                NewSum = (Sum + if X rem Modulo == K -> 1; true -> 0 end) rem Modulo,\n                                {NewSum, [NewSum | Acc]}\n                             end, {0, [0]}, Nums),\n    Counts = lists:foldl(fun(X, Acc) -> maps:update_with(X, fun(V) -> V + 1 end, 1, Acc) end, #{}, element(2, PrefixSums)),\n    lists:foldl(fun(X, Acc) ->\n                    maps:fold(fun(K, V, InnerAcc) ->\n                                if \n                                    X == K -> InnerAcc;\n                                    true -> InnerAcc + V * maps:get((X - K + Modulo) rem Modulo, Counts, 0)\n                                end\n                              end, Acc, Counts)\n                end, 0, Counts)."
}