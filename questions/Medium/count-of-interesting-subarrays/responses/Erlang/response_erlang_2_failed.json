{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 104488000,
    "question_id": "2915",
    "elapsed_time": 4962,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[3,2,4]\n2\n1",
    "expected_output": "3",
    "task_finish_time": 1707085308440,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 34,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1166242783",
    "input_formatted": "[3,2,4], 2, 1",
    "input": "[3,2,4]\n2\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_interesting_subarrays(Nums :: [integer()], Modulo :: integer(), K :: integer()) -> integer().\ncount_interesting_subarrays(Nums, Modulo, K) ->\n    count_interesting_subarrays(Nums, Modulo, K, maps:new(), 0, 0, 1).\n\ncount_interesting_subarrays([], _Modulo, _K, _Map, Count, _CurrentSum, _Index) ->\n    Count;\ncount_interesting_subarrays([H | T], Modulo, K, Map, Count, CurrentSum, Index) ->\n    NewCurrentSum = (CurrentSum + H) rem Modulo,\n    MapUpdated = maps:put(NewCurrentSum, maps:get(NewCurrentSum, Map, 0) + 1, Map),\n    InitialCount = case K == 0 of\n        true -> Count + maps:get(0, Map, 0); % Special case for K = 0\n        false -> Count\n    end,\n    NewCount = lists:foldl(\n        fun(I, Acc) ->\n            SumI = (NewCurrentSum - I + Modulo) rem Modulo,\n            Acc + case SumI == K of\n                true -> maps:get(I, Map, 0);\n                false -> 0\n            end\n        end, InitialCount, maps:keys(Map)),\n    count_interesting_subarrays(T, Modulo, K, MapUpdated, NewCount, NewCurrentSum, Index + 1)."
}