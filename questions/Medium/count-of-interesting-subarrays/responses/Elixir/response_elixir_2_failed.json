{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (ArithmeticError) bad argument in arithmetic expression: 0 + {1, 0}",
    "full_runtime_error": "Line 5: ** (ArithmeticError) bad argument in arithmetic expression: 0 + {1, 0}\n    :erlang.+(0, {1, 0})\n    solution.ex:5: anonymous fn/5 in Solution.count_interesting_subarrays/3\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:31: Driver.consume_test_cases/2\n    solution.ex:15: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 74468000,
    "question_id": "2915",
    "elapsed_time": 382,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,2,4]\n2\n1",
    "expected_output": "3",
    "task_finish_time": 1707085405933,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1166243591",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_interesting_subarrays(nums :: [integer], modulo :: integer, k :: integer) :: integer\n  def count_interesting_subarrays(nums, modulo, k) do\n    Enum.reduce(0..length(nums)-1, 0, fn start, acc1 ->\n      acc1 + Enum.reduce(start..length(nums)-1, {0, 0}, fn\n        end_, {cnt, acc_inner} -> if rem(Enum.at(nums, end_), modulo) == k, do: {cnt + 1, acc_inner}, else: {cnt, acc_inner}\n      end)\n      |> (fn {cnt, _acc_inner} -> if rem(cnt, modulo) == k, do: 1, else: 0 end).()\n    end)\n  end\nend"
}