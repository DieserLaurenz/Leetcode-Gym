{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18780000,
    "question_id": "2915",
    "elapsed_time": 136,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[3,1,9,6]\n3\n0",
    "expected_output": "2",
    "task_finish_time": 1707084766026,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 210,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1166238248",
    "input_formatted": "[3,1,9,6], 3, 0",
    "input": "[3,1,9,6]\n3\n0",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countInterestingSubarrays(nums []int, modulo int, k int) int64 {\n    var count int64\n    prefixCount := make([]int, len(nums)+1)\n    for i := 1; i <= len(nums); i++ {\n        if nums[i-1]%modulo == k {\n            prefixCount[i] = prefixCount[i-1] + 1\n        } else {\n            prefixCount[i] = prefixCount[i-1]\n        }\n    }\n\n    freq := make(map[int]int64)\n    for _, c := range prefixCount {\n        modC := c % modulo\n        if modC == k {\n            count += freq[modC]\n            if k == 0 { // Handle the case where k == 0 separately as it includes the subarray itself\n                count++\n            }\n        }\n        freq[modC]++\n    }\n\n    return count\n}"
}