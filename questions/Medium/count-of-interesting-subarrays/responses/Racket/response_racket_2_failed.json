{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "application: not a procedure;",
    "full_runtime_error": "application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n  context...:\n   solution.rkt:1:0: count-interesting-subarrays\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:21:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99948000,
    "question_id": "2915",
    "elapsed_time": 231,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,2,4]\n2\n1",
    "expected_output": "3",
    "task_finish_time": 1707085176863,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 617,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1166241711",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (count-interesting-subarrays nums modulo k)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  \n  (let ([n (length nums)])\n    (let loop ([i 0] [total 0])\n      (if (= i n)\n          total\n          (let loop-inner ([j i] [count 0] [interesting 0])\n            (if (= j n)\n                (loop (+ i 1) (+ total interesting))\n                (begin\n                  (when (= (modulo (list-ref nums j) modulo) k)\n                    (set! count (+ count 1)))\n                  (when (= (modulo count modulo) k)\n                    (set! interesting (+ interesting 1)))\n                  (loop-inner (+ j 1) count interesting))))))))"
}