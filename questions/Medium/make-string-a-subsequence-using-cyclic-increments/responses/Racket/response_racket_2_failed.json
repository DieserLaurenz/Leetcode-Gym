{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 14: Char 71: read-syntax: missing `)` to close `(` on line 15, found instead `]`",
    "full_compile_error": "Line 14: Char 71: read-syntax: missing `)` to close `(` on line 15, found instead `]`\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3018",
    "task_finish_time": 1707566760562,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1171376122",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (can-make-subsequence str1 str2)\n  (-> string? string? boolean?)\n  (letrec ([next-char (lambda (c) (if (= c #\\z) #\\a (integer->char (+ 1 (char->integer c)))))]\n           [is-subseq? (lambda (i1 i2)\n                         (if (>= i2 (string-length str2))\n                             #t\n                             (if (>= i1 (string-length str1))\n                                 #f\n                                 (let ([c1 (string-ref str1 i1)])\n                                   (let ([nc1 (next-char c1)])\n                                     (or (and (or (char=? c1 (string-ref str2 i2))\n                                                  (char=? nc1 (string-ref str2 i2)))\n                                              (is-subseq? (+ i1 1) (+ i2 1)))\n                                         (is-subseq? (+ i1 1) i2))))))])\n    (is-subseq? 0 0)))"
}