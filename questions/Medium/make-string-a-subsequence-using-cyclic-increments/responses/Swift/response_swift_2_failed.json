{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24792000,
    "question_id": "3018",
    "elapsed_time": 201,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"ad\"",
    "expected_output": "true",
    "task_finish_time": 1707557541440,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 562,
    "total_testcases": 1126,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1171288297",
    "input_formatted": "\"abc\", \"ad\"",
    "input": "\"abc\"\n\"ad\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func canMakeSubsequence(_ str1: String, _ str2: String) -> Bool {\n        var indexes = Array(repeating: -1, count: 26) // Track last seen indexes for each letter in str1\n        let s1 = Array(str1)\n        let s2 = Array(str2)\n        \n        // Preprocess str1 to find the last occurrence of each character\n        for (i, char) in s1.enumerated().reversed() {\n            indexes[Int(char.asciiValue! - Character(\"a\").asciiValue!)] = i\n        }\n        \n        var prevIndex = -1 // Track the last matched character's index in str1\n        for char in s2 {\n            let charIndex = Int(char.asciiValue! - Character(\"a\").asciiValue!)\n            if indexes[charIndex] == -1 {\n                // If the current character in str2 was never found in str1, return false\n                return false\n            }\n            // Check if we can cyclically move to the next character given the last character's index\n            let nextCharIndex = (charIndex + 1) % 26\n            let possibleIndex = indexes[nextCharIndex]\n            if possibleIndex <= prevIndex {\n                // If the next character is not found after the previous matching character, return false\n                return false\n            }\n            prevIndex = possibleIndex\n        }\n        return true\n    }\n}"
}