{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 7: ** (FunctionClauseError) no function clause matching in Solution.check_subsequence/3",
    "full_runtime_error": "Line 7: ** (FunctionClauseError) no function clause matching in Solution.check_subsequence/3\n    The following arguments were given to Solution.check_subsequence/3:\n        # 1\n        \"abc\"\n        # 2\n        \"ad\"\n        # 3\n        false\n    solution.ex:7: Solution.check_subsequence/3\n    solution.ex:41: Driver.consume_test_cases/2\n    solution.ex:27: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 74448000,
    "question_id": "3018",
    "elapsed_time": 335,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abc\"\n\"ad\"",
    "expected_output": "true",
    "task_finish_time": 1707566969925,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1126,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171377973",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec can_make_subsequence(str1 :: String.t, str2 :: String.t) :: boolean\n  def can_make_subsequence(str1, str2) do\n    check_subsequence(str1, str2, false)\n  end\n\n  defp check_subsequence(_str1, \"\", _changed), do: true\n\n  defp check_subsequence(\"\", _str2, _changed), do: false\n\n  defp check_subsequence([h1 | t1], [h2 | t2] = str2, changed) when h1 == h2 do\n    check_subsequence(t1, t2, changed)\n  end\n\n  defp check_subsequence([h1 | t1], [h2 | t2] = str2, false) do\n    next_char = if h1 === 'z', do: 'a', else: <<h1 + 1>>\n    if next_char === h2, do: check_subsequence(t1, t2, true), else: check_subsequence(t1, str2, false)\n  end\n\n  defp check_subsequence([_ | t1], str2, true) do\n    check_subsequence(t1, str2, true)\n  end\nend"
}