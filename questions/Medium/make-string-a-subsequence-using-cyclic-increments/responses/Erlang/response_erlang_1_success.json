{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "586 ms",
    "memory": 100152000,
    "question_id": "3018",
    "elapsed_time": 1717,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707566855090,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1126,
    "total_testcases": 1126,
    "runtime_percentile": 100,
    "status_memory": "100.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1171376984",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec can_make_subsequence(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> boolean().\ncan_make_subsequence(Str1, Str2) ->\n  can_make_subsequence(binary_to_list(Str1), binary_to_list(Str2), 0).\n\ncan_make_subsequence(_, [], _) -> true;\ncan_make_subsequence([], _, _) -> false;\ncan_make_subsequence([H1|T1], [H2|T2], Index) ->\n  NextChar = if H1 == $z -> $a; true -> H1 + 1 end,\n  case H1 == H2 orelse NextChar == H2 of\n    true when H1 == H2 -> can_make_subsequence(T1, T2, Index + 1);\n    true -> can_make_subsequence(T1, T2, Index);\n    false -> can_make_subsequence(T1, [H2|T2], Index + 1)\n  end."
}