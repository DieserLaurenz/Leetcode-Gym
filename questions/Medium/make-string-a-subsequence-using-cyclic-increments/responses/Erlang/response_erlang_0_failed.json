{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 95744000,
    "question_id": "3018",
    "elapsed_time": 1703,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "\"zc\"\n\"ad\"",
    "expected_output": "true",
    "task_finish_time": 1707566824421,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 669,
    "total_testcases": 1126,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1171376722",
    "input_formatted": "\"zc\", \"ad\"",
    "input": "\"zc\"\n\"ad\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec can_make_subsequence(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> boolean().\ncan_make_subsequence(Str1, Str2) ->\n  can_make_subsequence(binary_to_list(Str1), binary_to_list(Str2), false).\n\ncan_make_subsequence(_, [], _) -> true;\ncan_make_subsequence([], _, _) -> false;\ncan_make_subsequence([H1|T1], [H2|T2], Changed) ->\n  if\n    H1 == H2 -> can_make_subsequence(T1, T2, Changed);\n    Changed -> false;\n    true ->\n      NextChar = if H1 == 122 -> 97; true -> H1 + 1 end,\n      if\n        NextChar == H2 -> can_make_subsequence(T1, T2, true);\n        true -> can_make_subsequence(T1, [H2|T2], Changed)\n      end\n  end."
}