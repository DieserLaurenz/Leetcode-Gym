{
    "acRate": 47.90569350388763,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2825",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Make String a Subsequence Using Cyclic Increments",
    "titleSlug": "make-string-a-subsequence-using-cyclic-increments",
    "topicTags": [
        {
            "name": "Two Pointers",
            "id": "VG9waWNUYWdOb2RlOjk=",
            "slug": "two-pointers"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     bool canMakeSubsequence(string str1, string str2) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public boolean canMakeSubsequence(String str1, String str2) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def canMakeSubsequence(self, str1, str2):         \"\"\"         :type str1: str         :type str2: str         :rtype: bool         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def canMakeSubsequence(self, str1: str, str2: str) -> bool:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "bool canMakeSubsequence(char * str1, char * str2){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public bool CanMakeSubsequence(string str1, string str2) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} str1  * @param {string} str2  * @return {boolean}  */ var canMakeSubsequence = function(str1, str2) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function canMakeSubsequence(str1: string, str2: string): boolean {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $str1      * @param String $str2      * @return Boolean      */     function canMakeSubsequence($str1, $str2) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func canMakeSubsequence(_ str1: String, _ str2: String) -> Bool {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun canMakeSubsequence(str1: String, str2: String): Boolean {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   bool canMakeSubsequence(String str1, String str2) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func canMakeSubsequence(str1 string, str2 string) bool {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} str1 # @param {String} str2 # @return {Boolean} def can_make_subsequence(str1, str2)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def canMakeSubsequence(str1: String, str2: String): Boolean = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn can_make_subsequence(str1: String, str2: String) -> bool {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (can-make-subsequence str1 str2)   (-> string? string? boolean?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec can_make_subsequence(Str1 :: unicode:unicode_binary(), Str2 :: unicode:unicode_binary()) -> boolean(). can_make_subsequence(Str1, Str2) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec can_make_subsequence(str1 :: String.t, str2 :: String.t) :: boolean   def can_make_subsequence(str1, str2) do    end end"
        }
    ],
    "content": "You are given two 0-indexed strings str1 and str2. In an operation, you select a set of indices in str1, and for each index i in the set, increment str1[i] to the next character cyclically. That is 'a' becomes 'b', 'b' becomes 'c', and so on, and 'z' becomes 'a'. Return true if it is possible to make str2 a subsequence of str1 by performing the operation at most once, and false otherwise. Note: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.  Example 1:  Input: str1 = \"abc\", str2 = \"ad\" Output: true Explanation: Select index 2 in str1. Increment str1[2] to become 'd'.  Hence, str1 becomes \"abd\" and str2 is now a subsequence. Therefore, true is returned. Example 2:  Input: str1 = \"zc\", str2 = \"ad\" Output: true Explanation: Select indices 0 and 1 in str1.  Increment str1[0] to become 'a'.  Increment str1[1] to become 'd'.  Hence, str1 becomes \"ad\" and str2 is now a subsequence. Therefore, true is returned. Example 3:  Input: str1 = \"ab\", str2 = \"d\" Output: false Explanation: In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once.  Therefore, false is returned.  Constraints:  1 <= str1.length <= 105 1 <= str2.length <= 105 str1 and str2 consist of only lowercase English letters.  "
}