{
    "acRate": 44.60376916773967,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2962",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Count Subarrays Where Max Element Appears at Least K Times",
    "titleSlug": "count-subarrays-where-max-element-appears-at-least-k-times",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Sliding Window",
            "id": "VG9waWNUYWdOb2RlOjU1ODIx",
            "slug": "sliding-window"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long countSubarrays(vector<int>& nums, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long countSubarrays(int[] nums, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def countSubarrays(self, nums, k):         \"\"\"         :type nums: List[int]         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def countSubarrays(self, nums: List[int], k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long countSubarrays(int* nums, int numsSize, int k) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long CountSubarrays(int[] nums, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} k  * @return {number}  */ var countSubarrays = function(nums, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function countSubarrays(nums: number[], k: number): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $k      * @return Integer      */     function countSubarrays($nums, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func countSubarrays(_ nums: [Int], _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun countSubarrays(nums: IntArray, k: Int): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int countSubarrays(List<int> nums, int k) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func countSubarrays(nums []int, k int) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} k # @return {Integer} def count_subarrays(nums, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def countSubarrays(nums: Array[Int], k: Int): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn count_subarrays(nums: Vec<i32>, k: i32) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (count-subarrays nums k)   (-> (listof exact-integer?) exact-integer? exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec count_subarrays(Nums :: [integer()], K :: integer()) -> integer(). count_subarrays(Nums, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec count_subarrays(nums :: [integer], k :: integer) :: integer   def count_subarrays(nums, k) do        end end"
        }
    ],
    "content": "You are given an integer array nums and a positive integer k. Return the number of subarrays where the maximum element of nums appears at least k times in that subarray. A subarray is a contiguous sequence of elements within an array.  Example 1:  Input: nums = [1,3,2,3,3], k = 2 Output: 6 Explanation: The subarrays that contain the element 3 at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].  Example 2:  Input: nums = [1,4,2,1], k = 3 Output: 0 Explanation: No subarray contains the element 4 at least 3 times.   Constraints:  1 <= nums.length <= 105 1 <= nums[i] <= 106 1 <= k <= 105  "
}