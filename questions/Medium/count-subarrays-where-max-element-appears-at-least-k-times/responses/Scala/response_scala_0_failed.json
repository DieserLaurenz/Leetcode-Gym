{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 86896000,
    "question_id": "3213",
    "elapsed_time": 1410,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707117677038,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1166563673",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countSubarrays(nums: Array[Int], k: Int): Long = {\n        val maxVal = nums.max\n        val indices = nums.indices.filter(nums(_) == maxVal).toArray\n        var count = 0L\n\n        if (indices.length < k) return 0\n\n        for (i <- indices.indices) {\n            val left = if (i == 0) indices(i) else indices(i) - indices(i - 1)\n            val right = if (i == indices.length - 1) nums.length - indices(i) - 1 else indices(i + 1) - indices(i) - 1\n            if (i < k - 1) count += (left + 1) * (right + 1)\n            if (i >= k - 1) {\n                val prevLeft = if (i == k - 1) indices(i - k + 1) + 1 else indices(i - k + 1) - indices(i - k)\n                count += prevLeft * (right + 1)\n            }\n        }\n        count\n    }\n}"
}