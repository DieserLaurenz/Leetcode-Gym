{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 77744000,
    "question_id": "3213",
    "elapsed_time": 1056,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707117705484,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 11,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1166564001",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countSubarrays(nums: Array[Int], k: Int): Long = {\n        val maxVal = nums.max\n        var total = 0L\n        var start = 0\n        var end = 0\n        var count = 0\n\n        while (start < nums.length) {\n            end = start\n            count = 0\n            while (end < nums.length && (nums(end) == maxVal || count < k)) {\n                if (nums(end) == maxVal) count += 1\n                if (count >= k) total += 1\n                end += 1\n            }\n            total += (end - start - 1) * (end - start) / 2\n            start = end + 1\n        }\n\n        total\n    }\n}"
}