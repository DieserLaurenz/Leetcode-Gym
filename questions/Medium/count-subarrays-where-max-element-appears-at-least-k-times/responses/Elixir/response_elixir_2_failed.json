{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 174832000,
    "question_id": "3213",
    "elapsed_time": 1238,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707118900028,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1166577158",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer], k :: integer) :: integer\n  def count_subarrays(nums, k) do\n    max_val = Enum.max(nums)\n    segments = nums\n               |> Enum.with_index()\n               |> Enum.filter(fn {num, _} -> num == max_val end)\n               |> Enum.map(fn {_, index} -> index end)\n               |> Enum.chunk_by(fn x -> x end)\n               |> Enum.filter(fn segment -> length(segment) >= k end)\n\n    count = Enum.reduce(segments, 0, fn segment, acc ->\n      start_pos = hd(segment) - (k - 1)\n      end_pos = List.last(segment) + (k - 1)\n      acc + (start_pos + 1) * (length(nums) - end_pos)\n    end)\n\n    count\n  end\nend"
}