{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 80108000,
    "question_id": "3213",
    "elapsed_time": 6022,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707118869925,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1166576760",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer], k :: integer) :: integer\n  def count_subarrays(nums, k) do\n    max_val = Enum.max(nums)\n    counts = Enum.frequencies(nums)\n\n    if counts[max_val] < k do\n      0\n    else\n      indexes = Enum.with_index(nums) |> Enum.filter(fn {num, _} -> num == max_val end) |> Enum.map(fn {_, index} -> index end)\n      total = 0\n\n      for start_index <- 0..(length(nums) - 1) do\n        for end_index <- start_index..(length(nums) - 1) do\n          occurrences = Enum.count(indexes, fn x -> x >= start_index and x <= end_index end)\n          if occurrences >= k, do: total = total + 1\n        end\n      end\n\n      total\n    end\n  end\nend"
}