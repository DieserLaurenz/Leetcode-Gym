{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 81212000,
    "question_id": "3213",
    "elapsed_time": 6016,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[454,164,416,712,429,642,671,712,352,712,309,19,371,373,420,330,559,457,712,712,75,712,227,712,250,452,712,404,712,636,712,235,602,254,712,447,215,82,712,364,438,36,712,712,712,625,349,360,198,471,712,524,712,606,660,428,712,256,687,712,100,45,282,712,712,159,44,402,59,81,664,500,494,165,712,429,660,514,209,210,593,712,712,414,26,562,300,712,292,105,697,61,301,454,337,329,532,712,487,712,712,361,712,205,162,355,182,421,628,212,628,119,712,712,288,593,370,215,712,587,627,182,259,128,145,712,712,521,540,540,364,374,319,130,462,266,77,712,712,425,712,712,603,176,445,213,114,124,712,153,92,153,418,3,712,712,702,132,270,712,563,712,459,122,151,712,301,507,712,25,712,72,393,110,161,180,202,684,712,122,712,612,101,712,712,704,712,712,575,388,402,102,42,491,712,389,426,31,74,615,325,50,638,712,712,712,510,320,105,127,59,417,176,578,625,286,177,658,157,712,247,78,656,712,222,712,23,157,712,696,330,485,712,329,97,454,455,363,550,38,712,712,64,37,186,530,175,683,712,67,44,112,391,486,430,503,328,668,67,398,476,97,393,712,341,337,5,712,444,474,211,524,659,511,614,712,361,712,654,471,369,696,555,712,712,287,254,65,502,712,712,69,101,320,305,526,712,712,508,24,231,712,467,209,625,136,343,712,550,470,508,399,202,370,2,712,44,712,712,208,105,504,712,712,243,712,636,91,211,398,712,593,589,712,530,390,712,287,529,383,591,618,469,375,40,712,271,712,662,712,712,712,493,623,517,444,595,140,315,550,712,712,438,138,85,712,261,403,712,709,292,469,325,535,712,712,183,712,712,712,384,629,43,545,175,283,491,577,28,712,712,682,712,396,228,252,122,712,306,712,288,444,712,28,322,445,620,575,95,335,712,712,626,700,712,636,712,712,515,712,156,206,135,432,82,48,712,26,173,127,630,406,709,289,384,481,25,523,132,712,161,127,663,513,692,712,118,712,229,521,365,712,21,133,578,655,159,620,405,455,275,712,590,460,26,712,367,227,260,190,503,186,286,712,203,682,712,711,152,712,227,712,701,712,638,686,121,113,217,712,50,265,712,166,551,156,164,62,10,712,712,345,712,682,712,86,205,430,64,712,284,43,47,712,712,50,712,712,506,596,712,323,712,151,102,510,2,712,675,214,316,712,602,322,712,689,712,232,46,551,712,712,175,712,125,617,38,666,98,327,131,519,284,712,712,187,530,416,424,663,480,506,519,408,712,315,539,712,103,562,198,712,325,409,125,442,518,334,712,17,712,463,3,712,225,636,712,699,141,656,249,223,540,144,493,649,712,712,252,644,712,425,129,665,416,608,484,689,86,712,712,380,379,692,712,712,712,712,198,246,428,320,712,577,712,418,712,556,165,712,243,440,643,712,144,312,677,389,182,712,712,217,305,655,125,712,607,712,712,712,513,177,241,442,712,488,24,544,712,712,87,92,362,712,712,643,712,220,538,486,489,712,688,201,211,660,634,298,712,49,654,187,137,712,712,449,694,319,452,712,320,524,712,277,260,432,712,196,297,712,712,712,571,220,239,447,624,712,620,712,712,439,712,232,318,216,225,143,712,119,242,529,173,603,251,689,340,712,712,657,712,287,208,712,684,493,712,285,370,185,93,712,277,712,712,398,320,712,189,235,204,712,712,712,183,712,423,387,205,372,196,565,443,712,524,217,272,665,357,330,212,549,398,519,712,489,496,712,687,712,537]\n171",
    "expected_output": "10085",
    "task_finish_time": 1707118833848,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 525,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1166576365",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_subarrays(nums :: [integer], k :: integer) :: integer\n  def count_subarrays(nums, k) do\n    max = Enum.max(nums)\n    indexes = for {n, i} <- Enum.with_index(nums), n == max, do: i\n    length = length(nums)\n\n    Enum.reduce(0..length-1, 0, fn i, acc ->\n      Enum.reduce(i..length-1, acc, fn j, acc_inner ->\n        if Enum.count(indexes, fn x -> x >= i and x <= j end) >= k, do: acc_inner + 1, else: acc_inner\n      end)\n    end)\n  end\nend"
}