{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "594 ms",
    "memory": 306664000,
    "question_id": "3213",
    "elapsed_time": 1408,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707105805747,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 633,
    "total_testcases": 633,
    "runtime_percentile": 5.06800000000015,
    "status_memory": "306.7 MB",
    "memory_percentile": 5.287300000000092,
    "pretty_lang": "C++",
    "submission_id": "1166420478",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long ans = 0;\n        int n = nums.size();\n        vector<int> freq(1000001, 0); // Frequency array for numbers\n        int left = 0, right = 0, count = 0; // Two pointers and count of maximum element\n        \n        int maxNum = *max_element(nums.begin(), nums.end());\n        while (right < n) {\n            // Increase frequency of the current element\n            freq[nums[right]]++;\n            // Update count if it's the max element\n            if (nums[right] == maxNum) {\n                count++;\n            }\n            // If count of max element reaches k, start contracting from the left\n            while (count >= k) {\n                ans += (n - right); // Add subarrays ending at right\n                if (nums[left] == maxNum) {\n                    count--;\n                }\n                freq[nums[left]]--; // Decrease frequency of the leftmost element\n                left++;\n            }\n            right++;\n        }\n        return ans;\n    }\n};"
}