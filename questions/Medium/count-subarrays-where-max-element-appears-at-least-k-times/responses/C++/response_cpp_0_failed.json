{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 123740000,
    "question_id": "3213",
    "elapsed_time": 169,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707105753484,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 103,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1166419963",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> maxIndex;\n        int maxNum = *max_element(nums.begin(), nums.end());\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] == maxNum) maxIndex.push_back(i);\n        }\n        if (maxIndex.size() < k) return 0;\n        long long ans = 0;\n        for (int i = 0; i + k - 1 < maxIndex.size(); ++i) {\n            long long left = i == 0 ? maxIndex[i] + 1 : maxIndex[i] - maxIndex[i - 1];\n            long long right = i + k - 1 == maxIndex.size() - 1 ? n - maxIndex[i + k - 1] : maxIndex[i + k] - maxIndex[i + k - 1];\n            ans += left * right;\n        }\n        return ans;\n    }\n};"
}