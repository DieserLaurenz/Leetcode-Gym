{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26712000,
    "question_id": "3213",
    "elapsed_time": 502,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707106679473,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 103,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1166430289",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function countSubarrays($nums, $k) {\n        $totalSubarrays = 0;\n        $maxNum = max($nums);\n        $freq = []; // To keep track of frequencies of maxNum\n        $n = count($nums);\n\n        for ($i = 0; $i < $n; $i++) {\n            if ($nums[$i] == $maxNum) {\n                $freq[] = $i;\n            }\n        }\n\n        for ($i = 0; $i < count($freq); $i++) {\n            // Left boundary\n            $left = $i > 0 ? $freq[$i - 1] : -1;\n            // Right boundary\n            $right = $i + $k - 1 < count($freq) ? $freq[$i + $k - 1] : $n;\n\n            if ($right == $n) break; // If we don't have enough to make k appearances\n\n            // Next index beyond the right boundary where maxNum appears\n            $nextRight = $i + $k < count($freq) ? $freq[$i + $k] : $n;\n            \n            // Calculate subarrays\n            $totalSubarrays += ($freq[$i] - $left) * ($nextRight - $right);\n        }\n\n        return $totalSubarrays;\n    }\n}"
}