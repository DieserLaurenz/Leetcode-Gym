{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 227648000,
    "question_id": "3213",
    "elapsed_time": 351,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707116215987,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 103,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1166546414",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_subarrays(nums, k)\n    max_num = nums.max\n    max_indices = []\n    nums.each_with_index { |num, i| max_indices << i if num == max_num }\n    return 0 if max_indices.size < k\n    \n    count = 0\n    (0...max_indices.size - k + 1).each do |i|\n        left = i == 0 ? -1 : max_indices[i - 1]\n        right = i + k - 1 == max_indices.size - 1 ? nums.size : max_indices[i + k]\n        \n        left_combinations = max_indices[i] - left\n        right_combinations = right - max_indices[i + k - 1]\n        \n        count += left_combinations * right_combinations\n    end\n    \n    count\nend"
}