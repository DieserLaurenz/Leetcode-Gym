{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 222392000,
    "question_id": "3213",
    "elapsed_time": 3315,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707116248292,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1166546764",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_subarrays(nums, k)\n    max_num = nums.max\n    counts = 0\n\n    nums.each_with_index do |num, i|\n        next if num != max_num\n        left = i\n        right = i\n        while left > 0 && nums[left - 1] >= max_num\n            left -= 1\n        end\n        while right < nums.length - 1 && nums[right + 1] >= max_num\n            right += 1\n        end\n        for l in left..i\n            for r in i..right\n                if nums[l..r].count(max_num) >= k\n                    counts += 1\n                end\n            end\n        end\n    end\n\n    counts\nend"
}