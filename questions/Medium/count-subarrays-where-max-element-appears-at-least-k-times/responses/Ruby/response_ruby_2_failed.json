{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211444000,
    "question_id": "3213",
    "elapsed_time": 3101,
    "compare_result": "010000000000000000000011100000100000000000000000000000001000001100000000000000000000001000011000010010011000000010010000000010001010100000000000010010000000110100100000001000010010000000100001000010010001000000000000000110000000000000001010000111100010101000100001000100010000000000010000100000001000100000000000010011001011100000100010010001001000000000001100001000000001100001001100000001000000010000000001000100000000000000010000100110000001011001000010000000001000000000111000000100000000011000000011110000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707116286854,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 100,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1166547231",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef count_subarrays(nums, k)\n    max_val = nums.max\n    counts = 0\n    max_indices = []\n\n    nums.each_with_index { |num, idx| max_indices << idx if num == max_val }\n\n    nums.each_with_index do |_, start_idx|\n        max_indices.each do |max_idx|\n            next if max_idx < start_idx\n            count = 0\n            (max_idx...nums.size).each do |end_idx|\n                break if nums[start_idx..end_idx].count(max_val) < k\n                count += 1 if nums[start_idx..end_idx].include?(max_val)\n            end\n            counts += count\n        end\n    end\n    counts\nend"
}