{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2136000,
    "question_id": "3213",
    "elapsed_time": 9,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707117875885,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1166565940",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, k: i32) -> i64 {\n        let mut ans = 0i64;\n        let n = nums.len();\n        let mut left = 0;\n        let mut right = 0;\n        let mut freq = std::collections::HashMap::new();\n        while right < n {\n            *freq.entry(nums[right]).or_insert(0) += 1;\n            while *freq.get(&nums[right]).unwrap() < k {\n                right += 1;\n                if right == n {\n                    break;\n                }\n                *freq.entry(nums[right]).or_insert(0) += 1;\n            }\n            if right == n {\n                break;\n            }\n            let mut temp_right = right + 1;\n            while temp_right < n && !freq.contains_key(&nums[temp_right]) {\n                temp_right += 1;\n            }\n            ans += (temp_right - right) as i64;\n            if *freq.get(&nums[left]).unwrap() == k {\n                let mut temp_left = left + 1;\n                while temp_left <= right && nums[temp_left] != nums[right] {\n                    temp_left += 1;\n                }\n                ans += ((temp_right - right) * (temp_left - left)) as i64;\n                left = temp_left + 1;\n            } else {\n                left += 1;\n            }\n            if left > right {\n                right = left;\n            }\n            if left == n || right == n {\n                break;\n            }\n            freq.clear();\n            for i in left..=right {\n                *freq.entry(nums[i]).or_insert(0) += 1;\n            }\n        }\n        ans\n    }\n}"
}