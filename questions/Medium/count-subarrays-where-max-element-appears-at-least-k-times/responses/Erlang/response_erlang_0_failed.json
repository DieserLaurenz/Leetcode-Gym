{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 171936000,
    "question_id": "3213",
    "elapsed_time": 2190,
    "compare_result
    "code_output": "-6",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707118445416,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1166572141",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_subarrays(Nums :: [integer()], K :: integer()) -> integer().\ncount_subarrays(Nums, K) ->\n  Max = lists:max(Nums),\n  Idxs = [Idx || {N, Idx} <- lists:zip(Nums, lists:seq(1, length(Nums))), N == Max],\n  count_valid_subarrays(Idxs, K, length(Nums)).\n\ncount_valid_subarrays(Idxs, K, Len) when length(Idxs) < K ->\n  0;\ncount_valid_subarrays(Idxs, K, Len) ->\n  Lists = lists:sublist(Idxs, 1, K-1) ++ [0] ++ Idxs ++ [Len+1],\n  Sum = lists:foldl(fun(X, {Sum, [H|T]}) -> {Sum + (X-H-1)*(lists:nth(2, T)-X), T} end, {0, Lists}, lists:nthtail(K, Idxs)),\n  fst(Sum).\n\nfst({A, _}) -> A."
}