{
    "status_code": 15,
    "lang": "java",
    "run_success": false,
    "runtime_error": "Line 12: java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4\n  at line 12, Solution.countSubarrays\n  at line 54, __DriverSolution__.__helper__\n  at line 87, __Driver__.main",
    "status_runtime": "N/A",
    "memory": 40500000,
    "question_id": "3213",
    "elapsed_time": 141,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,4,2,1]\n3",
    "expected_output": "0",
    "task_finish_time": 1707105859754,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1166421124",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        long count = 0;\n        int n = nums.length;\n        int maxNum = 0;\n        for (int num : nums) {\n            maxNum = Math.max(maxNum, num);\n        }\n        int[] freq = new int[n];\n        int left = 0, right = 0, maxFreq = 0;\n        while (right < n) {\n            freq[nums[right]]++;\n            if (nums[right] == maxNum) {\n                maxFreq++;\n            }\n            while (maxFreq >= k) {\n                count += n - right;\n                freq[nums[left]]--;\n                if (nums[left] == maxNum) {\n                    maxFreq--;\n                }\n                left++;\n            }\n            right++;\n        }\n        return count;\n    }\n}"
}