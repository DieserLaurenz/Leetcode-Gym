{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67904000,
    "question_id": "3213",
    "elapsed_time": 1284,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707106892824,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 18,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1166432627",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Int): Long {\n        var count = 0L\n        val maxNum = nums.maxOrNull() ?: return 0\n        val occurrences = mutableListOf<Int>()\n\n        nums.forEachIndexed { index, num ->\n            if (num == maxNum) occurrences.add(index)\n        }\n\n        if (occurrences.size < k) return 0\n\n        for (i in occurrences.indices) {\n            val start = if (i == 0) 0 else occurrences[i - 1] + 1\n            val end = if (i + k - 1 < occurrences.size) occurrences[i + k - 1] else nums.lastIndex\n\n            for (j in start..end) {\n                val left = if (j > start) j - start + 1 else 1\n                val right = if (end < nums.lastIndex) nums.lastIndex - end + 1 else 1\n                count += left * right\n                if (i + k - 1 < occurrences.size) break\n            }\n        }\n\n        return count\n    }\n}"
}