{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61084000,
    "question_id": "3213",
    "elapsed_time": 706,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707106858817,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1166432252",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Int): Long {\n        val max = nums.maxOrNull()!!\n        val positions = ArrayList<Int>()\n        for (i in nums.indices) {\n            if (nums[i] == max) positions.add(i)\n        }\n        if (positions.size < k) return 0\n        var count = 0L\n        for (i in 0 until k - 1) {\n            count += (positions[i] - (if (i == 0) -1 else positions[i - 1])) * (positions[k - 1] - positions[i]).toLong()\n        }\n        for (i in k until positions.size) {\n            val left = positions[i - k + 1] - positions[i - k]\n            val right = positions[i] - positions[i - 1]\n            count += left * right.toLong()\n        }\n        count += (positions[positions.size - k] - (if (positions.size - k == 0) -1 else positions[positions.size - k - 1])) * (nums.size - positions[positions.size - 1]).toLong()\n        return count\n    }\n}"
}