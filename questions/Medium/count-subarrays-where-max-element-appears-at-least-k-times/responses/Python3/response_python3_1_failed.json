{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 22660000,
    "question_id": "3213",
    "elapsed_time": 11011,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1708754842415,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184565211",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        max_num = max(nums)\n        indexes = [i for i, v in enumerate(nums) if v == max_num]\n        ans = 0\n        nums.append(0)  # Sentinel to handle subarray ending at the last element\n        for start in range(len(nums) - 1):\n            count = 0\n            for end in range(start, len(nums)):\n                if nums[end] == max_num:\n                    count += 1\n                if count == k:\n                    # Find the next index of max_num or the end of the array\n                    next_index = next((i for i in indexes if i > end), len(nums) - 1)\n                    ans += next_index - end\n                    break\n        return ans"
}