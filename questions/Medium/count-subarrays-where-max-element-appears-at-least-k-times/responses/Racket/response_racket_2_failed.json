{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 127204000,
    "question_id": "3213",
    "elapsed_time": 5015,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,3,2,3,3]\n2",
    "expected_output": "6",
    "task_finish_time": 1707118378610,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 633,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1166571351",
    "input_formatted": "[1,3,2,3,3], 2",
    "input": "[1,3,2,3,3]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (count-subarrays nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let* ([max-num (apply max nums)]\n         [positions (for/list ([i (in-range (length nums))]\n                               #:when (= (list-ref nums i) max-num))\n                      i)]\n         [n (length positions)])\n    (if (< n k) 0\n        (let loop ([i 0] [count 0])\n          (if (< i (- n k))\n              (let* ([start (if (= i 0) 0 (- (list-ref positions i) 1))]\n                     [end (+ (list-ref positions (+ i k -1)) 1)]\n                     [prev-start (if (= i 0) 0 (list-ref positions (- i 1)))]\n                     [next-end (if (= (+ i k) n) (length nums) (list-ref positions (+ i k)))]\n                     [add (* (- end start) (- next-end end))])\n                (loop (+ i 1) (+ count add)))\n              count)))))"
}