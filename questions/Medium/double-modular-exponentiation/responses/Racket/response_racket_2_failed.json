{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "Line 1: Char 19: get-good-indices: broke its own contract",
    "full_runtime_error": "Line 1: Char 19: get-good-indices: broke its own contract\n  promised: list?\n  produced: '(1 . 2)\n  in: the range of\n      (->\n       (listof (listof exact-integer?))\n       exact-integer?\n       (listof exact-integer?))\n  contract from: (function get-good-indices)\n  blaming: (function get-good-indices)\n   (assuming the contract is correct)\n  context...:\n   /usr/share/racket/collects/racket/contract/private/blame.rkt:346:0: raise-blame-error\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:16:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100200000,
    "question_id": "3234",
    "elapsed_time": 271,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "expected_output": "[0,2]",
    "task_finish_time": 1707201724489,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 524,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1167539501",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (get-good-indices variables target)\n  (-> (listof (listof exact-integer?)) exact-integer? (listof exact-integer?))\n  (define (good-index? var)\n    (= (modulo (expt (modulo (* (first var) (second var)) 10) (third var)) (fourth var)) target))\n  (foldl (lambda (var acc i)\n           (if (good-index? var)\n               (cons i acc)\n               acc))\n         '()\n         variables\n         (range (length variables))))"
}