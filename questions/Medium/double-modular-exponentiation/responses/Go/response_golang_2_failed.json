{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2960000,
    "question_id": "3234",
    "elapsed_time": 15,
    "compare_result
    "code_output": "[2]",
    "std_output": "",
    "last_testcase": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "expected_output": "[0,2]",
    "task_finish_time": 1707201336271,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 315,
    "total_testcases": 524,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1167534521",
    "input_formatted": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]], 2",
    "input": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func getGoodIndices(variables [][]int, target int) []int {\n    goodIndices := []int{}\n    for i, v := range variables {\n        a, b, c, m := v[0], v[1], v[2], v[3]\n        if (((a*b)%10) == target || pow(a*b%10, c, 10)%m == target) && m > target {\n            goodIndices = append(goodIndices, i)\n        } else if pow(a*b%10, c, m) == target {\n            goodIndices = append(goodIndices, i)\n        }\n    }\n    return goodIndices\n}\n\n// Helper function to compute (base^exponent) % mod\nfunc pow(base, exponent, mod int) int {\n    result := 1\n    for exponent > 0 {\n        if exponent%2 == 1 {\n            result = (result * base) % mod\n        }\n        base = (base * base) % mod\n        exponent /= 2\n    }\n    return result\n}"
}