{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2932000,
    "question_id": "3234",
    "elapsed_time": 15,
    "compare_result
    "code_output": "[2]",
    "std_output": "",
    "last_testcase": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "expected_output": "[0,2]",
    "task_finish_time": 1707201306727,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 341,
    "total_testcases": 524,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1167534135",
    "input_formatted": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]], 2",
    "input": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func getGoodIndices(variables [][]int, target int) []int {\n    goodIndices := []int{}\n    for i, variable := range variables {\n        a, b, c, m := variable[0], variable[1], variable[2], variable[3]\n        if (((a*b)%10) == target) && (c == 1) && (m > target) {\n            goodIndices = append(goodIndices, i)\n        } else if pow(a*b%10, c, m) == target {\n            goodIndices = append(goodIndices, i)\n        }\n    }\n    return goodIndices\n}\n\n// Helper function to compute (base^exponent) % mod correctly considering Go's mod behavior\nfunc pow(base, exponent, mod int) int {\n    if mod == 1 {\n        return 0\n    }\n    result := 1\n    base %= mod\n    for exponent > 0 {\n        if exponent%2 == 1 {\n            result = (result * base) % mod\n        }\n        exponent >>= 1\n        base = (base * base) % mod\n    }\n    return result\n}"
}