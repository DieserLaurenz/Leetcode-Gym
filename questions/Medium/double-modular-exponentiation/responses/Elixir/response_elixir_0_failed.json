{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (ArithmeticError) bad argument in arithmetic expression: rem(216.0, 10)",
    "full_runtime_error": "Line 6: ** (ArithmeticError) bad argument in arithmetic expression: rem(216.0, 10)\n    :erlang.rem(216.0, 10)\n    solution.ex:6: anonymous fn/3 in Solution.get_good_indices/2\n    (elixir 1.15.7) lib/enum.ex:1121: anonymous fn/3 in Enum.filter/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    (elixir 1.15.7) lib/enum.ex:2514: Enum.filter/2\n    solution.ex:27: Driver.consume_test_cases/2\n    solution.ex:13: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73008000,
    "question_id": "3234",
    "elapsed_time": 454,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "expected_output": "[0,2]",
    "task_finish_time": 1707210574155,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 524,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1167640080",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec get_good_indices(variables :: [[integer]], target :: integer) :: [integer]\n  def get_good_indices(variables, target) do\n    Enum.filter(0..(length(variables) - 1), fn i ->\n      [a, b, c, m] = Enum.at(variables, i)\n      rem(rem(a * b, 10) |> :math.pow(c), m) == target\n    end)\n  end\nend"
}