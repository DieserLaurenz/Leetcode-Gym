{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18460000,
    "question_id": "3234",
    "elapsed_time": 625,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[2]",
    "std_output": "",
    "last_testcase": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "expected_output": "[0,2]",
    "task_finish_time": 1707200910340,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 524,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1167529001",
    "input_formatted": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]], 2",
    "input": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func getGoodIndices(_ variables: [[Int]], _ target: Int) -> [Int] {\n        var goodIndices = [Int]()\n        for i in 0..<variables.count {\n            let (a, b, c, m) = (variables[i][0], variables[i][1], variables[i][2], variables[i][3])\n            if ((a*b % 10).pow(c) % m) == target {\n                goodIndices.append(i)\n            }\n        }\n        return goodIndices\n    }\n}\n\nextension Int {\n    func pow(_ exponent: Int) -> Int {\n        var base = self\n        var exp = exponent\n        var result = 1\n        while exp > 0 {\n            if exp % 2 == 1 {\n                result = result * base\n            }\n            exp /= 2\n            base *= base\n        }\n        return result\n    }\n}"
}