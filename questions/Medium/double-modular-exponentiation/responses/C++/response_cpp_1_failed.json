{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21572000,
    "question_id": "3234",
    "elapsed_time": 26,
    "compare_result
    "code_output": "[2]",
    "std_output": "",
    "last_testcase": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "expected_output": "[0,2]",
    "task_finish_time": 1707191258330,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 341,
    "total_testcases": 524,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1167409052",
    "input_formatted": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]], 2",
    "input": "[[2,3,3,10],[3,3,3,1],[6,1,1,4]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> getGoodIndices(vector<vector<int>>& variables, int target) {\n        vector<int> goodIndices;\n        for (int i = 0; i < variables.size(); ++i) {\n            long long a = variables[i][0], b = variables[i][1], c = variables[i][2], m = variables[i][3];\n            if (powerMod(a * b % 10, c, m) == target) {\n                goodIndices.push_back(i);\n            }\n        }\n        return goodIndices;\n    }\n\nprivate:\n    long long powerMod(long long base, long long exponent, long long modulus) {\n        long long result = 1;\n        base = base % modulus;\n        while (exponent > 0) {\n            if (exponent % 2 == 1)\n                result = (result * base) % modulus;\n            exponent = exponent >> 1;\n            base = (base * base) % modulus;\n        }\n        return result;\n    }\n};"
}