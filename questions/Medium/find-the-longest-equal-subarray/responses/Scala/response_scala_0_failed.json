{
    "status_code": 12,
    "lang": "scala",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 56716000,
    "question_id": "2832",
    "elapsed_time": 10720,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[429,242,329,4,436,803,875,468,808,555,602,221,396,732,569,706,507,965,149,240,361,508,362,866,39,908,750,691,440,854,12,573,745,37,493,432,665,187,701,575,662,725,834,584,98,481,585,853,515,91,728,701,703,671,434,27,932,824,309,334,420,241,583,571,55,694,782,377,539,327,968,718,891,848,76,441,556,214,611,440,878,719,464,888,101,872,751,957,689,794,189,588,120,851,328,247,753,672,781,666,984,206,998,96,151,704,403,487,87,564,728,216,96,49,648,946,338,595,705,637,213,271,666,2,1,591,827,781,869,564,935,977,413,446,219,206,627,754,356,375,443,639,702,409,22,805,224,739,180,229,925,989,124,916,837,679,741,829,118,409,865,13,728,710,151,679,698,745,512,347,960,482,158,904,171,999,381,728,447,88,947,102,873,560,567,307,791,128,565,820,925,513,622,565,973,827,998,761,688,601,202,328,152,280,561,190,175,727,187,70,364,621,597,262,351,310,370,521,881,773,757,41,292,98,308,672,827,762,382,460,712,811,808,930,468,560,93,53,339,801,136,394,405,796,950,176,641,607,657,550,812,343,906,97,414,185,633,407,445,722,151,297,781,369,357,69,892,215,554,793,127,832,931,838,806,382,981,850,691,253,132,776,326,753,366,43,737,913,906,211,36,389,949,165,61,916,619,983,265,629,771,294,1,708,718,557,73,212,796,98,63,82,770,730,210,946,367,989,133,287,718,732,306,82,776,896,130,27,208,440,199,332,844,706,834,197,434,202,225,578,137,719,827,730,647,548,445,315,592,493,94,597,839,835,427,921,110,55,924,854,493,802,274,831,719,148,117,47,503,280,214,544,432,577,278,553,56,389,952,740,244,555,355,518,395,211,842,307,498,288,929,609,757,899,250,445,898,347,275,477,282,299,448,91,145,164,667,182,644,618,853,17,865,192,339,255,742,566,501,512,132,169,23,436,704,858,656,802,613,370,222,384,798,546,787,81,490,399,528,472,381,592,862,196,813,233,589,660,586,924,236,105,483,729,203,63,323,416,46,339,138,963,466,834,915,895,833,443,637,733,455,744,651,269,769,413,111,811,644,990,140,48,508,512,582,428,974,986,383,766,134,199,122,734,465,880,315,267,595,925,131,690,489,666,635,212,886,497,486,108,653,475,161,570,760,242,733,542,747,823,528,147,49,544,682,252,505,723,149,660,691,538,369,388,67,879,316,67,771,231,141,46,906,60,931,26,681,981,529,25,448,502,724,14,65,886,875,606,923,877,636,200,991,726,298,423,337,645,705,42,570,695,473,700,238,416,652,101,352,320,116,95,414,904,545,840,778,758,607,115,287,752,578,692,452,69,308,86,771,127,165,813,457,444,515,113,431,334,172,918,481,98,565,32,739,998,309,660,153,572,71,526,251,824,541,93,522,115,30,697,703,366,920,255,77,283,971,606,996,229,389,363,797,257,887,703,940,561,595,728,518,99,401,33,530,466,211,425,177,48,83,935,642,742,305,506,615,938,763,126,784,954,99,624,649,984,481,994,672,826,223,880,665,423,130,454,625,94,417,822,600,547,535,606,681,914,339,771,335,943,284,766,45,337,911,511,656,614,567,316,564,95,951,272,665,534,679,291,901,846,398,106,566,339,216,238,69,466,860,810,788,498,555,834,799,199,947,911,219,291,595,291,627,254,156,927,987,698,306,842,507,544,600,271,895,805,49,55,269,666,503,613,501,227,40,428,308,13,358,967,837,433,596,766,350,840,994,573,136,835,391,279,985,303,792,90,288,136,542,273,794,671,185,344,346,957,427,996,254,326,143,718,190,959,4,560,819,723,585,862,230,669,333,285,339,654,944,549,392,810,940,529,403,462,839,171,7,690,374,871,217,899,468,300,135,500,717,847,941,406,739,27,366,883,264,45,704,975,986,490,371,583,341,818,844,570,460,968,786,225,935,222,972,958,365,424,973,923,712,822,222,766,254,150,104,2,104,908,616,587,91,831,92,367,570,3,309,526,977,382,511,300,559,940,680,587,183,763,940,810,973,391,805,278,756,695,954,109,488,224,768,792,432,337,24,925,258,738,778,389,146,947,378,514,554,626,824,283,960,750,592,922,714,768,614,605,506,528,637,520,407,236,813,664,532,185,431,526,77,451,946,143,413,258,624,140,848,724,912,615,453,858,369,63,81,350,501,228,364,652,181,536,440,201,592,665,346,235,416,906,23,600,466,741,424,292,308,424,908,991,500,197,988,943,672,806,979,494,628,192]\n3",
    "expected_output": "2",
    "task_finish_time": 1707325752934,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1233,
    "total_testcases": 1422,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1168973822",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "object Solution {\n    def longestEqualSubarray(nums: List[Int], k: Int): Int = {\n        val n = nums.length\n        var maxLength = 0\n        \n        for (num <- nums.distinct) {\n            var i = 0\n            var j = 0\n            var deletions = 0\n            \n            while (j < n) {\n                if (nums(j) != num) {\n                    deletions += 1\n                }\n                \n                while (deletions > k) {\n                    if (nums(i) != num) {\n                        deletions -= 1\n                    }\n                    i += 1\n                }\n                \n                maxLength = math.max(maxLength, j - i + 1 - deletions)\n                j += 1\n            }\n        }\n        \n        maxLength\n    }\n}"
}