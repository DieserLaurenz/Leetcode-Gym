{
    "status_code": 12,
    "lang": "scala",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 57004000,
    "question_id": "2832",
    "elapsed_time": 10554,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[884,833,836,453,65,211,866,739,897,290,868,959,353,229,525,24,51,142,550,246,930,888,835,164,874,719,940,403,450,284,369,606,385,571,946,492,124,341,238,449,776,731,966,94,439,865,90,177,555,432,467,410,860,157,277,568,570,530,115,277,371,950,806,719,515,888,475,766,985,330,506,249,755,998,882,581,805,147,927,864,68,358,227,765,718,857,62,958,61,319,101,535,919,39,580,189,873,971,279,803,418,713,366,207,39,636,385,176,949,254,13,898,533,658,827,338,178,236,492,543,484,796,386,732,111,198,849,102,851,423,386,506,105,816,746,449,50,50,293,631,973,371,532,679,971,62,358,926,272,353,34,60,259,540,762,636,689,891,274,948,734,360,170,306,520,851,651,143,497,98,686,904,630,930,806,277,669,335,120,340,800,742,2,809,829,682,345,269,206,683,886,280,605,911,568,229,484,583,479,189,838,100,388,908,426,530,243,490,530,846,479,752,586,871,775,640,133,826,396,835,317,454,453,861,90,233,446,240,654,943,451,864,330,366,19,144,679,413,341,551,17,480,917,379,822,713,465,1,725,565,443,765,220,685,979,486,775,629,748,654,855,874,147,463,603,914,354,543,457,607,356,647,455,356,763,962,675,203,364,155,971,519,785,666,944,329,176,782,900,310,94,401,281,850,317,12,266,652,884,930,352,465,699,772,41,69,516,513,69,96,276,94,522,270,435,370,722,35,385,485,569,25,714,236,738,565,233,759,293,799,314,609,68,342,462,69,77,758,408,614,122,545,620,43,995,302,617,928,29,953,895,856,313,608,955,465,327,350,77,398,166,131,541,836,514,890,361,878,145,23,747,926,330,300,153,302,476,517,464,162,859,819,807,753,68,104,876,47,165,19,930,566,548,891,352,981,975,400,255,68,368,142,706,146,340,814,751,501,964,333,249,669,620,790,175,22,754,962,78,159,102,713,377,216,114,776,580,889,188,612,784,694,415,596,760,484,237,36,808,386,722,89,479,275,807,44,602,556,786,936,395,942,583,759,922,849,130,283,338,451,192,601,299,740,677,527,834,461,484,895,946,439,760,310,438,546,826,918,177,313,819,657,590,727,8,687,854,185,806,137,941,604,319,919,401,794,807,703,565,765,75,453,171,906,459,632,970,163,11,62,246,808,120,976,869,537,420,41,774,185,287,834,234,520,527,198,185,464,810,590,131,899,985,658,771,822,896,320,624,186,836,384,937,883,370,256,86,198,615,449,830,523,55,337,216,542,139,791,89,265,89,410,383,249,464,688,812,82,40,135,762,700,55,763,628,40,75,375,261,347,5,107,446,230,232,522,947,177,432,61,763,949,895,482,318,676,983,544,306,451,935,432,384,21,766,292,632,96,18,893,178,471,180,799,937,408,168,106,739,425,973,412,152,679,750,201,616,324,140,292,701,681,416,358,878,137,69,367,670,30,967,197,461,303,963,81,166,319,3,509,97,651,324,926,963,582,407,472,432,857,187,869,739,934,436,725,501,775,238,159,728,681,713,478,180,29,743,974,509,224,530,246,131,519,197,798,929,979,641,160,426,461,321,744,184,675,647,495,441,805,632,253,904,304,651,963,610,626,682,650,37,668,17,868,986,922,563,912,269,931,642,228,185,869,781,917,411,685,878,426,959,839,484,752,440,898,743,548,646,712,218,422,251,266,297,129,183,700,619,347,812,538,974,10,395,796,75,6,648,844,870,769,765,914,865,748,486,930,519,415,754,10,193,15,595,1,459,454,114,322,197,465,388,768,303,988,751,966,378,276,176,332,230,361,857,372,398,539,70,242,481,719,621,512,842,900,515,642,871,731,553,381,977,788,316,277,436,478,37,865,557,140,819,917,120,361,964,442,184,699,295,997,405,71,445,286,776,342,414,858,590,132,44,763,136,28,154,293,713,627,751,230,273,713,280,552,1000,508,346,942,698,130,358,208,58,250,187,548,792,583,993,652,759,346,553,977,13,86,353,504,707,614,480,478,843,425,728,159,638,379,109,933,745,545,678,739,505,198,913,754,413,425,769,545,265,845,941,473,402,540,29,332,63,262,545,267,855,939,579,35,709,848,327,28,683,71,211,388,366,468,686,321,855,577,173,151,869,109,881,950,418,221,723,648,85,53,682,320,858,235,654,907,33,481,342,10,470,673,790,453,631,892,468,3,905,619,106,265,737,61,638,290,668,668,743,127,296,687,612,297,753,805,475,962,317,898,164,883,284,559,173,610,363,226,699,502,141,146,347,910]\n10",
    "expected_output": "2",
    "task_finish_time": 1707325829886,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1231,
    "total_testcases": 1422,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1168975029",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "object Solution {\n    def longestEqualSubarray(nums: List[Int], k: Int): Int = {\n        var result = 0\n        val n = nums.length\n        for (a <- nums.distinct) {\n            var left = 0\n            var right = 0\n            var count = 0\n            while (right < n) {\n                if (nums(right) != a) {\n                    count += 1\n                }\n                while (count > k) {\n                    if (nums(left) != a) {\n                        count -= 1\n                    }\n                    left += 1\n                }\n                result = result.max(right - left + 1 - count)\n                right += 1\n            }\n        }\n        result\n    }\n}"
}