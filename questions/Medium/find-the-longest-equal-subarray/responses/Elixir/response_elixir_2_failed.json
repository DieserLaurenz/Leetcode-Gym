{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81456000,
    "question_id": "2832",
    "elapsed_time": 6016,
    "compare_result": "001111111111111111111101001110111101110110000000000001011000000110000000000000000010000000110001000000100000000000000000000000000000000100000000000000000001100000010000000000011000000000001000000000100000000000010010000000000000000000000100010000000000000100010000000100000000000000000000000000001000000000000000000000000000000110000010000000001001000000000000000100001000000100000001000000000000000100000100001000000000100000000000000000000000000100001000001100000000000000100000000001000000000000000001000001000000000000000000000000000000000000001000000000000100010000000001100010000000000000000000000000000000000010000000000000000000000001001000000000000000000000000000010000000000000000000000000000000110000000000000000000000000000000000000000000000100000000000000101000000000000000001000000000000000010000000010000000000000000000000100000000000010000001000000000000000000000000000000000000000100000000000000000000000000010000000000000000000000000000000000000000100100000000000000000000000000000001101000000000000000000000000010000000100000000100000001000000000000000000000000000000000000000000000000000000000000000000000000011000000000000001000000100001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,3,2,3,1,3]\n3",
    "expected_output": "3",
    "task_finish_time": 1707334434836,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 117,
    "total_testcases": 1422,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1169104961",
    "input_formatted": "[1,3,2,3,1,3], 3",
    "input": "[1,3,2,3,1,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec longest_equal_subarray(nums :: [integer], k :: integer) :: integer\n  def longest_equal_subarray(nums, k) do\n    1..length(nums)\n    |> Enum.map(fn x -> check(nums, x, k) end)\n    |> Enum.max()\n  end\n\n  defp check(nums, target, k) do\n    nums\n    |> Enum.reduce({0, 0, 0, 0}, fn\n      x, {longest, current, left, deletions} when x == target ->\n        {longest, current + 1, left, deletions}\n      x, {longest, current, left, deletions} when deletions < k ->\n        {longest, current + 1, left, deletions + 1}\n      x, {longest, current, left, deletions} ->\n        new_left = next_left(nums, left, target) + 1\n        new_current = current - (new_left - left - 1)\n        {longest, new_current, new_left, deletions}\n    end)\n    |> (fn {longest, current, _, _} -> max(longest, current) end).()\n  end\n\n  defp next_left(nums, left, target) do\n    Enum.find_index(Enum.slice(nums, left..-1), fn x -> x != target end) + left\n  end\nend"
}