{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81636000,
    "question_id": "2832",
    "elapsed_time": 6015,
    "compare_result": "011111111111111111111111111111111111111111111111111111101111011111011111110111101100011100101000111000010100000010001110011001100011100000010010001000011000000100000001101000000010100100010000011010000100100000000000010000101011000000100011100000000000011000100011000000010001100000001000000100000000000000000000000000010000000000000100010000000000000000000100000000000000000000000000000000100000000000010000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000001000000000000000000000000000010000000000000000000000100000100000000000000000010000000010000000000000000000000000000000000000100000000100000000001000000000100000000001000000000000000000000000000000000000000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000000000101000000000000000000000001000000000000000000000000000000000000000000100001000000000000010000000000000000000000000100000000000100000000010100000000000000000001010000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[1,3,2,3,1,3]\n3",
    "expected_output": "3",
    "task_finish_time": 1707334366305,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 171,
    "total_testcases": 1422,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1169104334",
    "input_formatted": "[1,3,2,3,1,3], 3",
    "input": "[1,3,2,3,1,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec longest_equal_subarray(nums :: [integer], k :: integer) :: integer\n  def longest_equal_subarray(nums, k) do\n    nums\n    |> Enum.reduce(0, fn x, acc ->\n      longest_for_current = longest_with_k_deletions(nums, x, k)\n      if longest_for_current > acc, do: longest_for_current, else: acc\n    end)\n  end\n\n  defp longest_with_k_deletions(nums, target, k) do\n    {max_length, _, _} =\n      Enum.reduce(nums, {0, 0, k}, fn\n        x, {current_max, current_length, current_k} when x == target ->\n          {current_max, current_length + 1, current_k}\n        x, {current_max, current_length, current_k} when current_k > 0 ->\n          {current_max, current_length + 1, current_k - 1}\n        x, {current_max, current_length, 0} ->\n          new_length = if x == target, do: current_length + 1, else: 0\n          {max(current_max, current_length), new_length, k}\n      end)\n\n    max(max_length, Enum.count(nums, fn x -> x == target end))\n  end\nend"
}