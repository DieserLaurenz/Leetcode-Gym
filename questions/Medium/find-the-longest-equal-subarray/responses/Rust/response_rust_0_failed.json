{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7048000,
    "question_id": "2832",
    "elapsed_time": 102,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,3,2,3,1,3]\n3",
    "expected_output": "3",
    "task_finish_time": 1707325887162,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 135,
    "total_testcases": 1422,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1168976154",
    "input_formatted": "[1,3,2,3,1,3], 3",
    "input": "[1,3,2,3,1,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn longest_equal_subarray(nums: Vec<i32>, k: i32) -> i32 {\n        let mut max_len = 0;\n        let mut freq = std::collections::HashMap::new();\n        let (mut start, mut max_count) = (0, 0);\n\n        for end in 0..nums.len() {\n            *freq.entry(nums[end]).or_insert(0) += 1;\n            max_count = max_count.max(*freq.get(&nums[end]).unwrap());\n\n            if end - start + 1 - max_count > k as usize {\n                *freq.get_mut(&nums[start]).unwrap() -= 1;\n                start += 1;\n            }\n\n            max_len = max_len.max((end - start + 1) as i32);\n        }\n\n        max_len\n    }\n}"
}