{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74424000,
    "question_id": "2832",
    "elapsed_time": 245,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,3,2,3,1,3]\n3",
    "expected_output": "3",
    "task_finish_time": 1707324787540,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 135,
    "total_testcases": 1422,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1168958685",
    "input_formatted": "[1,3,2,3,1,3], 3",
    "input": "[1,3,2,3,1,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function longestEqualSubarray(nums: number[], k: number): number {\n    let maxLen = 0;\n    const freq = new Map<number, number>();\n\n    for (let left = 0, right = 0, maxFreq = 0; right < nums.length; ++right) {\n        freq.set(nums[right], (freq.get(nums[right]) || 0) + 1);\n        maxFreq = Math.max(maxFreq, freq.get(nums[right])!);\n\n        while (right - left + 1 - maxFreq > k) {\n            freq.set(nums[left], freq.get(nums[left])! - 1);\n            left++;\n        }\n\n        maxLen = Math.max(maxLen, right - left + 1);\n    }\n\n    return maxLen;\n}"
}