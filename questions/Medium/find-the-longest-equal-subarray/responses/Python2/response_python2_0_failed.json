{
    "status_code": 14,
    "lang": "python",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 11408000,
    "question_id": "2832",
    "elapsed_time": 16011,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[530,513,307,917,847,346,563,542,873,877,293,797,244,727,534,220,500,934,64,898,700,116,235,229,15,166,701,32,376,129,180,744,526,138,667,675,901,794,46,737,185,732,246,731,743,848,80,86,587,320,204,222,798,599,343,660,668,802,749,642,407,571,821,476,764,965,643,563,772,319,198,951,722,556,400,39,493,707,910,975,207,929,976,186,368,266,390,2,14,694,437,632,906,708,908,373,17,375,256,847,981,352,149,354,947,40,829,618,734,278,454,98,344,258,769,750,670,959,327,212,960,184,546,106,189,97,668,544,595,427,157,596,350,741,101,561,700,489,416,866,604,796,483,5,820,265,227,626,199,27,962,842,74,148,112,857,11,227,314,173,597,330,302,601,638,487,761,832,263,56,135,390,422,639,760,958,384,188,160,640,934,154,243,893,314,385,516,510,61,439,329,368,2,693,591,297,944,319,432,72,2,709,655,285,270,288,635,959,355,82,942,440,407,726,539,122,597,125,940,625,632,706,342,194,389,7,127,542,779,540,578,686,127,62,984,247,593,881,795,259,767,221,329,201,89,404,694,766,119,242,667,719,456,543,22,220,911,897,280,708,836,97,354,474,966,698,818,775,737,205,776,366,903,255,634,205,634,91,104,886,382,890,173,938,120,497,201,687,269,995,29,991,775,550,658,189,961,938,652,198,331,358,619,787,504,119,325,610,569,555,413,170,814,355,903,570,822,723,89,23,458,535,437,229,103,548,374,722,738,42,799,559,412,256,531,335,822,245,502,559,545,446,515,708,289,853,855,48,396,417,70,195,907,163,430,425,569,179,260,645,657,208,295,337,7,253,832,933,564,696,715,65,113,147,861,989,732,255,629,535,605,22,242,410,822,210,988,752,657,135,725,422,153,605,24,734,351,214,887,974,434,161,714,448,155,489,321,389,584,51,951,814,134,287,172,129,374,263,856,686,926,845,292,279,294,345,790,661,448,633,559,370,244,596,342,661,247,902,961,613,919,743,41,465,830,529,235,228,500,185,690,163,782,455,102,856,700,466,362,755,874,875,9,709,964,820,818,89,172,108,364,537,914,266,299,843,167,597,224,229,748,501,268,401,444,830,254,31,309,342,239,742,771,823,801,982,233,630,847,43,615,529,318,159,781,340,114,134,564,199,810,871,702,955,966,58,28,811,419,469,298,107,405,95,720,651,474,629,228,423,388,870,491,131,603,299,172,447,309,143,976,261,941,73,62,931,309,408,876,495,637,868,763,200,467,942,253,671,579,431,156,701,36,139,232,272,265,874,139,167,959,348,489,504,532,140,674,935,387,780,74,551,60,109,889,736,555,650,941,292,265,94,686,622,539,810,741,376,159,408,603,836,107,301,63,506,215,198,768,810,802,851,107,718,821,877,310,572,477,792,44,205,742,590,338,172,910,45,455,421,491,557,201,98,842,762,127,573,123,117,568,418,54,892,149,233,713,685,121,649,493,495,181,467,673,5,285,607,70,661,506,766,169,369,306,229,670,601,723,939,177,37,682,961,379,244,752,359,679,112,38,629,209,949,431,46,147,441,275,283,117,816,756,65,123,361,16,305,729,715,547,605,460,433,340,616,823,494,682,898,384,831,516,10,931,247,95,409,882,910,486,585,512,640,443,880,278,385,495,966,919,172,898,469,980,100,829,473,495,428,421,220,153,283,572,751,487,124,145,333,742,52,737,322,298,976,201,909,399,778,44,45,745,136,853,480,931,546,570,675,995,755,272,887,266,281,394,445,12,533,514,740,614,835,785,648,147,992,570,94,78,789,484,216,460,677,737,495,658,1,238,198,627,880,918,394,806,541,259,208,616,634,245,172,883,222,677,562,322,829,726,994,898,769,420,139,353,395,380,932,541,100,558,925,747,716,195,268,146,880,725,64,652,270,151,405,689,900,430,454,299,540,151,366,836,176,219,277,731,72,622,587,937,543,676,340,64,756,28,330,173,830,777,470,625,832,546,888,291,971,794,367,109,118,755,784,262,459,380,619,409,33,783,122,758,656,358,654,869,978,321,593,476,202,405,101,699,304,995,180,919,92,590,775,69,717,918,865,611,442,981,983,680,683,441,169,524,219,163,902,503,147,519,611,628,400,793,672,308,183,697,415,72,261,593,458,678,959,961,689,332,766,735,760,547,312,545,450,478,645,44,871,667,402,547,217,479,740,122,222,653,684,689,235,551,411,610,952,228,640,88,570,960,444,850,742,850,835,968,923,211,460,952,787,68,651,214,131,75,589]\n4",
    "expected_output": "2",
    "task_finish_time": 1708766749495,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1387,
    "total_testcases": 1422,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184687919",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def longestEqualSubarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        max_length = 0\n        for num in set(nums):\n            i, j, deletions = 0, 0, 0\n            while j < len(nums):\n                if nums[j] == num:\n                    j += 1\n                elif deletions < k:\n                    deletions += 1\n                    j += 1\n                else:\n                    if nums[i] != num:\n                        deletions -= 1\n                    i += 1\n                max_length = max(max_length, j - i - deletions)\n        return max_length"
}