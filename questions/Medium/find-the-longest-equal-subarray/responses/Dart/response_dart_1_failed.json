{
    "status_code": 14,
    "lang": "dart",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 153860000,
    "question_id": "2832",
    "elapsed_time": 5015,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[773,756,190,799,98,276,211,602,600,741,733,844,262,45,534,893,100,215,380,688,241,219,150,594,850,779,66,761,93,871,559,743,810,114,523,546,474,544,500,224,417,919,573,475,4,861,690,748,504,8,536,512,288,261,963,197,366,397,975,50,723,574,84,741,314,925,618,795,38,514,700,551,623,939,688,936,439,805,665,82,394,260,382,616,393,42,269,60,75,812,586,887,67,481,317,506,734,384,692,87,350,522,858,103,535,243,284,163,206,527,217,155,283,306,822,616,495,467,944,16,181,851,218,824,1000,958,297,179,779,170,733,665,837,691,26,325,415,248,699,507,206,80,4,144,707,669,575,558,157,188,290,508,140,251,982,395,260,169,775,98,248,276,238,540,112,998,470,852,401,218,547,571,797,558,870,256,658,300,311,742,594,68,189,157,90,347,764,371,67,737,496,537,429,822,281,30,379,750,785,282,470,717,22,737,560,950,508,46,227,134,883,25,874,941,603,223,769,747,740,166,447,209,205,398,465,982,595,22,70,177,833,584,408,993,612,131,67,28,371,189,575,332,366,935,20,744,646,859,980,800,748,542,586,250,55,223,948,924,367,865,620,726,205,991,760,562,58,750,206,479,658,426,5,117,638,778,775,557,152,929,220,710,783,777,187,693,307,1,825,227,6,88,508,276,582,486,6,176,212,728,754,675,194,417,710,934,68,854,714,763,436,189,424,143,32,506,53,692,817,288,552,326,884,521,159,968,942,417,774,872,971,655,734,503,578,901,996,247,860,374,667,563,97,316,319,915,837,475,123,121,190,65,18,933,514,503,806,843,673,161,786,141,137,931,390,64,742,235,45,206,403,420,501,727,679,659,631,156,432,912,833,371,483,488,618,151,340,602,609,59,138,601,832,688,48,650,478,167,692,460,459,277,138,457,650,115,670,206,499,118,773,538,855,93,607,379,361,265,462,350,684,198,406,669,425,727,884,883,510,4,816,133,702,967,785,25,987,687,401,6,813,720,42,637,124,815,213,895,120,732,570,229,915,440,209,428,279,623,878,979,741,628,781,309,109,974,334,408,776,935,555,705,375,210,235,344,209,942,876,705,733,89,79,893,598,976,670,3,449,996,915,325,346,688,780,308,307,650,383,641,751,889,745,28,105,981,822,142,906,43,185,81,773,468,696,201,581,349,110,622,172,104,206,7,349,861,348,577,474,627,253,39,533,232,431,933,855,346,559,808,5,363,770,451,191,173,547,199,366,501,485,444,836,170,52,505,249,180,62,721,748,17,95,91,130,388,682,894,357,391,417,685,245,804,877,222,360,824,947,128,450,324,409,513,250,95,690,948,247,524,110,87,538,376,472,128,990,922,681,252,563,344,945,156,122,613,454,239,964,639,479,341,991,734,904,879,11,435,537,163,822,832,639,300,774,841,769,430,875,80,281,72,422,913,314,664,692,478,478,90,738,570,435,595,451,873,69,372,680,854,134,375,260,394,128,429,486,761,502,198,673,711,176,602,99,278,9,923,835,388,119,578,643,432,879,252,40,229,396,776,350,197,351,218,604,692,493,740,349,251,492,230,851,135,174,620,591,466,948,468,713,761,285,577,965,765,681,637,811,113,879,775,282,139,929,875,113,725,146,862,290,660,431,850,775,454,623,209,86,435,58,168,17,181,23,527,821,626,23,713,223,224,412,501,273,670,955,953,346,655,227,663,910,520,846,175,644,394,536,158,934,9,745,422,985,524,341,637,907,311,650,92,556,111,265,771,722,359,988,193,502,849,727,94,822,908,3,832,48,318,600,68,856,667,809,948,911,807,280,652,960,128,205,411,586,212,267,689,687,209,699,332,944,426,1,944,388,661,714,839,162,802,526,399,830,566,204,968,104,90,884,656,489,326,986,807,649,432,55,917,208,569,156,821,742,179,782,264,441,205,891,757,240,705,534,260,490,355,378,653,688,925,771,881,786,896,121,431,386,117,199,884,577,180,342,730,513,513,548,883,1000,364,774,396,18,685,1000,912,630,841,324,937,22,217,998,335,605,347,717,585,624,490,978,908,665,139,782,476,466,375,43,880,697,896,620,38,640,733,884,939,364,430,227,675,51,876,657,35,174,267,37,201,660,329,1000,866,254,274,160,565,735,713,797,646,823,49,193,96,351,248,915,998,580,201,827,310,835,482,879,582,871,210,207,211,535,250,583,421,902,929,581,963,67,834,916,778,468,770,926,644,300,109,851,501,993,788,721,634,923,650,339,55,464,778,134,38,433,726,700,421]\n177",
    "expected_output": "3",
    "task_finish_time": 1707325400046,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1295,
    "total_testcases": 1422,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1168968212",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n  int longestEqualSubarray(List<int> nums, int k) {\n    int result = 0;\n    for (int num = 1; num <= nums.length; num++) {\n      int left = 0, right = 0, maxFreq = 0, windowSize = 0;\n      Map<int, int> count = {};\n      while (right < nums.length) {\n        count[nums[right]] = (count[nums[right]] ?? 0) + 1;\n        maxFreq = max(maxFreq, count[nums[right]]!);\n        windowSize = right - left + 1;\n        if (windowSize - maxFreq > k) {\n          count[nums[left]] = count[nums[left]]! - 1;\n          left++;\n        }\n        result = max(result, windowSize - (windowSize - maxFreq));\n        right++;\n      }\n    }\n    return result;\n  }\n\n  int max(int a, int b) => a > b ? a : b;\n}"
}