{
    "acRate": 34.72986055325548,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2831",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Longest Equal Subarray",
    "titleSlug": "find-the-longest-equal-subarray",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Binary Search",
            "id": "VG9waWNUYWdOb2RlOjEx",
            "slug": "binary-search"
        },
        {
            "name": "Sliding Window",
            "id": "VG9waWNUYWdOb2RlOjU1ODIx",
            "slug": "sliding-window"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int longestEqualSubarray(vector<int>& nums, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int longestEqualSubarray(List<Integer> nums, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def longestEqualSubarray(self, nums, k):         \"\"\"         :type nums: List[int]         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def longestEqualSubarray(self, nums: List[int], k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int longestEqualSubarray(int* nums, int numsSize, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int LongestEqualSubarray(IList<int> nums, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} k  * @return {number}  */ var longestEqualSubarray = function(nums, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function longestEqualSubarray(nums: number[], k: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $k      * @return Integer      */     function longestEqualSubarray($nums, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func longestEqualSubarray(_ nums: [Int], _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun longestEqualSubarray(nums: List<Int>, k: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int longestEqualSubarray(List<int> nums, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func longestEqualSubarray(nums []int, k int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} k # @return {Integer} def longest_equal_subarray(nums, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def longestEqualSubarray(nums: List[Int], k: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn longest_equal_subarray(nums: Vec<i32>, k: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (longest-equal-subarray nums k)   (-> (listof exact-integer?) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec longest_equal_subarray(Nums :: [integer()], K :: integer()) -> integer(). longest_equal_subarray(Nums, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec longest_equal_subarray(nums :: [integer], k :: integer) :: integer   def longest_equal_subarray(nums, k) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums and an integer k. A subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray. Return the length of the longest possible equal subarray after deleting at most k elements from nums. A subarray is a contiguous, possibly empty sequence of elements within an array.  Example 1:  Input: nums = [1,3,2,3,1,3], k = 3 Output: 3 Explanation: It's optimal to delete the elements at index 2 and index 4. After deleting them, nums becomes equal to [1, 3, 3, 3]. The longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3. It can be proven that no longer equal subarrays can be created.  Example 2:  Input: nums = [1,1,2,2,1,1], k = 2 Output: 4 Explanation: It's optimal to delete the elements at index 2 and index 3. After deleting them, nums becomes equal to [1, 1, 1, 1]. The array itself is an equal subarray, so the answer is 4. It can be proven that no longer equal subarrays can be created.   Constraints:  1 <= nums.length <= 105 1 <= nums[i] <= nums.length 0 <= k <= nums.length  "
}