{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5800000,
    "question_id": "3150",
    "elapsed_time": 14,
    "compare_result
    "code_output": "\"100011\"",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708143923004,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 523,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177475934",
    "input_formatted": "\"100011001\", 3",
    "input": "\"100011001\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n#include <stdlib.h>\n#include <limits.h>\n\nchar* shortestBeautifulSubstring(char* s, int k) {\n    int n = strlen(s);\n    int onesCount = 0, minLen = INT_MAX, startIdx = 0;\n    char *result = (char*)malloc(sizeof(char));\n    result[0] = '\\0'; // Initialize result with an empty string\n\n    for (int i = 0, j = 0; i < n; ++i) {\n        onesCount += s[i] == '1';\n        if (onesCount >= k) {\n            while (onesCount > k) {\n                onesCount -= s[j++] == '1';\n            }\n            if (i - j + 1 < minLen) {\n                minLen = i - j + 1;\n                startIdx = j;\n            }\n        }\n    }\n\n    if (minLen != INT_MAX) {\n        free(result); // Free previously allocated memory\n        result = (char*)malloc(sizeof(char) * (minLen + 1));\n        strncpy(result, s + startIdx, minLen);\n        result[minLen] = '\\0';\n    }\n    \n    return result;\n}"
}