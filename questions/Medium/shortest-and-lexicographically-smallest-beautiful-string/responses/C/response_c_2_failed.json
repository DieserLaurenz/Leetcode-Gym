{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5768000,
    "question_id": "3150",
    "elapsed_time": 13,
    "compare_result": "11111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111101111111111011111111111111011110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111011111111111111111111111011111111111110111101111111111111111111101111111111111111111111101011111111111111111111111111111111111111111111111111111111111101111111111111111111101111111111111111011111011111101011011111111111111111111111111111111111111111011111111111111111111011101111110111111111111111111101110111101110101111111111111111110111101111101111111011011111011111110111001101101111111101111010011111111101111011111011111111111111111",
    "code_output": "\"11101011011011\"",
    "std_output": "",
    "last_testcase": "\"001110101101101111\"\n10",
    "expected_output": "\"10101101101111\"",
    "task_finish_time": 1708143954133,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 627,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1177476227",
    "input_formatted": "\"001110101101101111\", 10",
    "input": "\"001110101101101111\"\n10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n#include <stdlib.h>\n\nchar* shortestBeautifulSubstring(char* s, int k) {\n    int n = strlen(s), count = 0, minLen = INT_MAX;\n    char *result = NULL;\n    for (int i = 0; i < n; ++i) {\n        count = 0;\n        for (int j = i; j < n; ++j) {\n            if (s[j] == '1') {\n                ++count;\n            }\n            if (count == k) {\n                if (j - i + 1 < minLen || result == NULL) {\n                    if (result != NULL) free(result);\n                    minLen = j - i + 1;\n                    result = (char*)malloc(sizeof(char) * (minLen + 1));\n                    strncpy(result, s + i, minLen);\n                    result[minLen] = '\\0';\n                }\n                break;\n            }\n        }\n    }\n    if (result == NULL) {\n        result = (char*)malloc(sizeof(char));\n        result[0] = '\\0';\n    }\n    return result;\n}"
}