{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8280000,
    "question_id": "3150",
    "elapsed_time": 14,
    "compare_result
    "code_output": "\"100011\"",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708134577017,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 543,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1177410219",
    "input_formatted": "\"100011001\", 3",
    "input": "\"100011001\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string shortestBeautifulSubstring(string s, int k) {\n        int n = s.length();\n        string result = \"\";\n        int count = 0, left = 0;\n        for (int right = 0; right < n; ++right) {\n            if (s[right] == '1') ++count;\n            if (count > k) {\n                while (s[left] != '1') ++left;\n                ++left;\n                --count;\n            }\n            if (count == k) {\n                string candidate = s.substr(left, right - left + 1);\n                if (result.empty() || candidate.length() < result.length() || (candidate.length() == result.length() && candidate < result)) {\n                    result = candidate;\n                }\n                while (left < n && s[left] != '1') ++left;\n                ++left;\n                --count;\n            }\n        }\n        return result;\n    }\n};"
}