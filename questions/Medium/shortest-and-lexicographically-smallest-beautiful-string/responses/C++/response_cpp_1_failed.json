{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8060000,
    "question_id": "3150",
    "elapsed_time": 15,
    "compare_result
    "code_output": "\"111111110010001010\"",
    "std_output": "",
    "last_testcase": "\"111111110010001010\"\n11",
    "expected_output": "\"11111111001000101\"",
    "task_finish_time": 1708134609695,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 498,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1177410408",
    "input_formatted": "\"111111110010001010\", 11",
    "input": "\"111111110010001010\"\n11",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <limits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string shortestBeautifulSubstring(string s, int k) {\n        int n = s.size();\n        int count = 0, start = 0, minLength = INT_MAX;\n        string result;\n        \n        for (int end = 0; end < n; ++end) {\n            if (s[end] == '1') ++count;\n            \n            if (count == k) {\n                int tempStart = start;\n                while (count == k) {\n                    if (s[tempStart] == '1') --count;\n                    ++tempStart;\n                }\n                if (end - tempStart + k < minLength) {\n                    minLength = end - tempStart + k + 1;\n                    result = s.substr(tempStart - 1, minLength);\n                }\n                start = tempStart;\n                count = k - 1;\n            }\n        }\n        \n        return result;\n    }\n};"
}