{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "5 ms",
    "memory": 8280000,
    "question_id": "3150",
    "elapsed_time": 13,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708134634043,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 674,
    "total_testcases": 674,
    "runtime_percentile": 48.095299999999995,
    "status_memory": "8.3 MB",
    "memory_percentile": 39.0473,
    "pretty_lang": "C++",
    "submission_id": "1177410550",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <limits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string shortestBeautifulSubstring(string s, int k) {\n        int n = s.size();\n        int onesCount = 0;\n        string result = \"\";\n        int minLength = numeric_limits<int>::max();\n        int start = 0, onesFound = 0;\n        \n        for (int end = 0; end < n; ++end) {\n            onesCount += s[end] == '1';\n            \n            while (onesCount == k) {\n                if (end - start + 1 <= minLength) {\n                    int currentLength = end - start + 1;\n                    string currentSub = s.substr(start, currentLength);\n                    if (currentLength < minLength || (currentLength == minLength && currentSub < result)) {\n                        result = currentSub;\n                        minLength = currentLength;\n                    }\n                }\n                \n                onesCount -= s[start] == '1';\n                ++start;\n            }\n        }\n        \n        return result;\n    }\n};"
}