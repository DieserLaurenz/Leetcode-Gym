{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 22: exception error: badarg",
    "full_runtime_error": "Line 22: exception error: badarg\n[{erlang,length,[<<\"100011001\">>],[{error_info,#{module => erl_erts_errors}}]},\n {solution,shortest_beautiful_substring,2,\n              [{file,\"solution.erl\"},{line,22}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,43}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,29}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,60}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59696000,
    "question_id": "3150",
    "elapsed_time": 1285,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708145195848,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1177487925",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec shortest_beautiful_substring(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary().\nshortest_beautiful_substring(S, K) ->\n    {Result, _} = lists:foldl(\n        fun(C, {Acc, {Count, Start, MinLen, MinStart}}) ->\n            NewCount = Count + if C =:= $1 -> 1; true -> 0 end,\n            case NewCount of\n                K ->\n                    {NewS, NewStart, NewLen} = case Acc of\n                        [] -> {binary:part(S, Start, K), Start, K};\n                        _ ->\n                            CurrentLen = byte_size(binary:part(S, Start, byte_size(S) - Start)),\n                            if CurrentLen < MinLen ->\n                                {binary:part(S, Start, CurrentLen), Start, CurrentLen};\n                               true ->\n                                {MinStart, MinLen}\n                            end\n                    end,\n                    {NewS, {K, NewStart + 1, NewLen, NewStart + 1}};\n                _ -> {Acc, {NewCount, Start, MinLen, MinStart}}\n            end\n        end,\n        {<<>>, {0, 0, length(S) + 1, 0}},\n        S\n    ),\n    Result."
}