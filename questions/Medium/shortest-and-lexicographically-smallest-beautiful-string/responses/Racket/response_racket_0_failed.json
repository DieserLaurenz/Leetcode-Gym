{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "=: contract violation",
    "full_runtime_error": "=: contract violation\n  expected: number?\n  given: #<void>\n  context...:\n   solution.rkt:1:0: shortest-beautiful-substring\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:23:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100064000,
    "question_id": "3150",
    "elapsed_time": 256,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708145069209,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1177486694",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (shortest-beautiful-substring s k)\n  (-> string? exact-integer? string?)\n  (let loop ((i 0) (min-len +inf.0) (res \"\"))\n    (if (>= i (string-length s))\n        res\n        (let loop-inner ((j i) (count 0) (current \"\"))\n          (if (>= j (string-length s))\n              (loop (+ i 1) min-len res)\n              (let ((current (string-append current (string (string-ref s j)))))\n                (if (equal? (string-ref s j) #\\1)\n                    (if (= (set! count (+ count 1)) k)\n                        (if (< (string-length current) min-len)\n                            (loop (+ i 1) (string-length current) current)\n                            (if (= (string-length current) min-len)\n                                (loop (+ i 1) min-len (if (string<? current res) current res))\n                                (loop-inner (+ j 1) count current)))\n                        (loop-inner (+ j 1) count current))\n                    (loop-inner (+ j 1) count current))))))))"
}