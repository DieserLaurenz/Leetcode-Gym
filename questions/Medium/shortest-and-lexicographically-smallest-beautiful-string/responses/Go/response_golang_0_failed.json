{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2268000,
    "question_id": "3150",
    "elapsed_time": 11,
    "compare_result": "11111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111101111111111011111111111111011110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111011111111111111111111111011111111111110111101111111111111111111101111111111111111111111101011111111111111111111111111111111111111111111111111111111111101111111111111111111101111111111111111011111011111101011011111111111111111111111111111111111111111011111111111111111111011101111110111111111111111111101110111101110101111111111111111110111101111101111111011011111011111110111001101101111111101111010011111111101111011111011111111111111111",
    "code_output": "\"11101011011011\"",
    "std_output": "",
    "last_testcase": "\"001110101101101111\"\n10",
    "expected_output": "\"10101101101111\"",
    "task_finish_time": 1708144670696,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 627,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1177482737",
    "input_formatted": "\"001110101101101111\", 10",
    "input": "\"001110101101101111\"\n10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func shortestBeautifulSubstring(s string, k int) string {\n    minLen := len(s) + 1\n    startIndex := -1\n    count, left := 0, 0\n    for right := 0; right < len(s); right++ {\n        if s[right] == '1' {\n            count++\n        }\n        if count == k {\n            for s[left] == '0' {\n                left++\n            }\n            if right-left+1 < minLen {\n                minLen = right - left + 1\n                startIndex = left\n            }\n            left++\n            count--\n        }\n    }\n    if startIndex == -1 {\n        return \"\"\n    }\n    return s[startIndex : startIndex+minLen]\n}"
}