{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2344000,
    "question_id": "3150",
    "elapsed_time": 13,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708144725542,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 674,
    "total_testcases": 674,
    "runtime_percentile": 100,
    "status_memory": "2.3 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Go",
    "submission_id": "1177483249",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func shortestBeautifulSubstring(s string, k int) string {\n    shortest, count, start := \"\", 0, 0\n    for i := range s {\n        if s[i] == '1' {\n            count++\n        }\n        if count == k {\n            for s[start] != '1' {\n                start++\n            }\n            if len(shortest) == 0 || i-start+1 < len(shortest) {\n                shortest = s[start : i+1]\n            }\n            start++\n            count--\n        }\n    }\n    // Find lexicographically smallest substring by scanning the shortest ones\n    for i := 0; i <= len(s)-len(shortest); i++ {\n        sub := s[i : i+len(shortest)]\n        ones := 0\n        for j := 0; j < len(sub); j++ {\n            if sub[j] == '1' {\n                ones++\n            }\n        }\n        if ones == k && (shortest == \"\" || sub < shortest) {\n            shortest = sub\n        }\n    }\n    return shortest\n}"
}