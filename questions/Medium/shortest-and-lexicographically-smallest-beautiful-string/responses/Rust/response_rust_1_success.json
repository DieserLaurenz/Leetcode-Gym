{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "0 ms",
    "memory": 2236000,
    "question_id": "3150",
    "elapsed_time": 16,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708145010112,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 674,
    "total_testcases": 674,
    "runtime_percentile": 100,
    "status_memory": "2.2 MB",
    "memory_percentile": 7.692300000000003,
    "pretty_lang": "Rust",
    "submission_id": "1177486075",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn shortest_beautiful_substring(s: String, k: i32) -> String {\n        let mut result = String::new();\n        let mut counts = vec![0; s.len() + 1];\n        let mut min_len = usize::MAX;\n        let k = k as usize;\n\n        for i in 0..s.len() {\n            counts[i + 1] = counts[i] + if s.as_bytes()[i] == b'1' { 1 } else { 0 };\n        }\n\n        for i in 0..s.len() {\n            if counts[i] + k > counts[s.len()] {\n                break;\n            }\n            let mut low = i;\n            let mut high = s.len();\n            while low < high {\n                let mid = (low + high) / 2;\n                if counts[mid + 1] - counts[i] < k {\n                    low = mid + 1;\n                } else {\n                    high = mid;\n                }\n            }\n            let len = high - i + 1;\n            if counts[high + 1] - counts[i] == k && len <= min_len {\n                let candidate = &s[i..=high];\n                if len < min_len || candidate < &result {\n                    result = candidate.to_string();\n                    min_len = len;\n                }\n            }\n        }\n        \n        result\n    }\n}"
}