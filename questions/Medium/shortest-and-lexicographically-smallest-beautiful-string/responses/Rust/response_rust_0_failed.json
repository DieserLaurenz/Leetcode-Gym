{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2168000,
    "question_id": "3150",
    "elapsed_time": 14,
    "compare_result
    "code_output": "\"100011\"",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708144968890,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 543,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1177485670",
    "input_formatted": "\"100011001\", 3",
    "input": "\"100011001\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn shortest_beautiful_substring(s: String, k: i32) -> String {\n        let (mut left, mut count, mut min_len) = (0, 0, usize::MAX);\n        let mut result = String::new();\n        for right in 0..s.len() {\n            if s.as_bytes()[right] == b'1' {\n                count += 1;\n            }\n            while count > k {\n                if s.as_bytes()[left] == b'1' {\n                    count -= 1;\n                }\n                left += 1;\n            }\n            if count == k {\n                if right - left + 1 < min_len {\n                    min_len = right - left + 1;\n                    result = s[left..=right].to_string();\n                } else if right - left + 1 == min_len {\n                    let current = s[left..=right].to_string();\n                    if current < result {\n                        result = current;\n                    }\n                }\n            }\n        }\n        result\n    }\n}"
}