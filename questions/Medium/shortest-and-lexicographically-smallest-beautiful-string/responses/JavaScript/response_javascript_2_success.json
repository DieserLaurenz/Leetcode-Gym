{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "52 ms",
    "memory": 51756000,
    "question_id": "3150",
    "elapsed_time": 91,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708144111912,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 674,
    "total_testcases": 674,
    "runtime_percentile": 100,
    "status_memory": "51.8 MB",
    "memory_percentile": 16.666200000000025,
    "pretty_lang": "JavaScript",
    "submission_id": "1177477608",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "var shortestBeautifulSubstring = function(s, k) {\n    let minLen = Infinity;\n    let result = \"\";\n    for (let i = 0; i <= s.length - k; i++) {\n        let ones = 0;\n        for (let j = i; j < s.length; j++) {\n            if (s[j] === '1') ones++;\n            if (ones === k) {\n                if (j - i + 1 < minLen) {\n                    minLen = j - i + 1;\n                    result = s.substring(i, j + 1);\n                }\n                break; // Found the required ones, no need to go further\n            }\n        }\n    }\n\n    // Filter candidates by length and lexicographically\n    let candidates = [];\n    for (let i = 0; i <= s.length - minLen; i++) {\n        let sub = s.substring(i, i + minLen);\n        let onesCount = sub.split('').filter(c => c === '1').length;\n        if (onesCount === k) candidates.push(sub);\n    }\n    candidates.sort(); // Sort to find the lexicographically smallest\n    return candidates.length > 0 ? candidates[0] : \"\";\n};"
}