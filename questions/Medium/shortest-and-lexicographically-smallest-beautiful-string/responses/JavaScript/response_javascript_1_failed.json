{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 49496000,
    "question_id": "3150",
    "elapsed_time": 84,
    "compare_result
    "code_output": "\"11101011011011\"",
    "std_output": "",
    "last_testcase": "\"001110101101101111\"\n10",
    "expected_output": "\"10101101101111\"",
    "task_finish_time": 1708144079163,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 627,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1177477316",
    "input_formatted": "\"001110101101101111\", 10",
    "input": "\"001110101101101111\"\n10",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "var shortestBeautifulSubstring = function(s, k) {\n    let result = \"\", minLen = s.length + 1;\n    for (let i = 0; i < s.length; i++) {\n        let onesCount = 0;\n        for (let j = i; j < s.length; j++) {\n            if (s[j] === '1') onesCount++;\n            if (onesCount === k) {\n                let currentLen = j - i + 1;\n                if (currentLen < minLen) {\n                    minLen = currentLen;\n                    result = s.substring(i, j + 1);\n                }\n                break; // Found a beautiful substring, move to next starting position\n            }\n        }\n    }\n    // Check if a beautiful substring was found, if not return \"\"\n    return minLen <= s.length ? result : \"\";\n};"
}