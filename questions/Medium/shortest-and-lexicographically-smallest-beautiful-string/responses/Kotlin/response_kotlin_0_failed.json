{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 35052000,
    "question_id": "3150",
    "elapsed_time": 479,
    "compare_result
    "code_output": "\"100011\"",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708144468031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 543,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1177480783",
    "input_formatted": "\"100011001\", 3",
    "input": "\"100011001\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun shortestBeautifulSubstring(s: String, k: Int): String {\n        var minLength = Int.MAX_VALUE\n        var minSub = \"\"\n        var count = 0\n        var left = 0\n\n        for (right in s.indices) {\n            if (s[right] == '1') count++\n            while (count > k) {\n                if (s[left] == '1') count--\n                left++\n            }\n            if (count == k) {\n                val len = right - left + 1\n                if (len < minLength) {\n                    minLength = len\n                    minSub = s.substring(left, right + 1)\n                } else if (len == minLength) {\n                    val currentSub = s.substring(left, right + 1)\n                    if (currentSub < minSub) {\n                        minSub = currentSub\n                    }\n                }\n            }\n        }\n\n        return minSub\n    }\n}"
}