{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "144 ms",
    "memory": 35448000,
    "question_id": "3150",
    "elapsed_time": 400,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708144494268,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 674,
    "total_testcases": 674,
    "runtime_percentile": 100,
    "status_memory": "35.4 MB",
    "memory_percentile": 76.92309999999999,
    "pretty_lang": "Kotlin",
    "submission_id": "1177481031",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun shortestBeautifulSubstring(s: String, k: Int): String {\n        var result = \"\"\n        val n = s.length\n        var onesCount = 0\n        var left = 0\n        var minLength = Int.MAX_VALUE\n\n        for (right in 0 until n) {\n            if (s[right] == '1') onesCount++\n\n            while (onesCount == k) {\n                if (right - left + 1 <= minLength) {\n                    val candidate = s.substring(left, right + 1)\n                    if (minLength > candidate.length || result > candidate) {\n                        result = candidate\n                        minLength = candidate.length\n                    }\n                }\n                if (s[left] == '1') onesCount--\n                left++\n            }\n        }\n\n        return result\n    }\n}"
}