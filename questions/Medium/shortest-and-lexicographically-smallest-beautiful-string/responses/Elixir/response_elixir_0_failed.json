{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 14: ** (UndefinedFunctionError) function Enum.flatten/1 is undefined or private",
    "full_runtime_error": "Line 14: ** (UndefinedFunctionError) function Enum.flatten/1 is undefined or private\n    (elixir 1.15.7) Enum.flatten([[[[[[[], \"1\"], \"0\"], \"0\"], \"0\"], \"1\"], \"1\"])\n    solution.ex:14: anonymous fn/3 in Solution.shortest_beautiful_substring/2\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:6: Solution.shortest_beautiful_substring/2\n    solution.ex:54: Driver.consume_test_cases/2\n    solution.ex:40: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72792000,
    "question_id": "3150",
    "elapsed_time": 369,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708145319383,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177489164",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec shortest_beautiful_substring(s :: String.t, k :: integer) :: String.t\n  def shortest_beautiful_substring(s, k) do\n    s\n    |> String.graphemes()\n    |> Enum.reduce({[], [], 0, nil}, fn\n      \"1\", {acc, temp, count, min} when count == k ->\n        {acc, temp, count, min}\n      \"1\", {acc, temp, count, min} ->\n        new_temp = [temp | [\"1\"]]\n        new_count = count + 1\n        cond do\n          new_count == k ->\n            len = length(Enum.flatten(new_temp))\n            new_min = case min do\n              nil -> len\n              _ -> min(min, len)\n            end\n            {Enum.flatten(new_temp) ++ acc, [], 0, new_min}\n          true ->\n            {acc, new_temp, new_count, min}\n        end\n      \"0\", {acc, temp, count, min} ->\n        new_temp = if count > 0, do: [temp | [\"0\"]], else: temp\n        {acc, new_temp, count, min}\n    end)\n    |> (fn {acc, _, _, min} -> \n          acc \n          |> Enum.chunk_every(min, min, :discard)\n          |> Enum.map(&Enum.join/1)\n          |> Enum.sort()\n          |> hd()\n          |> (fn x -> if x == nil, do: \"\", else: x end).()\n       end).()\n  end\nend"
}