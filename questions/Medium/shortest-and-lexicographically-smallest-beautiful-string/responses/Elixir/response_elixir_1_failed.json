{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74808000,
    "question_id": "3150",
    "elapsed_time": 371,
    "compare_result
    "code_output": "\"\"",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708145350939,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177489486",
    "input_formatted": "\"100011001\", 3",
    "input": "\"100011001\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec shortest_beautiful_substring(s :: String.t, k :: integer) :: String.t\n  def shortest_beautiful_substring(s, k) do\n    s\n    |> String.graphemes()\n    |> Enum.reduce({[], 0, []}, fn\n      \"1\", {temp, count, acc} when count < k ->\n        {[[\"1\"] | temp], count + 1, acc}\n      \"1\", {temp, count, acc} ->\n        new_temp = List.flatten(temp) ++ [\"1\"]\n        {[], 0, [new_temp | acc]}\n      \"0\", {temp, count, acc} when count == k ->\n        {[], 0, [List.flatten(temp) | acc]}\n      \"0\", {temp, count, acc} ->\n        {[\"0\" | temp], count, acc}\n    end)\n    |> (fn {temp, count, acc} -> \n          if count == k, do: [List.flatten(temp) | acc], else: acc\n       end).()\n    |> Enum.filter(&(&1 |> length == k))\n    |> Enum.sort()\n    |> Enum.min_by(&String.length/1, fn -> \"\" end)\n  end\nend"
}