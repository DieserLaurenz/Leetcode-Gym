{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71028000,
    "question_id": "3150",
    "elapsed_time": 426,
    "compare_result
    "code_output": "\"100011\"",
    "std_output": "",
    "last_testcase": "\"100011001\"\n3",
    "expected_output": "\"11001\"",
    "task_finish_time": 1708145383300,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 430,
    "total_testcases": 674,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1177489788",
    "input_formatted": "\"100011001\", 3",
    "input": "\"100011001\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec shortest_beautiful_substring(s :: String.t, k :: integer) :: String.t\n  def shortest_beautiful_substring(s, k) do\n    s\n    |> String.codepoints()\n    |> Enum.reduce({[], 0, \"\", nil}, fn \n      \"1\", {buffer, ones_count, current_str, min_str} when ones_count < k - 1 ->\n        {[[\"1\"] | buffer], ones_count + 1, current_str <> \"1\", min_str}\n      \"1\", {buffer, ones_count, current_str, min_str} ->\n        new_str = current_str <> \"1\"\n        new_min_str = case min_str do\n          nil -> new_str\n          _ -> Enum.min([min_str, new_str], &(&1 <= &2))\n        end\n        {[], 0, \"\", new_min_str}\n      \"0\", {buffer, ones_count, current_str, min_str} when ones_count == k - 1 ->\n        new_str = current_str <> \"0\"\n        {[[\"0\"] | buffer], ones_count, new_str, min_str}\n      \"0\", {buffer, ones_count, current_str, min_str} ->\n        {buffer, ones_count, current_str <> \"0\", min_str}\n    end)\n    |> (fn {_, _, _, min_str} -> min_str || \"\" end).()\n  end\nend"
}