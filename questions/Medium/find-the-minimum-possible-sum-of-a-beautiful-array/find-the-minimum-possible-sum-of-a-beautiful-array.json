{
    "acRate": 40.36448935402382,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2834",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find the Minimum Possible Sum of a Beautiful Array",
    "titleSlug": "find-the-minimum-possible-sum-of-a-beautiful-array",
    "topicTags": [
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minimumPossibleSum(int n, int target) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minimumPossibleSum(int n, int target) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimumPossibleSum(self, n, target):         \"\"\"         :type n: int         :type target: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimumPossibleSum(self, n: int, target: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minimumPossibleSum(int n, int target){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinimumPossibleSum(int n, int target) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} n  * @param {number} target  * @return {number}  */ var minimumPossibleSum = function(n, target) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimumPossibleSum(n: number, target: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $n      * @param Integer $target      * @return Integer      */     function minimumPossibleSum($n, $target) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimumPossibleSum(_ n: Int, _ target: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimumPossibleSum(n: Int, target: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minimumPossibleSum(int n, int target) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimumPossibleSum(n int, target int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n # @param {Integer} target # @return {Integer} def minimum_possible_sum(n, target)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimumPossibleSum(n: Int, target: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimum_possible_sum(n: i32, target: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimum-possible-sum n target)   (-> exact-integer? exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimum_possible_sum(N :: integer(), Target :: integer()) -> integer(). minimum_possible_sum(N, Target) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimum_possible_sum(n :: integer, target :: integer) :: integer   def minimum_possible_sum(n, target) do    end end"
        }
    ],
    "content": "You are given positive integers n and target. An array nums is beautiful if it meets the following conditions:  nums.length == n. nums consists of pairwise distinct positive integers. There doesn't exist two distinct indices, i and j, in the range [0, n - 1], such that nums[i] + nums[j] == target.  Return the minimum possible sum that a beautiful array could have modulo 109 + 7.  Example 1:  Input: n = 2, target = 3 Output: 4 Explanation: We can see that nums = [1,3] is beautiful. - The array nums has length n = 2. - The array nums consists of pairwise distinct positive integers. - There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3. It can be proven that 4 is the minimum possible sum that a beautiful array could have.  Example 2:  Input: n = 3, target = 3 Output: 8 Explanation: We can see that nums = [1,3,4] is beautiful. - The array nums has length n = 3. - The array nums consists of pairwise distinct positive integers. - There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3. It can be proven that 8 is the minimum possible sum that a beautiful array could have.  Example 3:  Input: n = 1, target = 1 Output: 1 Explanation: We can see, that nums = [1] is beautiful.   Constraints:  1 <= n <= 109 1 <= target <= 109  "
}