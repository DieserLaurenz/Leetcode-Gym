{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72364000,
    "question_id": "3026",
    "elapsed_time": 366,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1707355410698,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 128,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1169284772",
    "input_formatted": "2, 3",
    "input": "2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_possible_sum(n :: integer, target :: integer) :: integer\n  def minimum_possible_sum(n, target) do\n    cond do\n      target <= n ->\n        Enum.sum(1..n) + n - target\n      true ->\n        Enum.sum(1..n)\n    end\n    |> rem(1_000_000_007)\n  end\nend"
}