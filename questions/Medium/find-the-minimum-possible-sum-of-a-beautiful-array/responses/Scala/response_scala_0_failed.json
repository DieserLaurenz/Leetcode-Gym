{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51912000,
    "question_id": "3026",
    "elapsed_time": 620,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1707354997492,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 142,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1169281588",
    "input_formatted": "2, 3",
    "input": "2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumPossibleSum(n: Int, target: Int): Int = {\n        val mod = 1000000007\n        if (target % 2 == 0) {\n            val half = target / 2\n            if (n > half) {\n                val start = (n - half).toLong\n                ((start + start + n - 1) * n / 2 % mod).toInt\n            } else {\n                ((1L + n) * n / 2 % mod).toInt\n            }\n        } else {\n            ((1L + n) * n / 2 % mod).toInt\n        }\n    }\n}"
}