{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "modulo: contract violation",
    "full_runtime_error": "modulo: contract violation\n  expected: integer?\n  given: 15/8\n  context...:\n   solution.rkt:1:0: minimum-possible-sum\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:18:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99820000,
    "question_id": "3026",
    "elapsed_time": 236,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1707355236797,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1169283398",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-possible-sum n target)\n  (-> exact-integer? exact-integer? exact-integer?)\n  (let* ((mod 1000000007)\n         (sum-up-to-n (lambda (x) (modulo (* x (+ x 1) (/ 2)) mod))))\n    (if (< n (/ target 2))\n        (sum-up-to-n n)\n        (if (= target 2)\n            (sum-up-to-n (- n 1))\n            (let* ((max-val (if (even? target) (- target 1) (- target 2)))\n                   (excluded (if (even? target) (/ target 2) (+ (/ target 2) 1)))\n                   (total-sum (sum-up-to-n max-val))\n                   (excluded-sum (sum-up-to-n (- excluded 1))))\n              (modulo (- total-sum excluded-sum) mod))))))"
}