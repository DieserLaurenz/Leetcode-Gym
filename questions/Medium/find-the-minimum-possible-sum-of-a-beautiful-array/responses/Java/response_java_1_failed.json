{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40420000,
    "display_runtime": "0",
    "question_id": "3026",
    "elapsed_time": 133,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1707345345759,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 149,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1169209341",
    "input_formatted": "2, 3",
    "input": "2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumPossibleSum(int n, int target) {\n        long mod = 1000000007;\n        long sum = 0;\n        if (target % 2 == 0) {\n            int half = target / 2;\n            if (n <= half) {\n                sum = ((1L + n) * n) / 2;\n            } else {\n                sum = ((1L + (half - 1)) * (half - 1)) / 2;\n                int remaining = n - (half - 1);\n                sum += (long) half * remaining + ((1L + remaining - 1) * (remaining - 1)) / 2;\n            }\n        } else {\n            sum = ((1L + n) * n) / 2;\n        }\n        return (int)(sum % mod);\n    }\n}"
}