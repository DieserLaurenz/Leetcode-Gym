{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11716000,
    "question_id": "3026",
    "elapsed_time": 109,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1708776085232,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 119,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184777427",
    "input_formatted": "2, 3",
    "input": "2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumPossibleSum(self, n, target):\n        \"\"\"\n        :type n: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n        MOD = 10**9 + 7\n        if target % 2 == 0:\n            half = target // 2\n            if n >= half:\n                if n == half:\n                    return ((1 + (n-1)) * (n-1) // 2) % MOD\n                else:\n                    avoid = half\n                    sum_with_avoid = ((1 + avoid-1) * (avoid-1) // 2) % MOD\n                    sum_after_avoid = ((avoid+1 + (avoid+1 + (n-half))) * (n-half) // 2) % MOD\n                    return (sum_with_avoid + sum_after_avoid) % MOD\n            else:\n                return ((1 + n) * n // 2) % MOD\n        else:\n            if n >= (target + 1) // 2:\n                avoid = target // 2\n                sum_with_avoid = ((1 + avoid) * avoid // 2) % MOD\n                sum_after_avoid = ((avoid+2 + (avoid+2 + (n-((target+1)//2)-1))) * (n-((target+1)//2)) // 2) % MOD\n                return (sum_with_avoid + sum_after_avoid) % MOD\n            else:\n                return ((1 + n) * n // 2) % MOD"
}