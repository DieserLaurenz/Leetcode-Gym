{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7756000,
    "question_id": "3026",
    "elapsed_time": 12,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1707345237405,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1169208529",
    "input_formatted": "2, 3",
    "input": "2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minimumPossibleSum(int n, int target) {\n        long long mod = 1e9 + 7;\n        long long sum = 0;\n        if (target % 2 == 0) {\n            // Exclude the number exactly half of target if n is large enough\n            long long m = min(n, (target / 2) - 1);\n            sum = m * (m + 1); // Sum of first m natural numbers\n            if (n > target / 2 - 1) {\n                sum += ((n - (target / 2 - 1)) * (target / 2)) + (n - (target / 2));\n            }\n        } else {\n            sum = (1LL * n * (n + 1)) / 2; // Sum of first n natural numbers\n        }\n        return sum % mod;\n    }\n};"
}