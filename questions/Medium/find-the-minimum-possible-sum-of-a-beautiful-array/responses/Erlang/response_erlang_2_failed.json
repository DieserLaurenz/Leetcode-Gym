{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59608000,
    "question_id": "3026",
    "elapsed_time": 1350,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1707355362712,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 129,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1169284396",
    "input_formatted": "2, 3",
    "input": "2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_possible_sum(N :: integer(), Target :: integer()) -> integer().\nminimum_possible_sum(N, Target) ->\n    Mod = 1000000007,\n    if \n        Target rem 2 == 0 ->\n            Sum = case N > Target div 2 of\n                      true -> ((N - Target div 2) * N) + ((Target div 2 - 1) * (Target div 2)) div 2;\n                      false -> (N * (N + 1)) div 2\n                  end;\n        true ->\n            Sum = case N >= Target div 2 + 1 of\n                      true -> ((N - Target div 2 - 1) * N) + ((Target div 2) * (Target div 2 + 1)) div 2;\n                      false -> (N * (N + 1)) div 2\n                  end\n    end,\n    Sum rem Mod."
}