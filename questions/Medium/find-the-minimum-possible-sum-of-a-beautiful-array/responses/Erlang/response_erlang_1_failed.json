{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59468000,
    "question_id": "3026",
    "elapsed_time": 1348,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1707355341827,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 149,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1169284224",
    "input_formatted": "2, 3",
    "input": "2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_possible_sum(N :: integer(), Target :: integer()) -> integer().\nminimum_possible_sum(N, Target) ->\n    Mod = 1000000007,\n    Base = Target div 2,\n    Extra = case Target rem 2 of\n                0 -> Base - 1;\n                1 -> Base\n            end,\n    if\n        N =< Base -> ((N * (N + 1)) div 2) rem Mod;\n        true -> ((Extra + 1 + Extra + N) * N div 2) rem Mod\n    end."
}