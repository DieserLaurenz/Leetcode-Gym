{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27136000,
    "question_id": "3026",
    "elapsed_time": 858,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "2\n3",
    "expected_output": "4",
    "task_finish_time": 1707345604977,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 136,
    "total_testcases": 575,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1169211389",
    "input_formatted": "2, 3",
    "input": "2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumPossibleSum(int n, int target) {\n        long sum = 0;\n        int mod = 1000000007;\n        for (int i = 1; i <= n; i++) {\n            if (i * 2 == target) continue; // Skip the number that could potentially make a pair summing to target\n            sum += i;\n            if (sum >= mod) sum -= mod;\n        }\n        // If we skipped a number, add the next available number after n\n        if (target <= n * 2 && target % 2 == 0) {\n            sum += n + 1;\n        }\n        return (int)(sum % mod);\n    }\n}"
}