{
    "acRate": 42.8927977180889,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2933",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "High-Access Employees",
    "titleSlug": "high-access-employees",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public List<String> findHighAccessEmployees(List<List<String>> access_times) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def findHighAccessEmployees(self, access_times):         \"\"\"         :type access_times: List[List[str]]         :rtype: List[str]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def findHighAccessEmployees(self, access_times: List[List[str]]) -> List[str]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ char** findHighAccessEmployees(char*** access_times, int access_timesSize, int* access_timesColSize, int* returnSize) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public IList<string> FindHighAccessEmployees(IList<IList<string>> access_times) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string[][]} access_times  * @return {string[]}  */ var findHighAccessEmployees = function(access_times) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findHighAccessEmployees(access_times: string[][]): string[] {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String[][] $access_times      * @return String[]      */     function findHighAccessEmployees($access_times) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func findHighAccessEmployees(_ access_times: [[String]]) -> [String] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun findHighAccessEmployees(access_times: List<List<String>>): List<String> {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<String> findHighAccessEmployees(List<List<String>> access_times) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findHighAccessEmployees(access_times [][]string) []string {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String[][]} access_times # @return {String[]} def find_high_access_employees(access_times)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def findHighAccessEmployees(access_times: List[List[String]]): List[String] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn find_high_access_employees(access_times: Vec<Vec<String>>) -> Vec<String> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (find-high-access-employees access_times)   (-> (listof (listof string?)) (listof string?))   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec find_high_access_employees(Access_times :: [[unicode:unicode_binary()]]) -> [unicode:unicode_binary()]. find_high_access_employees(Access_times) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec find_high_access_employees(access_times :: [[String.t]]) :: [String.t]   def find_high_access_employees(access_times) do        end end"
        }
    ],
    "content": "You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day. The access time is represented as four digits using a 24-hour time format, for example, \"0800\" or \"2250\". An employee is said to be high-access if he has accessed the system three or more times within a one-hour period. Times with exactly one hour of difference are not considered part of the same one-hour period. For example, \"0815\" and \"0915\" are not part of the same one-hour period. Access times at the start and end of the day are not counted within the same one-hour period. For example, \"0005\" and \"2350\" are not part of the same one-hour period. Return a list that contains the names of high-access employees with any order you want.  Example 1:  Input: access_times = [[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]] Output: [\"a\"] Explanation: \"a\" has three access times in the one-hour period of [05:32, 06:31] which are 05:32, 05:49, and 06:21. But \"b\" does not have more than two access times at all. So the answer is [\"a\"]. Example 2:  Input: access_times = [[\"d\",\"0002\"],[\"c\",\"0808\"],[\"c\",\"0829\"],[\"e\",\"0215\"],[\"d\",\"1508\"],[\"d\",\"1444\"],[\"d\",\"1410\"],[\"c\",\"0809\"]] Output: [\"c\",\"d\"] Explanation: \"c\" has three access times in the one-hour period of [08:08, 09:07] which are 08:08, 08:09, and 08:29. \"d\" has also three access times in the one-hour period of [14:10, 15:09] which are 14:10, 14:44, and 15:08. However, \"e\" has just one access time, so it can not be in the answer and the final answer is [\"c\",\"d\"]. Example 3:  Input: access_times = [[\"cd\",\"1025\"],[\"ab\",\"1025\"],[\"cd\",\"1046\"],[\"cd\",\"1055\"],[\"ab\",\"1124\"],[\"ab\",\"1120\"]] Output: [\"ab\",\"cd\"] Explanation: \"ab\" has three access times in the one-hour period of [10:25, 11:24] which are 10:25, 11:20, and 11:24. \"cd\" has also three access times in the one-hour period of [10:25, 11:24] which are 10:25, 10:46, and 10:55. So the answer is [\"ab\",\"cd\"].  Constraints:  1 <= access_times.length <= 100 access_times[i].length == 2 1 <= access_times[i][0].length <= 10 access_times[i][0] consists only of English small letters. access_times[i][1].length == 4 access_times[i][1] is in 24-hour time format. access_times[i][1] consists only of '0' to '9'.  "
}