{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 15: exception error: badarg",
    "full_runtime_error": "Line 15: exception error: badarg\n[{erlang,list_to_integer,\n         [<<\"0621\">>],\n         [{error_info,#{module => erl_erts_errors}}]},\n {solution,'-find_high_access_employees/1-fun-2-',2,\n              [{file,\"solution.erl\"},{line,15}]},\n {lists,any,2,[{file,\"lists.erl\"},{line,1535}]},\n {lists,'-filter/2-lc$^0/1-0-',2,[{file,\"lists.erl\"},{line,1627}]},\n {solution,'-find_high_access_employees/1-fun-4-',2,\n              [{file,\"solution.erl\"},{line,12}]},\n {lists,any,2,[{file,\"lists.erl\"},{line,1535}]},\n {lists,'-filter/2-lc$^0/1-0-',2,[{file,\"lists.erl\"},{line,1627}]},\n {solution,find_high_access_employees,1,\n              [{file,\"solution.erl\"},{line,10}]}]",
    "status_runtime": "N/A",
    "memory": 59988000,
    "question_id": "3202",
    "elapsed_time": 1367,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
    "expected_output": "[\"a\"]",
    "task_finish_time": 1707463659760,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1143,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1170421969",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec find_high_access_employees(Access_times :: [[unicode:unicode_binary()]]) -> [unicode:unicode_binary()].\nfind_high_access_employees(Access_times) ->\n    Sorted = lists:sort(fun([_, A], [_, B]) -> A < B end, Access_times),\n    Groups = lists:foldl(fun(E, Acc) ->\n                             case Acc of\n                                 [] -> [[E]];\n                                 [H | T] -> [ [E | H] | T ]\n                             end\n                         end, [], Sorted),\n    Filt = lists:filter(fun(Group) ->\n                            lists:any(fun([Name, _]) ->\n                                          Count = length(lists:filter(fun([N, T]) ->\n                                                                           N == Name andalso\n                                                                           lists:any(fun([_, OT]) ->\n                                                                                          TimeDiff = abs(list_to_integer(T) - list_to_integer(OT)),\n                                                                                          TimeDiff > 0 andalso TimeDiff < 100\n                                                                                      end, Group)\n                                                                       end, Group)),\n                                          Count >= 3\n                                      end, Group)\n                        end, Groups),\n    lists:usort(lists:map(fun([Name, _]) -> Name end, lists:flatten(Filt)))."
}