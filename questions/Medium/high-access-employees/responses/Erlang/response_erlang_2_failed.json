{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61548000,
    "question_id": "3202",
    "elapsed_time": 1675,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
    "expected_output": "[\"a\"]",
    "task_finish_time": 1707463731233,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 706,
    "total_testcases": 1143,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1170422720",
    "input_formatted": "[[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
    "input": "[[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_high_access_employees(Access_times :: [[unicode:unicode_binary()]]) -> [unicode:unicode_binary()].\nfind_high_access_employees(Access_times) ->\n    Prepared = lists:foldl(fun([Name, Time], Acc) ->\n                               TimeInt = list_to_integer(binary_to_list(Time)),\n                               case maps:find(Name, Acc) of\n                                 {ok, Times} -> maps:update(Name, [TimeInt | Times], Acc);\n                                 error -> maps:put(Name, [TimeInt], Acc)\n                               end\n                           end, #{}, Access_times),\n    HighAccess = maps:fold(fun(Name, Times, Acc) ->\n                               SortedTimes = lists:usort(Times),\n                               HighAccess = check_times(SortedTimes, []),\n                               case HighAccess of\n                                 true -> [Name | Acc];\n                                 false -> Acc\n                               end\n                           end, [], Prepared),\n    lists:usort(HighAccess).\n\ncheck_times([First, Second, Third | Rest], _) when Third - First =< 60 ->\n    true;\ncheck_times([_ | Rest], Acc) ->\n    check_times(Rest, Acc);\ncheck_times(_, _) ->\n    false."
}