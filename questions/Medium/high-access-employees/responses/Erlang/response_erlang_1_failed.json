{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60812000,
    "question_id": "3202",
    "elapsed_time": 1516,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
    "expected_output": "[\"a\"]",
    "task_finish_time": 1707463698235,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 313,
    "total_testcases": 1143,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1170422385",
    "input_formatted": "[[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
    "input": "[[\"a\",\"0549\"],[\"b\",\"0457\"],[\"a\",\"0532\"],[\"a\",\"0621\"],[\"b\",\"0540\"]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_high_access_employees(Access_times :: [[unicode:unicode_binary()]]) -> [unicode:unicode_binary()].\nfind_high_access_employees(Access_times) ->\n    Access_times_int = [{binary_to_list(Name), list_to_integer(binary_to_list(Time))} || [Name, Time] <- Access_times],\n    Sorted = lists:sort(fun({_, A}, {_, B}) -> A < B end, Access_times_int),\n    Filtered = lists:foldl(fun({Name, Time}, Acc) ->\n                               maps:update_with(Name, fun(Times) -> [Time | Times] end, [Time], Acc)\n                           end, #{}, Sorted),\n    High_access = maps:fold(fun(Name, Times, Acc) ->\n                                Sorted_times = lists:sort(Times),\n                                case lists:any(fun(Time) ->\n                                                   case lists:dropwhile(fun(T) -> T < Time end, Sorted_times) of\n                                                       [_, Second, Third | _] when Third - Time =< 59 -> true;\n                                                       _ -> false\n                                                   end\n                                               end, Sorted_times) of\n                                    true -> [Name | Acc];\n                                    false -> Acc\n                                end\n                            end, [], Filtered),\n    lists:sort(High_access)."
}