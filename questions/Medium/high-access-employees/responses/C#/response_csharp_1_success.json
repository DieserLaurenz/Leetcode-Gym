{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "181 ms",
    "memory": 65152000,
    "question_id": "3202",
    "elapsed_time": 263,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707396889624,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 80.95240000000001,
    "status_memory": "65.2 MB",
    "memory_percentile": 23.809600000000017,
    "pretty_lang": "C#",
    "submission_id": "1169709070",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public IList<string> FindHighAccessEmployees(IList<IList<string>> access_times) {\n        Dictionary<string, List<int>> accessMap = new Dictionary<string, List<int>>();\n        foreach (var item in access_times) {\n            if (!accessMap.ContainsKey(item[0])) accessMap[item[0]] = new List<int>();\n            accessMap[item[0]].Add(int.Parse(item[1].Substring(0, 2)) * 60 + int.Parse(item[1].Substring(2, 2)));\n        }\n\n        HashSet<string> result = new HashSet<string>();\n        foreach (var kvp in accessMap) {\n            List<int> times = kvp.Value;\n            times.Sort();\n            for (int i = 0; i < times.Count - 2; i++) {\n                if (times[i + 2] - times[i] < 60) {\n                    result.Add(kvp.Key);\n                    break;\n                }\n            }\n        }\n\n        return result.ToList();\n    }\n}"
}