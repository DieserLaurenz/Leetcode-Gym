{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "701 ms",
    "memory": 57352000,
    "question_id": "3202",
    "elapsed_time": 901,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707397886955,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 100,
    "status_memory": "57.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1169719991",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findHighAccessEmployees(access_times: List[List[String]]): List[String] = {\n        access_times\n            .groupBy(_(0)) // Group by employee name\n            .flatMap { case (name, times) =>\n                val sortedTimes = times.map(_(1)).sorted // Sort times for each employee\n                val highAccess = sortedTimes.indices.exists { i =>\n                    i + 2 < sortedTimes.length && // Ensure there are at least two more elements\n                    (sortedTimes(i + 2).toInt - sortedTimes(i).toInt) < 100 // Check for three accesses within an hour\n                }\n                if (highAccess) Some(name) else None\n            }.toList\n    }\n}"
}