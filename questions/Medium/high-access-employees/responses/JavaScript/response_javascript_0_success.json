{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "118 ms",
    "memory": 60456000,
    "question_id": "3202",
    "elapsed_time": 165,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707397106360,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 57.143199999999936,
    "status_memory": "60.5 MB",
    "memory_percentile": 5.35789999999994,
    "pretty_lang": "JavaScript",
    "submission_id": "1169711426",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {string[][]} access_times\n * @return {string[]}\n */\nvar findHighAccessEmployees = function(access_times) {\n    const employeeAccess = {};\n    const highAccessEmployees = new Set();\n\n    access_times.forEach(([employee, time]) => {\n        if (!employeeAccess[employee]) {\n            employeeAccess[employee] = [];\n        }\n        employeeAccess[employee].push(parseInt(time, 10));\n    });\n\n    Object.keys(employeeAccess).forEach(employee => {\n        const times = employeeAccess[employee].sort((a, b) => a - b);\n        for (let i = 0; i < times.length - 2; i++) {\n            if (times[i + 2] - times[i] < 100) {\n                highAccessEmployees.add(employee);\n                break;\n            } else if ((times[i] % 100) <= 59 && (times[i + 2] - times[i] - 40) < 60) {\n                highAccessEmployees.add(employee);\n                break;\n            }\n        }\n    });\n\n    return [...highAccessEmployees];\n};"
}