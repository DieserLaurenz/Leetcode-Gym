{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "275 ms",
    "memory": 124456000,
    "question_id": "3202",
    "elapsed_time": 430,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707463603289,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 100,
    "status_memory": "124.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1170421405",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (find-high-access-employees access_times)\n  (-> (listof (listof string?)) (listof string?))\n  (define (convert-time time)\n    (+ (* 60 (string->number (substring time 0 2))) (string->number (substring time 2 4))))\n  (define (within-hour? times)\n    (let loop ([times times] [count 0])\n      (cond\n        [(< (length times) 3) #f]\n        [else\n         (let* ([t1 (convert-time (first times))]\n                [t2 (convert-time (third times))])\n           (if (<= (- t2 t1) 59)\n               #t\n               (loop (rest times) count)))])))\n  (let ([records (make-hash)])\n    (for ([record (in-list access_times)])\n      (let ([name (first record)]\n            [time (second record)])\n        (hash-update! records name (lambda (old) (cons time old)) '())))\n    (let ([high-access '()])\n      (hash-for-each records\n                     (lambda (name times)\n                       (when (and (>= (length times) 3)\n                                  (within-hour? (sort times string<=?)))\n                         (set! high-access (cons name high-access)))))\n      high-access)))"
}