{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126308000,
    "question_id": "3202",
    "elapsed_time": 349,
    "compare_result
    "code_output": "[\"afwpabwyds\",\"relf\"]",
    "std_output": "",
    "last_testcase": "[[\"eazbkekis\",\"1034\"],[\"relf\",\"1126\"],[\"afwpabwyds\",\"1114\"],[\"afwpabwyds\",\"1105\"],[\"relf\",\"1031\"],[\"afwpabwyds\",\"1010\"],[\"vzqpz\",\"1047\"],[\"relf\",\"1103\"]]",
    "expected_output": "[\"relf\"]",
    "task_finish_time": 1707463527131,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 656,
    "total_testcases": 1143,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1170420650",
    "input_formatted": "[[\"eazbkekis\",\"1034\"],[\"relf\",\"1126\"],[\"afwpabwyds\",\"1114\"],[\"afwpabwyds\",\"1105\"],[\"relf\",\"1031\"],[\"afwpabwyds\",\"1010\"],[\"vzqpz\",\"1047\"],[\"relf\",\"1103\"]]",
    "input": "[[\"eazbkekis\",\"1034\"],[\"relf\",\"1126\"],[\"afwpabwyds\",\"1114\"],[\"afwpabwyds\",\"1105\"],[\"relf\",\"1031\"],[\"afwpabwyds\",\"1010\"],[\"vzqpz\",\"1047\"],[\"relf\",\"1103\"]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (find-high-access-employees access_times)\n  (-> (listof (listof string?)) (listof string?))\n  (define (time-difference time1 time2)\n    (let ([hour1 (string->number (substring time1 0 2))]\n          [minute1 (string->number (substring time1 2 4))]\n          [hour2 (string->number (substring time2 0 2))]\n          [minute2 (string->number (substring time2 2 4))])\n      (+ (- hour2 hour1) (/ (- minute2 minute1) 60.0))))\n  (define (is-within-hour? times)\n    (for/or ([i (in-range 0 (- (length times) 2))])\n            (for/or ([j (in-range (+ i 1) (length times))])\n                    (< (time-difference (list-ref times i) (list-ref times j)) 1))))\n  (define (filter-high-access-employees employees)\n    (let ([grouped (make-hash)])\n      (for ([employee (in-list employees)])\n           (let ([name (first employee)]\n                 [time (second employee)])\n             (hash-update! grouped name (lambda (times) (cons time times)) '())))\n      (hash-map grouped (lambda (name times)\n                          (if (and (> (length times) 2) (is-within-hour? (sort times string<?)))\n                              name\n                              #f)))))\n  (filter-map identity (filter-high-access-employees access_times)))"
}