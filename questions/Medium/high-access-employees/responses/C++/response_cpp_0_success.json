{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "58 ms",
    "memory": 48992000,
    "question_id": "3202",
    "elapsed_time": 88,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707396243753,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 85.55179999999999,
    "status_memory": "49 MB",
    "memory_percentile": 30.216000000000005,
    "pretty_lang": "C++",
    "submission_id": "1169702096",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {\n        unordered_map<string, vector<int>> employee_access;\n        for (const auto& entry : access_times) {\n            int time = stoi(entry[1].substr(0, 2)) * 60 + stoi(entry[1].substr(2, 2));\n            employee_access[entry[0]].push_back(time);\n        }\n\n        vector<string> result;\n        for (auto& [employee, times] : employee_access) {\n            sort(times.begin(), times.end());\n            for (int i = 0; i < times.size(); ++i) {\n                int count = 1;\n                for (int j = i + 1; j < times.size() && times[j] - times[i] < 60; ++j) {\n                    count++;\n                }\n                if (count >= 3) {\n                    result.push_back(employee);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n};"
}