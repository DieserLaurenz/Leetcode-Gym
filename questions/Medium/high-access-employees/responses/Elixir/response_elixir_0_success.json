{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "444 ms",
    "memory": 73552000,
    "question_id": "3202",
    "elapsed_time": 547,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707463788542,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 100,
    "status_memory": "73.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1170423299",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_high_access_employees(access_times :: [[String.t]]) :: [String.t]\n  def find_high_access_employees(access_times) do\n    access_times\n    |> Enum.group_by(fn [name, _time] -> name end, fn [_name, time] -> time end)\n    |> Enum.reduce([], fn {name, times}, acc ->\n      times\n      |> Enum.map(&String.to_integer/1)\n      |> Enum.sort()\n      |> Enum.chunk_every(3, 1, :discard)\n      |> Enum.any?(fn [t1, t2, t3] -> t3 - t1 < 100 end) && [name | acc] || acc\n    end)\n    |> Enum.uniq()\n  end\nend"
}