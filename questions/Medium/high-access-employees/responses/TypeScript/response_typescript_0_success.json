{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "121 ms",
    "memory": 61308000,
    "question_id": "3202",
    "elapsed_time": 194,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707397161977,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 50.0,
    "status_memory": "61.3 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "TypeScript",
    "submission_id": "1169711991",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function findHighAccessEmployees(access_times: string[][]): string[] {\n    const highAccessEmployees = new Set<string>();\n\n    // Group times by employee\n    const employeeAccessTimes: { [key: string]: number[] } = {};\n    for (const [employee, accessTime] of access_times) {\n        const time = parseInt(accessTime.substring(0, 2)) * 60 + parseInt(accessTime.substring(2, 4));\n        if (!employeeAccessTimes[employee]) {\n            employeeAccessTimes[employee] = [];\n        }\n        employeeAccessTimes[employee].push(time);\n    }\n\n    // Check for high-access within each group\n    for (const employee in employeeAccessTimes) {\n        const times = employeeAccessTimes[employee].sort((a, b) => a - b);\n        for (let i = 0; i < times.length - 2; i++) {\n            if (times[i + 2] - times[i] < 60) {\n                highAccessEmployees.add(employee);\n                break;\n            }\n        }\n    }\n\n    return Array.from(highAccessEmployees);\n}"
}