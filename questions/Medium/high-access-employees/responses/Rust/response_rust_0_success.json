{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 2208000,
    "question_id": "3202",
    "elapsed_time": 46,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707398125905,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 100,
    "status_memory": "2.2 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "Rust",
    "submission_id": "1169722636",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_high_access_employees(access_times: Vec<Vec<String>>) -> Vec<String> {\n        use std::collections::{HashMap, HashSet};\n\n        let mut employee_access: HashMap<String, Vec<i32>> = HashMap::new();\n        for access in access_times {\n            let time = access[1][0..2].parse::<i32>().unwrap() * 60 + access[1][2..].parse::<i32>().unwrap();\n            employee_access.entry(access[0].clone()).or_insert_with(Vec::new).push(time);\n        }\n\n        let mut high_access_employees: HashSet<String> = HashSet::new();\n        for (employee, times) in employee_access.iter_mut() {\n            times.sort_unstable();\n            for window in times.windows(3) {\n                if window[2] - window[0] < 60 {\n                    high_access_employees.insert(employee.clone());\n                    break;\n                }\n            }\n        }\n\n        high_access_employees.into_iter().collect()\n    }\n}"
}