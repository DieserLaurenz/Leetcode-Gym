{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "98 ms",
    "memory": 211848000,
    "question_id": "3202",
    "elapsed_time": 268,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707397834499,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 100,
    "status_memory": "211.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Ruby",
    "submission_id": "1169719395",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {String[][]} access_times\n# @return {String[]}\ndef find_high_access_employees(access_times)\n  # Organize access times by employee\n  access_by_employee = Hash.new { |h, k| h[k] = [] }\n  access_times.each { |name, time| access_by_employee[name] << time.to_i }\n\n  # Find high access employees\n  high_access_employees = access_by_employee.each_with_object([]) do |(name, times), acc|\n    times.sort!\n    times.each_with_index do |time, i|\n      # Look for three or more accesses within a one-hour period\n      range_end = i + 2 # Checking the current and next two times for a match within an hour\n      if range_end < times.size && (times[range_end] - time < 100 || (times[range_end] / 100 == time / 100 && times[range_end] % 100 - time % 100 <= 59))\n        acc << name\n        break # Stop checking this employee as they've already qualified\n      end\n    end\n  end\n\n  high_access_employees\nend"
}