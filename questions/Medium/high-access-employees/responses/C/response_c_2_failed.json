{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10168000,
    "question_id": "3202",
    "elapsed_time": 68,
    "compare_result
    "code_output": "[\"akuhmu\",\"aywtqh\"]",
    "std_output": "",
    "last_testcase": "[[\"akuhmu\",\"0454\"],[\"aywtqh\",\"0523\"],[\"akuhmu\",\"0518\"],[\"ihhkc\",\"0439\"],[\"ihhkc\",\"0508\"],[\"akuhmu\",\"0529\"],[\"aywtqh\",\"0530\"],[\"aywtqh\",\"0419\"]]",
    "expected_output": "[\"akuhmu\"]",
    "task_finish_time": 1707396559640,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 648,
    "total_testcases": 1143,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1169705530",
    "input_formatted": "[[\"akuhmu\",\"0454\"],[\"aywtqh\",\"0523\"],[\"akuhmu\",\"0518\"],[\"ihhkc\",\"0439\"],[\"ihhkc\",\"0508\"],[\"akuhmu\",\"0529\"],[\"aywtqh\",\"0530\"],[\"aywtqh\",\"0419\"]]",
    "input": "[[\"akuhmu\",\"0454\"],[\"aywtqh\",\"0523\"],[\"akuhmu\",\"0518\"],[\"ihhkc\",\"0439\"],[\"ihhkc\",\"0508\"],[\"akuhmu\",\"0529\"],[\"aywtqh\",\"0530\"],[\"aywtqh\",\"0419\"]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n#include <string.h>\n\nint timeDiff(const char* time1, const char* time2) {\n    int hour1 = (time1[0] - '0') * 10 + (time1[1] - '0');\n    int minute1 = (time1[2] - '0') * 10 + (time1[3] - '0');\n    int hour2 = (time2[0] - '0') * 10 + (time2[1] - '0');\n    int minute2 = (time2[2] - '0') * 10 + (time2[3] - '0');\n    return (hour2 - hour1) * 60 + (minute2 - minute1);\n}\n\nint cmp(const void* a, const void* b) {\n    char*** aa = (char***)a;\n    char*** bb = (char***)b;\n    int nameCmp = strcmp((*aa)[0], (*bb)[0]);\n    if (nameCmp != 0) return nameCmp;\n    return strcmp((*aa)[1], (*bb)[1]);\n}\n\nchar** findHighAccessEmployees(char*** access_times, int access_timesSize, int* access_timesColSize, int* returnSize) {\n    qsort(access_times, access_timesSize, sizeof(char**), cmp);\n    *returnSize = 0;\n    char **result = (char**)malloc(access_timesSize * sizeof(char*));\n    for (int i = 0; i < access_timesSize;) {\n        int count = 1;\n        for (int j = i + 1; j < access_timesSize && strcmp(access_times[i][0], access_times[j][0]) == 0; ++j) {\n            if (timeDiff(access_times[j - count + 1][1], access_times[j][1]) < 60) {\n                ++count;\n                if (count >= 3) {\n                    result[*returnSize] = access_times[i][0];\n                    while (++i < access_timesSize && strcmp(result[*returnSize], access_times[i][0]) == 0);\n                    ++(*returnSize);\n                    break;\n                }\n            } else {\n                count = 1;\n            }\n        }\n        if (count < 3) ++i;\n    }\n    return result;\n}"
}