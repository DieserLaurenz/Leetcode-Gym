{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "332 ms",
    "memory": 48392000,
    "question_id": "3202",
    "elapsed_time": 471,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707397629054,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1143,
    "total_testcases": 1143,
    "runtime_percentile": 55.55560000000002,
    "status_memory": "48.4 MB",
    "memory_percentile": 33.33340000000002,
    "pretty_lang": "Kotlin",
    "submission_id": "1169717052",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun findHighAccessEmployees(access_times: List<List<String>>): List<String> {\n        val accessMap = access_times.groupBy({ it[0] }, { it[1].toInt() })\n        val result = mutableListOf<String>()\n        for ((name, times) in accessMap) {\n            val sortedTimes = times.sorted()\n            for (i in 0 until sortedTimes.size) {\n                var count = 1\n                for (j in i + 1 until sortedTimes.size) {\n                    if (sortedTimes[j] - sortedTimes[i] < 100) {\n                        count++\n                    } else if ((sortedTimes[j] / 100 - sortedTimes[i] / 100 == 1) && (sortedTimes[j] % 100 + (60 - sortedTimes[i] % 100) < 60)) {\n                        count++\n                    } else {\n                        break\n                    }\n                    if (count >= 3) {\n                        result.add(name)\n                        break\n                    }\n                }\n                if (count >= 3) break\n            }\n        }\n        return result.distinct()\n    }\n}"
}