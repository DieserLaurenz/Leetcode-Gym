{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63036000,
    "question_id": "3235",
    "elapsed_time": 382,
    "compare_result": "00110001100100001010010001000000010000011000100000110001001111000101100000000000001100010000001000100100001000000101100100110000101000000100000001010000010110000011001010100001000000100010100010001000001000010010000010100000001000000110000000100000000000111000000000000000001000000000000000000010100000000001000000000010000000000010000000000000010010100001000000000000100100000000000000000000000000000000000000000000001000100000000000000000000000010000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111110000000000000",
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707743099702,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1173166341",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumCost(source: string, target: string, original: string[], changed: string[], cost: number[]): number {\n    const n = source.length;\n    let totalCost = 0;\n    const conversionCost: { [key: string]: number } = {};\n\n    for (let i = 0; i < original.length; i++) {\n        const key = original[i] + \"->\" + changed[i];\n        if (!(key in conversionCost)) {\n            conversionCost[key] = cost[i];\n        } else {\n            conversionCost[key] = Math.min(conversionCost[key], cost[i]);\n        }\n    }\n\n    for (let i = 0; i < n; i++) {\n        if (source[i] === target[i]) continue;\n        const key = source[i] + \"->\" + target[i];\n        if (key in conversionCost) {\n            totalCost += conversionCost[key];\n        } else {\n            return -1;\n        }\n    }\n\n    return totalCost;\n}"
}