{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "20 ms",
    "memory": 45732000,
    "display_runtime": "20",
    "question_id": "3235",
    "elapsed_time": 282,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707742646733,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 581,
    "total_testcases": 581,
    "runtime_percentile": 86.96609999999998,
    "status_memory": "45.7 MB",
    "memory_percentile": 59.678399999999996,
    "pretty_lang": "Java",
    "submission_id": "1173161294",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {\n        int n = source.length();\n        long totalCost = 0;\n        int[][] dp = new int[26][26]; // dp[from][to] = cost\n        for (int i = 0; i < 26; i++) {\n            for (int j = 0; j < 26; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        for (int i = 0; i < original.length; i++) {\n            int from = original[i] - 'a';\n            int to = changed[i] - 'a';\n            dp[from][to] = Math.min(dp[from][to], cost[i]);\n        }\n        for (int k = 0; k < 26; k++) {\n            for (int i = 0; i < 26; i++) {\n                for (int j = 0; j < 26; j++) {\n                    if (dp[i][k] < Integer.MAX_VALUE && dp[k][j] < Integer.MAX_VALUE) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            int from = source.charAt(i) - 'a';\n            int to = target.charAt(i) - 'a';\n            if (from == to) continue;\n            if (dp[from][to] == Integer.MAX_VALUE) return -1;\n            totalCost += dp[from][to];\n        }\n        return totalCost;\n    }\n}"
}