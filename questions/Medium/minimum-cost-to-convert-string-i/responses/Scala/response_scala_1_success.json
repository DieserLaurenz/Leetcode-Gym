{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "842 ms",
    "memory": 61180000,
    "question_id": "3235",
    "elapsed_time": 1155,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707753332554,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 581,
    "total_testcases": 581,
    "runtime_percentile": 100,
    "status_memory": "61.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1173300105",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(source: String, target: String, original: Array[Char], changed: Array[Char], cost: Array[Int]): Long = {\n        val transitionCost = Array.fill(26, 26)(Int.MaxValue)\n        for (i <- original.indices) {\n            val o = original(i) - 'a'\n            val c = changed(i) - 'a'\n            transitionCost(o)(c) = transitionCost(o)(c) min cost(i)\n        }\n\n        for (k <- 0 until 26) {\n            for (i <- 0 until 26) {\n                for (j <- 0 until 26) {\n                    if (transitionCost(i)(k) < Int.MaxValue && transitionCost(k)(j) < Int.MaxValue) {\n                        transitionCost(i)(j) = transitionCost(i)(j) min (transitionCost(i)(k) + transitionCost(k)(j))\n                    }\n                }\n            }\n        }\n\n        var totalCost = 0L\n        for (i <- source.indices) {\n            val s = source(i) - 'a'\n            val t = target(i) - 'a'\n            if (s != t) {\n                if (transitionCost(s)(t) == Int.MaxValue) return -1\n                totalCost += transitionCost(s)(t)\n            }\n        }\n        totalCost\n    }\n}"
}