{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62408000,
    "question_id": "3235",
    "elapsed_time": 983,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707753286630,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1173299391",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(source: String, target: String, original: Array[Char], changed: Array[Char], cost: Array[Int]): Long = {\n        val n = source.length\n        val m = original.length\n        val costMap = scala.collection.mutable.Map[(Char, Char), Int]().withDefaultValue(Int.MaxValue)\n\n        for (i <- 0 until m) {\n            val key = (original(i), changed(i))\n            costMap(key) = costMap(key).min(cost(i))\n        }\n\n        var totalCost: Long = 0\n        for (i <- 0 until n) {\n            if (source(i) != target(i)) {\n                val changeCost = costMap((source(i), target(i)))\n                if (changeCost == Int.MaxValue) return -1\n                totalCost += changeCost\n            }\n        }\n        totalCost\n    }\n}"
}