{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2656000,
    "question_id": "3235",
    "elapsed_time": 57,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707753444326,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1173301767",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_cost(source: String, target: String, original: Vec<char>, changed: Vec<char>, cost: Vec<i32>) -> i64 {\n        use std::collections::HashMap;\n\n        let mut cost_map: HashMap<(char, char), i32> = HashMap::new();\n        for i in 0..original.len() {\n            let o = original[i];\n            let c = changed[i];\n            let co = cost[i];\n            let entry = cost_map.entry((o, c)).or_insert(i32::MAX);\n            *entry = (*entry).min(co);\n        }\n\n        let mut total_cost: i64 = 0;\n        for (s, t) in source.chars().zip(target.chars()) {\n            if s == t {\n                continue;\n            }\n            match cost_map.get(&(s, t)) {\n                Some(&c) => total_cost += c as i64,\n                None => return -1,\n            }\n        }\n\n        total_cost\n    }\n}"
}