{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 215764000,
    "question_id": "3235",
    "elapsed_time": 3312,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707753228358,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1173298501",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} source\n# @param {String} target\n# @param {Character[]} original\n# @param {Character[]} changed\n# @param {Integer[]} cost\n# @return {Integer}\ndef minimum_cost(source, target, original, changed, cost)\n  # Mapping from original character to possible changes and their costs\n  change_costs = Hash.new { |h, k| h[k] = {} }\n  original.each_with_index do |o, i|\n    change_costs[o][changed[i]] = [] unless change_costs[o].key?(changed[i])\n    change_costs[o][changed[i]].push(cost[i])\n  end\n\n  # Reduce each change option to the least costly option\n  change_costs.each do |o, changes|\n    changes.each do |c, costs|\n      change_costs[o][c] = costs.min\n    end\n  end\n\n  total_cost = 0\n  (0...source.length).each do |i|\n    if source[i] == target[i]\n      next\n    elsif change_costs[source[i]].key?(target[i])\n      total_cost += change_costs[source[i]][target[i]]\n    else\n      return -1 # Impossible to make the change\n    end\n  end\n\n  total_cost\nend"
}