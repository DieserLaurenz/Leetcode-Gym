{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79636000,
    "question_id": "3235",
    "elapsed_time": 481,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707742812552,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1173163173",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinimumCost(string source, string target, char[] original, char[] changed, int[] cost) {\n        int n = source.Length;\n        long totalCost = 0;\n        var changeCost = new Dictionary<(char, char), int>();\n\n        // Populate change cost dictionary with minimum cost for each (original, changed) pair\n        for (int i = 0; i < original.Length; i++) {\n            var key = (original[i], changed[i]);\n            if (changeCost.ContainsKey(key)) {\n                changeCost[key] = Math.Min(changeCost[key], cost[i]);\n            } else {\n                changeCost.Add(key, cost[i]);\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (source[i] == target[i]) continue; // No change needed if characters are the same\n            \n            var key = (source[i], target[i]);\n            if (!changeCost.ContainsKey(key)) {\n                return -1; // Impossible to convert source to target for this character\n            }\n\n            totalCost += changeCost[key];\n        }\n\n        return totalCost;\n    }\n}"
}