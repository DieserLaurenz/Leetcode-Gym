{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 100168000,
    "question_id": "3235",
    "elapsed_time": 547,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707742887802,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1173163992",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinimumCost(string source, string target, char[] original, char[] changed, int[] cost) {\n        int n = source.Length;\n        var costMap = new Dictionary<string, int>();\n\n        // Initialize cost for direct conversion and indirect conversions\n        for (int i = 0; i < original.Length; i++) {\n            string key = original[i] + \"->\" + changed[i];\n            if (!costMap.ContainsKey(key)) {\n                costMap[key] = cost[i];\n            } else {\n                costMap[key] = Math.Min(costMap[key], cost[i]);\n            }\n        }\n\n        long totalCost = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (source[i] == target[i]) continue; // No change required\n\n            string directKey = source[i] + \"->\" + target[i];\n            if (costMap.ContainsKey(directKey)) {\n                totalCost += costMap[directKey];\n            } else {\n                // If direct conversion is not available, look for indirect conversions\n                bool found = false;\n                int minCost = int.MaxValue;\n                foreach (var k in costMap.Keys) {\n                    if (k.StartsWith(source[i].ToString()) && costMap.ContainsKey(k[0] + \"->\" + target[i])) {\n                        string secondKey = k[2] + \"->\" + target[i];\n                        if (costMap.ContainsKey(secondKey)) {\n                            minCost = Math.Min(minCost, costMap[k] + costMap[secondKey]);\n                            found = true;\n                        }\n                    }\n                }\n\n                if (!found) return -1; // Conversion is not possible\n                totalCost += minCost;\n            }\n        }\n\n        return totalCost;\n    }\n}"
}