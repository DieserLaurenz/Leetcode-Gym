{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 22716000,
    "question_id": "3235",
    "elapsed_time": 490,
    "compare_result": "00100000100000001010010000000000010000001000000000110001001101000000100000000000001000010000001000000100000000000100100100010000101000000000000001010000010110000010001010000001000000000010100010000000001000010010000010100000001000000010000000100000000000111000000000000000001000000000000000000010100000000001000000000010000000000010000000000000010010100001000000000000100100000000000000000000000000000000000000000000001000100000000000000000000000010000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111110000000000000",
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708808477097,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 88,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185167508",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, source, target, original, changed, cost):\n        from collections import defaultdict\n        import heapq\n\n        graph = defaultdict(list)\n        for i in range(len(original)):\n            graph[original[i]].append((cost[i], changed[i]))\n\n        for key in graph:\n            heapq.heapify(graph[key])\n\n        total_cost = 0\n        for s, t in zip(source, target):\n            if s == t:\n                continue\n            elif s not in graph or all(x[1] != t for x in graph[s]):\n                return -1\n            else:\n                found = False\n                while graph[s] and not found:\n                    c, ch = heapq.heappop(graph[s])\n                    if ch == t:\n                        total_cost += c\n                        found = True\n\n                if not found:\n                    return -1\n\n        return total_cost"
}