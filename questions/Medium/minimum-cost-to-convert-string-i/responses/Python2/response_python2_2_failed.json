{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21596000,
    "question_id": "3235",
    "elapsed_time": 888,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708808510389,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185167767",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, source, target, original, changed, cost):\n        \"\"\"\n        :type source: str\n        :type target: str\n        :type original: List[str]\n        :type changed: List[str]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(source)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        change_map = {}\n        for i in range(len(original)):\n            if original[i] != changed[i]:\n                change_map[(original[i], changed[i])] = min(cost[i], change_map.get((original[i], changed[i]), float('inf')))\n        \n        for i in range(1, n + 1):\n            if source[i-1] == target[i-1]:\n                dp[i] = dp[i-1]\n            else:\n                if (source[i-1], target[i-1]) in change_map:\n                    dp[i] = dp[i-1] + change_map[(source[i-1], target[i-1])]\n                    \n        if dp[n] == float('inf'):\n            return -1\n        return dp[n]"
}