{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 112484000,
    "question_id": "3235",
    "elapsed_time": 1667,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707743035140,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1173165614",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} source\n * @param {string} target\n * @param {character[]} original\n * @param {character[]} changed\n * @param {number[]} cost\n * @return {number}\n */\nvar minimumCost = function(source, target, original, changed, cost) {\n    const dp = new Array(source.length + 1).fill(0).map(() => new Array(26).fill(Infinity));\n    const costMap = new Map();\n\n    for (let i = 0; i < original.length; i++) {\n        const o = original[i].charCodeAt(0) - 'a'.charCodeAt(0);\n        const c = changed[i].charCodeAt(0) - 'a'.charCodeAt(0);\n        if (!costMap.has(o)) costMap.set(o, new Array(26).fill(Infinity));\n        costMap.get(o)[c] = Math.min(costMap.get(o)[c], cost[i]);\n    }\n\n    for (let i = 0; i < 26; i++) dp[0][i] = 0;\n\n    for (let i = 1; i <= source.length; i++) {\n        const sChar = source.charCodeAt(i - 1) - 'a'.charCodeAt(0);\n        const tChar = target.charCodeAt(i - 1) - 'a'.charCodeAt(0);\n\n        for (let j = 0; j < 26; j++) {\n            // Keep the character\n            dp[i][tChar] = Math.min(dp[i][tChar], dp[i - 1][j] + (sChar === tChar ? 0 : Infinity));\n\n            // Change the character if possible\n            if (costMap.has(sChar) && costMap.get(sChar)[tChar] !== Infinity) {\n                dp[i][tChar] = Math.min(dp[i][tChar], dp[i - 1][j] + costMap.get(sChar)[tChar]);\n            }\n        }\n    }\n\n    let minCost = Infinity;\n    for (let cost of dp[source.length]) minCost = Math.min(minCost, cost);\n\n    return minCost === Infinity ? -1 : minCost;\n};"
}