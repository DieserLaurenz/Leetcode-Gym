{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 156232000,
    "question_id": "3235",
    "elapsed_time": 610,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707752959396,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1173294659",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumCost(String source, String target, List<String> original, List<String> changed, List<int> cost) {\n    Map<String, List<int>> transitions = {};\n    for (int i = 0; i < original.length; i++) {\n      String key = \"${original[i]}->${changed[i]}\";\n      transitions.putIfAbsent(key, () => []).add(cost[i]);\n    }\n\n    transitions.forEach((key, values) {\n      values.sort(); // Ensure the lowest cost is first\n    });\n\n    int totalCost = 0;\n    for (int i = 0; i < source.length; i++) {\n      if (source[i] == target[i]) continue;\n      String key = \"${source[i]}->${target[i]}\";\n      if (!transitions.containsKey(key) || transitions[key]!.isEmpty) {\n        return -1; // Impossible to convert\n      }\n      totalCost += transitions[key]![0]; // Use the lowest cost\n    }\n\n    return totalCost;\n  }\n}"
}