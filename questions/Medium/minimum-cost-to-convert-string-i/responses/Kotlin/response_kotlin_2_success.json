{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "380 ms",
    "memory": 43108000,
    "question_id": "3235",
    "elapsed_time": 435,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707752828126,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 581,
    "total_testcases": 581,
    "runtime_percentile": 100,
    "status_memory": "43.1 MB",
    "memory_percentile": 97.3684,
    "pretty_lang": "Kotlin",
    "submission_id": "1173292765",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumCost(source: String, target: String, original: CharArray, changed: CharArray, cost: IntArray): Long {\n        val n = original.size\n        val dp = Array(26) { LongArray(26) { Long.MAX_VALUE } }\n        for (i in 0 until 26) dp[i][i] = 0\n        for (i in 0 until n) {\n            val o = original[i] - 'a'\n            val c = changed[i] - 'a'\n            dp[o][c] = minOf(dp[o][c], cost[i].toLong())\n        }\n        for (k in 0 until 26) {\n            for (i in 0 until 26) {\n                for (j in 0 until 26) {\n                    if (dp[i][k] < Long.MAX_VALUE && dp[k][j] < Long.MAX_VALUE) {\n                        dp[i][j] = minOf(dp[i][j], dp[i][k] + dp[k][j])\n                    }\n                }\n            }\n        }\n        var totalCost = 0L\n        for (i in source.indices) {\n            val s = source[i] - 'a'\n            val t = target[i] - 'a'\n            if (dp[s][t] == Long.MAX_VALUE) return -1\n            totalCost += dp[s][t]\n        }\n        return totalCost\n    }\n}"
}