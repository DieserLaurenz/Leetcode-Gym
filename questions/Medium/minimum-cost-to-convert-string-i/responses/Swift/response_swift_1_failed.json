{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19924000,
    "question_id": "3235",
    "elapsed_time": 532,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707752501419,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1173288219",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumCost(_ source: String, _ target: String, _ original: [Character], _ changed: [Character], _ cost: [Int]) -> Int {\n        var adj = [Character: [(Character, Int)]]() // adjacency list: char -> [(char, cost)]\n        for i in 0..<original.count {\n            let o = original[i], c = changed[i]\n            adj[o, default: []].append((c, cost[i]))\n        }\n\n        // For each original char, keep only the maximum cost change to a particular char\n        var maxCostChange = [Character: [Character: Int]]()\n        for (o, changes) in adj {\n            var best = [Character: Int]()\n            for (c, cost) in changes {\n                best[c, default: 0] = max(best[c, default: 0], cost)\n            }\n            maxCostChange[o] = best\n        }\n\n        let s = Array(source), t = Array(target)\n        var totalCost = 0\n        for i in 0..<s.count {\n            if s[i] == t[i] { continue }\n            guard let cost = maxCostChange[s[i]]?[t[i]] else { return -1 }\n            totalCost += cost\n        }\n        return totalCost\n    }\n}"
}