{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 46704000,
    "question_id": "3235",
    "elapsed_time": 5139,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707752551630,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1173288829",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumCost(_ source: String, _ target: String, _ original: [Character], _ changed: [Character], _ cost: [Int]) -> Int {\n        let n = source.count\n        var dp = Array(repeating: Array(repeating: Int.max / 2, count: n + 1), count: n + 1)\n        let s = Array(source), t = Array(target)\n        dp[0][0] = 0\n\n        for i in 0...n {\n            for j in 0...n {\n                if i < n { dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]) } // skip source[i]\n                if j < n { dp[i][j + 1] = min(dp[i][j + 1], dp[i][j]) } // skip target[j]\n                if i < n && j < n {\n                    let costIndex = original.firstIndex(of: s[i])\n                    if s[i] == t[j] || (costIndex != nil && changed[costIndex!] == t[j]) {\n                        let changeCost = (s[i] == t[j]) ? 0 : cost[costIndex!]\n                        dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + changeCost)\n                    }\n                }\n            }\n        }\n\n        return dp[n][n] < Int.max / 2 ? dp[n][n] : -1\n    }\n}"
}