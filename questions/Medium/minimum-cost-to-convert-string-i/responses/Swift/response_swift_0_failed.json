{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19652000,
    "question_id": "3235",
    "elapsed_time": 500,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707752463730,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1173287708",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumCost(_ source: String, _ target: String, _ original: [Character], _ changed: [Character], _ cost: [Int]) -> Int {\n        let n = source.count\n        var sourceArray = Array(source)\n        var targetArray = Array(target)\n        var costMap: [Character: [Character: Int]] = [:]\n\n        for i in 0..<original.count {\n            costMap[original[i], default: [:]][changed[i], default: 0] = max(costMap[original[i], default: [:]][changed[i], default: 0], cost[i])\n        }\n\n        var totalCost = 0\n        for i in 0..<n {\n            if sourceArray[i] == targetArray[i] {\n                continue\n            } else if let changes = costMap[sourceArray[i]], let changeCost = changes[targetArray[i]] {\n                totalCost += changeCost\n            } else {\n                return -1\n            }\n        }\n        return totalCost\n    }\n}"
}