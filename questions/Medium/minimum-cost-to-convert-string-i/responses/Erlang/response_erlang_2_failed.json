{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 134452000,
    "question_id": "3235",
    "elapsed_time": 3438,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707753764013,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1173306564",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_cost(Source :: unicode:unicode_binary(), Target :: unicode:unicode_binary(), Original :: [char()], Changed :: [char()], Cost :: [integer()]) -> integer().\nminimum_cost(Source, Target, Original, Changed, Cost) ->\n    Maps = lists:foldl(fun({O, C, Z}, Acc) ->\n                           Map = case maps:find({O, C}, Acc) of\n                                     {ok, ExistingZ} -> Acc#{ {O, C} => ExistingZ ++ [Z] };\n                                     error -> Acc#{ {O, C} => [Z] }\n                                 end,\n                           Map\n                       end, #{}, lists:zip3(Original, Changed, Cost)),\n    SourceList = binary_to_list(Source),\n    TargetList = binary_to_list(Target),\n    try\n        lists:foldl(fun({S, T}, Acc) when S == T -> Acc;\n                       ({S, T}, Acc) ->\n                           case maps:find({S, T}, Maps) of\n                               {ok, Costs} -> Acc + lists:min(Costs);\n                               error -> throw({error, impossible})\n                           end\n                    end, 0, lists:zip(SourceList, TargetList))\n    catch\n        throw:{error, impossible} -> -1\n    end."
}