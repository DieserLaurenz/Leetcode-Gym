{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 15: exception error: {case_clause,{ok,5}}",
    "full_runtime_error": "Line 15: exception error: {case_clause,{ok,5}}\n[{solution,'-minimum_cost/5-fun-1-',4,[{file,\"solution.erl\"},{line,15}]},\n {lists,foldl_1,3,[{file,\"lists.erl\"},{line,1599}]},\n {solution,minimum_cost,5,[{file,\"solution.erl\"},{line,13}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,46}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,26}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,63}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 69700000,
    "question_id": "3235",
    "elapsed_time": 1355,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707753717073,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1173305843",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec minimum_cost(Source :: unicode:unicode_binary(), Target :: unicode:unicode_binary(), Original :: [char()], Changed :: [char()], Cost :: [integer()]) -> integer().\nminimum_cost(Source, Target, Original, Changed, Cost) ->\n    Maps = lists:foldl(fun({O, C, Z}, Acc) ->\n                           Map = case maps:find({O, C}, Acc) of\n                                     {ok, ExistingZ} -> Acc#{ {O, C} => min(ExistingZ, Z) };\n                                     error -> Acc#{ {O, C} => Z }\n                                 end,\n                           Map\n                       end, #{}, lists:zip3(Original, Changed, Cost)),\n    SourceList = binary_to_list(Source),\n    TargetList = binary_to_list(Target),\n    try\n        lists:foldl(fun({S, T}, Acc) when S == T -> Acc;\n                       ({S, T}, Acc) ->\n                           case maps:find({S, T}, Maps) of\n                               {ok, Cost} -> Acc + Cost;\n                               error -> throw({error, impossible})\n                           end\n                    end, 0, lists:zip(SourceList, TargetList))\n    catch\n        throw:{error, impossible} -> -1\n    end."
}