{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 9: ** (FunctionClauseError) no function clause matching in Enum.min_sort_fun/1",
    "full_runtime_error": "Line 9: ** (FunctionClauseError) no function clause matching in Enum.min_sort_fun/1\n    The following arguments were given to Enum.min_sort_fun/1:\n        # 1\n        [-1]\n    Attempted function clauses (showing 2 out of 2):\n        defp min_sort_fun(+sorter+) when -is_function(sorter, 2)-\n        defp min_sort_fun(+module+) when -is_atom(module)-\n    (elixir 1.15.7) lib/enum.ex:2078: Enum.min_sort_fun/1\n    (elixir 1.15.7) lib/enum.ex:2075: Enum.min/3\n    solution.ex:9: anonymous fn/3 in Solution.minimum_cost/5\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:48: Driver.consume_test_cases/2\n    solution.ex:28: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 78920000,
    "question_id": "3235",
    "elapsed_time": 420,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707753905046,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173308734",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_cost(source :: String.t, target :: String.t, original :: [char], changed :: [char], cost :: [integer]) :: integer\n  def minimum_cost(source, target, original, changed, cost) do\n    changes = Enum.zip(original, Enum.zip(changed, cost))\n    |> Enum.group_by(fn {orig, _} -> orig end, fn {_, {chg, c}} -> {chg, c} end)\n\n    Enum.zip(String.to_charlist(source), String.to_charlist(target))\n    |> Enum.reduce(0, fn {s, t}, acc ->\n      if s == t, do: acc, else: acc + min_cost(s, t, changes)\n    end)\n  end\n\n  defp min_cost(_source, _target, _changes) when is_nil(_changes), do: -1\n  defp min_cost(source, target, changes) do\n    case changes[source] do\n      nil -> -1\n      list ->\n        list\n        |> Enum.filter(fn {chg, _} -> chg == target end)\n        |> Enum.map(fn {_, cost} -> cost end)\n        |> Enum.min([-1])\n    end\n  end\nend"
}