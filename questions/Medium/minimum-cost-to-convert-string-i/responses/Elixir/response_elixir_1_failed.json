{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 108340000,
    "question_id": "3235",
    "elapsed_time": 6041,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707753876072,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173308220",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_cost(source :: String.t, target :: String.t, original :: [char], changed :: [char], cost :: [integer]) :: integer\n  def minimum_cost(source, target, original, changed, cost) do\n    map_changes = Enum.zip(original, changed) |> Enum.zip(cost) |> Enum.group_by(fn {{o, _}, _} -> o end, fn {{_, c}, c_cost} -> {c, c_cost} end)\n    \n    source\n    |> String.to_charlist()\n    |> Enum.with_index()\n    |> Enum.reduce_while(0, fn {s_char, idx}, acc ->\n      t_char = String.at(target, idx) |> String.to_charlist() |> hd()\n      \n      if s_char == t_char do\n        {:cont, acc}\n      else\n        case map_changes[s_char] do\n          nil ->\n            {:halt, -1}\n          \n          changes ->\n            case Enum.find(changes, fn {c, _} -> c == t_char end) do\n              nil -> {:halt, -1}\n              {_, c_cost} -> {:cont, acc + c_cost}\n            end\n        end\n      end\n    end)\n  end\nend"
}