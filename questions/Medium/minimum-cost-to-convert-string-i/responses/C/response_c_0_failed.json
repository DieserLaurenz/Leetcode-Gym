{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11292000,
    "question_id": "3235",
    "elapsed_time": 70,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707742719512,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1173162129",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long minimumCost(char* source, char* target, char* original, int originalSize, char* changed, int changedSize, int* cost, int costSize) {\n    int minCost[26][26]; // Store minimum cost from one character to another\n    for (int i = 0; i < 26; i++) {\n        for (int j = 0; j < 26; j++) {\n            minCost[i][j] = i == j ? 0 : 1000001; // Initialize with a large number (or infinity equivalent)\n        }\n    }\n    // Update minCost matrix with given transformations\n    for (int i = 0; i < originalSize; i++) {\n        int from = original[i] - 'a';\n        int to = changed[i] - 'a';\n        if (cost[i] < minCost[from][to]) {\n            minCost[from][to] = cost[i];\n        }\n    }\n    // Calculate minimum cost to convert source to target\n    long long totalCost = 0;\n    for (int i = 0; source[i] && target[i]; i++) {\n        if (source[i] == target[i]) continue; // No cost if characters are already equal\n        int from = source[i] - 'a';\n        int to = target[i] - 'a';\n        if (minCost[from][to] == 1000001) { // No way to convert this character\n            return -1;\n        }\n        totalCost += minCost[from][to];\n    }\n    return totalCost;\n}"
}