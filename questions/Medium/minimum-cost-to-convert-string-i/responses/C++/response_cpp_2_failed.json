{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 95560000,
    "question_id": "3235",
    "elapsed_time": 227,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1707742590805,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 581,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173160683",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {\n        // Key: character pair (original, changed), Value: minimum cost to change\n        unordered_map<int, int> costMap;\n        const int n = original.size();\n        for (int i = 0; i < n; ++i) {\n            int key = original[i] * 256 + changed[i]; // Create a unique key for each character pair\n            if (costMap.find(key) == costMap.end() || costMap[key] > cost[i]) {\n                costMap[key] = cost[i];\n            }\n        }\n\n        long long totalCost = 0;\n        for (int i = 0; i < source.size(); ++i) {\n            if (source[i] == target[i]) continue; // No operation needed if characters are the same\n            \n            int key = source[i] * 256 + target[i];\n            if (costMap.find(key) != costMap.end()) {\n                totalCost += costMap[key];\n            } else {\n                // If direct conversion is not possible or not the cheapest option\n                return -1; // Conversion impossible with the given mappings\n            }\n        }\n\n        return totalCost;\n    }\n};"
}