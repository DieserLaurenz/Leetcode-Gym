{
    "acRate": 38.233490821221196,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2976",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Cost to Convert String I",
    "titleSlug": "minimum-cost-to-convert-string-i",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Graph",
            "id": "VG9waWNUYWdOb2RlOjI0",
            "slug": "graph"
        },
        {
            "name": "Shortest Path",
            "id": "VG9waWNUYWdOb2RlOjYxMDc2",
            "slug": "shortest-path"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "code": "class Solution { public:     long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {              } };"
        },
        {
            "code": "class Solution {     public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {              } }"
        },
        {
            "code": "class Solution(object):     def minimumCost(self, source, target, original, changed, cost):         \"\"\"         :type source: str         :type target: str         :type original: List[str]         :type changed: List[str]         :type cost: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "code": "class Solution:     def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:         "
        },
        {
            "code": "long long minimumCost(char* source, char* target, char* original, int originalSize, char* changed, int changedSize, int* cost, int costSize) {      }"
        },
        {
            "code": "public class Solution {     public long MinimumCost(string source, string target, char[] original, char[] changed, int[] cost) {              } }"
        },
        {
            "code": "/**  * @param {string} source  * @param {string} target  * @param {character[]} original  * @param {character[]} changed  * @param {number[]} cost  * @return {number}  */ var minimumCost = function(source, target, original, changed, cost) {      };"
        },
        {
            "code": "function minimumCost(source: string, target: string, original: string[], changed: string[], cost: number[]): number {      };"
        },
        {
            "code": "class Solution {      /**      * @param String $source      * @param String $target      * @param String[] $original      * @param String[] $changed      * @param Integer[] $cost      * @return Integer      */     function minimumCost($source, $target, $original, $changed, $cost) {              } }"
        },
        {
            "code": "class Solution {     func minimumCost(_ source: String, _ target: String, _ original: [Character], _ changed: [Character], _ cost: [Int]) -> Int {              } }"
        },
        {
            "code": "class Solution {     fun minimumCost(source: String, target: String, original: CharArray, changed: CharArray, cost: IntArray): Long {              } }"
        },
        {
            "code": "class Solution {   int minimumCost(String source, String target, List<String> original, List<String> changed, List<int> cost) {        } }"
        },
        {
            "code": "func minimumCost(source string, target string, original []byte, changed []byte, cost []int) int64 {      }"
        },
        {
            "code": "# @param {String} source # @param {String} target # @param {Character[]} original # @param {Character[]} changed # @param {Integer[]} cost # @return {Integer} def minimum_cost(source, target, original, changed, cost)      end"
        },
        {
            "code": "object Solution {     def minimumCost(source: String, target: String, original: Array[Char], changed: Array[Char], cost: Array[Int]): Long = {              } }"
        },
        {
            "code": "impl Solution {     pub fn minimum_cost(source: String, target: String, original: Vec<char>, changed: Vec<char>, cost: Vec<i32>) -> i64 {              } }"
        },
        {
            "code": "(define/contract (minimum-cost source target original changed cost)   (-> string? string? (listof char?) (listof char?) (listof exact-integer?) exact-integer?)   )"
        },
        {
            "code": "-spec minimum_cost(Source :: unicode:unicode_binary(), Target :: unicode:unicode_binary(), Original :: [char()], Changed :: [char()], Cost :: [integer()]) -> integer(). minimum_cost(Source, Target, Original, Changed, Cost) ->   ."
        },
        {
            "code": "defmodule Solution do   @spec minimum_cost(source :: String.t, target :: String.t, original :: [char], changed :: [char], cost :: [integer]) :: integer   def minimum_cost(source, target, original, changed, cost) do        end end"
        }
    ],
    "content": "You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English letters. You are also given two 0-indexed character arrays original and changed, and an integer array cost, where cost[i] represents the cost of changing the character original[i] to the character changed[i]. You start with the string source. In one operation, you can pick a character x from the string and change it to the character y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y. Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1. Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].  Example 1:  Input: source = \"abcd\", target = \"acbe\", original = [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], changed = [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], cost = [2,5,5,1,2,20] Output: 28 Explanation: To convert the string \"abcd\" to string \"acbe\": - Change value at index 1 from 'b' to 'c' at a cost of 5. - Change value at index 2 from 'c' to 'e' at a cost of 1. - Change value at index 2 from 'e' to 'b' at a cost of 2. - Change value at index 3 from 'd' to 'e' at a cost of 20. The total cost incurred is 5 + 1 + 2 + 20 = 28. It can be shown that this is the minimum possible cost.  Example 2:  Input: source = \"aaaa\", target = \"bbbb\", original = [\"a\",\"c\"], changed = [\"c\",\"b\"], cost = [1,2] Output: 12 Explanation: To change the character 'a' to 'b' change the character 'a' to 'c' at a cost of 1, followed by changing the character 'c' to 'b' at a cost of 2, for a total cost of 1 + 2 = 3. To change all occurrences of 'a' to 'b', a total cost of 3 * 4 = 12 is incurred.  Example 3:  Input: source = \"abcd\", target = \"abce\", original = [\"a\"], changed = [\"e\"], cost = [10000] Output: -1 Explanation: It is impossible to convert source to target because the value at index 3 cannot be changed from 'd' to 'e'.   Constraints:  1 <= source.length == target.length <= 105 source, target consist of lowercase English letters. 1 <= cost.length == original.length == changed.length <= 2000 original[i], changed[i] are lowercase English letters. 1 <= cost[i] <= 106 original[i] != changed[i]  "
}