{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 266816000,
    "question_id": "3219",
    "elapsed_time": 5026,
    "compare_result": "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[1,5,3,9,8]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707556798906,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1171281400",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec lexicographically_smallest_array(Nums :: [integer()], Limit :: integer()) -> [integer()].\nlexicographically_smallest_array(Nums, Limit) ->\n    lists:usort([ {X, Y} || X <- Nums, Y <- Nums, abs(X - Y) =< Limit ]),\n    Sorted = lists:sort(Nums),\n    sort_with_limit(Sorted, Nums, Limit).\n\nsort_with_limit(Sorted, Original, Limit) ->\n    sort_with_limit(Sorted, Original, Limit, []).\n\nsort_with_limit([], _, _, Acc) ->\n    lists:reverse(Acc);\nsort_with_limit([H|T], Original, Limit, Acc) ->\n    {Found, Rest} = find_and_remove(H, Original, Limit, []),\n    sort_with_limit(T, Rest, Limit, [Found|Acc]).\n\nfind_and_remove(_, [], _, Acc) ->\n    {none, lists:reverse(Acc)};\nfind_and_remove(Element, [H|T], Limit, Acc) ->\n    if\n        abs(Element - H) =< Limit ->\n            {H, lists:reverse(Acc) ++ T};\n        true ->\n            find_and_remove(Element, T, Limit, [H|Acc])\n    end."
}