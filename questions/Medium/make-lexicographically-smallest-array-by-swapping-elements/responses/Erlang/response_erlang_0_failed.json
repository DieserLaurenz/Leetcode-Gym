{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 12: exception error: function_clause",
    "full_runtime_error": "Line 12: exception error: function_clause\n[{solution,pick_next,[[2,1],[],3],[{file,\"solution.erl\"},{line,12}]},\n {solution,create_smallest_array,4,[{file,\"solution.erl\"},{line,9}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,34}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,20}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,51}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65900000,
    "question_id": "3219",
    "elapsed_time": 1417,
    "compare_result": "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,7,6,18,2,1]\n3",
    "expected_output": "[1,6,7,18,1,2]",
    "task_finish_time": 1707556739625,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1171280877",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec lexicographically_smallest_array(Nums :: [integer()], Limit :: integer()) -> [integer()].\nlexicographically_smallest_array(Nums, Limit) ->\n    Sorted = lists:sort(Nums),\n    create_smallest_array(Nums, Sorted, Limit, []).\n\ncreate_smallest_array([], _, _, Acc) ->\n    lists:reverse(Acc);\ncreate_smallest_array([H|T], Sorted, Limit, Acc) ->\n    {Next, Rest} = pick_next([H|T], Sorted, Limit),\n    create_smallest_array(T, Rest, Limit, [Next|Acc]).\n\npick_next(Nums, [H|T], Limit) ->\n    case lists:any(fun(X) -> abs(X - H) =< Limit end, Nums) of\n        true -> {H, T};\n        false -> pick_next(Nums, T, Limit)\n    end."
}