{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21724000,
    "question_id": "3219",
    "elapsed_time": 5399,
    "compare_result
    "code_output": "[1,1,2,6,7,18]",
    "std_output": "",
    "last_testcase": "[1,7,6,18,2,1]\n3",
    "expected_output": "[1,6,7,18,1,2]",
    "task_finish_time": 1707546490742,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 195,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171181504",
    "input_formatted": "[1,7,6,18,2,1], 3",
    "input": "[1,7,6,18,2,1]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $limit\n     * @return Integer[]\n     */\n    function lexicographicallySmallestArray($nums, $limit) {\n        $n = count($nums);\n        for ($i = 0; $i < $n; ++$i) {\n            for ($j = $i + 1; $j < $n; ++$j) {\n                if (abs($nums[$i] - $nums[$j]) <= $limit) {\n                    for ($k = $j; $k > $i; $k--) {\n                        if ($nums[$k] < $nums[$k - 1]) {\n                            $temp = $nums[$k];\n                            $nums[$k] = $nums[$k - 1];\n                            $nums[$k - 1] = $temp;\n                        }\n                    }\n                }\n            }\n        }\n        return $nums;\n    }\n}"
}