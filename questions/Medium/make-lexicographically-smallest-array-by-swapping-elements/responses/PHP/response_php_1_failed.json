{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65092000,
    "question_id": "3219",
    "elapsed_time": 985,
    "compare_result
    "code_output": "[3,5,3,9,8]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707546465029,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 233,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171181273",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $limit\n     * @return Integer[]\n     */\n    function lexicographicallySmallestArray($nums, $limit) {\n        $n = count($nums);\n        $sorted = $nums;\n        sort($sorted);\n        $indexMap = [];\n        foreach ($sorted as $i => $value) {\n            $indexMap[$value][] = $i;\n        }\n        $used = array_fill(0, $n, false);\n        for ($i = 0; $i < $n; ++$i) {\n            if (!empty($indexMap[$nums[$i]])) {\n                foreach ($indexMap[$nums[$i]] as $j => $sortedIndex) {\n                    if (!$used[$sortedIndex]) {\n                        $indexMap[$nums[$i]][$j] = -1; // Mark as used in map\n                        $used[$sortedIndex] = true;\n                        break;\n                    }\n                }\n            }\n            foreach ($sorted as $sortedValue) {\n                if (abs($nums[$i] - $sortedValue) <= $limit) {\n                    $sortedIndices = $indexMap[$sortedValue];\n                    foreach ($sortedIndices as $sortedIndex) {\n                        if ($sortedIndex >= 0 && !$used[$sortedIndex]) {\n                            $nums[$i] = $sortedValue;\n                            $used[$sortedIndex] = true;\n                            $indexMap[$sortedValue][array_search($sortedIndex, $sortedIndices)] = -1; // Mark as used in map\n                            break 2;\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n        return $nums;\n    }\n}"
}