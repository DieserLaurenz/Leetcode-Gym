{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44608000,
    "question_id": "3219",
    "elapsed_time": 4011,
    "compare_result": "1001000000000000000000000000000000000000000000000000000000000100000001000000000000101000000000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[1,1,2,6,7,18]",
    "std_output": "",
    "last_testcase": "[1,7,6,18,2,1]\n3",
    "expected_output": "[1,6,7,18,1,2]",
    "task_finish_time": 1707545894623,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 8,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171175169",
    "input_formatted": "[1,7,6,18,2,1], 3",
    "input": "[1,7,6,18,2,1]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int[] lexicographicallySmallestArray(int[] nums, int limit) {\n        boolean swapped = true;\n        while (swapped) {\n            swapped = false;\n            for (int i = 0; i < nums.length - 1; i++) {\n                int minIndex = i;\n                for (int j = i + 1; j < nums.length && (nums[j] - nums[i]) <= limit; j++) {\n                    if (nums[j] < nums[minIndex]) {\n                        minIndex = j;\n                    }\n                }\n                if (minIndex != i && nums[minIndex] < nums[i]) {\n                    // Swap\n                    int temp = nums[i];\n                    nums[i] = nums[minIndex];\n                    nums[minIndex] = temp;\n                    swapped = true;\n                    break; // Restart after each swap to maintain order\n                }\n            }\n        }\n        return nums;\n    }\n}"
}