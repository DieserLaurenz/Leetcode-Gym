{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6660000,
    "question_id": "3219",
    "elapsed_time": 3013,
    "compare_result": "1111000101000010100111010100101011100000011010010010010001111100000101011011010110101000001111011000000101010001100000101100000101000000011000010100001011000111101010110010000110000000000001001011001000000110101111011100101010000011010010100111100001100110010001110001111101101010010000010001100001111111100101111110101101000100111000100001110001110011100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000",
    "code_output": "[1,34,56,84,60,62,38,76,49,39]",
    "std_output": "",
    "last_testcase": "[1,60,34,84,62,56,39,76,49,38]\n4",
    "expected_output": "[1,56,34,84,60,62,38,76,49,39]",
    "task_finish_time": 1707546007027,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 304,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171176405",
    "input_formatted": "[1,60,34,84,62,56,39,76,49,38], 4",
    "input": "[1,60,34,84,62,56,39,76,49,38]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* lexicographicallySmallestArray(int* nums, int numsSize, int limit, int* returnSize) {\n    *returnSize = numsSize;\n    int* result = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        result[i] = nums[i];\n    }\n\n    int swapped;\n    do {\n        swapped = 0;\n        for (int i = 0; i < numsSize - 1; i++) {\n            for (int j = i + 1; j < numsSize; j++) {\n                if (abs(result[i] - result[j]) <= limit && result[i] > result[j]) {\n                    // Find the first position to the right where swap is beneficial\n                    int minIdx = i;\n                    for (int k = i + 1; k <= j; k++) {\n                        if (result[k] < result[minIdx]) {\n                            minIdx = k;\n                        }\n                    }\n                    // Swap if we found a beneficial position\n                    if (minIdx != i) {\n                        int temp = result[i];\n                        result[i] = result[minIdx];\n                        result[minIdx] = temp;\n                        swapped = 1;\n                    }\n                    break; // Break to ensure we only swap for the smallest benefit per iteration\n                }\n            }\n        }\n    } while (swapped);\n\n    return result;\n}"
}