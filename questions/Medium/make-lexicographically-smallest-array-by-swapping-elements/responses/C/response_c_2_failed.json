{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13076000,
    "question_id": "3219",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "[1,3,3,8,8]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707546048746,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 238,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171176893",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* lexicographicallySmallestArray(int* nums, int numsSize, int limit, int* returnSize) {\n    *returnSize = numsSize;\n    int* sorted = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        sorted[i] = nums[i];\n    }\n    qsort(sorted, numsSize, sizeof(int), compare);\n\n    int* result = (int*)malloc(sizeof(int) * numsSize);\n    int* indexMap = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        indexMap[i] = -1;\n    }\n\n    for (int i = 0; i < numsSize; i++) {\n        for (int j = 0; j < numsSize; j++) {\n            if (sorted[i] == nums[j] && indexMap[j] == -1) {\n                indexMap[j] = i;\n                break;\n            }\n        }\n    }\n\n    for (int i = 0; i < numsSize; i++) {\n        result[i] = -1;\n    }\n\n    for (int i = 0; i < numsSize; i++) {\n        if (result[i] == -1) {\n            int minIndex = indexMap[i];\n            for (int j = i; j < numsSize && (sorted[minIndex] - nums[j]) <= limit; j++) {\n                if (indexMap[j] < minIndex && result[j] == -1) {\n                    minIndex = indexMap[j];\n                }\n            }\n            for (int j = 0; j < numsSize; j++) {\n                if (indexMap[j] == minIndex) {\n                    result[i] = nums[j];\n                    nums[j] = sorted[minIndex];\n                    break;\n                }\n            }\n        }\n    }\n\n    free(sorted);\n    free(indexMap);\n\n    return result;\n}"
}