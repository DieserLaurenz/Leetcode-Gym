{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12216000,
    "question_id": "3219",
    "elapsed_time": 3014,
    "compare_result
    "code_output": "[1,2,1,6,7,18]",
    "std_output": "",
    "last_testcase": "[1,7,6,18,2,1]\n3",
    "expected_output": "[1,6,7,18,1,2]",
    "task_finish_time": 1707545974697,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 188,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171176051",
    "input_formatted": "[1,7,6,18,2,1], 3",
    "input": "[1,7,6,18,2,1]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* lexicographicallySmallestArray(int* nums, int numsSize, int limit, int* returnSize) {\n    *returnSize = numsSize;\n    int* result = (int*)malloc(numsSize * sizeof(int));\n    for (int i = 0; i < numsSize; ++i) {\n        result[i] = nums[i];\n    }\n\n    for (int i = 0; i < numsSize - 1; ++i) {\n        for (int j = i + 1; j < numsSize; ++j) {\n            if (abs(result[i] - result[j]) <= limit) {\n                for (int k = i; k < j; ++k) {\n                    if (result[k] > result[k + 1]) {\n                        int temp = result[k];\n                        result[k] = result[k + 1];\n                        result[k + 1] = temp;\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}"
}