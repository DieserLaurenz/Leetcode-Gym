{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 12: ** (Protocol.UndefinedError) protocol Enumerable not implemented for {1, 1} of type Tuple",
    "full_runtime_error": "Line 12: ** (Protocol.UndefinedError) protocol Enumerable not implemented for {1, 1} of type Tuple\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3\n    (elixir 1.15.7) lib/enum.ex:4387: Enum.sort/2\n    solution.ex:12: anonymous fn/3 in Solution.lexicographically_smallest_array/2\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:37: Driver.consume_test_cases/2\n    solution.ex:23: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75552000,
    "question_id": "3219",
    "elapsed_time": 743,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707556895728,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171282328",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec lexicographically_smallest_array(nums :: [integer], limit :: integer) :: [integer]\n  def lexicographically_smallest_array(nums, limit) do\n    nums\n    |> Enum.with_index()\n    |> Enum.sort_by(fn {num, _index} -> num end)\n    |> Enum.map(fn {_num, index} -> index end)\n    |> Enum.reduce(nums, fn index, acc ->\n      smallest = Enum.min_by(acc, fn x -> x end)\n      if abs(Enum.at(acc, index) - smallest) <= limit do\n        {Enum.at(acc, index), smallest}\n        |> Enum.sort()\n        |> (fn [a, b] -> List.replace_at(List.replace_at(acc, index, b), Enum.find_index(acc, fn x -> x == smallest end), a) end).()\n      else\n        acc\n      end\n    end)\n  end\nend"
}