{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212364000,
    "question_id": "3219",
    "elapsed_time": 3199,
    "compare_result
    "code_output": "[1,5,3,9,8]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707547027791,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171187422",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} limit\n# @return {Integer[]}\ndef lexicographically_smallest_array(nums, limit)\n    n = nums.size\n    sorted = nums.sort\n    pos = Hash.new { |h, k| h[k] = [] }\n    nums.each_with_index { |num, i| pos[num] << i }\n    bit = Array.new(n + 1, 0)\n\n    update = lambda do |i, val|\n        i += 1\n        while i <= n\n            bit[i] += val\n            i += i & -i\n        end\n    end\n\n    sum = lambda do |i|\n        res = 0\n        i += 1\n        while i > 0\n            res += bit[i]\n            i -= i & -i\n        end\n        res\n    end\n\n    for i in 0...n\n        min_pos = n\n        sorted.each do |num|\n            break if num - nums[i] > limit\n            next if pos[num].empty?\n            min_pos = [min_pos, pos[num].first].min\n            break if num >= nums[i]\n        end\n        if min_pos < n\n            nums[i], nums[min_pos] = nums[min_pos], nums[i]\n            update.call(pos[nums[min_pos]].shift, 1)\n            pos[nums[i]].sort!\n        end\n        break if min_pos == n\n    end\n    nums\nend"
}