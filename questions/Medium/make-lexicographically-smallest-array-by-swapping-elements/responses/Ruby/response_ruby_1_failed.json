{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212404000,
    "question_id": "3219",
    "elapsed_time": 3117,
    "compare_result
    "code_output": "[1,3,5,9,8]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707547050699,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 305,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171187670",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} limit\n# @return {Integer[]}\ndef lexicographically_smallest_array(nums, limit)\n  n = nums.length\n  (0...n).each do |i|\n    # Find the position to swap with\n    pos_to_swap = i\n    (i+1...n).each do |j|\n      if nums[j] < nums[pos_to_swap] && (nums[j] - nums[i]).abs <= limit\n        pos_to_swap = j\n      end\n    end\n    # Swap if a better candidate is found\n    if pos_to_swap != i\n      nums[i], nums[pos_to_swap] = nums[pos_to_swap], nums[i]\n      break # Only one swap needed to get the lexicographically smallest arrangement\n    end\n  end\n  nums\nend"
}