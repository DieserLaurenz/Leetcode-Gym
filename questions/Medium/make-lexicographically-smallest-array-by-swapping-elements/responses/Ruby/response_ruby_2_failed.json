{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 232296000,
    "question_id": "3219",
    "elapsed_time": 1586,
    "compare_result": "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100001",
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707547081594,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171188032",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} limit\n# @return {Integer[]}\ndef lexicographically_smallest_array(nums, limit)\n  return nums.sort if limit >= nums.max - nums.min\n\n  n = nums.length\n  sorted = Array.new(n) { |i| [nums[i], i] }.sort\n  bit = Array.new(n + 1, 0)\n\n  # Updates BIT for the operation of adding 1 to index i\n  update = lambda do |i|\n    i += 1\n    while i <= n\n      bit[i] += 1\n      i += i & -i\n    end\n  end\n\n  # Gets sum of the first i elements in BIT\n  get_sum = lambda do |i|\n    sum = 0\n    while i > 0\n      sum += bit[i]\n      i -= i & -i\n    end\n    sum\n  end\n\n  # Checks if it's possible to swap the current number with any before it\n  can_swap = lambda do |index, num|\n    l, r = 0, index - 1\n    while l <= r\n      mid = (l + r) / 2\n      if sorted[mid][0] <= num + limit\n        return true if get_sum.call(sorted[mid][1] + 1) < sorted[mid][1] + 1 - index\n        l = mid + 1\n      else\n        r = mid - 1\n      end\n    end\n    false\n  end\n\n  result = []\n  sorted.each do |num, original_index|\n    if can_swap.call(result.length, num)\n      result << num\n      update.call(original_index)\n    end\n  end\n\n  result\nend"
}