{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19048000,
    "question_id": "3219",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "[3,1,5,8,9]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1708787022427,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 244,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184895793",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nimport heapq\n\nclass Solution:\n    def lexicographicallySmallestArray(self, nums: List[int], limit: int) -> List[int]:\n        n = len(nums)\n        result = nums[:]\n        for i in range(n):\n            min_heap = []\n            for j in range(i, n):\n                if abs(nums[i] - nums[j]) <= limit:\n                    heapq.heappush(min_heap, (nums[j], j))\n            while min_heap:\n                _, idx = heapq.heappop(min_heap)\n                if idx > i:\n                    result[i], result[idx] = result[idx], result[i]\n                    break\n        return result"
}