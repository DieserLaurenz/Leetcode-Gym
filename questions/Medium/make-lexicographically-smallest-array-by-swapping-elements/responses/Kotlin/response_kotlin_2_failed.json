{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 96116000,
    "question_id": "3219",
    "elapsed_time": 2229,
    "compare_result
    "code_output": "[1,5,3,9,8]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707546735481,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 247,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1171184199",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun lexicographicallySmallestArray(nums: IntArray, limit: Int): IntArray {\n        val sortedNums = nums.sorted()\n        val indexMap = mutableMapOf<Int, MutableList<Int>>()\n        nums.forEachIndexed { index, value ->\n            indexMap.getOrPut(value) { mutableListOf() }.add(index)\n        }\n        val visited = BooleanArray(nums.size)\n        for (i in nums.indices) {\n            if (!visited[i]) {\n                val group = mutableListOf<Int>()\n                val queue = ArrayDeque<Int>()\n                queue.add(i)\n                while (queue.isNotEmpty()) {\n                    val current = queue.removeFirst()\n                    if (visited[current]) continue\n                    visited[current] = true\n                    group.add(current)\n                    indexMap[nums[current]]?.forEach { neighbor ->\n                        if (!visited[neighbor] && Math.abs(current - neighbor) <= limit) {\n                            queue.add(neighbor)\n                        }\n                    }\n                }\n                val sortedGroupValues = group.map { nums[it] }.sorted()\n                group.sorted().forEachIndexed { index, valueIndex ->\n                    nums[valueIndex] = sortedGroupValues[index]\n                }\n            }\n        }\n        return nums\n    }\n}"
}