{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65804000,
    "question_id": "3219",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "[1,56,34,84,62,60,38,76,49,39]",
    "std_output": "",
    "last_testcase": "[1,60,34,84,62,56,39,76,49,38]\n4",
    "expected_output": "[1,56,34,84,60,62,38,76,49,39]",
    "task_finish_time": 1707546165410,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 372,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1171178100",
    "input_formatted": "[1,60,34,84,62,56,39,76,49,38], 4",
    "input": "[1,60,34,84,62,56,39,76,49,38]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] LexicographicallySmallestArray(int[] nums, int limit) {\n        bool[] visited = new bool[nums.Length];\n        for (int i = 0; i < nums.Length; i++) {\n            if (visited[i]) continue;\n            int minVal = nums[i], minIndex = i;\n            for (int j = i + 1; j < nums.Length; j++) {\n                if (!visited[j] && Math.Abs(nums[i] - nums[j]) <= limit && nums[j] < minVal) {\n                    minVal = nums[j];\n                    minIndex = j;\n                }\n            }\n            if (minIndex != i) {\n                // Swap the elements\n                nums[minIndex] = nums[i];\n                nums[i] = minVal;\n                visited[minIndex] = true; // Mark the swapped element as visited to avoid cyclic swaps\n            }\n        }\n        return nums;\n    }\n}"
}