{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12076000,
    "question_id": "3219",
    "elapsed_time": 2018,
    "compare_result
    "code_output": "[1,7,6,18,2,1]",
    "std_output": "",
    "last_testcase": "[1,7,6,18,2,1]\n3",
    "expected_output": "[1,6,7,18,1,2]",
    "task_finish_time": 1707556468394,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 236,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1171278309",
    "input_formatted": "[1,7,6,18,2,1], 3",
    "input": "[1,7,6,18,2,1]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn lexicographically_smallest_array(mut nums: Vec<i32>, limit: i32) -> Vec<i32> {\n        let n = nums.len();\n        let mut sorted = nums.clone();\n        sorted.sort_unstable();\n        let mut index_map = std::collections::HashMap::new();\n        for i in 0..n {\n            index_map.entry(nums[i]).or_insert_with(Vec::new).push(i);\n        }\n\n        'outer: for i in 0..n {\n            if nums[i] == sorted[i] {\n                continue;\n            }\n            for j in i + 1..n {\n                if (nums[j] - nums[i]).abs() <= limit && nums[j] == sorted[i] {\n                    for &k in index_map.get(&sorted[i]).unwrap() {\n                        if k >= i && (nums[i] - nums[k]).abs() <= limit {\n                            nums.swap(i, k);\n                            continue 'outer;\n                        }\n                    }\n                }\n            }\n        }\n\n        nums\n    }\n}"
}