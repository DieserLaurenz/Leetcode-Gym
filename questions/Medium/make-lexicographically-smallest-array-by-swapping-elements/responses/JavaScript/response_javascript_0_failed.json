{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 107960000,
    "question_id": "3219",
    "elapsed_time": 815,
    "compare_result
    "code_output": "[1,5,3,9,8]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707546223953,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1171178720",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} limit\n * @return {number[]}\n */\nvar lexicographicallySmallestArray = function(nums, limit) {\n    let n = nums.length;\n    let sorted = Array.from(nums).sort((a, b) => a - b);\n    let map = new Map();\n\n    for (let i = 0; i < n; i++) {\n        if (!map.has(sorted[i])) map.set(sorted[i], []);\n        map.get(sorted[i]).push(i);\n    }\n\n    let tree = new Array(n + 1).fill(0);\n\n    function update(i, val) {\n        for (i++; i <= n; i += i & -i) tree[i] += val;\n    }\n\n    function query(i) {\n        let sum = 0;\n        for (i++; i > 0; i -= i & -i) sum += tree[i];\n        return sum;\n    }\n\n    for (let i = 0; i < n; i++) {\n        let positions = map.get(nums[i]);\n        let targetPos = positions.shift();\n        let actualPos = targetPos - query(targetPos);\n        while (actualPos < i) {\n            targetPos = positions.shift();\n            if (targetPos === undefined) break;\n            actualPos = targetPos - query(targetPos);\n        }\n        if (targetPos !== undefined) {\n            update(targetPos, 1);\n            nums[i] = nums.splice(actualPos, 1, nums[i])[0];\n        }\n    }\n    return nums;\n};"
}