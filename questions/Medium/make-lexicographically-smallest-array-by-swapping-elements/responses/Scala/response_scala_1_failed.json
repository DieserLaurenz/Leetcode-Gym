{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 83852000,
    "question_id": "3219",
    "elapsed_time": 10559,
    "compare_result
    "code_output": "[4,38,52,59,71,27,31,83,88,10]",
    "std_output": "",
    "last_testcase": "[4,52,38,59,71,27,31,83,88,10]\n14",
    "expected_output": "[4,27,31,38,52,59,71,83,88,10]",
    "task_finish_time": 1707547181327,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 423,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1171189042",
    "input_formatted": "[4,52,38,59,71,27,31,83,88,10], 14",
    "input": "[4,52,38,59,71,27,31,83,88,10]\n14",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def lexicographicallySmallestArray(nums: Array[Int], limit: Int): Array[Int] = {\n        import scala.collection.mutable\n\n        val sortedIndices = nums.indices.sortWith((i, j) => nums(i) < nums(j) || (nums(i) == nums(j) && i < j))\n        val indexMap = mutable.Map[Int, Int]()\n        sortedIndices.zipWithIndex.foreach { case (index, sortedIndex) => indexMap(index) = sortedIndex }\n\n        def canSwap(i: Int, j: Int): Boolean = math.abs(nums(i) - nums(j)) <= limit\n\n        for (i <- nums.indices) {\n            var minPos = i\n            for (j <- i + 1 until nums.length) {\n                if (canSwap(i, j) && indexMap(j) < indexMap(minPos)) {\n                    minPos = j\n                }\n            }\n            if (minPos != i) {\n                val temp = nums(i)\n                nums(i) = nums(minPos)\n                nums(minPos) = temp\n\n                indexMap(minPos) = indexMap(i)\n                indexMap(i) = minPos\n            }\n        }\n        nums\n    }\n}"
}