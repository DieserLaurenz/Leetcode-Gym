{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15660000,
    "question_id": "3219",
    "elapsed_time": 5396,
    "compare_result": "0001000100000000001110000100000000000100000000000000000000000000000000011001001000000000000100000100000000010000000000000000000001010000110000000000000010000000100000100010000010000000000000000001000000000000000000010101101100110010010001000101001011010011000001011011000000001001110011111111000000101101011000000100000000001101101110010101010000000011101111110111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[5,3,1,8,9]",
    "std_output": "",
    "last_testcase": "[1,5,3,9,8]\n2",
    "expected_output": "[1,3,5,8,9]",
    "task_finish_time": 1707546553929,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 184,
    "total_testcases": 523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1171182169",
    "input_formatted": "[1,5,3,9,8], 2",
    "input": "[1,5,3,9,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func lexicographicallySmallestArray(_ nums: [Int], _ limit: Int) -> [Int] {\n        let n = nums.count\n        var nums = nums\n        var minPos = [Int: [Int]]() // Maps value to indices, sorted by position\n        for i in 0..<n {\n            minPos[nums[i], default: []].append(i)\n        }\n        \n        var i = 0\n        while i < n - 1 {\n            var found = false\n            for j in max(1, nums[i] - limit)...min(1_000_000_000, nums[i] + limit) {\n                if let pos = minPos[j]?.first, pos > i {\n                    nums.swapAt(i, pos)\n                    minPos[j]?.removeFirst()\n                    minPos[nums[i], default: []].append(i)\n                    found = true\n                    break\n                }\n            }\n            if !found { i += 1 }\n        }\n        return nums\n    }\n}"
}