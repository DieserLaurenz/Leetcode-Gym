{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "",
    "full_compile_error": "** (ArgumentError) cannot pipe :math.log2(x1)\n|> trunc\n|> (Kernel.+() / 1)\n|> :math.pow(2)\n|> trunc\n|> Bitwise.band(x1)\n|> :math.log2()\n|> floor into Kernel.+() / 1, the :/ operator can only take two arguments\n    (elixir 1.15.7) lib/macro.ex:376: Macro.pipe/3\n    (stdlib 5.1.1) lists.erl:1594: :lists.foldl/3\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 5:     Solution.can_sort_array/1\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 5:     Solution.can_sort_array/1\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 6:     Solution.can_sort_array/1",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3291",
    "task_finish_time": 1707252953044,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168188264",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec can_sort_array(nums :: [integer]) :: boolean\n  def can_sort_array(nums) do\n    nums\n    |> Enum.group_by(&(:math.log2(&1) |> trunc |> Kernel.+/1 |> :math.pow(2) |> trunc |> Bitwise.band(&1) |> :math.log2 |> floor |> Kernel.+/1))\n    |> Enum.map(fn {_bit_count, values} -> Enum.sort(values) end)\n    |> Enum.concat()\n    |> Enum.reduce({true, nil}, fn\n      x, {true, nil} -> {true, x}\n      x, {true, prev} when x >= prev -> {true, x}\n      _, _ -> {false, nil}\n    end)\n    |> elem(0)\n  end\nend"
}