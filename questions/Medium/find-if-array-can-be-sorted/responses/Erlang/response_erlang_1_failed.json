{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59944000,
    "question_id": "3291",
    "elapsed_time": 1463,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[8,4,2,30,15]",
    "expected_output": "true",
    "task_finish_time": 1707252834593,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 472,
    "total_testcases": 999,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1168187036",
    "input_formatted": "[8,4,2,30,15]",
    "input": "[8,4,2,30,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec can_sort_array(Nums :: [integer()]) -> boolean().\ncan_sort_array(Nums) ->\n    Counts = [length([1 || <<_:1, Bit:1>> <= <<X:32>>, Bit == 1]) || X <- Nums],\n    Sorted = lists:sort(Counts),\n    Zipped = lists:zip(Counts, Sorted),\n    lists:all(fun({A, B}) -> A == B end, Zipped)."
}