{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16588000,
    "question_id": "3291",
    "elapsed_time": 126,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[23,30,32]",
    "expected_output": "true",
    "task_finish_time": 1708765747205,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 714,
    "total_testcases": 999,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184678322",
    "input_formatted": "[23,30,32]",
    "input": "[23,30,32]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def canSortArray(self, nums: List[int]) -> bool:\n        bit_count = [bin(x).count('1') for x in nums]\n        sorted_bit_count = sorted(bit_count)\n        for i in range(len(nums) - 1):\n            if sorted_bit_count[i] == sorted_bit_count[i + 1]:\n                continue\n            if nums.index(min(nums, key=lambda x: (bin(x).count('1') != sorted_bit_count[i], x))) > \\\n               nums.index(min(nums, key=lambda x: (bin(x).count('1') != sorted_bit_count[i + 1], x))):\n                return False\n        return True"
}