{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 17: Char 42: Error: Can't return a value from a void function.",
    "full_runtime_error": "Line 17: Char 42: Error: Can't return a value from a void function.\n      if (groups[count]!.isEmpty) return false;\n                                         ^",
    "status_runtime": "N/A",
    "memory": 146992000,
    "question_id": "3291",
    "elapsed_time": 415,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[8,4,2,30,15]",
    "expected_output": "true",
    "task_finish_time": 1707243767140,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 999,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1168074426",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  bool canSortArray(List<int> nums) {\n    List<int> bitCounts = nums.map((n) => n.toRadixString(2).replaceAll('0', '').length).toList();\n    List<int> sortedNums = List.from(nums)..sort();\n    List<int> sortedBitCounts = sortedNums.map((n) => n.toRadixString(2).replaceAll('0', '').length).toList();\n    Map<int, List<int>> groups = {};\n    bitCounts.forEach((count) => groups[count] = []);\n    for (int num in nums) {\n      int count = num.toRadixString(2).replaceAll('0', '').length;\n      groups[count]!.add(num);\n    }\n    for (var group in groups.values) {\n      group.sort();\n    }\n    List<int> result = [];\n    sortedBitCounts.forEach((count) {\n      if (groups[count]!.isEmpty) return false;\n      result.add(groups[count]!.removeAt(0));\n    });\n    for (int i = 0; i < result.length; i++) {\n      if (result[i] != sortedNums[i]) return false;\n    }\n    return true;\n  }\n}"
}