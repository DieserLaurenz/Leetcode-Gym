{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5976000,
    "question_id": "3291",
    "elapsed_time": 19,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[8,4,2,30,15]",
    "expected_output": "true",
    "task_finish_time": 1707242753343,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 618,
    "total_testcases": 999,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1168057143",
    "input_formatted": "[8,4,2,30,15]",
    "input": "[8,4,2,30,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n\nint countBits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\nbool canSortArray(int* nums, int numsSize) {\n    int bitCounts[32] = {0}; // There can be up to 32 bits in an integer\n    for (int i = 0; i < numsSize; i++) {\n        bitCounts[countBits(nums[i])]++;\n    }\n    \n    int lastCount = 0;\n    for (int i = 0; i < 32; i++) {\n        if (bitCounts[i] != 0) {\n            if (lastCount == 0) {\n                lastCount = bitCounts[i];\n            } else if (bitCounts[i] != lastCount) {\n                return false; // Found a different count of set bits, can't sort\n            }\n            lastCount = bitCounts[i]; // This line is not logically needed and could be removed\n        }\n    }\n    return true; // All numbers have the same count of set bits or progressively increasing counts\n}"
}