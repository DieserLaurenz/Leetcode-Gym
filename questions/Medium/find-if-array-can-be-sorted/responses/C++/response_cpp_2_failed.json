{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 33036000,
    "question_id": "3291",
    "elapsed_time": 37,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[75,34,30]",
    "expected_output": "false",
    "task_finish_time": 1707242542006,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 992,
    "total_testcases": 999,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1168053609",
    "input_formatted": "[75,34,30]",
    "input": "[75,34,30]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    bool canSortArray(vector<int>& nums) {\n        vector<int> bitCounts(nums.size());\n        for (int i = 0; i < nums.size(); ++i) {\n            bitCounts[i] = __builtin_popcount(nums[i]);\n        }\n\n        vector<int> sortedIdx(nums.size());\n        iota(sortedIdx.begin(), sortedIdx.end(), 0);\n        sort(sortedIdx.begin(), sortedIdx.end(), [&](int i, int j) {\n            return nums[i] < nums[j] || (nums[i] == nums[j] && i < j);\n        });\n\n        for (int i = 0; i < nums.size(); ++i) {\n            if (bitCounts[sortedIdx[i]] != bitCounts[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};"
}