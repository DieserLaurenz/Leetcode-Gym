{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20216000,
    "question_id": "3291",
    "elapsed_time": 73,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[8,4,2,30,15]",
    "expected_output": "true",
    "task_finish_time": 1707243234366,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 454,
    "total_testcases": 999,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1168065320",
    "input_formatted": "[8,4,2,30,15]",
    "input": "[8,4,2,30,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canSortArray($nums) {\n        $groups = [];\n        foreach ($nums as $num) {\n            $bits = substr_count(decbin($num), '1');\n            if (!isset($groups[$bits])) {\n                $groups[$bits] = [];\n            }\n            $groups[$bits][] = $num;\n        }\n        \n        $sorted = [];\n        foreach ($groups as $group) {\n            sort($group);\n            $sorted = array_merge($sorted, $group);\n        }\n        \n        return $sorted === $nums || $sorted === array_reverse($nums);\n    }\n}"
}