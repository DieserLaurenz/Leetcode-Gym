{
    "acRate": 32.76632791441344,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2918",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
    "titleSlug": "minimum-equal-sum-of-two-arrays-after-replacing-zeros",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long minSum(vector<int>& nums1, vector<int>& nums2) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long minSum(int[] nums1, int[] nums2) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minSum(self, nums1, nums2):         \"\"\"         :type nums1: List[int]         :type nums2: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minSum(self, nums1: List[int], nums2: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long minSum(int* nums1, int nums1Size, int* nums2, int nums2Size) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long MinSum(int[] nums1, int[] nums2) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums1  * @param {number[]} nums2  * @return {number}  */ var minSum = function(nums1, nums2) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minSum(nums1: number[], nums2: number[]): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums1      * @param Integer[] $nums2      * @return Integer      */     function minSum($nums1, $nums2) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minSum(_ nums1: [Int], _ nums2: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minSum(nums1: IntArray, nums2: IntArray): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minSum(List<int> nums1, List<int> nums2) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minSum(nums1 []int, nums2 []int) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums1 # @param {Integer[]} nums2 # @return {Integer} def min_sum(nums1, nums2)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minSum(nums1: Array[Int], nums2: Array[Int]): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn min_sum(nums1: Vec<i32>, nums2: Vec<i32>) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (min-sum nums1 nums2)   (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec min_sum(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer(). min_sum(Nums1, Nums2) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec min_sum(nums1 :: [integer], nums2 :: [integer]) :: integer   def min_sum(nums1, nums2) do        end end"
        }
    ],
    "content": "You are given two arrays nums1 and nums2 consisting of positive integers. You have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal. Return the minimum equal sum you can obtain, or -1 if it is impossible.  Example 1:  Input: nums1 = [3,2,0,1,0], nums2 = [6,5,0] Output: 12 Explanation: We can replace 0's in the following way: - Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4]. - Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1]. Both arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.  Example 2:  Input: nums1 = [2,0,2,0], nums2 = [1,4] Output: -1 Explanation: It is impossible to make the sum of both arrays equal.   Constraints:  1 <= nums1.length, nums2.length <= 105 0 <= nums1[i], nums2[i] <= 106  "
}