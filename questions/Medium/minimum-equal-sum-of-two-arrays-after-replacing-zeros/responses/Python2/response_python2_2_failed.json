{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24948000,
    "question_id": "3171",
    "elapsed_time": 862,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1708818482116,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 331,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185244667",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minSum(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        sum1, sum2 = sum(nums1), sum(nums2)\n        zero_count1, zero_count2 = nums1.count(0), nums2.count(0)\n        if sum1 > sum2:\n            diff = sum1 - sum2\n            if zero_count2 == 0 or (diff + zero_count2) % zero_count2 != 0:\n                return -1\n            return sum1 + zero_count1\n        elif sum2 > sum1:\n            diff = sum2 - sum1\n            if zero_count1 == 0 or (diff + zero_count1) % zero_count1 != 0:\n                return -1\n            return sum2 + zero_count2\n        else:  # sums are already equal\n            if zero_count1 or zero_count2:\n                return sum1 + max(zero_count1, zero_count2)\n            return sum1  # sums are equal and no zeros to replace\n\n        # Adjusting for when zeros need to be replaced to balance out the sums\n        additional = max(zero_count1, zero_count2)\n        if sum1 == sum2:\n            return sum1 + additional\n        return max(sum1, sum2) + additional"
}