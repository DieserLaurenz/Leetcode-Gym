{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71632000,
    "question_id": "3171",
    "elapsed_time": 768,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707793855087,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 140,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1173741859",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minSum(nums1: IntArray, nums2: IntArray): Long {\n        var sum1 = nums1.sumOf { it.toLong() }\n        var sum2 = nums2.sumOf { it.toLong() }\n        val diff = kotlin.math.abs(sum1 - sum2)\n        val zerosCount1 = nums1.count { it == 0 }\n        val zerosCount2 = nums2.count { it == 0 }\n\n        if (zerosCount1 + zerosCount2 == 0) {\n            return if (sum1 == sum2) sum1 else -1\n        }\n\n        // Ensure sum1 is always the smaller sum for consistency\n        if (sum1 > sum2) {\n            val temp = sum1\n            sum1 = sum2\n            sum2 = temp\n        }\n\n        val totalZeros = zerosCount1 + zerosCount2\n        // The target sum after adding the minimum necessary values to make the sums equal\n        val targetSum = maxOf(sum1 + zerosCount1, sum2 + zerosCount2)\n\n        // If after adding 1 to all zeros in the smaller array, its sum exceeds the target, or it's not possible to make them equal\n        if (sum1 + zerosCount1 > targetSum || (targetSum * totalZeros - sum1 - sum2) % totalZeros != 0L) {\n            return -1\n        }\n\n        return targetSum\n    }\n}"
}