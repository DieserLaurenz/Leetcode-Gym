{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 33932000,
    "question_id": "3171",
    "elapsed_time": 860,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1708818564135,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 135,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185245229",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        sum1, sum2 = sum(nums1), sum(nums2)\n        diff = abs(sum1 - sum2)\n        zeros1, zeros2 = nums1.count(0), nums2.count(0)\n\n        if zeros1 + zeros2 == 0:\n            return sum1 if sum1 == sum2 else -1\n\n        total_zeros = zeros1 + zeros2\n        min_increase_per_zero = (diff + total_zeros - 1) // total_zeros\n\n        if sum1 < sum2:\n            new_sum1 = sum1 + min_increase_per_zero * zeros1\n            new_sum2 = sum2 + min_increase_per_zero * zeros2\n        else:\n            new_sum1 = sum1 + min_increase_per_zero * zeros1\n            new_sum2 = sum2 + min_increase_per_zero * zeros2\n\n        if new_sum1 != new_sum2:\n            return -1\n\n        return new_sum1"
}