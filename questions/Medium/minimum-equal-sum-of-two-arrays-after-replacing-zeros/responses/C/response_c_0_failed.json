{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15180000,
    "question_id": "3171",
    "elapsed_time": 156,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707784287990,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 20,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1173658065",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long minSum(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    long long sum1 = 0, sum2 = 0;\n    int zeros1 = 0, zeros2 = 0;\n\n    // Calculate sum and count zeros for both arrays\n    for (int i = 0; i < nums1Size; i++) {\n        sum1 += nums1[i];\n        if (nums1[i] == 0) zeros1++;\n    }\n    for (int i = 0; i < nums2Size; i++) {\n        sum2 += nums2[i];\n        if (nums2[i] == 0) zeros2++;\n    }\n\n    // If both arrays have no zeros, check if sums are already equal\n    if (zeros1 == 0 && zeros2 == 0) {\n        return sum1 == sum2 ? sum1 : -1;\n    }\n\n    // Find the difference in sums and calculate minimum sum\n    long long diff = sum1 - sum2;\n\n    // When one array has zeros and the other does not, or the difference cannot be equally divided among the zeros\n    if ((zeros1 > 0 && zeros2 == 0 && diff <= 0) || (zeros2 > 0 && zeros1 == 0 && diff >= 0) || \n        (zeros1 > 0 && zeros2 > 0 && diff % (zeros1 + zeros2) != 0)) {\n        return -1;\n    }\n\n    // Calculate minimum equal sum\n    long long adjustment = (zeros1 + zeros2 > 0) ? abs(diff) / (zeros1 + zeros2) : 0;\n    long long minSum = (diff == 0) ? sum1 : (diff > 0 ? sum1 + zeros2 * (adjustment + 1) : sum2 + zeros1 * (adjustment + 1));\n    return minSum + adjustment * abs(diff % (zeros1 + zeros2));\n}"
}