{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 14884000,
    "question_id": "3171",
    "elapsed_time": 155,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707784316972,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 112,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1173658318",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long minSum(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    long long sum1 = 0, sum2 = 0;\n    int zeros1 = 0, zeros2 = 0;\n\n    // Calculate sum and count zeros for both arrays\n    for (int i = 0; i < nums1Size; i++) {\n        sum1 += nums1[i];\n        if (nums1[i] == 0) zeros1++;\n    }\n    for (int i = 0; i < nums2Size; i++) {\n        sum2 += nums2[i];\n        if (nums2[i] == 0) zeros2++;\n    }\n\n    if (zeros1 == 0 && zeros2 == 0 && sum1 != sum2) return -1;\n\n    // Determine the total sum after replacing zeros to make arrays equal\n    long long totalZeros = zeros1 + zeros2;\n    long long totalSum = sum1 + sum2 + totalZeros; // Adding 1 for each zero\n    if (totalSum % 2 != 0) return -1; // If total sum is odd, cannot split evenly\n\n    long long targetSum = totalSum / 2;\n    if ((targetSum < sum1 && zeros2 == 0) || (targetSum < sum2 && zeros1 == 0)) return -1;\n\n    // Check if we can reach target sum by adding minimum numbers\n    return targetSum >= sum1 && targetSum >= sum2 ? targetSum : -1;\n}"
}