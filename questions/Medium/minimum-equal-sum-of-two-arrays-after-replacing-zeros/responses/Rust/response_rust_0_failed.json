{
    "status_code": 20,
    "lang": "rust",
    "run_success": false,
    "compile_error": "Line 12, Char 33: expected one of `.`, `;`, `?`, `}`, or an operator, found `max` (solution.rs)",
    "full_compile_error": "Line 12, Char 33: expected one of `.`, `;`, `?`, `}`, or an operator, found `max` (solution.rs)\n   |\n12 |                 (sum1 + zeros1) max (sum2 + zeros2)\n   |                                 ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\nLine 14, Char 33: expected one of `.`, `;`, `?`, `}`, or an operator, found `max` (solution.rs)\n   |\n14 |                 (sum2 + zeros2) max (sum1 + zeros1)\n   |                                 ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\nerror: could not compile `prog` (bin \"prog\") due to 2 previous errors\nmv: cannot stat '/leetcode/rust_compile/target/release/prog': No such file or directory",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3171",
    "task_finish_time": 1707794408414,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1173747478",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_sum(nums1: Vec<i32>, nums2: Vec<i32>) -> i64 {\n        let sum1: i64 = nums1.iter().map(|&x| x as i64).sum();\n        let sum2: i64 = nums2.iter().map(|&x| x as i64).sum();\n        let zeros1 = nums1.iter().filter(|&&x| x == 0).count() as i64;\n        let zeros2 = nums2.iter().filter(|&&x| x == 0).count() as i64;\n\n        if zeros1 == 0 && zeros2 == 0 {\n            if sum1 == sum2 { sum1 } else { -1 }\n        } else if (zeros1 + zeros2) % 2 == 0 {\n            if sum1 > sum2 {\n                (sum1 + zeros1) max (sum2 + zeros2)\n            } else {\n                (sum2 + zeros2) max (sum1 + zeros1)\n            }\n        } else {\n            -1\n        }\n    }\n}"
}