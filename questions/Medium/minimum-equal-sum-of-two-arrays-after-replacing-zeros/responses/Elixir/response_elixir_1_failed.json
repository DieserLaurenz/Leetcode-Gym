{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 185720000,
    "question_id": "3171",
    "elapsed_time": 1128,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707795040488,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173753997",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_sum(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def min_sum(nums1, nums2) do\n    sum1 = Enum.sum(nums1)\n    sum2 = Enum.sum(nums2)\n    zeros1 = Enum.count(nums1, &(&1 == 0))\n    zeros2 = Enum.count(nums2, &(&1 == 0))\n\n    if zeros1 + zeros2 == 0 do\n      if sum1 == sum2, do: sum1, else: -1\n    else\n      higher_sum = max(sum1, sum2)\n      lower_sum = min(sum1, sum2)\n      diff = higher_sum - lower_sum\n\n      if diff == 0 do\n        higher_sum + max(zeros1, zeros2)\n      else\n        if diff <= max(zeros1, zeros2) - min(zeros1, zeros2) do\n          new_sum = higher_sum + max(zeros1, zeros2)\n          if new_sum > lower_sum + min(zeros1, zeros2) + diff do\n            new_sum\n          else\n            -1\n          end\n        else\n          -1\n        end\n      end\n    end\n  end\nend"
}