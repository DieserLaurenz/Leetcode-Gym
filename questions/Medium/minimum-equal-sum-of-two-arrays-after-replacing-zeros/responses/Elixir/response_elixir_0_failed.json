{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74732000,
    "question_id": "3171",
    "elapsed_time": 417,
    "compare_result
    "code_output": "17",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707795011775,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173753729",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_sum(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def min_sum(nums1, nums2) do\n    sum1 = Enum.sum(nums1)\n    sum2 = Enum.sum(nums2)\n    zeros1 = Enum.count(nums1, &(&1 == 0))\n    zeros2 = Enum.count(nums2, &(&1 == 0))\n\n    if sum1 > sum2 and zeros2 == 0 or sum2 > sum1 and zeros1 == 0 do\n      -1\n    else\n      delta = abs(sum1 - sum2)\n      zeros = max(zeros1, zeros2)\n      if delta == 0 do\n        sum1 + zeros\n      else\n        if zeros1 >= zeros2 do\n          if rem(delta, zeros2) == 0 do\n            max(sum1, sum2) + delta + (zeros - zeros2)\n          else\n            -1\n          end\n        else\n          if rem(delta, zeros1) == 0 do\n            max(sum1, sum2) + delta + (zeros - zeros1)\n          else\n            -1\n          end\n        end\n      end\n    end\n  end\nend"
}