{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 187080000,
    "question_id": "3171",
    "elapsed_time": 1343,
    "compare_result": "000000000010000001000000000000000000000010000000000000000000100000000000000000000000000100000000100000000000000000000000000000000000000000000000000000000010000001000000001100000100001110000001000100000000101000000000000000000000000000010000100100000011000000100000000000000000001000000000000000000000000100000100001000110100100000001000000000001011101000000100001000000000000000000000010001000000000000010010000001000000100000000011000000001100000100010010011100000100100001000000000000100000000100001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010001000000000000000000000000001",
    "code_output": "13",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707795071686,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 66,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173754302",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_sum(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def min_sum(nums1, nums2) do\n    sum1 = Enum.sum(nums1)\n    sum2 = Enum.sum(nums2)\n    zeros1 = Enum.count(nums1, &(&1 == 0))\n    zeros2 = Enum.count(nums2, &(&1 == 0))\n\n    # Calculate the total number of replacements needed to make sums equal\n    total_replacements = zeros1 + zeros2\n\n    # If no zeros in either array, check if sums are already equal\n    if total_replacements == 0 do\n      if sum1 == sum2, do: sum1, else: -1\n    else\n      # Calculate the difference in sums and the minimum sum increase needed\n      sum_diff = abs(sum1 - sum2)\n      min_increase_per_zero = div(sum_diff, total_replacements) +\n                                if rem(sum_diff, total_replacements) > 0, do: 1, else: 0\n\n      # Calculate new sum after replacements\n      new_sum = max(sum1, sum2) + (min_increase_per_zero * min(zeros1, zeros2))\n\n      # Check if it's possible to equalize the sum with at least one replacement per zero\n      if sum1 == sum2 or min_increase_per_zero > 0 do\n        new_sum\n      else\n        -1\n      end\n    end\n  end\nend"
}