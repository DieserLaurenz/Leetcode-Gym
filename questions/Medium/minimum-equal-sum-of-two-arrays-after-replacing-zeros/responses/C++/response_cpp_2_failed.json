{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 133868000,
    "question_id": "3171",
    "elapsed_time": 193,
    "compare_result
    "code_output": "13",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707784088807,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 88,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173656481",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long minSum(vector<int>& nums1, vector<int>& nums2) {\n        long long sum1 = 0, sum2 = 0;\n        for (int num : nums1) sum1 += num;\n        for (int num : nums2) sum2 += num;\n        int countZeros1 = 0, countZeros2 = 0;\n        for (int num : nums1) if (num == 0) ++countZeros1;\n        for (int num : nums2) if (num == 0) ++countZeros2;\n\n        if (sum1 == sum2) {\n            // If sums are equal, the minimum sum is the current sum plus the number of zeros\n            // since each zero must be replaced by at least 1.\n            return sum1 + max(countZeros1, countZeros2);\n        } else if ((countZeros1 == 0 && countZeros2 == 0) || (sum1 != sum2 && countZeros1 + countZeros2 == 0)) {\n            // If there are no zeros in both arrays and sums are not equal, it's impossible.\n            return -1;\n        } else {\n            // Calculate the difference and adjust for zeros.\n            long long diff = abs(sum1 - sum2);\n            // The goal is to make the sum equal by adding the minimum required to the array with the lesser sum.\n            // The minimum addition is the difference plus one for each zero in the array with the lesser sum,\n            // since each zero must be replaced by at least 1.\n            if (sum1 < sum2) {\n                // If the first array has the lesser sum, check if it's possible to balance the sums.\n                return sum2 + countZeros1; // Add one for each zero in nums1.\n            } else {\n                // If the second array has the lesser sum, check if it's possible to balance the sums.\n                return sum1 + countZeros2; // Add one for each zero in nums2.\n            }\n        }\n    }\n};"
}