{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 134024000,
    "question_id": "3171",
    "elapsed_time": 184,
    "compare_result": "010010000000101010000000010001010000010010010001010000000000100000000010000110110100000000100000100000011010000000001000110010000010100100000100001001100000100100100000100011000000001110000100010000000001010001000001000100001000000010100000100011000000001100000001000110000000010000000000000100000000110000001001000000000110000000000000100000000000000100000100100000001101000100010100010000100100000001000001001010011100000000000100010000000000110000000100010010000110000000101011000000100001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707784014026,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173655833",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long minSum(vector<int>& nums1, vector<int>& nums2) {\n        long long sum1 = 0, sum2 = 0;\n        int zeros1 = 0, zeros2 = 0;\n        \n        // Calculate the sum and count zeros for both arrays\n        for (int num : nums1) {\n            sum1 += num;\n            if (num == 0) zeros1++;\n        }\n        for (int num : nums2) {\n            sum2 += num;\n            if (num == 0) zeros2++;\n        }\n        \n        // If both arrays have no zeros, check if sums are already equal\n        if (zeros1 == 0 && zeros2 == 0) {\n            return sum1 == sum2 ? sum1 : -1;\n        }\n        \n        // If one array has zeros and the other has a higher sum without zeros, it's impossible\n        if ((zeros1 > 0 && sum1 > sum2) || (zeros2 > 0 && sum2 > sum1)) {\n            return -1;\n        }\n        \n        // Calculate the difference and distribute it over the zeros\n        long long diff = abs(sum1 - sum2);\n        \n        // If the array with zeros has a lower sum, calculate the minimum sum after replacement\n        if (sum1 < sum2 && (diff % zeros1 == 0) || sum2 < sum1 && (diff % zeros2 == 0)) {\n            return max(sum1, sum2) + diff;\n        }\n        \n        // If it's not possible to evenly distribute the difference\n        return -1;\n    }\n};"
}