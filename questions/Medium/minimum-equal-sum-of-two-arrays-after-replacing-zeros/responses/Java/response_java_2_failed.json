{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60848000,
    "display_runtime": "3",
    "question_id": "3171",
    "elapsed_time": 441,
    "compare_result
    "code_output": "13",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707784233454,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 481,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1173657664",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minSum(int[] nums1, int[] nums2) {\n        long sum1 = 0, sum2 = 0;\n        int zeros1 = 0, zeros2 = 0;\n        for (int num : nums1) {\n            if (num == 0) zeros1++;\n            sum1 += num;\n        }\n        for (int num : nums2) {\n            if (num == 0) zeros2++;\n            sum2 += num;\n        }\n        \n        if (sum1 == sum2 && zeros1 == 0 && zeros2 == 0) return sum1; // No zeros and sums are already equal\n        \n        // The idea is to equalize the sums by adding the minimum required numbers to the arrays with zeros.\n        // If one sum is greater than the other, we need to add at least that difference in the opposite array to make them equal.\n        // However, if the sums are equal but there are zeros, we need to add at least 1 to each zero to keep the arrays' sums equal and positive.\n        \n        long totalNeeded = Math.abs(sum1 - sum2); // The initial difference needed to equalize sums\n        int totalZeros = zeros1 + zeros2; // Total zeros in both arrays\n        \n        if (totalZeros == 0) return -1; // No way to make sums equal if no zeros and sums are different\n        \n        // If sums are already equal, distribute 1 to each zero\n        if (sum1 == sum2) return sum1 + totalZeros;\n        \n        // If one array needs to catch up, check if it can with the available zeros\n        long minSumToAdd = Math.max(sum1, sum2) - Math.min(sum1, sum2); // Minimum sum to add to the lesser sum to make it equal\n        if (minSumToAdd > 0 && (zeros1 == 0 || zeros2 == 0)) return -1; // Cannot make up difference if no zeros in one array\n        \n        // Adjust the sum with minimum number of increments to make the sums equal\n        long targetSum = Math.max(sum1, sum2) + Math.max(zeros1, zeros2); // Target sum after adding minimum required to zeros\n        return targetSum;\n    }\n}"
}