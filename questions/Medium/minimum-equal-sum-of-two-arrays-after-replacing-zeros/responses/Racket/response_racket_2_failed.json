{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128152000,
    "question_id": "3171",
    "elapsed_time": 686,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707794593936,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 64,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1173749356",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-sum nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  (let* ([sum1 (apply + nums1)]\n         [sum2 (apply + nums2)]\n         [zeros1 (length (filter zero? nums1))]\n         [zeros2 (length (filter zero? nums2))]\n         [total-zeros (+ zeros1 zeros2)]\n         [max-sum (+ sum1 sum2 total-zeros)])\n    (if (= (modulo max-sum 2) 0)\n        (/ max-sum 2)\n        -1)))"
}