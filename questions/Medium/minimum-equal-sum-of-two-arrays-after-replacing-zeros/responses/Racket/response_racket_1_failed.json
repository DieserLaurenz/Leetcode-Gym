{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 99932000,
    "question_id": "3171",
    "elapsed_time": 249,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707794563819,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1173749047",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-sum nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  (let* ([sum1 (apply + (filter positive? nums1))]\n         [sum2 (apply + (filter positive? nums2))]\n         [zeros1 (count zero? nums1)]\n         [zeros2 (count zero? nums2)]\n         [total-zeros (+ zeros1 zeros2)])\n    (if (and (= zeros1 0) (= zeros2 0) (not (= sum1 sum2)))\n        -1\n        (let ([min-sum (if (> sum1 sum2)\n                           (+ sum1 (* (- total-zeros (if (> sum2 sum1) 1 0)) 1))\n                           (+ sum2 (* (- total-zeros (if (> sum1 sum2) 1 0)) 1)))])\n          (if (or (> sum1 sum2) (> sum2 sum1))\n              (if (= (modulo (- (max sum1 sum2) (min sum1 sum2)) (- total-zeros (if (> sum1 sum2) 1 0))) 0)\n                  min-sum\n                  (+ min-sum (- (- total-zeros (if (> sum1 sum2) 1 0)) (modulo (- (max sum1 sum2) (min sum1 sum2)) (- total-zeros (if (> sum1 sum2) 1 0))))))\n              (+ (max sum1 sum2) total-zeros))))))"
}