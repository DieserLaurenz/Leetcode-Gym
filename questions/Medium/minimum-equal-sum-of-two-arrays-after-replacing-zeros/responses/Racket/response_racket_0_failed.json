{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 135296000,
    "question_id": "3171",
    "elapsed_time": 725,
    "compare_result
    "code_output": "97",
    "std_output": "",
    "last_testcase": "[0,7,28,17,18]\n[1,2,6,26,1,0,27,3,0,30]",
    "expected_output": "98",
    "task_finish_time": 1707794527145,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 88,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1173748667",
    "input_formatted": "[0,7,28,17,18], [1,2,6,26,1,0,27,3,0,30]",
    "input": "[0,7,28,17,18]\n[1,2,6,26,1,0,27,3,0,30]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-sum nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  (let* ([sum1 (apply + (map (lambda (x) (if (zero? x) 0 x)) nums1))]\n         [sum2 (apply + (map (lambda (x) (if (zero? x) 0 x)) nums2))]\n         [zeros1 (length (filter zero? nums1))]\n         [zeros2 (length (filter zero? nums2))]\n         [diff (abs (- sum1 sum2))])\n    (if (> (abs (- zeros1 zeros2)) 1)\n        -1\n        (if (= zeros1 zeros2)\n            (+ sum1 (if (zero? zeros1) 0 (* 2 zeros1)))\n            (+ (max sum1 sum2) (abs (- zeros1 zeros2)))))))"
}