{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70396000,
    "question_id": "3171",
    "elapsed_time": 499,
    "compare_result
    "code_output": "17",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707784439717,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 105,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1173659413",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinSum(int[] nums1, int[] nums2) {\n        long sum1 = 0, sum2 = 0;\n        foreach (var num in nums1) sum1 += num;\n        foreach (var num in nums2) sum2 += num;\n\n        int zeroCount1 = 0, zeroCount2 = 0;\n        foreach (var num in nums1) if (num == 0) zeroCount1++;\n        foreach (var num in nums2) if (num == 0) zeroCount2++;\n\n        if (zeroCount1 + zeroCount2 == 0) return sum1 == sum2 ? sum1 : -1;\n\n        long totalZeros = zeroCount1 + zeroCount2;\n        long minSum = Math.Max(sum1, sum2);\n        long diff = Math.Abs(sum1 - sum2);\n\n        if ((zeroCount1 == 0 && sum1 < sum2) || (zeroCount2 == 0 && sum2 < sum1)) {\n            return -1;\n        }\n\n        if (diff % totalZeros == 0) {\n            return minSum + diff;\n        } else {\n            long additionalSumNeeded = totalZeros - (diff % totalZeros);\n            return minSum + diff + additionalSumNeeded;\n        }\n    }\n}"
}