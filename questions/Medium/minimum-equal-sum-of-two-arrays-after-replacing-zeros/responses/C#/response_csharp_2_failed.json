{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66664000,
    "question_id": "3171",
    "elapsed_time": 543,
    "compare_result
    "code_output": "13",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707784476373,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 483,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1173659745",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinSum(int[] nums1, int[] nums2) {\n        long sum1 = 0, sum2 = 0;\n        int zeros1 = 0, zeros2 = 0;\n        foreach (var num in nums1) {\n            sum1 += num;\n            if (num == 0) zeros1++;\n        }\n        foreach (var num in nums2) {\n            sum2 += num;\n            if (num == 0) zeros2++;\n        }\n\n        // Impossible to make sums equal if one array has zeros and the other has a larger sum without zeros\n        if ((zeros1 > 0 && zeros2 == 0 && sum1 > sum2) || (zeros2 > 0 && zeros1 == 0 && sum2 > sum1)) return -1;\n\n        long targetSum = Math.Max(sum1, sum2);\n        long diff = Math.Abs(sum1 - sum2);\n\n        // If there are zeros in both arrays, we can make the sums equal by adding the same amount to both sums.\n        if (zeros1 > 0 && zeros2 > 0) {\n            if (sum1 == sum2) return sum1 + Math.Max(zeros1, zeros2);\n            return targetSum + Math.Max(zeros1, zeros2);\n        }\n\n        // If there are zeros in one array, we need to check if the difference can be evenly distributed among them.\n        if (zeros1 > 0 || zeros2 > 0) {\n            int totalZeros = zeros1 + zeros2;\n            if (diff % totalZeros == 0) {\n                return targetSum + Math.Max(zeros1, zeros2);\n            }\n        }\n\n        // Handling cases where direct addition is possible to make sums equal\n        if (sum1 == sum2) {\n            return sum1 + Math.Max(zeros1, zeros2);\n        }\n\n        // If one sum is greater and has zeros, adjust by adding minimal amounts to the lesser sum to make them equal\n        if (sum1 < sum2 && zeros1 > 0) {\n            long additional = (sum2 - sum1) / zeros1;\n            if ((sum2 - sum1) % zeros1 == 0) return sum2;\n            else return sum2 + zeros1 - ((sum2 - sum1) % zeros1);\n        }\n        if (sum2 < sum1 && zeros2 > 0) {\n            long additional = (sum1 - sum2) / zeros2;\n            if ((sum1 - sum2) % zeros2 == 0) return sum1;\n            else return sum1 + zeros2 - ((sum1 - sum2) % zeros2);\n        }\n\n        // If unable to make sums equal with above conditions, return -1\n        return -1;\n    }\n}"
}