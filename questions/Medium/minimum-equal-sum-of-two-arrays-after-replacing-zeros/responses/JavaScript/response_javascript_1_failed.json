{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 69412000,
    "question_id": "3171",
    "elapsed_time": 138,
    "compare_result
    "code_output": "13",
    "std_output": "",
    "last_testcase": "[3,2,0,1,0]\n[6,5,0]",
    "expected_output": "12",
    "task_finish_time": 1707784569813,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 85,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1173660562",
    "input_formatted": "[3,2,0,1,0], [6,5,0]",
    "input": "[3,2,0,1,0]\n[6,5,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minSum = function(nums1, nums2) {\n    let sum1 = nums1.reduce((acc, val) => acc + val, 0);\n    let sum2 = nums2.reduce((acc, val) => acc + val, 0);\n    let zeros1 = nums1.filter(val => val === 0).length;\n    let zeros2 = nums2.filter(val => val === 0).length;\n\n    if ((zeros1 === 0 && zeros2 === 0) && sum1 !== sum2) {\n        return -1;\n    }\n\n    let diff = Math.abs(sum1 - sum2);\n    if (zeros1 + zeros2 === 0) {\n        return sum1; // or sum2, since they are equal here\n    }\n\n    // The minimum sum we can obtain after replacing all 0's\n    // is the larger of the two sums plus the number of 0's in the smaller sum array,\n    // because we can replace 0's in the array with smaller sum to make the sums equal.\n    let minIncrementPerZero = 1;\n    let targetSum = Math.max(sum1, sum2) + (sum1 < sum2 ? zeros1 : zeros2) * minIncrementPerZero;\n\n    return targetSum;\n};"
}