{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65644000,
    "question_id": "3171",
    "elapsed_time": 155,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,0,2,0]\n[1,4]",
    "expected_output": "-1",
    "task_finish_time": 1707784607721,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 626,
    "total_testcases": 636,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1173660876",
    "input_formatted": "[2,0,2,0], [1,4]",
    "input": "[2,0,2,0]\n[1,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minSum = function(nums1, nums2) {\n    let sum1 = nums1.reduce((acc, val) => acc + val, 0);\n    let sum2 = nums2.reduce((acc, val) => acc + val, 0);\n    \n    // No need to replace 0's if sums are already equal and no 0's in arrays\n    if (sum1 === sum2 && !nums1.includes(0) && !nums2.includes(0)) {\n        return sum1;\n    }\n    \n    let zeros1 = nums1.reduce((acc, val) => val === 0 ? acc + 1 : acc, 0);\n    let zeros2 = nums2.reduce((acc, val) => val === 0 ? acc + 1 : acc, 0);\n\n    // Calculate the total minimum sum needed to make both arrays equal\n    let totalMinSumNeeded = Math.abs(sum1 - sum2);\n    // Total number of replacements needed (each 0 replaced by at least 1)\n    let totalReplacementsNeeded = zeros1 + zeros2;\n\n    if (sum1 === sum2) {\n        // If initial sums are equal, minimum sum is the current sum plus the total number of 0's (each replaced by 1)\n        return sum1 + totalReplacementsNeeded;\n    } else if (sum1 > sum2) {\n        if (zeros2 === 0) {\n            return -1; // Impossible to equalize without zeros in the smaller array\n        }\n        // Calculate new sum considering replacements to equalize and exceed the difference\n        let newSum = sum2 + zeros2 + (totalMinSumNeeded + (zeros1 - zeros2));\n        return newSum;\n    } else { // sum2 > sum1\n        if (zeros1 === 0) {\n            return -1; // Impossible to equalize without zeros in the smaller array\n        }\n        // Calculate new sum considering replacements to equalize and exceed the difference\n        let newSum = sum1 + zeros1 + (totalMinSumNeeded + (zeros2 - zeros1));\n        return newSum;\n    }\n};"
}