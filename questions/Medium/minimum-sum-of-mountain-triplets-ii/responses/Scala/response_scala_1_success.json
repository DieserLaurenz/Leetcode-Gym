{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "834 ms",
    "memory": 86188000,
    "question_id": "3186",
    "elapsed_time": 940,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707983989397,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 100,
    "status_memory": "86.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1175835005",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumSum(nums: Array[Int]): Int = {\n        val n = nums.length\n        val leftMin = Array.fill(n)(Int.MaxValue)\n        val rightMin = Array.fill(n)(Int.MaxValue)\n        \n        // Precompute minimum values to the left of each element\n        var min = Int.MaxValue\n        for (i <- 1 until n) {\n            min = Math.min(min, nums(i - 1))\n            leftMin(i) = min\n        }\n\n        // Precompute minimum values to the right of each element\n        min = Int.MaxValue\n        for (i <- n - 2 to 0 by -1) {\n            min = Math.min(min, nums(i + 1))\n            rightMin(i) = min\n        }\n\n        var result = Int.MaxValue\n        for (i <- 1 until n - 1) {\n            if (nums(i) > leftMin(i) && nums(i) > rightMin(i)) {\n                result = Math.min(result, nums(i) + leftMin(i) + rightMin(i))\n            }\n        }\n\n        if (result == Int.MaxValue) -1 else result\n    }\n}"
}