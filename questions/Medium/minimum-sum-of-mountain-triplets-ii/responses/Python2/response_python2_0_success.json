{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "590 ms",
    "memory": 23992000,
    "question_id": "3186",
    "elapsed_time": 637,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708838716864,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 71.42860000000002,
    "status_memory": "24 MB",
    "memory_percentile": 47.6191,
    "pretty_lang": "Python",
    "submission_id": "1185474975",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        left_min = [float('inf')] * len(nums)\n        right_min = [float('inf')] * len(nums)\n        min_sum = float('inf')\n\n        for i in range(1, len(nums)):\n            left_min[i] = min(left_min[i-1], nums[i-1])\n        \n        for i in range(len(nums)-2, -1, -1):\n            right_min[i] = min(right_min[i+1], nums[i+1])\n        \n        for j in range(1, len(nums)-1):\n            if nums[j] > left_min[j] and nums[j] > right_min[j]:\n                min_sum = min(min_sum, left_min[j] + nums[j] + right_min[j])\n        \n        return min_sum if min_sum != float('inf') else -1"
}