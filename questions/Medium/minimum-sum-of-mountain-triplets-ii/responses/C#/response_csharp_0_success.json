{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "298 ms",
    "memory": 63184000,
    "question_id": "3186",
    "elapsed_time": 468,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707982940550,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 75.0,
    "status_memory": "63.2 MB",
    "memory_percentile": 62.5,
    "pretty_lang": "C#",
    "submission_id": "1175824175",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumSum(int[] nums) {\n        int n = nums.Length;\n        int[] leftMin = new int[n];\n        int[] rightMin = new int[n];\n        leftMin[0] = int.MaxValue;\n        rightMin[n - 1] = int.MaxValue;\n\n        // Fill leftMin\n        int min = nums[0];\n        for (int i = 1; i < n; i++) {\n            leftMin[i] = min;\n            if (nums[i] < min) min = nums[i];\n        }\n\n        // Fill rightMin\n        min = nums[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            rightMin[i] = min;\n            if (nums[i] < min) min = nums[i];\n        }\n\n        int result = int.MaxValue;\n        for (int j = 1; j < n - 1; j++) {\n            if (nums[j] > leftMin[j] && nums[j] > rightMin[j]) {\n                result = Math.Min(result, leftMin[j] + nums[j] + rightMin[j]);\n            }\n        }\n\n        return result == int.MaxValue ? -1 : result;\n    }\n}"
}