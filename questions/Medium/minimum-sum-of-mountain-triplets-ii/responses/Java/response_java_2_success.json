{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "3 ms",
    "memory": 56828000,
    "display_runtime": "3",
    "question_id": "3186",
    "elapsed_time": 418,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707982696886,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 58.375600000000006,
    "status_memory": "56.8 MB",
    "memory_percentile": 72.08149999999998,
    "pretty_lang": "Java",
    "submission_id": "1175821449",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumSum(int[] nums) {\n        // Initialize minimum sum as maximum value\n        int minSum = Integer.MAX_VALUE;\n        // Arrays to store the minimum values on the left and right of each element\n        int[] minLeft = new int[nums.length];\n        int[] minRight = new int[nums.length];\n\n        // Fill left minimum values with maximum\n        for (int i = 0; i < nums.length; i++) {\n            minLeft[i] = Integer.MAX_VALUE;\n        }\n        // Compute minimum values on the left side of each element\n        int min = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            minLeft[i] = min;\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n        }\n\n        // Fill right minimum values with maximum\n        for (int i = 0; i < nums.length; i++) {\n            minRight[i] = Integer.MAX_VALUE;\n        }\n        // Compute minimum values on the right side of each element\n        min = nums[nums.length - 1];\n        for (int i = nums.length - 2; i >= 0; i--) {\n            minRight[i] = min;\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n        }\n\n        // Find the minimum possible sum of a mountain triplet\n        for (int i = 1; i < nums.length - 1; i++) {\n            if (minLeft[i] < nums[i] && minRight[i] < nums[i]) { // Check for mountain condition\n                int sum = minLeft[i] + nums[i] + minRight[i];\n                minSum = Math.min(minSum, sum);\n            }\n        }\n\n        // If no mountain triplet was found, return -1\n        if (minSum == Integer.MAX_VALUE) {\n            return -1;\n        }\n        return minSum;\n    }\n}"
}