{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 47712000,
    "question_id": "3186",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2]",
    "expected_output": "6",
    "task_finish_time": 1707982648879,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 578,
    "total_testcases": 788,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175820879",
    "input_formatted": "[1,2,3,2]",
    "input": "[1,2,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumSum(int[] nums) {\n        int n = nums.length;\n        int minSum = Integer.MAX_VALUE;\n        int[] leftMax = new int[n];\n        int[] rightMax = new int[n];\n        \n        leftMax[0] = -1; // Initialize with -1 for no valid left max\n        for (int i = 1; i < n; i++) {\n            leftMax[i] = -1; // Initialize with -1 for each position\n            for (int j = 0; j < i; j++) {\n                if (nums[j] < nums[i]) {\n                    leftMax[i] = Math.max(leftMax[i], j);\n                }\n            }\n        }\n        \n        rightMax[n - 1] = -1; // Initialize with -1 for no valid right max\n        for (int i = n - 2; i >= 0; i--) {\n            rightMax[i] = -1; // Initialize with -1 for each position\n            for (int j = i + 1; j < n; j++) {\n                if (nums[j] < nums[i]) {\n                    rightMax[i] = Math.max(rightMax[i], j);\n                }\n            }\n        }\n        \n        for (int i = 1; i < n - 1; i++) {\n            if (leftMax[i] != -1 && rightMax[i] != -1) {\n                int sum = nums[leftMax[i]] + nums[i] + nums[rightMax[i]];\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum == Integer.MAX_VALUE ? -1 : minSum;\n    }\n}"
}