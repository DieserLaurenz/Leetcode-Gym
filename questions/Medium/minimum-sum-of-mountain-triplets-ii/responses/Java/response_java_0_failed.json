{
    "status_code": 15,
    "lang": "java",
    "run_success": false,
    "runtime_error": "Line 22: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 5",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 5\n  at line 22, Solution.minimumSum\n  at line 54, __DriverSolution__.__helper__\n  at line 84, __Driver__.main",
    "status_runtime": "N/A",
    "memory": 41244000,
    "question_id": "3186",
    "elapsed_time": 102,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[8,6,1,5,3]",
    "expected_output": "9",
    "task_finish_time": 1707982604602,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 788,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175820438",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumSum(int[] nums) {\n        int n = nums.length;\n        int minSum = Integer.MAX_VALUE;\n        int[] leftMin = new int[n];\n        int[] rightMin = new int[n];\n        \n        leftMin[0] = -1; // No smaller element to the left of the first element\n        for (int i = 1; i < n; i++) {\n            leftMin[i] = i - 1;\n            int j = i - 1;\n            while (j >= 0 && nums[j] >= nums[i]) {\n                j = leftMin[j];\n            }\n            leftMin[i] = j;\n        }\n        \n        rightMin[n - 1] = -1; // No smaller element to the right of the last element\n        for (int i = n - 2; i >= 0; i--) {\n            rightMin[i] = i + 1;\n            int j = i + 1;\n            while (j < n && nums[j] >= nums[i]) {\n                j = rightMin[j];\n            }\n            rightMin[i] = j;\n        }\n        \n        for (int j = 1; j < n - 1; j++) {\n            if (leftMin[j] != -1 && rightMin[j] != -1) {\n                int sum = nums[leftMin[j]] + nums[j] + nums[rightMin[j]];\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        \n        return minSum == Integer.MAX_VALUE ? -1 : minSum;\n    }\n}"
}