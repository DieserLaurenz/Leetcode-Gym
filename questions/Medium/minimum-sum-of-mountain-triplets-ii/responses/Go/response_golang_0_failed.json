{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9028000,
    "question_id": "3186",
    "elapsed_time": 167,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[8,6,1,5,3]",
    "expected_output": "9",
    "task_finish_time": 1707983728742,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 215,
    "total_testcases": 788,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175832344",
    "input_formatted": "[8,6,1,5,3]",
    "input": "[8,6,1,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumSum(nums []int) int {\n    minLeft := make([]int, len(nums))\n    minRight := make([]int, len(nums))\n    minVal := int(1e9 + 7) // A large value to initialize minimum values\n    for i := range nums {\n        if i == 0 {\n            minLeft[i] = minVal\n        } else {\n            minLeft[i] = min(minLeft[i-1], nums[i-1])\n        }\n    }\n    for i := len(nums) - 1; i >= 0; i-- {\n        if i == len(nums)-1 {\n            minRight[i] = minVal\n        } else {\n            minRight[i] = min(minRight[i+1], nums[i+1])\n        }\n    }\n    minSum := int(1e9 + 7) // A large value to find the minimum sum\n    for j := 1; j < len(nums)-1; j++ {\n        if nums[j] > nums[j-1] && nums[j] > nums[j+1] {\n            sum := nums[j] + min(minLeft[j], minRight[j])\n            if sum < minSum {\n                minSum = sum\n            }\n        }\n    }\n    if minSum == int(1e9+7) {\n        return -1\n    }\n    return minSum\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}