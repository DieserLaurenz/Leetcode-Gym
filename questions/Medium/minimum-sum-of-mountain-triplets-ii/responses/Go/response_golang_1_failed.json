{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10060000,
    "question_id": "3186",
    "elapsed_time": 122,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[5,4,8,7,10,2]",
    "expected_output": "13",
    "task_finish_time": 1707983778352,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 413,
    "total_testcases": 788,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175832887",
    "input_formatted": "[5,4,8,7,10,2]",
    "input": "[5,4,8,7,10,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumSum(nums []int) int {\n    n := len(nums)\n    leftMin := make([]int, n)\n    rightMin := make([]int, n)\n\n    // Initialize leftMin and rightMin with maximum values\n    for i := range leftMin {\n        leftMin[i] = 1<<31 - 1\n    }\n    for i := range rightMin {\n        rightMin[i] = 1<<31 - 1\n    }\n\n    // Fill leftMin with the minimum values to the left of each index\n    minVal := nums[0]\n    for i := 1; i < n; i++ {\n        leftMin[i] = minVal\n        if nums[i] < minVal {\n            minVal = nums[i]\n        }\n    }\n\n    // Fill rightMin with the minimum values to the right of each index\n    minVal = nums[n-1]\n    for i := n - 2; i >= 0; i-- {\n        rightMin[i] = minVal\n        if nums[i] < minVal {\n            minVal = nums[i]\n        }\n    }\n\n    // Find the minimum sum of a mountain triplet\n    minSum := 1<<31 - 1\n    for j := 1; j < n-1; j++ {\n        if nums[j] > nums[j-1] && nums[j] > nums[j+1] {\n            currentSum := nums[j] + leftMin[j] + rightMin[j]\n            if leftMin[j] != 1<<31 - 1 && rightMin[j] != 1<<31 - 1 {\n                minSum = min(minSum, currentSum)\n            }\n        }\n    }\n\n    if minSum == 1<<31-1 {\n        return -1\n    }\n    return minSum\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}