{
    "status_code": 10,
    "lang": "php",
    "run_success": true,
    "status_runtime": "226 ms",
    "memory": 27852000,
    "question_id": "3186",
    "elapsed_time": 268,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707983140284,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 100,
    "status_memory": "27.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "PHP",
    "submission_id": "1175826263",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumSum($nums) {\n        $n = count($nums);\n        $leftMin = array_fill(0, $n, PHP_INT_MAX);\n        $rightMin = array_fill(0, $n, PHP_INT_MAX);\n        $minSum = PHP_INT_MAX;\n        \n        // Calculate minimum value to the left of each element\n        $minToLeft = PHP_INT_MAX;\n        for ($i = 0; $i < $n; ++$i) {\n            $minToLeft = min($minToLeft, $nums[$i]);\n            $leftMin[$i] = $minToLeft;\n        }\n        \n        // Calculate minimum value to the right of each element\n        $minToRight = PHP_INT_MAX;\n        for ($i = $n - 1; $i >= 0; --$i) {\n            $minToRight = min($minToRight, $nums[$i]);\n            $rightMin[$i] = $minToRight;\n        }\n        \n        // Find the minimum sum of mountain triplet\n        for ($j = 1; $j < $n - 1; ++$j) {\n            if ($nums[$j] > $leftMin[$j - 1] && $nums[$j] > $rightMin[$j + 1]) {\n                $minSum = min($minSum, $leftMin[$j - 1] + $nums[$j] + $rightMin[$j + 1]);\n            }\n        }\n        \n        return $minSum == PHP_INT_MAX ? -1 : $minSum;\n    }\n}"
}