{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 10: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 10: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:10: anonymous fn/4 in Solution.minimum_sum/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:9: Solution.minimum_sum/1\n    solution.ex:44: Driver.consume_test_cases/2\n    solution.ex:32: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 74788000,
    "question_id": "3186",
    "elapsed_time": 508,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[8,6,1,5,3]",
    "expected_output": "9",
    "task_finish_time": 1707992128396,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 788,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1175919708",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_sum(nums :: [integer]) :: integer\n  def minimum_sum(nums) do\n    len = length(nums)\n    left_min = Enum.map(1..len, fn _ -> :infinity end)\n    right_min = Enum.map(1..len, fn _ -> :infinity end)\n\n    # Calculate left min values\n    for i <- 1..(len-2) do\n      left_min = List.replace_at(left_min, i, Enum.min(List.last(Enum.slice(left_min, 0, i)), nums[i-1]))\n    end\n\n    # Calculate right min values\n    for i <- (len-2)..-1..1 do\n      right_min = List.replace_at(right_min, i, Enum.min(Enum.at(right_min, i+1), nums[i+1]))\n    end\n\n    min_sum = :infinity\n    for j <- 1..(len-2) do\n      if nums[j] > Enum.at(left_min, j) && nums[j] > Enum.at(right_min, j) do\n        sum = nums[j] + Enum.at(left_min, j) + Enum.at(right_min, j)\n        min_sum = Enum.min(min_sum, sum)\n      end\n    end\n\n    if min_sum == :infinity, do: -1, else: min_sum\n  end\nend"
}