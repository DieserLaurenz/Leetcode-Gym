{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 11: ** (ArgumentError) ranges (first..last) expect both sides to be integers, got: 3..0..-1//-1",
    "full_runtime_error": "Line 11: ** (ArgumentError) ranges (first..last) expect both sides to be integers, got: 3..0..-1//-1\n    (elixir 1.15.7) lib/range.ex:193: Range.new/2\n    solution.ex:11: Solution.minimum_sum/1\n    solution.ex:42: Driver.consume_test_cases/2\n    solution.ex:30: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 75532000,
    "question_id": "3186",
    "elapsed_time": 496,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[8,6,1,5,3]",
    "expected_output": "9",
    "task_finish_time": 1707992086667,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 788,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1175919216",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_sum(nums :: [integer]) :: integer\n  def minimum_sum(nums) do\n    left_min = Enum.map(nums, & &1)\n    right_min = Enum.map(nums, & &1)\n\n    for i <- 1..(length(nums) - 1) do\n      left_min = List.replace_at(left_min, i, min(Enum.at(left_min, i - 1), Enum.at(nums, i)))\n    end\n\n    for i <- (length(nums) - 2)..0..-1 do\n      right_min = List.replace_at(right_min, i, min(Enum.at(right_min, i + 1), Enum.at(nums, i)))\n    end\n\n    min_sum = Enum.reduce(1..(length(nums) - 2), :infinity, fn j, acc ->\n      if Enum.at(left_min, j - 1) < Enum.at(nums, j) and Enum.at(right_min, j + 1) < Enum.at(nums, j) do\n        sum = Enum.at(left_min, j - 1) + Enum.at(nums, j) + Enum.at(right_min, j + 1)\n        min(acc, sum)\n      else\n        acc\n      end\n    end)\n\n    if min_sum == :infinity, do: -1, else: min_sum\n  end\nend"
}