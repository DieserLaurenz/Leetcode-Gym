{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "14 ms",
    "memory": 4144000,
    "question_id": "3186",
    "elapsed_time": 29,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707984048550,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 60.0,
    "status_memory": "4.1 MB",
    "memory_percentile": 60.0,
    "pretty_lang": "Rust",
    "submission_id": "1175835619",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_sum(nums: Vec<i32>) -> i32 {\n        let mut left_min = vec![std::i32::MAX; nums.len()];\n        let mut right_min = vec![std::i32::MAX; nums.len()];\n        let mut min_sum = std::i32::MAX;\n        \n        for i in 1..nums.len() {\n            left_min[i] = left_min[i - 1].min(nums[i - 1]);\n        }\n        \n        for i in (0..nums.len() - 1).rev() {\n            right_min[i] = right_min[i + 1].min(nums[i + 1]);\n        }\n        \n        for j in 1..nums.len() - 1 {\n            if nums[j] > left_min[j] && nums[j] > right_min[j] {\n                min_sum = min_sum.min(nums[j] + left_min[j] + right_min[j]);\n            }\n        }\n        \n        if min_sum == std::i32::MAX {\n            -1\n        } else {\n            min_sum\n        }\n    }\n}"
}