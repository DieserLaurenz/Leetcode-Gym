{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "102 ms",
    "memory": 83352000,
    "question_id": "3186",
    "elapsed_time": 145,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707982531937,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 85.92170000000006,
    "status_memory": "83.4 MB",
    "memory_percentile": 15.114200000000015,
    "pretty_lang": "C++",
    "submission_id": "1175819662",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <limits>\n\nclass Solution {\npublic:\n    int minimumSum(vector<int>& nums) {\n        int n = nums.size();\n        int minSum = INT_MAX;\n        vector<int> leftMin(n, 0), rightMin(n, 0);\n\n        // Left pass for the minimum value to the left of each element\n        int minToLeft = nums[0];\n        for (int i = 1; i < n; ++i) {\n            leftMin[i] = minToLeft;\n            minToLeft = min(minToLeft, nums[i]);\n        }\n\n        // Right pass for the minimum value to the right of each element\n        int minToRight = nums[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            rightMin[i] = minToRight;\n            minToRight = min(minToRight, nums[i]);\n        }\n\n        // Find the minimum sum of a mountain triplet\n        for (int j = 1; j < n - 1; ++j) {\n            if (nums[j] > leftMin[j] && nums[j] > rightMin[j]) {\n                int sum = leftMin[j] + nums[j] + rightMin[j];\n                minSum = min(minSum, sum);\n            }\n        }\n\n        return minSum == INT_MAX ? -1 : minSum;\n    }\n};"
}