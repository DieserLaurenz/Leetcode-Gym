{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "212 ms",
    "memory": 233668000,
    "question_id": "3186",
    "elapsed_time": 428,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707983881700,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 100,
    "status_memory": "233.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "Ruby",
    "submission_id": "1175833963",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_sum(nums)\n    left_min = Array.new(nums.length, Float::INFINITY)\n    right_min = Array.new(nums.length, Float::INFINITY)\n    min_sum = Float::INFINITY\n    \n    # Fill left_min with minimum values from left up to each index\n    min_val = Float::INFINITY\n    nums.each_with_index do |num, i|\n        min_val = [min_val, num].min\n        left_min[i] = min_val\n    end\n    \n    # Fill right_min with minimum values from right up to each index\n    min_val = Float::INFINITY\n    nums.reverse.each_with_index do |num, i|\n        min_val = [min_val, num].min\n        right_min[nums.length - 1 - i] = min_val\n    end\n    \n    # Check for mountain triplets and calculate their sum\n    nums.each_with_index do |num, j|\n        if left_min[j] < num && right_min[j] < num\n            sum = left_min[j] + num + right_min[j]\n            min_sum = [min_sum, sum].min\n        end\n    end\n    \n    min_sum == Float::INFINITY ? -1 : min_sum\nend"
}