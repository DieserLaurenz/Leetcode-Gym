{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "476 ms",
    "memory": 69392000,
    "question_id": "3186",
    "elapsed_time": 676,
    "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707983520529,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 62.5,
    "status_memory": "69.4 MB",
    "memory_percentile": 37.5,
    "pretty_lang": "Kotlin",
    "submission_id": "1175830153",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumSum(nums: IntArray): Int {\n        val n = nums.size\n        val leftMin = IntArray(n) { Int.MAX_VALUE }\n        val rightMin = IntArray(n) { Int.MAX_VALUE }\n        var minSum = Int.MAX_VALUE\n\n        for (i in 1 until n) {\n            leftMin[i] = minOf(leftMin[i - 1], nums[i - 1])\n        }\n\n        for (i in n - 2 downTo 0) {\n            rightMin[i] = minOf(rightMin[i + 1], nums[i + 1])\n        }\n\n        for (i in 1 until n - 1) {\n            if (nums[i] > leftMin[i] && nums[i] > rightMin[i]) {\n                minSum = minOf(minSum, leftMin[i] + nums[i] + rightMin[i])\n            }\n        }\n\n        return if (minSum == Int.MAX_VALUE) -1 else minSum\n    }\n}"
}