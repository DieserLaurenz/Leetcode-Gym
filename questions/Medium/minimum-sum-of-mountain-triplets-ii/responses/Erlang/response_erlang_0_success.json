{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "1043 ms",
    "memory": 216260000,
    "question_id": "3186",
    "elapsed_time": 2546,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707992020727,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 100,
    "status_memory": "216.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1175918428",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec minimum_sum(Nums :: [integer()]) -> integer().\nminimum_sum(Nums) ->\n    MinLeft = lists:foldl(fun(X, Acc) -> [min(X, hd(Acc)) | Acc] end, [infinity], Nums),\n    MinRight = lists:foldr(fun(X, Acc) -> [min(X, hd(Acc)) | Acc] end, [infinity], Nums),\n    MinLeftShifted = tl(lists:reverse(MinLeft)),\n    MinRightShifted = tl(MinRight),\n    TripletSums = [X + Y + Z || {X, Y, Z} <- lists:zip3(MinLeftShifted, Nums, MinRightShifted), X < Y, Z < Y, X /= infinity, Z /= infinity],\n    case TripletSums of\n        [] -> -1;\n        _ -> lists:min(TripletSums)\n    end."
}