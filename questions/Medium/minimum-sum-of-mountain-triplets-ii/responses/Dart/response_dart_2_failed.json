{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 186236000,
    "question_id": "3186",
    "elapsed_time": 635,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,2]",
    "expected_output": "6",
    "task_finish_time": 1707983662767,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 513,
    "total_testcases": 788,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1175831643",
    "input_formatted": "[1,2,3,2]",
    "input": "[1,2,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumSum(List<int> nums) {\n    int n = nums.length;\n    List<int> minLeft = List.filled(n, 0);\n    List<int> maxRight = List.filled(n, 0);\n    minLeft[0] = nums[0];\n    for (int i = 1; i < n; i++) {\n      minLeft[i] = nums[i] > nums[i - 1] ? nums[i - 1] : (minLeft[i - 1] < nums[i] ? minLeft[i - 1] : nums[i]);\n    }\n\n    maxRight[n - 1] = nums[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n      maxRight[i] = nums[i] > nums[i + 1] ? nums[i + 1] : (maxRight[i + 1] < nums[i] ? maxRight[i + 1] : nums[i]);\n    }\n\n    int result = -1;\n    for (int i = 1; i < n - 1; i++) {\n      if (nums[i] > minLeft[i] && nums[i] > maxRight[i]) {\n        int currentSum = nums[i] + minLeft[i] + maxRight[i];\n        if (result == -1 || currentSum < result) {\n          result = currentSum;\n        }\n      }\n    }\n\n    return result;\n  }\n}"
}