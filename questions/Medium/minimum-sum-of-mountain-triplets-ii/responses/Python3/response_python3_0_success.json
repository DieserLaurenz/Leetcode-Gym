{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "592 ms",
    "memory": 31352000,
    "question_id": "3186",
    "elapsed_time": 632,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708838767869,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 788,
    "total_testcases": 788,
    "runtime_percentile": 62.93130000000013,
    "status_memory": "31.4 MB",
    "memory_percentile": 91.81040000000002,
    "pretty_lang": "Python3",
    "submission_id": "1185475514",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minimumSum(self, nums: List[int]) -> int:\n        left_min = [float('inf')] * len(nums)\n        right_min = [float('inf')] * len(nums)\n        min_sum = float('inf')\n        \n        # Update left_min with the minimum value found from the start to the current index\n        for i in range(1, len(nums)):\n            left_min[i] = min(left_min[i-1], nums[i-1])\n        \n        # Update right_min with the minimum value found from the end to the current index\n        for i in range(len(nums)-2, -1, -1):\n            right_min[i] = min(right_min[i+1], nums[i+1])\n        \n        # Find the minimum possible sum of a mountain triplet\n        for i in range(1, len(nums)-1):\n            if nums[i] > left_min[i] and nums[i] > right_min[i]:\n                min_sum = min(min_sum, nums[i] + left_min[i] + right_min[i])\n        \n        return min_sum if min_sum != float('inf') else -1"
}