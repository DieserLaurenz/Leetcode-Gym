{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57648000,
    "question_id": "3114",
    "elapsed_time": 900,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706750429060,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162501282",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumSumOfHeights(maxHeights: List[Int]): Long = {\n        val n = maxHeights.length\n        val leftToRight = Array.fill(n)(0)\n        val rightToLeft = Array.fill(n)(0)\n\n        // From left to right: find max achievable heights\n        leftToRight(0) = maxHeights(0)\n        for (i <- 1 until n) {\n            leftToRight(i) = Math.min(leftToRight(i - 1) + 1, maxHeights(i))\n        }\n\n        // From right to left: find max achievable heights\n        rightToLeft(n - 1) = maxHeights(n - 1)\n        for (i <- (n - 2) to 0 by -1) {\n            rightToLeft(i) = Math.min(rightToLeft(i + 1) + 1, maxHeights(i))\n        }\n\n        // Calculate the maximum sum of heights for the mountain\n        (0 until n).map(i => Math.min(leftToRight(i), rightToLeft(i)).toLong).sum\n    }\n}"
}