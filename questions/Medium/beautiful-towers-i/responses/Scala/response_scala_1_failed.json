{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58136000,
    "question_id": "3114",
    "elapsed_time": 9010,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706750383896,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 160,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162500819",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumSumOfHeights(maxHeights: List[Int]): Long = {\n        val n = maxHeights.length\n        var maxSum: Long = 0\n        \n        for (peak <- maxHeights.indices) {\n            val leftHeights = new Array[Long](n)\n            val rightHeights = new Array[Long](n)\n            \n            leftHeights(peak) = maxHeights(peak)\n            rightHeights(peak) = maxHeights(peak)\n            \n            // Build towards the peak from the left\n            for (i <- (peak - 1) to 0 by -1) {\n                leftHeights(i) = Math.min(leftHeights(i + 1) - 1, maxHeights(i))\n                if (leftHeights(i) == 0) leftHeights(i) = 1 // Ensure minimum height of 1\n            }\n            \n            // Build away from the peak towards the right\n            for (i <- (peak + 1) until n) {\n                rightHeights(i) = Math.min(rightHeights(i - 1) - 1, maxHeights(i))\n                if (rightHeights(i) == 0) rightHeights(i) = 1 // Ensure minimum height of 1\n            }\n            \n            // Calculate sum and update maxSum\n            val currentSum = (leftHeights ++ rightHeights).sum - maxHeights(peak) // Subtract peak counted twice\n            maxSum = Math.max(maxSum, currentSum)\n        }\n        \n        maxSum\n    }\n}"
}