{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56516000,
    "question_id": "3114",
    "elapsed_time": 810,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706750322610,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162500385",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumSumOfHeights(maxHeights: List[Int]): Long = {\n        val n = maxHeights.length\n        val heights = Array.fill(n)(0)\n        \n        // Build from left to right\n        heights(0) = maxHeights(0)\n        for (i <- 1 until n) {\n            heights(i) = Math.min(maxHeights(i), heights(i - 1) + 1)\n        }\n        \n        // Build from right to left\n        for (i <- (n - 2) to 0 by -1) {\n            heights(i) = Math.min(heights(i), Math.min(maxHeights(i), heights(i + 1) + 1))\n        }\n        \n        // Calculate the sum of heights\n        heights.sum\n    }\n}"
}