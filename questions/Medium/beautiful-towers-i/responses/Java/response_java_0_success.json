{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "51 ms",
    "memory": 44056000,
    "display_runtime": "51",
    "question_id": "3114",
    "elapsed_time": 228,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706741169969,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 786,
    "total_testcases": 786,
    "runtime_percentile": 61.666099999999915,
    "status_memory": "44.1 MB",
    "memory_percentile": 76.25,
    "pretty_lang": "Java",
    "submission_id": "1162431518",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public long maximumSumOfHeights(List<Integer> maxHeights) {\n        long maxSum = 0;\n        int n = maxHeights.size();\n        \n        for (int peak = 0; peak < n; ++peak) {\n            long sum = maxHeights.get(peak);\n            int lastHeight = maxHeights.get(peak);\n            \n            // Left side\n            for (int i = peak - 1; i >= 0; --i) {\n                lastHeight = Math.min(lastHeight, maxHeights.get(i));\n                sum += lastHeight;\n            }\n            \n            lastHeight = maxHeights.get(peak);\n            // Right side\n            for (int i = peak + 1; i < n; ++i) {\n                lastHeight = Math.min(lastHeight, maxHeights.get(i));\n                sum += lastHeight;\n            }\n            \n            maxSum = Math.max(maxSum, sum);\n        }\n        \n        return maxSum;\n    }\n}"
}