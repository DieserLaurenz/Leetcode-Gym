{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 148932000,
    "question_id": "3114",
    "elapsed_time": 466,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706742206535,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162439075",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import 'dart:math';\n\nclass Solution {\n  int maximumSumOfHeights(List<int> maxHeights) {\n    int n = maxHeights.length;\n    List<int> left = List<int>.filled(n, 0); // Tracks max height from left to right\n    List<int> right = List<int>.filled(n, 0); // Tracks max height from right to left\n\n    // Calculate max possible height from left to right\n    left[0] = maxHeights[0];\n    for (int i = 1; i < n; i++) {\n      left[i] = min(maxHeights[i], left[i - 1] + 1);\n    }\n\n    // Calculate max possible height from right to left\n    right[n - 1] = maxHeights[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n      right[i] = min(maxHeights[i], right[i + 1] + 1);\n    }\n\n    // Calculate maximum sum of heights by taking the minimum of left and right at each position\n    int maxSum = 0;\n    for (int i = 0; i < n; i++) {\n      maxSum += min(left[i], right[i]);\n    }\n\n    return maxSum;\n  }\n}"
}