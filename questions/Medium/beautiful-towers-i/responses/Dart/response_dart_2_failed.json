{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 147520000,
    "question_id": "3114",
    "elapsed_time": 564,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706742252213,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162439397",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import 'dart:math';\n\nclass Solution {\n  int maximumSumOfHeights(List<int> maxHeights) {\n    int n = maxHeights.length;\n    // Initialize the arrays to track the max possible height so far from both sides.\n    List<int> leftMax = List<int>.filled(n, 0);\n    List<int> rightMax = List<int>.filled(n, 0);\n    int maxSum = 0;\n\n    leftMax[0] = maxHeights[0];\n    // Populate leftMax with the highest possible tower height from the left up to each point.\n    for (int i = 1; i < n; i++) {\n      leftMax[i] = min(leftMax[i - 1] + 1, maxHeights[i]);\n    }\n\n    rightMax[n - 1] = maxHeights[n - 1];\n    // Populate rightMax with the highest possible tower height from the right up to each point.\n    for (int i = n - 2; i >= 0; i--) {\n      rightMax[i] = min(rightMax[i + 1] + 1, maxHeights[i]);\n    }\n\n    // Calculate the maximum sum of heights by considering the minimum of leftMax and rightMax\n    // at each position, which ensures the mountain property.\n    for (int i = 0; i < n; i++) {\n      maxSum += min(leftMax[i], rightMax[i]);\n    }\n\n    return maxSum;\n  }\n}"
}