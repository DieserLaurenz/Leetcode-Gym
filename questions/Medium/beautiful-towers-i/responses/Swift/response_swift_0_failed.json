{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15892000,
    "question_id": "3114",
    "elapsed_time": 69,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741892554,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1162436872",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumSumOfHeights(_ maxHeights: [Int]) -> Int {\n        let n = maxHeights.count\n        var forward = Array(repeating: 0, count: n)\n        var backward = Array(repeating: 0, count: n)\n\n        // Ascending part of the mountain\n        forward[0] = maxHeights[0]\n        for i in 1..<n {\n            forward[i] = min(forward[i-1] + 1, maxHeights[i])\n        }\n\n        // Descending part of the mountain\n        backward[n-1] = maxHeights[n-1]\n        for i in stride(from: n-2, through: 0, by: -1) {\n            backward[i] = min(backward[i+1] + 1, maxHeights[i])\n        }\n\n        // Find the minimum of forward and backward at each position\n        // to ensure the mountain property and calculate the sum\n        var maxSum = 0\n        for i in 0..<n {\n            maxSum += min(forward[i], backward[i])\n        }\n\n        return maxSum\n    }\n}"
}