{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15436000,
    "question_id": "3114",
    "elapsed_time": 107,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741974911,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 31,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1162437445",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumSumOfHeights(_ maxHeights: [Int]) -> Int {\n        let n = maxHeights.count\n        var dp = Array(repeating: 0, count: n + 1)\n        \n        for i in 1...n {\n            dp[i] = maxHeights[i - 1]\n        }\n        \n        // Calculate the prefix sum to simplify the sum calculation later\n        for i in 1...n {\n            dp[i] += dp[i - 1]\n        }\n        \n        var result = 0\n        \n        for peak in 0..<n {\n            var left = 1, right = min(peak + 1, n - peak)\n            \n            while left < right {\n                let mid = (left + right + 1) / 2\n                if maxHeights[peak - mid + 1...peak].min()! >= mid && maxHeights[peak...peak + mid - 1].min()! >= mid {\n                    left = mid\n                } else {\n                    right = mid - 1\n                }\n            }\n            \n            let total = dp[peak + left] - dp[peak - left + 1] + left * (maxHeights[peak] - left + 1)\n            result = max(result, total)\n        }\n        \n        return result\n    }\n}"
}