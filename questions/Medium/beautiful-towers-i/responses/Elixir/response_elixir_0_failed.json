{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 75256000,
    "question_id": "3114",
    "elapsed_time": 685,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706750801008,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1162504237",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_sum_of_heights(max_heights :: [integer]) :: integer\n  def maximum_sum_of_heights(max_heights) do\n    n = length(max_heights)\n    left = for i <- 0..(n-1), do: Enum.min(Enum.slice(max_heights, 0, i+1))\n    right = for i <- 0..(n-1), do: Enum.min(Enum.slice(max_heights, i, n-i) |> Enum.reverse())\n    combined = Enum.zip(left, right) |> Enum.map(fn {a, b} -> Enum.min([a, b]) end)\n    Enum.sum(combined)\n  end\nend"
}