{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "91 ms",
    "memory": 44500000,
    "question_id": "3114",
    "elapsed_time": 177,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706741514286,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 786,
    "total_testcases": 786,
    "runtime_percentile": 92.8571,
    "status_memory": "44.5 MB",
    "memory_percentile": 71.42840000000001,
    "pretty_lang": "C#",
    "submission_id": "1162434109",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaximumSumOfHeights(IList<int> maxHeights) {\n        int n = maxHeights.Count;\n        long maxSum = 0;\n\n        // Iterate through each position as the peak of the mountain\n        for (int peak = 0; peak < n; peak++) {\n            long sum = maxHeights[peak];\n            int leftMax = maxHeights[peak];\n            int rightMax = maxHeights[peak];\n\n            // Expand to the left\n            for (int left = peak - 1; left >= 0; left--) {\n                leftMax = Math.Min(leftMax, maxHeights[left]);\n                sum += leftMax;\n            }\n\n            // Expand to the right\n            for (int right = peak + 1; right < n; right++) {\n                rightMax = Math.Min(rightMax, maxHeights[right]);\n                sum += rightMax;\n            }\n\n            // Update maxSum if this configuration has a higher sum\n            maxSum = Math.Max(maxSum, sum);\n        }\n\n        return maxSum;\n    }\n}"
}