{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "6 ms",
    "memory": 2188000,
    "question_id": "3114",
    "elapsed_time": 26,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706750473608,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 786,
    "total_testcases": 786,
    "runtime_percentile": 66.66660000000002,
    "status_memory": "2.2 MB",
    "memory_percentile": 83.33330000000001,
    "pretty_lang": "Rust",
    "submission_id": "1162501633",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_sum_of_heights(max_heights: Vec<i32>) -> i64 {\n        let n = max_heights.len();\n        let mut result = 0;\n\n        for peak in 0..n {\n            let mut sum = max_heights[peak] as i64; // Initialize sum with the peak value\n            let mut min_height = max_heights[peak];\n\n            // Expand to the left\n            for i in (0..peak).rev() {\n                min_height = min_height.min(max_heights[i]);\n                sum += min_height as i64;\n            }\n\n            min_height = max_heights[peak];\n\n            // Expand to the right\n            for i in peak + 1..n {\n                min_height = min_height.min(max_heights[i]);\n                sum += min_height as i64;\n            }\n\n            result = result.max(sum); // Update result if a higher sum is found\n        }\n\n        result\n    }\n}"
}