{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101332000,
    "question_id": "3114",
    "elapsed_time": 295,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706750607331,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1162502656",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-sum-of-heights maxHeights)\n  (-> (listof exact-integer?) exact-integer?)\n  (let* ([n (length maxHeights)]\n         [left (make-vector n)]\n         [right (make-vector n)]\n         [sum 0])\n    ;; Initialize the left and right vectors\n    (vector-set! left 0 (list-ref maxHeights 0))\n    (vector-set! right (- n 1) (list-ref maxHeights (- n 1)))\n    ;; Update left vector\n    (for ([i (in-range 1 n)])\n      (vector-set! left i (min (vector-ref left (- i 1)) (list-ref maxHeights i))))\n    ;; Update right vector\n    (for ([i (in-range (- n 2) -1 -1)])\n      (vector-set! right i (min (vector-ref right (+ i 1)) (list-ref maxHeights i))))\n    ;; Calculate the maximum sum of heights\n    (for ([i (in-range n)])\n      (set! sum (+ sum (min (vector-ref left i) (vector-ref right i)))))\n    sum))"
}