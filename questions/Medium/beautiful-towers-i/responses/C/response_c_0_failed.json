{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5960000,
    "question_id": "3114",
    "elapsed_time": 21,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741216786,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162431841",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n\nlong long maximumSumOfHeights(int* maxHeights, int maxHeightsSize) {\n    int left[maxHeightsSize], right[maxHeightsSize];\n    long long sum = 0;\n    \n    // Left to right pass\n    left[0] = maxHeights[0];\n    for (int i = 1; i < maxHeightsSize; i++) {\n        left[i] = (left[i - 1] + 1 < maxHeights[i]) ? left[i - 1] + 1 : maxHeights[i];\n    }\n\n    // Right to left pass\n    right[maxHeightsSize - 1] = maxHeights[maxHeightsSize - 1];\n    for (int i = maxHeightsSize - 2; i >= 0; i--) {\n        right[i] = (right[i + 1] + 1 < maxHeights[i]) ? right[i + 1] + 1 : maxHeights[i];\n    }\n\n    // Calculate the sum of minimum of left and right for each position\n    for (int i = 0; i < maxHeightsSize; i++) {\n        sum += (left[i] < right[i]) ? left[i] : right[i];\n    }\n\n    return sum;\n}"
}