{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6016000,
    "question_id": "3114",
    "elapsed_time": 46,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741271648,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162432254",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n\nlong long maximumSumOfHeights(int* maxHeights, int maxHeightsSize) {\n    // Pre-calculate the max possible height from both sides for each position\n    int leftMax[maxHeightsSize], rightMax[maxHeightsSize];\n    long long maxSum = 0;\n    \n    // Calculate left max heights\n    leftMax[0] = maxHeights[0];\n    for (int i = 1; i < maxHeightsSize; ++i) {\n        leftMax[i] = (maxHeights[i] < leftMax[i - 1] + 1) ? maxHeights[i] : leftMax[i - 1] + 1;\n    }\n\n    // Calculate right max heights\n    rightMax[maxHeightsSize - 1] = maxHeights[maxHeightsSize - 1];\n    for (int i = maxHeightsSize - 2; i >= 0; --i) {\n        rightMax[i] = (maxHeights[i] < rightMax[i + 1] + 1) ? maxHeights[i] : rightMax[i + 1] + 1;\n    }\n\n    // For each position as peak, calculate the maximum sum of heights\n    for (int i = 0; i < maxHeightsSize; ++i) {\n        long long sum = 0;\n        // Use the minimum of left and right max heights for each tower to ensure mountain shape\n        for (int j = 0; j < maxHeightsSize; ++j) {\n            int minHeight = (leftMax[j] < rightMax[j]) ? leftMax[j] : rightMax[j];\n            sum += minHeight;\n        }\n        if (sum > maxSum) {\n            maxSum = sum;\n        }\n    }\n\n    return maxSum;\n}"
}