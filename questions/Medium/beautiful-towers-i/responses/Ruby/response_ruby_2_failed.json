{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212456000,
    "question_id": "3114",
    "elapsed_time": 180,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706742430588,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162440693",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} max_heights\n# @return {Integer}\ndef maximum_sum_of_heights(max_heights)\n  n = max_heights.length\n  left_max = Array.new(n, 0)\n  right_max = Array.new(n, 0)\n  \n  # Building up from left to right ensuring increasing heights\n  left_max[0] = max_heights[0]\n  (1...n).each do |i|\n    left_max[i] = [left_max[i-1] + 1, max_heights[i]].min\n  end\n  \n  # Building down from right to left ensuring decreasing heights\n  right_max[n-1] = max_heights[n-1]\n  (n-2).downto(0) do |i|\n    right_max[i] = [right_max[i+1] + 1, max_heights[i]].min\n  end\n  \n  # Calculating the maximum possible sum by taking the minimum of left_max and right_max\n  # This ensures we don't exceed max_heights while maintaining a mountain shape\n  max_sum = 0\n  (0...n).each do |i|\n    max_sum += [left_max[i], right_max[i]].min\n  end\n  \n  max_sum\nend"
}