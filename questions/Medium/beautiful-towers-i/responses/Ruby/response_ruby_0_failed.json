{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 225392000,
    "question_id": "3114",
    "elapsed_time": 1160,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706742341931,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 19,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162440048",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} max_heights\n# @return {Integer}\ndef maximum_sum_of_heights(max_heights)\n    n = max_heights.length\n    max_sum = 0\n\n    # Iterate through each index as potential peak\n    (0...n).each do |peak|\n        left = [1] * peak\n        right = [1] * (n - peak - 1)\n\n        # Calculate maximum possible heights to the left of the peak\n        (1...peak).each do |i|\n            left[i] = [left[i-1], max_heights[i]].min\n        end\n\n        # Calculate maximum possible heights to the right of the peak\n        (n-2).downto(peak+1).each do |i|\n            right[i-peak-1] = [right[i-peak], max_heights[i]].min\n        end\n\n        # Compute the sum of heights for this configuration\n        sum = left.sum + right.sum + max_heights[peak]\n\n        # Update max_sum if this sum is greater\n        max_sum = [max_sum, sum].max\n    end\n\n    max_sum\nend"
}