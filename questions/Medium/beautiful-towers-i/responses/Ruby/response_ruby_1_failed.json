{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212528000,
    "question_id": "3114",
    "elapsed_time": 146,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706742385401,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162440375",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} max_heights\n# @return {Integer}\ndef maximum_sum_of_heights(max_heights)\n  n = max_heights.length\n  max_sum = 0\n\n  # Left and right arrays to store the maximum height of towers from both sides\n  left_max = Array.new(n, 0)\n  right_max = Array.new(n, 0)\n\n  # Fill left_max from left to right\n  left_max[0] = max_heights[0]\n  (1...n).each do |i|\n    left_max[i] = [max_heights[i], left_max[i-1]].min\n  end\n\n  # Fill right_max from right to left\n  right_max[n-1] = max_heights[n-1]\n  (n-2).downto(0).each do |i|\n    right_max[i] = [max_heights[i], right_max[i+1]].min\n  end\n\n  # Calculate the maximum possible height for each tower and the total sum\n  (0...n).each do |i|\n    # The height of each tower is the minimum of left_max and right_max\n    # as it ensures not exceeding max_heights and maintaining mountain property\n    max_sum += [left_max[i], right_max[i]].min\n  end\n\n  max_sum\nend"
}