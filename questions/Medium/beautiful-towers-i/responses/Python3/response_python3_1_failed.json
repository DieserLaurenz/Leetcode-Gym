{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16716000,
    "question_id": "3114",
    "elapsed_time": 92,
    "compare_result
    "code_output": "24",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735188646,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184413977",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n        n = len(maxHeights)\n        left = [0] * n\n        right = [0] * n\n        stack = []\n\n        # Left\n        for i in range(n):\n            while stack and maxHeights[stack[-1]] < maxHeights[i]:\n                stack.pop()\n            left[i] = stack[-1] if stack else -1\n            stack.append(i)\n\n        stack = []\n        # Right\n        for i in range(n - 1, -1, -1):\n            while stack and maxHeights[stack[-1]] <= maxHeights[i]:\n                stack.pop()\n            right[i] = stack[-1] if stack else n\n            stack.append(i)\n\n        max_sum = 0\n        for i in range(n):\n            if left[i] != -1 and right[i] != n:\n                max_sum += min(maxHeights[left[i]], maxHeights[right[i]]) * (right[i] - left[i] - 1)\n            elif left[i] != -1:\n                max_sum += maxHeights[left[i]] * (i - left[i])\n            elif right[i] != n:\n                max_sum += maxHeights[right[i]] * (right[i] - i)\n            else:\n                max_sum += maxHeights[i]\n\n        return max_sum"
}