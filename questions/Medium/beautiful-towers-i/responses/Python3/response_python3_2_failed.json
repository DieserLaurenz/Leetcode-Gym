{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16776000,
    "question_id": "3114",
    "elapsed_time": 85,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735214334,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184414131",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maximumSumOfHeights(self, maxHeights: List[int]) -> int:\n        def getMaxSum(arr):\n            return sum(min(arr[i], arr[i + 1]) for i in range(len(arr) - 1))\n        \n        left = [0] * len(maxHeights)\n        right = [0] * len(maxHeights)\n        \n        # Left scan\n        for i in range(len(maxHeights)):\n            left[i] = maxHeights[i] if i == 0 else min(left[i - 1] + 1, maxHeights[i])\n        \n        # Right scan\n        for i in range(len(maxHeights) - 1, -1, -1):\n            right[i] = maxHeights[i] if i == len(maxHeights) - 1 else min(right[i + 1] + 1, maxHeights[i])\n        \n        # Calculate the maximum sum of the minimum of left and right scans\n        max_sum = sum(min(left[i], right[i]) for i in range(len(maxHeights)))\n        return max_sum"
}