{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52228000,
    "question_id": "3114",
    "elapsed_time": 98,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741594639,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162434723",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} maxHeights\n * @return {number}\n */\nvar maximumSumOfHeights = function(maxHeights) {\n    const n = maxHeights.length;\n    let leftMax = new Array(n).fill(0);\n    let rightMax = new Array(n).fill(0);\n    let maxSum = 0;\n\n    // Calculate maximum heights from the left\n    leftMax[0] = maxHeights[0];\n    for (let i = 1; i < n; i++) {\n        leftMax[i] = Math.min(maxHeights[i], leftMax[i-1] + 1);\n    }\n\n    // Calculate maximum heights from the right\n    rightMax[n-1] = maxHeights[n-1];\n    for (let i = n-2; i >= 0; i--) {\n        rightMax[i] = Math.min(maxHeights[i], rightMax[i+1] + 1);\n    }\n\n    // Calculate the maximum possible sum of heights\n    for (let i = 0; i < n; i++) {\n        maxSum += Math.min(leftMax[i], rightMax[i]);\n    }\n\n    return maxSum;\n};"
}