{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51064000,
    "question_id": "3114",
    "elapsed_time": 111,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741550869,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 87,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162434381",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} maxHeights\n * @return {number}\n */\nvar maximumSumOfHeights = function(maxHeights) {\n    let maxSum = 0;\n\n    for (let peak = 0; peak < maxHeights.length; peak++) {\n        let sum = maxHeights[peak];\n        let leftMax = maxHeights[peak];\n        for (let left = peak - 1; left >= 0; left--) {\n            leftMax = Math.min(leftMax - 1, maxHeights[left]);\n            sum += leftMax;\n            if (leftMax === 1) break;\n        }\n\n        let rightMax = maxHeights[peak];\n        for (let right = peak + 1; right < maxHeights.length; right++) {\n            rightMax = Math.min(rightMax - 1, maxHeights[right]);\n            sum += rightMax;\n            if (rightMax === 1) break;\n        }\n\n        maxSum = Math.max(maxSum, sum);\n    }\n\n    return maxSum;\n};"
}