{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26960000,
    "question_id": "3114",
    "elapsed_time": 64,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741013902,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 160,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162430338",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long maximumSumOfHeights(vector<int>& maxHeights) {\n        int n = maxHeights.size();\n        long long maxSum = 0;\n\n        for (int peak = 0; peak < n; ++peak) {\n            // Calculate sum for the current peak\n            long long sum = maxHeights[peak];\n            int leftHeight = maxHeights[peak];\n            int rightHeight = maxHeights[peak];\n\n            // Expand to the left of the peak\n            for (int i = peak - 1; i >= 0; --i) {\n                leftHeight = min(leftHeight - 1, maxHeights[i]);\n                sum += max(leftHeight, 1); // Ensure height is at least 1\n            }\n\n            // Expand to the right of the peak\n            for (int i = peak + 1; i < n; ++i) {\n                rightHeight = min(rightHeight - 1, maxHeights[i]);\n                sum += max(rightHeight, 1); // Ensure height is at least 1\n            }\n\n            // Update maxSum if the current sum is greater\n            maxSum = max(maxSum, sum);\n        }\n\n        return maxSum;\n    }\n};"
}