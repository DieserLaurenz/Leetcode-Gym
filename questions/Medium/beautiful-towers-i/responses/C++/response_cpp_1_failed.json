{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27868000,
    "question_id": "3114",
    "elapsed_time": 30,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741060134,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162430702",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long maximumSumOfHeights(vector<int>& maxHeights) {\n        int n = maxHeights.size();\n        vector<int> leftMax(n), rightMax(n);\n\n        // Precompute the maximum height from the left\n        leftMax[0] = maxHeights[0];\n        for (int i = 1; i < n; ++i) {\n            leftMax[i] = min(maxHeights[i], leftMax[i - 1] + 1);\n        }\n\n        // Precompute the maximum height from the right\n        rightMax[n - 1] = maxHeights[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            rightMax[i] = min(maxHeights[i], rightMax[i + 1] + 1);\n        }\n\n        // Calculate the maximum sum of heights\n        long long maxSum = 0;\n        for (int i = 0; i < n; ++i) {\n            // Ensure the height respects both left and right constraints\n            int height = min(leftMax[i], rightMax[i]);\n            maxSum += height;\n        }\n\n        return maxSum;\n    }\n};"
}