{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63232000,
    "question_id": "3114",
    "elapsed_time": 1383,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706750706857,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162503468",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_sum_of_heights(MaxHeights :: [integer()]) -> integer().\nmaximum_sum_of_heights(MaxHeights) ->\n    N = length(MaxHeights),\n    LeftMax = lists:foldl(fun(X, [H|T]) -> [min(X, H+1)|[H|T]] end, [1], MaxHeights),\n    RightMax = lists:foldl(fun(X, [H|T]) -> [min(X, H+1)|[H|T]] end, [1], lists:reverse(MaxHeights)),\n    RightMaxRev = lists:reverse(RightMax),\n    MaxHeightsSum = lists:zipwith(fun(X, Y) -> min(X, Y) end, LeftMax, RightMaxRev),\n    lists:sum(MaxHeightsSum).\n\nmin(X, Y) -> if X < Y -> X; true -> Y end."
}