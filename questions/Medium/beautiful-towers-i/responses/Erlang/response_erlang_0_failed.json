{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63320000,
    "question_id": "3114",
    "elapsed_time": 1803,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706750652824,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162503022",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_sum_of_heights(MaxHeights :: [integer()]) -> integer().\nmaximum_sum_of_heights(MaxHeights) ->\n    N = length(MaxHeights),\n    lists:foldl(fun(Peak, MaxSum) ->\n                    Left = lists:foldl(fun(X, Acc) -> [min(X, hd(Acc)) | Acc] end, [lists:nth(Peak, MaxHeights)], lists:sublist(MaxHeights, Peak - 1)),\n                    Right = lists:foldl(fun(X, Acc) -> [min(X, hd(Acc)) | Acc] end, [lists:nth(Peak, MaxHeights)], lists:reverse(lists:nthtail(Peak, MaxHeights))),\n                    Sum = lists:sum(Left) + lists:sum(tl(lists:reverse(Right))) - lists:nth(Peak, MaxHeights),\n                    max(Sum, MaxSum)\n                end, 0, lists:seq(1, N)).\n\nmin(X, Y) -> if X < Y -> X; true -> Y end."
}