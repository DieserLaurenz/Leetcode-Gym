{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 8: exception error: badarg",
    "full_runtime_error": "Line 8: exception error: badarg\n[{erlang,hd,[[]],[{error_info,#{module => erl_erts_errors}}]},\n {solution,left_max_heights,2,[{file,\"solution.erl\"},{line,8}]},\n {solution,maximum_sum_of_heights,1,[{file,\"solution.erl\"},{line,3}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,35}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,23}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,52}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59364000,
    "question_id": "3114",
    "elapsed_time": 1384,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706750755540,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1162503841",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_sum_of_heights(MaxHeights :: [integer()]) -> integer().\nmaximum_sum_of_heights(MaxHeights) ->\n    LeftMax = left_max_heights(MaxHeights, []),\n    RightMax = right_max_heights(lists:reverse(MaxHeights), []),\n    CombinedMax = [min(L, R) || {L, R} <- lists:zip(LeftMax, lists:reverse(RightMax))],\n    lists:sum(CombinedMax).\n\nleft_max_heights([H|T], Acc) when T =/= [] ->\n    left_max_heights(T, [max(H, hd(Acc) + 1) | Acc]);\nleft_max_heights(_, Acc) ->\n    lists:reverse(Acc).\n\nright_max_heights([H|T], Acc) when T =/= [] ->\n    right_max_heights(T, [max(H, hd(Acc) + 1) | Acc]);\nright_max_heights(_, Acc) ->\n    lists:reverse(Acc).\n\nmax(X, Y) ->\n    if X > Y -> X; true -> Y end."
}