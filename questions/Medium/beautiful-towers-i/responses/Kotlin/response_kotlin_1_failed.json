{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38348000,
    "question_id": "3114",
    "elapsed_time": 235,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706742065549,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1162438076",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSumOfHeights(maxHeights: List<Int>): Long {\n        val n = maxHeights.size\n        val leftMax = IntArray(n)\n        val rightMax = IntArray(n)\n\n        // Compute maximum height from left to right\n        leftMax[0] = maxHeights[0]\n        for (i in 1 until n) {\n            leftMax[i] = minOf(leftMax[i - 1] + 1, maxHeights[i])\n        }\n\n        // Compute maximum height from right to left\n        rightMax[n - 1] = maxHeights[n - 1]\n        for (i in n - 2 downTo 0) {\n            rightMax[i] = minOf(rightMax[i + 1] + 1, maxHeights[i])\n        }\n\n        // Calculate the maximum possible sum\n        var maxSum: Long = 0\n        for (i in 0 until n) {\n            maxSum += minOf(leftMax[i], rightMax[i])\n        }\n\n        return maxSum\n    }\n}"
}