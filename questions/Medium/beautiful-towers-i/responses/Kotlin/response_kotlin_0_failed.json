{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39000000,
    "question_id": "3114",
    "elapsed_time": 261,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706742023562,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 87,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1162437782",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSumOfHeights(maxHeights: List<Int>): Long {\n        val n = maxHeights.size\n        var maxSum: Long = 0\n\n        // Iterate through all possible peaks\n        for (peak in maxHeights.indices) {\n            var sum: Long = maxHeights[peak].toLong()\n            var minHeightLeft = maxHeights[peak]\n            var minHeightRight = maxHeights[peak]\n\n            // Form mountain to the left of the peak\n            for (i in peak - 1 downTo 0) {\n                minHeightLeft = minOf(minHeightLeft - 1, maxHeights[i])\n                sum += minHeightLeft\n            }\n\n            // Form mountain to the right of the peak\n            for (i in peak + 1 until n) {\n                minHeightRight = minOf(minHeightRight - 1, maxHeights[i])\n                sum += minHeightRight\n            }\n\n            // Update maxSum if this formation has a higher sum\n            maxSum = maxOf(maxSum, sum)\n        }\n\n        return maxSum\n    }\n}"
}