{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "160 ms",
    "memory": 56848000,
    "question_id": "3114",
    "elapsed_time": 373,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706741702898,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 786,
    "total_testcases": 786,
    "runtime_percentile": 100,
    "status_memory": "56.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "TypeScript",
    "submission_id": "1162435498",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function maximumSumOfHeights(maxHeights: number[]): number {\n    const n = maxHeights.length;\n    let maxSum = 0;\n\n    for (let peak = 0; peak < n; peak++) {\n        const heights = Array(n).fill(0);\n        heights[peak] = maxHeights[peak];\n\n        // Calculate maximum heights to the left of the peak\n        for (let i = peak - 1; i >= 0; i--) {\n            heights[i] = Math.min(heights[i + 1], maxHeights[i]);\n        }\n\n        // Calculate maximum heights to the right of the peak\n        for (let i = peak + 1; i < n; i++) {\n            heights[i] = Math.min(heights[i - 1], maxHeights[i]);\n        }\n\n        // Sum the heights for the current configuration\n        const sum = heights.reduce((acc, height) => acc + height, 0);\n\n        // Update the maximum sum\n        maxSum = Math.max(maxSum, sum);\n    }\n\n    return maxSum;\n}"
}