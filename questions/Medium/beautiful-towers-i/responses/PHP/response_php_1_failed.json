{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20096000,
    "question_id": "3114",
    "elapsed_time": 587,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741798012,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 87,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162436227",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $maxHeights\n     * @return Integer\n     */\n    function maximumSumOfHeights($maxHeights) {\n        $n = count($maxHeights);\n        $maxSum = 0;\n\n        for ($peak = 0; $peak < $n; $peak++) {\n            $currentSum = $maxHeights[$peak];\n            $leftMax = $maxHeights[$peak];\n            $rightMax = $maxHeights[$peak];\n\n            // Build towards the left\n            for ($i = $peak - 1; $i >= 0; $i--) {\n                $leftMax = min($leftMax - 1, $maxHeights[$i]); // Ensure it's strictly increasing towards the peak\n                $currentSum += max(0, $leftMax); // Avoid negative heights\n            }\n\n            // Build towards the right\n            for ($i = $peak + 1; $i < $n; $i++) {\n                $rightMax = min($rightMax - 1, $maxHeights[$i]); // Ensure it's strictly decreasing after the peak\n                $currentSum += max(0, $rightMax); // Avoid negative heights\n            }\n\n            $maxSum = max($maxSum, $currentSum); // Update max sum if this peak offers a better sum\n        }\n\n        return $maxSum;\n    }\n}"
}