{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19684000,
    "question_id": "3114",
    "elapsed_time": 40,
    "compare_result": "000111011100111110000000000000001000000000010000000000001100000000000000001100101000000000000100110001100000000000000000001001100000100010000000100000000000000000000000001000000000000000000000100000100000000000000010000000000000000000000000010000000000000100001000000000000000000000000000000000000000010000000000000110000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1706741856725,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162436610",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * Calculate the maximum possible sum of heights for a beautiful configuration of towers.\n     * \n     * @param Integer[] $maxHeights The maximum heights for each tower.\n     * @return Integer The maximum sum of heights.\n     */\n    function maximumSumOfHeights($maxHeights) {\n        $n = count($maxHeights);\n        $left = array_fill(0, $n, 0);  // Maximum heights when scanning from left to right.\n        $right = array_fill(0, $n, 0); // Maximum heights when scanning from right to left.\n        $maxSum = 0;\n\n        // Calculate the maximum height from left to right.\n        $left[0] = $maxHeights[0];\n        for ($i = 1; $i < $n; $i++) {\n            $left[$i] = min($maxHeights[$i], $left[$i - 1] + 1);\n        }\n\n        // Calculate the maximum height from right to left.\n        $right[$n - 1] = $maxHeights[$n - 1];\n        for ($i = $n - 2; $i >= 0; $i--) {\n            $right[$i] = min($maxHeights[$i], $right[$i + 1] + 1);\n        }\n\n        // Find the maximum sum by taking the minimum of left and right calculations.\n        for ($i = 0; $i < $n; $i++) {\n            $maxSum += min($left[$i], $right[$i]);\n        }\n\n        return $maxSum;\n    }\n}"
}