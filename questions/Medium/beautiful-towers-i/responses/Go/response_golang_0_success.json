{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "17 ms",
    "memory": 3820000,
    "question_id": "3114",
    "elapsed_time": 25,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706742288195,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 786,
    "total_testcases": 786,
    "runtime_percentile": 42.857000000000006,
    "status_memory": "3.8 MB",
    "memory_percentile": 85.7143,
    "pretty_lang": "Go",
    "submission_id": "1162439672",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func maximumSumOfHeights(maxHeights []int) int64 {\n    n := len(maxHeights)\n    var maxSum int64 = 0\n\n    for peak := 0; peak < n; peak++ {\n        sum := int64(maxHeights[peak])\n        leftMax := maxHeights[peak]\n        rightMax := maxHeights[peak]\n\n        // Expand to the left of the peak\n        for i := peak - 1; i >= 0; i-- {\n            if maxHeights[i] < leftMax {\n                leftMax = maxHeights[i]\n            }\n            sum += int64(leftMax)\n        }\n\n        // Expand to the right of the peak\n        for i := peak + 1; i < n; i++ {\n            if maxHeights[i] < rightMax {\n                rightMax = maxHeights[i]\n            }\n            sum += int64(rightMax)\n        }\n\n        // Update maxSum if necessary\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n\n    return maxSum\n}"
}