{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11812000,
    "question_id": "3114",
    "elapsed_time": 72,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735063692,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184413232",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumSumOfHeights(self, maxHeights):\n        \"\"\"\n        :type maxHeights: List[int]\n        :rtype: int\n        \"\"\"\n        def calculate_max_sum(heights):\n            return sum(min(prefix_max[i], suffix_max[i]) for i in range(len(heights)))\n        \n        n = len(maxHeights)\n        prefix_max = maxHeights[:]\n        suffix_max = maxHeights[:]\n        \n        # Forward pass to enforce increasing property\n        for i in range(1, n):\n            prefix_max[i] = min(prefix_max[i], prefix_max[i - 1] + 1)\n        \n        # Backward pass to enforce decreasing property\n        for i in range(n - 2, -1, -1):\n            suffix_max[i] = min(suffix_max[i], suffix_max[i + 1] + 1)\n        \n        # Calculate the maximum possible sum\n        return calculate_max_sum(maxHeights)"
}