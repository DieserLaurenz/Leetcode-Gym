{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11752000,
    "question_id": "3114",
    "elapsed_time": 85,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735032925,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 136,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184413037",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumSumOfHeights(self, maxHeights):\n        \"\"\"\n        :type maxHeights: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(maxHeights)\n        prefix_max = [0] * n\n        suffix_max = [0] * n\n        current_max = 0\n\n        # Calculate prefix maximums\n        for i in range(n):\n            current_max = max(current_max, maxHeights[i])\n            prefix_max[i] = current_max\n\n        current_max = 0\n        # Calculate suffix maximums\n        for i in range(n - 1, -1, -1):\n            current_max = max(current_max, maxHeights[i])\n            suffix_max[i] = current_max\n\n        # Calculate maximum sum by taking minimum of prefix and suffix maximums\n        max_sum = 0\n        for i in range(n):\n            max_sum += min(prefix_max[i], suffix_max[i])\n\n        return max_sum"
}