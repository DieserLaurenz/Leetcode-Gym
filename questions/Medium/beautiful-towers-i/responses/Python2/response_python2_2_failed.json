{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11824000,
    "question_id": "3114",
    "elapsed_time": 69,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[5,3,4,1,1]",
    "expected_output": "13",
    "task_finish_time": 1708735095904,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 45,
    "total_testcases": 786,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184413421",
    "input_formatted": "[5,3,4,1,1]",
    "input": "[5,3,4,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumSumOfHeights(self, maxHeights):\n        \"\"\"\n        :type maxHeights: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(maxHeights)\n        left_max = [0] * n\n        right_max = [0] * n\n        result = 0\n\n        # Scan from left to right\n        for i in range(n):\n            if i == 0:\n                left_max[i] = maxHeights[i]\n            else:\n                left_max[i] = min(left_max[i - 1] + 1, maxHeights[i])\n\n        # Scan from right to left\n        for i in range(n - 1, -1, -1):\n            if i == n - 1:\n                right_max[i] = maxHeights[i]\n            else:\n                right_max[i] = min(right_max[i + 1] + 1, maxHeights[i])\n\n        # Calculate the maximum possible sum of heights\n        for i in range(n):\n            result += min(left_max[i], right_max[i])\n\n        return result"
}