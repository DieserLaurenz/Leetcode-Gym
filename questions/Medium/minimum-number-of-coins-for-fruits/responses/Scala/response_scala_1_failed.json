{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58464000,
    "question_id": "3209",
    "elapsed_time": 737,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[3,1,2]",
    "expected_output": "4",
    "task_finish_time": 1707844623140,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 38,
    "total_testcases": 578,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1174359717",
    "input_formatted": "[3,1,2]",
    "input": "[3,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCoins(prices: Array[Int]): Int = {\n        val n = prices.length\n        val dp = Array.fill(n + 1)(Int.MaxValue)\n        dp(0) = 0\n        for (i <- 1 to n) {\n            for (j <- 0 until i) {\n                if (dp(j) != Int.MaxValue) {\n                    val offerEnd = Math.min(n, i + j)\n                    dp(offerEnd) = Math.min(dp(offerEnd), dp(j) + prices(i - 1))\n                }\n            }\n        }\n        dp(n)\n    }\n}"
}