{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "+: contract violation",
    "full_runtime_error": "+: contract violation\n  expected: number?\n  given: #<procedure:->\n  context...:\n   solution.rkt:1:0: minimum-coins\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:19:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100128000,
    "question_id": "3209",
    "elapsed_time": 242,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,1,2]",
    "expected_output": "4",
    "task_finish_time": 1707844851906,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 578,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1174363531",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-coins prices)\n  (-> (listof exact-integer?) exact-integer?)\n  (define (min-coins idx)\n    (if (>= idx (length prices))\n        0\n        (let loop ((i 1) (min (list-ref prices idx)))\n          (if (> (+ idx i) (length prices))\n              min\n              (let ((cost (+ (list-ref prices (+ idx i - 1)) (min-coins (+ idx i)))))\n                (if (< cost min)\n                    (loop (+ i 1) cost)\n                    (loop (+ i 1) min))))))\n    )\n  (min-coins 0))"
}