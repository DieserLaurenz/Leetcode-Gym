{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3328000,
    "question_id": "3209",
    "elapsed_time": 16,
    "compare_result": "10000000000000000000001000000001000000000001000000000001000000000000000000000000000000010000000000000010000000000101000000100010000000010000000000000000000000000000010000000000000000000000000000010000000000000000000000000000000001000010000000000010000000000000000000000000000000000001101010000001000000000000000001000000000000100000010100000010000000001001000100000001000000000000000000000000000000000000000000000000000000000000000000000000010000000000100000000000000000000000110000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000100",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,10,1,1]",
    "expected_output": "2",
    "task_finish_time": 1707844433537,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 37,
    "total_testcases": 578,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1174356558",
    "input_formatted": "[1,10,1,1]",
    "input": "[1,10,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumCoins(prices []int) int {\n    n := len(prices)\n    dp := make([]int, n+1)\n    for i := 1; i <= n; i++ {\n        dp[i] = 1<<31 - 1 // Initialize with max int\n    }\n    dp[0] = 0 // Starting point\n\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            dp[j+1] = min(dp[j+1], dp[i]+prices[i])\n            if i+prices[i] >= n {\n                break // No need to proceed if the offer covers all remaining fruits\n            }\n        }\n    }\n\n    return dp[n]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}