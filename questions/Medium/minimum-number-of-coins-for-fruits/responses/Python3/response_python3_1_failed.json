{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16764000,
    "question_id": "3209",
    "elapsed_time": 1334,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[3,1,2]",
    "expected_output": "4",
    "task_finish_time": 1708819313854,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 53,
    "total_testcases": 578,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185250380",
    "input_formatted": "[3,1,2]",
    "input": "[3,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minimumCoins(self, prices: List[int]) -> int:\n        n = len(prices)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # No coins needed without any fruits\n        \n        for i in range(1, n + 1):\n            for j in range(i):\n                dp[i] = min(dp[i], dp[j] + prices[i - 1])\n                # Update dp value considering the offer\n                if i + (i - j) <= n:\n                    dp[i + (i - j)] = min(dp[i + (i - j)], dp[j] + prices[i - 1])\n        \n        return dp[n]"
}