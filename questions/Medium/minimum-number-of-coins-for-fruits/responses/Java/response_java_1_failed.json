{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43996000,
    "display_runtime": "1",
    "question_id": "3209",
    "elapsed_time": 118,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[3,1,2]",
    "expected_output": "4",
    "task_finish_time": 1707835123311,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 578,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174221104",
    "input_formatted": "[3,1,2]",
    "input": "[3,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumCoins(int[] prices) {\n        int n = prices.length;\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) dp[i] = Integer.MAX_VALUE;\n        dp[0] = prices[0];\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j <= Math.min(n, i + prices[i] + 1); j++) {\n                if (j < n) dp[j] = Math.min(dp[j], dp[i] + prices[j]);\n            }\n            if (i + prices[i] + 1 < n) dp[i + prices[i] + 1] = Math.min(dp[i + prices[i] + 1], dp[i]);\n            else break;\n        }\n        \n        return dp[n - 1];\n    }\n}"
}