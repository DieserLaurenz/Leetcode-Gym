{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43976000,
    "display_runtime": "1",
    "question_id": "3209",
    "elapsed_time": 178,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[3,1,2]",
    "expected_output": "4",
    "task_finish_time": 1707835095109,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 40,
    "total_testcases": 578,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174220743",
    "input_formatted": "[3,1,2]",
    "input": "[3,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumCoins(int[] prices) {\n        int n = prices.length;\n        int[] dp = new int[n + 1];\n        dp[n] = 0; // Base case: no coins needed to buy 0 fruits.\n        for (int i = n - 1; i >= 0; i--) {\n            dp[i] = prices[i] + dp[Math.min(i + prices[i] + 1, n)]; // Buy ith fruit and get next 'prices[i]' fruits for free.\n            if (i + 1 < n) {\n                dp[i] = Math.min(dp[i], dp[i + 1]); // Compare with not buying and just moving to next fruit.\n            }\n        }\n        return dp[0];\n    }\n}"
}