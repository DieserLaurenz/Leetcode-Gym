{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44068000,
    "display_runtime": "7",
    "question_id": "3209",
    "elapsed_time": 149,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[3,1,2]",
    "expected_output": "4",
    "task_finish_time": 1707835152354,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 49,
    "total_testcases": 578,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174221458",
    "input_formatted": "[3,1,2]",
    "input": "[3,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumCoins(int[] prices) {\n        int n = prices.length;\n        int[] dp = new int[n];\n        dp[0] = prices[0]; // Cost of the first fruit\n        for (int i = 1; i < n; i++) {\n            dp[i] = dp[i - 1] + prices[i]; // Initial cost without offers\n            for (int j = 0; j < i; j++) {\n                if (j + prices[j] >= i) { // Check if the offer from buying the jth fruit covers ith fruit\n                    dp[i] = Math.min(dp[i], dp[j] + prices[i]); // Min cost between current and new offer\n                }\n            }\n        }\n        int minCost = dp[0];\n        for (int i = 1; i < n; i++) {\n            if (i + prices[i] >= n) { // Last purchase can cover all remaining fruits\n                minCost = Math.min(minCost, dp[i]);\n            }\n        }\n        return minCost;\n    }\n}"
}