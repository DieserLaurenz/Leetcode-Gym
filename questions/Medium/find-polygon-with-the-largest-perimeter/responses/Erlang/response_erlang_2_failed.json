{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 252588000,
    "question_id": "3262",
    "elapsed_time": 2280,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,12,1,2,5,50,3]",
    "expected_output": "12",
    "task_finish_time": 1707314696275,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 340,
    "total_testcases": 980,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1168821493",
    "input_formatted": "[1,12,1,2,5,50,3]",
    "input": "[1,12,1,2,5,50,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec largest_perimeter(Nums :: [integer()]) -> integer().\nlargest_perimeter(Nums) ->\n    Sorted = lists:reverse(lists:sort(Nums)),\n    try_largest_perimeter(Sorted).\n\n-spec try_largest_perimeter([integer()]) -> integer().\ntry_largest_perimeter([A, B, C | T]) ->\n    if \n        A < B + C -> A + B + C;\n        true -> try_largest_perimeter([B, C | T])\n    end;\ntry_largest_perimeter(_) -> -1."
}