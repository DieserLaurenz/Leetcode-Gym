{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31372000,
    "question_id": "3262",
    "elapsed_time": 325,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,12,1,2,5,50,3]",
    "expected_output": "12",
    "task_finish_time": 1709043472363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 68,
    "total_testcases": 980,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1187761936",
    "input_formatted": "[1,12,1,2,5,50,3]",
    "input": "[1,12,1,2,5,50,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function largestPerimeter($nums) {\n        rsort($nums); // Sort numbers in descending order\n        for ($i = 0; $i < count($nums) - 2; $i++) {\n            if ($nums[$i] < $nums[$i + 1] + $nums[$i + 2]) {\n                return $nums[$i] + $nums[$i + 1] + $nums[$i + 2];\n            }\n        }\n        return 0; // Changed -1 to 0 to correct the logic as per problem statement.\n    }\n}"
}