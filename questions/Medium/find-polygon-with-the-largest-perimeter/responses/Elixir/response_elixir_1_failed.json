{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 10: ** (Protocol.UndefinedError) protocol Enumerable not implemented for 5 of type Integer",
    "full_runtime_error": "Line 10: ** (Protocol.UndefinedError) protocol Enumerable not implemented for 5 of type Integer\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3\n    (elixir 1.15.7) lib/enum.ex:3505: Enum.take/2\n    solution.ex:10: anonymous fn/2 in Solution.largest_perimeter/1\n    (elixir 1.15.7) lib/enum.ex:4830: Enumerable.List.reduce/3\n    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3\n    solution.ex:31: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 76256000,
    "question_id": "3262",
    "elapsed_time": 539,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,5,5]",
    "expected_output": "15",
    "task_finish_time": 1707314776851,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 980,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168822564",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec largest_perimeter(nums :: [integer]) :: integer\n  def largest_perimeter(nums) do\n    nums\n    |> Enum.sort(:desc)\n    |> Enum.reduce_while(-1, fn x, acc ->\n      case acc do\n        -1 -> {:cont, x}\n        _ -> \n          [a, b | _] = Enum.take(acc, 2)\n          if a + b > x, do: {:halt, a + b + x}, else: {:cont, [x | acc]}\n      end\n    end)\n  end\nend"
}