{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11032000,
    "question_id": "3262",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,12,1,2,5,50,3]",
    "expected_output": "12",
    "task_finish_time": 1707295150898,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 340,
    "total_testcases": 980,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1168611724",
    "input_formatted": "[1,12,1,2,5,50,3]",
    "input": "[1,12,1,2,5,50,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long largestPerimeter(int* nums, int numsSize) {\n    // Sort the array in descending order\n    for (int i = 0; i < numsSize - 1; ++i) {\n        for (int j = 0; j < numsSize - i - 1; ++j) {\n            if (nums[j] < nums[j + 1]) {\n                int temp = nums[j];\n                nums[j] = nums[j + 1];\n                nums[j + 1] = temp;\n            }\n        }\n    }\n\n    // Find the largest perimeter\n    for (int i = 0; i < numsSize - 2; ++i) {\n        if (nums[i] < nums[i + 1] + nums[i + 2]) {\n            return (long long)nums[i] + nums[i + 1] + nums[i + 2];\n        }\n    }\n\n    return -1; // If it's not possible to form any triangle\n}"
}