{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7348000,
    "question_id": "3240",
    "elapsed_time": 4007,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1707618230139,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 71,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171863226",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long findMaximumNumber(long long k, int x) {\n        long long left = 1, right = k * x; // Adjust the upper bound based on k and x\n        while (left < right) {\n            long long mid = left + (right - left) / 2;\n            if (calculateSum(mid, x) > k) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        // Check if we've gone too far (if the sum at left is greater than k, subtract one)\n        return (calculateSum(left, x) > k) ? left - 1 : left;\n    }\n\nprivate:\n    long long calculateSum(long long num, int x) {\n        long long sum = 0;\n        for (long long i = 1; i <= num; ++i) {\n            long long bits = 0;\n            for (long long j = i; j > 0; j >>= 1) {\n                if (j & 1) ++bits;\n            }\n            if (i % x == 0) sum += bits; // Only add bits if the position is divisible by x\n        }\n        return sum;\n    }\n};"
}