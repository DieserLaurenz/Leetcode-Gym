{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8036000,
    "question_id": "3240",
    "elapsed_time": 24,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707618197317,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171863046",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long findMaximumNumber(long long k, int x) {\n        long long low = 0, high = 2e18;\n        while (low < high) {\n            long long mid = low + (high - low + 1) / 2;\n            if (check(mid, x) <= k) low = mid;\n            else high = mid - 1;\n        }\n        return low;\n    }\n\nprivate:\n    long long check(long long num, int x) {\n        long long sum = 0;\n        for (long long i = 1; i <= num; i *= 2) {\n            // Calculate the contribution of bits set at positions multiple of x\n            for (int j = 1; j <= x; j++) {\n                if ((i * j) > num) break;\n                sum += std::min(num - i * j + 1, i);\n            }\n        }\n        return sum;\n    }\n};"
}