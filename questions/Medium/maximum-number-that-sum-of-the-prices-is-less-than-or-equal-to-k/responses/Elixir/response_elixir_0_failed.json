{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "error: undefined function &&&/2 (expected Solution to define such a function or for it to be imported, but none are available)",
    "full_compile_error": "error: undefined function &&&/2 (expected Solution to define such a function or for it to be imported, but none are available)\nLine 18:   Solution.bit_set?/3\nerror: undefined function <<</2 (expected Solution to define such a function or for it to be imported, but none are available)\nLine 18:   Solution.bit_set?/3\n** (CompileError) solution.ex: cannot compile module Solution (errors have been logged)",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3240",
    "task_finish_time": 1707628497299,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1172017668",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_maximum_number(k :: integer, x :: integer) :: integer\n  def find_maximum_number(k, x) do\n    find_maximum_number(0, k, x, 1, 0)\n  end\n\n  defp find_maximum_number(num, k, x, bit_pos, total_price) do\n    if total_price > k do\n      num - 1\n    else\n      new_total_price = total_price + Enum.count(1..num, fn n -> bit_set?(n, bit_pos, x) end)\n      find_maximum_number(num + 1, k, x, bit_pos + x, new_total_price)\n    end\n  end\n\n  defp bit_set?(n, bit_pos, x) do\n    bit = bit_pos - 1\n    n &&& (1 <<< bit) != 0 and rem(bit, x) == 0\n  end\nend"
}