{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211444000,
    "question_id": "3240",
    "elapsed_time": 242,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707619601565,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171886848",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} k\n# @param {Integer} x\n# @return {Integer}\ndef find_maximum_number(k, x)\n    low = 0\n    high = 10**18\n    while low < high\n        mid = (low + high + 1) / 2\n        sum = 0\n        p = 1\n        while p <= mid\n            sum += [mid / (x * p) - (mid / (2 * x * p)), 0].max\n            p *= 2\n        end\n        if sum <= k\n            low = mid\n        else\n            high = mid - 1\n        end\n    end\n    low\nend"
}