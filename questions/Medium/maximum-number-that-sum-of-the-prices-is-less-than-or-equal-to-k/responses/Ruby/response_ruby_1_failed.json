{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211708000,
    "question_id": "3240",
    "elapsed_time": 3045,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1707619580120,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1171886338",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} k\n# @param {Integer} x\n# @return {Integer}\ndef find_maximum_number(k, x)\n  left, right = 1, 2 * k\n  while left < right\n    mid = (left + right) / 2\n    sum = 0\n    (1..mid).each do |i|\n      sum += (i.to_s(2).split('').reverse.each_with_index.reduce(0) { |acc, (val, idx)| idx % x == 0 && val == '1' ? acc + 1 : acc })\n    end\n    if sum <= k\n      left = mid + 1\n    else\n      right = mid\n    end\n  end\n  left - 1\nend"
}