{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2268000,
    "question_id": "3240",
    "elapsed_time": 15,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707619343658,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171881103",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func findMaximumNumber(k int64, x int) int64 {\n    left, right := int64(1), k*int64(x)\n    getCount := func(num int64) int64 {\n        count := int64(0)\n        for i := int64(1); i <= 60; i++ {\n            div := int64(1) << (i - 1)\n            if i%int64(x) == 0 {\n                count += (num / div)\n            }\n        }\n        return count\n    }\n    var mid int64\n    for left <= right {\n        mid = left + (right-left)/2\n        if getCount(mid) <= k {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left - 1\n}"
}