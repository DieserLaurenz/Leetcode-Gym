{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2124000,
    "question_id": "3240",
    "elapsed_time": 3010,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1707619314710,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 238,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171880384",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func findMaximumNumber(k int64, x int) int64 {\n    left, right := int64(1), k\n    check := func(num int64) int64 {\n        total := int64(0)\n        for i := int64(1); i <= num; i++ {\n            bits := int64(0)\n            for j := i; j > 0; j >>= 1 {\n                if j&1 == 1 {\n                    if (bits+1)%int64(x) == 0 {\n                        total++\n                    }\n                }\n                bits++\n            }\n        }\n        return total\n    }\n    var ans int64\n    for left <= right {\n        mid := left + (right-left)/2\n        if check(mid) <= k {\n            ans = mid\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return ans\n}"
}