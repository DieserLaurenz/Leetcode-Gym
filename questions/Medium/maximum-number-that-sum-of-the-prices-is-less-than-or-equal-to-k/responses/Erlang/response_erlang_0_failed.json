{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58428000,
    "question_id": "3240",
    "elapsed_time": 5065,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707628395262,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1172016570",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_maximum_number(K :: integer(), X :: integer()) -> integer().\nfind_maximum_number(K, X) ->\n    find_maximum_number(K, X, 1, K).\n\nfind_maximum_number(K, X, L, R) when L < R ->\n    Mid = (L + R) div 2,\n    Price = price_sum(Mid, X),\n    if\n        Price < K -> find_maximum_number(K, X, Mid + 1, R);\n        Price > K -> find_maximum_number(K, X, L, Mid);\n        true -> Mid\n    end;\nfind_maximum_number(_, _, L, _) -> L - 1.\n\nprice_sum(Num, X) ->\n    price_sum(Num, X, Num, 0).\n\nprice_sum(0, _, _, Acc) ->\n    Acc;\nprice_sum(Num, X, Original, Acc) ->\n    Bits = integer_to_list(Num, 2),\n    Price = price(Bits, X, 1, 0),\n    NewAcc = Acc + Price,\n    if\n        NewAcc >= Original -> Original;\n        true -> price_sum(Num - 1, X, Original, NewAcc)\n    end.\n\nprice([], _, _, Acc) ->\n    Acc;\nprice([H|T], X, Index, Acc) ->\n    NewAcc = case H == $1 andalso Index rem X == 0 of\n        true -> Acc + 1;\n        false -> Acc\n    end,\n    price(T, X, Index + 1, NewAcc)."
}