{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "length: contract violation",
    "full_runtime_error": "length: contract violation\n  expected: list?\n  given: \"1\"\n  context...:\n   solution.rkt:1:0: find-maximum-number\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:16:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100208000,
    "question_id": "3240",
    "elapsed_time": 297,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707628336056,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172015996",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (find-maximum-number k x)\n  (-> exact-integer? exact-integer? exact-integer?)\n  (let loop ((num 1) (sum 0) (total-bits 0))\n    (if (> sum k)\n        (- num 1)\n        (let* ((bits (number->string num 2))\n               (price (for/sum ([i (in-range (length bits))])\n                        (if (and (= (modulo (+ i 1) x) 0) (equal? (string-ref bits (- (length bits) 1 i)) #\\1))\n                            1\n                            0))))\n          (loop (+ num 1) (+ sum price) (+ total-bits price))))))"
}