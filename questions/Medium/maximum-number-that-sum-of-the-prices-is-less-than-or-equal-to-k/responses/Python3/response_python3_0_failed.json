{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16380000,
    "question_id": "3240",
    "elapsed_time": 11012,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1708797381404,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185038504",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n        def price(n):\n            return sum((n >> i) & 1 for i in range(0, 64, x))\n        \n        low, high = 1, 2\n        while price(high) <= k:\n            low = high\n            high *= 2\n        \n        while low < high:\n            mid = (low + high + 1) // 2\n            if sum(price(i) for i in range(1, mid + 1)) <= k:\n                low = mid\n            else:\n                high = mid - 1\n        \n        return low"
}