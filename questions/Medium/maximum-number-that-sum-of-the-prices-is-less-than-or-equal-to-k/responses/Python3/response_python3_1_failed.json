{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16256000,
    "question_id": "3240",
    "elapsed_time": 11041,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1708797416332,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185038998",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n        left, right = 1, k\n        while left < right:\n            mid = (left + right + 1) // 2\n            if self.sum_of_prices(mid, x) > k:\n                right = mid - 1\n            else:\n                left = mid\n        return left\n\n    def sum_of_prices(self, num: int, x: int) -> int:\n        total, power = 0, x\n        while power <= num:\n            total += (num // power) * (power // x)\n            power *= x\n        return total"
}