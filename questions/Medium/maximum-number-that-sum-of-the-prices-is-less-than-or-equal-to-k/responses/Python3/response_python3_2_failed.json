{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16456000,
    "question_id": "3240",
    "elapsed_time": 11015,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "5389\n5",
    "expected_output": "5644",
    "task_finish_time": 1708797459483,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 253,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185039570",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution:\n    def findMaximumNumber(self, k: int, x: int) -> int:\n        def count_bits(num):\n            count = 0\n            while num:\n                count += num & 1\n                num >>= 1\n            return count\n\n        def calculate_sum(num):\n            sum = 0\n            for i in range(1, num + 1):\n                binary_repr = format(i, 'b')\n                for j in range(len(binary_repr)):\n                    if binary_repr[-(j + 1)] == '1' and (j + 1) % x == 0:\n                        sum += 1\n            return sum\n\n        low, high = 1, 2\n        while calculate_sum(high) <= k:\n            low = high\n            high *= 2\n\n        while low < high:\n            mid = low + (high - low) // 2\n            if calculate_sum(mid) <= k:\n                if calculate_sum(mid + 1) > k:\n                    return mid\n                low = mid + 1\n            else:\n                high = mid\n        return low"
}