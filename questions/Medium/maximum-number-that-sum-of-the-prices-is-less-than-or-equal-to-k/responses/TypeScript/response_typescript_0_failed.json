{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52400000,
    "question_id": "3240",
    "elapsed_time": 87,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1707618700100,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 19,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1171866228",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function findMaximumNumber(k: number, x: number): number {\n    let low = 1, high = 2 * k;\n    while (low < high) {\n        const mid = Math.floor((low + high + 1) / 2);\n        let sum = 0;\n        for (let i = x; i <= 32; i += x) {\n            sum += Math.floor(mid / (1 << i));\n        }\n        if (sum <= k) low = mid;\n        else high = mid - 1;\n    }\n    return low;\n};"
}