{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52320000,
    "question_id": "3240",
    "elapsed_time": 4004,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1707618733713,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 72,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1171866582",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function findMaximumNumber(k: number, x: number): number {\n    let left = 1, right = k;\n    const countSetBits = (num: number) => {\n        let count = 0;\n        while (num) {\n            count += num & 1;\n            num >>= 1;\n        }\n        return count;\n    };\n    const sumOfPrices = (num: number) => {\n        let sum = 0;\n        for (let i = 1; i <= num; ++i) {\n            let setBits = countSetBits(i);\n            let price = 0;\n            for (let bit = 1; bit <= setBits; ++bit) {\n                if ((bit % x) === 0) price++;\n            }\n            sum += price;\n        }\n        return sum;\n    };\n    while (left < right) {\n        const mid = Math.ceil((left + right) / 2);\n        if (sumOfPrices(mid) <= k) left = mid;\n        else right = mid - 1;\n    }\n    return sumOfPrices(left) <= k ? left : left - 1;\n};"
}