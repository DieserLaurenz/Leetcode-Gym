{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27068000,
    "question_id": "3240",
    "elapsed_time": 69,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707618543000,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1171865221",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long FindMaximumNumber(long k, int x) {\n        long low = 0, high = 2 * k; // Increase search space as the initial guess\n        while (low < high) {\n            long mid = low + (high - low + 1) / 2;\n            if (CalculateSum(mid, x) > k) high = mid - 1;\n            else low = mid;\n        }\n        return low;\n    }\n\n    private long CalculateSum(long n, int x) {\n        long sum = 0;\n        for (long bit = 1; bit <= 64; bit++) {\n            if (bit % x == 0) {\n                long p = 1L << (int)(bit - 1);\n                sum += Math.Max(0, n - p + 1);\n            }\n        }\n        return sum;\n    }\n}"
}