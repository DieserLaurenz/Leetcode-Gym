{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27236000,
    "question_id": "3240",
    "elapsed_time": 4009,
    "compare_result
    "code_output": "37",
    "std_output": "",
    "last_testcase": "19\n6",
    "expected_output": "50",
    "task_finish_time": 1707618513842,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 386,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1171865014",
    "input_formatted": "19, 6",
    "input": "19\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long FindMaximumNumber(long k, int x) {\n        long left = 1, right = 2*k; // Adjust the upper limit to ensure it's always higher than the possible maximum num\n        while (left < right) {\n            long mid = left + (right - left) / 2;\n            if (SumOfPrices(mid, x) <= k) left = mid + 1;\n            else right = mid;\n        }\n        return left - 1;\n    }\n\n    private long SumOfPrices(long num, int x) {\n        long sum = 0;\n        for (long i = 1; i <= num; i++) {\n            sum += CountSetBits(i, x);\n        }\n        return sum;\n    }\n\n    private int CountSetBits(long num, int x) {\n        int count = 0;\n        for (int pos = 1; num > 0; pos++, num >>= 1) {\n            if ((pos % x == 0) && (num & 1) == 1) count++;\n        }\n        return count;\n    }\n}"
}