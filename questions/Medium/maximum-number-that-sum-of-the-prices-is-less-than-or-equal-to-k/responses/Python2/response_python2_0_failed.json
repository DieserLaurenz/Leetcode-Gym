{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11540000,
    "question_id": "3240",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1708797246710,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185036417",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findMaximumNumber(self, k, x):\n        \"\"\"\n        :type k: int\n        :type x: int\n        :rtype: int\n        \"\"\"\n        def price(num):\n            return sum((num >> i) & 1 for i in range(0, 32, x))\n        \n        low, high = 1, k\n        while low < high:\n            mid = (low + high + 1) // 2\n            total_price = sum(price(num) for num in range(1, mid + 1))\n            if total_price <= k:\n                low = mid\n            else:\n                high = mid - 1\n                \n        return low"
}