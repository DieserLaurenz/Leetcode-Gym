{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 15: ValueError: negative shift count",
    "full_runtime_error": "ValueError: negative shift count\n    total += cycles * (1 << (pos - x)) + max(0, remainder - (1 << (pos - x)) + 1)\nLine 15 in bits_in_positions_upto (Solution.py)\n    while bits_in_positions_upto(right) < k:  # Increase the search space exponentially until it exceeds k\nLine 20 in findMaximumNumber (Solution.py)\n    ret = Solution().findMaximumNumber(param_1, param_2)\nLine 55 in _driver (Solution.py)\n    _driver()\nLine 65 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11484000,
    "question_id": "3240",
    "elapsed_time": 28,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1708797319578,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185037746",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findMaximumNumber(self, k, x):\n        \"\"\"\n        :type k: int\n        :type x: int\n        :rtype: int\n        \"\"\"\n        def bits_in_positions_upto(n):\n            # Count set bits at positions that are multiples of x for all numbers up to n\n            total = 0\n            for pos in range(x-1, 32, x):  # Check bits at positions that are multiples of x\n                # Every 2^pos numbers, there are 2^(pos-1) numbers that have the bit at 'pos' set\n                # Plus the remainder if n exceeds the current cycle\n                cycles, remainder = divmod(n, 1 << pos)\n                total += cycles * (1 << (pos - x)) + max(0, remainder - (1 << (pos - x)) + 1)\n            return total\n\n        # Binary search for the maximum number\n        left, right = 1, 2\n        while bits_in_positions_upto(right) < k:  # Increase the search space exponentially until it exceeds k\n            left = right\n            right <<= 1\n\n        while left < right:\n            mid = (left + right) // 2\n            if bits_in_positions_upto(mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n\n        return left if bits_in_positions_upto(left) == k else left - 1"
}