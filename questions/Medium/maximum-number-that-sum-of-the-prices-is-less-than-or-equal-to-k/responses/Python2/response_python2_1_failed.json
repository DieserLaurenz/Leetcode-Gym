{
    "status_code": 14,
    "lang": "python",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 11852000,
    "question_id": "3240",
    "elapsed_time": 11010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "5902\n7",
    "expected_output": "9414",
    "task_finish_time": 1708797289364,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 279,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185037133",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findMaximumNumber(self, k, x):\n        \"\"\"\n        :type k: int\n        :type x: int\n        :rtype: int\n        \"\"\"\n        def countSetBits(n):\n            count = 0\n            while n:\n                count += n & 1\n                n >>= 1\n            return count\n\n        def isValid(mid):\n            total = 0\n            for i in range(1, mid + 1):\n                binary = bin(i)[2:]\n                for j in range(len(binary)):\n                    if (len(binary) - j) % x == 0 and binary[j] == '1':\n                        total += 1\n            return total <= k\n\n        left, right = 1, 2\n        while isValid(right):\n            left = right\n            right *= 2\n\n        while left < right:\n            mid = (left + right) // 2\n            if isValid(mid):\n                left = mid + 1\n            else:\n                right = mid\n\n        return left - 1"
}