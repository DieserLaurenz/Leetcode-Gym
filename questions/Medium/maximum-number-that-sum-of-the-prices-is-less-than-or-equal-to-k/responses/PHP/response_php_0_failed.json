{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19980000,
    "question_id": "3240",
    "elapsed_time": 35,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707618820651,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171868487",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer\n     */\n    function findMaximumNumber($k, $x) {\n        $low = 1;\n        $high = $k;\n        while ($low < $high) {\n            $mid = $low + intval(($high - $low + 1) / 2);\n            $sum = 0;\n            for ($i = 1; $i <= $x; $i++) {\n                $sum += intval($mid / pow(2, $i));\n            }\n            if ($sum <= $k) {\n                $low = $mid;\n            } else {\n                $high = $mid - 1;\n            }\n        }\n        return $low;\n    }\n}"
}