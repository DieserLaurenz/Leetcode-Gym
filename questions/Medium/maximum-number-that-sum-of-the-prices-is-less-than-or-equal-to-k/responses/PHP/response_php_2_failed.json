{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20196000,
    "question_id": "3240",
    "elapsed_time": 161,
    "compare_result
    "code_output": "5.25",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707618884313,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171870242",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer\n     */\n    function findMaximumNumber($k, $x) {\n        $left = 1;\n        $right = 2 * $k; // Adjust the upper bound to ensure we don't overshoot.\n        while ($left < $right) {\n            $mid = $left + ($right - $left) / 2;\n            if ($this->price($mid, $x) <= $k) {\n                $left = $mid + 1;\n            } else {\n                $right = $mid;\n            }\n        }\n        return $left - 1;\n    }\n\n    private function price($num, $x) {\n        $total = 0;\n        for ($i = 1; $i <= $num; $i++) {\n            // Calculate the contribution of the ith bit if it is set in num's binary representation.\n            $bitPosition = pow(2, $i - 1);\n            if ($i % $x == 0) { // Check if the position is divisible by x\n                $total += intdiv($num, $bitPosition);\n            }\n        }\n        return $total;\n    }\n}"
}