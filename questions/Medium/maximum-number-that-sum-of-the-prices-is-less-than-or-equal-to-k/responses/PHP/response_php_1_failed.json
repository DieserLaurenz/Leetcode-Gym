{
    "status_code": 14,
    "lang": "php",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 19840000,
    "question_id": "3240",
    "elapsed_time": 5146,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707618855509,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171869289",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer $x\n     * @return Integer\n     */\n    function findMaximumNumber($k, $x) {\n        $left = 1;\n        $right = PHP_INT_MAX;\n        while ($left < $right) {\n            $mid = $left + intdiv($right - $left, 2);\n            if ($this->sumOfPrices($mid, $x) <= $k) {\n                $left = $mid + 1;\n            } else {\n                $right = $mid;\n            }\n        }\n        return $left - 1;\n    }\n    \n    private function sumOfPrices($num, $x) {\n        $sum = 0;\n        for ($i = 1; $i <= $num; ++$i) {\n            $binary = decbin($i);\n            for ($j = 0; $j < strlen($binary); ++$j) {\n                if ($binary[strlen($binary) - $j - 1] === '1' && ($j + 1) % $x === 0) {\n                    ++$sum;\n                }\n            }\n        }\n        return $sum;\n    }\n}"
}