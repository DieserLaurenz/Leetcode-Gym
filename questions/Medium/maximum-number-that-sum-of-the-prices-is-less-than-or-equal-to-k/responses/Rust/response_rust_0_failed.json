{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2156000,
    "question_id": "3240",
    "elapsed_time": 18,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707628191409,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1172014541",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_maximum_number(k: i64, x: i32) -> i64 {\n        let mut low = 0;\n        let mut high = k;\n        while low < high {\n            let mid = (low + high + 1) / 2;\n            if Solution::calculate_sum(mid, x) <= k {\n                low = mid;\n            } else {\n                high = mid - 1;\n            }\n        }\n        low\n    }\n\n    fn calculate_sum(num: i64, x: i32) -> i64 {\n        let mut sum = 0;\n        let mut multiplier = x as i64;\n        while multiplier <= num {\n            let full_blocks = num / multiplier;\n            let additional_bits = num % multiplier;\n            sum += full_blocks * (multiplier / x as i64);\n            if additional_bits >= multiplier / 2 {\n                sum += additional_bits - multiplier / 2 + 1;\n            }\n            multiplier *= 2;\n        }\n        sum\n    }\n}"
}