{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 1896000,
    "question_id": "3240",
    "elapsed_time": 2024,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1707628212762,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 71,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1172014760",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_maximum_number(k: i64, x: i32) -> i64 {\n        let mut left = 0;\n        let mut right = 2*k; // Increase upper bound to ensure the solution space is covered\n        while left < right {\n            let mid = left + (right - left) / 2;\n            if Solution::sum_prices(mid, x) > k {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        left - 1\n    }\n\n    fn sum_prices(n: i64, x: i32) -> i64 {\n        let mut sum = 0;\n        for i in 1..=n {\n            sum += Solution::bit_count(i) / x as i64 + if Solution::bit_count(i) % x as i64 > 0 { 1 } else { 0 };\n        }\n        sum\n    }\n\n    fn bit_count(mut n: i64) -> i64 {\n        let mut count = 0;\n        while n > 0 {\n            count += n & 1;\n            n >>= 1;\n        }\n        count\n    }\n}"
}