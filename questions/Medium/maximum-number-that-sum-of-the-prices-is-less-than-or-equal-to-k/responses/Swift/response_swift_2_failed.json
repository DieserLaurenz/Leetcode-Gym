{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15112000,
    "question_id": "3240",
    "elapsed_time": 5084,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1707619015618,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 72,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1171873513",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMaximumNumber(_ k: Int, _ x: Int) -> Int {\n        var left = 1\n        var right = 2 * k // A safe upper bound guess\n        while left < right {\n            let mid = (left + right + 1) / 2\n            if calculateSum(mid, x) <= k {\n                left = mid\n            } else {\n                right = mid - 1\n            }\n        }\n        return left\n    }\n\n    private func calculateSum(_ num: Int, _ x: Int) -> Int {\n        var sum = 0\n        for i in 1...num {\n            sum += countSetBits(i) / x\n        }\n        return sum\n    }\n\n    private func countSetBits(_ num: Int) -> Int {\n        var count = 0\n        var n = num\n        while n > 0 {\n            count += n & 1\n            n >>= 1\n        }\n        return count\n    }\n}"
}