{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15276000,
    "question_id": "3240",
    "elapsed_time": 20,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707618979119,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 11,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1171872743",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMaximumNumber(_ k: Int, _ x: Int) -> Int {\n        var low: Int64 = 0\n        var high: Int64 = Int64(2e9)\n        while low < high {\n            let mid = low + (high - low + 1) / 2\n            if price(mid, x) > k {\n                high = mid - 1\n            } else {\n                low = mid\n            }\n        }\n        return Int(low)\n    }\n    \n    private func price(_ num: Int64, _ x: Int) -> Int64 {\n        var total: Int64 = 0\n        for i in 1...64 {\n            if (i % x == 0) {\n                total += num >> (i - 1)\n            }\n        }\n        return total\n    }\n}"
}