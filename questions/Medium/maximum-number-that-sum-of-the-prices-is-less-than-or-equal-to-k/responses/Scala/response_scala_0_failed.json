{
    "status_code": 12,
    "lang": "scala",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 51860000,
    "question_id": "3240",
    "elapsed_time": 10239,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707628075652,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1172013260",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findMaximumNumber(k: Long, x: Int): Long = {\n        var left: Long = 1\n        var right: Long = k\n        def calcCost(num: Long): Long = {\n            var total: Long = 0\n            var base: Long = x\n            while (base <= num) {\n                val full = num / base\n                val partial = Math.min(num % base, base / x)\n                total += (full + partial) * (base / x)\n                if (base > Long.MaxValue / x) return total // Prevent overflow\n                base *= x\n            }\n            total\n        }\n        while (left < right) {\n            val mid = left + (right - left) / 2\n            if (calcCost(mid) < k) left = mid + 1\n            else right = mid\n        }\n        if (calcCost(left) <= k) left else left - 1\n    }\n}"
}