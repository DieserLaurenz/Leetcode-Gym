{
    "status_code": 14,
    "lang": "scala",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 52144000,
    "question_id": "3240",
    "elapsed_time": 10205,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707628138217,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1172013886",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "object Solution {\n  def findMaximumNumber(k: Long, x: Int): Long = {\n    var left: Long = 1\n    var right: Long = k * x\n    while (left < right) {\n      val mid = left + (right - left) / 2\n      if (sumOfPrices(mid, x) <= k) left = mid + 1\n      else right = mid\n    }\n    if (sumOfPrices(left, x) <= k) left else left - 1\n  }\n\n  def sumOfPrices(num: Long, x: Int): Long = {\n    var sum: Long = 0\n    var powX: Long = x\n    while (powX <= num) {\n      val fullBlocks = num / powX\n      sum += fullBlocks * (powX / x)\n      powX *= x\n    }\n    sum\n  }\n}"
}