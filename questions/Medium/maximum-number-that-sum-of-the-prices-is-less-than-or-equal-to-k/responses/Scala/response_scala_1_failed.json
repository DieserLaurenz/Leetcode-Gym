{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 293984000,
    "question_id": "3240",
    "elapsed_time": 10515,
    "compare_result": "10000000100000000000001001110000000100010000100000010000010000001000000000001100000000000000000000100000010100110000000010001100110010000010000000000000000010000010000000000010100001000001000000001000001000000100000000000000000010100010000000000000000100000000000000010000000010000000000000101000000000000010001100000100000010100000100000001000000000000000000001000000000000001000000000000000000000000010000000000010000000110000000100000100001100100000000000000010110001000001000001000101000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "7\n2",
    "expected_output": "9",
    "task_finish_time": 1707628107289,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 71,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1172013584",
    "input_formatted": "7, 2",
    "input": "7\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findMaximumNumber(k: Long, x: Int): Long = {\n        def bitCount(n: Long): Long = n.toBinaryString.count(_ == '1')\n        def price(n: Long): Long = (1L to n).map(i => if ((i % x) == 0) bitCount(i) else 0L).sum\n\n        var left: Long = 1\n        var right: Long = 2\n        while (price(right) <= k) right *= 2\n\n        while (left < right) {\n            val mid = left + (right - left) / 2\n            if (price(mid) <= k) left = mid + 1\n            else right = mid\n        }\n\n        if (price(left) > k) left - 1 else left\n    }\n}"
}