{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41172000,
    "display_runtime": "1",
    "question_id": "3240",
    "elapsed_time": 129,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707618276482,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171863538",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n        long low = 1, high = k, ans = 0;\n        while (low <= high) {\n            long mid = low + (high - low) / 2;\n            if (isPossible(mid, k, x)) {\n                ans = mid;\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    private boolean isPossible(long num, long k, int x) {\n        long sum = 0;\n        for (int i = 1; i <= x; i++) {\n            sum += (num >> i) + ((num & ((1L << i) - 1)) >= (1L << (i - 1)) ? 1 : 0);\n            if (sum > k) return false;\n        }\n        return sum <= k;\n    }\n}"
}