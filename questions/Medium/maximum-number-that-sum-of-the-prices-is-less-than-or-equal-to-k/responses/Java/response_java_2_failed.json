{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41004000,
    "display_runtime": "4",
    "question_id": "3240",
    "elapsed_time": 129,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "9\n1",
    "expected_output": "6",
    "task_finish_time": 1707618334781,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171863910",
    "input_formatted": "9, 1",
    "input": "9\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long findMaximumNumber(long k, int x) {\n        long low = 1, high = k * x; // Adjust high to ensure the sum of prices does not exceed k\n        while (low < high) {\n            long mid = (low + high + 1) / 2; // Use upper mid to avoid infinite loop\n            if (sumOfPrices(mid, x) <= k) {\n                low = mid;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n\n    // Calculate sum of prices for numbers from 1 to num\n    private long sumOfPrices(long num, int x) {\n        long sum = 0, bit = 1;\n        for (int i = 1; i <= 64; i++) {\n            if (i % x == 0) { // Only consider positions divisible by x\n                sum += num / bit;\n            }\n            bit <<= 1;\n        }\n        return sum;\n    }\n}"
}