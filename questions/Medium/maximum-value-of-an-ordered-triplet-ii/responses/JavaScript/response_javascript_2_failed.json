{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61320000,
    "question_id": "3152",
    "elapsed_time": 112,
    "compare_result
    "code_output": "132",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707680310355,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1172580058",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumTripletValue = function(nums) {\n    let maxProduct = 0;\n    let max = Array(2).fill(-Infinity), min = Array(2).fill(Infinity);\n\n    for (const num of nums) {\n        if (num > max[0]) {\n            max[1] = max[0];\n            max[0] = num;\n        } else if (num > max[1]) {\n            max[1] = num;\n        }\n\n        if (num < min[0]) {\n            min[1] = min[0];\n            min[0] = num;\n        } else if (num < min[1]) {\n            min[1] = num;\n        }\n    }\n\n    for (const num of nums) {\n        maxProduct = Math.max(maxProduct, (max[0] - min[0]) * num, (max[0] - min[1]) * num);\n    }\n\n    return maxProduct;\n};"
}