{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16596000,
    "question_id": "3152",
    "elapsed_time": 155,
    "compare_result
    "code_output": "209",
    "std_output": "",
    "last_testcase": "[6,11,12,12,7,9,2,11,12,4,19,14,16,8,16]",
    "expected_output": "190",
    "task_finish_time": 1707679856225,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 318,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1172575160",
    "input_formatted": "[6,11,12,12,7,9,2,11,12,4,19,14,16,8,16]",
    "input": "[6,11,12,12,7,9,2,11,12,4,19,14,16,8,16]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long maximumTripletValue(int* nums, int numsSize) {\n    long long maxVal = 0, max_i = INT_MIN, max_k = INT_MIN;\n    int* max_j = (int*)malloc(numsSize * sizeof(int));\n    max_j[numsSize - 1] = nums[numsSize - 1];\n    for (int i = numsSize - 2; i >= 0; i--) {\n        if (nums[i] > max_j[i + 1]) {\n            max_j[i] = nums[i];\n        } else {\n            max_j[i] = max_j[i + 1];\n        }\n    }\n    for (int j = 1; j < numsSize - 1; j++) {\n        if (nums[j - 1] > max_i) {\n            max_i = nums[j - 1];\n        }\n        if (max_j[j + 1] > max_k) {\n            max_k = max_j[j + 1];\n        }\n        long long currentVal = (max_i - nums[j]) * max_k;\n        if (currentVal > maxVal) {\n            maxVal = currentVal;\n        }\n    }\n    free(max_j);\n    return maxVal;\n}"
}