{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13376000,
    "question_id": "3152",
    "elapsed_time": 184,
    "compare_result
    "code_output": "180",
    "std_output": "",
    "last_testcase": "[1,10,3,4,19]",
    "expected_output": "133",
    "task_finish_time": 1707679942735,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 140,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1172576065",
    "input_formatted": "[1,10,3,4,19]",
    "input": "[1,10,3,4,19]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long maximumTripletValue(int* nums, int numsSize) {\n    long long maxVal = 0;\n    int max1 = INT_MIN, max2 = INT_MIN, max3 = INT_MIN;\n\n    // Find the three largest values\n    for (int i = 0; i < numsSize; ++i) {\n        if (nums[i] > max1) {\n            max3 = max2;\n            max2 = max1;\n            max1 = nums[i];\n        } else if (nums[i] > max2) {\n            max3 = max2;\n            max2 = nums[i];\n        } else if (nums[i] > max3) {\n            max3 = nums[i];\n        }\n    }\n\n    // Calculate the minimum value among the first two elements for min subtraction\n    int min1 = INT_MAX, min2 = INT_MAX;\n    for (int i = 0; i < numsSize; ++i) {\n        if (nums[i] < min1) {\n            min2 = min1;\n            min1 = nums[i];\n        } else if (nums[i] < min2) {\n            min2 = nums[i];\n        }\n    }\n\n    // Check if using the two smallest values for subtraction and the largest value for multiplication gives a better result\n    long long tempVal = (long long)(min1 - min2) * max1;\n    if (tempVal > maxVal) {\n        maxVal = tempVal;\n    }\n\n    // Calculate max value using the three largest values found earlier\n    for (int i = 0; i < numsSize; ++i) {\n        if (nums[i] != max1 && nums[i] != max2 && nums[i] != max3) {\n            tempVal = (long long)(max1 - nums[i]) * max2;\n            if (tempVal > maxVal) {\n                maxVal = tempVal;\n            }\n            tempVal = (long long)(max1 - nums[i]) * max3;\n            if (tempVal > maxVal) {\n                maxVal = tempVal;\n            }\n        }\n    }\n\n    return maxVal > 0 ? maxVal : 0;\n}"
}