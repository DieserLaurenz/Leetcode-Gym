{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62356000,
    "display_runtime": "3",
    "question_id": "3152",
    "elapsed_time": 402,
    "compare_result": "11111111111101111111111111111111111111110111111111111111111111111111111111011011111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111110111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111011011111111101111111101111111110111111111111111111111111111111111111111110111111111111111111111111111111111111111110111111110111111111111111111111111111111111111111111011110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[10,13,6,2]",
    "expected_output": "14",
    "task_finish_time": 1707670937357,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 581,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1172458980",
    "input_formatted": "[10,13,6,2]",
    "input": "[10,13,6,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long maximumTripletValue(int[] nums) {\n        long ans = 0;\n        int n = nums.length;\n        int[] leftMax = new int[n];\n        leftMax[0] = nums[0];\n        for (int i = 1; i < n; i++) {\n            leftMax[i] = Math.max(leftMax[i - 1], nums[i]);\n        }\n\n        int[] rightMax = new int[n];\n        rightMax[n - 1] = nums[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            rightMax[i] = Math.max(rightMax[i + 1], nums[i]);\n        }\n\n        for (int j = 1; j < n - 1; j++) {\n            if (nums[j] < leftMax[j] && nums[j] < rightMax[j]) {\n                long maxVal = (long) (leftMax[j - 1] - nums[j]) * rightMax[j + 1];\n                ans = Math.max(ans, maxVal);\n            }\n        }\n        return ans;\n    }\n}"
}