{
    "status_code": 14,
    "lang": "python",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 11444000,
    "question_id": "3152",
    "elapsed_time": 11010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[149527,945335,682819,197066,899171,386986,814843,744968,587665,563149,572664,469447,857790,143864,88889,814310,881246,431548,606885,394718,713387,373583,310255,448191,326800,75940,327523,192490,78354,7826,726951,102575,28944,759551,423614,731624,912326,593059,415319,597827,874152,335804,207512,245884,812219,693375,414395,322057,574220,972619,968544,362256,379966,968297,226470,306641,915635,747366,324692,896834,359057,360969,671975,321929,924659,787538,707225,407073,171536,74085,831836,231030,192513,464638,814148,3135,546660,440550,748533,327439,761402,95924,489546,705980,967946,772048,103185,708827,794258,759317,521344,971254,209533,540147,710380,58816,261243,126540,593310,796751,667587,728917,283827,366003,558730,848580,272186,280326,400238,268995,698191,797987,490472,524980,96899,119077,151914,654866,877033,373603,784505,832878,513189,488319,610506,188236,553445,96914,414838,202987,155429,567745,948450,5879,549949,682722,710825,534302,946369,219476,982632,74564,757791,204205,467739,261537,702543,959005,321972,412906,736991,331352,583514,218643,743727,650243,217847,513822,907273,179122,492448,577436,867322,52910,298607,625883,941134,108635,871919,970055,964466,648998,498942,361999,574960,682999,156807,129037,114860,511316,849839,327255,834953,237285,383018,840319,250357,148200,866450,140347,418950,273045,602568,723502,308182,258411,164776,705409,233380,310881,642294,244310,126589,584969,560782,614298,908240,920550,827594,316818,308483,450210,927272,450361,932988,197123,848258,108689,806848,769241,974430,323930,749082,738131,370286,780918,777700,202859,161052,246164,909218,963775,867558,415104,825545,83550,839430,869594,853650,16528,277179,969228,955989,919130,356324,583321,872206,984131,872454,549568,213452,602454,260773,711074,411380,15685,221815,469594,274043,172782,834269,197777,273885,887580,720572,960711,727336,554041,412674,831029,261586,668125,39156,793068,336626,783172,507539,841050,739486,310953,981808,972770,220671,558819,68637,518054,937903,893621,647811,165206,362456,482804,737646,842038,910659,348766,837179,290760,934062,140735,379699,95491,63176,57427,93517,668561,691539,876190,536741,748300,941169,266496,980330,770749,858866,124434,698945,215154,869642,570039,589424,437935,439897,551833,115787,435232,229103,420907,595559,179862,763892,60156,525212,411496,508750,807505,340102,428466,573468,180882,744832,803452,547854,768786,10433,623108,262046,457562,166225,161474,388891,9124,334161,467956,231400,8914,502062,491931,921067,194101,539174,130210,940181,880717,582978,779649,746158,888891,604637,222737,317175,661346,310949,309524,399179,728207,645296,85083,670940,734009,629244,591115,132369,652880,131200,32725,408700,780953,143371,881175,210332,730738,930531,330726,559782,439516,937032,968066,578687,599869,310571,311498,950366,564461,241715,392377,114851,282281,893489,624543,390190,305694,391799,146524,735648,883633,820636,411990,545161,712148,803337,372698,180206,424481,164450,275968,560429,464121,954249,785080,383435,950694,594344,104871,437871,608740,314700,994619,191742,631533,25981,378830,841315,581189,453627,757060,63960,387107,965052,661973,225377,742178,924781,128223,573750,98162,985359,42198,614506,119591,323965,292582,65836,276706,431602,315316,188315,968120,258633,299245,788778,880107,911710,743547,604708,121396,910812,290987,289037,563396,733869,581018,685122,795269,191797,175936,508822,689925,276826,544361,181390,942804,738702,854844,668414,253554,188068,298802,823122,646425,129577,369295,574154,380259,825913,376321,350339,345669,424049,100517,522968,116312,665288,890364,564936,448112,104279,488593,838789,492886,283971,277089,883306,697725,861806,867994,745626,999045,100338,103475,911128,884932,383146,110576,518308,407665,291688,294500,67515,827402,469525,351009,368080,623106,86706,73596,944456,33034,787028,156968,960560,723754,133500,257721,909882,936226,598382,873590,584476,262902,652857,390039,374162,651414,640323,291936,717428,549354,283253,766551,263195,576415,270114,303426,132197,265887,698800,411398,791681,21086,141271,941780,666429,893406,237544,46300,125931,630267,655119,729508,327675,139032,732381,83452,621827,247983,982243,551904,141588,790119,544475,194667,628219,845649,761026,524899,947649,74560,881170,580515,63886,677330,984323,16725,426891,874077,498491,10803,500117,332118,482251,11951,139284,733944,427809,70960,646165,145463,981403,434605,380816,986013,402513,92129,182062,945520,709228,919360,738593,274131,684308,851153,467488,359574,429924,198827,926963,921433,389191,335127,269380,354179,724247,466680,442920,504166,569843,179397,277542,385828,879444,981712,910652,287181,17254,275512,239961,270008,727104,449829,134223,212889,171687,246294,94583,122584,627922,589123,587688,124199,413665,59403,504924,410633,306416,257401,158484,113911,775415,489338,284204,627537,387916,779588,957285,661929,251411]",
    "expected_output": "974419459146",
    "task_finish_time": 1708798280353,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 563,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185051498",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumTripletValue(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        max_product = 0\n        for i in range(len(nums) - 2):\n            for j in range(i + 1, len(nums) - 1):\n                for k in range(j + 1, len(nums)):\n                    max_product = max(max_product, (nums[i] - nums[j]) * nums[k])\n        return max_product if max_product > 0 else 0"
}