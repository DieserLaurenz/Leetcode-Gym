{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 102648000,
    "question_id": "3152",
    "elapsed_time": 183,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707670699180,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 47,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1172455733",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long maximumTripletValue(vector<int>& nums) {\n        long long ans = LLONG_MIN;\n        int n = nums.size();\n        vector<int> leftMin(n);\n        leftMin[0] = nums[0];\n        for (int i = 1; i < n; ++i) {\n            leftMin[i] = min(leftMin[i - 1], nums[i]);\n        }\n\n        // We use a max heap to keep track of the max values encountered so far from the right\n        priority_queue<int> maxHeap;\n        for (int k = n - 1; k >= 2; --k) {\n            maxHeap.push(nums[k]);\n            if (k < n - 1) {\n                // Calculate the value for every pair (i, j) with j < k\n                int j = k - 1;\n                long long current = (long long)(nums[j] - leftMin[j - 1]) * maxHeap.top();\n                ans = max(ans, current);\n            }\n        }\n\n        return ans > 0 ? ans : 0;\n    }\n};"
}