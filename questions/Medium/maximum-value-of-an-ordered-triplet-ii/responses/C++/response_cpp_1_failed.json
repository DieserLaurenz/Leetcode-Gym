{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 140872000,
    "question_id": "3152",
    "elapsed_time": 458,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707670662624,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1172455215",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long maximumTripletValue(vector<int>& nums) {\n        long long ans = 0;\n        int n = nums.size();\n        vector<int> maxSuffix(n + 1, INT_MIN);\n        for (int i = n - 1; i >= 0; --i) {\n            maxSuffix[i] = max(maxSuffix[i + 1], nums[i]);\n        }\n        set<int> leftSet;\n        leftSet.insert(nums[0]);\n        for (int j = 1; j < n - 1; ++j) {\n            if (nums[j] < maxSuffix[j + 1]) {\n                auto it = leftSet.lower_bound(nums[j]);\n                if (it != leftSet.begin()) {\n                    --it;\n                    long long val = static_cast<long long>(*it - nums[j]) * maxSuffix[j + 1];\n                    ans = max(ans, val);\n                }\n            }\n            leftSet.insert(nums[j]);\n        }\n        return ans;\n    }\n};"
}