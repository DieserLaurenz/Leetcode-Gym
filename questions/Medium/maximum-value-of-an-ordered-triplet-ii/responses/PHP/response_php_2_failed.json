{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27340000,
    "question_id": "3152",
    "elapsed_time": 365,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[10,13,6,2]",
    "expected_output": "14",
    "task_finish_time": 1707680536510,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 581,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1172582473",
    "input_formatted": "[10,13,6,2]",
    "input": "[10,13,6,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumTripletValue($nums) {\n        $n = count($nums);\n        $maxProduct = 0;\n        $leftMax = array_fill(0, $n, 0);\n        $rightMax = array_fill(0, $n, 0);\n        \n        $max = PHP_INT_MIN;\n        for ($i = 0; $i < $n; $i++) {\n            $leftMax[$i] = $max;\n            $max = max($max, $nums[$i]);\n        }\n        \n        $max = PHP_INT_MIN;\n        for ($i = $n - 1; $i >= 0; $i--) {\n            $rightMax[$i] = $max;\n            $max = max($max, $nums[$i]);\n        }\n        \n        for ($i = 1; $i < $n - 1; $i++) {\n            if ($leftMax[$i] > $nums[$i] && $rightMax[$i] > $nums[$i]) {\n                $maxProduct = max($maxProduct, ($leftMax[$i] - $nums[$i]) * $rightMax[$i]);\n            }\n        }\n        \n        return $maxProduct;\n    }\n}"
}