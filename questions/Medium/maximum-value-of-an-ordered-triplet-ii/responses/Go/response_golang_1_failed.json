{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8704000,
    "question_id": "3152",
    "elapsed_time": 128,
    "compare_result": "00111000000000000000001000000010000000000000000000010000000000000000000011000000000100000000000000000000000000000000000000000010000000000000000000000100000000000000000000100000000000000000000000000000000000000000100000000000000000000000001000000000000000000000001010000000000000000000000000000000000000000000000000000000100000000100000000000000100000000001000100000010000000010100100000010000000000010001000000000000000000000010000000000000000000000100000000000010000000000000000001000100000000000010000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707680983485,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1172587046",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumTripletValue(nums []int) int64 {\n    maxVal := int64(0)\n    minVal := int64(1<<63 - 1)\n    minValSecond := int64(1<<63 - 1)\n    maxProduct := make([]int64, len(nums))\n\n    for i := len(nums) - 1; i >= 0; i-- {\n        if i < len(nums)-1 {\n            maxProduct[i] = int64(max(int(maxProduct[i+1]), nums[i]))\n        } else {\n            maxProduct[i] = int64(nums[i])\n        }\n    }\n\n    for j := 1; j < len(nums)-1; j++ {\n        if int64(nums[j]) <= minVal {\n            minValSecond = minVal\n            minVal = int64(nums[j])\n        } else if int64(nums[j]) < minValSecond {\n            minValSecond = int64(nums[j])\n        }\n\n        temp := (minVal - int64(nums[j])) * maxProduct[j+1]\n        if temp > maxVal {\n            maxVal = temp\n        }\n    }\n\n    if maxVal < 0 {\n        return 0\n    }\n    return maxVal\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}