{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 16: exception error: badarith",
    "full_runtime_error": "Line 16: exception error: badarith\n[{erlang,'-',[infinity],[{error_info,#{module => erl_erts_errors}}]},\n {solution,'-maximum_triplet_value/1-fun-3-',3,\n              [{file,\"solution.erl\"},{line,16}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,36}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,24}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,53}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 64924000,
    "question_id": "3152",
    "elapsed_time": 1301,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707690156711,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1172665584",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_triplet_value(Nums :: [integer()]) -> integer().\nmaximum_triplet_value(Nums) ->\n    MaxK = lists:duplicate(length(Nums), 0),\n    MaxKUpdated = lists:foldr(\n        fun(X, [H|T]) -> [max(X, H)|[H|T]] end,\n        [0],\n        lists:reverse(tl(Nums))),\n    {MaxIJ, _} = lists:foldl(\n        fun(X, {Max, [H|T]}) ->\n            {max(Max, X * H), T}\n        end,\n        {0, MaxKUpdated},\n        tl(lists:reverse(Nums))),\n    lists:foldl(\n        fun(X, Acc) ->\n            MaxJ = lists:foldl(fun(Y, Max) -> max(X - Y, Max) end, -infinity, Nums),\n            max(MaxJ * X, Acc)\n        end,\n        MaxIJ,\n        tl(Nums))."
}