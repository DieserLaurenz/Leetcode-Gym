{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 137720000,
    "question_id": "3152",
    "elapsed_time": 5096,
    "compare_result
    "code_output": "35",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707690118280,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1172665283",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_triplet_value(Nums :: [integer()]) -> integer().\nmaximum_triplet_value(Nums) ->\n    lists:foldl(fun(X, {Max1, Max2, Max3}) ->\n                        case X of\n                            _ when X > Max1 -> {X, Max1, Max2};\n                            _ when X > Max2 -> {Max1, X, Max2};\n                            _ when X > Max3 -> {Max1, Max2, X};\n                            _ -> {Max1, Max2, Max3}\n                        end\n                end, {0, 0, 0}, lists:reverse(lists:sort(Nums))),\n    Max = lists:foldl(fun(X, Acc) ->\n                          Max2 = lists:nth(2, Nums) - X,\n                          Max3 = lists:last(Nums),\n                          MaxVal = max((Max2 * Max3), Acc),\n                          MaxVal\n                      end, 0, lists:sublist(Nums, length(Nums) - 2)),\n    max(0, Max)."
}