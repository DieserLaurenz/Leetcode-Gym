{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 33092000,
    "question_id": "3152",
    "elapsed_time": 152,
    "compare_result
    "code_output": "539",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707680712641,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1172584325",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumTripletValue(nums: IntArray): Long {\n        var maxVal = Long.MIN_VALUE\n        var secondMaxVal = Long.MIN_VALUE\n        val minVals = LongArray(nums.size) { Long.MAX_VALUE }\n\n        for (i in nums.indices.reversed()) {\n            if (i < nums.size - 1) {\n                maxVal = maxOf(maxVal, nums[i + 1].toLong())\n            }\n            if (i < nums.size - 2) {\n                secondMaxVal = maxOf(secondMaxVal, maxVal * nums[i + 2])\n                minVals[i] = secondMaxVal\n            }\n        }\n\n        var maxProduct = 0L\n        for (i in nums.indices) {\n            for (j in i + 1 until nums.size - 1) {\n                maxProduct = maxOf(maxProduct, (nums[i] - nums[j]).toLong() * minVals[j])\n            }\n        }\n\n        return if (maxProduct > 0) maxProduct else 0\n    }\n}"
}