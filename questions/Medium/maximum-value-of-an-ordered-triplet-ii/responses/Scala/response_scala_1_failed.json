{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 78896000,
    "question_id": "3152",
    "elapsed_time": 1303,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707681313483,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 25,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1172590238",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumTripletValue(nums: Array[Int]): Long = {\n        var max = 0L\n        val n = nums.length\n        val maxSuffix = Array.fill(n)(0)\n        maxSuffix(n - 1) = nums(n - 1)\n        for (i <- n - 2 to 0 by -1) {\n            maxSuffix(i) = math.max(maxSuffix(i + 1), nums(i))\n        }\n        val set = scala.collection.mutable.TreeSet[Int]()\n        set += nums(0)\n        for (j <- 1 until n - 1) {\n            val k = maxSuffix(j + 1)\n            if (k > nums(j)) {\n                set.headOption.foreach { i =>\n                    if (i < nums(j)) max = max.max((nums(j) - i).toLong * k)\n                }\n            }\n            set += nums(j)\n        }\n        max\n    }\n}"
}