{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 124680000,
    "question_id": "3152",
    "elapsed_time": 5034,
    "compare_result
    "code_output": "41",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707689993369,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 64,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172664361",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-triplet-value nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let loop ((i 0) (max-val 0))\n    (if (< i (- (length nums) 3))\n        (let loop2 ((j (+ i 1)) (max-val-inner max-val))\n          (if (< j (- (length nums) 2))\n              (let loop3 ((k (+ j 1)) (max-val-inner2 max-val-inner))\n                (if (< k (length nums))\n                    (let* ((val (- (* (- (list-ref nums i) (list-ref nums j)) (list-ref nums k)) max-val-inner2))\n                           (new-max (if (> val 0) val max-val-inner2)))\n                      (loop3 (+ k 1) new-max))\n                    (loop2 (+ j 1) max-val-inner2)))\n              (loop (+ i 1) max-val-inner)))\n        (if (> max-val 0) max-val 0))))"
}