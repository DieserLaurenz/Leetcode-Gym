{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 132476000,
    "question_id": "3152",
    "elapsed_time": 5016,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707690058574,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 17,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172664855",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-triplet-value nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let* ((max-val 0)\n         (n (length nums))\n         (min-prefix (make-vector n))\n         (max-suffix (make-vector n)))\n    (vector-set! min-prefix 0 (list-ref nums 0))\n    (for ([i (in-range 1 n)])\n      (vector-set! min-prefix i (min (vector-ref min-prefix (- i 1)) (list-ref nums i))))\n    (vector-set! max-suffix (- n 1) (list-ref nums (- n 1)))\n    (for ([i (in-range (- n 2) -1 -1)])\n      (vector-set! max-suffix i (max (vector-ref max-suffix (+ i 1)) (list-ref nums i))))\n    (for ([i (in-range 1 (- n 1))])\n      (let* ((min-val (vector-ref min-prefix (- i 1)))\n             (max-val-suffix (vector-ref max-suffix (+ i 1)))\n             (current (list-ref nums i))\n             (potential (* (- current min-val) max-val-suffix)))\n        (when (> potential max-val)\n          (set! max-val potential))))\n    (if (> max-val 0) max-val 0)))"
}