{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19572000,
    "question_id": "3152",
    "elapsed_time": 452,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707680634013,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1172583487",
    "input_formatted": "[12,6,1,2,7]",
    "input": "[12,6,1,2,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumTripletValue(_ nums: [Int]) -> Int {\n        let n = nums.count\n        var maxVal = 0\n        var leftMin = Array(repeating: Int.max, count: n)\n        \n        // Fill the leftMin array with the minimum value to the left of each index\n        for i in 1..<n {\n            leftMin[i] = min(leftMin[i-1], nums[i-1])\n        }\n        \n        // Use a reverse-iteration to maintain the maximum value to the right\n        var rightMax = nums[n-1]\n        for k in stride(from: n-2, through: 1, by: -1) {\n            if nums[k] > leftMin[k] {\n                maxVal = max(maxVal, (leftMin[k] - nums[k]) * rightMax)\n            }\n            rightMax = max(rightMax, nums[k])\n        }\n        \n        return maxVal\n    }\n}"
}