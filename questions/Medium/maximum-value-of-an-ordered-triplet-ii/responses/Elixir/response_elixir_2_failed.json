{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 79792000,
    "question_id": "3152",
    "elapsed_time": 6013,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[804553,411831,433030,174335,649948,275096,433765,80679,498837,245177,474342,199302,889968,480420,925657,148123,248026,192022,858065,490504,225609,759574,257202,93246,637163,264359,786235,327249,185571,318734,841158,299934,403187,488840,665491,316614,130487,842238,760445,319094,870716,746150,381368,279919,62474,869324,498856,377216,75238,376831,866588,889001,241025,220686,235883,715703,970903,108832,882559,195738,495869,219811,751640,225238,668274,586531,194999,368643,268252,192856,884469,712609,293869,729150,324250,144710,302033,129748,676584,232274,643366,204138,477118,780708,725588,865810,141513,412048,483034,1881,105183,412067,15359,783902,182383,339166,60682,788920,422078,972391,506668,217334,114245,914008,185,468931,322650,846572,436524,30268,82677,259571,784345,157055,171422,58829,954085,136679,376373,783582,33933,298939,489345,972549,2345,446365,34360,167750,669337,941419,490445,909745,164122,328707,733116,422513,790985,103132,998944,94194,260809,652064,167157,809325,877362,800082,541537,597838,408723,535503,953068,803254,434730,215418,24516,712111,98544,313048,687266,378335,848106,136355,228833,562920,636573,275426,781804,313249,656775,141416,176436,785743,968897,415549,785415,417871,153569,62672,890528,97811,414279,366031,278621,31469,489634,820175,576969,588006,75273,596887,962545,66564,180591,756083,42619,54323,220156,254272,213800,160526,101979,272691,65393,191274,842054,125668,545072,473182,659595,785071,128576,836248,881339,744174,845899,255511,864034,138381,189950,78828,534746,499477,704699,40561,366204,772807,478446,899469,638120,131823,137734,913830,178861,995933,125236,418018,255622,990690,4631,34477,455583,405675,720458,983521,24685,236099,880990,694093,967027,522073,211011,296589,267644,747271,800562,911433,794233,770218,636239,645781,188331,306353,40727,190291,102861,503719,853415,242028,915664,618379,169269,231748,574836,589660,992372,290925,938427,996264,217388,267651,943105,103550,463549,742520,282475,613574,199413,552415,668914,296348,295179,752658,374360,145043,732602,760647,908612,508092,431397,393207,534649,781026,296011,470357,312783,773631,43703,808769,785204,457588,542719,406388,844738,54698,130700,981417,195394,723591,822781,711396,361644,859386,988112,954470,584053,846069,108180,595567,368419,912654,707648,255613,332185,931737,281854,418565,232139,476145,815794,595214,158585,893046,380014,148969,126580,395730,178926,128782,285995,935664,328349,757137,935557,558902,622089,637023,386320,472102,319865,864429,439861,65540,519297,525959,607935,755572,717483,12447,434658,420300,772035,460352,38959,972035,899112,799572,379771,352651,301842,442713,722341,82293,278518,507666,617461,252839,749482,389765,948287,448308,311746,593655,920111,96185,498802,726990,381330,362691,832671,55311,210233,158416,570789,182028,175491,155835,318817,915483,314441,731493,606391,359650,217091,131953,902781,528406,927723,627366,787648,27656,97640,261759,194214,579311,47794,412596,81583,83291,584833,410533,227015,501291,805500,354361,670966,221434,310808,773475,711921,620802,617431,774828,540111,923222,911829,810585,553452,962724,833600,977787,793645,763180,154104,948283,408665,812341,213659,612566,903509,693346,571298,323603,196255,645031,732078,601792,370806,222169,92152,748730,12131,109412,833905,59281,84543,434742,980561,166554,128757,512889,526331,552484,514895,967622,808771,50860,717048,955670,499648,309557,596903,274841,761457,547585,239425,786518,548368,504087,823317,266213,57234,210321,970038,441562,24930,502719,75917,280183,462824,733834,458727,351656,593062,102169,734093,360768,434695,167529,588868,71076,746362,383363,328518,225709,105336,523078,967082,204522,657366,720462,435316,985888,602909,952057,793929,932141,266852,629260,62146,324487,478461,702548,637912,817642,614638,473439,522386,637370,875304,268587,268950,787567,83693,261411,314079,518444,589342,761374,690272,810339,406424,229213,705995,180543,4335,798318,814593,651786,628816,730339,518682,316732,514937,294825,647674,764948,30740,895842,54226,672322,499054,746739,482356,358448,503980,789194,972214,856146,514854,793558,436721,513249,937999,822519,287811,717252,856130,847024,52756,200165,352150,155547,921726,780328,37234,923688,209130,970747,377278,853913,614501,898133,206893,181533,178301,189544,83938,37944,919057,22322,23119,289221,673425,18793,796730,310691,581914,145199,173737,963669,12279,504702,875484,262682,278559,693524,601809,933485,281997,791620,386542,143622,204845,972480,954818,411641,807803,47748,213687,881229,427909,707705,531597,846879,301002,395484,918318,1752,38854,105166,271100,524506,845266,98537,993880,33063,392655,42914,862968,748032,578785,852352,230294,335935,548878,650079,191673,746516,899044,347234,235266,648854,170205,233707,447386,941143,639188,297647,880712,954922,521644,702673,362360,301529,727795]",
    "expected_output": "991089184960",
    "task_finish_time": 1707690308557,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 561,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1172666618",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_triplet_value(nums :: [integer]) :: integer\n  def maximum_triplet_value(nums) do\n    Enum.reduce(0..length(nums)-3, 0, fn i, acc1 ->\n      Enum.reduce(i+1..length(nums)-2, acc1, fn j, acc2 ->\n        Enum.reduce(j+1..length(nums)-1, acc2, fn k, acc3 ->\n          max_value = (Enum.at(nums, i) - Enum.at(nums, j)) * Enum.at(nums, k)\n          if max_value > acc3, do: max_value, else: acc3\n        end)\n      end)\n    end)\n    |> max(0)\n  end\nend"
}