{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 7: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 7: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:7: anonymous fn/5 in Solution.maximum_triplet_value/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:29: Driver.consume_test_cases/2\n    solution.ex:17: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 75260000,
    "question_id": "3152",
    "elapsed_time": 399,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[12,6,1,2,7]",
    "expected_output": "77",
    "task_finish_time": 1707690245900,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 599,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1172666199",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_triplet_value(nums :: [integer]) :: integer\n  def maximum_triplet_value(nums) do\n    Enum.reduce(0..length(nums)-1, 0, fn i, acc ->\n      Enum.reduce(i+1..length(nums)-1, acc, fn j, acc_inner ->\n        Enum.reduce(j+1..length(nums)-1, acc_inner, fn k, acc_inner_inner ->\n          max = max(acc_inner_inner, (nums[i] - nums[j]) * nums[k])\n          if max > acc_inner_inner, do: max, else: acc_inner_inner\n        end)\n      end)\n    end)\n  end\nend"
}