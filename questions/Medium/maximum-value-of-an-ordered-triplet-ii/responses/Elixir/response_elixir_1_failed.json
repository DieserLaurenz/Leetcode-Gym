{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "",
    "full_compile_error": "** (ArgumentError) cannot pipe nums into Enum.at(i) - nums, the :- operator can only take one argument\n    (elixir 1.15.7) lib/macro.ex:371: Macro.pipe/3\n    (stdlib 5.1.1) lists.erl:1594: :lists.foldl/3\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 7:     Solution.maximum_triplet_value/1\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 7:     Solution.maximum_triplet_value/1\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 7:     Solution.maximum_triplet_value/1",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3152",
    "task_finish_time": 1707690274065,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1172666397",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_triplet_value(nums :: [integer]) :: integer\n  def maximum_triplet_value(nums) do\n    Enum.reduce(0..length(nums)-3, 0, fn i, acc1 ->\n      Enum.reduce(i+1..length(nums)-2, acc1, fn j, acc2 ->\n        Enum.reduce(j+1..length(nums)-1, acc2, fn k, acc3 ->\n          max_value = (nums |> Enum.at(i) - nums |> Enum.at(j)) * nums |> Enum.at(k)\n          if max_value > acc3, do: max_value, else: acc3\n        end)\n      end)\n    end)\n    |> max(0)\n  end\nend"
}