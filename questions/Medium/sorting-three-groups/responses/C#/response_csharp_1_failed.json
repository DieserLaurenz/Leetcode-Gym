{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64492000,
    "question_id": "2904",
    "elapsed_time": 208,
    "compare_result": "1001110110010100110110010010010000110110100110110110110010000010010000000010010010010000100000100110110000110010000110100100110110100110110000110010100110110010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000110100000100010000110100100110110100110110000100010100110110010010010000100000100110110000110110000110100100110110100110110000110110100110110110110010000100010100110110010010010000110110100110110110110010000010010000000010010010010000000000000000010000010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000100000000000000000100000100110110000110110000000000000110110000010010000100000100110110000110110000110100100110110100110110000110110100110110110110010000000000000110110000010010000110110100110110110110010000010010000000010010010010000000000000110100000100000000110100100110110100110110000100000100110110000110010000100000100110110000110100000110100100110110100110110000110100100110110100110110000100000100110110000110010000110100100110110100110110000110010100110110010010010000000000000110110000010010000110110100110110110110010000010010000000010010010010000100000100110110000110010000110100100110110100110110000110010100110110010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000000000000010000000000000000010000010010000000010000000010010010010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000000000000010000000000000000000000000010000000010000000010010010010000000000000000000000000010000000000000000000000000010000000010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000000000000000000000000000110100000100000000000000000100000000000010000000000000110100000100000000110100100110110100110110000100000100110110000110010000000000000100000000000010000100000100110110000110010000000010000000010010010010000000000000110100000100000000110100100110110100110110000100000100110110000110010000100000100110110000110100000110100100110110100110110000110100100110110100110110000100000100110110000110010000110100100110110100110110000110010100110110010010010000000000000100000000000010000100000100110110000110010000000010000000010010010010000100000100110110000110010000110100100110110100110110000110010100110110010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000100000000000000000100000100110110000110100000000000000110100000100010000100000100110110000110100000110100100110110100110110000110100100110110100110110000000000000110100000100010000110100100110110100110110000100010100110110010010010000000000000110100000100000000110100100110110100110110000100000100110110000110110000100000100110110000110100000110100100110110100110110000110100100110110100110110000100000100110110000110110000110100100110110100110110000110110100110110110110010000000000000110100000100010000110100100110110100110110000100010100110110010010010000100000100110110000110110000110100100110110100110110000110110100110110110110010000100010100110110010010010000110110100110110110110010000010010000000010010010010000000000000100000000000010000100000100110110000110010000000010000000010010010010000100000100110110000110010000110100100110110100110110000110010100110110010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000110100000100010000110100100110110100110110000100010100110110010010010000100000100110110000110110000110100100110110100110110000110110100110110110110010000100010100110110010010010000110110100110110110110010000010010000000010010010010000000000000000010000010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000000000000000000000000000000000000000010000000000000000010000010010000000000000000000000000010000000000000000000000000010000000010000000010010010010000000000000000010000010010000000010000000010010010010000010010000000010010010010000000000000000000000000010000000000000000000000000010000000010000000010010010010000000000000000000000000010000000000000000000000000010000000010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000000000000000000000000000000000000000010000000000000000010000010010000000000000000000000000010000000000000000000000000010000000010000000010010010010000000000000000010000010010000000010000000010010010010000010010000000010010010010000000000000000000000000000000000000000000000000000010000000000000000010000010010000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000000000000010000010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000000000000010000000000000000010000010010000000010000000010010010010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000000000000010000000000000000000000000010000000010000000010010010010000000000000000000000000010000000000000000000000000010000000010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000010000000010010010010000010010000000010010010010000000000000000010000010010000000000000000000000000010000010010000000010010010010000000010000000010010010010000000010000000010010010010000010010000000010010010011111111111011011101111101111001101110100011000111001110000100001100001100011010010000010100010010000000010001000100001001000100111010000000001000000000001101010000100100101000000000100000000010000000000000000000100000000010001000100000000000000000000010000000000010101100000000000010000000000000000000010000000000000000100000000010100000000001000000001000000000000000000000000000000000000001000000000010000000000000000001000000010000010000000100010010000000000100000000000000100000000001000000000000001000000010000000000000000010000000000000000000000001000000000000000000000010000000000001001000000000000000000001000000000001000001000000100000000000000000000000000000000000000000001000010000000000000000000000000000100000000000000000000000000000000000000000000000000000000000100000000000000000000000000000100000000000000000000000000100000000000000000",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,3,2,1,3,3]",
    "expected_output": "2",
    "task_finish_time": 1708174933355,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1648,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1177795567",
    "input_formatted": "[1,3,2,1,3,3]",
    "input": "[1,3,2,1,3,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumOperations(IList<int> nums) {\n        // Count the occurrences of 1s, 2s, and 3s\n        int[] groupCounts = new int[4];\n        foreach (var num in nums) {\n            groupCounts[num]++;\n        }\n\n        // The idea is to find the minimum operations needed to make the array beautiful\n        // A beautiful array is one where all elements of the same group are together and sorted in non-decreasing order\n        // We can achieve this by keeping the largest group intact and changing the groups of elements from the other two groups\n        // The minimum number of operations is thus the total number of elements minus the size of the largest group\n\n        // Find the maximum count among the three groups\n        int maxGroupCount = Math.Max(groupCounts[1], Math.Max(groupCounts[2], groupCounts[3]));\n\n        // The minimum operations required is the total number of elements minus the elements in the largest group\n        return nums.Count - maxGroupCount;\n    }\n}"
}