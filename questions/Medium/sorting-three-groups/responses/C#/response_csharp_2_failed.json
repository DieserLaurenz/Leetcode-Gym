{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64968000,
    "question_id": "2904",
    "elapsed_time": 286,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,1,3,2,1]",
    "expected_output": "3",
    "task_finish_time": 1708174966419,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2090,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1177795907",
    "input_formatted": "[2,1,3,2,1]",
    "input": "[2,1,3,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumOperations(IList<int> nums) {\n        // Count how many elements need to be moved to make each group (1, 2, and 3) sorted within themselves\n        int[] toOne = new int[3]; // Moves to make group 1 sorted\n        int[] toTwo = new int[3]; // Moves to make group 2 sorted\n        int[] toThree = new int[3]; // Moves to make group 3 sorted\n        foreach (int num in nums) {\n            toOne[num - 1]++;\n            toTwo[num - 1]++;\n            toThree[num - 1]++;\n        }\n        // Calculate the total moves needed to make the entire array sorted if all elements were moved to one specific group\n        int movesToOne = toTwo[0] + toThree[0]; // Moving elements originally in groups 2 and 3 to group 1\n        int movesToTwo = toOne[1] + toThree[1]; // Moving elements originally in groups 1 and 3 to group 2\n        int movesToThree = toOne[2] + toTwo[2]; // Moving elements originally in groups 1 and 2 to group 3\n\n        // The answer is the minimum of these moves\n        return Math.Min(movesToOne, Math.Min(movesToTwo, movesToThree));\n    }\n}"
}