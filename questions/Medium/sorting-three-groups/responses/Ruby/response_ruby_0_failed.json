{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 213484000,
    "question_id": "2904",
    "elapsed_time": 352,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,1,3,2,1]",
    "expected_output": "3",
    "task_finish_time": 1708175962562,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1897,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1177806234",
    "input_formatted": "[2,1,3,2,1]",
    "input": "[2,1,3,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_operations(nums)\n  count = Array.new(3, 0)\n  nums.each { |num| count[num - 1] += 1 }\n  sorted_nums = nums.sort\n  \n  min_ops = Float::INFINITY\n  (0..nums.size).each do |i|\n    ops = 0\n    # Operations to make the first i elements group 1\n    ops += i - count[0]\n    # Operations to make the last nums.size - i elements group 3\n    ops += (nums.size - i) - count[2]\n    # Minimum operations needed so far to maintain the groups as 1, 2, 3\n    min_ops = [min_ops, ops].min\n  end\n  \n  [min_ops, 0].max\nend"
}