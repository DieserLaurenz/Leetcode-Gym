{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 125988000,
    "question_id": "2904",
    "elapsed_time": 447,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,2,1]",
    "expected_output": "3",
    "task_finish_time": 1708176278739,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2404,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1177809528",
    "input_formatted": "[2,1,3,2,1]",
    "input": "[2,1,3,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (let ([counts (for/fold ([res (vector 0 0 0)]) ([num nums])\n                  (vector-set! res (sub1 num) (add1 (vector-ref res (sub1 num))))\n                  res)])\n    (let* ([group1 (vector-ref counts 0)]\n           [group2 (vector-ref counts 1)]\n           [group3 (vector-ref counts 2)]\n           [total (+ group1 group2 group3)]\n           [correct-until (+ group1 group2)])\n      (min (max (- total correct-until) group3)\n           (min (+ group2 group3) (+ group1 group2))))))"
}