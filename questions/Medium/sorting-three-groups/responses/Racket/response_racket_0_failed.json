{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 5: Char 54: enumerate: unbound identifier",
    "full_compile_error": "Line 5: Char 54: enumerate: unbound identifier\n  in: enumerate\n  compilation context...:\n   solution.rkt\n  location...:\n   prog_joined.rkt:16:53",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2904",
    "task_finish_time": 1708185606143,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178008392",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-operations nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([n (length nums)])\n    (define (count-group g)\n      (length (filter (lambda (x) (= (second x) g)) (enumerate nums))))\n    (define moves-to-make-beautiful\n      (lambda (group1 group2 group3)\n        (let ([sorted (sort (append group1 group2 group3) <)])\n          (+ (length (filter (lambda (x) (not (member x group1))) (take sorted (length group1))))\n             (length (filter (lambda (x) (not (member x group2))) (take-right (take sorted (length group2)) (length group2))))))))\n    (let* ([group1-count (count-group 1)]\n           [group2-count (count-group 2)]\n           [group3-count (count-group 3)]\n           [group1 (range 0 group1-count)]\n           [group2 (range group1-count (+ group1-count group2-count))]\n           [group3 (range (+ group1-count group2-count) n)])\n      (min (moves-to-make-beautiful group1 group2 group3)\n           (moves-to-make-beautiful group1 group3 group2)\n           (moves-to-make-beautiful group2 group1 group3)\n           (moves-to-make-beautiful group2 group3 group1)\n           (moves-to-make-beautiful group3 group1 group2)\n           (moves-to-make-beautiful group3 group2 group1)))))"
}