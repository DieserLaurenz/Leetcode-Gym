{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59944000,
    "question_id": "2904",
    "elapsed_time": 237,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,1,3,2,1]",
    "expected_output": "3",
    "task_finish_time": 1708175163271,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1661,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1177797966",
    "input_formatted": "[2,1,3,2,1]",
    "input": "[2,1,3,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumOperations(nums: number[]): number {\n    // Count occurrences of each group\n    let count = Array.from({ length: nums.length + 1 }, () => Array(3).fill(0));\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < 3; j++) {\n            count[i + 1][j] = count[i][j] + (nums[i] === j + 1 ? 1 : 0);\n        }\n    }\n\n    // DP array\n    let dp = Array.from({ length: nums.length + 1 }, () => Array(3).fill(0));\n    for (let i = 1; i <= nums.length; i++) {\n        dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + (nums[i - 1] === 1 ? 0 : 1);\n        dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][2]) + (nums[i - 1] === 2 ? 0 : 1);\n        dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][1]) + (nums[i - 1] === 3 ? 0 : 1);\n    }\n\n    // Minimum operations to make the array beautiful\n    return Math.min(dp[nums.length][0], dp[nums.length][1], dp[nums.length][2]);\n};"
}