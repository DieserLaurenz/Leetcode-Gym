{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58852000,
    "question_id": "2904",
    "elapsed_time": 242,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,3,2,1,3,3]",
    "expected_output": "2",
    "task_finish_time": 1708175189212,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1648,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1177798223",
    "input_formatted": "[1,3,2,1,3,3]",
    "input": "[1,3,2,1,3,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumOperations(nums: number[]): number {\n    const counts = [0, 0, 0]; // Counts of numbers in each group\n    nums.forEach(num => counts[num - 1]++);\n\n    // Sort the counts to get the number of elements in each group in descending order\n    counts.sort((a, b) => b - a);\n\n    // If all numbers are in one group already, no operation is needed.\n    if (counts[0] === nums.length) return 0;\n\n    // The minimum operations needed will be the sum of the counts of the two smaller groups\n    return counts[1] + counts[2];\n}"
}