{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11660000,
    "question_id": "2904",
    "elapsed_time": 207,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,2,1]",
    "expected_output": "3",
    "task_finish_time": 1708849609989,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1570,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185602305",
    "input_formatted": "[2,1,3,2,1]",
    "input": "[2,1,3,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumOperations(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(set(nums)) == 1:\n            return 0  # If all elements are from the same group, no operation is needed.\n\n        group_positions = [[], [], []]  # Track positions for each group\n        for i, num in enumerate(nums):\n            group_positions[num - 1].append(i)\n\n        # Count inversions for each group transition (1->2, 2->3, 1->3)\n        inversions = [0, 0, 0]  # Inversions for transitions 1->2, 2->3, 1->3\n        for i in range(3):\n            for pos in group_positions[i]:\n                if i < 2:  # Check inversion for group i to i+1\n                    inversions[i] += sum(p < pos for p in group_positions[i + 1])\n                if i == 0:  # Check inversion for group 1 to 3\n                    inversions[2] += sum(p < pos for p in group_positions[2])\n\n        # Minimum operations required to fix inversions\n        min_operations = min(inversions[0] + inversions[1], inversions[2])\n\n        return min_operations"
}