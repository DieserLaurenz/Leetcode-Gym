{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5528000,
    "question_id": "2904",
    "elapsed_time": 50,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,2,1,3,3]",
    "expected_output": "2",
    "task_finish_time": 1708175835250,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1086,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1177804838",
    "input_formatted": "[1,3,2,1,3,3]",
    "input": "[1,3,2,1,3,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumOperations(nums []int) int {\n    count := make([]int, 4)\n    for _, num := range nums {\n        count[num]++\n    }\n\n    groupCounts := []int{count[1], count[2], count[3]}\n    minOps := 0\n\n    // Calculate minimum operations required for each group to be in correct order.\n    for i, cnt := range groupCounts {\n        incorrectPositions := len(nums) - cnt\n        for j := i + 1; j < len(groupCounts); j++ {\n            incorrectPositions -= groupCounts[j]\n        }\n        minOps += min(cnt, incorrectPositions)\n    }\n\n    return minOps\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}