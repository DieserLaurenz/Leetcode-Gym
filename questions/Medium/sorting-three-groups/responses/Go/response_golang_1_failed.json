{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6864000,
    "question_id": "2904",
    "elapsed_time": 57,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,3,2,1,3,3]",
    "expected_output": "2",
    "task_finish_time": 1708175868931,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 327,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1177805195",
    "input_formatted": "[1,3,2,1,3,3]",
    "input": "[1,3,2,1,3,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumOperations(nums []int) int {\n    freq := make([][3]int, len(nums)+1)\n    for i, num := range nums {\n        freq[i+1][num-1]++\n    }\n    for i := 1; i <= len(nums); i++ {\n        for j := 0; j < 3; j++ {\n            freq[i][j] += freq[i-1][j]\n        }\n    }\n\n    minOp := func(x, y, z int) int {\n        return len(nums) - max(freq[x][0], freq[y][1]-freq[x][1], freq[z][2]-freq[y][2])\n    }\n\n    ans := len(nums)\n    for i := 1; i <= len(nums); i++ {\n        for j := i; j <= len(nums); j++ {\n            ans = min(ans, minOp(i, j, len(nums)))\n        }\n    }\n\n    return ans\n}\n\nfunc max(a ...int) int {\n    m := a[0]\n    for _, v := range a[1:] {\n        if v > m {\n            m = v\n        }\n    }\n    return m\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}