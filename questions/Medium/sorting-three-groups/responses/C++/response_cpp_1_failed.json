{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 93364000,
    "question_id": "2904",
    "elapsed_time": 108,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,2,1]",
    "expected_output": "3",
    "task_finish_time": 1708166047975,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 585,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1177708788",
    "input_formatted": "[2,1,3,2,1]",
    "input": "[2,1,3,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int minimumOperations(std::vector<int>& nums) {\n        // Count the frequency of each group in its respective position\n        std::vector<std::vector<int>> freq(3, std::vector<int>(3, 0));\n        for (int i = 0; i < nums.size(); ++i) {\n            freq[nums[i] - 1][i % 3]++;\n        }\n\n        // Calculate minimum operations for making each column (position in sorted array) into each group\n        int minOps = INT_MAX;\n        for (int g1 = 0; g1 < 3; ++g1) {\n            for (int g2 = 0; g2 < 3; ++g2) {\n                if (g2 == g1) continue; // Ensure different groups for different positions\n                for (int g3 = 0; g3 < 3; ++g3) {\n                    if (g3 == g1 || g3 == g2) continue; // Ensure different groups for different positions\n                    int ops = 0;\n                    // Calculate operations needed when assigning each group to a specific position\n                    for (int i = 0; i < 3; ++i) {\n                        ops += nums.size() / 3 - freq[i][g1] + (nums.size() % 3 > i ? 1 : 0) - freq[i][g2] + (nums.size() % 3 > i ? 1 : 0) - freq[i][g3];\n                    }\n                    minOps = std::min(minOps, ops);\n                }\n            }\n        }\n        \n        return minOps / 2; // Each swap counted twice, so divide by 2\n    }\n};"
}