{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 92580000,
    "question_id": "2904",
    "elapsed_time": 102,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,1,3,2,1]",
    "expected_output": "3",
    "task_finish_time": 1708166007224,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2226,
    "total_testcases": 7414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1177708429",
    "input_formatted": "[2,1,3,2,1]",
    "input": "[2,1,3,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int minimumOperations(std::vector<int>& nums) {\n        std::vector<int> count(4, 0); // Indexes 1 to 3 used for counting\n        for (int num : nums) {\n            ++count[num];\n        }\n        \n        // Count non-empty groups\n        int nonEmptyGroups = 0;\n        for (int i = 1; i <= 3; ++i) {\n            if (count[i] > 0) ++nonEmptyGroups;\n        }\n        \n        // The minimum operations is the number of non-empty groups minus 1\n        // Because we want all numbers to be in the same group for a beautiful array\n        return nonEmptyGroups - 1;\n    }\n};"
}