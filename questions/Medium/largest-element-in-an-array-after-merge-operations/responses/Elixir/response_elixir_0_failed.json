{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 192732000,
    "question_id": "2872",
    "elapsed_time": 1277,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,7,9,3]",
    "expected_output": "21",
    "task_finish_time": 1707483889490,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 36,
    "total_testcases": 1023,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1170608089",
    "input_formatted": "[2,3,7,9,3]",
    "input": "[2,3,7,9,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_array_value(nums :: [integer]) :: integer\n  def max_array_value(nums) do\n    nums\n    |> Enum.reduce_while(0, fn x, acc ->\n      if acc == 0 or x <= hd(acc), do: {:cont, [x | acc]}, else: {:cont, [x + hd(acc) | tl(acc)]}\n    end)\n    |> hd()\n  end\nend"
}