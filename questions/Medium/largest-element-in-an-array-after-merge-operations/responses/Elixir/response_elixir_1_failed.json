{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 189024000,
    "question_id": "2872",
    "elapsed_time": 1160,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[2,3,7,9,3]",
    "expected_output": "21",
    "task_finish_time": 1707483912590,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 74,
    "total_testcases": 1023,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1170608303",
    "input_formatted": "[2,3,7,9,3]",
    "input": "[2,3,7,9,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_array_value(nums :: [integer]) :: integer\n  def max_array_value(nums) do\n    nums\n    |> Enum.reduce([], fn x, acc ->\n      case acc do\n        [h | _t] when x >= h -> [x + h | _t]\n        _ -> [x | acc]\n      end\n    end)\n    |> Enum.max()\n  end\nend"
}