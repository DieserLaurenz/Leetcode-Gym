{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126240000,
    "question_id": "2872",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,7,9,3]",
    "expected_output": "21",
    "task_finish_time": 1707474146409,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 94,
    "total_testcases": 1023,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1170520637",
    "input_formatted": "[2,3,7,9,3]",
    "input": "[2,3,7,9,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (max-array-value nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let loop ([nums nums])\n    (if (null? (cdr nums)) (car nums)\n        (let loop-inner ([i 0] [result '()])\n          (if (< i (- (length nums) 1))\n              (if (<= (list-ref nums i) (list-ref nums (+ i 1)))\n                  (loop (append (take nums i) (list (+ (list-ref nums i) (list-ref nums (+ i 1)))) (drop nums (+ i 2))))\n                  (loop-inner (+ i 1) result))\n              (apply max (append result (list (car (reverse nums))))))))))"
}