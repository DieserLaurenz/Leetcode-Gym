{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 32088000,
    "question_id": "2872",
    "elapsed_time": 789,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[2,3,7,9,3]",
    "expected_output": "21",
    "task_finish_time": 1708777115960,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 203,
    "total_testcases": 1023,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184787089",
    "input_formatted": "[2,3,7,9,3]",
    "input": "[2,3,7,9,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxArrayValue(self, nums: List[int]) -> int:\n        stack = []\n        for num in nums:\n            while stack and stack[-1] <= num:\n                num += stack.pop()\n            stack.append(num)\n        return max(stack)"
}