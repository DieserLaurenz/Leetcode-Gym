{
    "acRate": 52.141792495625694,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2745",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Construct the Longest New String",
    "titleSlug": "construct-the-longest-new-string",
    "topicTags": [
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Brainteaser",
            "id": "VG9waWNUYWdOb2RlOjMy",
            "slug": "brainteaser"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int longestString(int x, int y, int z) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int longestString(int x, int y, int z) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def longestString(self, x, y, z):         \"\"\"         :type x: int         :type y: int         :type z: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def longestString(self, x: int, y: int, z: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int longestString(int x, int y, int z){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int LongestString(int x, int y, int z) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} x  * @param {number} y  * @param {number} z  * @return {number}  */ var longestString = function(x, y, z) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function longestString(x: number, y: number, z: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $x      * @param Integer $y      * @param Integer $z      * @return Integer      */     function longestString($x, $y, $z) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func longestString(_ x: Int, _ y: Int, _ z: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun longestString(x: Int, y: Int, z: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int longestString(int x, int y, int z) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func longestString(x int, y int, z int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} x # @param {Integer} y # @param {Integer} z # @return {Integer} def longest_string(x, y, z)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def longestString(x: Int, y: Int, z: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn longest_string(x: i32, y: i32, z: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (longest-string x y z)   (-> exact-integer? exact-integer? exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec longest_string(X :: integer(), Y :: integer(), Z :: integer()) -> integer(). longest_string(X, Y, Z) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec longest_string(x :: integer, y :: integer, z :: integer) :: integer   def longest_string(x, y, z) do    end end"
        }
    ],
    "content": "You are given three integers x, y, and z. You have x strings equal to \"AA\", y strings equal to \"BB\", and z strings equal to \"AB\". You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain \"AAA\" or \"BBB\" as a substring. Return the maximum possible length of the new string. A substring is a contiguous non-empty sequence of characters within a string.  Example 1:  Input: x = 2, y = 5, z = 1 Output: 12 Explanation: We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\".  That string has length 12, and we can show that it is impossible to construct a string of longer length.  Example 2:  Input: x = 3, y = 2, z = 2 Output: 14 Explanation: We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\".  That string has length 14, and we can show that it is impossible to construct a string of longer length.   Constraints:  1 <= x, y, z <= 50  "
}