{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3100000,
    "question_id": "2850",
    "elapsed_time": 17,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706867550838,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 33,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1163788467",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func longestString(x int, y int, z int) int {\n    // If we have more \"AB\" strings than needed to separate \"AA\" and \"BB\" strings,\n    // we will use them to separate each \"AA\" and \"BB\" with one \"AB\",\n    // but we can't start or end with \"AB\" because it would reduce the total length unnecessarily.\n    \n    // The idea is to always place an \"AB\" between \"AA\" and \"BB\" when possible.\n    // However, when \"AA\" and \"BB\" are in excess, we must manage them according to the rules.\n    \n    // The strategy is to first place all \"AA\" and \"BB\" strings with \"AB\" in between if possible,\n    // then add remaining \"AB\" strings in between to maximize length without breaking the rules.\n    \n    // Calculate the base length from \"AA\" and \"BB\" strings.\n    // We can have at most 2 more \"AA\" or \"BB\" than the other to avoid \"AAA\" or \"BBB\".\n    // The additional \"AB\" strings can be used to insert between any \"AA\" or \"BB\" to avoid the forbidden substrings.\n\n    // Adjusting the counts of \"AA\" and \"BB\" strings to ensure we don't go over the limit of \"AAA\" or \"BBB\"\n    totalLength := 0 // This will store the total length of the concatenated string.\n    \n    if x > y {\n        // More \"AA\" strings than \"BB\", use \"BB\" to separate \"AA\" as much as possible.\n        totalLength = min(x, y) * 4 // Each pair of \"AA\" and \"BB\" contributes 4 to the length.\n        if z >= (x - y) {\n            // If we have enough \"AB\" to perfectly balance or exceed, use them to separate and add leftovers.\n            totalLength += (x - y) * 2 // Use \"AB\" to separate extra \"AA\"\n            z -= (x - y) // Subtract used \"AB\"\n            totalLength += min(z, 2) * 2 // Use up to 2 \"AB\" at the ends if available\n            x = y // Balancing \"AA\" and \"BB\"\n            z -= min(z, 2) // Subtract used \"AB\" at the ends\n        } else {\n            totalLength += z * 2 // Use all \"AB\" to separate \"AA\" and \"BB\"\n            x -= z // Adjust \"AA\" count after using \"AB\"\n            y -= z // Adjust \"BB\" count after using \"AB\"\n            z = 0 // All \"AB\" used\n        }\n    } else {\n        // More \"BB\" strings or equal, similar logic applies.\n        totalLength = min(x, y) * 4\n        if z >= (y - x) {\n            totalLength += (y - x) * 2\n            z -= (y - x)\n            totalLength += min(z, 2) * 2\n            y = x\n            z -= min(z, 2)\n        } else {\n            totalLength += z * 2\n            x -= z\n            y -= z\n            z = 0\n        }\n    }\n\n    // After balancing with \"AB\", add the remaining \"AB\" to the middle if any.\n    // This allows for the longest possible string without creating \"AAA\" or \"BBB\".\n    if z > 0 {\n        // If there are still \"AB\" strings left, distribute them evenly.\n        additional := min(z, (x + y + 1)) * 2 // Can insert an \"AB\" between any two strings, or at the start/end.\n        totalLength += additional\n    }\n\n    return totalLength\n}\n\n// Helper function to find the minimum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}