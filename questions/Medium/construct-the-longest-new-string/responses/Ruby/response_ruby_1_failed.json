{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211396000,
    "question_id": "2850",
    "elapsed_time": 164,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706875919305,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 32,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1163870279",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} x\n# @param {Integer} y\n# @param {Integer} z\n# @return {Integer}\ndef longest_string(x, y, z)\n  # Starting with \"AA\" and \"BB\" strings, we can have at most 2 in a row for each\n  # \"AB\" strings can be inserted between \"AA\" and \"BB\" to avoid \"AAA\" or \"BBB\"\n  \n  # Strategy:\n  # 1. Use all \"AB\" strings, since they do not contribute to \"AAA\" or \"BBB\"\n  # 2. Alternate \"AA\" and \"BB\" strings to maximize length, respecting the constraint\n  # 3. If \"AA\" or \"BB\" are left without \"AB\", limit their use to 2\n  \n  # The maximum number of \"AA\" or \"BB\" we can use directly is twice the number of each plus \"AB\"\n  max_aa_bb_use = [x, y].min + z\n  \n  # If we have more \"AA\" or \"BB\" than the other, calculate the extra\n  extra = (x - max_aa_bb_use).abs + (y - max_aa_bb_use).abs\n  \n  # We can use an extra \"AA\" or \"BB\" only if there are \"AB\" strings to separate them\n  # Otherwise, we are limited by the count of the lesser of \"AA\" or \"BB\" plus \"AB\"\n  if extra > 0 && z > 0\n    extra_use = [extra, z].min\n  else\n    extra_use = 0\n  end\n  \n  # Calculate the maximum length\n  # Each \"AA\", \"BB\", and \"AB\" contribute 2 to the length\n  # Extra \"AA\" or \"BB\" can be used up to the limit determined by \"AB\"\n  max_length = 2 * (max_aa_bb_use + z + extra_use)\n  \n  max_length\nend"
}