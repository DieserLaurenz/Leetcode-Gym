{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15400000,
    "question_id": "2850",
    "elapsed_time": 20,
    "compare_result
    "code_output": "17",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706866990519,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 30,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1163782801",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func longestString(_ x: Int, _ y: Int, _ z: Int) -> Int {\n        // The strategy is to place \"AB\" in between \"AA\" and \"BB\" as much as possible.\n        // When \"AB\" is not available, we need to consider the maximum usable \"AA\" and \"BB\".\n        \n        // The difference between \"AA\" and \"BB\" strings determines the arrangement.\n        let diff = abs(x - y)\n        // The total \"AB\" strings can act as a buffer between \"AA\" and \"BB\".\n        let totalAB = min(x + y, z) // Use \"AB\" to separate or as itself\n        \n        // If we have more \"AB\" strings than needed to separate, they contribute directly to length.\n        // Otherwise, their count helps in alternating \"AA\" and \"BB\".\n        if z >= diff {\n            // When \"AB\" is enough to separate all \"AA\" and \"BB\", or there are more \"AB\"s\n            // Each \"AA\" and \"BB\" can be used fully, with \"AB\" acting as separators or additional length.\n            let baseLength = (x + y) * 2 + min(z, x + y)\n            return baseLength\n        } else {\n            // When \"AB\" is not enough to perfectly alternate, we use as many as possible\n            // and adjust for the imbalance between \"AA\" and \"BB\".\n            let baseLength = (x + y) * 2 + z\n            // Add the difference if \"AB\" can cover it, otherwise add what's possible.\n            return baseLength + min(diff, z) * 2\n        }\n    }\n}"
}