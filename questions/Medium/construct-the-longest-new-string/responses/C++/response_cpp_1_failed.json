{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8348000,
    "question_id": "2850",
    "elapsed_time": 32,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706856447712,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1163673106",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int longestString(int x, int y, int z) {\n        // Firstly, handle the edge case where the \"AB\" strings can perfectly intersperse \"AA\" and \"BB\"\n        // such that they can form a seamless alternating pattern without creating \"AAA\" or \"BBB\".\n        // The maximum length here is twice the sum of all inputs, as each string contributes 2 characters.\n        if (z >= abs(x - y)) {\n            int minPairs = std::min(x, y); // Minimum of \"AA\" or \"BB\"\n            int maxPairs = std::max(x, y); // Maximum of \"AA\" or \"BB\"\n            // Every \"AA\" and \"BB\" can be used, interspersed by \"AB\" as needed.\n            // Additional \"AB\" can be placed at the beginning or end, or between any \"AA\" and \"BB\".\n            return 2 * (minPairs + maxPairs + z);\n        }\n\n        // If \"AB\" is not enough to intersperse all \"AA\" and \"BB\", we use them to balance out the counts of \"AA\" and \"BB\".\n        // After balancing \"AA\" and \"BB\" as much as possible, we alternate \"AA\" and \"BB\" to avoid triplets.\n        int balancedLength = 2 * (x + y + z); // Each string contributes 2 characters to the length.\n        // If there's a difference greater than \"z\", it means we can't intersperse all \"AA\" or \"BB\" without forming triplets.\n        // Thus, we need to adjust the length to account for the maximum allowable sequence.\n        if (x > y + z) {\n            // Too many \"AA\", adjust the length considering \"BB\" and \"AB\" can't fully intersperse \"AA\".\n            balancedLength -= 2 * (x - (y + z + 1));\n        } else if (y > x + z) {\n            // Too many \"BB\", similar adjustment.\n            balancedLength -= 2 * (y - (x + z + 1));\n        }\n\n        return balancedLength;\n    }\n};"
}