{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27204000,
    "question_id": "2850",
    "elapsed_time": 66,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706866246201,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1163774829",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int LongestString(int x, int y, int z) {\n        // The strategy is to place \"AB\" between \"AA\" and \"BB\" to maximize length without causing \"AAA\" or \"BBB\".\n        // The goal is to find the maximum length possible under these conditions.\n        \n        // Start with using all \"AB\" strings, as they can always be included.\n        int totalLength = z * 2;\n        \n        // Determine how to use \"AA\" and \"BB\" optimally.\n        // First, ensure that \"AA\" and \"BB\" are used in such a way to not exceed the \"AAA\" or \"BBB\" limit.\n        int minABNeeded = Math.Abs(x - y); // Minimum \"AB\" needed to separate excess \"AA\" or \"BB\"\n        \n        if (z >= minABNeeded) {\n            // If we have enough \"AB\" to separate excess \"AA\" or \"BB\", we can use all \"AA\" and \"BB\".\n            totalLength += (x + y) * 2;\n            // After separating the excess, each additional \"AB\" can be paired with an \"AA\" or \"BB\" not to waste any \"AB\".\n            int leftoverAB = z - minABNeeded;\n            // Add leftover \"AB\" pairs to total length, but only up to the number of \"AA\" or \"BB\".\n            totalLength += Math.Min(leftoverAB, x + y) * 2;\n        } else {\n            // If not enough \"AB\" to separate all excess \"AA\" or \"BB\", use as many as we can to maximize the length.\n            // This involves alternating \"AA\" and \"BB\" with \"AB\" until \"AB\" runs out.\n            totalLength += (z * 2); // Pair each \"AB\" with an \"AA\" or \"BB\".\n            if (x > y) {\n                // Use one more \"AA\" if possible.\n                totalLength += Math.Min(2 * (y + 1), x * 2);\n            } else {\n                // Use one more \"BB\" if possible.\n                totalLength += Math.Min(2 * (x + 1), y * 2);\n            }\n        }\n\n        return totalLength;\n    }\n}"
}