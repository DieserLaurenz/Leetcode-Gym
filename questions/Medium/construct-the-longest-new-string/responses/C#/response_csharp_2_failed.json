{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27276000,
    "question_id": "2850",
    "elapsed_time": 49,
    "compare_result
    "code_output": "148",
    "std_output": "",
    "last_testcase": "1\n34\n39",
    "expected_output": "84",
    "task_finish_time": 1706866306058,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 720,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1163775426",
    "input_formatted": "1, 34, 39",
    "input": "1\n34\n39",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int LongestString(int x, int y, int z) {\n        // The core idea is to use \"AA\" and \"BB\" as much as possible while ensuring no \"AAA\" or \"BBB\".\n        // \"AB\" is used either as a separator or to maximize the length by alternation.\n\n        int totalLength = 0; // Initialize the total length of the concatenated string.\n\n        // If we have more \"AB\" strings or an equal amount to the difference between \"AA\" and \"BB\",\n        // we can just alternate them, ensuring no \"AAA\" or \"BBB\" sequence occurs.\n        if (z >= Math.Abs(x - y) - 1) {\n            // We use all \"AA\" and \"BB\" strings plus all \"AB\" strings.\n            totalLength += x * 2 + y * 2 + z * 2;\n        } else {\n            // If \"AB\" strings are not enough to alternate all \"AA\" and \"BB\" perfectly,\n            // we focus on maximizing the use of \"AB\" to prevent \"AAA\" or \"BBB\".\n            if (x > y) {\n                // If we have more \"AA\", we use \"AB\" to separate them and use all \"BB\".\n                totalLength += y * 2 + (y + 1) * 2 + z * 2;\n            } else {\n                // If we have more \"BB\", we use \"AB\" to separate them and use all \"AA\".\n                totalLength += x * 2 + (x + 1) * 2 + z * 2;\n            }\n        }\n\n        // The calculation above might overestimate the length when the number of \"AB\" strings is not sufficient\n        // to alternate between all \"AA\" and \"BB\" without resulting in \"AAA\" or \"BBB\".\n        // Thus, we need to adjust the calculation to ensure it reflects the maximum length accurately.\n\n        // Correcting the overestimation by ensuring we do not exceed the bounds set by the problem constraints.\n        int maxPairs = Math.Min(x, y) + z; // Maximum pairs of \"AA\"-\"BB\" that can be formed with or without \"AB\".\n        if (x != y) {\n            // Adjusting for the case where there's a difference between \"AA\" and \"BB\" counts.\n            totalLength = Math.Min(totalLength, (2 * maxPairs + 2 * Math.Min(Math.Max(x, y), maxPairs + 1)));\n        } else {\n            // When \"AA\" and \"BB\" counts are equal, we can directly use all with \"AB\" to form the longest string.\n            totalLength = Math.Min(totalLength, 2 * (x + y + z));\n        }\n\n        return totalLength;\n    }\n}"
}