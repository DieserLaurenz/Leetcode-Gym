{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27296000,
    "question_id": "2850",
    "elapsed_time": 62,
    "compare_result": "01000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000001000000000000100000000000000000000000000000001000000000000000000000000000001000100000001000000000000000000000000000000000000100000100000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000010001000000000000000100000000000000000000000000000000000000001000010100000000100000000010000000000000000000000000010000000000000000000000000000010000000000000000000000000000000000000100000010000000000000000010000000000000000000000000000000000000000000000000000000000010000000000010000010000000010000010000000000000000001000000011000000000000000000100000000000000001000000000000000000000000010000000000000000010000000000000010000000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000100000000000000000000000000000000000100000000000000100000010000000000000000000000000001110000100000000000000001000000000100000000001000000001000001000000000000000000000000000000000000000000000000001010000000000000000000000000000001000000001000010010000110000010000000000000000000001000000001000000100010000000000101000000000001000000000000000000000000000000100000000000000000100000000000000000000000000000000100000000000000000000100110000000000100000000001000000000000000000000000000100000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000100000000000000000000000000010010000010000000000000000000000100100000000000100000100000000000000000010001100000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000100000000001000000100000000000000000000000000000000000000000000000100000000000000000000000000000000101000000000100000000000000000000010000100000000000000000000000000000000000000000000000000000010000000000010000000000010000000100000000000100000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000001",
    "code_output": "16",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706866194076,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1163774315",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int LongestString(int x, int y, int z) {\n        // Calculate the total length when using \"AA\" and \"BB\" as much as possible.\n        // Since we cannot have three of the same type in a row, the basic strategy is to use \"AB\" to separate them when needed.\n        \n        // First, find out which is larger, x or y, and by how much.\n        int maxSame = Math.Max(x, y); // The larger count of \"AA\" or \"BB\"\n        int minSame = Math.Min(x, y); // The smaller count of \"AA\" or \"BB\"\n        int diff = maxSame - minSame; // Difference in count\n\n        if (z >= diff) {\n            // If we have enough \"AB\" to separate all excess \"AA\"/\"BB\", then we can use all \"AA\" and \"BB\" plus \"AB\" as separators.\n            // Each \"AB\" beyond diff can also contribute fully to the length, effectively being placed between \"AA\" and \"BB\".\n            return (x + y + z) * 2; // Each contributes 2 to the length\n        } else {\n            // If we do not have enough \"AB\" to separate all, we use all \"AB\" plus the maximum possible pairs of \"AA\"/\"BB\" that can be made without breaking the rule.\n            // The total length includes all \"AB\", pairs made from the minimum of x and y, and as many pairs from the difference as \"AB\" can separate.\n            return (2 * (minSame + z)) + (2 * maxSame); // Use all \"AB\" to separate and count all \"AA\" and \"BB\"\n        }\n    }\n}"
}