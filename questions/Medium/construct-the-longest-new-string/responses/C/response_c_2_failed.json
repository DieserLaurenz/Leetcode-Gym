{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5244000,
    "question_id": "2850",
    "elapsed_time": 16,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706866126987,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1163773653",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int longestString(int x, int y, int z) {\n    // Calculate the base length from \"AA\" and \"BB\" strings.\n    // At most, one type can be used one more time than the other, not counting \"AB\" usage.\n    int maxLength = 2 * (x + y); // Each \"AA\" or \"BB\" contributes 2 to the length.\n\n    // Determine the maximum number of \"AA\" or \"BB\" that can be placed without violating the constraints.\n    // The idea is to alternate \"AA\" and \"BB\" to avoid \"AAA\" or \"BBB\".\n    if (x > y) {\n        // If \"AA\" is more frequent, we can only place two more \"AA\" than \"BB\", plus \"AB\" strings.\n        int extraA = x - y - 2; // Calculate excess \"AA\" strings after filling \"BB\" and allowable \"AA\" over \"BB\".\n        if (extraA > 0) {\n            // If we have more \"AA\" than can be legally placed, we need to reduce the maxLength.\n            maxLength -= 2 * extraA;\n        }\n    } else if (y > x) {\n        // Similarly, if \"BB\" is more frequent, only two more \"BB\" can be placed than \"AA\", plus \"AB\" strings.\n        int extraB = y - x - 2; // Calculate excess \"BB\" strings.\n        if (extraB > 0) {\n            // Reduce maxLength for excess \"BB\" strings.\n            maxLength -= 2 * extraB;\n        }\n    }\n\n    // Use \"AB\" to fill in the gaps or extend the string.\n    // Each \"AB\" can serve as a bridge between \"AA\" and \"BB\" or vice versa, so all \"AB\" strings can be used effectively.\n    maxLength += 2 * z;\n\n    return maxLength;\n}"
}