{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5624000,
    "question_id": "2850",
    "elapsed_time": 22,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706866011164,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 147,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1163772470",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int longestString(int x, int y, int z) {\n    int totalLength = 0;\n\n    // If both x and y are more than 0, we can start by placing an \"AA\" or \"BB\",\n    // then alternating with the other. Each \"AA\" or \"BB\" pair contributes 4 to the length.\n    // We then adjust for the extra \"AA\" or \"BB\" if one is greater than the other.\n    if (x > 0 && y > 0) {\n        int minXY = x < y ? x : y; // Find the minimum of x and y\n        totalLength += 4 * minXY; // Add length for alternating \"AA\" and \"BB\"\n        x -= minXY; // Adjust remaining \"AA\"\n        y -= minXY; // Adjust remaining \"BB\"\n    }\n\n    // Add remaining \"AA\" or \"BB\" strings, ensuring not to exceed two consecutively.\n    if (x > 0) {\n        totalLength += x > 2 ? 4 : 2 * x;\n    }\n    if (y > 0) {\n        totalLength += y > 2 ? 4 : 2 * y;\n    }\n\n    // \"AB\" strings can be freely added without worrying about \"AAA\" or \"BBB\".\n    // However, their addition depends on the structure formed by \"AA\" and \"BB\".\n    // If we used up all \"AA\" and \"BB\", we can alternate \"AB\" with the remaining \"AA\" or \"BB\",\n    // otherwise, \"AB\" can extend the sequence by z * 2, but not beyond the initial alternation limit.\n    if (x == 0 && y == 0) {\n        totalLength += 2 * z; // Add length for all \"AB\"\n    } else {\n        // When we have remaining \"AA\" or \"BB\", we can use \"AB\" to avoid \"AAA\" or \"BBB\".\n        // The strategy depends on whether we have more \"AB\" than the slots available\n        // between \"AA\" and \"BB\" pairs. Since the problem simplifies here, we can add\n        // a limited number of \"AB\" to the length without exceeding the maximum.\n        // This part needs to be adjusted based on a deeper analysis of \"AB\" placement.\n        int maxABAddition = (x > 2 || y > 2) ? 2 : z * 2;\n        totalLength += maxABAddition;\n    }\n\n    return totalLength;\n}"
}