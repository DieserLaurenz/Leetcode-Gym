{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5416000,
    "question_id": "2850",
    "elapsed_time": 47,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706857318842,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1163683653",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int longestString(int x, int y, int z) {\n    // To ensure we never have more than two \"AA\" or \"BB\" consecutively,\n    // we will use \"AB\" to separate them when possible.\n    // The idea is to alternate \"AA\" and \"BB\" with \"AB\" in between as much as possible.\n    \n    // Calculate the maximum \"AA\" and \"BB\" we can have without breaking the rule.\n    int maxAA = x > 2 ? 2 : x;\n    int maxBB = y > 2 ? 2 : y;\n    \n    // Start with the maximum possible lengths for \"AA\" and \"BB\".\n    int totalLength = maxAA * 2 + maxBB * 2;\n    \n    // Use \"AB\" to alternate as much as possible.\n    // Calculate the number of \"AB\" we can actually use.\n    // For every \"AB\" used, we can add 2 to the total length.\n    // However, we can only use \"AB\" up to the point where it can help\n    // alternate without creating \"AAA\" or \"BBB\".\n    if (z > 0) {\n        int minABNeeded = x + y - 1; // Minimum \"AB\" needed to alternate without \"AAA\" or \"BBB\".\n        int abUsed = z < minABNeeded ? z : minABNeeded;\n        totalLength += abUsed * 2;\n\n        // Adjust for any additional \"AA\" or \"BB\" we can add with remaining \"AB\".\n        if (z > minABNeeded) {\n            int remainingAB = z - minABNeeded;\n            int additionalPairs = remainingAB / 2;\n            int maxAdditionalAA = (x - maxAA) > additionalPairs ? additionalPairs : (x - maxAA);\n            int maxAdditionalBB = (y - maxBB) > additionalPairs ? additionalPairs : (y - maxBB);\n            \n            totalLength += maxAdditionalAA * 2;\n            totalLength += maxAdditionalBB * 2;\n            totalLength += (remainingAB - maxAdditionalAA - maxAdditionalBB) * 2;\n        }\n    }\n    \n    // Return the calculated total length.\n    return totalLength;\n}"
}