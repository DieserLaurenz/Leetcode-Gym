{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5512000,
    "question_id": "2850",
    "elapsed_time": 16,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706857378206,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1163684364",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int longestString(int x, int y, int z) {\n    // The approach is to first calculate how many \"AA\" and \"BB\" we can use.\n    // We can always use up to x \"AA\" and y \"BB\", but we need to ensure not to exceed\n    // the constraint of forming \"AAA\" or \"BBB\". We'll use \"AB\" to break these patterns.\n    \n    // If we have more \"AB\" strings than needed to alternate between \"AA\" and \"BB\",\n    // we can simply insert them between \"AA\" and \"BB\" without worry.\n    // The length of the final string is calculated by considering the number of \"AA\", \"BB\",\n    // and \"AB\" strings we can fit without breaking the rules.\n    \n    // Calculate the initial length based on \"AA\" and \"BB\" strings.\n    int totalLength = 2 * (x + y); // Each \"AA\" or \"BB\" contributes 2 to the length.\n    \n    // Calculate the maximum sequences of \"AA\" or \"BB\" without \"AB\" to break them up.\n    int maxSequencesWithoutAB = x + y - 1; // Maximum sequences we can have without an \"AB\" to separate them.\n    \n    // If we have enough \"AB\" strings to separate all \"AA\" and \"BB\", use them all.\n    if (z >= maxSequencesWithoutAB) {\n        totalLength += 2 * z; // Each \"AB\" contributes 2 to the length.\n    } else {\n        // If we do not have enough \"AB\" to separate all, we need to alternate them smartly.\n        // We can place \"AB\" between \"AA\" and \"BB\" to maximize length.\n        // Additional 2 for each \"AB\" used.\n        totalLength += 2 * z;\n        \n        // Check if we can make a sequence without breaking the \"AAA\" or \"BBB\" rule.\n        // This happens when we have at least one \"AB\" to separate every \"AA\" and \"BB\".\n        if (x > 0 && y > 0 && z < x + y) {\n            // For every \"AB\" we can't use to separate, we lose 2 characters from the total possible length.\n            totalLength -= 2 * (x + y - 1 - z);\n        }\n    }\n    \n    // Adjust for the case where \"AA\" or \"BB\" strings are more than two more than the other,\n    // which could lead to one extra \"AA\" or \"BB\" that can't be used without breaking the rule.\n    if (abs(x - y) > z) {\n        totalLength -= 2 * (abs(x - y) - z);\n    }\n    \n    return totalLength;\n}"
}