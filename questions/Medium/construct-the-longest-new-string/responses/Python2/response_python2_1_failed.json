{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11608000,
    "question_id": "2850",
    "elapsed_time": 39,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1708745660715,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184479802",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def longestString(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        if x > y:\n            x, y = y, x  # Ensure x is the smaller or equal to y\n\n        # Without \"AB\" strings, the optimal strategy is to alternate \"AA\" and \"BB\",\n        # but we can't go beyond \"AAA\" or \"BBB\". Thus, without \"AB\", the maximum length\n        # we can achieve is 2*(x+y) because each \"AA\" or \"BB\" contributes 2 to the length,\n        # but we need to consider the constraint of not forming \"AAA\" or \"BBB\".\n        # With \"AB\" strings, we can insert them in between \"AA\" and \"BB\" to avoid \"AAA\" and \"BBB\".\n        # The optimal use of \"AB\" is to sandwich it between \"AA\" and \"BB\" to increase the length\n        # without breaking the rules.\n        # The strategy changes when one of \"AA\" or \"BB\" is much more than the other, as we have\n        # to make sure we don't end up with \"AAA\" or \"BBB\".\n\n        # When z >= y - x, we can balance out \"AA\" and \"BB\" by using \"AB\" in between them,\n        # effectively making use of all \"AB\"s to balance the difference and then just counting\n        # the remaining \"AB\"s as extra length.\n        # When z < y - x, the number of \"AB\" is not enough to balance the difference between \"AA\" and \"BB\",\n        # so we use as many \"AB\"s as possible to minimize \"AAA\" or \"BBB\" occurrence.\n\n        if z >= y - x:\n            return 2*(x + y + z)\n        else:\n            return 2*(x + z) + 2*y"
}