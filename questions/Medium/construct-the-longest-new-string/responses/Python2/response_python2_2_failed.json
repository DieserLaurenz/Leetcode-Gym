{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11480000,
    "question_id": "2850",
    "elapsed_time": 58,
    "compare_result": "11000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000001000000000000100000000000000000000000000000001000000000000000000000000000001000100000001000000000000000000000000000000000000100000100000000000000100000000000000000000000000000000000000100000000000000000000000000000000000100010001000000000001000100000000000000000000000000000000000000001000010100000000100000000010000000000000000000000000010000000000000000000000000000010000000000000100000000000000000000000100000010000000000000000010000000000000000000000000000000000000000000000000000000000010000000000010000010000000010000010000000000000000001000000011000000000000000000100000000000000001000000000000000000000000010000000000000000010000000000000010000000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000100000000000000000000000010000000000100000000000000100000010000000000000000000000000001110000100000000000000001000000000100000000001000000001000001000000000000000000000000000000000000000000000000001010000000000000000000000000000001000000001000010010000110000010000000001000000000001000000001000000100010000000000101000000000001000000000000000000000000000000100000000000000000100000000000000000000000000000000100000000000000000001100110000010000100000000001000000000000000000000000000100000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000100000000000000000000000000010010000010000000000000000000000100100000000000100000100000000000000000010001100000000000000000000000000000000001000000000000001000001000000100000000000000000000000000000000100000000001000000100000000000000000000000000000000000000000000000100000000000000000000000000000000101000000000100000010000000000000010000100000000000000000000000000000000000000000000000000000010000000000010000000000010000000100000000000100000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000001",
    "code_output": "70",
    "std_output": "",
    "last_testcase": "1\n34\n1",
    "expected_output": "8",
    "task_finish_time": 1708745692096,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 121,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184480040",
    "input_formatted": "1, 34, 1",
    "input": "1\n34\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def longestString(self, x, y, z):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :type z: int\n        :rtype: int\n        \"\"\"\n        # Sort x, y to have a non-decreasing order for simplification\n        x, y = sorted([x, y])\n\n        # Main logic to maximize string length while avoiding \"AAA\" or \"BBB\"\n        if z >= abs(x - y):\n            # If we have enough z to perfectly alternate between excess \"AA\" or \"BB\" we can use all\n            total_length = 2 * (x + y + z)\n        else:\n            # When we don't have enough \"AB\" to alternate, we use all \"AB\" and the balance of \"AA\" and \"BB\",\n            # ensuring we don't form \"AAA\" or \"BBB\"\n            total_length = 2 * (x + z) + 2 * z + (2 * (y - x - z))\n        return total_length"
}