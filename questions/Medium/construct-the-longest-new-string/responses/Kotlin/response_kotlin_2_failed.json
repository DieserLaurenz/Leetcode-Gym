{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34204000,
    "question_id": "2850",
    "elapsed_time": 300,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706867213491,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1163785018",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun longestString(x: Int, y: Int, z: Int): Int {\n        // Strategy:\n        // 1. Use \"AB\" to separate \"AA\" and \"BB\" as much as possible.\n        // 2. Alternate \"AA\" and \"BB\" to prevent \"AAA\" or \"BBB\".\n        // 3. Maximize the use of \"AA\" and \"BB\" given the constraints.\n\n        // Calculate the core length without considering \"AB\" strings.\n        // This is the maximum possible length using just \"AA\" and \"BB\" strings.\n        val maxCoreLength = Math.min(x, y) * 2 * 2 // *2 for pairs, *2 for \"AA\"/\"BB\" length\n\n        // Determine the extra \"AA\" or \"BB\" beyond the balanced core length.\n        val extra = Math.abs(x - y)\n\n        // Calculate length considering \"AB\" strings.\n        // Each \"AB\" can potentially add 2 to the length, but must also account for extra \"AA\" or \"BB\".\n        // The key is to use \"AB\" to effectively separate excess \"AA\" or \"BB\".\n        val maxLengthWithAB = if (z >= extra) {\n            // If we have more \"AB\" than extra \"AA\"/\"BB\", we can fully separate them and use additional \"AB\".\n            maxCoreLength + extra * 2 + Math.min(z - extra, Math.min(x, y) + 1) * 2\n        } else {\n            // If \"AB\" is not enough to separate all extras, use all \"AB\" to intersperse the extras.\n            maxCoreLength + z * 2\n        }\n\n        return maxLengthWithAB\n    }\n}"
}