{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34496000,
    "question_id": "2850",
    "elapsed_time": 603,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706867167033,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 32,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1163784547",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun longestString(x: Int, y: Int, z: Int): Int {\n        // Initialize counters for \"AA\", \"BB\", and \"AB\" strings\n        var aa = x\n        var bb = y\n        var ab = z\n\n        // Start with adding \"AA\" or \"BB\" whichever is more\n        var result = 0\n        if (aa > bb) {\n            // Add one \"AA\" if possible\n            if (aa > 0) {\n                result += 2\n                aa--\n            }\n        } else {\n            // Add one \"BB\" if possible\n            if (bb > 0) {\n                result += 2\n                bb--\n            }\n        }\n\n        // Now, add \"AB\", alternating with \"AA\" and \"BB\"\n        while (ab > 0 || aa > 0 || bb > 0) {\n            // If we have \"AB\" to use\n            if (ab > 0) {\n                // Alternate adding \"AB\" with whichever is available\n                if (aa > bb && aa > 0 || bb == 0) {\n                    result += 2 // Add \"AA\"\n                    aa--\n                } else if (bb >= aa && bb > 0) {\n                    result += 2 // Add \"BB\"\n                    bb--\n                }\n                result += 2 // Add \"AB\"\n                ab--\n            } else {\n                // If no \"AB\" left, carefully add \"AA\" or \"BB\"\n                if (aa > 0) {\n                    result += 2 * minOf(aa, 2) // Can add at most two \"AA\" to avoid \"AAA\"\n                    break // End loop as we cannot add more without \"AB\"\n                }\n                if (bb > 0) {\n                    result += 2 * minOf(bb, 2) // Can add at most two \"BB\" to avoid \"BBB\"\n                    break // End loop as we cannot add more without \"AB\"\n                }\n            }\n        }\n\n        return result\n    }\n}"
}