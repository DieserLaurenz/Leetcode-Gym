{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71156000,
    "question_id": "2850",
    "elapsed_time": 919,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706886047687,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1026,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1163983338",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec longest_string(x :: integer, y :: integer, z :: integer) :: integer\n  def longest_string(x, y, z) do\n    # The approach is to first use \"AB\" to separate \"AA\" and \"BB\" as much as possible.\n    # After using \"AB\", if either \"AA\" or \"BB\" is left without the other, only two of them can be used,\n    # because using more would result in \"AAA\" or \"BBB\".\n    # The maximum length of the string can then be calculated based on the optimal use of \"AA\", \"BB\", and \"AB\".\n\n    # Base length from \"AB\", which separates \"AA\" and \"BB\" strings.\n    base_length = z * 2\n\n    # Calculate the maximum number of \"AA\" and \"BB\" that can be used without forming \"AAA\" or \"BBB\".\n    # This depends on whether there's enough \"AB\" to separate them.\n    # We can add 1 to either x or y count because an \"AB\" can go on either side.\n    max_aa_bb = Enum.min([x, y]) * 2 + Enum.min([x, y, z + 1]) * 2\n\n    # If z is greater than the difference between x and y, we can place \"AB\" between all \"AA\" and \"BB\",\n    # plus one extra \"AA\" or \"BB\" depending on which is greater.\n    extra_aa_or_bb = if abs(x - y) <= z, do: 2, else: 0\n\n    # Return the total length.\n    base_length + max_aa_bb + extra_aa_or_bb\n  end\nend"
}