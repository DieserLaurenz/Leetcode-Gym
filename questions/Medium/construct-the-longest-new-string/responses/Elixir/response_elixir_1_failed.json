{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71428000,
    "question_id": "2850",
    "elapsed_time": 795,
    "compare_result
    "code_output": "18",
    "std_output": "",
    "last_testcase": "2\n5\n1",
    "expected_output": "12",
    "task_finish_time": 1706886002049,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2003,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1163982818",
    "input_formatted": "2, 5, 1",
    "input": "2\n5\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec longest_string(x :: integer, y :: integer, z :: integer) :: integer\n  def longest_string(x, y, z) do\n    # Calculate the initial lengths possible by directly using \"AA\" and \"BB\"\n    initial_length = Enum.min([x, y]) * 2 * 2\n    \n    # Calculate how many \"AA\" and \"BB\" can be placed around \"AB\"\n    # Each \"AB\" allows for one \"AA\" and one \"BB\" around it, plus one more pair due to alternation\n    ab_effect = z * 2 + Enum.min([x, y]) * 2\n    \n    # Determine the excess of \"AA\" or \"BB\" not paired by \"AB\"\n    excess = Enum.max([x, y]) - Enum.min([x, y])\n    \n    # Calculate the maximum possible length considering the excess and the fact\n    # that we can only insert a limited number of \"AA\" or \"BB\" without creating \"AAA\" or \"BBB\"\n    # The excess can be used up to the point where it does not create three in a row\n    excess_usage = if excess > 0, do: Enum.min([excess, z + 1]) * 2, else: 0\n    \n    # The total length combines the initial use of \"AA\" and \"BB\", the effect of \"AB\",\n    # and the additional length from using excess \"AA\" or \"BB\" without violating constraints\n    total_length = initial_length + ab_effect + excess_usage\n    \n    # If there's no \"AB\" to separate excess \"AA\" or \"BB\", adjust for the maximum allowed\n    # Considering the case where \"AA\" or \"BB\" can only be added once more if \"z\" is not enough to separate them further\n    if z == 0 and excess > 0 do\n      total_length = initial_length + Enum.min([2, excess * 2])\n    end\n\n    total_length\n  end\nend"
}