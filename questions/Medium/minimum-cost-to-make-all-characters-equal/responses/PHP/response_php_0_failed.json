{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20560000,
    "question_id": "2817",
    "elapsed_time": 166,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"0011\"",
    "expected_output": "2",
    "task_finish_time": 1707763507610,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 103,
    "total_testcases": 1574,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1173465018",
    "input_formatted": "\"0011\"",
    "input": "\"0011\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Integer\n     */\n    function minimumCost($s) {\n        $n = strlen($s);\n        $cost = 0;\n        $flipCount = 0; // Tracks the number of flips needed to make all characters the same\n\n        for ($i = 0; $i < $n; ++$i) {\n            if ($s[$i] == '0') {\n                // If a '0' is encountered, consider flipping from the start to this index or from this index to the end\n                $cost += min($i + 1, $n - $i);\n                $flipCount++; // Increment flip count as a '0' requires action to make all characters '1'\n            }\n        }\n\n        // If all characters are '1', no cost is needed\n        if ($flipCount == 0) return 0;\n\n        // Calculate minimum cost by comparing the cost of flipping to make all '1's or all '0's\n        $minCost = PHP_INT_MAX;\n        $flipToMakeAllOnes = $flipCount;\n        $flipToMakeAllZeros = 0;\n\n        for ($i = 0; $i < $n; ++$i) {\n            if ($s[$i] == '0') {\n                $flipToMakeAllOnes--; // A '0' that needs to be flipped to make all '1's\n            } else {\n                $flipToMakeAllZeros++; // A '1' that would need to be flipped to make all '0's\n            }\n            // Calculate cost at each point and update minimum cost\n            $currentCost = $flipToMakeAllOnes * ($i + 1) + $flipToMakeAllZeros * ($n - $i);\n            $minCost = min($minCost, $currentCost);\n        }\n\n        // Add final pass to consider making all zeros with a flip at the end\n        $minCost = min($minCost, $flipToMakeAllZeros * $n);\n\n        return $minCost;\n    }\n}"
}