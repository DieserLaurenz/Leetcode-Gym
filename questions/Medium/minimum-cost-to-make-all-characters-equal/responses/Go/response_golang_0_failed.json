{
    "status_code": 20,
    "lang": "golang",
    "run_success": false,
    "compile_error": "Line 5: Char 9: cost declared and not used (solution.go)",
    "full_compile_error": "Line 5: Char 9: cost declared and not used (solution.go)",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2817",
    "task_finish_time": 1707764030487,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1173472165",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "func minimumCost(s string) int64 {\n    n := len(s)\n    prefix := make([]int, n+1)\n    suffix := make([]int, n+1)\n    var cost int64 = 0\n\n    for i := 0; i < n; i++ {\n        prefix[i+1] = prefix[i] + int(s[i]-'0')\n    }\n    for i := n - 1; i >= 0; i-- {\n        suffix[i] = suffix[i+1] + int(s[i]-'0')\n    }\n\n    minCost := int64(n) // Maximum cost is changing all to one side\n    for i := 0; i <= n; i++ {\n        // Cost to make all 0s to the left and all 1s to the right\n        costToLeft := int64(i-prefix[i]) + int64(suffix[i]-prefix[i])\n        // Cost to make all 1s to the left and all 0s to the right\n        costToRight := int64(prefix[i]) + int64(n-i-(suffix[i]-prefix[i]))\n        if costToLeft < minCost {\n            minCost = costToLeft\n        }\n        if costToRight < minCost {\n            minCost = costToRight\n        }\n    }\n\n    return minCost\n}"
}