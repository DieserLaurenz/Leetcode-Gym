{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15120000,
    "question_id": "2817",
    "elapsed_time": 58,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"0011\"",
    "expected_output": "2",
    "task_finish_time": 1707753983983,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 33,
    "total_testcases": 1574,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173309993",
    "input_formatted": "\"0011\"",
    "input": "\"0011\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long minimumCost(string s) {\n        int n = s.size();\n        long long cost = 0;\n        int zeroCount = 0, oneCount = 0;\n        \n        // Count the number of '0's and '1's in the string\n        for (char c : s) {\n            if (c == '0') zeroCount++;\n            else oneCount++;\n        }\n        \n        // Cost to make all characters '0' or '1' directly\n        long long minCost = min(zeroCount, oneCount);\n        \n        int flips = 0; // Count of flips needed to make substring uniform\n        for (int i = 0; i < n; ++i) {\n            // If we encounter '1', it suggests flipping from start to current index\n            if (s[i] == '1') flips++;\n            else flips--; // If we encounter '0', reduce the flip count as it moves towards uniformity\n            \n            // Reset flips to zero if it's negative, as negative flips don't make sense\n            if (flips < 0) flips = 0;\n            \n            // Update the minimum cost considering the cost of flips so far\n            minCost = min(minCost, (long long)flips + min(zeroCount, oneCount) - min(i + 1 - zeroCount, zeroCount));\n            \n            // Adjust the zeroCount as we move through the string\n            if (s[i] == '0') zeroCount--;\n        }\n        \n        return minCost;\n    }\n};"
}