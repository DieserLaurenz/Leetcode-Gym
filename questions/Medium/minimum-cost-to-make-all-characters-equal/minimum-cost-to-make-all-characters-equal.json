{
    "acRate": 53.665416546462794,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2712",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Cost to Make All Characters Equal",
    "titleSlug": "minimum-cost-to-make-all-characters-equal",
    "topicTags": [
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long minimumCost(string s) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long minimumCost(String s) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimumCost(self, s):         \"\"\"         :type s: str         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimumCost(self, s: str) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long minimumCost(char * s){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long MinimumCost(string s) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @return {number}  */ var minimumCost = function(s) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimumCost(s: string): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @return Integer      */     function minimumCost($s) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimumCost(_ s: String) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimumCost(s: String): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minimumCost(String s) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimumCost(s string) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @return {Integer} def minimum_cost(s)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimumCost(s: String): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimum_cost(s: String) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimum-cost s)   (-> string? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimum_cost(S :: unicode:unicode_binary()) -> integer(). minimum_cost(S) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimum_cost(s :: String.t) :: integer   def minimum_cost(s) do    end end"
        }
    ],
    "content": "You are given a 0-indexed binary string s of length n on which you can apply two types of operations:  Choose an index i and invert all characters fromindex 0 to index i(both inclusive), with a cost of i + 1 Choose an index i and invert all charactersfromindex i to index n - 1(both inclusive), with a cost of n - i  Return the minimum cost to make all characters of the string equal. Invert a character meansif its value is '0' it becomes '1' and vice-versa.  Example 1:  Input: s = \"0011\" Output: 2 Explanation: Apply the second operation with i = 2 to obtain s = \"0000\" for a cost of 2. It can be shown that 2 is the minimum cost to make all characters equal.  Example 2:  Input: s = \"010101\" Output: 9 Explanation: Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3. Apply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2.  Apply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1.  Apply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2. Apply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1.  The total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal.   Constraints:  1 <= s.length == n <= 105 s[i] is either '0' or '1'  "
}