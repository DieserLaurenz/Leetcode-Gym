{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101028000,
    "question_id": "3033",
    "elapsed_time": 246,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706733185264,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 327,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1162361689",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations s1 s2 x)\n  (-> string? string? exact-integer? exact-integer?)\n  (let ([n (string-length s1)]\n        [cost 0]\n        [i 0]\n        [mismatches '()])\n    ;; Iterate through both strings to identify mismatches\n    (for ([i (in-range n)])\n      (when (not (= (char->integer (string-ref s1 i))\n                    (char->integer (string-ref s2 i))))\n        (set! mismatches (cons i mismatches))))\n    ;; Process mismatches to calculate the cost\n    (let loop ([mismatches mismatches])\n      (cond\n       [(null? mismatches) cost]\n       [(null? (cdr mismatches)) -1] ;; Odd number of mismatches\n       [(= 1 (abs (- (car mismatches) (cadr mismatches)))) ;; Adjacent mismatches\n        (begin\n          (set! cost (+ cost 1))\n          (loop (cddr mismatches)))]\n       [else ;; Non-adjacent mismatches\n        (begin\n          (set! cost (+ cost x))\n          (loop (cdr mismatches)))]))\n    ))"
}