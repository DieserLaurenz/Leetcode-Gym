{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2516000,
    "question_id": "3033",
    "elapsed_time": 13,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"00101101100010\"\n\"00001010001111\"\n30",
    "expected_output": "8",
    "task_finish_time": 1706732477208,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 271,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1162354705",
    "input_formatted": "\"00101101100010\", \"00001010001111\", 30",
    "input": "\"00101101100010\"\n\"00001010001111\"\n30",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(s1 string, s2 string, x int) int {\n    n := len(s1)\n    mismatches := 0\n    adjMismatches := 0\n\n    // Step 1: Count mismatches and adjacent mismatches\n    for i := 0; i < n; i++ {\n        if s1[i] != s2[i] {\n            mismatches++\n            if i < n-1 && s1[i+1] != s2[i+1] && s1[i] != s1[i+1] {\n                adjMismatches++\n                i++ // Skip next character as it's part of an adjacent mismatch\n            }\n        }\n    }\n\n    // If there's an odd number of mismatches, return -1\n    if mismatches%2 != 0 {\n        return -1\n    }\n\n    // Step 2: Calculate the minimum cost\n    nonAdjMismatches := mismatches/2 - adjMismatches\n    cost := min(x, 2) * nonAdjMismatches + adjMismatches\n\n    return cost\n}\n\n// Helper function to find the minimum of two integers\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}