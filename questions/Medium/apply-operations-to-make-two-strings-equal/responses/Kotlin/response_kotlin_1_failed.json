{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36716000,
    "question_id": "3033",
    "elapsed_time": 440,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706731965885,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 37,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1162349328",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(s1: String, s2: String, x: Int): Int {\n        var mismatchGroups = 0 // Count of mismatch groups\n        var i = 0\n        val n = s1.length\n\n        while (i < n) {\n            if (s1[i] != s2[i]) {\n                // Found a mismatch, now see if it's part of a group or standalone\n                mismatchGroups++\n                // Move to the end of this mismatch group\n                while (i < n - 1 && s1[i] != s2[i + 1]) {\n                    i++\n                }\n            }\n            i++\n        }\n\n        // If there are no mismatches, no operations are needed\n        if (mismatchGroups == 0) return 0\n\n        var cost = 0\n        // Calculate cost based on the operation costs and number of mismatch groups\n        // For each group, we can choose to flip adjacent bits at cost 1 per operation\n        // or use the x cost operation if it's cheaper and applicable\n        cost += mismatchGroups * minOf(x, 2) // Each group can be resolved in one operation\n\n        return cost\n    }\n}"
}