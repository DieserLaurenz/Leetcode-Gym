{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36724000,
    "question_id": "3033",
    "elapsed_time": 210,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706731889520,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 75,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1162348506",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(s1: String, s2: String, x: Int): Int {\n        var cost = 0\n        var i = 0\n        val n = s1.length\n        while (i < n) {\n            if (s1[i] != s2[i]) {\n                // If the next character also differs and flipping them together is cheaper or equal,\n                // it's better to flip them together with cost 1.\n                if (i < n - 1 && s1[i + 1] != s2[i + 1]) {\n                    cost += 1\n                    i += 2\n                } else {\n                    // If we can only flip one character or flipping two non-consecutive characters is cheaper\n                    if (x <= 2) {\n                        // Impossible to match s1 with s2 as we need to flip only one bit here.\n                        return -1\n                    } else {\n                        cost += x\n                        i++ // Move to the next character as we have handled this character.\n                    }\n                }\n            } else {\n                i++ // No operation needed, move to the next character.\n            }\n        }\n        return cost\n    }\n}"
}