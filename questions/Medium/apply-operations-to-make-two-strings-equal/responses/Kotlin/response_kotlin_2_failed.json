{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37160000,
    "question_id": "3033",
    "elapsed_time": 490,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706732025928,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 485,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1162349929",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(s1: String, s2: String, x: Int): Int {\n        var cost = 0\n        var i = 0\n        val n = s1.length\n        var mismatches = 0 // Count individual mismatches\n\n        // First, count the mismatches and pairs of mismatches that can be flipped directly\n        while (i < n) {\n            if (s1[i] != s2[i]) {\n                // If the next character is also a mismatch, we can flip them together at the cost of 1\n                if (i < n - 1 && s1[i + 1] != s2[i + 1]) {\n                    cost += 1 // Flipping a pair of adjacent mismatches\n                    i += 2\n                    continue\n                } else {\n                    mismatches++ // Counting single mismatches for potential later flips\n                }\n            }\n            i++\n        }\n\n        // If the cost of flipping two non-adjacent bits (x) is less than or equal to 2, use it for single mismatches\n        if (x <= 2) {\n            cost += mismatches * x\n        } else {\n            // If x is more than 2, flipping non-adjacent bits individually is not cost-effective,\n            // so we should flip adjacent bits where possible, otherwise, it's impossible\n            if (mismatches % 2 == 0) {\n                cost += (mismatches / 2) * 2 // Pair the mismatches and flip adjacent at cost of 2 per pair\n            } else {\n                return -1 // Odd number of mismatches cannot be resolved with given operations\n            }\n        }\n\n        return cost\n    }\n}"
}