{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16664000,
    "question_id": "3033",
    "elapsed_time": 53,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "\"101101\"\n\"000000\"\n6",
    "expected_output": "4",
    "task_finish_time": 1708734876006,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 433,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184412119",
    "input_formatted": "\"101101\", \"000000\", 6",
    "input": "\"101101\"\n\"000000\"\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minOperations(self, s1: str, s2: str, x: int) -> int:\n        n = len(s1)\n        diff_pairs = 0\n        for i in range(n):\n            if s1[i] != s2[i]:\n                diff_pairs += 1\n        if diff_pairs % 2 != 0:\n            return -1\n        swap_needed = diff_pairs // 2\n        if x > 1:\n            adj_diff = 0\n            for i in range(n - 1):\n                if s1[i] != s2[i] and s1[i + 1] != s2[i + 1] and s1[i] != s1[i + 1]:\n                    adj_diff += 1\n            if adj_diff >= swap_needed:\n                return swap_needed\n            else:\n                return adj_diff + (swap_needed - adj_diff) * x\n        else:\n            return swap_needed"
}