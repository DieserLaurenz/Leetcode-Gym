{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16836000,
    "question_id": "3033",
    "elapsed_time": 61,
    "compare_result": "010110011110011000101000010100001011110111111110100001101111111011011111100111011101110011010110101111011010001001100100101101010111111000110010111000111111011011011110110011111011000101001101011010000011011110101011010000000101111101100111000001100010011101011110101100001010101100111101111111011101010011100001101011011111101111111011100110010100101111010111000000000100001011111110110000100000101011001000111111001110001001111011101111010110001000001001111101101111110101110000110101110111101011011111010000100010010111001111001011011000001011111010100100001011010011110001011100001010010011110010010111110010111100010100111001001111100101100001101111110111001111111101100100111101111111100011110001110110110110110001010110100",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708734845292,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 414,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184411952",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minOperations(self, s1: str, s2: str, x: int) -> int:\n        diff = sum(c1 != c2 for c1, c2 in zip(s1, s2))\n        \n        if diff % 2 != 0:\n            return -1\n        \n        pairs = diff // 2\n        single = 0\n        \n        for i in range(len(s1) - 1):\n            if s1[i] != s2[i] and s1[i + 1] != s2[i + 1] and s1[i] != s1[i + 1]:\n                single += 1\n                pairs -= 1\n                i += 1\n        \n        cost = single + min(pairs, single) * x\n        \n        return cost if pairs == single else -1"
}