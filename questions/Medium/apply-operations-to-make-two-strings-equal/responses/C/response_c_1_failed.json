{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5888000,
    "question_id": "3033",
    "elapsed_time": 19,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706730772087,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 56,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1162336288",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n\nint minOperations(char * s1, char * s2, int x) {\n    int n = 0; // Length of strings\n    while (s1[n]) ++n;\n\n    int cost = 0;\n    for (int i = 0; i < n;) {\n        if (s1[i] != s2[i]) {\n            // Find the length of the current sequence of mismatches\n            int start = i;\n            while (i < n && s1[i] != s2[i]) ++i;\n            int length = i - start;\n\n            if (length == 1) { // Isolated mismatch\n                if (x > 1) {\n                    // Prefer flipping with another isolated mismatch if cheaper\n                    cost += x;\n                } else {\n                    // If x <= 1, flip adjacent bits\n                    cost += 1;\n                }\n            } else { // Consecutive mismatches\n                cost += (length / 2) + (length % 2) * x;\n            }\n        } else {\n            ++i;\n        }\n    }\n\n    return cost;\n}"
}