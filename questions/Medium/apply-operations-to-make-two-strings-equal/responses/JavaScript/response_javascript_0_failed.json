{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51172000,
    "question_id": "3033",
    "elapsed_time": 87,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706731127059,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 454,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1162340220",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @param {number} x\n * @return {number}\n */\nvar minOperations = function(s1, s2, x) {\n    let diffCount = 0;\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            diffCount++;\n        }\n    }\n    \n    // If the number of differing bits is odd, return -1\n    if (diffCount % 2 !== 0) {\n        return -1;\n    }\n    \n    // The number of operations needed is diffCount / 2 since each operation flips 2 bits\n    let operationsNeeded = diffCount / 2;\n    \n    // If x >= 2, it's always better or equal to flip adjacent bits with the second operation\n    if (x >= 2) {\n        return operationsNeeded; // Each operation costs 1\n    } else {\n        // If x < 2, potentially use the first operation, but since we can't flip non-adjacent\n        // bits to match without guaranteeing they're part of a minimal operation set,\n        // and x < 2 makes single flips cheaper, we still use the adjacent flip.\n        // This part is actually redundant given the constraints and problem statement, but kept for clarity.\n        return operationsNeeded * x;\n    }\n};"
}