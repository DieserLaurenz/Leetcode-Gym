{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11736000,
    "question_id": "3033",
    "elapsed_time": 34,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708734630475,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 75,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184410752",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minOperations(self, s1, s2, x):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type x: int\n        :rtype: int\n        \"\"\"\n        def min_ops(s1, s2, x):\n            n = len(s1)\n            cost = 0\n            i = 0\n            while i < n:\n                if s1[i] != s2[i]:\n                    # If next character is different and x <= 2, flip adjacent\n                    if i + 1 < n and s1[i + 1] != s2[i + 1]:\n                        cost += 1\n                        i += 2\n                    else:\n                        # If flipping two non-adjacent bits is cheaper or the only option\n                        if x <= 2:\n                            return -1  # Impossible to match s1 with s2 with given operation costs\n                        cost += x\n                        i += 1\n                else:\n                    i += 1\n            return cost\n\n        # Calculate the minimum operations required\n        min_operations_cost = min_ops(s1, s2, x)\n        return min_operations_cost"
}