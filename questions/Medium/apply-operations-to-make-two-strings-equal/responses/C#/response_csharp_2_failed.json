{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41508000,
    "question_id": "3033",
    "elapsed_time": 164,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"101101\"\n\"000000\"\n6",
    "expected_output": "4",
    "task_finish_time": 1706731059320,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 512,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1162339476",
    "input_formatted": "\"101101\", \"000000\", 6",
    "input": "\"101101\"\n\"000000\"\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinOperations(string s1, string s2, int x) {\n        int mismatch = 0;\n        foreach (var i in Enumerable.Range(0, s1.Length)) {\n            if (s1[i] != s2[i]) mismatch++;\n        }\n\n        // If mismatches are odd, making s1 equal to s2 is impossible\n        if (mismatch % 2 != 0) return -1;\n\n        // Calculate the minimum number of operations needed\n        int operationCost = 0;\n        int halfMismatch = mismatch / 2;\n\n        // If x is greater than 2, flipping adjacent mismatches is always cheaper\n        if (x > 2) {\n            // Count how many mismatches can be paired adjacently\n            int adjPair = 0;\n            for (int i = 0; i < s1.Length - 1; i++) {\n                if (s1[i] != s2[i] && s1[i + 1] != s2[i + 1]) {\n                    // Flip both to match, cost is 1 per adjacent flip\n                    adjPair++;\n                    i++; // Skip the next bit since it's part of a processed pair\n                }\n            }\n\n            int remainingPairs = halfMismatch - adjPair;\n            operationCost = adjPair + remainingPairs * Math.Min(x, 2);\n        } else {\n            // When x is 2 or less, flipping any two bits at cost x is as good or better than adjacent flips\n            operationCost = halfMismatch * x;\n        }\n\n        return operationCost;\n    }\n}"
}