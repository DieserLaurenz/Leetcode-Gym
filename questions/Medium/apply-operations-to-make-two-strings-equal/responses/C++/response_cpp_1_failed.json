{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8904000,
    "question_id": "3033",
    "elapsed_time": 17,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "\"00101101100010\"\n\"00001010001111\"\n30",
    "expected_output": "8",
    "task_finish_time": 1706722271050,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 478,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162215282",
    "input_formatted": "\"00101101100010\", \"00001010001111\", 30",
    "input": "\"00101101100010\"\n\"00001010001111\"\n30",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minOperations(string s1, string s2, int x) {\n        int n = s1.size();\n        int mismatch = 0;\n        \n        // Count mismatches\n        for (int i = 0; i < n; ++i) {\n            if (s1[i] != s2[i]) mismatch++;\n        }\n        \n        // If mismatches are odd, it's impossible to make them equal\n        if (mismatch % 2) return -1;\n        \n        int adjMismatch = 0; // Count adjacent mismatches\n        for (int i = 0; i < n - 1; ++i) {\n            if (s1[i] != s2[i] && s1[i + 1] != s2[i + 1] && s1[i] != s1[i + 1]) {\n                adjMismatch++;\n                i++; // Skip next since it's part of the current mismatch\n            }\n        }\n        \n        // Min cost calculation\n        int cost = 0;\n        // Correct adjacent mismatches with operation of cost 1\n        cost += adjMismatch;\n        // Remaining mismatches to be corrected with operation of cost x\n        int remainingMismatches = (mismatch / 2) - adjMismatch;\n        \n        if (x <= 2) {\n            // If x is less or equal to 2, correcting non-adjacent mismatches with the first operation is optimal\n            cost += remainingMismatches * x;\n        } else {\n            // If x is more than 2, correcting remaining mismatches with the second operation is optimal\n            cost += remainingMismatches * 2; // Need to flip an extra correct bit to fix each non-adjacent mismatch\n        }\n        \n        return cost;\n    }\n};"
}