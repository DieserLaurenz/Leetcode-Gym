{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8808000,
    "question_id": "3033",
    "elapsed_time": 23,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"101101\"\n\"000000\"\n6",
    "expected_output": "4",
    "task_finish_time": 1706722188359,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 456,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1162213884",
    "input_formatted": "\"101101\", \"000000\", 6",
    "input": "\"101101\"\n\"000000\"\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minOperations(string s1, string s2, int x) {\n        int mismatches = 0;\n        for (int i = 0; i < s1.length(); ++i) {\n            if (s1[i] != s2[i]) {\n                ++mismatches;\n            }\n        }\n        \n        // If mismatches are odd, return -1\n        if (mismatches % 2 != 0) return -1;\n        \n        // Calculate the number of pairs needed to be flipped\n        int pairs = mismatches / 2;\n        \n        // Calculate minimum cost\n        int cost = 0;\n        \n        // If x is less than or equal to 2, then using the first operation for all pairs is cheaper or equal\n        if (x <= 2) {\n            cost = pairs * x;\n        } else {\n            // If x is greater than 2, use the second operation for adjacent mismatches\n            // Since every operation flips 2 bits, every mismatch pair can be fixed with a single operation of cost 1\n            cost = pairs;\n        }\n        \n        return cost;\n    }\n};"
}