{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16100000,
    "question_id": "3033",
    "elapsed_time": 20,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706731767376,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 246,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1162347228",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minOperations(_ s1: String, _ s2: String, _ x: Int) -> Int {\n        let n = s1.count\n        var mismatches = 0\n        var cost = 0\n        var i = 0\n        \n        // Convert strings to arrays for easier access\n        let arr1 = Array(s1)\n        let arr2 = Array(s2)\n        \n        while i < n {\n            if arr1[i] != arr2[i] {\n                // When we find a mismatch, we check if it's possible to pair it with the next character\n                if i < n - 1 && arr1[i+1] != arr2[i+1] {\n                    // If x > 1, using the second operation is cheaper for adjacent mismatches\n                    cost += 1\n                    i += 1 // Skip the next character as it's part of the handled pair\n                } else {\n                    // If no adjacent mismatch or x <= 1, we consider the cost of the first operation\n                    cost += x\n                }\n                mismatches += 1\n            }\n            i += 1\n        }\n        \n        // If the total mismatches is odd, return -1 since we cannot make the strings equal\n        if mismatches % 2 != 0 {\n            return -1\n        }\n        \n        return cost\n    }\n}"
}