{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 148736000,
    "question_id": "3033",
    "elapsed_time": 450,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706732372145,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 269,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1162353587",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import 'dart:math'; // Import dart:math for min function\n\nclass Solution {\n  int minOperations(String s1, String s2, int x) {\n    int n = s1.length;\n    int diff = 0;\n    int pairs = 0;\n\n    // Count differences and adjacent pairs\n    for (int i = 0; i < n; i++) {\n      if (s1[i] != s2[i]) {\n        diff++;\n        // Check for adjacent pairs and ensure we don't double-count\n        if (i < n - 1 && s1[i] != s1[i + 1] && s1[i + 1] != s2[i + 1]) {\n          pairs++;\n          i++; // Skip the next index as it's part of a resolved pair\n        }\n      }\n    }\n\n    // If differences are odd, it's impossible to make strings equal\n    if (diff % 2 != 0) return -1;\n\n    int cost = 0;\n    if (x > 2) {\n      // Optimize cost by using adjacent flips for pairs and then individual flips\n      // Corrected to use integer division for diff / 2 calculation\n      cost += pairs + ((diff ~/ 2) - pairs) * min(x, 2);\n    } else {\n      // If x is less than or equal to 2, use the second operation for all differences\n      cost = diff ~/ 2; // Use integer division for correct int assignment\n    }\n    return cost;\n  }\n}"
}