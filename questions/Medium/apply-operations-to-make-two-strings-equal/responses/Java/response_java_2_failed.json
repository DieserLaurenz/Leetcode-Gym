{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42760000,
    "display_runtime": "1",
    "question_id": "3033",
    "elapsed_time": 159,
    "compare_result": "111111111110011100101100010111001011111111111110100001101111101111011111100111011101110011110110101111011010001001100100101111010111111000110011111000111111011111011110110011111011011101001101011010000011011110101111010000100101111101110111000101100110011101011110101100111010101100111101111111011101010011100001101011011111101111111011100111010100101111010111000001011110011111111111110000101010101111001000111111001110101011111011101111010110001000001001111101101111110101110000110101110111101011011111010100101010110111001111001011011000111011111010100100001011010011110001111100001011010011110010010111110010111100010100111011111111100101100001101111110111001111111101100100111101111111100111110001110111110110110001010110100",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "\"0001110010\"\n\"0110100111\"\n29",
    "expected_output": "5",
    "task_finish_time": 1706722501906,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 461,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1162219134",
    "input_formatted": "\"0001110010\", \"0110100111\", 29",
    "input": "\"0001110010\"\n\"0110100111\"\n29",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(String s1, String s2, int x) {\n        int n = s1.length();\n        int mismatch = 0; // Count of all mismatches\n        int singleMismatches = 0; // Count of mismatches that are not in consecutive pairs\n\n        // First, find all mismatches\n        for (int i = 0; i < n; ++i) {\n            if (s1.charAt(i) != s2.charAt(i)) {\n                mismatch++;\n            }\n        }\n\n        // It's impossible if the number of mismatches is odd\n        if (mismatch % 2 != 0) return -1;\n\n        // Next, identify single mismatches (those not part of consecutive mismatch pairs)\n        for (int i = 0; i < n - 1; ++i) {\n            if (s1.charAt(i) != s2.charAt(i) && s1.charAt(i + 1) != s2.charAt(i + 1)) {\n                if (s1.charAt(i) != s1.charAt(i + 1)) { // This is a consecutive mismatch\n                    singleMismatches++;\n                    i++; // Skip the next character as it's part of the identified pair\n                }\n            }\n        }\n\n        int cost = 0;\n        // Calculate the cost for flipping single mismatches\n        int pairsToFlip = (mismatch / 2) - singleMismatches;\n        cost += Math.min(pairsToFlip * x, pairsToFlip * 2); // Choose the cheaper operation for non-consecutive pairs\n        cost += singleMismatches * 2; // Each consecutive pair costs 2 to flip\n\n        return cost;\n    }\n}"
}