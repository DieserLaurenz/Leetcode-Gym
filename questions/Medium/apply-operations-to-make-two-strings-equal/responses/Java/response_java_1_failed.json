{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42736000,
    "display_runtime": "1",
    "question_id": "3033",
    "elapsed_time": 145,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706722442103,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 440,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1162218116",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(String s1, String s2, int x) {\n        int n = s1.length();\n        int diffPairs = 0; // To count pairs of differences\n\n        // Calculate the number of mismatched pairs\n        for (int i = 0; i < n; i++) {\n            if (s1.charAt(i) != s2.charAt(i)) {\n                // If we find a mismatch, we look for a pair\n                if (i + 1 < n && s1.charAt(i + 1) != s2.charAt(i + 1)) {\n                    diffPairs++;\n                    i++; // Skip the next character since it's part of a handled pair\n                }\n            }\n        }\n\n        int mismatched = 0; // Count of individual mismatches not part of pairs\n        // For each mismatch that wasn't part of a pair, we have an unpaired mismatch\n        for (int i = 0; i < n; i++) {\n            if (s1.charAt(i) != s2.charAt(i)) mismatched++;\n        }\n        mismatched -= 2 * diffPairs; // Remove mismatches that were part of diffPairs\n\n        // If there are odd mismatches remaining, it's impossible\n        if (mismatched % 2 != 0) return -1;\n\n        int cost = 0;\n        // Add cost for paired mismatches. Prefer adjacent swaps if cheaper than x.\n        cost += Math.min(x, 2) * diffPairs;\n        \n        // For unpaired mismatches, they must be handled in pairs with cost x,\n        // but since they are already in pairs, we consider if any adjustment is needed.\n        // No additional cost calculation here for unpaired as they've been handled in pairs calculation.\n\n        return cost;\n    }\n}"
}