{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211548000,
    "question_id": "3033",
    "elapsed_time": 262,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "\"101101\"\n\"000000\"\n6",
    "expected_output": "4",
    "task_finish_time": 1706732643687,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 459,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1162356400",
    "input_formatted": "\"101101\", \"000000\", 6",
    "input": "\"101101\"\n\"000000\"\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} s1\n# @param {String} s2\n# @param {Integer} x\n# @return {Integer}\ndef min_operations(s1, s2, x)\n    diffs = []\n    n = s1.length\n    cost = 0\n\n    # Identify positions where s1 and s2 differ\n    n.times do |i|\n        diffs << i if s1[i] != s2[i]\n    end\n\n    # If the number of differences is odd, it's impossible to make the strings equal\n    return -1 if diffs.size.odd?\n\n    i = 0\n    while i < diffs.size\n        # If adjacent positions differ, prefer to flip them with cost 1\n        if i < diffs.size - 1 && diffs[i + 1] == diffs[i] + 1\n            cost += 1\n            i += 2\n        else\n            # Otherwise, flip a pair with the given cost x\n            cost += x\n            i += 2\n        end\n    end\n\n    cost\nend"
}