{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2120000,
    "question_id": "3033",
    "elapsed_time": 12,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"101101\"\n\"000000\"\n6",
    "expected_output": "4",
    "task_finish_time": 1706733007768,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 457,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1162359900",
    "input_formatted": "\"101101\", \"000000\", 6",
    "input": "\"101101\"\n\"000000\"\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_operations(s1: String, s2: String, x: i32) -> i32 {\n        let (mut diff_01, mut diff_10) = (0, 0);\n        for (char1, char2) in s1.chars().zip(s2.chars()) {\n            if char1 != char2 {\n                if char1 == '0' {\n                    diff_01 += 1;\n                } else {\n                    diff_10 += 1;\n                }\n            }\n        }\n\n        // If the total number of mismatches is odd, return -1\n        if (diff_01 + diff_10) % 2 != 0 {\n            return -1;\n        }\n\n        // Calculate the minimum cost\n        let min_cost = if x > 2 {\n            // If x is greater than 2, always prefer adjacent flips (cost of 1)\n            diff_01.min(diff_10) + ((diff_01.max(diff_10) - diff_01.min(diff_10)) / 2)\n        } else {\n            // If x is 2 or less, flipping two arbitrary bits might be cheaper\n            diff_01.min(diff_10) * x + ((diff_01.max(diff_10) - diff_01.min(diff_10)) / 2)\n        };\n\n        min_cost\n    }\n}"
}