{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53404000,
    "question_id": "3033",
    "elapsed_time": 125,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706731476087,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 448,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162344099",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(s1: string, s2: string, x: number): number {\n    let diff = 0;\n    for (let i = 0; i < s1.length; i++) {\n        if (s1[i] !== s2[i]) {\n            diff++;\n        }\n    }\n\n    // If the difference is odd, it's impossible to make them equal\n    if (diff % 2 !== 0) return -1;\n\n    // Calculate minimum operations for flipping bits\n    let minOps = 0;\n    let i = 0;\n    while (i < s1.length) {\n        if (s1[i] !== s2[i]) {\n            // Look for a pair to flip\n            if (i + 1 < s1.length && s1[i + 1] !== s2[i + 1]) {\n                minOps += 1; // Cost for adjacent flip is always 1\n                i += 2; // Skip the next bit as it's been handled\n            } else {\n                // If no adjacent mismatch, consider the cost of flipping with x\n                minOps += x;\n                i++; // Move to the next bit\n            }\n        } else {\n            i++; // Move to the next bit if they are equal\n        }\n    }\n\n    return minOps;\n}"
}