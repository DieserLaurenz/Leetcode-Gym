{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51688000,
    "question_id": "3033",
    "elapsed_time": 85,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706731407464,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 420,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162343340",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(s1: string, s2: string, x: number): number {\n    let cost = 0;\n    let i = 0;\n\n    // Iterate over the strings to find differences and calculate the cost of making them equal\n    while (i < s1.length) {\n        if (s1[i] !== s2[i]) {\n            // If the next character is also different and matches s1[i], flip both at the cost of 1\n            if (i + 1 < s1.length && s1[i + 1] !== s2[i + 1] && s1[i] !== s1[i + 1]) {\n                cost += 1; // Cost for flipping adjacent bits\n                i += 2; // Skip the next character as it's already handled\n            } else {\n                // If flipping non-adjacent bits is cheaper or necessary\n                if (x < 2) {\n                    // When flipping any two bits is cheaper or the only option left\n                    cost += x;\n                } else {\n                    // If only one bit needs to be flipped and flipping adjacent bits isn't possible\n                    return -1; // It's impossible to make s1 equal to s2 with the given operations\n                }\n                i++; // Move to the next character\n            }\n        } else {\n            i++; // Move to the next character if current characters are already equal\n        }\n    }\n\n    return cost;\n}"
}