{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52844000,
    "question_id": "3033",
    "elapsed_time": 94,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "\"101101\"\n\"000000\"\n6",
    "expected_output": "4",
    "task_finish_time": 1706731347547,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 434,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1162342676",
    "input_formatted": "\"101101\", \"000000\", 6",
    "input": "\"101101\"\n\"000000\"\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(s1: string, s2: string, x: number): number {\n  let cost = 0;\n  let differences = 0;\n\n  // Count differences and identify positions\n  for (let i = 0; i < s1.length; i++) {\n    if (s1[i] !== s2[i]) {\n      differences++;\n    }\n  }\n\n  // If differences are odd, it's impossible to make them equal\n  if (differences % 2 !== 0) return -1;\n\n  // Main loop to adjust s1 to match s2\n  for (let i = 0; i < s1.length - 1; i++) {\n    // Check for adjacent differences to flip at the cost of 1\n    if (s1[i] !== s2[i] && s1[i + 1] !== s2[i + 1] && s1[i] !== s1[i + 1]) {\n      cost += 1; // Apply the second operation\n      i++; // Skip the next bit as it's already handled\n    }\n  }\n\n  // Calculate remaining differences after adjacent flips\n  differences = differences / 2 - cost;\n\n  // Apply the first operation for remaining non-adjacent differences\n  cost += differences * x;\n\n  return cost;\n}"
}