{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54484000,
    "question_id": "3033",
    "elapsed_time": 505,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"10110\"\n\"00011\"\n4",
    "expected_output": "-1",
    "task_finish_time": 1706732794724,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 67,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162357868",
    "input_formatted": "\"10110\", \"00011\", 4",
    "input": "\"10110\"\n\"00011\"\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minOperations(s1: String, s2: String, x: Int): Int = {\n        val n = s1.length\n        var i = 0\n        var totalCost = 0\n\n        while (i < n) {\n            // Find the start of a differing segment\n            if (s1(i) != s2(i)) {\n                var j = i\n                // Find the end of the differing segment\n                while (j + 1 < n && s1(j + 1) != s2(j + 1)) {\n                    j += 1\n                }\n                // Calculate the length of the segment\n                val len = j - i + 1\n                // Calculate the cost for this segment\n                len match {\n                    case 1 => totalCost += 1 // Cannot use x operation for single difference, flip adjacent\n                    case _ => \n                        // For more than 2 differences, check if using x operation is cheaper\n                        val costUsingX = if (len % 2 == 0) len / 2 * x else (len - 1) / 2 * x + 1\n                        totalCost += Math.min(costUsingX, len)\n                }\n                // Move to the next segment\n                i = j\n            }\n            i += 1\n        }\n\n        totalCost\n    }\n}"
}