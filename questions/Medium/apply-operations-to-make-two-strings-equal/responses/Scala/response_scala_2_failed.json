{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55124000,
    "question_id": "3033",
    "elapsed_time": 483,
    "compare_result": "010100000110001000010000000100001001010000001010010001101100100001000001111000011000100000000100001101001100001000101010000100010111001001010010010100111111010001001100110011100010000100001101011000100010011010100000000110000001100000101111000001000010011101000101000000001010000000001001011001010100010101000000010011111110001100110111000100000100100100011010000000100101000010000010100001010101001001001000100011001110000101001011000010000101001011000001010001001100110101001001000100001100010100001000000000100010000001001001000000010000001000001000000000001001010010010000001000000000000010000000010101100010100000010000011001000000000101100001000001100110001111001000000100000001010001000000110000000010000110100000010010101",
    "code_output": "8",
    "std_output": "",
    "last_testcase": "\"1100011000\"\n\"0101001010\"\n2",
    "expected_output": "4",
    "task_finish_time": 1706732948580,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 225,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1162359308",
    "input_formatted": "\"1100011000\", \"0101001010\", 2",
    "input": "\"1100011000\"\n\"0101001010\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minOperations(s1: String, s2: String, x: Int): Int = {\n        var cost = 0\n        val n = s1.length\n        var i = 0\n        \n        while (i < n) {\n            if (s1(i) != s2(i)) {\n                // If the next character is also a mismatch, flip both at cost 1\n                if (i < n-1 && s1(i+1) != s2(i+1)) {\n                    cost += 1\n                    i += 1 // Skip the next character as it's already matched\n                } else {\n                    // If x is 1 or there's no next character to pair with, flip at cost x\n                    if (x == 1 || i == n-1) {\n                        return -1 // It's impossible to match s1 to s2 efficiently\n                    }\n                    cost += x\n                }\n            }\n            i += 1\n        }\n        \n        cost\n    }\n}"
}