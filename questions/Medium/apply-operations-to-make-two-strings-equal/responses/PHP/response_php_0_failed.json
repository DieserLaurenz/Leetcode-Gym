{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19500000,
    "question_id": "3033",
    "elapsed_time": 55,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "\"0001110010\"\n\"0110100111\"\n29",
    "expected_output": "5",
    "task_finish_time": 1706731519306,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 465,
    "total_testcases": 729,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1162344593",
    "input_formatted": "\"0001110010\", \"0110100111\", 29",
    "input": "\"0001110010\"\n\"0110100111\"\n29",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $s1\n     * @param String $s2\n     * @param Integer $x\n     * @return Integer\n     */\n    function minOperations($s1, $s2, $x) {\n        $n = strlen($s1);\n        $mismatches = 0;\n        \n        for ($i = 0; $i < $n; $i++) {\n            if ($s1[$i] != $s2[$i]) {\n                $mismatches++;\n            }\n        }\n        \n        // If mismatches are odd, return -1\n        if ($mismatches % 2 != 0) {\n            return -1;\n        }\n        \n        // Calculate the pairs of mismatches\n        $mismatchPairs = $mismatches / 2;\n        \n        // If flipping a pair is cheaper or equal, use the pair flip operation\n        if ($x <= 2) {\n            return $mismatchPairs * $x;\n        } else {\n            // Otherwise, flip adjacent bits for 1 cost each\n            return $mismatchPairs * 2; // Since each mismatched pair can be fixed with two adjacent flips\n        }\n    }\n}"
}