{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18120000,
    "question_id": "3151",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "26",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1708829896011,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185347582",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nimport heapq\n\nclass Solution:\n    def minProcessingTime(self, processorTime: List[int], tasks: List[int]) -> int:\n        tasks.sort(reverse=True)\n        cores = [[time, []] for time in processorTime]\n        for task in tasks:\n            cores.sort(key=lambda x: (sum(x[1]), x[0]))\n            cores[0][1].append(task)\n        return max([core[0] + sum(core[1][-4:]) for core in cores])"
}