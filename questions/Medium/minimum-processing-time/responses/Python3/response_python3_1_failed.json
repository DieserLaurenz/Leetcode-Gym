{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34460000,
    "question_id": "3151",
    "elapsed_time": 810,
    "compare_result
    "code_output": "18",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1708829861195,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 95,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185347098",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nimport heapq\n\nclass Solution:\n    def minProcessingTime(self, processorTime: List[int], tasks: List[int]) -> int:\n        n = len(processorTime)\n        tasks.sort()\n        pq = [(time, idx) for idx, time in enumerate(processorTime)]\n        heapq.heapify(pq)\n        for i in range(0, len(tasks), 4):\n            _, idx = heapq.heappop(pq)\n            max_time = max(tasks[i:i+4]) + processorTime[idx]\n            processorTime[idx] = max_time\n            heapq.heappush(pq, (max_time, idx))\n        return max(processorTime)"
}