{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 111492000,
    "question_id": "3151",
    "elapsed_time": 5067,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707951153619,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175524779",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_processing_time([integer()], [integer()]) -> integer().\nmin_processing_time(ProcessorTime, Tasks) ->\n    SortedProcessorTime = lists:sort(ProcessorTime),\n    SortedTasks = lists:reverse(lists:sort(Tasks)),\n    ProcessorsCores = [{Time, 4} || Time <- SortedProcessorTime],\n    AssignTasks = fun(Task, [{ProcessorTime, Cores} | Rest], Acc) when Cores > 1 ->\n                          [{ProcessorTime, Cores - 1} | Rest] ++ Acc;\n                      (Task, [{ProcessorTime, Cores} | Rest], Acc) ->\n                          Rest ++ [{ProcessorTime + Task, 3} | Acc]\n                  end,\n    FinalProcessors = lists:foldl(fun(Task, Processors) ->\n                                       lists:sort(AssignTasks(Task, Processors, []))\n                                   end, ProcessorsCores, SortedTasks),\n    MaxTime = lists:max([ProcessorTime || {ProcessorTime, _} <- FinalProcessors]),\n    MaxTime."
}