{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25300000,
    "question_id": "3151",
    "elapsed_time": 1765,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000",
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1708829786526,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185345644",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minProcessingTime(self, processorTime, tasks):\n        \"\"\"\n        :type processorTime: List[int]\n        :type tasks: List[int]\n        :rtype: int\n        \"\"\"\n        import heapq\n\n        # Sort processor times and tasks\n        processorTime.sort()\n        tasks.sort(reverse=True)\n\n        # Create a priority queue to manage processing times\n        pq = []\n        for time in processorTime:\n            heapq.heappush(pq, time)\n\n        # Distribute tasks among processors\n        for i in range(0, len(tasks), len(processorTime)):\n            for j in range(len(processorTime)):\n                if i + j < len(tasks):\n                    proc_time = heapq.heappop(pq)\n                    heapq.heappush(pq, max(proc_time, tasks[i+j]))\n\n        return max(pq)"
}