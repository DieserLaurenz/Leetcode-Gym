{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70616000,
    "question_id": "3151",
    "elapsed_time": 10926,
    "compare_result
    "code_output": "26",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707950733652,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1175521920",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minProcessingTime(processorTime: List[Int], tasks: List[Int]): Int = {\n        val n = processorTime.length\n        val sortedProcessorTime = processorTime.sorted\n        val sortedTasks = tasks.sorted(Ordering.Int.reverse)\n\n        val taskGroups = Array.fill(n)(List[Int]())\n        for (i <- sortedTasks.indices) {\n            taskGroups(i % n) ::= sortedTasks(i)\n        }\n\n        (taskGroups.indices.map { i =>\n            sortedProcessorTime(i) + taskGroups(i).sorted(Ordering.Int.reverse).take(4).sum\n        }).max\n    }\n}"
}