{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 86296000,
    "question_id": "3151",
    "elapsed_time": 1447,
    "compare_result
    "code_output": "40",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707950766893,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1175522247",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minProcessingTime(processorTime: List[Int], tasks: List[Int]): Int = {\n        val sortedTasks = tasks.sorted(Ordering.Int.reverse)\n        val n = processorTime.length\n        val pq = scala.collection.mutable.PriorityQueue.empty[(Int, Int)](Ordering.by[(Int, Int), Int](-_._2))\n\n        processorTime.foreach(t => pq.enqueue((t, 4))) // (available time, remaining cores)\n\n        sortedTasks.foreach { task =>\n            val (time, cores) = pq.dequeue()\n            if (cores > 1) pq.enqueue((time + task, cores - 1))\n            else pq.enqueue((time + task, 0))\n        }\n\n        pq.maxBy(_._1)._1\n    }\n}"
}