{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81436000,
    "question_id": "3151",
    "elapsed_time": 167,
    "compare_result
    "code_output": "25",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707941649069,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175449124",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minProcessingTime(vector<int>& processorTime, vector<int>& tasks) {\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;\n        for (int i = 0; i < processorTime.size(); ++i) {\n            pq.emplace(processorTime[i], i);\n        }\n        \n        sort(tasks.begin(), tasks.end(), greater<>());\n        \n        vector<int> endTime(processorTime.size(), 0);\n        for (int task : tasks) {\n            auto [time, idx] = pq.top();\n            pq.pop();\n            endTime[idx] = max(endTime[idx], time) + task;\n            pq.emplace(endTime[idx], idx);\n        }\n        \n        return *max_element(endTime.begin(), endTime.end());\n    }\n};"
}