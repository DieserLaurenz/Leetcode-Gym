{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81348000,
    "question_id": "3151",
    "elapsed_time": 145,
    "compare_result
    "code_output": "25",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707941828034,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175450811",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minProcessingTime(vector<int>& processorTime, vector<int>& tasks) {\n        sort(tasks.begin(), tasks.end(), greater<int>()); // Sort tasks in descending order\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; // Min-heap based on processor availability\n\n        // Initialize the priority queue with the processors' available times\n        for (int i = 0; i < processorTime.size(); ++i) {\n            pq.push({processorTime[i], i});\n        }\n\n        int n = processorTime.size();\n        vector<int> maxTime(n, 0); // Tracks the maximum time each processor finishes its tasks\n\n        for (int i = 0; i < tasks.size(); ++i) {\n            pair<int, int> p = pq.top();\n            pq.pop();\n            int startTime = max(p.first, maxTime[p.second]); // Processor start time or the last task's end time, whichever is later\n            int endTime = startTime + tasks[i]; // Time when the current task will be finished\n            maxTime[p.second] = endTime; // Update the processor's max finish time\n            pq.push({endTime, p.second}); // Reinsert processor with the updated end time\n        }\n\n        // Find the maximum time across all processors to determine when all tasks have been completed\n        return *max_element(maxTime.begin(), maxTime.end());\n    }\n};"
}