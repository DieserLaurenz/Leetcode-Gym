{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 82984000,
    "question_id": "3151",
    "elapsed_time": 224,
    "compare_result
    "code_output": "25",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707941795840,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175449506",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minProcessingTime(vector<int>& processorTime, vector<int>& tasks) {\n        sort(processorTime.begin(), processorTime.end());\n        sort(tasks.rbegin(), tasks.rend()); // Sort tasks in descending order\n\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq; // Min heap\n\n        // Initialize processors in the queue\n        for (int i = 0; i < processorTime.size(); ++i) {\n            pq.push({processorTime[i], 0}); // Pair<availableTime, tasksProcessed>\n        }\n\n        for (int i = 0; i < tasks.size(); ++i) {\n            pair<int, int> proc = pq.top();\n            pq.pop();\n            proc.first = max(proc.first, processorTime[proc.second]) + tasks[i]; // Update available time\n            proc.second += 1; // Move to the next processor after every 4 tasks\n            if (proc.second == processorTime.size()) { // Reset to the first processor\n                proc.second = 0;\n            }\n            pq.push(proc);\n        }\n\n        int maxTime = 0;\n        while (!pq.empty()) {\n            maxTime = max(maxTime, pq.top().first);\n            pq.pop();\n        }\n\n        return maxTime;\n    }\n};"
}