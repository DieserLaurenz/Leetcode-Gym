{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3292000,
    "question_id": "3151",
    "elapsed_time": 2066,
    "compare_result
    "code_output": "1148",
    "std_output": "",
    "last_testcase": "[121,99]\n[287,315,293,260,333,362,69,233]",
    "expected_output": "461",
    "task_finish_time": 1707950878927,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175522985",
    "input_formatted": "[121,99], [287,315,293,260,333,362,69,233]",
    "input": "[121,99]\n[287,315,293,260,333,362,69,233]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_processing_time(processor_time: Vec<i32>, tasks: Vec<i32>) -> i32 {\n        let n = processor_time.len();\n        let mut tasks = tasks;\n        tasks.sort_unstable_by(|a, b| b.cmp(a));\n        let mut processors = processor_time.into_iter().enumerate().map(|(i, time)| (time, i)).collect::<Vec<_>>();\n        processors.sort_unstable();\n        let mut cores = vec![0; n * 4];\n\n        for task in tasks {\n            cores[processors[0].1] += task;\n            processors[0].0 = cores[processors[0].1];\n            processors.sort_unstable();\n        }\n\n        *cores.iter().max().unwrap()\n    }\n}"
}