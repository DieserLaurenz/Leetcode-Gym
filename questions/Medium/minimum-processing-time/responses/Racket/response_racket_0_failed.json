{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "max: contract violation",
    "full_runtime_error": "max: contract violation\n  expected: real?\n  given: '(8)\n  context...:\n   .../private/map.rkt:40:19: loop\n   solution.rkt:1:0: min-processing-time\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:23:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100136000,
    "question_id": "3151",
    "elapsed_time": 234,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707950945388,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175523442",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (min-processing-time processorTime tasks)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  \n  (let ([sorted-processorTime (sort processorTime <)]\n        [sorted-tasks (sort tasks >)])\n    (define (process-tasks procTime tasks remaining-cores)\n      (if (or (null? tasks) (= remaining-cores 0))\n          procTime\n          (process-tasks (max procTime (+ (car tasks) (car procTime)))\n                         (cdr tasks)\n                         (- remaining-cores 1))))\n    (define (assign-tasks processors tasks)\n      (if (null? tasks)\n          (apply max processors)\n          (let* ([updated-processorTime (map (lambda (pt) (process-tasks (list pt) (take tasks 4) 4)) processors)]\n                 [remaining-tasks (drop tasks 4)])\n            (assign-tasks updated-processorTime remaining-tasks))))\n    (assign-tasks sorted-processorTime sorted-tasks)))"
}