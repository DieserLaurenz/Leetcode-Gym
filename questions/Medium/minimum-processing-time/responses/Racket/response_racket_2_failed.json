{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 127756000,
    "question_id": "3151",
    "elapsed_time": 5018,
    "compare_result
    "code_output": "25",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707951026415,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175523949",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-processing-time processorTime tasks)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  \n  (let* ([n (length processorTime)]\n         [sorted-tasks (sort tasks >)]\n         [cores-per-processor (* n 4)]\n         [allocated-tasks (make-vector n 0)]\n         [processor-availability (apply vector processorTime)])\n    \n    (for ([task sorted-tasks])\n      (let ([min-index (let loop ([i 0] [min-i 0] [min-val (vector-ref processor-availability 0)])\n                         (if (< i n)\n                             (let ([current-val (vector-ref processor-availability i)])\n                               (if (< current-val min-val)\n                                   (loop (+ i 1) i current-val)\n                                   (loop (+ i 1) min-i min-val)))\n                             min-i))])\n        (vector-set! processor-availability min-index (+ task (vector-ref processor-availability min-index)))\n        (vector-set! allocated-tasks min-index (+ 1 (vector-ref allocated-tasks min-index)))))\n    \n    (let ([completion-times (for/list ([i (in-range n)])\n                               (vector-ref processor-availability i))])\n      (apply max completion-times))))"
}