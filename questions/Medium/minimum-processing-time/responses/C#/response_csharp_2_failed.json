{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68104000,
    "question_id": "3151",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "25",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707949928404,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175516497",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinProcessingTime(IList<int> processorTime, IList<int> tasks) {\n        // Convert to arrays for sorting\n        int[] procs = processorTime.ToArray();\n        int[] t = tasks.ToArray();\n        Array.Sort(procs);\n        Array.Sort(t);\n        \n        int n = procs.Length;\n        int totalCores = 4 * n;\n        int[] endTime = new int[n]; // Track end time for each processor\n        \n        // Initialize end time with processor availability time\n        for (int i = 0; i < n; i++) {\n            endTime[i] = procs[i];\n        }\n        \n        // Distribute tasks starting from the largest to each processor's earliest available core\n        for (int i = 0; i < totalCores; i++) {\n            int taskIndex = totalCores - 1 - i; // Start from the end (largest task)\n            int minIndex = 0;\n            for (int j = 1; j < n; j++) {\n                if (endTime[j] < endTime[minIndex]) {\n                    minIndex = j;\n                }\n            }\n            // Assign the task to the processor and update its end time\n            endTime[minIndex] += t[taskIndex];\n        }\n        \n        // Find the maximum end time across all processors, which is when all tasks are completed\n        int maxTime = endTime[0];\n        for (int i = 1; i < n; i++) {\n            if (endTime[i] > maxTime) {\n                maxTime = endTime[i];\n            }\n        }\n        \n        return maxTime;\n    }\n}"
}