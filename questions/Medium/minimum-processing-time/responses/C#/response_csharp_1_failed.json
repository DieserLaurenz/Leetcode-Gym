{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 69824000,
    "question_id": "3151",
    "elapsed_time": 421,
    "compare_result
    "code_output": "34",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707949883172,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175516199",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinProcessingTime(IList<int> processorTime, IList<int> tasks) {\n        int[] sortedProcessorTime = processorTime.ToArray();\n        Array.Sort(sortedProcessorTime);\n        int[] sortedTasks = tasks.ToArray();\n        Array.Sort(sortedTasks);\n\n        int n = sortedProcessorTime.Length;\n        int maxTime = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 4; j++) {\n                int taskIndex = i * 4 + j;\n                sortedProcessorTime[i] += sortedTasks[taskIndex];\n            }\n            maxTime = Math.Max(maxTime, sortedProcessorTime[i]);\n        }\n        return maxTime;\n    }\n}"
}