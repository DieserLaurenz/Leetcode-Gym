{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31996000,
    "question_id": "3151",
    "elapsed_time": 366,
    "compare_result
    "code_output": "26",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707950184808,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175518262",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $processorTime\n     * @param Integer[] $tasks\n     * @return Integer\n     */\n    function minProcessingTime($processorTime, $tasks) {\n        rsort($tasks); // Sort tasks in descending order\n        sort($processorTime); // Sort processorTime in ascending order\n        $n = count($processorTime);\n        $times = array_fill(0, $n, 0); // Initialize times array to store completion times of each processor\n        \n        for ($i = 0; $i < count($tasks); $i++) {\n            $processorIndex = $i % $n; // Find the processor index in a round-robin fashion\n            $times[$processorIndex] = max($times[$processorIndex], $processorTime[$processorIndex]) + $tasks[$i]; // Calculate the new completion time\n            $processorTime[$processorIndex] = $times[$processorIndex]; // Update the processor's available time\n        }\n        \n        return max($times); // Return the maximum time when all tasks are completed\n    }\n}"
}