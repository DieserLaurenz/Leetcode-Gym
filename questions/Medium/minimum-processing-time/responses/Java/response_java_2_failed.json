{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66948000,
    "display_runtime": "185",
    "question_id": "3151",
    "elapsed_time": 587,
    "compare_result
    "code_output": "25",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707941960478,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175451977",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.Collections;\nimport java.util.List;\nimport java.util.PriorityQueue;\n\nclass Solution {\n    public int minProcessingTime(List<Integer> processorTime, List<Integer> tasks) {\n        Collections.sort(processorTime);\n        Collections.sort(tasks, Collections.reverseOrder());\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);\n        for (int i = 0; i < processorTime.size(); i++) {\n            pq.offer(new int[]{processorTime.get(i), 0});\n        }\n        for (int task : tasks) {\n            int[] cur = pq.poll();\n            cur[0] += task;\n            cur[1]++;\n            pq.offer(cur);\n        }\n        int maxTime = 0;\n        while (!pq.isEmpty()) {\n            maxTime = Math.max(maxTime, pq.poll()[0]);\n        }\n        return maxTime;\n    }\n}"
}