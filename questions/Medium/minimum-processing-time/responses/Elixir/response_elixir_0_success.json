{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "1132 ms",
    "memory": 228764000,
    "question_id": "3151",
    "elapsed_time": 1472,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707951241327,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 716,
    "total_testcases": 716,
    "runtime_percentile": 100,
    "status_memory": "228.8 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1175525340",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_processing_time(processor_time :: [integer], tasks :: [integer]) :: integer\n  def min_processing_time(processor_time, tasks) do\n    sorted_processors = Enum.sort(processor_time)\n    sorted_tasks = Enum.sort(tasks, :desc)\n    grouped_tasks = Enum.chunk_every(sorted_tasks, div(length(sorted_tasks), length(sorted_processors)))\n\n    zipped = Enum.zip(sorted_processors, grouped_tasks)\n\n    zipped\n    |> Enum.map(fn {start_time, task_times} ->\n      start_time + Enum.max(task_times)\n    end)\n    |> Enum.max()\n  end\nend"
}