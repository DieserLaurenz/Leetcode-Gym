{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 164744000,
    "question_id": "3151",
    "elapsed_time": 5019,
    "compare_result
    "code_output": "25",
    "std_output": "",
    "last_testcase": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "expected_output": "16",
    "task_finish_time": 1707950469386,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 716,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1175520175",
    "input_formatted": "[8,10], [2,2,3,1,8,7,4,5]",
    "input": "[8,10]\n[2,2,3,1,8,7,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minProcessingTime(List<int> processorTime, List<int> tasks) {\n    tasks.sort((a, b) => b.compareTo(a));\n    processorTime.sort();\n    List<int> endTime = List.filled(processorTime.length, 0);\n    int n = processorTime.length;\n    for (int i = 0; i < tasks.length; i++) {\n      int minIdx = 0;\n      for (int j = 1; j < n; j++) {\n        if (endTime[j] + processorTime[j] < endTime[minIdx] + processorTime[minIdx]) {\n          minIdx = j;\n        }\n      }\n      endTime[minIdx] = max(endTime[minIdx], processorTime[minIdx]) + tasks[i];\n      processorTime[minIdx] = endTime[minIdx];\n    }\n    return endTime.reduce(max);\n  }\n}"
}