{
    "acRate": 59.04387633520768,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2679",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Sum in a Matrix",
    "titleSlug": "sum-in-a-matrix",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        },
        {
            "name": "Heap (Priority Queue)",
            "id": "VG9waWNUYWdOb2RlOjYxMDUw",
            "slug": "heap-priority-queue"
        },
        {
            "name": "Matrix",
            "id": "VG9waWNUYWdOb2RlOjYxMDUz",
            "slug": "matrix"
        },
        {
            "name": "Simulation",
            "id": "VG9waWNUYWdOb2RlOjYxMDU1",
            "slug": "simulation"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int matrixSum(vector<vector<int>>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int matrixSum(int[][] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def matrixSum(self, nums):         \"\"\"         :type nums: List[List[int]]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def matrixSum(self, nums: List[List[int]]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int matrixSum(int** nums, int numsSize, int* numsColSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MatrixSum(int[][] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} nums  * @return {number}  */ var matrixSum = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function matrixSum(nums: number[][]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $nums      * @return Integer      */     function matrixSum($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func matrixSum(_ nums: [[Int]]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun matrixSum(nums: Array<IntArray>): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int matrixSum(List<List<int>> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func matrixSum(nums [][]int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} nums # @return {Integer} def matrix_sum(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def matrixSum(nums: Array[Array[Int]]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn matrix_sum(nums: Vec<Vec<i32>>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (matrix-sum nums)   (-> (listof (listof exact-integer?)) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec matrix_sum(Nums :: [[integer()]]) -> integer(). matrix_sum(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec matrix_sum(nums :: [[integer]]) :: integer   def matrix_sum(nums) do    end end"
        }
    ],
    "content": "You are given a 0-indexed 2D integer array nums. Initially, your score is 0. Perform the following operations until the matrix becomes empty:  From each row in the matrix, select the largest number and remove it. In the case of a tie, it does not matter which number is chosen. Identify the highest number amongst all those removed in step 1. Add that number to your score.  Return the final score.  Example 1:  Input: nums = [[7,2,1],[6,4,2],[6,5,3],[3,2,1]] Output: 15 Explanation: In the first operation, we remove 7, 6, 6, and 3. We then add 7 to our score. Next, we remove 2, 4, 5, and 2. We add 5 to our score. Lastly, we remove 1, 2, 3, and 1. We add 3 to our score. Thus, our final score is 7 + 5 + 3 = 15.  Example 2:  Input: nums = [[1]] Output: 1 Explanation: We remove 1 and add it to the answer. We return 1.  Constraints:  1 <= nums.length <= 300 1 <= nums[i].length <= 500 0 <= nums[i][j] <= 103  "
}