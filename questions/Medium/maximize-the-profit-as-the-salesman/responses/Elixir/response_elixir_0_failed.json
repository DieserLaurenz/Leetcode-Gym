{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 207416000,
    "question_id": "2979",
    "elapsed_time": 1244,
    "compare_result": "111110011011011111111111100010100111111111011011000111100010111111000101010111001100011111001011001110001111011111101010111011110111111001110110110101001101101110101101111001110111111001011011111111110000000010000000001101000000000001000000010000001000000000110000000010000000000000100000000000001011000000000100010100000000001001000001100010000001000000000010101000000000101000000100100001001001001000000000000100000000001000000011110",
    "code_output": "10",
    "std_output": "",
    "last_testcase": "10\n[[1,6,1],[0,1,10],[3,6,2],[0,5,10],[0,0,3],[0,0,4],[1,1,4],[0,6,7],[4,4,1]]",
    "expected_output": "12",
    "task_finish_time": 1707577504397,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171485592",
    "input_formatted": "10, [[1,6,1],[0,1,10],[3,6,2],[0,5,10],[0,0,3],[0,0,4],[1,1,4],[0,6,7],[4,4,1]]",
    "input": "10\n[[1,6,1],[0,1,10],[3,6,2],[0,5,10],[0,0,3],[0,0,4],[1,1,4],[0,6,7],[4,4,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximize_the_profit(n :: integer, offers :: [[integer]]) :: integer\n  def maximize_the_profit(n, offers) do\n    offers\n    |> Enum.map(fn [s, e, g] -> {s, e, g} end)\n    |> Enum.sort_by(fn {_, e, _} -> e end)\n    |> Enum.reduce(%{dp: Map.new(), max: 0}, fn {s, e, g}, acc ->\n      prev_max = Map.get(acc.dp, s-1, 0)\n      new_max = max(acc.max, prev_max + g)\n      dp = Map.put(acc.dp, e, new_max)\n      %{acc | dp: dp, max: new_max}\n    end)\n    |> Map.get(:max)\n  end\nend"
}