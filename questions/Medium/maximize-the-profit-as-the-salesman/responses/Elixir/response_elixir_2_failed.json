{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73612000,
    "question_id": "2979",
    "elapsed_time": 418,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "\"nil\"",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707577554376,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171486121",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximize_the_profit(n :: integer, offers :: [[integer]]) :: integer\n  def maximize_the_profit(n, offers) do\n    offers = Enum.map(offers, fn [s, e, g] -> {s, e, g} end)\n    dp = Enum.reduce(0..n, %{0 => 0}, fn i, acc ->\n      max_gold = Enum.reduce(offers, acc[i], fn {s, e, g}, acc_inner ->\n        if s <= i and i <= e, do: max(acc_inner, Map.get(acc, s-1, 0) + g), else: acc_inner\n      end)\n      Map.put(acc, i, max_gold)\n    end)\n    Map.values(dp) |> Enum.max()\n  end\nend"
}