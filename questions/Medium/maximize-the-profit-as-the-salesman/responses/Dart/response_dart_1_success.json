{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "504 ms",
    "memory": 195016000,
    "question_id": "2979",
    "elapsed_time": 734,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707568084115,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 435,
    "total_testcases": 435,
    "runtime_percentile": 100,
    "status_memory": "195 MB",
    "memory_percentile": 100,
    "pretty_lang": "Dart",
    "submission_id": "1171388134",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maximizeTheProfit(int n, List<List<int>> offers) {\n    offers.sort((a, b) => a[1].compareTo(b[1]));\n    List<int> dp = List.filled(n + 1, 0);\n    int j = 0;\n    for (int i = 1; i <= n; i++) {\n      dp[i] = dp[i - 1];\n      while (j < offers.length && offers[j][1] < i) {\n        dp[i] = dp[i] > dp[offers[j][0]] + offers[j][2] ? dp[i] : dp[offers[j][0]] + offers[j][2];\n        j++;\n      }\n    }\n    return dp[n];\n  }\n}"
}