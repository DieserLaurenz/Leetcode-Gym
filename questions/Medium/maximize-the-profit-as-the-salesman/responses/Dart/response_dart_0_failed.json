{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 20: Char 27: Error: Operator '>' cannot be called on 'int?' because it is potentially null.",
    "full_runtime_error": "Line 20: Char 27: Error: Operator '>' cannot be called on 'int?' because it is potentially null.\n        dp[end] = dp[end] > maxSoFar + gold ? dp[end] : maxSoFar + gold;\n                          ^\nLine 20: Char 45: Error: A value of type 'int?' can't be assigned to a variable of type 'int' because 'int?' is nullable and 'int' isn't.\n        dp[end] = dp[end] > maxSoFar + gold ? dp[end] : maxSoFar + gold;\n                                            ^",
    "status_runtime": "N/A",
    "memory": 149888000,
    "question_id": "2979",
    "elapsed_time": 475,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707568063106,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1171387948",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maximizeTheProfit(int n, List<List<int>> offers) {\n    offers.sort((a, b) => a[1].compareTo(b[1])); // Sort by end time\n    Map<int, int> dp = {0: 0}; // dp[i] = max profit up to house i\n    for (var offer in offers) {\n      int start = offer[0], end = offer[1] + 1, gold = offer[2];\n      int maxSoFar = 0;\n      // Find the max profit before the start of this offer\n      for (var entry in dp.entries) {\n        if (entry.key <= start) {\n          maxSoFar = maxSoFar > entry.value ? maxSoFar : entry.value;\n        } else {\n          break;\n        }\n      }\n      // Update the dp for the end of current offer if it's better than existing\n      if (!dp.containsKey(end)) {\n        dp[end] = maxSoFar + gold;\n      } else {\n        dp[end] = dp[end] > maxSoFar + gold ? dp[end] : maxSoFar + gold;\n      }\n    }\n    return dp.values.reduce((a, b) => a > b ? a : b); // Get the max value from dp\n  }\n}"
}