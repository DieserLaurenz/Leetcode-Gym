{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "50 ms",
    "memory": 9660000,
    "question_id": "2979",
    "elapsed_time": 63,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707577193428,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 435,
    "total_testcases": 435,
    "runtime_percentile": 50.0,
    "status_memory": "9.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "Rust",
    "submission_id": "1171482275",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximize_the_profit(n: i32, offers: Vec<Vec<i32>>) -> i32 {\n        use std::collections::HashMap;\n        \n        let mut dp = vec![0; (n + 1) as usize];\n        let mut offer_map: HashMap<i32, Vec<(i32, i32)>> = HashMap::new();\n        \n        for offer in offers {\n            offer_map.entry(offer[1])\n                .or_insert_with(Vec::new)\n                .push((offer[0], offer[2]));\n        }\n        \n        for i in 1..=n as usize {\n            dp[i] = dp[i - 1];\n            if let Some(offers) = offer_map.get(&(i as i32 - 1)) {\n                for offer in offers {\n                    let (start, gold) = offer;\n                    dp[i] = dp[i].max(dp[*start as usize] + gold);\n                }\n            }\n        }\n        \n        dp[n as usize]\n    }\n}"
}