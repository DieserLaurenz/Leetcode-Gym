{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13224000,
    "question_id": "2979",
    "elapsed_time": 3004,
    "compare_result": "000000001001000000000100100000000110000101000000010100000000001000000000100010000100001110001010010010000000001010000000101000000000100000000010000101000101000000000001011000110010000000000100000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707568195844,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171389181",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximizeTheProfit(n int, offers [][]int) int {\n    dp := make([]int, n+1)\n    for _, offer := range offers {\n        end := offer[1]\n        start := offer[0]\n        gold := offer[2]\n        for i := end; i >= start; i-- {\n            if i == start {\n                dp[end+1] = max(dp[end+1], dp[start]+gold)\n            } else {\n                dp[end+1] = max(dp[end+1], dp[i]+gold)\n            }\n        }\n    }\n    for i := 1; i <= n; i++ {\n        dp[i] = max(dp[i], dp[i-1])\n    }\n    return dp[n]\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}