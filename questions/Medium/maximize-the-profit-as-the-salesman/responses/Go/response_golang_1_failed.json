{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12440000,
    "question_id": "2979",
    "elapsed_time": 3009,
    "compare_result": "000001001001001000000110001000000100000000000001000100000000100000000100100000000100000001000000110010000000000010000000101010000000010000000000000000000000000000000001000001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707568163576,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171388863",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximizeTheProfit(n int, offers [][]int) int {\n    sort.Slice(offers, func(i, j int) bool {\n        return offers[i][1] < offers[j][1]\n    })\n    dp := make([]int, n+1)\n    for i := 1; i <= n; i++ {\n        dp[i] = dp[i-1]\n        for _, offer := range offers {\n            if offer[1] < i {\n                continue\n            }\n            if offer[0] >= i {\n                break\n            }\n            dp[i] = max(dp[i], dp[offer[0]]+offer[2])\n        }\n    }\n    return dp[n]\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}