{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12920000,
    "question_id": "2979",
    "elapsed_time": 263,
    "compare_result": "100010000001001000000110011000000100000100100000000100001001101000000000000000001100000001000010100010000000000010000000101010000001000000000100000010111010000000110001000101001010001000000000000000000000000000000000000000000000000000000000001000010000000000000100000000000000000000000100000000000000000000000000000000001000010000000010001000100000000001011000000000001000000001000000000000000000100100000000010001000000000000000000010",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,10],[1,3,2]]",
    "expected_output": "10",
    "task_finish_time": 1707568138563,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 60,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171388646",
    "input_formatted": "5, [[0,0,1],[0,2,10],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,10],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximizeTheProfit(n int, offers [][]int) int {\n    dp := make([]int, n+1)\n    offerMap := make([][]int, n+1)\n    for _, offer := range offers {\n        offerMap[offer[1]] = append(offerMap[offer[1]], offer[0]*10000+offer[2])\n    }\n    for i := 0; i <= n; i++ {\n        if i > 0 {\n            dp[i] = dp[i-1]\n        }\n        for _, offer := range offerMap[i] {\n            start := offer / 10000\n            gold := offer % 10000\n            if dp[start]+gold > dp[i] {\n                dp[i] = dp[start] + gold\n            }\n        }\n    }\n    return dp[n]\n}"
}