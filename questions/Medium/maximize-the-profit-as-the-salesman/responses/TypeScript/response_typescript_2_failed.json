{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66576000,
    "question_id": "2979",
    "elapsed_time": 4012,
    "compare_result": "000001001001001000000110001000000100000000000001000100000000100000000100100000000100000001000000110010000000000010000000101010000000010000000000000000000000100000000001000001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707567698945,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1171384604",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximizeTheProfit(n: number, offers: number[][]): number {\n    const dp = new Array(n + 1).fill(0);\n    offers.sort((a, b) => a[1] - b[1]); // Sort by end time\n\n    for (let i = 1; i <= n; i++) {\n        dp[i] = dp[i - 1]; // Initially, take the max profit till the previous house\n        for (const offer of offers) {\n            const [start, end, gold] = offer;\n            if (end < i) continue; // Skip offers that end before the current house\n            if (start >= i) break; // Since offers are sorted by end, no need to check further\n            dp[i] = Math.max(dp[i], dp[start] + gold);\n        }\n    }\n\n    return dp[n];\n}"
}