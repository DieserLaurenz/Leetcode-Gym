{
    "status_code": 15,
    "lang": "typescript",
    "run_success": false,
    "runtime_error": "",
    "full_runtime_error": "            if (offers[j][1] + 1 == i) { // If the offer ends at the current house\n                         ^\nTypeError: Cannot read properties of undefined (reading '1')\n    Line 17: Char 26 in solution.ts (maximizeTheProfit)\n    Line 37: Char 19 in solution.ts (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 26: Char 26 in solution.ts (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1376:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1435:10)\n    at Module.load (node:internal/modules/cjs/loader:1207:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:1023:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:135:12)\n    at node:internal/main/run_main_module:28:49",
    "status_runtime": "N/A",
    "memory": 58972000,
    "question_id": "2979",
    "elapsed_time": 137,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707567631459,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1171383994",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "function maximizeTheProfit(n: number, offers: number[][]): number {\n    offers.sort((a, b) => a[1] - b[1]); // Sort offers based on the end index\n    const dp = new Array(n + 1).fill(0); // DP array to store max profit up to ith house\n\n    let offerIndex = 0; // Pointer to iterate over offers\n\n    for (let i = 1; i <= n; i++) {\n        dp[i] = dp[i - 1]; // Initially, max profit up to i houses is same as max profit up to i-1 houses\n\n        // Process all offers whose end house is i-1\n        while (offerIndex < offers.length && offers[offerIndex][1] < i) {\n            offerIndex++;\n        }\n\n        // Check for offers that end at the current house (i-1) and update DP accordingly\n        for (let j = 0; j <= offerIndex; j++) {\n            if (offers[j][1] + 1 == i) { // If the offer ends at the current house\n                const [start, , gold] = offers[j];\n                dp[i] = Math.max(dp[i], dp[start] + gold); // Update DP: max of current or taking this offer\n            }\n        }\n    }\n\n    return dp[n]; // Max profit for n houses\n};"
}