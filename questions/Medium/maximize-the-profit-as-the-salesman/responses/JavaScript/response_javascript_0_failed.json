{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74964000,
    "question_id": "2979",
    "elapsed_time": 250,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707567496370,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1171382786",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number[][]} offers\n * @return {number}\n */\nvar maximizeTheProfit = function(n, offers) {\n    offers.sort((a, b) => a[1] - b[1] || a[0] - b[0]);\n    let dp = new Array(n + 1).fill(0);\n\n    for (let i = 0, j = 0; i <= n; i++) {\n        dp[i] = Math.max(dp[i], (i > 0 ? dp[i - 1] : 0));\n        while (j < offers.length && offers[j][1] < i) j++;\n        for (let k = j; k < offers.length && offers[k][1] == i - 1; k++) {\n            dp[i] = Math.max(dp[i], dp[offers[k][0]] + offers[k][2]);\n        }\n    }\n\n    return dp[n];\n};"
}