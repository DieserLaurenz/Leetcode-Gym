{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66724000,
    "question_id": "2979",
    "elapsed_time": 4011,
    "compare_result": "010000011001001000000110100000000100000000000010000101100010101000000100000010000100001110001010000010001000000010000010101010000000000000000010000100000000000000000001001001110110000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707567568830,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 41,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1171383413",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number[][]} offers\n * @return {number}\n */\nvar maximizeTheProfit = function(n, offers) {\n    offers.sort((a, b) => b[1] - a[1]); // Sort offers by their ending house in descending order\n    let dp = new Array(n + 1).fill(0); // dp[i] represents max gold from 0 to i houses\n    \n    for (let i = 0; i < offers.length; i++) {\n        const [start, end, gold] = offers[i];\n        for (let j = n; j >= end + 1; j--) { // Update dp values only for the relevant range\n            dp[j] = Math.max(dp[j], dp[start] + gold);\n        }\n    }\n    \n    // Find the max value in dp, which represents the maximum gold we can earn\n    let maxGold = 0;\n    for (let i = 0; i <= n; i++) {\n        maxGold = Math.max(maxGold, dp[i]);\n    }\n    \n    return maxGold;\n};"
}