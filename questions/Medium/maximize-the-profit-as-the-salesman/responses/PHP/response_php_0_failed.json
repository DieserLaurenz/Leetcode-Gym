{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55584000,
    "question_id": "2979",
    "elapsed_time": 590,
    "compare_result": "100010000001001000000110011000000100000100100000000100001001101000000000000000001100000001000010100010000000000010000000101010000001000000000100000010111010000000110001000101001010001000000000000000000000000000000000000000000000000000000000001000010000000000000100000000000000000000000100000000000000000000000000000000001000010000000010001000100000000001011000000000001000000001000000000000000000100100000000010001000000000000000000010",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,10],[1,3,2]]",
    "expected_output": "10",
    "task_finish_time": 1707567756857,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 60,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1171385172",
    "input_formatted": "5, [[0,0,1],[0,2,10],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,10],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[][] $offers\n     * @return Integer\n     */\n    function maximizeTheProfit($n, $offers) {\n        $dp = array_fill(0, $n + 1, 0);\n        $offerMap = [];\n        foreach ($offers as $offer) {\n            $offerMap[$offer[1]][] = $offer;\n        }\n        for ($i = 0; $i <= $n; $i++) {\n            $dp[$i] = $i > 0 ? $dp[$i - 1] : 0;\n            if (isset($offerMap[$i])) {\n                foreach ($offerMap[$i] as $offer) {\n                    $dp[$i] = max($dp[$i], $dp[$offer[0]] + $offer[2]);\n                }\n            }\n        }\n        return $dp[$n];\n    }\n}"
}