{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "1578 ms",
    "memory": 105160000,
    "question_id": "2979",
    "elapsed_time": 1908,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707568346357,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 435,
    "total_testcases": 435,
    "runtime_percentile": 100,
    "status_memory": "105.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1171390589",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximizeTheProfit(n: Int, offers: List[List[Int]]): Int = {\n        val dp = Array.ofDim[Int](n + 1)\n        val offerMap = offers.groupBy(_(1)).mapValues(_.map(o => (o(0), o(2))).sortBy(_._1))\n        for (i <- 1 to n) {\n            dp(i) = dp(i - 1)\n            if (offerMap.contains(i - 1)) {\n                for ((start, gold) <- offerMap(i - 1)) {\n                    dp(i) = dp(i) max (dp(start) + gold)\n                }\n            }\n        }\n        dp(n)\n    }\n}"
}