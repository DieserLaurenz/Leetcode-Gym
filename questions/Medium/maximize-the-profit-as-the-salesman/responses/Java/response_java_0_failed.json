{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 83528000,
    "display_runtime": "49",
    "question_id": "2979",
    "elapsed_time": 493,
    "compare_result": "100000000001001000000110011000000100000100000000000101001000101000000100000000000100000001000010100010010000100010000000101010000000010000000100000010111010001000110001000001001010001000000000000010000000000000000000000000000010000000000000000000010000000000000100000000000000000000000000000000000000000000000000000000001000010001000000001000100000000001001000000000001000000000000000000000000000000100000000010001000000000000000000010",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,10],[1,3,2]]",
    "expected_output": "10",
    "task_finish_time": 1707567113702,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171379209",
    "input_formatted": "5, [[0,0,1],[0,2,10],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,10],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maximizeTheProfit(int n, List<List<Integer>> offers) {\n        int[] dp = new int[n + 1];\n        List<int[]> events = new ArrayList<>();\n        for (List<Integer> offer : offers) {\n            events.add(new int[]{offer.get(1), offer.get(0), offer.get(2)});\n        }\n        Collections.sort(events, (a, b) -> a[0] - b[0]);\n        int idx = 0;\n        for (int i = 0; i <= n; i++) {\n            if (idx < events.size() && events.get(idx)[0] < i) {\n                idx++;\n            }\n            dp[i] = i > 0 ? dp[i - 1] : 0;\n            for (int j = idx; j < events.size() && events.get(j)[0] == i; j++) {\n                int[] event = events.get(j);\n                dp[i] = Math.max(dp[i], dp[event[1]] + event[2]);\n            }\n        }\n        return dp[n];\n    }\n}"
}