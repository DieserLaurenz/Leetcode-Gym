{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 138596000,
    "question_id": "2979",
    "elapsed_time": 5017,
    "compare_result": "001000000011000110010100101000000100001000000010000100001000011000000000000010000110001111011010000110000001001111000000101000100000100001000010000001111001000100100001101000101011000000010000000100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707577297792,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 56,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1171483325",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximize-the-profit n offers)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n  \n  (define (sort-offers offers)\n    (sort offers (lambda (a b) (< (car a) (car b)))))\n  \n  (define sorted-offers (sort-offers offers))\n  \n  (define dp (make-vector (+ n 1) 0))\n  \n  (for ([i (in-range 1 (+ n 1))])\n    (vector-set! dp i (vector-ref dp (- i 1)))\n    (for ([offer (in-list sorted-offers)])\n      (let ([start (car offer)]\n            [end (cadr offer)]\n            [gold (caddr offer)])\n        (when (<= start (- i 1))\n          (vector-set! dp i (max (vector-ref dp i) \n                                 (+ (if (> start 0) (vector-ref dp start) 0) gold)))))))\n  (vector-ref dp n))"
}