{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 137156000,
    "question_id": "2979",
    "elapsed_time": 5014,
    "compare_result": "011101111010110111110010110111110010111101011011001011110111110011111100011111110010111110101100001101001101100001100000000110100000010111110110100100000011110100011010111111000100110101111111101111110011111111111110111101101111011111111111111111011101111110111111110111111111111110111111011111111110011111111111111110110101111000111101111111111111110011111110111111111110110110111111111111011111111111111111111111111111111110000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707577326333,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 316,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1171483632",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximize-the-profit n offers)\n  (-> exact-integer? (listof (listof exact-integer?)) exact-integer?)\n\n  (let ([dp (make-vector (+ n 1) 0)])\n    (let ([sorted-offers (sort offers (lambda (a b) (< (cadr a) (cadr b))))])\n      (for ([i (in-range 1 (length sorted-offers) 1)])\n        (let* ([offer (list-ref sorted-offers (- i 1))]\n               [start (car offer)]\n               [end (cadr offer)]\n               [gold (caddr offer)])\n          (for ([j (in-range (add1 end) (+ n 1))])\n            (vector-set! dp j (max (vector-ref dp j) (+ (vector-ref dp start) gold))))))\n      (vector-ref dp n))))"
}