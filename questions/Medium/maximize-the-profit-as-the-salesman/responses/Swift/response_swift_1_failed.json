{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25728000,
    "question_id": "2979",
    "elapsed_time": 749,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707567921210,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1171386638",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximizeTheProfit(_ n: Int, _ offers: [[Int]]) -> Int {\n        var dp = Array(repeating: 0, count: n + 1)\n        let offersSorted = offers.sorted { $0[1] < $1[1] }\n        \n        var offerIndex = 0\n        for i in 1...n {\n            dp[i] = dp[i - 1] // Start by assuming the best without selling the current house\n            while offerIndex < offersSorted.count, offersSorted[offerIndex][1] < i {\n                offerIndex += 1\n            }\n            var j = offerIndex\n            while j < offersSorted.count, offersSorted[j][1] == i - 1 {\n                dp[i] = max(dp[i], dp[offersSorted[j][0]] + offersSorted[j][2])\n                j += 1\n            }\n        }\n        \n        return dp[n]\n    }\n}"
}