{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43492000,
    "question_id": "2979",
    "elapsed_time": 11009,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1708787403958,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184900359",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n        offers.sort(key=lambda x: x[1])  # Sort by end time\n        dp = [0] * (n + 1)  # dp[i] = max profit for first i houses\n        \n        offers_idx = 0  # Keep track of the current offer's index\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]  # Default case, no new offers\n            while offers_idx < len(offers) and offers[offers_idx][1] < i:\n                offers_idx += 1\n            for j in range(offers_idx):\n                if offers[j][1] < i:\n                    continue\n                start, end, gold = offers[j]\n                if end < i:\n                    continue  # This offer ends before the current house\n                dp[i] = max(dp[i], dp[start] + gold)  # Take the max of current and new offer\n                \n        return dp[n - 1]  # Adjusted to return dp[n - 1] for 0-based indexing correction"
}