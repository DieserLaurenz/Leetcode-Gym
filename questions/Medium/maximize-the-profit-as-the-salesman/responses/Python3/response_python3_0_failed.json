{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43400000,
    "question_id": "2979",
    "elapsed_time": 11010,
    "compare_result": "000000000001000000000100100000000000000000000010000100000000001000000000000010000100001110001010000000000000000000000000000000000000000000000010000000000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1708787317646,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184899311",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n        dp = [0] * (n + 1)\n        offers.sort(key=lambda x: x[1])  # Sort offers based on endi\n        \n        offer_idx = 0  # Index to track the current offer in sorted offers\n        for i in range(1, n + 1):\n            # While not at the end of offers and the current house is beyond the current offer's end, update dp\n            while offer_idx < len(offers) and offers[offer_idx][1] < i - 1:\n                offer_idx += 1\n            \n            # Option 1: Do not sell the current house, keep the previous max profit\n            dp[i] = dp[i-1]\n            \n            # Option 2: Try selling to all possible offers that include this house\n            for j in range(offer_idx, len(offers)):\n                if offers[j][1] >= i - 1:\n                    start, end, gold = offers[j]\n                    dp[i] = max(dp[i], dp[start] + gold)\n                else:\n                    break  # Further offers will not include this house\n        return dp[n]"
}