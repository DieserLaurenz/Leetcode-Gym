{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43224000,
    "question_id": "2979",
    "elapsed_time": 11010,
    "compare_result": "001111101111011111010111111010100111111110001011001111111100111111111101100111101111111111011010111111110101101111111110111010110101111011100111001111111101110111111111111001111111111111010001010100011100000000000000000000000000000000000000001000000000010000000010000000000000000001000000100000000010000000000000000000000000000000000000000010000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1708787360327,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 159,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184899829",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maximizeTheProfit(self, n: int, offers: List[List[int]]) -> int:\n        # Sort offers based on endi, if equal, sort by starti in reverse (to prioritize longer ranges first)\n        offers.sort(key=lambda x: (x[1], -x[0]))\n        dp = [0] * (n + 1)  # dp[i] stores max profit for first i houses\n\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]  # Initially, take profit up to previous house\n            for start, end, gold in offers:\n                if end < i - 1:\n                    continue  # Skip offers that end before the current house\n                if start >= i:\n                    break  # Since offers are sorted, no need to check further\n                dp[i] = max(dp[i], dp[start] + gold)  # Maximize profit by considering current offer\n\n        return dp[n]"
}