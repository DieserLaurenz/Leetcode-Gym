{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "1054 ms",
    "memory": 40440000,
    "question_id": "2979",
    "elapsed_time": 1085,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708787242530,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 435,
    "total_testcases": 435,
    "runtime_percentile": 83.3332,
    "status_memory": "40.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Python",
    "submission_id": "1184898523",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximizeTheProfit(self, n, offers):\n        offers.sort(key=lambda x: x[1])  # Sort offers by endi\n        dp = [0] * (n + 1)  # dp[i] represents the max gold from 0 to house i\n\n        j = 0  # Pointer for offers\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]  # Initialize with the previous value\n            # Update dp[i] considering offers that end at or before house i-1\n            while j < len(offers) and offers[j][1] < i:\n                start, end, gold = offers[j]\n                dp[i] = max(dp[i], dp[start] + gold)\n                j += 1\n\n        return dp[n]"
}