{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "814 ms",
    "memory": 92948000,
    "question_id": "2979",
    "elapsed_time": 986,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707568005193,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 435,
    "total_testcases": 435,
    "runtime_percentile": 50.0,
    "status_memory": "92.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Kotlin",
    "submission_id": "1171387388",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximizeTheProfit(n: Int, offers: List<List<Int>>): Int {\n        val dp = IntArray(n + 1) { 0 }\n        val offerMap = mutableMapOf<Int, MutableList<Pair<Int, Int>>>()\n\n        for (offer in offers) {\n            val start = offer[0]\n            val end = offer[1]\n            val gold = offer[2]\n            offerMap.getOrPut(end) { mutableListOf() }.add(Pair(start, gold))\n        }\n\n        for (i in 1..n) {\n            dp[i] = dp[i - 1] // Not selling the i-th house\n            offerMap[i - 1]?.let { list ->\n                for (offer in list) {\n                    val start = offer.first\n                    val gold = offer.second\n                    dp[i] = maxOf(dp[i], dp[start] + gold)\n                }\n            }\n        }\n\n        return dp[n]\n    }\n}"
}