{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20396000,
    "question_id": "2979",
    "elapsed_time": 3012,
    "compare_result": "000000000000000000000000000000000000000100000000000000000000001000001000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707567313038,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171381025",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void* a, const void* b) {\n    int* offerA = *(int**)a;\n    int* offerB = *(int**)b;\n    if (offerA[1] < offerB[1]) return -1;\n    else if (offerA[1] > offerB[1]) return 1;\n    else return 0;\n}\n\nint maximizeTheProfit(int n, int** offers, int offersSize, int* offersColSize) {\n    qsort(offers, offersSize, sizeof(int*), compare);\n    int dp[n + 1];\n    memset(dp, 0, sizeof(dp));\n\n    for (int i = 0; i < offersSize; ++i) {\n        for (int j = offers[i][1]; j >= offers[i][0]; --j) {\n            if (j == offers[i][1]) dp[j + 1] = fmax(dp[j + 1], dp[offers[i][0]] + offers[i][2]);\n            dp[j] = fmax(dp[j], dp[j + 1]);\n        }\n    }\n\n    return dp[n];\n}"
}