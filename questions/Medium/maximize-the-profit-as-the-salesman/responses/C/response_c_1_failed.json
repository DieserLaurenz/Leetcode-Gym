{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20264000,
    "question_id": "2979",
    "elapsed_time": 3010,
    "compare_result": "000000000001000000000100000000001100000000000000000100000000001000000000000000000111000000100010000110100000000010000000101010000000000000000000000000000010000000000001000101000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707567266321,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 23,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171380604",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximizeTheProfit(int n, int** offers, int offersSize, int* offersColSize) {\n    int* dp = (int*)malloc((n+1) * sizeof(int));\n    for (int i = 0; i <= n; i++) dp[i] = 0;\n\n    for (int i = 0; i < offersSize; i++) {\n        for (int j = offers[i][1]; j >= offers[i][0]; j--) {\n            if (j == offers[i][1]) dp[j] = fmax(dp[j], dp[offers[i][0]] + offers[i][2]);\n            else dp[j] = fmax(dp[j], dp[j+1]);\n        }\n    }\n\n    int result = 0;\n    for (int i = 0; i <= n; i++) {\n        result = fmax(result, dp[i]);\n    }\n\n    free(dp);\n    return result;\n}"
}