{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 23072000,
    "question_id": "2979",
    "elapsed_time": 3011,
    "compare_result": "100000001001001000000100000000100100000000000000000100000000101000000000000000000100000000001010010010000000000010000000101010000000000000000010000000000000000000000001000001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,10],[1,3,2]]",
    "expected_output": "10",
    "task_finish_time": 1707567235449,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 23,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171380344",
    "input_formatted": "5, [[0,0,1],[0,2,10],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,10],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximizeTheProfit(int n, int** offers, int offersSize, int* offersColSize){\n    int dp[n+1];\n    memset(dp, 0, sizeof(dp));\n    int ends[n+1];\n    memset(ends, -1, sizeof(ends));\n    for (int i = 0; i < offersSize; i++) {\n        int start = offers[i][0], end = offers[i][1], gold = offers[i][2];\n        for (int j = start; j <= end; j++) {\n            if (ends[j] < end) {\n                ends[j] = end;\n                dp[end] = fmax(dp[end], dp[start] + gold);\n            }\n        }\n    }\n    int maxGold = 0;\n    for (int i = 0; i <= n; i++) {\n        if (i > 0) dp[i] = fmax(dp[i], dp[i-1]);\n        maxGold = fmax(maxGold, dp[i]);\n    }\n    return maxGold;\n}"
}