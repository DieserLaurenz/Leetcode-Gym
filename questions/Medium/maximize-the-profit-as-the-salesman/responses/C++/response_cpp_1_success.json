{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "245 ms",
    "memory": 97948000,
    "question_id": "2979",
    "elapsed_time": 296,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707567056764,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 435,
    "total_testcases": 435,
    "runtime_percentile": 98.82639999999999,
    "status_memory": "97.9 MB",
    "memory_percentile": 76.29150000000003,
    "pretty_lang": "C++",
    "submission_id": "1171378715",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maximizeTheProfit(int n, vector<vector<int>>& offers) {\n        sort(offers.begin(), offers.end(), [](const vector<int>& a, const vector<int>& b) {\n            return a[1] < b[1];\n        });\n        vector<int> dp(n + 1, 0);\n        int offerIndex = 0;\n        for (int i = 1; i <= n; ++i) {\n            dp[i] = dp[i - 1]; // Without selling the i-th house.\n            while (offerIndex < offers.size() && offers[offerIndex][1] < i - 1) {\n                ++offerIndex;\n            }\n            for (int j = offerIndex; j < offers.size() && offers[j][1] < i; ++j) {\n                if (offers[j][1] + 1 == i) {\n                    dp[i] = max(dp[i], dp[offers[j][0]] + offers[j][2]);\n                }\n            }\n        }\n        return dp[n];\n    }\n};"
}