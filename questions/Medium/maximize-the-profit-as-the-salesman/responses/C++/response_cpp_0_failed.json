{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 98084000,
    "question_id": "2979",
    "elapsed_time": 313,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "expected_output": "3",
    "task_finish_time": 1707567026360,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 435,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171378456",
    "input_formatted": "5, [[0,0,1],[0,2,2],[1,3,2]]",
    "input": "5\n[[0,0,1],[0,2,2],[1,3,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maximizeTheProfit(int n, vector<vector<int>>& offers) {\n        sort(offers.begin(), offers.end(), [](const vector<int> &a, const vector<int> &b) {\n            return a[1] < b[1];\n        });\n        vector<int> dp(n+1, 0);\n        int j = 0;\n        for (int i = 1; i <= n; ++i) {\n            dp[i] = dp[i-1]; // Initially, not selling the ith house.\n            while (j < offers.size() && offers[j][1] < i) ++j; // Skip offers that end before the ith house.\n            for (int k = j; k < offers.size() && offers[k][1] == i-1; ++k) {\n                dp[i] = max(dp[i], dp[offers[k][0]] + offers[k][2]);\n            }\n        }\n        return dp[n];\n    }\n};"
}