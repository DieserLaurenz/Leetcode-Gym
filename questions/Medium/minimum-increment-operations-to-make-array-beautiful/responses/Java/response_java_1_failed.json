{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 48184000,
    "question_id": "3178",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707795272324,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 146,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1173756317",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minIncrementOperations(int[] nums, int k) {\n        long ops = 0;\n        for (int i = 0; i < nums.length; i++) {\n            int max = nums[i];\n            for (int j = i; j < nums.length; j++) {\n                max = Math.max(max, nums[j]);\n                if (j - i >= 2 && max < k) { // If the subarray size is 3 or more and max is less than k\n                    ops += k - max;\n                    max = k; // Update max to k as we're increasing the max to k\n                }\n            }\n        }\n        return ops;\n    }\n}"
}