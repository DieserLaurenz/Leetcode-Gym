{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55972000,
    "question_id": "3178",
    "elapsed_time": 5240,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805150722,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 86,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1173883056",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minIncrementOperations(nums: IntArray, k: Int): Long {\n        var operations = 0L\n        for (i in nums.indices) {\n            val maxInSubarray = (i until nums.size).maxOfOrNull { j -> nums[j] } ?: 0\n            if (maxInSubarray < k) {\n                val increment = k - maxInSubarray\n                for (j in i until nums.size) {\n                    nums[j] += increment\n                    operations += increment.toLong()\n                }\n            }\n        }\n        return operations\n    }\n}"
}