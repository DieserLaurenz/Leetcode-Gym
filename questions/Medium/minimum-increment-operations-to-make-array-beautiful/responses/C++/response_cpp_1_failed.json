{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 83392000,
    "question_id": "3178",
    "elapsed_time": 122,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[0,1,3,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707795155827,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 168,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173755185",
    "input_formatted": "[0,1,3,3], 5",
    "input": "[0,1,3,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long minIncrementOperations(vector<int>& nums, int k) {\n        long long ans = 0;\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] < k) {\n                int maxReach = min(n, i + 3);\n                int maxVal = nums[i];\n                for (int j = i; j < maxReach; ++j) {\n                    maxVal = max(maxVal, nums[j]);\n                }\n                if (maxVal < k) {\n                    ans += k - maxVal;\n                    for (int j = i; j < maxReach; ++j) {\n                        nums[j] += k - maxVal;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};"
}