{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 83396000,
    "question_id": "3178",
    "elapsed_time": 167,
    "compare_result
    "code_output": "13",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707795185132,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 110,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173755470",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long minIncrementOperations(vector<int>& nums, int k) {\n        long long ops = 0;\n        int maxElem = *max_element(nums.begin(), nums.end());\n        if (maxElem >= k) return 0; // No operations needed if max element is already >= k\n\n        // Increase each element to make sure every subarray of size >= 3 contains an element >= k\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums[i] < k) {\n                // Calculate operations needed to increase current element to make subarray beautiful\n                ops += k - nums[i];\n                nums[i] = k;\n            }\n        }\n\n        return ops;\n    }\n};"
}