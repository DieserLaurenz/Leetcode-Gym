{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26508000,
    "question_id": "3178",
    "elapsed_time": 401,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707804873661,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 183,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1173879359",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function minIncrementOperations($nums, $k) {\n        $increments = 0;\n        for ($i = 0; $i < count($nums) - 2; $i++) {\n            $max = max($nums[$i], $nums[$i + 1], $nums[$i + 2]);\n            if ($max < $k) {\n                $increments += $k - $max;\n                $nums[$i + 2] = $k;\n            }\n        }\n        return $increments;\n    }\n}"
}