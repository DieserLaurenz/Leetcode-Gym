{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64552000,
    "question_id": "3178",
    "elapsed_time": 341,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707804768795,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 65,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1173877885",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minIncrementOperations(nums: number[], k: number): number {\n    let operations = 0;\n\n    // Sort the array to make it easier to find the minimum increments needed\n    nums.sort((a, b) => a - b);\n\n    for (let i = 0; i < nums.length - 2; i++) {\n        // For every triplet starting with i, check if the max value is less than k\n        if (nums[i + 2] < k) {\n            // Calculate increments needed to make the current maximum at least k\n            operations += k - nums[i + 2];\n            // Apply the increments to the maximum of the current triplet\n            nums[i + 2] = k;\n        }\n    }\n\n    return operations;\n};"
}