{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 206804000,
    "question_id": "3178",
    "elapsed_time": 1353,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707814370545,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 37,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173990723",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_increment_operations(nums :: [integer], k :: integer) :: integer\n  def min_increment_operations(nums, k) do\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce(%{}, fn {num, idx}, acc ->\n      max_needed = k - num\n      Map.update(acc, idx - max_needed, [idx], &[idx | &1])\n    end)\n    |> Enum.reduce(0, fn {_, indices}, acc ->\n      acc + Enum.count(indices) - 1\n    end)\n  end\nend"
}