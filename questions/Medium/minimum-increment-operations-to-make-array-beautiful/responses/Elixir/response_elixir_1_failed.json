{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 246008000,
    "question_id": "3178",
    "elapsed_time": 1016,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707814338381,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 31,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173990385",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_increment_operations(nums :: [integer], k :: integer) :: integer\n  def min_increment_operations(nums, k) do\n    max_diff = Enum.reduce(nums, {0, 0}, fn x, {global_max, local_max} ->\n      diff = k - x\n      new_local_max = if diff > local_max, do: diff, else: local_max\n      {max(global_max, new_local_max), new_local_max}\n    end)\n    |> elem(0)\n    max_diff\n  end\nend"
}