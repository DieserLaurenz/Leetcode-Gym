{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 130264000,
    "question_id": "3178",
    "elapsed_time": 5014,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[0,1,3,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707805780604,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1173891656",
    "input_formatted": "[0,1,3,3], 5",
    "input": "[0,1,3,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-increment-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let* ([n (length nums)]\n         [increments (make-vector n 0)]\n         [total 0])\n    (for ([i (in-range 2 n)])\n      (let* ([max-so-far (apply max (list (vector-ref increments (- i 2)) (vector-ref increments (- i 1)) (vector-ref increments i)))]\n             [required (max 0 (- k (+ max-so-far (list-ref nums i)) 1))])\n        (vector-set! increments i (+ (vector-ref increments i) required))\n        (set! total (+ total required))))\n    total))"
}