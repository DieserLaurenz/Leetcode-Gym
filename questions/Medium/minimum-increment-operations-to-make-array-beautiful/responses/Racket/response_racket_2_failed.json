{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 130480000,
    "question_id": "3178",
    "elapsed_time": 5018,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805823049,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 143,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1173892214",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-increment-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let ([n (length nums)])\n    (define (max-in-window start end)\n      (let loop ([i start] [max-val (list-ref nums start)])\n        (if (> i end)\n            max-val\n            (loop (+ i 1) (max max-val (list-ref nums i))))))\n    (define (required-increments)\n      (let loop ([i 0] [total-increments 0] [max-incs 0])\n        (if (>= i (- n 3))\n            total-increments\n            (let* ([window-max (max-in-window i (+ i 2))]\n                   [diff (- k window-max)]\n                   [incs (if (< diff 1) 0 diff)])\n              (loop (+ i 1) (+ total-increments incs) (max max-incs incs))))))\n    (required-increments)))"
}