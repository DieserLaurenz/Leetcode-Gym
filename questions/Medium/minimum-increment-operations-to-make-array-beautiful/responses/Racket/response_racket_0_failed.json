{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "take: contract violation",
    "full_runtime_error": "take: contract violation\n  expected: a list with at least 3 elements\n  given: '(2)\n  context...:\n   /usr/share/racket/collects/racket/list.rkt:158:2: loop\n   solution.rkt:1:0: min-increment-operations\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:23:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100168000,
    "question_id": "3178",
    "elapsed_time": 262,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805746853,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1173891286",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (min-increment-operations nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let loop ([nums nums] [ops 0])\n    (if (for/or ([i (in-range (sub1 (length nums)) -2 -1)])\n          (let* ([sublist (take (drop nums i) 3)]\n                 [max-val (apply max sublist)])\n            (>= max-val k)))\n        ops\n        (let* ([max-index (for/fold ([max-index 0] [max-value (first nums)])\n                              ([i (in-range 1 (length nums))]\n                               #:when (> (list-ref nums i) max-value))\n                              (values i (list-ref nums i)))]\n               [new-nums (for/list ([j (in-range (length nums))])\n                           (if (= j max-index)\n                               (+ (list-ref nums j) 1)\n                               (list-ref nums j)))]\n               [new-ops (+ ops 1)])\n          (loop new-nums new-ops)))))"
}