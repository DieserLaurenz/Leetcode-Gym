{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 233516000,
    "question_id": "3178",
    "elapsed_time": 1838,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805903801,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 58,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1173893340",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_increment_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_increment_operations(Nums, K) ->\n    MaxOps = lists:max([K - X || X <- Nums]),\n    CountLessThanK = length([X || X <- Nums, X < K]),\n    MaxOps * max(CountLessThanK - 2, 0)."
}