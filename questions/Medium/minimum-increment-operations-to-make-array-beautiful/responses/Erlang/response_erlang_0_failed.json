{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 238416000,
    "question_id": "3178",
    "elapsed_time": 1927,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805879659,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 25,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1173893020",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_increment_operations(Nums :: [integer()], K :: integer()) -> integer().\nmin_increment_operations(Nums, K) ->\n    Sorted = lists:sort(Nums),\n    N = length(Nums),\n    Ops = lists:foldl(fun(X, {Ops, Prev, I}) when I > 2, X < K ->\n                          Ops1 = Ops + K - X,\n                          {Ops1, K, I - 1};\n                      (_, Acc) ->\n                          Acc\n                      end, {0, 0, N}, Sorted),\n    element(1, Ops)."
}