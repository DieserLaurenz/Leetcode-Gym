{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24536000,
    "question_id": "3178",
    "elapsed_time": 901,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1708818683231,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185246033",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minIncrementOperations(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        n = len(nums)\n        max_ops = 0\n\n        for i in range(n):\n            if nums[i] >= k:\n                break\n            max_in_subarray = nums[i]\n            ops = 0\n            for j in range(i + 1, min(i + 3, n)):\n                if nums[j] < k:\n                    ops += k - nums[j] - 1\n                    max_in_subarray = max(max_in_subarray, k - 1)\n                else:\n                    max_in_subarray = max(max_in_subarray, nums[j])\n            if max_in_subarray < k:\n                ops += k - max_in_subarray - 1\n            max_ops = max(max_ops, ops)\n\n        return max_ops"
}