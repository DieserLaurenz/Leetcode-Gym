{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81408000,
    "question_id": "3178",
    "elapsed_time": 916,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805587143,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1173889163",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minIncrementOperations(nums: Array[Int], k: Int): Long = {\n        var ops = 0L\n        var max = Int.MinValue\n        for (i <- nums.indices) {\n            max = max max nums(i)\n            if (i >= 2) {\n                val need = (k - 1 - max).max(0)\n                ops += need\n                nums(i) += need\n                max = max max nums(i)\n            }\n            if (i > 0) max = max max nums(i - 1)\n            if (i > 1) max = nums(i) max nums(i - 1) max nums(i - 2)\n        }\n        ops\n    }\n}"
}