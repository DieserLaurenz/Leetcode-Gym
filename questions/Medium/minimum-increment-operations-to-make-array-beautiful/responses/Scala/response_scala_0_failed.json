{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79108000,
    "question_id": "3178",
    "elapsed_time": 1151,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[0,1,3,3]\n5",
    "expected_output": "2",
    "task_finish_time": 1707805534399,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 168,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1173888392",
    "input_formatted": "[0,1,3,3], 5",
    "input": "[0,1,3,3]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minIncrementOperations(nums: Array[Int], k: Int): Long = {\n        var count = 0L\n        for (i <- nums.indices) {\n            if (i == 0 || i == nums.length - 1) {\n                // No need to check end elements\n            } else {\n                val maxPrev = nums(i - 1) max nums(i) max nums(i + 1)\n                if (maxPrev < k) {\n                    count += (k - maxPrev)\n                    nums(i) += (k - maxPrev)\n                }\n            }\n        }\n        count\n    }\n}"
}