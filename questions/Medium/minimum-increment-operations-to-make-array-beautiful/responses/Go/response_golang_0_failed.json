{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9008000,
    "question_id": "3178",
    "elapsed_time": 97,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805301016,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 183,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1173885210",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minIncrementOperations(nums []int, k int) int64 {\n    var total int64 = 0\n    for i := 0; i < len(nums)-2; i++ {\n        maxVal := max(nums[i], max(nums[i+1], nums[i+2]))\n        if maxVal < k {\n            total += int64(k - maxVal)\n            nums[i+2] = k // Ensure the current subarray satisfies the condition\n        }\n    }\n    return total\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}