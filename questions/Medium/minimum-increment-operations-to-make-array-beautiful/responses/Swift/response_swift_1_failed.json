{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20708000,
    "question_id": "3178",
    "elapsed_time": 348,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805028601,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 157,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1173881485",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minIncrementOperations(_ nums: [Int], _ k: Int) -> Int {\n        var ops = 0\n        var maxInWindow = 0\n        var increments = Array(repeating: 0, count: nums.count)\n\n        for i in 0..<nums.count {\n            if i > 0 {\n                increments[i] += increments[i - 1]\n            }\n\n            let current = nums[i] + increments[i]\n            maxInWindow = max(maxInWindow, current)\n\n            if i >= 2 {\n                if maxInWindow < k {\n                    let diff = k - maxInWindow\n                    ops += diff\n                    increments[i] += diff\n                    maxInWindow = k\n                }\n                if nums[i - 2] + increments[i - 2] == maxInWindow {\n                    maxInWindow = max(nums[i - 1] + increments[i - 1], nums[i] + increments[i])\n                    for j in i - 1...i {\n                        maxInWindow = max(maxInWindow, nums[j] + increments[j])\n                    }\n                }\n            }\n        }\n        return ops\n    }\n}"
}