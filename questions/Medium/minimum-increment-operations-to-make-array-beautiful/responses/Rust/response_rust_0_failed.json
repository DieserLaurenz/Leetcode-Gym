{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3460000,
    "question_id": "3178",
    "elapsed_time": 41,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[2,3,0,0,2]\n4",
    "expected_output": "3",
    "task_finish_time": 1707805641602,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 115,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1173889910",
    "input_formatted": "[2,3,0,0,2], 4",
    "input": "[2,3,0,0,2]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_increment_operations(nums: Vec<i32>, k: i32) -> i64 {\n        let mut ops = 0i64;\n        let mut max = *nums.iter().max().unwrap();\n        if max >= k {\n            return ops;\n        }\n\n        let mut nums = nums;\n        nums.sort_unstable();\n\n        for i in (2..nums.len()).rev() {\n            if nums[i] >= k {\n                break;\n            }\n            let required = k - nums[i];\n            ops += required as i64;\n            nums[i - 2] += required;\n        }\n        ops\n    }\n}"
}