{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57008000,
    "question_id": "3178",
    "elapsed_time": 392,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[7,7,2,7]\n9",
    "expected_output": "2",
    "task_finish_time": 1707804588667,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 145,
    "total_testcases": 570,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1173875415",
    "input_formatted": "[7,7,2,7], 9",
    "input": "[7,7,2,7]\n9",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinIncrementOperations(int[] nums, int k) {\n        long operations = 0;\n        int maxInWindow = 0;\n        for (int i = 0; i < nums.Length; i++) {\n            if (i < 2) {\n                maxInWindow = Math.Max(maxInWindow, nums[i]);\n                continue;\n            }\n            maxInWindow = Math.Max(maxInWindow, nums[i]);\n            if (maxInWindow < k) {\n                operations += k - maxInWindow;\n                nums[i] += k - maxInWindow;\n                maxInWindow = k;\n            }\n            if (i >= 2) maxInWindow = Math.Max(nums[i], Math.Max(nums[i - 1], nums[i - 2]));\n        }\n        return operations;\n    }\n}"
}