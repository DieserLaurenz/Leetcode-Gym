{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "423 ms",
    "memory": 130212000,
    "question_id": "3231",
    "elapsed_time": 603,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707846103937,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 628,
    "total_testcases": 628,
    "runtime_percentile": 100,
    "status_memory": "130.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1174384894",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-added-coins coins target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let loop ((coins (sort coins <)) (current 1) (added 0))\n    (if (> current target)\n        added\n        (if (and (not (null? coins)) (<= (car coins) current))\n            (loop (cdr coins) (+ current (car coins)) added)\n            (loop coins (* 2 current) (+ 1 added)))))\n)"
}