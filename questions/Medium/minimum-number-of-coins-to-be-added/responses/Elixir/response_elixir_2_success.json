{
    "status_code": 10,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "728 ms",
    "memory": 164180000,
    "question_id": "3231",
    "elapsed_time": 884,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707855201555,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 628,
    "total_testcases": 628,
    "runtime_percentile": 100,
    "status_memory": "164.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Elixir",
    "submission_id": "1174509454",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_added_coins(coins :: [integer], target :: integer) :: integer\n  def minimum_added_coins(coins, target) do\n    coins = Enum.sort(coins)\n    add_coins(0, coins, target, 1)\n  end\n\n  defp add_coins(added, [], target, next_coin) when next_coin <= target do\n    add_coins(added + 1, [], target, next_coin * 2)\n  end\n  defp add_coins(added, [h | t], target, next_coin) when next_coin < h do\n    add_coins(added + 1, [h | t], target, next_coin * 2)\n  end\n  defp add_coins(added, [h | t], target, next_coin) when next_coin >= h do\n    if h < target do\n      add_coins(added, t, target, next_coin + h)\n    else\n      added\n    end\n  end\n  defp add_coins(added, _, _, _) do\n    added\n  end\nend"
}