{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 152564000,
    "question_id": "3231",
    "elapsed_time": 1898,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,4,10]\n19",
    "expected_output": "2",
    "task_finish_time": 1707855004180,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 22,
    "total_testcases": 628,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174507357",
    "input_formatted": "[1,4,10], 19",
    "input": "[1,4,10]\n19",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_added_coins(Coins :: [integer()], Target :: integer()) -> integer().\nminimum_added_coins(Coins, Target) ->\n    SortedCoins = lists:sort(Coins),\n    {Count, _Last} = lists:foldl(\n        fun(Coin, {Acc, Last}) when Coin =< Last + 1 -> \n                {Acc, Last + Coin};\n           (_, {Acc, Last}) -> \n                {Acc + 1, 2*Last + 1}\n        end,\n        {0, 0},\n        SortedCoins\n    ),\n    Total = lists:last([0|SortedCoins]),\n    if Total >= Target -> Count;\n       true -> Count + lists:foldl(fun(_, Acc) -> Acc + 1 end, 0, lists:seq(Total + 1, Target, Total*2 + 1))\n    end."
}