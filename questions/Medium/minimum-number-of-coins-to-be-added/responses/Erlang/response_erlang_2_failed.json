{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 6: exception error: function_clause",
    "full_runtime_error": "Line 6: exception error: function_clause\n[{solution,minimum_added_coins_helper,\n              [[],19,26,2],\n              [{file,\"solution.erl\"},{line,6}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,31}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,17}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,48}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 63024000,
    "question_id": "3231",
    "elapsed_time": 1426,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,4,10]\n19",
    "expected_output": "2",
    "task_finish_time": 1707855066815,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 628,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174508005",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec minimum_added_coins(Coins :: [integer()], Target :: integer()) -> integer().\nminimum_added_coins(Coins, Target) ->\n    SortedCoins = lists:usort(Coins),\n    minimum_added_coins_helper(SortedCoins, Target, 1, 0).\n\nminimum_added_coins_helper([], Target, Current, Count) when Current < Target ->\n    minimum_added_coins_helper([], Target, Current * 2, Count + 1);\nminimum_added_coins_helper([H|T], Target, Current, Count) when Current >= Target ->\n    Count;\nminimum_added_coins_helper([H|T], Target, Current, Count) when H > Current ->\n    minimum_added_coins_helper([H|T], Target, Current * 2, Count + 1);\nminimum_added_coins_helper([H|T], Target, Current, Count) when H =< Current ->\n    minimum_added_coins_helper(T, Target, Current + H, Count)."
}