{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 155752000,
    "question_id": "3231",
    "elapsed_time": 1812,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,1,1]\n20",
    "expected_output": "3",
    "task_finish_time": 1707855036444,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 546,
    "total_testcases": 628,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174507672",
    "input_formatted": "[1,1,1], 20",
    "input": "[1,1,1]\n20",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_added_coins(Coins :: [integer()], Target :: integer()) -> integer().\nminimum_added_coins(Coins, Target) ->\n    SortedCoins = lists:usort(Coins),\n    minimum_added_coins_helper(SortedCoins, Target, 1, 0).\n\nminimum_added_coins_helper(_Coins, Target, Next, Count) when Next > Target -> Count;\nminimum_added_coins_helper([H|T], Target, Next, Count) when H =< Next ->\n    minimum_added_coins_helper(T, Target, Next + H, Count);\nminimum_added_coins_helper(Coins, Target, Next, Count) ->\n    minimum_added_coins_helper(Coins, Target, Next * 2, Count + 1)."
}