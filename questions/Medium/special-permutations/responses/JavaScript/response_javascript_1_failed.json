{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57476000,
    "question_id": "2848",
    "elapsed_time": 527,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708186437520,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 189,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1178022631",
    "input_formatted": "[2,3,6]",
    "input": "[2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar specialPerm = function(nums) {\n    const mod = 1e9 + 7;\n    const n = nums.length;\n    const dp = Array.from({ length: 1 << n }, () => 0);\n    const fact = [1];\n    for (let i = 1; i <= n; i++) fact[i] = (fact[i - 1] * i) % mod;\n\n    for (let i = 0; i < n; i++) dp[1 << i] = 1; // Initialize dp for single elements\n\n    for (let mask = 1; mask < (1 << n); mask++) {\n        const bitsSet = countBits(mask);\n        if (bitsSet < 2) continue; // Skip masks with less than 2 bits set\n        for (let j = 0; j < n; j++) {\n            if (!(mask & (1 << j))) continue; // Ensure j is in the current mask\n            for (let k = 0; k < n; k++) {\n                if (j != k && (mask & (1 << k)) && (nums[j] % nums[k] === 0 || nums[k] % nums[j] === 0)) {\n                    dp[mask] += dp[mask ^ (1 << j)];\n                    dp[mask] %= mod;\n                }\n            }\n        }\n    }\n\n    let result = 0;\n    for (let mask = 1; mask < (1 << n); mask++) {\n        const bitsSet = countBits(mask);\n        if (bitsSet >= 2) {\n            result += dp[mask] * fact[bitsSet - 1];\n            result %= mod;\n        }\n    }\n\n    function countBits(x) {\n        let bits = 0;\n        while (x > 0) {\n            bits += x & 1;\n            x >>= 1;\n        }\n        return bits;\n    }\n\n    return result;\n};"
}