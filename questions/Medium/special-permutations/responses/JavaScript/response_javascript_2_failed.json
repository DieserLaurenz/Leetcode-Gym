{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56060000,
    "question_id": "2848",
    "elapsed_time": 245,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708186469667,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 166,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1178023144",
    "input_formatted": "[2,3,6]",
    "input": "[2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar specialPerm = function(nums) {\n    const mod = 1e9 + 7;\n    nums.sort((a, b) => a - b);\n    const n = nums.length;\n    const dp = new Array(1 << n).fill(0);\n    dp[0] = 1;\n\n    for (let mask = 1; mask < (1 << n); mask++) {\n        for (let i = 0; i < n; i++) {\n            if ((mask & (1 << i)) === 0) continue;\n            const prevMask = mask ^ (1 << i);\n            if (!dp[prevMask]) continue;\n            let valid = i === 0 ? true : false;\n            for (let j = 0; j < n; j++) {\n                if (mask & (1 << j)) {\n                    if (nums[i] % nums[j] === 0 || nums[j] % nums[i] === 0) {\n                        valid = true;\n                        break;\n                    }\n                }\n            }\n            if (valid) dp[mask] = (dp[mask] + dp[prevMask]) % mod;\n        }\n    }\n\n    return dp[(1 << n) - 1];\n};"
}