{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56192000,
    "question_id": "2848",
    "elapsed_time": 141,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708186398624,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 83,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1178021980",
    "input_formatted": "[2,3,6]",
    "input": "[2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar specialPerm = function(nums) {\n    const mod = 1e9 + 7;\n    const n = nums.length;\n    const dp = Array(1 << n).fill(0);\n    const valid = Array.from({ length: n }, () => new Array(n).fill(0));\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            if (nums[i] % nums[j] === 0 || nums[j] % nums[i] === 0) {\n                valid[i][j] = 1;\n            }\n        }\n    }\n\n    dp[0] = 1;\n    for (let mask = 1; mask < (1 << n); ++mask) {\n        for (let i = 0; i < n; ++i) {\n            if ((mask & (1 << i)) === 0) continue;\n            const prevMask = mask ^ (1 << i);\n            if (dp[prevMask] === 0) continue;\n            for (let j = 0; j < n; ++j) {\n                if (i !== j && (mask & (1 << j)) && valid[i][j]) {\n                    dp[mask] = (dp[mask] + dp[prevMask]) % mod;\n                    break;\n                }\n            }\n        }\n    }\n\n    return dp[(1 << n) - 1];\n};"
}