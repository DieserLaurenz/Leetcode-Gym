{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59432000,
    "question_id": "2848",
    "elapsed_time": 1401,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708195583558,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 158,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178158173",
    "input_formatted": "[2,3,6]",
    "input": "[2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec special_perm(Nums :: [integer()]) -> integer().\nspecial_perm(Nums) ->\n    Mod = 1000000007,\n    Sorted = lists:sort(Nums),\n    N = length(Nums),\n    DP = array:new([{size, 1 bsl N}, {default, 0}, {fixed, true}]),\n    \n    Count = fun Count(_, 0) -> 1;\n                Count(Pos, Mask) ->\n                    case array:get(Mask, DP) of\n                        0 ->\n                            Sum = lists:foldl(\n                                fun(I, Acc) ->\n                                    if\n                                        Mask band (1 bsl I) =:= 0 ->\n                                            Num = lists:nth(I + 1, Sorted),\n                                            Good = lists:any(\n                                                fun(J) ->\n                                                    (Mask band (1 bsl J) =/= 0) andalso\n                                                    ((Num rem lists:nth(J + 1, Sorted) == 0) orelse (lists:nth(J + 1, Sorted) rem Num == 0))\n                                                end,\n                                                lists:seq(0, N - 1)\n                                            ),\n                                            if\n                                                Pos == 1 orelse Good ->\n                                                    (Acc + Count(Pos - 1, Mask bor (1 bsl I))) rem Mod;\n                                                true ->\n                                                    Acc\n                                            end;\n                                        true ->\n                                            Acc\n                                    end\n                                end,\n                                0,\n                                lists:seq(0, N - 1)\n                            ),\n                            array:set(Mask, Sum, DP),\n                            Sum;\n                        Sum -> Sum\n                    end\n            end,\n    \n    lists:foldl(fun(_, Acc) -> (Count(N, 0) + Acc) rem Mod end, 0, lists:seq(1, N))."
}