{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "383 ms",
    "memory": 7204000,
    "question_id": "2848",
    "elapsed_time": 402,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708186280178,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 100,
    "status_memory": "7.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "C",
    "submission_id": "1178020135",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint mod = 1e9 + 7;\n\nlong long dp[1 << 14][14];\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\nint specialPerm(int* nums, int numsSize) {\n    for (int i = 0; i < (1 << numsSize); ++i)\n        for (int j = 0; j < numsSize; ++j)\n            dp[i][j] = 0;\n\n    for (int i = 0; i < numsSize; ++i)\n        dp[1 << i][i] = 1;\n\n    for (int mask = 0; mask < (1 << numsSize); ++mask) {\n        for (int i = 0; i < numsSize; ++i) {\n            if (mask & (1 << i)) {\n                for (int j = 0; j < numsSize; ++j) {\n                    if (!(mask & (1 << j)) && (nums[i] % nums[j] == 0 || nums[j] % nums[i] == 0)) {\n                        dp[mask | (1 << j)][j] = (dp[mask | (1 << j)][j] + dp[mask][i]) % mod;\n                    }\n                }\n            }\n        }\n    }\n\n    long long ans = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        ans = (ans + dp[(1 << numsSize) - 1][i]) % mod;\n    }\n\n    return (int)ans;\n}"
}