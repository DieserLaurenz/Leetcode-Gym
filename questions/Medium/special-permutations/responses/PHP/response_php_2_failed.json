{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20004000,
    "question_id": "2848",
    "elapsed_time": 1234,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[20,100,50,5,10,70,7]",
    "expected_output": "48",
    "task_finish_time": 1708186768030,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 388,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1178027764",
    "input_formatted": "[20,100,50,5,10,70,7]",
    "input": "[20,100,50,5,10,70,7]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function specialPerm($nums) {\n        $n = count($nums);\n        $mod = 1000000007;\n\n        // Precalculate factorials for later use\n        $fact = [1];\n        for ($i = 1; $i <= $n; $i++) {\n            $fact[$i] = ($fact[$i - 1] * $i) % $mod;\n        }\n\n        // Function to count how many numbers a given number is divisible by or divides in the array\n        $countDivisible = function($x, $nums) {\n            $count = 0;\n            foreach ($nums as $num) {\n                if ($x % $num == 0 || $num % $x == 0) {\n                    $count++;\n                }\n            }\n            return $count;\n        };\n\n        // Dynamic programming array\n        $dp = array_fill(0, 1 << $n, 0);\n        $dp[0] = 1;\n\n        for ($mask = 1; $mask < (1 << $n); $mask++) {\n            $pos = bincount($mask);\n            for ($i = 0; $i < $n; $i++) {\n                if ($mask & (1 << $i)) { // Check if the ith bit is set in the mask\n                    $prevMask = $mask ^ (1 << $i);\n                    if ($dp[$prevMask] == 0) continue;\n\n                    $divCount = $countDivisible($nums[$i], $nums);\n                    if ($divCount >= $pos) {\n                        $dp[$mask] = ($dp[$mask] + $dp[$prevMask]) % $mod;\n                    }\n                }\n            }\n        }\n\n        return $dp[(1 << $n) - 1];\n    }\n}\n\n// Helper function to count the number of set bits (1s) in the binary representation of a number\nfunction bincount($n) {\n    $count = 0;\n    while ($n) {\n        $n &= ($n - 1);\n        $count++;\n    }\n    return $count;\n}"
}