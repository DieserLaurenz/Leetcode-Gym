{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20360000,
    "question_id": "2848",
    "elapsed_time": 2796,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708186686532,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1178026446",
    "input_formatted": "[2,3,6]",
    "input": "[2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function specialPerm($nums) {\n        $mod = 1e9 + 7;\n        $n = count($nums);\n        sort($nums);\n        $dp = array_fill(0, 1 << $n, 0);\n        $dp[0] = 1;\n        for ($mask = 1; $mask < (1 << $n); $mask++) {\n            for ($i = 0; $i < $n; $i++) {\n                if ($mask & (1 << $i)) {\n                    $prevMask = $mask ^ (1 << $i);\n                    if ($prevMask == 0) {\n                        $dp[$mask] = ($dp[$mask] + 1) % $mod;\n                        continue;\n                    }\n                    for ($j = 0; $j < $n; $j++) {\n                        if ($prevMask & (1 << $j)) {\n                            if ($nums[$i] % $nums[$j] == 0 || $nums[$j] % $nums[$i] == 0) {\n                                $dp[$mask] = ($dp[$mask] + $dp[$prevMask]) % $mod;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return $dp[(1 << $n) - 1];\n    }\n}"
}