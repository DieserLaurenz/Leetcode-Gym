{
    "status_code": 15,
    "lang": "ruby",
    "run_success": false,
    "runtime_error": "Line 12: undefined method `bit_count' for 1:Integer (NoMethodError) in solution.rb (block in special_perm)",
    "full_runtime_error": "Line 12: undefined method `bit_count' for 1:Integer (NoMethodError) in solution.rb (block in special_perm)\n    count = mask.bit_count\n                ^^^^^^^^^^\nDid you mean?  bit_length\nLine 11 in solution.rb (each)\nLine 11 in solution.rb (special_perm)\nLine 34 in solution.rb (__driver_helper__)\nLine 47 in solution.rb (block in _driver)\nLine 44 in solution.rb (each)\nLine 44 in solution.rb (each_slice)\nLine 44 in solution.rb (_driver)\nLine 59 in solution.rb (<main>)",
    "status_runtime": "N/A",
    "memory": 211268000,
    "question_id": "2848",
    "elapsed_time": 221,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708187070530,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1178032509",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef special_perm(nums)\n  mod = 10**9 + 7\n  n = nums.size\n  dp = Array.new(1 << n, 0)\n  dp[0] = 1\n\n  nums.sort!\n  \n  (1...(1 << n)).each do |mask|\n    count = mask.bit_count\n    nums.each_with_index do |num, i|\n      next if (mask & (1 << i)).zero?\n      prev_mask = mask ^ (1 << i)\n      next if dp[prev_mask].zero?\n      \n      nums.each_with_index do |prev_num, j|\n        next if (prev_mask & (1 << j)).zero?\n        if num % prev_num == 0 || prev_num % num == 0\n          dp[mask] = (dp[mask] + dp[prev_mask]) % mod\n          break\n        end\n      end\n    end\n  end\n\n  dp.last\nend"
}