{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "7712 ms",
    "memory": 21996000,
    "question_id": "2848",
    "elapsed_time": 7929,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708849855905,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 5.0,
    "status_memory": "22 MB",
    "memory_percentile": 88.75,
    "pretty_lang": "Python3",
    "submission_id": "1185604640",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def specialPerm(self, nums: List[int]) -> int:\n        n = len(nums)\n        mod = 10**9 + 7\n        \n        def check(x, y):\n            return x % y == 0 or y % x == 0\n        \n        # dp[mask][i]: number of special permutations ending with nums[i], represented by mask\n        dp = [[0] * n for _ in range(1 << n)]\n        \n        for i in range(n):\n            dp[1 << i][i] = 1\n            \n        for mask in range(1 << n):\n            for i in range(n):\n                if mask & (1 << i):\n                    for j in range(n):\n                        if not mask & (1 << j) and check(nums[i], nums[j]):\n                            dp[mask | (1 << j)][j] += dp[mask][i]\n                            dp[mask | (1 << j)][j] %= mod\n                            \n        return sum(dp[-1]) % mod"
}