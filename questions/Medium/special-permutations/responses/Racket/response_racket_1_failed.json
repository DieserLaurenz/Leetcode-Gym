{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101136000,
    "question_id": "2848",
    "elapsed_time": 231,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708187367545,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 80,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178036964",
    "input_formatted": "[2,3,6]",
    "input": "[2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (special-perm nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (fact n)\n    (if (= n 0) 1 (* n (fact (- n 1)))))\n  \n  (define (count-multiples nums num)\n    (foldl (lambda (x acc) (if (= (modulo x num) 0) (+ acc 1) acc)) 0 nums))\n  \n  (define (helper nums)\n    (if (null? nums) 1\n        (let* ((num (car nums))\n               (rest (cdr nums))\n               (multiples (count-multiples rest num)))\n          (modulo (* (fact multiples) (helper rest)) (+ 7 (expt 10 9))))))\n  \n  (helper (sort nums <)))"
}