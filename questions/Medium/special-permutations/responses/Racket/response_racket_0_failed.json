{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126280000,
    "question_id": "2848",
    "elapsed_time": 5011,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708187333166,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178036436",
    "input_formatted": "[2,3,6]",
    "input": "[2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (special-perm nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define mod-val 1000000007)\n\n  (define (gcd a b)\n    (if (= b 0) a (gcd b (modulo a b))))\n\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n\n  (define (can-place? a b)\n    (or (= (modulo a b) 0) (= (modulo b a) 0)))\n\n  (define (dfs nums current visited count)\n    (if (= (length current) (length nums))\n        (set! count (modulo (+ count 1) mod-val))\n        (for ([i (length nums)])\n             (when (and (not (vector-ref visited i))\n                        (or (null? current)\n                            (can-place? (list-ref nums i) (car current))))\n               (vector-set! visited i #t)\n               (dfs nums (cons (list-ref nums i) current) visited count)\n               (vector-set! visited i #f))))\n    count)\n\n  (define (calculate-special-perms nums)\n    (let ([visited (make-vector (length nums) #f)])\n      (dfs nums '() visited 0)))\n\n  (calculate-special-perms nums))"
}