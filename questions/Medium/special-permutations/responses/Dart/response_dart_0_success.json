{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "753 ms",
    "memory": 189860000,
    "question_id": "2848",
    "elapsed_time": 969,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708186954934,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 100,
    "status_memory": "189.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Dart",
    "submission_id": "1178030699",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  int specialPerm(List<int> nums) {\n    final int mod = 1000000007;\n    int n = nums.length;\n    List<List<int>> dp = List.generate(1 << n, (_) => List.filled(n, 0));\n    for (int i = 0; i < n; i++) dp[1 << i][i] = 1;\n\n    for (int mask = 0; mask < (1 << n); mask++) {\n      for (int last = 0; last < n; last++) {\n        if ((mask & (1 << last)) == 0) continue;\n        int prevMask = mask ^ (1 << last);\n        for (int prev = 0; prev < n; prev++) {\n          if ((prevMask & (1 << prev)) == 0) continue;\n          if (nums[last] % nums[prev] == 0 || nums[prev] % nums[last] == 0) {\n            dp[mask][last] = (dp[mask][last] + dp[prevMask][prev]) % mod;\n          }\n        }\n      }\n    }\n\n    int ans = 0;\n    for (int i = 0; i < n; i++) {\n      ans = (ans + dp[(1 << n) - 1][i]) % mod;\n    }\n    return ans;\n  }\n}"
}