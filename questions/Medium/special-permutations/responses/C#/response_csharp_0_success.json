{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "330 ms",
    "memory": 53064000,
    "question_id": "2848",
    "elapsed_time": 387,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708186340504,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 100,
    "status_memory": "53.1 MB",
    "memory_percentile": 62.5,
    "pretty_lang": "C#",
    "submission_id": "1178021057",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int SpecialPerm(int[] nums) {\n        int n = nums.Length;\n        long mod = 1000000007;\n        long[,] dp = new long[1 << n, n];\n        for (int i = 0; i < n; ++i) {\n            dp[1 << i, i] = 1;\n        }\n        for (int mask = 0; mask < (1 << n); ++mask) {\n            for (int i = 0; i < n; ++i) {\n                if ((mask & (1 << i)) != 0) {\n                    for (int j = 0; j < n; ++j) {\n                        if ((mask & (1 << j)) == 0 && (nums[i] % nums[j] == 0 || nums[j] % nums[i] == 0)) {\n                            dp[mask | (1 << j), j] = (dp[mask | (1 << j), j] + dp[mask, i]) % mod;\n                        }\n                    }\n                }\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; ++i) {\n            ans = (ans + dp[(1 << n) - 1, i]) % mod;\n        }\n        return (int)ans;\n    }\n}"
}