{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "235 ms",
    "memory": 2672000,
    "question_id": "2848",
    "elapsed_time": 252,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708187268402,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 33.33339999999999,
    "status_memory": "2.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "Rust",
    "submission_id": "1178035554",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn special_perm(nums: Vec<i32>) -> i32 {\n        let modu = 1_000_000_007;\n        let n = nums.len();\n        let mut dp = vec![vec![0; 1 << n]; n];\n        let mut can_follow = vec![vec![false; n]; n];\n\n        for i in 0..n {\n            for j in 0..n {\n                if nums[i] % nums[j] == 0 || nums[j] % nums[i] == 0 {\n                    can_follow[i][j] = true;\n                }\n            }\n        }\n\n        for i in 0..n {\n            dp[i][1 << i] = 1;\n        }\n\n        for mask in 0..(1 << n) {\n            for i in 0..n {\n                if mask & (1 << i) != 0 {\n                    for j in 0..n {\n                        if mask & (1 << j) == 0 && can_follow[i][j] {\n                            dp[j][mask | (1 << j)] = (dp[j][mask | (1 << j)] + dp[i][mask]) % modu;\n                        }\n                    }\n                }\n            }\n        }\n\n        let mut ans = 0;\n        for i in 0..n {\n            ans = (ans + dp[i][(1 << n) - 1]) % modu;\n        }\n        ans\n    }\n}"
}