{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "306 ms",
    "memory": 132944000,
    "question_id": "2848",
    "elapsed_time": 347,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708186156665,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 39.28749999999982,
    "status_memory": "132.9 MB",
    "memory_percentile": 34.32639999999989,
    "pretty_lang": "C++",
    "submission_id": "1178018182",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\n    const int MOD = 1e9 + 7;\n    \n    int countSpecialPerms(vector<int>& nums, int used, int last, vector<vector<int>>& memo) {\n        if (used == (1 << nums.size()) - 1) return 1;\n        if (memo[used][last] != -1) return memo[used][last];\n        \n        int count = 0;\n        for (int i = 0; i < nums.size(); ++i) {\n            if (!(used & (1 << i)) && (last == nums.size() || nums[i] % nums[last] == 0 || nums[last] % nums[i] == 0)) {\n                count = (count + countSpecialPerms(nums, used | (1 << i), i, memo)) % MOD;\n            }\n        }\n        memo[used][last] = count;\n        return count;\n    }\n    \npublic:\n    int specialPerm(vector<int>& nums) {\n        vector<vector<int>> memo(1 << nums.size(), vector<int>(nums.size() + 1, -1));\n        return countSpecialPerms(nums, 0, nums.size(), memo);\n    }\n};"
}