{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "475 ms",
    "memory": 69704000,
    "question_id": "2848",
    "elapsed_time": 585,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708186626659,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 100,
    "status_memory": "69.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "TypeScript",
    "submission_id": "1178025524",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function specialPerm(nums: number[]): number {\n    const n = nums.length, mod = 1e9 + 7;\n    nums.sort((a, b) => a - b);\n    const dp: number[][] = Array.from({ length: n }, () => Array(1 << n).fill(0));\n    const compatible: boolean[][] = Array.from({ length: n }, () => Array(n).fill(false));\n\n    // Initialize compatibility based on divisibility\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (nums[i] % nums[j] === 0 || nums[j] % nums[i] === 0) {\n                compatible[i][j] = true;\n            }\n        }\n    }\n\n    // Base cases: single elements\n    for (let i = 0; i < n; i++) dp[i][1 << i] = 1;\n\n    // Fill dp table\n    for (let mask = 1; mask < (1 << n); mask++) {\n        for (let i = 0; i < n; i++) {\n            if ((mask & (1 << i)) === 0) continue; // Skip if i is not in the subset represented by mask\n            for (let j = 0; j < n; j++) {\n                if (i !== j && (mask & (1 << j)) !== 0 && compatible[i][j]) {\n                    dp[i][mask] += dp[j][mask ^ (1 << i)];\n                    dp[i][mask] %= mod;\n                }\n            }\n        }\n    }\n\n    let result = 0;\n    // Sum up all valid permutations ending with each element\n    for (let i = 0; i < n; i++) {\n        result += dp[i][(1 << n) - 1];\n        result %= mod;\n    }\n\n    return result;\n}"
}