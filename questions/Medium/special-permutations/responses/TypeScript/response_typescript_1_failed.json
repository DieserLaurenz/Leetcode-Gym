{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57944000,
    "question_id": "2848",
    "elapsed_time": 495,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "2",
    "task_finish_time": 1708186570931,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 590,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1178024727",
    "input_formatted": "[2,3,6]",
    "input": "[2,3,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function specialPerm(nums: number[]): number {\n    const mod = 1e9 + 7;\n    const n = nums.length;\n    nums.sort((a, b) => a - b);\n\n    const gcd = (a: number, b: number): number => {\n        while (b !== 0) [a, b] = [b, a % b];\n        return a;\n    };\n\n    const dp = Array.from({ length: 1 << n }, () => 0);\n    const count = Array.from({ length: n }, () => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (gcd(nums[i], nums[j]) === 1) {\n                count[i][j] = 1;\n            }\n        }\n    }\n\n    dp[0] = 1;\n    for (let mask = 1; mask < (1 << n); mask++) {\n        for (let i = 0; i < n; i++) {\n            if ((mask & (1 << i)) === 0) continue;\n            const prevMask = mask ^ (1 << i);\n            if (prevMask === 0) {\n                dp[mask] = (dp[mask] + 1) % mod;\n                continue;\n            }\n            for (let j = 0; j < n; j++) {\n                if ((prevMask & (1 << j)) !== 0 && count[i][j] === 1) {\n                    dp[mask] = (dp[mask] + dp[prevMask]) % mod;\n                }\n            }\n        }\n    }\n\n    return dp[(1 << n) - 1];\n}"
}