{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "498 ms",
    "memory": 40600000,
    "question_id": "2848",
    "elapsed_time": 545,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708186887399,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 100,
    "status_memory": "40.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "Kotlin",
    "submission_id": "1178029615",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun specialPerm(nums: IntArray): Int {\n        val mod = 1000000007\n        val n = nums.size\n        val dp = Array(1 shl n) { IntArray(n) }\n        \n        for (i in 0 until n) dp[1 shl i][i] = 1\n        \n        for (mask in 0 until (1 shl n)) {\n            for (j in 0 until n) {\n                if (mask and (1 shl j) != 0) {\n                    for (k in 0 until n) {\n                        if (mask and (1 shl k) == 0 && (nums[j] % nums[k] == 0 || nums[k] % nums[j] == 0)) {\n                            dp[mask or (1 shl k)][k] = (dp[mask or (1 shl k)][k] + dp[mask][j]) % mod\n                        }\n                    }\n                }\n            }\n        }\n        \n        var ans = 0\n        for (i in 0 until n) {\n            ans = (ans + dp[(1 shl n) - 1][i]) % mod\n        }\n        return ans\n    }\n}"
}