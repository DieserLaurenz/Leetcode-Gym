{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "326 ms",
    "memory": 7668000,
    "question_id": "2848",
    "elapsed_time": 344,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708187012162,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 590,
    "total_testcases": 590,
    "runtime_percentile": 84.6154,
    "status_memory": "7.7 MB",
    "memory_percentile": 76.92309999999999,
    "pretty_lang": "Go",
    "submission_id": "1178031598",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func specialPerm(nums []int) int {\n    n := len(nums)\n    mod := 1000000007\n    dp := make([][]int, 1<<n)\n    for i := range dp {\n        dp[i] = make([]int, n)\n    }\n    for i := 0; i < n; i++ {\n        dp[1<<i][i] = 1\n    }\n    for mask := 0; mask < (1 << n); mask++ {\n        for last := 0; last < n; last++ {\n            if mask&(1<<last) == 0 {\n                continue\n            }\n            for next := 0; next < n; next++ {\n                if mask&(1<<next) == 0 && (nums[last]%nums[next] == 0 || nums[next]%nums[last] == 0) {\n                    dp[mask|(1<<next)][next] = (dp[mask|(1<<next)][next] + dp[mask][last]) % mod\n                }\n            }\n        }\n    }\n    result := 0\n    for i := 0; i < n; i++ {\n        result = (result + dp[(1<<n)-1][i]) % mod\n    }\n    return result\n}"
}