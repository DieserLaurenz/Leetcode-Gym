{
    "acRate": 88.23049553067777,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2807",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Insert Greatest Common Divisors in Linked List",
    "titleSlug": "insert-greatest-common-divisors-in-linked-list",
    "topicTags": [
        {
            "name": "Linked List",
            "id": "VG9waWNUYWdOb2RlOjc=",
            "slug": "linked-list"
        },
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Number Theory",
            "id": "VG9waWNUYWdOb2RlOjYxMDY3",
            "slug": "number-theory"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     ListNode *next;  *     ListNode() : val(0), next(nullptr) {}  *     ListNode(int x) : val(x), next(nullptr) {}  *     ListNode(int x, ListNode *next) : val(x), next(next) {}  * };  */ class Solution { public:     ListNode* insertGreatestCommonDivisors(ListNode* head) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "/**  * Definition for singly-linked list.  * public class ListNode {  *     int val;  *     ListNode next;  *     ListNode() {}  *     ListNode(int val) { this.val = val; }  *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }  * }  */ class Solution {     public ListNode insertGreatestCommonDivisors(ListNode head) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "# Definition for singly-linked list. # class ListNode(object): #     def __init__(self, val=0, next=None): #         self.val = val #         self.next = next class Solution(object):     def insertGreatestCommonDivisors(self, head):         \"\"\"         :type head: Optional[ListNode]         :rtype: Optional[ListNode]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "# Definition for singly-linked list. # class ListNode: #     def __init__(self, val=0, next=None): #         self.val = val #         self.next = next class Solution:     def insertGreatestCommonDivisors(self, head: Optional[ListNode]) -> Optional[ListNode]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Definition for singly-linked list.  * struct ListNode {  *     int val;  *     struct ListNode *next;  * };  */ struct ListNode* insertGreatestCommonDivisors(struct ListNode* head){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "/**  * Definition for singly-linked list.  * public class ListNode {  *     public int val;  *     public ListNode next;  *     public ListNode(int val=0, ListNode next=null) {  *         this.val = val;  *         this.next = next;  *     }  * }  */ public class Solution {     public ListNode InsertGreatestCommonDivisors(ListNode head) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * Definition for singly-linked list.  * function ListNode(val, next) {  *     this.val = (val===undefined ? 0 : val)  *     this.next = (next===undefined ? null : next)  * }  */ /**  * @param {ListNode} head  * @return {ListNode}  */ var insertGreatestCommonDivisors = function(head) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "/**  * Definition for singly-linked list.  * class ListNode {  *     val: number  *     next: ListNode | null  *     constructor(val?: number, next?: ListNode | null) {  *         this.val = (val===undefined ? 0 : val)  *         this.next = (next===undefined ? null : next)  *     }  * }  */  function insertGreatestCommonDivisors(head: ListNode | null): ListNode | null {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "/**  * Definition for a singly-linked list.  * class ListNode {  *     public $val = 0;  *     public $next = null;  *     function __construct($val = 0, $next = null) {  *         $this->val = $val;  *         $this->next = $next;  *     }  * }  */ class Solution {      /**      * @param ListNode $head      * @return ListNode      */     function insertGreatestCommonDivisors($head) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "/**  * Definition for singly-linked list.  * public class ListNode {  *     public var val: Int  *     public var next: ListNode?  *     public init() { self.val = 0; self.next = nil; }  *     public init(_ val: Int) { self.val = val; self.next = nil; }  *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }  * }  */ class Solution {     func insertGreatestCommonDivisors(_ head: ListNode?) -> ListNode? {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "/**  * Example:  * var li = ListNode(5)  * var v = li.`val`  * Definition for singly-linked list.  * class ListNode(var `val`: Int) {  *     var next: ListNode? = null  * }  */ class Solution {     fun insertGreatestCommonDivisors(head: ListNode?): ListNode? {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "/**  * Definition for singly-linked list.  * class ListNode {  *   int val;  *   ListNode? next;  *   ListNode([this.val = 0, this.next]);  * }  */ class Solution {   ListNode? insertGreatestCommonDivisors(ListNode? head) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "/**  * Definition for singly-linked list.  * type ListNode struct {  *     Val int  *     Next *ListNode  * }  */ func insertGreatestCommonDivisors(head *ListNode) *ListNode {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# Definition for singly-linked list. # class ListNode #     attr_accessor :val, :next #     def initialize(val = 0, _next = nil) #         @val = val #         @next = _next #     end # end # @param {ListNode} head # @return {ListNode} def insert_greatest_common_divisors(head)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "/**  * Definition for singly-linked list.  * class ListNode(_x: Int = 0, _next: ListNode = null) {  *   var next: ListNode = _next  *   var x: Int = _x  * }  */ object Solution {     def insertGreatestCommonDivisors(head: ListNode): ListNode = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "// Definition for singly-linked list. // #[derive(PartialEq, Eq, Clone, Debug)] // pub struct ListNode { //   pub val: i32, //   pub next: Option<Box<ListNode>> // } //  // impl ListNode { //   #[inline] //   fn new(val: i32) -> Self { //     ListNode { //       next: None, //       val //     } //   } // } impl Solution {     pub fn insert_greatest_common_divisors(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "; Definition for singly-linked list: #|  ; val : integer? ; next : (or/c list-node? #f) (struct list-node   (val next) #:mutable #:transparent)  ; constructor (define (make-list-node [val 0])   (list-node val #f))  |#  (define/contract (insert-greatest-common-divisors head)   (-> (or/c list-node? #f) (or/c list-node? #f))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "%% Definition for singly-linked list. %% %% -record(list_node, {val = 0 :: integer(), %%                     next = null :: 'null' | #list_node{}}).  -spec insert_greatest_common_divisors(Head :: #list_node{} | null) -> #list_node{} | null. insert_greatest_common_divisors(Head) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "# Definition for singly-linked list. # # defmodule ListNode do #   @type t :: %__MODULE__{ #           val: integer, #           next: ListNode.t() | nil #         } #   defstruct val: 0, next: nil # end  defmodule Solution do   @spec insert_greatest_common_divisors(head :: ListNode.t | nil) :: ListNode.t | nil   def insert_greatest_common_divisors(head) do    end end"
        }
    ],
    "content": "Given the head of a linked list head, in which each node contains an integer value. Between every pair of adjacent nodes, insert a new node with a value equal to the greatest common divisor of them. Return the linked list after insertion. The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.  Example 1:   Input: head = [18,6,10,3] Output: [18,6,6,2,10,1,3] Explanation: The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes (nodes in blue are the inserted nodes). - We insert the greatest common divisor of 18 and 6 = 6 between the 1st and the 2nd nodes. - We insert the greatest common divisor of 6 and 10 = 2 between the 2nd and the 3rd nodes. - We insert the greatest common divisor of 10 and 3 = 1 between the 3rd and the 4th nodes. There are no more adjacent nodes, so we return the linked list.  Example 2:   Input: head = [7] Output: [7] Explanation: The 1st diagram denotes the initial linked list and the 2nd diagram denotes the linked list after inserting the new nodes. There are no pairs of adjacent nodes, so we return the initial linked list.   Constraints:  The number of nodes in the list is in the range [1, 5000]. 1 <= Node.val <= 1000  "
}