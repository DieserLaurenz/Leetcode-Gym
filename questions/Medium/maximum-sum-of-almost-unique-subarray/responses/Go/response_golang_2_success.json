{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "76 ms",
    "memory": 7936000,
    "question_id": "2954",
    "elapsed_time": 92,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707669617398,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 767,
    "total_testcases": 767,
    "runtime_percentile": 81.81819999999999,
    "status_memory": "7.9 MB",
    "memory_percentile": 9.091,
    "pretty_lang": "Go",
    "submission_id": "1172441075",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func maxSum(nums []int, m int, k int) int64 {\n    maxSum := int64(0)\n    windowSum := int64(0)\n    freq := make(map[int]int)\n    distinct := 0\n\n    for i := 0; i < len(nums); i++ {\n        // Add the current element to the window\n        if freq[nums[i]] == 0 {\n            distinct++\n        }\n        freq[nums[i]]++\n        windowSum += int64(nums[i])\n\n        // If the window size exceeds k, slide the window\n        if i >= k {\n            removed := nums[i-k]\n            freq[removed]--\n            if freq[removed] == 0 {\n                distinct--\n            }\n            windowSum -= int64(removed)\n        }\n\n        // If we have a window of size k, check if it meets the criteria\n        if i >= k-1 && distinct >= m {\n            maxSum = max(maxSum, windowSum)\n        }\n    }\n\n    return maxSum\n}\n\nfunc max(a, b int64) int64 {\n    if a > b {\n        return a\n    }\n    return b\n}"
}