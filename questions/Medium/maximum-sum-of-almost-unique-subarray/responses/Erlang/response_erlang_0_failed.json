{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 3: exception error: function_clause",
    "full_runtime_error": "Line 3: exception error: function_clause\n[{solution,'-max_sum/3-fun-0-',\n              [#Fun<solution.0.93189031>,[3,1,7],3,4],\n              [{file,\"solution.erl\"},{line,3}]},\n {solution,'-max_sum/3-fun-0-',4,[{file,\"solution.erl\"},{line,7}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,31}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,15}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,48}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 62500000,
    "question_id": "2954",
    "elapsed_time": 1513,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,6,7,3,1,7]\n3\n4",
    "expected_output": "18",
    "task_finish_time": 1707670400991,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 767,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1172451625",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec max_sum(Nums :: [integer()], M :: integer(), K :: integer()) -> integer().\nmax_sum(Nums, M, K) ->\n    MaxSum = fun(MaxSum, [_|_] = Nums, M, K) when length(Nums) >= K ->\n                Subarray = lists:sublist(Nums, K),\n                UniqueCount = length(lists:usort(Subarray)),\n                Sum = lists:sum(Subarray),\n                NextSum = MaxSum(MaxSum, tl(Nums), M, K),\n                if UniqueCount >= M -> max(Sum, NextSum); true -> NextSum end;\n             (_, [], _, _) -> 0\n    end,\n    MaxSum(MaxSum, Nums, M, K)."
}