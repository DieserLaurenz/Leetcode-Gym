{
    "status_code": 15,
    "lang": "csharp",
    "run_success": false,
    "runtime_error": "Out of memory.",
    "full_runtime_error": "Out of memory.",
    "status_runtime": "N/A",
    "memory": 41740000,
    "question_id": "2954",
    "elapsed_time": 181,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,6,7,3,1,7]\n3\n4",
    "expected_output": "18",
    "task_finish_time": 1707659821744,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 767,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1172328124",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaxSum(IList<int> nums, int m, int k) {\n        long maxSum = 0;\n        int[] freq = new int[1000000000]; // Frequency array to hold the count of each number\n        int distinct = 0; // To track the number of distinct elements\n        long currentSum = 0; // To keep track of the current sum of the subarray\n\n        // Initialize the first window\n        for (int i = 0; i < k; i++) {\n            if (freq[nums[i]] == 0) distinct++;\n            freq[nums[i]]++;\n            currentSum += nums[i];\n        }\n        if (distinct >= m) maxSum = Math.Max(maxSum, currentSum);\n\n        // Slide the window\n        for (int i = k; i < nums.Count; i++) {\n            // Remove the first element of the previous window\n            if (freq[nums[i - k]] == 1) distinct--;\n            freq[nums[i - k]]--;\n            currentSum -= nums[i - k];\n\n            // Add the new element to the current window\n            if (freq[nums[i]] == 0) distinct++;\n            freq[nums[i]]++;\n            currentSum += nums[i];\n\n            // Update maxSum if conditions are met\n            if (distinct >= m) maxSum = Math.Max(maxSum, currentSum);\n        }\n\n        return maxSum;\n    }\n}"
}