{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 8: ** (Enum.EmptyError) empty error",
    "full_runtime_error": "Line 8: ** (Enum.EmptyError) empty error\n    (elixir 1.15.7) lib/enum.ex:1894: anonymous fn/0 in Enum.max/1\n    solution.ex:8: Solution.max_sum/3\n    solution.ex:34: Driver.consume_test_cases/2\n    solution.ex:18: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 75996000,
    "question_id": "2954",
    "elapsed_time": 529,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1,2,1,2,1]\n3\n3",
    "expected_output": "0",
    "task_finish_time": 1707670566251,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 767,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1172453902",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_sum(nums :: [integer], m :: integer, k :: integer) :: integer\n  def max_sum(nums, m, k) do\n    nums\n    |> Enum.chunk_every(k, 1, :discard)\n    |> Enum.filter(fn chunk -> Enum.uniq(chunk) |> length() >= m end)\n    |> Enum.map(&Enum.sum/1)\n    |> Enum.max()\n    |> case do\n      nil -> 0\n      max_sum -> max_sum\n    end\n  end\nend"
}