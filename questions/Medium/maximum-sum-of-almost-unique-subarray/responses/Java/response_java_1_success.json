{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "32 ms",
    "memory": 49984000,
    "display_runtime": "32",
    "question_id": "2954",
    "elapsed_time": 393,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707659458814,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 767,
    "total_testcases": 767,
    "runtime_percentile": 27.607100000000013,
    "status_memory": "50 MB",
    "memory_percentile": 9.815499999999975,
    "pretty_lang": "Java",
    "submission_id": "1172324160",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long maxSum(List<Integer> nums, int m, int k) {\n        long maxSum = 0;\n        Map<Integer, Integer> freq = new HashMap<>();\n        int distinctCount = 0;\n        long currentSum = 0;\n\n        for (int i = 0; i < nums.size(); i++) {\n            if (i >= k) {\n                int leftNum = nums.get(i - k);\n                freq.put(leftNum, freq.get(leftNum) - 1);\n                if (freq.get(leftNum) == 0) {\n                    distinctCount--;\n                }\n                currentSum -= leftNum;\n            }\n\n            int rightNum = nums.get(i);\n            currentSum += rightNum;\n            freq.put(rightNum, freq.getOrDefault(rightNum, 0) + 1);\n            if (freq.get(rightNum) == 1) {\n                distinctCount++;\n            }\n\n            if (i >= k - 1 && distinctCount >= m) {\n                maxSum = Math.max(maxSum, currentSum);\n            }\n        }\n\n        return maxSum;\n    }\n}"
}