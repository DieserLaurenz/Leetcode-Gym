{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "281 ms",
    "memory": 17140000,
    "question_id": "2954",
    "elapsed_time": 297,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707669238014,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 767,
    "total_testcases": 767,
    "runtime_percentile": 100,
    "status_memory": "17.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Swift",
    "submission_id": "1172436118",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxSum(_ nums: [Int], _ m: Int, _ k: Int) -> Int {\n        var result = 0\n        var windowSum = 0\n        var freq = [Int: Int]()\n\n        for i in 0..<k {\n            windowSum += nums[i]\n            freq[nums[i], default: 0] += 1\n        }\n        if freq.count >= m {\n            result = max(result, windowSum)\n        }\n\n        for i in k..<nums.count {\n            windowSum += nums[i] - nums[i-k]\n            freq[nums[i], default: 0] += 1\n            freq[nums[i-k]]! -= 1\n            if freq[nums[i-k]]! == 0 {\n                freq.removeValue(forKey: nums[i-k])\n            }\n\n            if freq.count >= m {\n                result = max(result, windowSum)\n            }\n        }\n\n        return result\n    }\n}"
}