{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "14 ms",
    "memory": 2652000,
    "question_id": "2954",
    "elapsed_time": 43,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707670061222,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 767,
    "total_testcases": 767,
    "runtime_percentile": 100,
    "status_memory": "2.7 MB",
    "memory_percentile": 100,
    "pretty_lang": "Rust",
    "submission_id": "1172447097",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_sum(nums: Vec<i32>, m: i32, k: i32) -> i64 {\n        use std::collections::HashMap;\n        let mut max_sum = 0;\n        let k = k as usize;\n        let mut window_sum = 0;\n        let mut freq_map = HashMap::new();\n        for i in 0..nums.len() {\n            if i < k {\n                *freq_map.entry(nums[i]).or_insert(0) += 1;\n                window_sum += nums[i] as i64;\n                if i == k - 1 && freq_map.len() >= m as usize {\n                    max_sum = max_sum.max(window_sum);\n                }\n            } else {\n                if let Some(count) = freq_map.get_mut(&nums[i-k]) {\n                    if *count == 1 {\n                        freq_map.remove(&nums[i-k]);\n                    } else {\n                        *count -= 1;\n                    }\n                }\n                window_sum = window_sum - nums[i-k] as i64 + nums[i] as i64;\n                *freq_map.entry(nums[i]).or_insert(0) += 1;\n                if freq_map.len() >= m as usize {\n                    max_sum = max_sum.max(window_sum);\n                }\n            }\n        }\n        max_sum\n    }\n}"
}