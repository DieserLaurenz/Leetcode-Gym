{
    "acRate": 40.88744148178303,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2998",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Number of Operations to Make X and Y Equal",
    "titleSlug": "minimum-number-of-operations-to-make-x-and-y-equal",
    "topicTags": [
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Breadth-First Search",
            "id": "VG9waWNUYWdOb2RlOjIy",
            "slug": "breadth-first-search"
        },
        {
            "name": "Memoization",
            "id": "VG9waWNUYWdOb2RlOjMz",
            "slug": "memoization"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minimumOperationsToMakeEqual(int x, int y) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minimumOperationsToMakeEqual(int x, int y) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimumOperationsToMakeEqual(self, x, y):         \"\"\"         :type x: int         :type y: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimumOperationsToMakeEqual(self, x: int, y: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minimumOperationsToMakeEqual(int x, int y) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinimumOperationsToMakeEqual(int x, int y) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} x  * @param {number} y  * @return {number}  */ var minimumOperationsToMakeEqual = function(x, y) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimumOperationsToMakeEqual(x: number, y: number): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $x      * @param Integer $y      * @return Integer      */     function minimumOperationsToMakeEqual($x, $y) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimumOperationsToMakeEqual(_ x: Int, _ y: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimumOperationsToMakeEqual(x: Int, y: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minimumOperationsToMakeEqual(int x, int y) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimumOperationsToMakeEqual(x int, y int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} x # @param {Integer} y # @return {Integer} def minimum_operations_to_make_equal(x, y)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimumOperationsToMakeEqual(x: Int, y: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimum_operations_to_make_equal(x: i32, y: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimum-operations-to-make-equal x y)   (-> exact-integer? exact-integer? exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimum_operations_to_make_equal(X :: integer(), Y :: integer()) -> integer(). minimum_operations_to_make_equal(X, Y) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimum_operations_to_make_equal(x :: integer, y :: integer) :: integer   def minimum_operations_to_make_equal(x, y) do        end end"
        }
    ],
    "content": "You are given two positive integers x and y. In one operation, you can do one of the four following operations:  Divide x by 11 if x is a multiple of 11. Divide x by 5 if x is a multiple of 5. Decrement x by 1. Increment x by 1.  Return the minimum number of operations required to make  x and y equal.  Example 1:  Input: x = 26, y = 1 Output: 3 Explanation: We can make 26 equal to 1 by applying the following operations:  1. Decrement x by 1 2. Divide x by 5 3. Divide x by 5 It can be shown that 3 is the minimum number of operations required to make 26 equal to 1.  Example 2:  Input: x = 54, y = 2 Output: 4 Explanation: We can make 54 equal to 2 by applying the following operations:  1. Increment x by 1 2. Divide x by 11  3. Divide x by 5 4. Increment x by 1 It can be shown that 4 is the minimum number of operations required to make 54 equal to 2.  Example 3:  Input: x = 25, y = 30 Output: 5 Explanation: We can make 25 equal to 30 by applying the following operations:  1. Increment x by 1 2. Increment x by 1 3. Increment x by 1 4. Increment x by 1 5. Increment x by 1 It can be shown that 5 is the minimum number of operations required to make 25 equal to 30.   Constraints:  1 <= x, y <= 104  "
}