{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "11 ms",
    "memory": 2236000,
    "question_id": "3239",
    "elapsed_time": 20,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707897815646,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 948,
    "total_testcases": 948,
    "runtime_percentile": 11.627699999999988,
    "status_memory": "2.2 MB",
    "memory_percentile": 65.11619999999999,
    "pretty_lang": "Rust",
    "submission_id": "1174934818",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_operations_to_make_equal(x: i32, y: i32) -> i32 {\n        use std::collections::HashSet;\n        let mut visited = HashSet::new();\n        let mut queue = std::collections::VecDeque::new();\n        queue.push_back((x, 0));\n        while let Some((current, steps)) = queue.pop_front() {\n            if current == y {\n                return steps;\n            }\n            if !visited.insert(current) {\n                continue;\n            }\n            if current > 1 {\n                queue.push_back((current - 1, steps + 1));\n            }\n            queue.push_back((current + 1, steps + 1));\n            if current % 5 == 0 {\n                queue.push_back((current / 5, steps + 1));\n            }\n            if current % 11 == 0 {\n                queue.push_back((current / 11, steps + 1));\n            }\n        }\n        0\n    }\n}"
}