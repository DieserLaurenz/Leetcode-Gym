{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63568000,
    "question_id": "3239",
    "elapsed_time": 76,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "54\n2",
    "expected_output": "4",
    "task_finish_time": 1707887368066,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 291,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1174804598",
    "input_formatted": "54, 2",
    "input": "54\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumOperationsToMakeEqual(int x, int y) {\n        if (x == y) return 0;\n\n        int[] dp = new int[10001];\n        for (int i = 0; i < dp.Length; i++) dp[i] = int.MaxValue;\n        dp[y] = 0;\n\n        for (int i = y; i <= x; i++) {\n            if (dp[i] == int.MaxValue) continue;\n            if (i + 1 <= x) dp[i + 1] = Math.Min(dp[i + 1], dp[i] + 1);\n            if (i - 1 >= 1) dp[i - 1] = Math.Min(dp[i - 1], dp[i] + 1);\n            if (i * 5 <= x) dp[i * 5] = Math.Min(dp[i * 5], dp[i] + 1);\n            if (i * 11 <= x) dp[i * 11] = Math.Min(dp[i * 11], dp[i] + 1);\n        }\n\n        return dp[x];\n    }\n}"
}