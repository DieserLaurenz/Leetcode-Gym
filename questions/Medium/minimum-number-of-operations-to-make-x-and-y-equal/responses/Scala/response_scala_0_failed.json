{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57940000,
    "question_id": "3239",
    "elapsed_time": 10507,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "54\n2",
    "expected_output": "4",
    "task_finish_time": 1707897633144,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 852,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1174932933",
    "input_formatted": "54, 2",
    "input": "54\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumOperationsToMakeEqual(x: Int, y: Int): Int = {\n        def helper(x: Int, steps: Int): Int = {\n            if (x == y) steps\n            else if (x < y) steps + (y - x)\n            else {\n                val divBy11 = if (x % 11 == 0) helper(x / 11, steps + 1) else Int.MaxValue\n                val divBy5 = if (x % 5 == 0) helper(x / 5, steps + 1) else Int.MaxValue\n                val decrement = helper(x - 1, steps + 1)\n                val increment = if (x < y) helper(x + 1, steps + 1) else Int.MaxValue\n                List(divBy11, divBy5, decrement, increment).min\n            }\n        }\n        helper(x, 0)\n    }\n}"
}