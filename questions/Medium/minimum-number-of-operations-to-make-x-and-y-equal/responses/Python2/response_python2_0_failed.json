{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12648000,
    "question_id": "3239",
    "elapsed_time": 74,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "75\n361",
    "expected_output": "286",
    "task_finish_time": 1708828874636,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 859,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185327996",
    "input_formatted": "75, 361",
    "input": "75\n361",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumOperationsToMakeEqual(self, x, y):\n        from collections import deque\n        visited = set()\n        queue = deque([(x, 0)])\n        while queue:\n            current, steps = queue.popleft()\n            if current == y:\n                return steps\n            visited.add(current)\n            # Decrement by 1\n            if current - 1 not in visited and current - 1 >= 1:\n                queue.append((current - 1, steps + 1))\n            # Increment by 1\n            if current + 1 not in visited and current + 1 <= 104:\n                queue.append((current + 1, steps + 1))\n            # Divide by 5\n            if current % 5 == 0 and current // 5 not in visited:\n                queue.append((current // 5, steps + 1))\n            # Divide by 11\n            if current % 11 == 0 and current // 11 not in visited:\n                queue.append((current // 11, steps + 1))\n        return -1"
}