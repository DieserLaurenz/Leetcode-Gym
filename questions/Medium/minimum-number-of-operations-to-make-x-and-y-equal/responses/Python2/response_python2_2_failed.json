{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11496000,
    "question_id": "3239",
    "elapsed_time": 52,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "75\n361",
    "expected_output": "286",
    "task_finish_time": 1708828921502,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 832,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185328901",
    "input_formatted": "75, 361",
    "input": "75\n361",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumOperationsToMakeEqual(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        from collections import deque\n        queue = deque([(x, 0)])\n        visited = set([x])\n\n        while queue:\n            current, steps = queue.popleft()\n            if current == y:\n                return steps\n            \n            operations = [current - 1, current + 1]\n            if current % 5 == 0:\n                operations.append(current // 5)\n            if current % 11 == 0:\n                operations.append(current // 11)\n            \n            for next_current in operations:\n                if next_current >= 1 and next_current <= 104 and next_current not in visited:\n                    visited.add(next_current)\n                    queue.append((next_current, steps + 1))\n        \n        return -1"
}