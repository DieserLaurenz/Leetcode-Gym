{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "102 ms",
    "memory": 58524000,
    "question_id": "3239",
    "elapsed_time": 192,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707887461321,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 948,
    "total_testcases": 948,
    "runtime_percentile": 17.646899999999956,
    "status_memory": "58.5 MB",
    "memory_percentile": 9.411399999999931,
    "pretty_lang": "JavaScript",
    "submission_id": "1174805875",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nvar minimumOperationsToMakeEqual = function(x, y) {\n    const queue = [[x, 0]];\n    const visited = new Set([x]);\n\n    while (queue.length) {\n        const [current, ops] = queue.shift();\n        if (current === y) return ops;\n\n        // Possible next steps\n        const possibilities = [\n            current - 1,\n            current + 1,\n            ...(current % 5 === 0 ? [current / 5] : []),\n            ...(current % 11 === 0 ? [current / 11] : [])\n        ];\n\n        for (let next of possibilities) {\n            if (!visited.has(next) && next >= 0) {\n                visited.add(next);\n                queue.push([next, ops + 1]);\n            }\n        }\n    }\n};"
}