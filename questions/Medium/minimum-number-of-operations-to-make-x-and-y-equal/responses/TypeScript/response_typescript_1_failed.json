{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58276000,
    "question_id": "3239",
    "elapsed_time": 145,
    "compare_result": "001111111111111111111111111111111111111111111111111110111111111111111111111111011111111111111111111111100111111111111111111111110011111111111111111111111000111111111111111111111100011111111111111111111110000111111111111111111111000011111111111111111111100000111111111111111111110000011111111111111111111000000111111111111111111100000001111111111111111110000000111111111111111111000000011111111111111111100000000111111111111111110000000001111111111111111000000000111111111111111100000000011111111111111110000000000111111111111111000000000011111111111111100000000000011111111111110000000000001111111111111000000000000111111111111111111011011111010011001101011111111110110110100111111000110111111111001111111110111111111011110001110111010110111111110111111011001111011011101111111111111101111111111111111111110101001111111011011001110111001110111111010011111011101111111101011111110111101110111111101110010110101010110111011111011111111111111101010100",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "26\n1",
    "expected_output": "3",
    "task_finish_time": 1707887541910,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 723,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1174806947",
    "input_formatted": "26, 1",
    "input": "26\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumOperationsToMakeEqual(x: number, y: number): number {\n    const dp = new Map<number, number>();\n    const queue: [number, number][] = [[x, 0]]; // Pair of value and operations count\n    while (queue.length > 0) {\n        const [current, ops] = queue.shift()!;\n        if (current === y) return ops;\n        if (current < 1 || ops >= dp.get(current) || current > 2 * y) continue;\n        dp.set(current, ops);\n        queue.push([current - 1, ops + 1], [current + 1, ops + 1]);\n        if (current % 5 === 0) queue.push([current / 5, ops + 1]);\n        if (current % 11 === 0) queue.push([current / 11, ops + 1]);\n    }\n    return dp.get(y) ?? -1;\n}"
}