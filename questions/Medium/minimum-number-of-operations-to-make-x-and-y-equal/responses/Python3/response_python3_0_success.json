{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "80 ms",
    "memory": 17620000,
    "question_id": "3239",
    "elapsed_time": 102,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708828972907,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 948,
    "total_testcases": 948,
    "runtime_percentile": 48.33770000000003,
    "status_memory": "17.6 MB",
    "memory_percentile": 79.49700000000003,
    "pretty_lang": "Python3",
    "submission_id": "1185329904",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minimumOperationsToMakeEqual(self, x: int, y: int) -> int:\n        from collections import deque\n        \n        def valid_next_steps(x):\n            steps = [x - 1, x + 1]\n            if x % 5 == 0:\n                steps.append(x // 5)\n            if x % 11 == 0:\n                steps.append(x // 11)\n            return steps\n        \n        queue = deque([(x, 0)]) # (current value, operations count)\n        visited = set([x])\n        \n        while queue:\n            current, ops = queue.popleft()\n            if current == y:\n                return ops\n            \n            for next_step in valid_next_steps(current):\n                if next_step not in visited and 1 <= next_step <= 10**4:\n                    visited.add(next_step)\n                    queue.append((next_step, ops + 1))\n                    \n        return -1"
}