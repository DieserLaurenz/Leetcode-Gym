{
    "status_code": 12,
    "lang": "erlang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 983736000,
    "question_id": "3239",
    "elapsed_time": 1337,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "26\n1",
    "expected_output": "3",
    "task_finish_time": 1707898026501,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174936891",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "-spec minimum_operations_to_make_equal(X :: integer(), Y :: integer()) -> integer().\nminimum_operations_to_make_equal(X, Y) ->\n    minimum_operations_to_make_equal_helper(X, Y, #{X => 0}).\n\nminimum_operations_to_make_equal_helper(X, Y, Seen) when X == Y ->\n    maps:get(X, Seen);\nminimum_operations_to_make_equal_helper(X, Y, Seen) ->\n    NextStates = lists:foldl(\n        fun(Op, Acc) ->\n            case Op of\n                inc -> [X+1 | Acc];\n                dec -> [X-1 | Acc];\n                div5 -> if X rem 5 == 0 -> [X div 5 | Acc]; true -> Acc end;\n                div11 -> if X rem 11 == 0 -> [X div 11 | Acc]; true -> Acc end\n            end\n        end,\n        [],\n        [inc, dec, div5, div11]\n    ),\n    NextStatesFiltered = lists:filter(fun(NextX) -> not maps:is_key(NextX, Seen) end, NextStates),\n    SeenUpdated = lists:foldl(fun(NextX, Acc) -> Acc#{NextX => maps:get(X, Seen) + 1} end, Seen, NextStatesFiltered),\n    case NextStatesFiltered of\n        [] -> 104; % Arbitrary high number, assuming no valid moves left\n        _ -> lists:min([minimum_operations_to_make_equal_helper(NextX, Y, SeenUpdated) || NextX <- NextStatesFiltered])\n    end."
}