{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58984000,
    "question_id": "3239",
    "elapsed_time": 5078,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "54\n2",
    "expected_output": "4",
    "task_finish_time": 1707897996701,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 832,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174936563",
    "input_formatted": "54, 2",
    "input": "54\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_operations_to_make_equal(X :: integer(), Y :: integer()) -> integer().\nminimum_operations_to_make_equal(X, Y) ->\n    minimum_operations_to_make_equal(X, Y, 0).\n\nminimum_operations_to_make_equal(X, Y, Ops) when X == Y ->\n    Ops;\nminimum_operations_to_make_equal(X, Y, Ops) when X < Y ->\n    minimum_operations_to_make_equal(X + 1, Y, Ops + 1);\nminimum_operations_to_make_equal(X, Y, Ops) ->\n    Ops1 = if X rem 11 == 0 -> minimum_operations_to_make_equal(X div 11, Y, Ops + 1);\n              X rem 5 == 0 -> minimum_operations_to_make_equal(X div 5, Y, Ops + 1);\n              true -> 104\n           end,\n    Ops2 = minimum_operations_to_make_equal(X - 1, Y, Ops + 1),\n    min(Ops1, Ops2)."
}