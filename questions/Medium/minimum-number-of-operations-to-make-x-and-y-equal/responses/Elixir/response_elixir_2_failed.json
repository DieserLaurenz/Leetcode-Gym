{
    "status_code": 12,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 986208000,
    "question_id": "3239",
    "elapsed_time": 1110,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "26\n1",
    "expected_output": "3",
    "task_finish_time": 1707898202457,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174938701",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_operations_to_make_equal(x :: integer, y :: integer) :: integer\n  def minimum_operations_to_make_equal(x, y), do: minimum_operations(x, y, 0)\n\n  defp minimum_operations(x, y, ops) when x == y, do: ops\n\n  defp minimum_operations(x, y, ops) when x < y, do: ops + y - x\n\n  defp minimum_operations(x, y, ops) do\n    ops_div_11 = if rem(x, 11) == 0, do: minimum_operations(div(x, 11), y, ops + 1), else: :infinity\n    ops_div_5 = if rem(x, 5) == 0, do: minimum_operations(div(x, 5), y, ops + 1), else: :infinity\n    ops_dec = minimum_operations(x - 1, y, ops + 1)\n    ops_inc = minimum_operations(x + 1, y, ops + 1)\n\n    [ops_div_11, ops_div_5, ops_dec, ops_inc]\n    |> Enum.filter(fn op -> op != :infinity end)\n    |> Enum.min()\n  end\nend"
}