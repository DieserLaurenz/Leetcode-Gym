{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71752000,
    "question_id": "3239",
    "elapsed_time": 843,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "54\n2",
    "expected_output": "4",
    "task_finish_time": 1707898118374,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 670,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174937822",
    "input_formatted": "54, 2",
    "input": "54\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_operations_to_make_equal(x :: integer, y :: integer) :: integer\n  def minimum_operations_to_make_equal(x, y) do\n    minimum_operations_to_make_equal(x, y, 0)\n  end\n\n  defp minimum_operations_to_make_equal(x, y, ops) when x == y, do: ops\n\n  defp minimum_operations_to_make_equal(x, y, ops) when x < y, do: ops + y - x\n\n  defp minimum_operations_to_make_equal(x, y, ops) do\n    cond do\n      rem(x, 11) == 0 -> minimum_operations_to_make_equal(div(x, 11), y, ops + 1)\n      rem(x, 5) == 0 -> minimum_operations_to_make_equal(div(x, 5), y, ops + 1)\n      true -> minimum_operations_to_make_equal(x - 1, y, ops + 1)\n    end\n  end\nend"
}