{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15868000,
    "question_id": "3239",
    "elapsed_time": 16,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "26\n1",
    "expected_output": "3",
    "task_finish_time": 1707897088188,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 656,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1174927435",
    "input_formatted": "26, 1",
    "input": "26\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumOperationsToMakeEqual(_ x: Int, _ y: Int) -> Int {\n        var dp = [Int: Int]()\n        func dfs(_ x: Int) -> Int {\n            if x == y { return 0 }\n            if x < y { return y - x }\n            if let val = dp[x] { return val }\n            var res = x - y // option to decrement x down to y\n            if x % 2 == 0 {\n                res = min(res, 1 + dfs(x / 2))\n            } else {\n                res = min(res, 2 + dfs((x + 1) / 2), 2 + dfs((x - 1) / 2))\n            }\n            dp[x] = res\n            return res\n        }\n        return dfs(x)\n    }\n}"
}