{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "204 ms",
    "memory": 37524000,
    "question_id": "3239",
    "elapsed_time": 240,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707897225187,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 948,
    "total_testcases": 948,
    "runtime_percentile": 57.57580000000003,
    "status_memory": "37.5 MB",
    "memory_percentile": 69.69700000000003,
    "pretty_lang": "Kotlin",
    "submission_id": "1174928842",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumOperationsToMakeEqual(x: Int, y: Int): Int {\n        if (x == y) return 0\n        var operations = 0\n        val queue: java.util.LinkedList<Pair<Int, Int>> = java.util.LinkedList()\n        val visited = HashSet<Int>()\n        queue.offer(x to 0)\n        visited.add(x)\n\n        while (queue.isNotEmpty()) {\n            val (current, steps) = queue.poll()\n            if (current == y) return steps\n\n            if (current - 1 > 0 && visited.add(current - 1)) queue.offer((current - 1) to steps + 1)\n            if (current + 1 <= 10000 && visited.add(current + 1)) queue.offer((current + 1) to steps + 1)\n            if (current % 5 == 0 && current / 5 >= 1 && visited.add(current / 5)) queue.offer((current / 5) to steps + 1)\n            if (current % 11 == 0 && current / 11 >= 1 && visited.add(current / 11)) queue.offer((current / 11) to steps + 1)\n        }\n\n        return operations\n    }\n}"
}