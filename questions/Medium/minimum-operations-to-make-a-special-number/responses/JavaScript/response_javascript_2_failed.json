{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51776000,
    "question_id": "3046",
    "elapsed_time": 103,
    "compare_result": "111000000000000000000100001000010000000001000000000100000000010000000001000010000100000000010000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111110101",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1\"",
    "expected_output": "1",
    "task_finish_time": 1707907056102,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 720,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1175030812",
    "input_formatted": "\"1\"",
    "input": "\"1\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} num\n * @return {number}\n */\nvar minimumOperations = function(num) {\n    let res = Infinity;\n    const endings = ['00', '25', '50', '75'];\n\n    for (const ending of endings) {\n        let i = num.length - 1;\n        let step = 0;\n        for (let j = 1; j >= 0; j--) {\n            while (i >= 0 && num[i] !== ending[j]) {\n                i--;\n                step++;\n            }\n            i--;\n        }\n        if (i >= -1) { // Can form a number ending with current ending\n            res = Math.min(res, step);\n        }\n    }\n\n    return res === Infinity ? num.length - 1 : res;\n};"
}