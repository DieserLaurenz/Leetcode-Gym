{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51204000,
    "question_id": "3046",
    "elapsed_time": 76,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707906977882,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 625,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1175030053",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} num\n * @return {number}\n */\nvar minimumOperations = function(num) {\n    const checkSpecial = (s) => {\n        const n = s.length;\n        for (let i = n - 1; i >= 0; --i) {\n            if (s[i] === '0' || s[i] === '5') {\n                for (let j = i - 1; j >= 0; --j) {\n                    if ((s[i] === '0' && s[j] === '0') || (s[i] === '5' && (s[j] === '2' || s[j] === '7'))) {\n                        return n - i - 1 + i - j - 1;\n                    }\n                }\n            }\n        }\n        return n + 1; // Return a large number to indicate not possible\n    };\n    \n    let minOps = checkSpecial(num);\n    if (minOps !== num.length + 1) return minOps; // If already special, return operations count\n    \n    // Handling case where making it divisible by 25 is not possible directly\n    // Since 0 makes everything special by default, find the first 0 if exists\n    for (let i = 0; i < num.length; ++i) {\n        if (num[i] === '0') return i;\n    }\n    \n    return num.length; // Worst case, remove all digits except one (any digit makes it \"0\")\n};"
}