{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2212000,
    "question_id": "3046",
    "elapsed_time": 13,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707907817621,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 90,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175038524",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumOperations(num string) int {\n    minOp := len(num)\n    lastPos := [10]int{}\n    for i := range lastPos {\n        lastPos[i] = -1\n    }\n    for i := len(num) - 1; i >= 0; i-- {\n        digit := num[i] - '0'\n        lastPos[digit] = i\n        if digit == 0 || digit == 5 {\n            for j := 0; j < 10; j++ {\n                if (digit == 0 && j%2 == 0 || digit == 5 && (j == 2 || j == 7)) && lastPos[j] != -1 {\n                    minOp = min(minOp, len(num)-min(i, lastPos[j])-2)\n                }\n            }\n        }\n    }\n    if lastPos[0] != -1 && lastPos[0] != len(num)-1 {\n        minOp = min(minOp, len(num)-lastPos[0]-2)\n    }\n    return minOp\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}