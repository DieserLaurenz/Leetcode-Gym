{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2128000,
    "question_id": "3046",
    "elapsed_time": 12,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"10\"",
    "expected_output": "1",
    "task_finish_time": 1707907884692,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 800,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175039256",
    "input_formatted": "\"10\"",
    "input": "\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumOperations(num string) int {\n    ans := len(num) // Initialize with max possible operations.\n    // Iterate over possible endings that make a number special: \"00\", \"25\", \"50\", \"75\".\n    for _, lastTwo := range []string{\"00\", \"25\", \"50\", \"75\"} {\n        pos1, pos2 := -1, -1 // Positions of the last two digits that we are looking for.\n        for i := len(num) - 1; i >= 0; i-- {\n            if pos2 == -1 && num[i] == lastTwo[1] {\n                pos2 = i // Found the last digit position.\n            } else if pos2 != -1 && num[i] == lastTwo[0] {\n                pos1 = i // Found the second last digit position.\n                break\n            }\n        }\n        if pos1 != -1 && pos2 != -1 {\n            // Calculate operations needed: total length - positions of digits - 2 (for the two digits we keep).\n            ops := (len(num) - 1 - pos2) + (pos2 - 1 - pos1)\n            if ops < ans {\n                ans = ops // Update minimum operations.\n            }\n        }\n    }\n    return ans\n}"
}