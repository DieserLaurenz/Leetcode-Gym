{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2216000,
    "question_id": "3046",
    "elapsed_time": 18,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707907852702,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 93,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175038910",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumOperations(num string) int {\n    result := len(num) // Worst case scenario: delete all digits\n    // Check for every pair that makes the number special when it ends with that pair\n    pairs := []string{\"00\", \"25\", \"50\", \"75\"}\n    \n    for _, pair := range pairs {\n        i, j := len(num)-1, 1\n        steps := 0\n        for i >= 0 && j >= 0 {\n            // Find the second digit of the pair\n            if num[i] == pair[1] {\n                j--\n                if j < 0 { break }\n            }\n            // Move to the next digit\n            i--\n            steps++\n        }\n        for ; i >= 0; i-- {\n            // Find the first digit of the pair\n            if num[i] == pair[0] {\n                result = min(result, steps)\n                break\n            }\n            steps++\n        }\n    }\n    return result\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}