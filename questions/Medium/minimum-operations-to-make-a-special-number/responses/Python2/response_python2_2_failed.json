{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11788000,
    "question_id": "3046",
    "elapsed_time": 47,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"10\"",
    "expected_output": "1",
    "task_finish_time": 1708829104851,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185332482",
    "input_formatted": "\"10\"",
    "input": "\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumOperations(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        n = len(num)\n        ans = float('inf')\n        \n        # For each pair of digits that make the number divisible by 25, find the minimum operations.\n        for x, y in [('0', '0'), ('2', '5'), ('5', '0'), ('7', '5')]:\n            i, j = n - 1, n - 1\n            # Counters for the operations needed to make the number end with x and y.\n            remove_x, remove_y = 0, 0\n            \n            # Find the rightmost occurrence of y.\n            while i >= 0 and num[i] != y:\n                i -= 1\n                remove_y += 1\n            # Find the rightmost occurrence of x that is left of y.\n            j = i - 1\n            while j >= 0 and num[j] != x:\n                j -= 1\n                remove_x += 1\n            \n            # If both digits are found in the correct order.\n            if i > 0 and j >= 0:\n                ans = min(ans, remove_x + remove_y)\n        \n        return n - 2 if ans == float('inf') else ans"
}