{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11732000,
    "question_id": "3046",
    "elapsed_time": 43,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1708829071098,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 124,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185331814",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumOperations(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        min_ops = len(num)  # Start with the worst-case scenario: removing all digits.\n        \n        for last_two_digits in ['00', '25', '50', '75']:\n            i, j = len(num) - 1, 1  # Start from the end of num, and j is used to iterate through last_two_digits.\n            ops = 0\n            while i >= 0 and j >= 0:\n                if num[i] == last_two_digits[j]:\n                    j -= 1  # Found the digit, move to the next required digit.\n                else:\n                    ops += 1  # Increment ops if the digit does not match.\n                i -= 1  # Move to the previous digit in num.\n            \n            # After finding both digits, all remaining digits to the left need to be deleted.\n            if j < 0:  # Check if both digits were found.\n                ops += i + 1  # Add the remaining digits to the left to ops.\n                min_ops = min(min_ops, ops)  # Update min_ops if this attempt uses fewer operations.\n        \n        return min_ops"
}