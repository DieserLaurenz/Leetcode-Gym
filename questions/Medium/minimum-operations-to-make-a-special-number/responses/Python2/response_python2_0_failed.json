{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11772000,
    "question_id": "3046",
    "elapsed_time": 36,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1708829038746,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 31,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185331199",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumOperations(self, num):\n        \"\"\"\n        :type num: str\n        :rtype: int\n        \"\"\"\n        # Initialize the minimum number of operations to a large number.\n        min_ops = float('inf')\n        \n        # Check each possible ending for a number divisible by 25.\n        for ending in ('00', '25', '50', '75'):\n            ops = 0\n            j = len(num) - 1\n            \n            # Iterate over each character in the ending string.\n            for i in reversed(ending):\n                # Find the rightmost occurrence of the character in the remaining string.\n                while j >= 0 and num[j] != i:\n                    j -= 1\n                    ops += 1\n                if j < 0:\n                    # If not found, set operations to a large number and break.\n                    ops = float('inf')\n                    break\n                j -= 1\n            \n            # Update the minimum operations.\n            min_ops = min(min_ops, ops + j + 1) # +j+1 to delete all characters left of the found sequence\n        \n        # Edge case: if num is already special, no operations are needed.\n        if min_ops == float('inf'):\n            return 0\n        \n        return min_ops"
}