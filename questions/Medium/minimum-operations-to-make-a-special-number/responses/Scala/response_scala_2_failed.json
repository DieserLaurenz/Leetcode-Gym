{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54736000,
    "question_id": "3046",
    "elapsed_time": 843,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"10\"",
    "expected_output": "1",
    "task_finish_time": 1707908141487,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1175041966",
    "input_formatted": "\"10\"",
    "input": "\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumOperations(num: String): Int = {\n        val endsWith = List(\"00\", \"25\", \"50\", \"75\")\n        var minOps = Int.MaxValue\n\n        for (end <- endsWith) {\n            var ops = 0\n            var i = num.length - 1\n            for (c <- end.reverse) {\n                while (i >= 0 && num(i) != c) {\n                    ops += 1\n                    i -= 1\n                }\n                if (i < 0) {\n                    ops = Int.MaxValue\n                    i = -1 // break the loop\n                } else {\n                    i -= 1 // move past the found character\n                }\n            }\n            minOps = Math.min(minOps, ops)\n        }\n\n        if (minOps == Int.MaxValue) 0 else minOps\n    }\n}"
}