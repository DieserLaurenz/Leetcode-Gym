{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5248000,
    "question_id": "3046",
    "elapsed_time": 14,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707898590995,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 269,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1174942694",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int minimumOperations(char* num) {\n    int len = strlen(num);\n    int ans = INT_MAX; // Start with the maximum possible value\n\n    // Arrays to store the last occurrence of required digits\n    int last[2][10]; // [0][*] for '0', [1][*] for '5'\n    memset(last, -1, sizeof(last));\n\n    for (int i = 0; i < len; ++i) {\n        int d = num[i] - '0';\n        if (d % 2 == 0) { // Update last occurrence for even digits\n            last[0][d] = i;\n        } else { // Update last occurrence for '5'\n            last[1][d] = i;\n        }\n\n        // Check for '00' or '50' pattern\n        if (d == 0 && last[0][0] != -1 && last[0][0] < i) {\n            ans = fmin(ans, len - 1 - i + i - last[0][0]);\n        }\n        if (d == 5 && last[0][0] != -1) {\n            ans = fmin(ans, len - 1 - i + i - last[0][0]);\n        }\n\n        // Check for '25' or '75' pattern\n        if (d == 5 && last[0][2] != -1) {\n            ans = fmin(ans, len - 1 - i + i - last[0][2]);\n        }\n        if (d == 5 && last[0][7] != -1) {\n            ans = fmin(ans, len - 1 - i + i - last[0][7]);\n        }\n    }\n\n    return ans == INT_MAX ? len : ans - 1; // Adjust the answer considering the total length\n}"
}