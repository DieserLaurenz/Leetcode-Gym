{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 16: Char 51: read-syntax: missing `)` to close `(` on line 23, found instead `]`",
    "full_compile_error": "Line 16: Char 51: read-syntax: missing `)` to close `(` on line 23, found instead `]`\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3046",
    "task_finish_time": 1707908346295,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175044076",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-operations num)\n  (-> string? exact-integer?)\n  (let ([length (string-length num)])\n    (define (special? n)\n      (= (modulo n 25) 0))\n    (define (to-number s e)\n      (string->number (substring num s (+ e 1))))\n    (define (helper i j ops)\n      (cond\n        [(>= i j) (if (special? (to-number 0 j)) ops (+ ops 1))]\n        [else\n         (let ([current (to-number i j)])\n           (if (special? current)\n               ops\n               (min (helper (+ i 1) j (+ ops 1))\n                    (helper i (- j 1) (+ ops 1))))]))\n    (helper 0 (- length 1) 0)))"
}