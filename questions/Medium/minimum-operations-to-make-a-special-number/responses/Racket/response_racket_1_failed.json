{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "Line 1: Char 19: minimum-operations: broke its own contract",
    "full_runtime_error": "Line 1: Char 19: minimum-operations: broke its own contract\n  promised: exact-integer?\n  produced: +inf.0\n  in: the range of\n      (-> string? exact-integer?)\n  contract from: (function minimum-operations)\n  blaming: (function minimum-operations)\n   (assuming the contract is correct)\n  context...:\n   /usr/share/racket/collects/racket/contract/private/blame.rkt:346:0: raise-blame-error\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:25:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100052000,
    "question_id": "3046",
    "elapsed_time": 240,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707908387400,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175044517",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-operations num)\n  (-> string? exact-integer?)\n  (define (num->list n) (map (lambda (x) (string->number (string x))) (string->list n)))\n  (define (check-tail lst)\n    (cond\n      [(or (null? lst) (null? (cdr lst))) #f]\n      [(and (= (car lst) 2) (= (cadr lst) 5)) 0]\n      [(and (= (car lst) 7) (= (cadr lst) 5)) 1]\n      [(and (= (car lst) 0) (= (cadr lst) 0)) (if (null? (cddr lst)) 2 0)]\n      [(and (= (car lst) 0) (or (= (cadr lst) 2) (= (cadr lst) 7))) 1]\n      [else #f]))\n  (define (min-ops lst)\n    (let loop ((lst lst) (removed 0) (result +inf.0))\n      (let ((tail-check (check-tail (reverse lst))))\n        (if (not (eq? tail-check #f))\n            (min result (+ removed tail-check))\n            (if (null? lst)\n                result\n                (loop (cdr lst) (+ removed 1) result))))))\n  (if (= (string->number num) 0) 0 (min-ops (num->list num))))"
}