{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52536000,
    "question_id": "3046",
    "elapsed_time": 118,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707907183222,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175032089",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumOperations(num: string): number {\n    let result = num.length; // Initial result with maximum possible operations\n    const checkSpecial = (suffix: string) => {\n        let ops = 0, idx = num.length - 1;\n        for (let i = suffix.length - 1; i >= 0; i--, idx--) {\n            while (idx >= 0 && num[idx] !== suffix[i]) {\n                ops++; // Increment operations if current digit doesn't match\n                idx--;\n            }\n            if (idx < 0) return Number.MAX_SAFE_INTEGER; // If not found, return max ops\n        }\n        return ops + idx + 1; // Return total operations needed including trimming leading part\n    };\n    result = Math.min(result, checkSpecial(\"00\"), checkSpecial(\"25\"), checkSpecial(\"50\"), checkSpecial(\"75\"));\n    return result === num.length ? 1 : result; // If num is a single digit (not special), return 1, else return calculated ops\n}"
}