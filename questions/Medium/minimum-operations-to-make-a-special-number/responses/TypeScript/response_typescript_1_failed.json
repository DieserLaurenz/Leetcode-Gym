{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52120000,
    "question_id": "3046",
    "elapsed_time": 121,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1\"",
    "expected_output": "1",
    "task_finish_time": 1707907150878,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 720,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175031786",
    "input_formatted": "\"1\"",
    "input": "\"1\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumOperations(num: string): number {\n    let minOps = num.length; // Assume the worst case where we need to remove all digits\n    const targets = ['00', '25', '50', '75'];\n\n    for (const target of targets) {\n        let ops = 0;\n        let j = num.length - 1;\n        for (let i = 1; i >= 0; i--) {\n            while (j >= 0 && num[j] !== target[i]) {\n                j--;\n                ops++;\n            }\n            if (j >= 0) j--; // Found a matching digit, move to the next\n            else break; // No match found, exit early\n\n            if (i === 0) { // All digits in target found\n                minOps = Math.min(minOps, ops);\n            }\n        }\n    }\n\n    return minOps === num.length ? num.length - 1 : minOps; // Handle the case when num is a single digit not in targets\n}"
}