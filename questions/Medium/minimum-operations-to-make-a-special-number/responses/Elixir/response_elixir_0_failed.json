{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 6: ** (ArgumentError) errors were found at the given arguments:\n  * 1st argument: not a list\n    :erlang.length(\"2245047\")\n    solution.ex:6: Solution.minimum_operations/1\n    solution.ex:33: Driver.consume_test_cases/2\n    solution.ex:21: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 73364000,
    "question_id": "3046",
    "elapsed_time": 314,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707917160958,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1175131167",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_operations(num :: String.t) :: integer\n  def minimum_operations(num) do\n    suffixes = [\"00\", \"25\", \"50\", \"75\"]\n    num |> String.graphemes()\n        |> Enum.reduce({length(num), 0}, fn digit, {min_ops, idx} ->\n          Enum.reduce(suffixes, min_ops, fn suffix, acc ->\n            if String.ends_with?(Enum.slice(num, 0..idx), suffix) do\n              ops = length(num) - idx - 2\n              if ops < acc, do: ops, else: acc\n            else\n              acc\n            end\n          end)\n        end) |> elem(0)\n  end\nend"
}