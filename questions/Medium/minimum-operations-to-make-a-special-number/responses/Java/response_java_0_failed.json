{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42608000,
    "display_runtime": "3",
    "question_id": "3046",
    "elapsed_time": 183,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1\"",
    "expected_output": "1",
    "task_finish_time": 1707898379736,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 720,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174940475",
    "input_formatted": "\"1\"",
    "input": "\"1\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumOperations(String num) {\n        int result = num.length();\n        for (int i = 0; i < num.length(); i++) {\n            for (int j = i + 1; j < num.length(); j++) {\n                char first = num.charAt(i), second = num.charAt(j);\n                if ((first == '0' && second == '0') || (first == '2' && second == '5') || (first == '5' && second == '0') || (first == '7' && second == '5')) {\n                    int ops = (num.length() - j - 1) + (j - i - 1);\n                    result = Math.min(result, ops);\n                }\n            }\n        }\n        return result == num.length() ? num.length() - 1 : result;\n    }\n}"
}