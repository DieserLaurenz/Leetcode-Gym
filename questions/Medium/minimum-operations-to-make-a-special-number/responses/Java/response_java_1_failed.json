{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42224000,
    "display_runtime": "1",
    "question_id": "3046",
    "elapsed_time": 153,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"5\"",
    "expected_output": "1",
    "task_finish_time": 1707898417424,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 728,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174940866",
    "input_formatted": "\"5\"",
    "input": "\"5\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumOperations(String num) {\n        int len = num.length();\n        int minOps = len; // Start with a max possible value considering the deletion of all digits except one or zero to make it special\n\n        // Check for each pair if it forms a special number when ending with it\n        // Special numbers end with 00, 25, 50, 75\n        int[][] pairs = {{0, 0}, {2, 5}, {5, 0}, {7, 5}};\n        for (int[] pair : pairs) {\n            int first = -1, second = -1; // Positions of the digits forming the pair\n            for (int i = len - 1; i >= 0; i--) { // Start from the end to minimize deletions\n                int digit = num.charAt(i) - '0';\n                if (second == -1 && digit == pair[1]) {\n                    second = i;\n                } else if (second != -1 && first == -1 && digit == pair[0]) {\n                    first = i;\n                    break; // Found both, no need to continue\n                }\n            }\n            if (second != -1) { // Possible to form a special number\n                // Calculate operations needed: delete digits after second and between first and second, if first is found\n                int ops = (first == -1 ? len - 1 : len - 1 - second + second - first - 1);\n                minOps = Math.min(minOps, ops);\n            }\n        }\n\n        return minOps == len ? 1 : minOps; // If no change, it means the input is \"0\" or cannot form 25, 50, 75, or 00 without being left with a single digit\n    }\n}"
}