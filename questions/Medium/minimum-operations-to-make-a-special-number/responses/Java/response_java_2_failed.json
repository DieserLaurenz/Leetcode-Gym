{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42104000,
    "display_runtime": "3",
    "question_id": "3046",
    "elapsed_time": 230,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707898452430,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 182,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1174941238",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumOperations(String num) {\n        int len = num.length();\n        int minOps = Integer.MAX_VALUE; // Initialize with maximum value\n\n        // To make the number special, it must end in 00, 25, 50, or 75\n        // Check every combination of two digits in the string\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                int lastDigit = num.charAt(j) - '0';\n                int secondLastDigit = num.charAt(i) - '0';\n                int pair = secondLastDigit * 10 + lastDigit;\n\n                // Check if the pair forms a special number\n                if (pair == 0 || pair == 25 || pair == 50 || pair == 75) {\n                    // Calculate operations: total length - 2 (for the digits in the pair) + i (digits between the start and the second last digit)\n                    // - (j - i - 1) (digits between the second last and last digit)\n                    int ops = len - 2 + i - (j - i - 1);\n                    minOps = Math.min(minOps, ops);\n                }\n            }\n        }\n\n        // If no combination forms a special number, return the operations needed to delete all digits\n        return minOps == Integer.MAX_VALUE ? len : minOps;\n    }\n}"
}