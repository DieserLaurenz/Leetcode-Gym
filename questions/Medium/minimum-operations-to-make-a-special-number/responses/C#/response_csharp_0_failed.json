{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39316000,
    "question_id": "3046",
    "elapsed_time": 209,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707906839538,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 167,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175028630",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumOperations(string num) {\n        int minOps = int.MaxValue;\n        int[] lastPos = new int[10];\n        for (int i = 0; i < 10; i++) lastPos[i] = -1;\n\n        for (int i = num.Length - 1; i >= 0; i--) {\n            int digit = num[i] - '0';\n            if (digit == 0 || digit == 5) {\n                if (lastPos[0] != -1) minOps = Math.Min(minOps, lastPos[0] - i - 1);\n                if (digit == 5 && lastPos[2] != -1) minOps = Math.Min(minOps, lastPos[2] - i - 1);\n                if (digit == 5 && lastPos[7] != -1) minOps = Math.Min(minOps, lastPos[7] - i - 1);\n            }\n            lastPos[digit] = i;\n        }\n\n        if (minOps == int.MaxValue) return num.Length - 1;\n        return minOps;\n    }\n}"
}