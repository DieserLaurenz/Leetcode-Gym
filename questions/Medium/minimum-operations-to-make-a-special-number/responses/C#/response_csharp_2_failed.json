{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39272000,
    "question_id": "3046",
    "elapsed_time": 105,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707906896992,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 82,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175029212",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumOperations(string num) {\n        int minOps = num.Length; // Start with the worst-case scenario\n        // Special numbers end with 00, 25, 50, 75\n        string[] specials = { \"00\", \"25\", \"50\", \"75\" };\n\n        for (int s = 0; s < specials.Length; s++) {\n            int ops = 0;\n            int j = num.Length - 1;\n            for (int i = 1; i >= 0; i--) {\n                while (j >= 0 && num[j] != specials[s][i]) {\n                    j--;\n                    ops++;\n                }\n                if (j >= 0) j--;\n                else {\n                    ops = int.MaxValue;\n                    break;\n                }\n            }\n            minOps = Math.Min(minOps, ops);\n        }\n\n        // Handling the case when num becomes 0 (i.e., when num has no digits)\n        if (minOps == int.MaxValue || num == \"0\") return num.Length;\n        return minOps + (num.Length - 2); // Removing digits to match specials + adjusting for 0-based index\n    }\n}"
}