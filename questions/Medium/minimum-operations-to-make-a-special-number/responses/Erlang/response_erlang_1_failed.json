{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59484000,
    "question_id": "3046",
    "elapsed_time": 1340,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707908622599,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175046798",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_operations(Num :: unicode:unicode_binary()) -> integer().\nminimum_operations(Num) ->\n    Str = unicode:characters_to_list(Num),\n    Len = length(Str),\n    MinOps = fun F([], _25, _50, _75, _00, Min) -> Min;\n                 F([H|T], _25, _50, _75, _00, Min) ->\n                    NewMin = case H of\n                                 $0 -> if _00 > 0 -> Min - 1;\n                                         true -> Min\n                                       end;\n                                 $2 -> if _25 > 0; _50 > 0 -> Min - 1;\n                                         true -> Min\n                                       end;\n                                 $5 -> if _75 > 0; _00 > 1 -> Min - 1;\n                                         true -> Min\n                                       end;\n                                 $7 -> if _25 > 0 -> Min - 1;\n                                         true -> Min\n                                       end;\n                                 _ -> Min\n                             end,\n                    F(T,\n                      if H == $2 -> _25 + 1; true -> _25 end,\n                      if H == $5 -> _50 + 1; true -> _50 end,\n                      if H == $7 -> _75 + 1; true -> _75 end,\n                      if H == $0 -> _00 + 1; true -> _00 end,\n                      NewMin)\n             end,\n    MinOps(Str, 0, 0, 0, 0, Len)."
}