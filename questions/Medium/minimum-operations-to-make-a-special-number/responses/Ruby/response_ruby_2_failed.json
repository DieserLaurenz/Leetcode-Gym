{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211384000,
    "question_id": "3046",
    "elapsed_time": 212,
    "compare_result": "110000000000000000000000001000000000000000000000000100000000000000000000000010000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111011111111111111111111111111111111111111111111111011101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111100000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"10\"",
    "expected_output": "1",
    "task_finish_time": 1707908003948,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 707,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1175040511",
    "input_formatted": "\"10\"",
    "input": "\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} num\n# @return {Integer}\ndef minimum_operations(num)\n    min_ops = num.length\n    ['00', '25', '50', '75'].each do |target|\n        i = num.length - 1\n        steps = 0\n        target.chars.reverse_each do |ch|\n            while i >= 0 && num[i] != ch\n                steps += 1\n                i -= 1\n            end\n            i -= 1\n            steps += 1 if i >= -1\n        end\n        min_ops = [min_ops, steps].min if i >= -1\n    end\n    min_ops - 2\nend"
}