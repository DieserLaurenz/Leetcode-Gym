{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2116000,
    "question_id": "3046",
    "elapsed_time": 15,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707908286123,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 31,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175043467",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_operations(num: String) -> i32 {\n        let bytes = num.as_bytes();\n        let n = bytes.len();\n        let mut result = i32::MAX;\n\n        for target in [25, 50, 75, 0].iter() {\n            let (mut i, mut j) = (n as i32 - 1, 2);\n            let mut ops = 0;\n            while i >= 0 && j > 0 {\n                let digit = (target / 10_i32.pow(2 - j)) % 10;\n                if bytes[i as usize] as i32 - b'0' as i32 == digit {\n                    j -= 1;\n                } else {\n                    ops += 1;\n                }\n                i -= 1;\n            }\n            if j == 0 {\n                result = result.min(ops + i + 1);\n            } else if *target == 0 && j == 2 {\n                result = result.min(n as i32 - 1);\n            }\n        }\n        result\n    }\n}"
}