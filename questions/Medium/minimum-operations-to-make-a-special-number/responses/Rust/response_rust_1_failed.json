{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2112000,
    "question_id": "3046",
    "elapsed_time": 12,
    "compare_result
    "code_output": "-2147483646",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707908244849,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175043038",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_operations(num: String) -> i32 {\n        let mut min_ops = i32::MAX;\n        let targets = vec![\"00\", \"25\", \"50\", \"75\"];\n        let bytes = num.as_bytes();\n\n        for &target in &targets {\n            let mut ops = 0i32; // Change type to i32\n            let mut j = bytes.len();\n\n            for &digit in target.as_bytes().iter().rev() {\n                j = match bytes[..j].iter().rposition(|&x| x == digit) {\n                    Some(pos) => {\n                        ops += (bytes[..j].len() - 1 - pos) as i32; // Cast usize to i32\n                        pos\n                    }\n                    None => {\n                        ops = i32::MAX;\n                        break;\n                    }\n                };\n            }\n\n            min_ops = min_ops.min(ops + (bytes.len() - j) as i32); // Keep as i32\n        }\n\n        if min_ops == i32::MAX { (num.len() as i32) - 1 } else { min_ops }\n    }\n}"
}