{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16408000,
    "question_id": "3046",
    "elapsed_time": 55,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1708829165975,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 31,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185333640",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minimumOperations(self, num: str) -> int:\n        # Function to check minimum deletions to form a number ending with given pair\n        def minDeletionsToEndWith(pair):\n            lastIndex = -1\n            deletions = 0\n            # Search for each digit in the pair from the end\n            for digit in reversed(pair):\n                found = False\n                for i in range(lastIndex - 1, -1, -1):\n                    if num[i] == digit:\n                        deletions += lastIndex - i - 1\n                        lastIndex = i\n                        found = True\n                        break\n                if not found:\n                    return float('inf')\n            return deletions + lastIndex  # Add remaining digits to the left\n\n        # Special cases if num ends with '00', '25', '50', '75'\n        res = min(\n            minDeletionsToEndWith('00'),\n            minDeletionsToEndWith('25'),\n            minDeletionsToEndWith('50'),\n            minDeletionsToEndWith('75'),\n        )\n\n        return len(num) - 2 if res == float('inf') else res  # If impossible, delete all but one digit"
}