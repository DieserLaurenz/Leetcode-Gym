{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9208000,
    "question_id": "3046",
    "elapsed_time": 19,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707898251141,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 126,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1174939184",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minimumOperations(string num) {\n        int n = num.size();\n        int ans = INT_MAX;\n        vector<vector<int>> pos(10);\n        for (int i = 0; i < n; ++i) {\n            pos[num[i] - '0'].push_back(i);\n        }\n        vector<pair<int, int>> special = {{0, 0}, {2, 5}, {5, 0}, {7, 5}};\n        for (auto &p : special) {\n            int last = -1, ops = 0;\n            bool valid = true;\n            for (int digit : {p.second, p.first}) {\n                auto it = upper_bound(pos[digit].begin(), pos[digit].end(), last);\n                if (it == pos[digit].end()) {\n                    valid = false;\n                    break;\n                } else {\n                    ops += it - pos[digit].begin();\n                    last = *it;\n                }\n            }\n            if (valid) {\n                ans = min(ans, ops + n - 1 - last);\n            }\n        }\n        return ans == INT_MAX ? n : ans;\n    }\n};"
}