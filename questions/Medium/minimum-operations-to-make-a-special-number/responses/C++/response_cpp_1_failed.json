{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8164000,
    "question_id": "3046",
    "elapsed_time": 16,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"10\"",
    "expected_output": "1",
    "task_finish_time": 1707898287888,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 800,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1174939562",
    "input_formatted": "\"10\"",
    "input": "\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minimumOperations(string num) {\n        int ans = num.size(); // Maximum operations needed\n        // Check for each combination that makes a number divisible by 25\n        vector<int> specials = {0, 25, 50, 75};\n        for (int special : specials) {\n            int first = special / 10; // First digit of the special number\n            int second = special % 10; // Second digit of the special number\n            int lastIdx = num.size() - 1;\n            int steps = 0;\n            bool foundSecond = false, foundFirst = false;\n            for (int i = num.size() - 1; i >= 0; --i) {\n                if (!foundSecond && (num[i] - '0') == second) {\n                    steps += lastIdx - i;\n                    lastIdx = i - 1;\n                    foundSecond = true;\n                } else if (foundSecond && !foundFirst && (num[i] - '0') == first) {\n                    steps += lastIdx - i;\n                    foundFirst = true;\n                    ans = min(ans, steps);\n                    break;\n                }\n            }\n        }\n        return ans == num.size() ? num.size() : ans; // If no combination found, return the size of the num as all digits need to be deleted\n    }\n};"
}