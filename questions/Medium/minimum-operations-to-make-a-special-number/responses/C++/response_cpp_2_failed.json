{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7956000,
    "question_id": "3046",
    "elapsed_time": 21,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707898325427,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1174939933",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minimumOperations(string num) {\n        int n = num.size();\n        int ans = n; // Start with the worst case, needing to remove all digits\n        for (int last_digit : {0, 5}) { // Only 0 and 5 are valid last digits for a number divisible by 25\n            for (int i = n - 1; i >= 0; --i) {\n                if (num[i] - '0' == last_digit) {\n                    for (int j = i - 1; j >= 0; --j) {\n                        int second_last_digit = num[j] - '0';\n                        if ((last_digit == 0 && second_last_digit == 0) || \n                            (last_digit == 5 && (second_last_digit == 2 || second_last_digit == 7))) {\n                            ans = min(ans, (n - j - 1) - 2); // Total operations = total length - current position - 2 digits we keep\n                            break;\n                        }\n                    }\n                    break; // Only consider the last occurrence of a valid last digit\n                }\n            }\n        }\n        return ans == n ? n - 1 : ans; // If no operation is done, the only operation needed is to remove the first digit to make it 0\n    }\n};"
}