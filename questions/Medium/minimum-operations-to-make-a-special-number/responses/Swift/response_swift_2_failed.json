{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15764000,
    "question_id": "3046",
    "elapsed_time": 28,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"10\"",
    "expected_output": "1",
    "task_finish_time": 1707907455373,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 800,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175034830",
    "input_formatted": "\"10\"",
    "input": "\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumOperations(_ num: String) -> Int {\n        var ans = num.count // Worst case: remove all digits\n        let nums = Array(num)\n        let n = nums.count\n\n        // Check for every pair if it can form a number divisible by 25\n        for i in 0..<n {\n            for j in i+1..<n {\n                // Checking every combination of two digits in the number\n                if ((nums[i] == \"2\" && nums[j] == \"5\") || \n                    (nums[i] == \"7\" && nums[j] == \"5\") || \n                    (nums[i] == \"0\" && nums[j] == \"0\") || \n                    (nums[i] == \"5\" && nums[j] == \"0\")) && j - i >= 1 {\n                    // Calculate operations needed: (digits between i and j) + (digits after j) = j - i - 1 + n - j - 1\n                    let ops = (j - i - 1) + (n - j - 1)\n                    ans = min(ans, ops)\n                }\n            }\n        }\n        return ans\n    }\n}"
}