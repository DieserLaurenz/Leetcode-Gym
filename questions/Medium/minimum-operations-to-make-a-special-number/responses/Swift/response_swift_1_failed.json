{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15616000,
    "question_id": "3046",
    "elapsed_time": 52,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707907413961,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 117,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175034414",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumOperations(_ num: String) -> Int {\n        let candidates = [\"00\", \"25\", \"50\", \"75\"]\n        var result = Int.max\n        for candidate in candidates {\n            var i = num.count - 1\n            var steps = 0\n            for c in candidate.reversed() {\n                while i >= 0 && num[num.index(num.startIndex, offsetBy: i)] != c {\n                    i -= 1\n                    steps += 1\n                }\n                if i >= 0 { i -= 1 } else { break }\n            }\n            if i >= -1 { // -1 when candidate is found at the beginning of num\n                result = min(result, steps + i + 1) // +1 because i starts from 0\n            }\n        }\n        return result == Int.max ? num.count : result\n    }\n}"
}