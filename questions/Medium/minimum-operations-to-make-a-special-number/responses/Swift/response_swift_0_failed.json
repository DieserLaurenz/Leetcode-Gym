{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16260000,
    "question_id": "3046",
    "elapsed_time": 53,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"2245047\"",
    "expected_output": "2",
    "task_finish_time": 1707907372372,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 124,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175033991",
    "input_formatted": "\"2245047\"",
    "input": "\"2245047\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumOperations(_ num: String) -> Int {\n        let suffixes = [\"00\", \"25\", \"50\", \"75\"]\n        var minOps = num.count // Maximum operations needed\n        for suffix in suffixes {\n            var ops = 0\n            var i = num.count - 1\n            for char in suffix.reversed() {\n                while i >= 0 && num[num.index(num.startIndex, offsetBy: i)] != char {\n                    ops += 1\n                    i -= 1\n                }\n                if i >= 0 { i -= 1 } else { ops = Int.max; break }\n            }\n            minOps = min(minOps, ops + i + 1)\n        }\n        return minOps\n    }\n}"
}