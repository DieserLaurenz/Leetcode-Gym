{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38892000,
    "question_id": "3046",
    "elapsed_time": 228,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"5\"",
    "expected_output": "1",
    "task_finish_time": 1707907551118,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 793,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175035775",
    "input_formatted": "\"5\"",
    "input": "\"5\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumOperations(num: String): Int {\n        val options = mutableListOf<Int>()\n        for (target in listOf(\"00\", \"25\", \"50\", \"75\")) {\n            var ops = 0\n            var j = num.lastIndex\n            for (i in target.lastIndex downTo 0) {\n                while (j >= 0 && num[j] != target[i]) {\n                    ops++\n                    j--\n                }\n                if (j < 0) break\n                j--\n            }\n            if (j >= -1) options.add(ops + target.length - 2)\n        }\n        return if (options.isEmpty()) num.length else options.minOrNull() ?: num.length\n    }\n}"
}