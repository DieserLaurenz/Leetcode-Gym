{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37956000,
    "question_id": "3046",
    "elapsed_time": 471,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"10\"",
    "expected_output": "1",
    "task_finish_time": 1707907517237,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 769,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175035415",
    "input_formatted": "\"10\"",
    "input": "\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumOperations(num: String): Int {\n        val suffixes = listOf(\"00\", \"25\", \"50\", \"75\")\n        var ans = num.length\n        for (suffix in suffixes) {\n            var i = num.length - 1\n            var step = 0\n            for (c in suffix.reversed()) {\n                while (i >= 0 && num[i] != c) {\n                    step++\n                    i--\n                }\n                if (i < 0) break\n                i--\n            }\n            if (i >= 0) ans = minOf(ans, step + suffix.length - 2)\n        }\n        return ans\n    }\n}"
}