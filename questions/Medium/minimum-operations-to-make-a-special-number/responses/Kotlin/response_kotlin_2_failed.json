{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34792000,
    "question_id": "3046",
    "elapsed_time": 212,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1\"",
    "expected_output": "1",
    "task_finish_time": 1707907599727,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 720,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175036304",
    "input_formatted": "\"1\"",
    "input": "\"1\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumOperations(num: String): Int {\n        val n = num.length\n        var ans = n // Maximum operations needed would be the length of the string.\n        for (i in n - 1 downTo 0) {\n            for (j in i - 1 downTo 0) {\n                if ((num[i] == '0' || num[i] == '5') && ((num[j] == '2' && num[i] == '5') || (num[j] == '7' && num[i] == '5') || (num[j] == '0' && num[i] == '0') || (num[j] == '5' && num[i] == '0'))) {\n                    // Calculate the number of operations needed to make the number special\n                    val ops = (n - 1 - i) + (i - 1 - j)\n                    ans = minOf(ans, ops)\n                }\n            }\n        }\n        return if (ans == n) n - 1 else ans // If no operations were updated, the minimum operations would be to delete all digits except one.\n    }\n}"
}