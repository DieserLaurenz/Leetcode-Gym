{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126032000,
    "question_id": "3192",
    "elapsed_time": 5015,
    "compare_result
    "code_output": "997159488",
    "std_output": "",
    "last_testcase": "53449611838892\n712958946092406\n6",
    "expected_output": "231850918",
    "task_finish_time": 1707700561025,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 459,
    "total_testcases": 863,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172736075",
    "input_formatted": "53449611838892, 712958946092406, 6",
    "input": "53449611838892\n712958946092406\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-xor-product a b n)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  (let ([modulus (+ (expt 10 9) 7)]\n        [max-x (expt 2 n)])\n    (define (xor-product x)\n      (modulo (* (bitwise-xor a x) (bitwise-xor b x)) modulus))\n    (define (find-max-xor-product current-max x)\n      (if (= x max-x)\n          current-max\n          (let ([current-value (xor-product x)])\n            (find-max-xor-product (max current-max current-value) (+ x 1)))))\n    (find-max-xor-product 0 0)))"
}