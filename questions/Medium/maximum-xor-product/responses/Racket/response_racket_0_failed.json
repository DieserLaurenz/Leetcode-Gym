{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "expt: arity mismatch;",
    "full_runtime_error": "expt: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 4\n  context...:\n   solution.rkt:1:0: maximum-xor-product\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:17:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100036000,
    "question_id": "3192",
    "elapsed_time": 285,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "12\n5\n4",
    "expected_output": "98",
    "task_finish_time": 1707700534898,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 863,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172735933",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-xor-product a b n)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  (let ([modulus (expt 10 9 + 7)]\n        [max-x (expt 2 n)])\n    (define (xor-product x)\n      (modulo (* (bitwise-xor a x) (bitwise-xor b x)) modulus))\n    (define (find-max-xor-product current-max x)\n      (if (= x max-x)\n          current-max\n          (let ([current-value (xor-product x)])\n            (find-max-xor-product (max current-max current-value) (+ x 1)))))\n    (find-max-xor-product 0 0)))"
}