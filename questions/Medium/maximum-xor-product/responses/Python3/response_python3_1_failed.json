{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16724000,
    "question_id": "3192",
    "elapsed_time": 51,
    "compare_result
    "code_output": "60",
    "std_output": "",
    "last_testcase": "12\n5\n4",
    "expected_output": "98",
    "task_finish_time": 1708807645344,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 124,
    "total_testcases": 863,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185159898",
    "input_formatted": "12, 5, 4",
    "input": "12\n5\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def maximumXorProduct(self, a: int, b: int, n: int) -> int:\n        mod = 10**9 + 7\n        max_val = (1 << n) - 1\n        a_xor_b = a ^ b\n        if a_xor_b >= max_val:\n            result = ((a ^ max_val) * (b ^ max_val)) % mod\n        else:\n            high_bit = max_val ^ (max_val >> 1)\n            if a_xor_b & high_bit:\n                result = ((a ^ (a_xor_b & max_val)) * (b ^ (a_xor_b & max_val))) % mod\n            else:\n                result = ((a ^ max_val) * (b ^ max_val)) % mod\n        return result"
}