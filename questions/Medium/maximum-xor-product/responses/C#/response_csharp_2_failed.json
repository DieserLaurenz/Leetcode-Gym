{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26952000,
    "question_id": "3192",
    "elapsed_time": 56,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "12\n5\n4",
    "expected_output": "98",
    "task_finish_time": 1707690698654,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 126,
    "total_testcases": 863,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1172669483",
    "input_formatted": "12, 5, 4",
    "input": "12\n5\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaximumXorProduct(long a, long b, int n) {\n        const int MOD = 1000000007;\n        long maxX = (1L << n) - 1;\n        long maxProduct = 0;\n\n        // Since a XOR maxX will give us the flipped bits of a in the range of maxX,\n        // and b XOR maxX will do the same for b, we calculate these to maximize the product.\n        long flippedA = a ^ maxX;\n        long flippedB = b ^ maxX;\n\n        maxProduct = (((flippedA % MOD) * (flippedB % MOD)) % MOD);\n\n        return (int)maxProduct;\n    }\n}"
}