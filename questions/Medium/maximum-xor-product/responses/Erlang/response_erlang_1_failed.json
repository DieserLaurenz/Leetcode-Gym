{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59660000,
    "question_id": "3192",
    "elapsed_time": 1434,
    "compare_result
    "code_output": "960",
    "std_output": "",
    "last_testcase": "12\n5\n4",
    "expected_output": "98",
    "task_finish_time": 1707700658862,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 863,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1172736726",
    "input_formatted": "12, 5, 4",
    "input": "12\n5\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_xor_product(A :: integer(), B :: integer(), N :: integer()) -> integer().\nmaximum_xor_product(A, B, N) ->\n    Mod = 1000000007,\n    MaxX = (1 bsl N) - 1,\n    HighBit = 1 bsl (N - 1),\n    AXorHighBit = (A bxor HighBit) rem Mod,\n    BXorHighBit = (B bxor HighBit) rem Mod,\n    MaxVal = \n        if\n            (A bxor MaxX) >= B -> ((AXorHighBit * BXorHighBit) rem Mod) * ((HighBit * 2) rem Mod) rem Mod;\n            true -> ((A * B) rem Mod) * ((HighBit * 2) rem Mod) rem Mod\n        end,\n    MaxVal."
}