{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66536000,
    "question_id": "3266",
    "elapsed_time": 428,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707284412155,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1168484081",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} s\n * @return {number}\n */\nvar maximumLength = function(s) {\n    let result = -1;\n    for (let char of new Set(s)) {\n        const regex = new RegExp(`${char}+`, 'g');\n        let matches = s.match(regex) || [];\n        let lengths = matches.map(match => match.length).filter(length => length >= 3);\n        if (lengths.length > 0) {\n            let localMax = Math.max(...lengths);\n            for (let len = localMax; len >= 1; len--) {\n                let count = lengths.filter(length => length >= len).length;\n                if (count >= 3) {\n                    result = Math.max(result, len);\n                    break;\n                }\n            }\n        }\n    }\n    return result;\n};"
}