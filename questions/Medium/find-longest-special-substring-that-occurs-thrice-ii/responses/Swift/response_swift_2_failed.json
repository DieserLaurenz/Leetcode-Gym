{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18236000,
    "question_id": "3266",
    "elapsed_time": 224,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707284811067,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1168489240",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumLength(_ s: String) -> Int {\n        var lastChar = Character(\" \")\n        var currentLength = 0\n        var maxPossibleLength = 0\n        var charOccurrences = [Character: [Int]]() // Character and lengths of its occurrences\n        \n        for char in s {\n            if char == lastChar {\n                currentLength += 1\n            } else {\n                if currentLength > 0 {\n                    charOccurrences[lastChar, default: []].append(currentLength)\n                    maxPossibleLength = max(maxPossibleLength, currentLength)\n                }\n                lastChar = char\n                currentLength = 1\n            }\n        }\n        charOccurrences[lastChar, default: []].append(currentLength) // Add last character occurrences\n        maxPossibleLength = max(maxPossibleLength, currentLength)\n        \n        var maxLength = -1\n        for (_, lengths) in charOccurrences {\n            let sortedLengths = lengths.sorted()\n            if sortedLengths.count >= 3 {\n                for i in sortedLengths.indices.reversed() where sortedLengths[i] >= 3 {\n                    if sortedLengths[i] > maxPossibleLength {\n                        break // No need to check further as we cannot get a longer special substring\n                    }\n                    let count = sortedLengths.filter { $0 >= sortedLengths[i] }.count\n                    if count >= 3 {\n                        maxLength = max(maxLength, sortedLengths[i])\n                        break // Found the longest possible for this character\n                    }\n                }\n            }\n        }\n        \n        return maxLength\n    }\n}"
}