{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51516000,
    "question_id": "3266",
    "elapsed_time": 300,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707284296872,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 32,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1168482501",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaximumLength(string s) {\n        int maxLength = -1;\n        for (char ch = 'a'; ch <= 'z'; ++ch) {\n            int start = -1, secondStart = -1, count = 0;\n            for (int i = 0; i < s.Length; ++i) {\n                if (s[i] == ch) {\n                    if (start == -1) start = i;\n                    count++;\n                } else {\n                    if (start != -1 && secondStart == -1) secondStart = i;\n                    if (i - start >= 3 && start != -1) {\n                        maxLength = Math.Max(maxLength, secondStart - start - 1);\n                    }\n                    if (secondStart != -1 && count >= 3) {\n                        start = secondStart;\n                        secondStart = -1;\n                        count = i - start;\n                        i--; // reprocess this character as the start of new sequence\n                    } else {\n                        start = -1;\n                        secondStart = -1;\n                        count = 0;\n                    }\n                }\n            }\n            if (count >= 3) {\n                maxLength = Math.Max(maxLength, s.Length - start - 1);\n            }\n        }\n        return maxLength;\n    }\n}"
}