{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 114328000,
    "question_id": "3266",
    "elapsed_time": 6017,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707294862258,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 24,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168608732",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_length(s :: String.t) :: integer\n  def maximum_length(s) do\n    1..String.length(s)\n    |> Enum.map(fn size ->\n      s\n      |> String.graphemes()\n      |> Enum.chunk_every(size, 1, :discard)\n      |> Enum.filter(&(&1 == List.duplicate([&1 |> List.first()], size)))\n      |> Enum.map(&Enum.join(&1, \"\"))\n    end)\n    |> Enum.reduce_while(-1, fn chunks, acc ->\n      case Enum.find(chunks, &String.contains?(s, String.duplicate(&1, 3))) do\n        nil -> {:halt, acc}\n        chunk -> {:cont, String.length(chunk)}\n      end\n    end)\n  end\nend"
}