{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (UndefinedFunctionError) function Map.fold/2 is undefined or private",
    "full_runtime_error": "Line 6: ** (UndefinedFunctionError) function Map.fold/2 is undefined or private\n    (elixir 1.15.7) Map.fold(%{\"a\" => [1]}, #Function<2.82754278/3 in Solution.maximum_length/1>)\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:6: Solution.maximum_length/1\n    solution.ex:32: Driver.consume_test_cases/2\n    solution.ex:20: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 75448000,
    "question_id": "3266",
    "elapsed_time": 389,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707294793623,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1168608133",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_length(s :: String.t) :: integer\n  def maximum_length(s) do\n    s\n    |> String.graphemes()\n    |> Enum.reduce({%{}, 0}, fn\n      x, {acc, max_len} ->\n        Map.update(acc, x, [1], fn [count] -> [count + 1] end)\n        |> Map.fold(fn k, [v], {acc_inner, max_inner} ->\n          if v >= 3, do: {acc_inner, max(max_inner, String.length(Enum.join_for(1..v, fn _ -> k end)))}, else: {acc_inner, max_inner}\n        end)\n    end)\n    |> elem(1)\n    |> (fn max_len -> if max_len > 0, do: max_len, else: -1 end).()\n  end\nend"
}