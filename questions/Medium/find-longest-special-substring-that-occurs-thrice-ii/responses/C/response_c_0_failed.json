{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6932000,
    "question_id": "3266",
    "elapsed_time": 3038,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcaba\"",
    "expected_output": "1",
    "task_finish_time": 1707284163715,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 868,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1168480768",
    "input_formatted": "\"abcaba\"",
    "input": "\"abcaba\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximumLength(char* s) {\n    int maxLen = -1, count = 1;\n    for (int i = 1; s[i] != '\\0'; ++i) {\n        if (s[i] == s[i - 1]) {\n            ++count;\n        } else {\n            if (count >= 3) {\n                maxLen = maxLen > count ? maxLen : count;\n            }\n            count = 1;\n        }\n    }\n    if (count >= 3) {\n        maxLen = maxLen > count ? maxLen : count;\n    }\n    for (int len = maxLen; len > 0; --len) {\n        for (int i = 0; s[i] != '\\0' && s[i + len - 1] != '\\0'; ++i) {\n            int valid = 1, occurrences = 0;\n            for (int j = i; j < i + len; ++j) {\n                if (s[j] != s[i]) {\n                    valid = 0;\n                    break;\n                }\n            }\n            if (valid) {\n                for (int k = 0; s[k + len - 1] != '\\0'; ++k) {\n                    int match = 1;\n                    for (int l = 0; l < len; ++l) {\n                        if (s[k + l] != s[i]) {\n                            match = 0;\n                            break;\n                        }\n                    }\n                    if (match) ++occurrences;\n                }\n                if (occurrences >= 3) return len;\n            }\n        }\n    }\n    return -1;\n}"
}