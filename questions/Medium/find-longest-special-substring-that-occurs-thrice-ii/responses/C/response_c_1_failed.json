{
    "status_code": 15,
    "lang": "c",
    "run_success": false,
    "runtime_error": "AddressSanitizer: heap-buffer-overflow on address 0x60200000000f at pc 0x559873bf4711 bp 0x7ffe367220d0 sp 0x7ffe367220c0",
    "full_runtime_error": "=================================================================\n==22==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000000f at pc 0x559873bf4711 bp 0x7ffe367220d0 sp 0x7ffe367220c0\nREAD of size 1 at 0x60200000000f thread T0\n    #2 0x7fc470e3ed8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #3 0x7fc470e3ee3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n0x60200000000f is located 1 bytes to the left of 5-byte region [0x602000000010,0x602000000015)\nallocated by thread T0 here:\n    #0 0x7fc47180e887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145\n    #3 0x7fc470e3ed8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa[fa]05 fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==22==ABORTING",
    "status_runtime": "N/A",
    "memory": 13236000,
    "question_id": "3266",
    "elapsed_time": 48,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707284192730,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1168481158",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "int maximumLength(char* s) {\n    int maxLen = -1;\n    for (char ch = 'a'; ch <= 'z'; ++ch) {\n        int count = 0;\n        for (int i = 0; s[i]; ++i) {\n            if (s[i] == ch) {\n                ++count;\n                if (count == 3) {\n                    int len = 0;\n                    while (s[i - len] == ch) ++len;\n                    maxLen = maxLen > len ? maxLen : len;\n                    break;\n                }\n            } else count = 0;\n        }\n    }\n    return maxLen;\n}"
}