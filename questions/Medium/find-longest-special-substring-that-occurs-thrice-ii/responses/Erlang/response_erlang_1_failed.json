{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68908000,
    "question_id": "3266",
    "elapsed_time": 5210,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"ereerrrererrrererre\"",
    "expected_output": "2",
    "task_finish_time": 1707294702500,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 735,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1168607181",
    "input_formatted": "\"ereerrrererrrererre\"",
    "input": "\"ereerrrererrrererre\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_length(S :: unicode:unicode_binary()) -> integer().\nmaximum_length(S) ->\n    MaxLen = byte_size(S),\n    Result = lists:foldl(fun(Len, Acc) ->\n                             Count = lists:foldl(fun(Start, Acc1) ->\n                                                     SubStr = binary:part(S, Start, Len),\n                                                     C = length([1 || Other <- lists:seq(0, MaxLen - Len),\n                                                                 Other =/= Start,\n                                                                 SubStr == binary:part(S, Other, Len)]),\n                                                     if C >= 2 -> Acc1 + 1; true -> Acc1 end\n                                                 end, 0, lists:seq(0, MaxLen - Len)),\n                             if Count > 0 -> [Len|Acc]; true -> Acc end\n                         end, [], lists:seq(1, MaxLen)),\n    case Result of\n        [] -> -1;\n        L -> lists:max(L)\n    end."
}