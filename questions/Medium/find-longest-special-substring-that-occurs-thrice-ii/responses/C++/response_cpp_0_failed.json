{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 33096000,
    "question_id": "3266",
    "elapsed_time": 328,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707283916986,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 68,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1168477603",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maximumLength(string s) {\n        int maxLen = -1;\n        for (char c = 'a'; c <= 'z'; ++c) {\n            int count = 0;\n            int currentMax = 0;\n            for (int i = 0, j = 0; j < s.size(); ++j) {\n                if (s[j] == c) {\n                    ++count;\n                    if (count >= 3) {\n                        currentMax = max(currentMax, j - i + 1);\n                        while (i < j && count >= 3) {\n                            if (s[i] == c) --count;\n                            ++i;\n                            if (count >= 3) currentMax = max(currentMax, j - i + 1);\n                        }\n                    }\n                } else {\n                    i = j + 1; // Move i to the next character after a non-matching character\n                    count = 0; // Reset count for the next sequence\n                }\n            }\n            maxLen = max(maxLen, currentMax);\n        }\n        return maxLen > 2 ? maxLen : -1;\n    }\n};"
}