{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9148000,
    "question_id": "3266",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"abcdef\"",
    "expected_output": "-1",
    "task_finish_time": 1707283978418,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 610,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1168478350",
    "input_formatted": "\"abcdef\"",
    "input": "\"abcdef\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maximumLength(string s) {\n        vector<int> freq(26, 0);\n        int n = s.length(), maxLen = -1;\n\n        for (int len = 1; len <= n; ++len) {\n            fill(freq.begin(), freq.end(), 0);\n            for (int i = 0; i < len; ++i) {\n                freq[s[i] - 'a']++;\n            }\n            for (int i = 0; i < 26; ++i) {\n                if (freq[i] == len) maxLen = max(maxLen, len);\n            }\n\n            for (int i = len; i < n; ++i) {\n                freq[s[i] - 'a']++;\n                freq[s[i - len] - 'a']--;\n                for (int j = 0; j < 26; ++j) {\n                    if (freq[j] == len) maxLen = max(maxLen, len);\n                }\n            }\n        }\n\n        for (int count = maxLen; count > 0; --count) {\n            int occurrences = 0;\n            fill(freq.begin(), freq.end(), 0);\n            for (int i = 0; i < count; ++i) {\n                freq[s[i] - 'a']++;\n            }\n            for (int i = 0; i < 26; ++i) {\n                if (freq[i] == count) occurrences++;\n            }\n\n            for (int i = count; i < n; ++i) {\n                freq[s[i] - 'a']++;\n                freq[s[i - count] - 'a']--;\n                for (int j = 0; j < 26; ++j) {\n                    if (freq[j] == count) occurrences++;\n                }\n                if (occurrences >= 3) return count;\n            }\n        }\n\n        return -1;\n    }\n};"
}