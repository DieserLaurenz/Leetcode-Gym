{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128412000,
    "question_id": "3266",
    "elapsed_time": 5016,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707294557455,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 24,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1168605677",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-length s)\n  (-> string? exact-integer?)\n  (let loop ((i 0) (max-len -1))\n    (if (>= i (string-length s))\n        max-len\n        (let loop2 ((j (+ i 1)) (count 1))\n          (if (>= j (string-length s))\n              (loop (+ i 1) max-len)\n              (if (char=? (string-ref s i) (string-ref s j))\n                  (begin\n                    (let ((new-len (+ 1 (- j i))))\n                      (if (and (>= count 2) (> new-len max-len))\n                          (loop (+ i 1) new-len)\n                          (loop2 (+ j 1) (if (= j (+ i new-len)) (+ count 1) count)))))\n                  (loop2 (+ j 1) count)))))))"
}