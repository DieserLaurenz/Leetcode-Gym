{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126008000,
    "question_id": "3266",
    "elapsed_time": 5016,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707294600769,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 156,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1168606148",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-length s)\n  (-> string? exact-integer?)\n  (let ([n (string-length s)])\n    (let loop ([len (quotient n 3)])\n      (if (= len 0) -1\n          (let check ([start 0] [found #f])\n            (if (or found (> (+ start (* 3 len)) n))\n                (if found len (loop (- len 1)))\n                (let ([sub (substring s start (+ start len))])\n                  (let loop2 ([i (+ start 1)])\n                    (if (> (+ i (* 2 len)) n)\n                        (check (+ start 1) found)\n                        (if (string=? sub (substring s i (+ i len)))\n                            (if (string=? sub (substring s (+ i len) (+ i (* 2 len))))\n                                (check (+ start 1) #t)\n                                (loop2 (+ i 1)))\n                            (loop2 (+ i 1))))))))))))"
}