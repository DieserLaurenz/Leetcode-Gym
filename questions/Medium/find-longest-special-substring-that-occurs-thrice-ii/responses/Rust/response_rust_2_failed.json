{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3256000,
    "question_id": "3266",
    "elapsed_time": 23,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"aaaa\"",
    "expected_output": "2",
    "task_finish_time": 1707294453814,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 155,
    "total_testcases": 906,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1168604671",
    "input_formatted": "\"aaaa\"",
    "input": "\"aaaa\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_length(s: String) -> i32 {\n        let mut max_length = -1;\n        let mut current_char = ' ';\n        let mut current_count = 0;\n        let mut lengths = vec![];\n\n        for c in s.chars().chain(std::iter::once(' ')) {\n            if c == current_char {\n                current_count += 1;\n            } else {\n                if current_count >= 3 {\n                    lengths.push((current_char, current_count));\n                }\n                current_char = c;\n                current_count = 1;\n            }\n        }\n\n        for (char, count) in lengths {\n            let mut temp_length = 1;\n            while temp_length * 3 <= count {\n                max_length = max_length.max(temp_length);\n                temp_length += 1;\n            }\n        }\n\n        max_length\n    }\n}"
}