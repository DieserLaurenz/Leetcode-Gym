{
    "acRate": 31.733615221987314,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2982",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find Longest Special Substring That Occurs Thrice II",
    "titleSlug": "find-longest-special-substring-that-occurs-thrice-ii",
    "topicTags": [
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Binary Search",
            "id": "VG9waWNUYWdOb2RlOjEx",
            "slug": "binary-search"
        },
        {
            "name": "Sliding Window",
            "id": "VG9waWNUYWdOb2RlOjU1ODIx",
            "slug": "sliding-window"
        },
        {
            "name": "Counting",
            "id": "VG9waWNUYWdOb2RlOjYxMDYy",
            "slug": "counting"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int maximumLength(string s) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int maximumLength(String s) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def maximumLength(self, s):         \"\"\"         :type s: str         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def maximumLength(self, s: str) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int maximumLength(char* s) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MaximumLength(string s) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @return {number}  */ var maximumLength = function(s) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maximumLength(s: string): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @return Integer      */     function maximumLength($s) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func maximumLength(_ s: String) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun maximumLength(s: String): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int maximumLength(String s) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maximumLength(s string) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @return {Integer} def maximum_length(s)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def maximumLength(s: String): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn maximum_length(s: String) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (maximum-length s)   (-> string? exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec maximum_length(S :: unicode:unicode_binary()) -> integer(). maximum_length(S) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec maximum_length(s :: String.t) :: integer   def maximum_length(s) do        end end"
        }
    ],
    "content": "You are given a string s that consists of lowercase English letters. A string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special. Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice. A substring is a contiguous non-empty sequence of characters within a string.  Example 1:  Input: s = \"aaaa\" Output: 2 Explanation: The longest special substring which occurs thrice is \"aa\": substrings \"aaaa\", \"aaaa\", and \"aaaa\". It can be shown that the maximum length achievable is 2.  Example 2:  Input: s = \"abcdef\" Output: -1 Explanation: There exists no special substring which occurs at least thrice. Hence return -1.  Example 3:  Input: s = \"abcaba\" Output: 1 Explanation: The longest special substring which occurs thrice is \"a\": substrings \"abcaba\", \"abcaba\", and \"abcaba\". It can be shown that the maximum length achievable is 1.   Constraints:  3 <= s.length <= 5 * 105 s consists of only lowercase English letters.  "
}