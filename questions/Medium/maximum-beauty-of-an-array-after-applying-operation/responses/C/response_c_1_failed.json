{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8844000,
    "question_id": "2891",
    "elapsed_time": 3011,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707578142054,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 309,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171492695",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximumBeauty(int* nums, int numsSize, int k) {\n    int maxBeauty = 1;\n    int* minMax = (int*)malloc(sizeof(int) * numsSize * 2); // Store min and max after applying operation\n    for (int i = 0; i < numsSize; ++i) {\n        minMax[i * 2] = nums[i] - k; // Min value\n        minMax[i * 2 + 1] = nums[i] + k; // Max value\n    }\n\n    for (int i = 0; i < numsSize; ++i) {\n        int currentMax = 1;\n        for (int j = i + 1; j < numsSize; ++j) {\n            if (!(minMax[j * 2] > minMax[i * 2 + 1] || minMax[j * 2 + 1] < minMax[i * 2])) {\n                // If overlapping ranges\n                currentMax++;\n                maxBeauty = maxBeauty > currentMax ? maxBeauty : currentMax;\n            }\n        }\n    }\n\n    free(minMax);\n    return maxBeauty;\n}"
}