{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11916000,
    "question_id": "2891",
    "elapsed_time": 3009,
    "compare_result": "01111110111111111010111001011011110111011011001010000001111110101110111000111011010010101000100011100110111111000110010000010010011011000001000000001010000000010110000111100010000000100101000100000111000101010011000001000010000001110000000000001010000101000100110010000001000001000000000000000000000100000000010001010010000000000000000000010001000000100000100001100101000000000001000000010100010000000000000000000000100000000001000001010000000001100000000000000000000100010000000000100001000000000000000010111101100101110100100011010000101111100010010000000000000000000000000000000000000000000000000000100011000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707578174676,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 170,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171493028",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximumBeauty(int* nums, int numsSize, int k) {\n    int maxBeauty = 1;\n    int* sorted = (int*)malloc(numsSize * sizeof(int));\n    memcpy(sorted, nums, numsSize * sizeof(int));\n    qsort(sorted, numsSize, sizeof(int), (int (*)(const void*, const void*))strcmp);\n\n    for (int i = 0; i < numsSize; i++) {\n        int count = 1;\n        for (int j = i + 1; j < numsSize; j++) {\n            if (sorted[j] - sorted[i] <= k) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        if (count > maxBeauty) {\n            maxBeauty = count;\n        }\n    }\n\n    free(sorted);\n    return maxBeauty;\n}"
}