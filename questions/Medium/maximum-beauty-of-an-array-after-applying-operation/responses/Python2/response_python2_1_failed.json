{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18176000,
    "question_id": "2891",
    "elapsed_time": 11008,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1708787501926,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 153,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184901529",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumBeauty(self, nums, k):\n        nums.sort()\n        max_beauty, sum_diff, left = 1, 0, 0\n        for right in range(1, len(nums)):\n            sum_diff += (nums[right] - nums[right - 1]) * (right - left)\n            while sum_diff > k:\n                sum_diff -= nums[right] - nums[left]\n                left += 1\n            max_beauty = max(max_beauty, right - left + 1)\n        return max_beauty\n\n    def maximumBeauty(self, nums, k):\n        nums.sort()\n        freq = [0] * (2 * 10**5 + 1)  # Frequency array\n        l, max_len = 0, 0\n        for r in range(len(nums)):\n            freq[nums[r]] += 1\n            while nums[r] - nums[l] > k:\n                freq[nums[l]] -= 1\n                l += 1\n            max_len = max(max_len, sum(freq[nums[l]:nums[r]+1]))\n        return max_len"
}