{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10136000,
    "question_id": "2891",
    "elapsed_time": 241,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707587526858,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 125,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171611181",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumBeauty(nums []int, k int) int {\n    sort.Ints(nums)\n    maxLen, sum, start := 1, 0, 0\n    for end := 1; end < len(nums); end++ {\n        sum += (nums[end] - nums[end-1]) * (end - start)\n        for sum > k {\n            sum -= nums[end] - nums[start]\n            start++\n        }\n        maxLen = max(maxLen, end-start+1)\n    }\n    return maxLen\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}