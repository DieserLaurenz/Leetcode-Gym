{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "<=: contract violation",
    "full_runtime_error": "<=: contract violation\n  expected: real?\n  given: '(6)\n  context...:\n   solution.rkt:8:32\n   /usr/share/racket/collects/racket/private/list.rkt:248:4: foldl\n   solution.rkt:1:0: maximum-beauty\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:20:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99904000,
    "question_id": "2891",
    "elapsed_time": 258,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707587933537,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1171616853",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-beauty nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let ([adjusted (map (lambda (x) (list (- x k) (+ x k))) nums)])\n    (let loop ([acc adjusted] [max-beauty 0])\n      (if (null? acc)\n          max-beauty\n          (let ([current (car acc)] [rest (cdr acc)])\n            (let ([count (foldl (lambda (range acc)\n                                   (if (or (<= (car range) (car current) (cdr current))\n                                           (<= (car current) (car range) (cdr range)))\n                                       (+ acc 1)\n                                       acc))\n                                 1\n                                 rest)])\n              (loop rest (max max-beauty count))))))))"
}