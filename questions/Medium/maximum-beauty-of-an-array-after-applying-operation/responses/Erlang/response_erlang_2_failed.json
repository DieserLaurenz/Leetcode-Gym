{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 93784000,
    "question_id": "2891",
    "elapsed_time": 5124,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707588114071,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 75,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1171619271",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_beauty(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_beauty(Nums, K) ->\n    Sorted = lists:sort(Nums),\n    {_, MaxBeauty} = lists:foldl(\n        fun(X, {Start, Max}) ->\n            End = X + 2*K,\n            NewStart = case Sorted -- [Start] of\n                            [] -> Start;\n                            [H|_] when H =< End -> H;\n                            _ -> Start\n                        end,\n            NewMax = max(Max, length([Y || Y <- Sorted, Y >= Start, Y =< End])),\n            {NewStart, NewMax}\n        end,\n        {hd(Sorted), 0},\n        Sorted\n    ),\n    MaxBeauty."
}