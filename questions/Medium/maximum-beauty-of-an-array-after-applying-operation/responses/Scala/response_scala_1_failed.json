{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 77884000,
    "question_id": "2891",
    "elapsed_time": 1680,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707587729980,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 157,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1171613989",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumBeauty(nums: Array[Int], k: Int): Int = {\n        val freqMap = scala.collection.mutable.Map[Int, Int]()\n        nums.foreach(n => freqMap(n) = freqMap.getOrElse(n, 0) + 1)\n        val uniqueSortedNums = nums.distinct.sorted\n        val prefixSum = Array.fill(uniqueSortedNums.length)(0)\n        prefixSum(0) = freqMap(uniqueSortedNums(0))\n        for (i <- 1 until uniqueSortedNums.length) {\n            prefixSum(i) = prefixSum(i - 1) + freqMap(uniqueSortedNums(i))\n        }\n        var maxBeauty = 1\n        for (i <- uniqueSortedNums.indices) {\n            var l = i\n            var r = uniqueSortedNums.length - 1\n            var best = i\n            while (l <= r) {\n                val mid = l + (r - l) / 2\n                if (uniqueSortedNums(mid) - uniqueSortedNums(i) <= k) {\n                    best = mid\n                    l = mid + 1\n                } else {\n                    r = mid - 1\n                }\n            }\n            maxBeauty = maxBeauty.max(prefixSum(best) - prefixSum(i) + freqMap(uniqueSortedNums(i)))\n        }\n        maxBeauty\n    }\n}"
}