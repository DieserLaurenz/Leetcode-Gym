{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 8: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 8: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:8: anonymous fn/4 in Solution.maximum_beauty/2\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:7: Solution.maximum_beauty/2\n    solution.ex:35: Driver.consume_test_cases/2\n    solution.ex:21: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 74156000,
    "question_id": "2891",
    "elapsed_time": 371,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707588221851,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171620661",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_beauty(nums :: [integer], k :: integer) :: integer\n  def maximum_beauty(nums, k) do\n    nums = Enum.map(nums, &(&1 - k))\n    |> Enum.sort()\n\n    max_beauty = Enum.reduce(nums, {0, 0}, fn x, {max_beauty, first} ->\n      if x - nums[first] > 2 * k do\n        {max_beauty, first + 1}\n      else\n        {max(max_beauty, Enum.count(first..(length(nums) - 1))), first}\n      end\n    end)\n\n    elem(max_beauty, 0)\n  end\nend"
}