{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 189200000,
    "question_id": "2891",
    "elapsed_time": 1440,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707588170339,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171620006",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_beauty(nums :: [integer], k :: integer) :: integer\n  def maximum_beauty(nums, k) do\n    nums\n    |> Enum.map(&({&1 - k, &1 + k}))\n    |> Enum.sort()\n    |> Enum.reduce({0, -1}, fn {low, high}, {max_len, last_high} ->\n      if low <= last_high do\n        {max_len, max(last_high, high)}\n      else\n        {max_len + 1, high}\n      end\n    end)\n    |> elem(0)\n  end\nend"
}