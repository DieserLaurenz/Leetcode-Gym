{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 192296000,
    "question_id": "2891",
    "elapsed_time": 1343,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707588199495,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171620394",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_beauty(nums :: [integer], k :: integer) :: integer\n  def maximum_beauty(nums, k) do\n    nums\n    |> Enum.map(fn x -> {x - k, x + k} end)\n    |> List.flatten()\n    |> Enum.sort()\n    |> Enum.reduce(%{count: 0, current: nil, max_count: 0}, fn x, acc ->\n      cond do\n        acc.current == x ->\n          %{acc | count: acc.count + 1, max_count: max(acc.max_count, acc.count + 1)}\n        true ->\n          %{acc | count: 1, current: x, max_count: max(acc.max_count, 1)}\n      end\n    end)\n    |> Map.get(:max_count)\n  end\nend"
}