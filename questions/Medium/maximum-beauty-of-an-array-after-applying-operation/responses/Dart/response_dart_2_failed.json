{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 207348000,
    "question_id": "2891",
    "elapsed_time": 5017,
    "compare_result": "01111110111111111010111001011011110111011011001010000001111110101110111000111011010010101000100011100110111111000110010000010010011011000001000000001010000000010110000111100010000000100101000100000111000101010011000001000010000001110000000000001010000101000100110010000001000001000000000000000000000100000000010001010010000000000000000000010001000000100000100001100101000000000001000000010100010000000000000000000000100000000001000001010000000001100000000000000000000100010000000000100001000000000000000000000001000100010000000000000000100000000000000001001100000000000000000000000001001000001000000000000000000010000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707587470656,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 154,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1171610344",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maximumBeauty(List<int> nums, int k) {\n    Map<int, int> count = {};\n    for (var num in nums) {\n      count[num] = (count[num] ?? 0) + 1;\n    }\n    List<int> uniqueNums = count.keys.toList();\n    uniqueNums.sort();\n    List<int> prefix = List.filled(uniqueNums.length, 0);\n    prefix[0] = count[uniqueNums[0]]!;\n    for (int i = 1; i < uniqueNums.length; i++) {\n      prefix[i] = prefix[i - 1] + count[uniqueNums[i]]!;\n    }\n    int res = 0;\n    for (int i = 0; i < uniqueNums.length; i++) {\n      int j = i;\n      while (j < uniqueNums.length && uniqueNums[j] - uniqueNums[i] <= k) {\n        j++;\n      }\n      int currentBeauty = j > 0 ? prefix[j - 1] - (i > 0 ? prefix[i - 1] : 0) : 0;\n      res = max(res, currentBeauty);\n    }\n    return res;\n  }\n\n  int max(int a, int b) => a > b ? a : b;\n}"
}