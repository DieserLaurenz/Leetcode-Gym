{
    "status_code": 15,
    "lang": "java",
    "run_success": false,
    "runtime_error": "Line 15: java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length 4\n  at line 15, Solution.maximumBeauty\n  at line 54, __DriverSolution__.__helper__\n  at line 87, __Driver__.main",
    "status_runtime": "N/A",
    "memory": 40692000,
    "question_id": "2891",
    "elapsed_time": 139,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707577941521,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171490513",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maximumBeauty(int[] nums, int k) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        long[] prefixSum = new long[n+1];\n        for (int i = 1; i <= n; i++) {\n            prefixSum[i] = prefixSum[i-1] + nums[i-1];\n        }\n\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            int l = i, r = n, best = i;\n            while (l <= r) {\n                int m = (l + r) / 2;\n                long cost = (long) (m - i + 1) * nums[m] - (prefixSum[m + 1] - prefixSum[i]);\n                if (cost <= k) {\n                    best = m;\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n            res = Math.max(res, best - i + 1);\n        }\n\n        return res;\n    }\n}"
}