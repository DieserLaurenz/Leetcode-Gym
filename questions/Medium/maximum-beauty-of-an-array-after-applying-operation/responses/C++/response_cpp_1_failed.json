{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 32912000,
    "question_id": "2891",
    "elapsed_time": 46,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[47,76,100,51]\n27",
    "expected_output": "4",
    "task_finish_time": 1707577798972,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 435,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171488919",
    "input_formatted": "[47,76,100,51], 27",
    "input": "[47,76,100,51]\n27",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maximumBeauty(vector<int>& nums, int k) {\n        sort(nums.begin(), nums.end());\n        vector<int> prefixSum(nums.size() + 1, 0);\n        for (int i = 1; i <= nums.size(); ++i) {\n            prefixSum[i] = prefixSum[i - 1] + nums[i - 1];\n        }\n\n        int result = 1;\n        for (int i = 0; i < nums.size(); ++i) {\n            int low = i, high = nums.size() - 1, best = i;\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                int totalK = k * (mid - i + 1);\n                int sumRange = prefixSum[mid + 1] - prefixSum[i];\n                if (totalK + sumRange >= nums[mid] * (mid - i + 1)) {\n                    best = mid;\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n            result = max(result, best - i + 1);\n        }\n        return result;\n    }\n};"
}