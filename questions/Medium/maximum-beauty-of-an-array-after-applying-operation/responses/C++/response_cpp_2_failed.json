{
    "status_code": 15,
    "lang": "cpp",
    "run_success": false,
    "runtime_error": "AddressSanitizer: heap-buffer-overflow on address 0x5020000000a0 at pc 0x5642fefbaf05 bp 0x7ffe61c972f0 sp 0x7ffe61c972e8",
    "full_runtime_error": "=================================================================\n==23==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x5020000000a0 at pc 0x5642fefbaf05 bp 0x7ffe61c972f0 sp 0x7ffe61c972e8\nREAD of size 4 at 0x5020000000a0 thread T0\n    #2 0x7f3d4baaad8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\n    #3 0x7f3d4baaae3f  (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\n0x5020000000a0 is located 0 bytes after 16-byte region [0x502000000090,0x5020000000a0)\nallocated by thread T0 here:\n    #6 0x7f3d4baaad8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\nShadow bytes around the buggy address:\n  0x501ffffffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x501ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x501fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x501fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x502000000000: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa\n=>0x502000000080: fa fa 00 00[fa]fa fa fa fa fa fa fa fa fa fa fa\n  0x502000000100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x502000000180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x502000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x502000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x502000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==23==ABORTING",
    "status_runtime": "N/A",
    "memory": 8204000,
    "question_id": "2891",
    "elapsed_time": 12,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707577829261,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1171489257",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int maximumBeauty(vector<int>& nums, int k) {\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        vector<long long> prefix(n + 1, 0);\n        for (int i = 1; i <= n; ++i) prefix[i] = prefix[i - 1] + nums[i - 1];\n        \n        int res = 1;\n        for (int i = 0; i < n; ++i) {\n            int l = i, r = n, best = i;\n            while (l <= r) {\n                int m = l + (r - l) / 2;\n                long long need = (long long)nums[m] * (m - i + 1) - (prefix[m + 1] - prefix[i]);\n                if (need <= k) {\n                    best = m;\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n            res = max(res, best - i + 1);\n        }\n        return res;\n    }\n};"
}