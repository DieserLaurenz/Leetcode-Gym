{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3104000,
    "question_id": "2891",
    "elapsed_time": 2013,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,6,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707587875305,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 153,
    "total_testcases": 620,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1171616005",
    "input_formatted": "[4,6,1,2], 2",
    "input": "[4,6,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_beauty(nums: Vec<i32>, k: i32) -> i32 {\n        use std::collections::HashMap;\n\n        let mut count_map = HashMap::new();\n        for &num in &nums {\n            *count_map.entry(num).or_insert(0) += 1;\n        }\n\n        let mut unique_nums: Vec<_> = count_map.keys().cloned().collect();\n        unique_nums.sort_unstable();\n        let mut max_beauty = 1;\n        let mut left = 0;\n\n        for right in 0..unique_nums.len() {\n            while unique_nums[right] - unique_nums[left] > k {\n                left += 1;\n            }\n\n            let mut beauty = 0;\n            for i in left..=right {\n                beauty += count_map[&unique_nums[i]];\n            }\n\n            max_beauty = max_beauty.max(beauty);\n        }\n\n        max_beauty\n    }\n}"
}