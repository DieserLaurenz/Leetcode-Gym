{
    "acRate": 87.56624541377904,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2610",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Convert an Array Into a 2D Array With Conditions",
    "titleSlug": "convert-an-array-into-a-2d-array-with-conditions",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        }
    ],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<vector<int>> findMatrix(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public List<List<Integer>> findMatrix(int[] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def findMatrix(self, nums):         \"\"\"         :type nums: List[int]         :rtype: List[List[int]]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def findMatrix(self, nums: List[int]) -> List[List[int]]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Return an array of arrays of size *returnSize.  * The sizes of the arrays are returned as *returnColumnSizes array.  * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().  */ int** findMatrix(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public IList<IList<int>> FindMatrix(int[] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {number[][]}  */ var findMatrix = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findMatrix(nums: number[]): number[][] {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Integer[][]      */     function findMatrix($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func findMatrix(_ nums: [Int]) -> [[Int]] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun findMatrix(nums: IntArray): List<List<Int>> {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<List<int>> findMatrix(List<int> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findMatrix(nums []int) [][]int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Integer[][]} def find_matrix(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def findMatrix(nums: Array[Int]): List[List[Int]] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn find_matrix(nums: Vec<i32>) -> Vec<Vec<i32>> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (find-matrix nums)   (-> (listof exact-integer?) (listof (listof exact-integer?)))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec find_matrix(Nums :: [integer()]) -> [[integer()]]. find_matrix(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec find_matrix(nums :: [integer]) :: [[integer]]   def find_matrix(nums) do    end end"
        }
    ],
    "content": "You are given an integer array nums. You need to create a 2D array from nums satisfying the following conditions:  The 2D array should contain only the elements of the array nums. Each row in the 2D array contains distinct integers. The number of rows in the 2D array should be minimal.  Return the resulting array. If there are multiple answers, return any of them. Note that the 2D array can have a different number of elements on each row.  Example 1:  Input: nums = [1,3,4,1,2,3,1] Output: [[1,3,4,2],[1,3],[1]] Explanation: We can create a 2D array that contains the following rows: - 1,3,4,2 - 1,3 - 1 All elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer. It can be shown that we cannot have less than 3 rows in a valid array. Example 2:  Input: nums = [1,2,3,4] Output: [[4,3,2,1]] Explanation: All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.   Constraints:  1 <= nums.length <= 200 1 <= nums[i] <= nums.length  "
}