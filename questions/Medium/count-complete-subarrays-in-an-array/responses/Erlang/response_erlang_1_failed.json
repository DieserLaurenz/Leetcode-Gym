{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60472000,
    "question_id": "2856",
    "elapsed_time": 1724,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,3,1,2,2]",
    "expected_output": "4",
    "task_finish_time": 1707075500193,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 7,
    "total_testcases": 1074,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1166147950",
    "input_formatted": "[1,3,1,2,2]",
    "input": "[1,3,1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_complete_subarrays(Nums :: [integer()]) -> integer().\ncount_complete_subarrays(Nums) ->\n    DistinctElements = lists:usort(Nums),\n    TotalDistinct = length(DistinctElements),\n    count_subarrays(Nums, DistinctElements, TotalDistinct, 0).\n\ncount_subarrays([], _, _, Count) ->\n    Count;\ncount_subarrays(Nums, DistinctElements, TotalDistinct, Count) ->\n    count_subarrays(Nums, DistinctElements, [], TotalDistinct, 0, Count).\n\ncount_subarrays([], _, _, _, SubarrayCount, Count) ->\n    Count + SubarrayCount;\ncount_subarrays([H|T], DistinctElements, CurrentDistinct, TotalDistinct, CurrentLength, Count) ->\n    NewCurrentDistinct = lists:usort([H|CurrentDistinct]),\n    NewCount = if length(NewCurrentDistinct) == TotalDistinct -> 1; true -> 0 end,\n    count_subarrays(T, DistinctElements, NewCurrentDistinct, TotalDistinct, CurrentLength + 1, Count + NewCount)."
}