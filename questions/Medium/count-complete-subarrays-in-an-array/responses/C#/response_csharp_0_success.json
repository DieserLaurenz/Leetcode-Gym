{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "353 ms",
    "memory": 123344000,
    "question_id": "2856",
    "elapsed_time": 598,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707074607882,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1074,
    "total_testcases": 1074,
    "runtime_percentile": 8.0,
    "status_memory": "123.3 MB",
    "memory_percentile": 8.0,
    "pretty_lang": "C#",
    "submission_id": "1166137338",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int CountCompleteSubarrays(int[] nums) {\n        int totalCount = 0;\n        int n = nums.Length;\n        Dictionary<int, int> freq = new Dictionary<int, int>();\n\n        foreach (int num in nums) {\n            if (!freq.ContainsKey(num)) {\n                freq[num] = 1;\n            } else {\n                freq[num]++;\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            Dictionary<int, int> subFreq = new Dictionary<int, int>();\n            for (int j = i; j < n; j++) {\n                if (!subFreq.ContainsKey(nums[j])) {\n                    subFreq[nums[j]] = 1;\n                } else {\n                    subFreq[nums[j]]++;\n                }\n\n                if (subFreq.Count == freq.Count) {\n                    bool isComplete = true;\n                    foreach (var item in subFreq) {\n                        if (!freq.ContainsKey(item.Key) || freq[item.Key] < item.Value) {\n                            isComplete = false;\n                            break;\n                        }\n                    }\n                    if (isComplete) totalCount++;\n                }\n            }\n        }\n\n        return totalCount;\n    }\n}"
}