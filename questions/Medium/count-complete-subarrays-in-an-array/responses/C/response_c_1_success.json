{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "50 ms",
    "memory": 6200000,
    "question_id": "2856",
    "elapsed_time": 93,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707074552888,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1074,
    "total_testcases": 1074,
    "runtime_percentile": 50.0,
    "status_memory": "6.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "C",
    "submission_id": "1166136666",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int countCompleteSubarrays(int* nums, int numsSize) {\n    int distinctCount = 0, count = 0;\n    int freq[2001] = {0};\n\n    // Count distinct elements in the whole array\n    for (int i = 0; i < numsSize; i++) {\n        if (freq[nums[i]] == 0) distinctCount++;\n        freq[nums[i]]++;\n    }\n\n    for (int i = 0; i < numsSize; i++) {\n        int tempFreq[2001] = {0};\n        int tempDistinct = 0;\n        for (int j = i; j < numsSize; j++) {\n            if (tempFreq[nums[j]] == 0) tempDistinct++;\n            tempFreq[nums[j]]++;\n            if (tempDistinct == distinctCount) {\n                count += numsSize - j;\n                break;\n            }\n        }\n    }\n\n    return count;\n}"
}