{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44524000,
    "question_id": "2856",
    "elapsed_time": 4016,
    "compare_result": "010000001000000001000000010010100000101100100001000011100010000000001011000001000100000000000001000000000010000000000000000100110010000000001001001010100001001000000000000001000000001000000101100010000010001000000011000100000000001000000100010000001000001000000010000001000000000010011000000000100101001010000000001000100000001000000000000100000000000000000000000000000000101010011000110000100000001000000000011001000000001000000011000110000001010011010000000001000000000000000000000000000001000000011000000000000001100001000000000111100000000000000000000000000000000100000000100000101000010101110000001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[1,3,1,2,2]",
    "expected_output": "4",
    "task_finish_time": 1707074409590,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 1074,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1166134799",
    "input_formatted": "[1,3,1,2,2]",
    "input": "[1,3,1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int countCompleteSubarrays(int[] nums) {\n        int totalSubarrays = 0;\n        int n = nums.length;\n        for (int i = 0; i < n; i++) {\n            int[] freq = new int[2001];\n            int distinctCount = 0;\n            for (int j = i; j < n; j++) {\n                if (freq[nums[j]] == 0) distinctCount++;\n                freq[nums[j]]++;\n                if (distinctCount == getDistinctCount(nums, i, j, freq)) totalSubarrays++;\n            }\n        }\n        return totalSubarrays;\n    }\n\n    private int getDistinctCount(int[] nums, int start, int end, int[] freq) {\n        int distinct = 0;\n        for (int i = 1; i <= 2000; i++) {\n            if (freq[i] > 0) distinct++;\n        }\n        return distinct;\n    }\n}"
}