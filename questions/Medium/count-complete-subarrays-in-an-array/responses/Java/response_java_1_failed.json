{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44684000,
    "display_runtime": "24",
    "question_id": "2856",
    "elapsed_time": 200,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,3,1,2,2]",
    "expected_output": "4",
    "task_finish_time": 1707074437878,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 84,
    "total_testcases": 1074,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1166135254",
    "input_formatted": "[1,3,1,2,2]",
    "input": "[1,3,1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int countCompleteSubarrays(int[] nums) {\n        int res = 0;\n        int n = nums.length;\n        int[] lastPos = new int[2001];\n        int[] prefix = new int[n + 1];\n        for (int i = 0; i <= 2000; ++i) lastPos[i] = -1;\n        \n        for (int i = 0; i < n; ++i) {\n            prefix[i + 1] = prefix[i] | (1 << (nums[i] % 30));\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            int mask = 0;\n            for (int j = i; j < n; ++j) {\n                mask |= 1 << (nums[j] % 30);\n                if (mask == (prefix[j + 1] ^ prefix[i])) ++res;\n            }\n        }\n        \n        return res;\n    }\n}"
}