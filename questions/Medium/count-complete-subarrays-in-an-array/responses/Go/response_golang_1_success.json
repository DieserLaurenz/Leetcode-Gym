{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "641 ms",
    "memory": 19984000,
    "question_id": "2856",
    "elapsed_time": 688,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707075102364,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1074,
    "total_testcases": 1074,
    "runtime_percentile": 17.39159999999999,
    "status_memory": "20 MB",
    "memory_percentile": 8.695799999999998,
    "pretty_lang": "Go",
    "submission_id": "1166143332",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func countCompleteSubarrays(nums []int) int {\n    distinctTotal := make(map[int]int)\n    for _, v := range nums {\n        distinctTotal[v]++\n    }\n    distinctCount := len(distinctTotal)\n\n    count := 0\n    for start := 0; start < len(nums); start++ {\n        distinctCurrent := make(map[int]int)\n        distinctNums := 0\n        for end := start; end < len(nums); end++ {\n            if _, found := distinctCurrent[nums[end]]; !found {\n                distinctNums++\n            }\n            distinctCurrent[nums[end]]++\n            if distinctNums == distinctCount {\n                count++\n            }\n        }\n    }\n\n    return count\n}"
}