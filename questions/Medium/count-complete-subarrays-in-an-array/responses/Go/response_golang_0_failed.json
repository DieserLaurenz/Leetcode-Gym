{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6972000,
    "question_id": "2856",
    "elapsed_time": 57,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,3,1,2,2]",
    "expected_output": "4",
    "task_finish_time": 1707075065503,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 522,
    "total_testcases": 1074,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1166142883",
    "input_formatted": "[1,3,1,2,2]",
    "input": "[1,3,1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countCompleteSubarrays(nums []int) int {\n    totalElements := make(map[int]int)\n    for _, num := range nums {\n        totalElements[num]++\n    }\n    distinctCount := len(totalElements)\n\n    count, left := 0, 0\n    currentElements := make(map[int]int)\n    for right := 0; right < len(nums); right++ {\n        currentElements[nums[right]]++\n        for len(currentElements) == distinctCount {\n            if currentElements[nums[left]] == totalElements[nums[left]] {\n                count += len(nums) - right\n                currentElements[nums[left]]--\n                if currentElements[nums[left]] == 0 {\n                    delete(currentElements, nums[left])\n                }\n                left++\n                break\n            }\n            currentElements[nums[left]]--\n            if currentElements[nums[left]] == 0 {\n                delete(currentElements, nums[left])\n            }\n            left++\n        }\n    }\n    return count\n}"
}