{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "8 ms",
    "memory": 2220000,
    "question_id": "2856",
    "elapsed_time": 17,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707075270848,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1074,
    "total_testcases": 1074,
    "runtime_percentile": 25.0,
    "status_memory": "2.2 MB",
    "memory_percentile": 75.0,
    "pretty_lang": "Rust",
    "submission_id": "1166145326",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_complete_subarrays(nums: Vec<i32>) -> i32 {\n        use std::collections::HashMap;\n\n        let mut count = 0;\n        let total_distinct = nums.iter().collect::<std::collections::HashSet<_>>().len();\n        let mut freq_map = HashMap::new();\n        let mut j = 0;\n        for i in 0..nums.len() {\n            while j < nums.len() && freq_map.len() < total_distinct {\n                *freq_map.entry(nums[j]).or_insert(0) += 1;\n                j += 1;\n            }\n            if freq_map.len() == total_distinct {\n                count += (nums.len() - j + 1) as i32;\n            }\n            *freq_map.get_mut(&nums[i]).unwrap() -= 1;\n            if freq_map[&nums[i]] == 0 {\n                freq_map.remove(&nums[i]);\n            }\n        }\n        count\n    }\n}"
}