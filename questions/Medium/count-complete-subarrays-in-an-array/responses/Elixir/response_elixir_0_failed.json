{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 71076000,
    "question_id": "2856",
    "elapsed_time": 6013,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[29,29,607,585,1918,801,1565,1993,1509,428,616,892,87,1482,8,1079,29,460,109,1788,1546,59,502,29,388,59,1377,1875,1480,388,1546,1546,1767,87,76,894,664,903,1241,1537,696,1560,616,428,1352,1686,307,825,1392,1183,16,1815,1993,1993,449,1878,274,903,1746,369,1847,1919,597,1665,1480,1797,1595,1041,831,1746,96,727,696,845,616,1595,903,1983,700,1977,1891,1609,616,290,1417,1878,471,380,1977,926,736,57,1546,1929,290,1659,1412,241,1983,903,937,258,674,369,705,1209,1509,1366,1866,903,1457,824,290,795,495,87,57,1225,1222,16,1875,241,8,1104,809,1659,1392,502,440,1417,788,1959,399,1685,624,321,1765,695,502,98,29,1225,403,22,616,1516,849,28,778,1163,1768,28,1241,1429,696,172,194,843,888,87,624,112,1417,1665,575,1592,202,1963,1426,825,29,440,741,1644,1839,778,1028,950,1297,1855,845,825,693,1678,430,332,1586,823,430,36,376,1358,340,954,230,1666,1678,502,1805,624,1476,1060,1607,456,774,1549,1560,1660,1852,262,914,1018,396,12,1333,747,27,1314,6,1993,1092,969,268,1725,725,458,284,364,108,1412,1244,1296,1626,1062,624,1276,960,1661,103,388,1817,549,1946,591,974,983,163,851,1725,115,375,29,99,1878,369,1781,559,1269,322,1509,1488,823,950,358,98,1121,1402,687,1907,673,778,1366,1501,1918,581,1360,680,28,1509,1918,974,794,99,1907,242,226,577,1708,430,971,910,191,1439,1855,1029,1433,789,1520,1061,1175,544,1626,1608,1722,641,77,59,151,472,1309,148,1626,1594,29,368,876,66,192,358,399,845,1370,934,1096,593,1417,1537,624,774,1488,864,606,1076,274,914,969,1439,1938,56,222,1676,1317,1761,1832,904,1248,1197,1096,1886,1797,971,482,390,1165,1144,825,1963,1271,906,425,1573,1092,219,373,1214,952,1705,1509,527,495,1035,861,1060,641,1766,640,1249,872,510,696,541,756,624,1391,1485,1505,1505,1188,895,1071,1359,967,1035,1443,314,1093,1912,913,1384,1019,913,516,1850,611,820,1624,1498,1258,471,1342,1661,903,142,300,274,116,1369,560,605,1152,539,1918,1921,82,885,1546,899,267,1181,1303,426,977,492,168,838,906,1469,1602,29,1247,733,1952,664,804,672,794,724,1298,1622,851,1105,859,1357,1800,1035,686,1187,1439,460,1778,951,1187,1149,1225,87,1993]",
    "expected_output": "12",
    "task_finish_time": 1707075614542,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1014,
    "total_testcases": 1074,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1166149253",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_complete_subarrays(nums :: [integer]) :: integer\n  def count_complete_subarrays(nums) do\n    total_distinct = Enum.count(Enum.uniq(nums))\n    len = length(nums)\n\n    1..len\n    |> Enum.reduce(0, fn i, acc ->\n      acc + Enum.reduce(0..(len-i), 0, fn j, acc_inner ->\n        subarray = Enum.slice(nums, j, i)\n        if Enum.count(Enum.uniq(subarray)) == total_distinct, do: acc_inner + 1, else: acc_inner\n      end)\n    end)\n  end\nend"
}