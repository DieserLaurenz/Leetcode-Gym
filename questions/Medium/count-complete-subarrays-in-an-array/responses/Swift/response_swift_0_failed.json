{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15828000,
    "question_id": "2856",
    "elapsed_time": 49,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[1,3,1,2,2]",
    "expected_output": "4",
    "task_finish_time": 1707074847490,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 1074,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1166140267",
    "input_formatted": "[1,3,1,2,2]",
    "input": "[1,3,1,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func countCompleteSubarrays(_ nums: [Int]) -> Int {\n        let uniqueCount = Set(nums).count\n        var count = 0\n        var left = 0\n        var freq = [Int: Int]()\n\n        for right in 0..<nums.count {\n            freq[nums[right], default: 0] += 1\n            while freq.count > uniqueCount {\n                freq[nums[left]]! -= 1\n                if freq[nums[left]]! == 0 {\n                    freq.removeValue(forKey: nums[left])\n                }\n                left += 1\n            }\n            count += right - left + 1\n        }\n\n        return count\n    }\n}"
}