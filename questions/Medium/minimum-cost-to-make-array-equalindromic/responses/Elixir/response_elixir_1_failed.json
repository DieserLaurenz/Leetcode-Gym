{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 195500000,
    "question_id": "3229",
    "elapsed_time": 1502,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]",
    "expected_output": "6",
    "task_finish_time": 1707783943500,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173655222",
    "input_formatted": "[1,2,3,4,5]",
    "input": "[1,2,3,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer]) :: integer\n  def minimum_cost(nums) do\n    nums\n    |> Enum.map(&closest_palindrome(&1))\n    |> Enum.group_by(fn x -> x end, fn _x -> 1 end)\n    |> Enum.map(fn {_key, val} -> Enum.sum(val) end)\n    |> Enum.max()\n    |> fn max_count -> (Enum.count(nums) - max_count) end.()\n  end\n\n  defp closest_palindrome(n) do\n    String.length(Integer.to_string(n))\n    |> case do\n      1 -> n\n      _ -> \n        [n] \n        |> Stream.concat(1..9 |> Enum.map(&(&1 * 10 + &1)))\n        |> Enum.min_by(fn p -> abs(n - p) end)\n    end\n  end\nend"
}