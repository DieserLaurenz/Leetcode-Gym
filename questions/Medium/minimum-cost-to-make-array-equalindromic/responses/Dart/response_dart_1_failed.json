{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 162744000,
    "question_id": "3229",
    "elapsed_time": 625,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[10,12,13,14,15]",
    "expected_output": "11",
    "task_finish_time": 1707775231796,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 346,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1173589022",
    "input_formatted": "[10,12,13,14,15]",
    "input": "[10,12,13,14,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  bool _isPalindromic(int n) {\n    String s = n.toString();\n    for (int i = 0; i < s.length ~/ 2; i++) {\n      if (s[i] != s[s.length - 1 - i]) return false;\n    }\n    return true;\n  }\n\n  int _calculateCost(List<int> nums, int target) {\n    int cost = 0;\n    for (int num in nums) {\n      cost += (num - target).abs();\n    }\n    return cost;\n  }\n\n  int minimumCost(List<int> nums) {\n    nums.sort();\n    int median = nums[nums.length ~/ 2];\n    int cost = _calculateCost(nums, median);\n    if (_isPalindromic(median)) return cost;\n\n    // Try to adjust median to the closest palindromic number\n    int lower = median, upper = median;\n    while (!_isPalindromic(lower) && lower > 0) lower--;\n    while (!_isPalindromic(upper) && upper < 1e9.toInt()) upper++;\n    \n    if (lower > 0 && _isPalindromic(lower)) {\n      cost = min(cost, _calculateCost(nums, lower));\n    }\n    if (upper < 1e9.toInt() && _isPalindromic(upper)) {\n      cost = min(cost, _calculateCost(nums, upper));\n    }\n    return cost;\n  }\n\n  int min(int a, int b) => a < b ? a : b;\n}"
}