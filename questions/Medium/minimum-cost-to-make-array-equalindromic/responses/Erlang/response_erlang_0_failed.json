{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 176392000,
    "question_id": "3229",
    "elapsed_time": 2031,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[10,12,13,14,15]",
    "expected_output": "11",
    "task_finish_time": 1707783801227,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 346,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1173654019",
    "input_formatted": "[10,12,13,14,15]",
    "input": "[10,12,13,14,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_cost(Nums :: [integer()]) -> integer().\nminimum_cost(Nums) ->\n    Sorted = lists:sort(Nums),\n    Median = case length(Sorted) rem 2 of\n        0 -> \n            Mid = length(Sorted) div 2,\n            (lists:nth(Mid, Sorted) + lists:nth(Mid+1, Sorted)) div 2;\n        1 -> \n            lists:nth((length(Sorted) div 2) + 1, Sorted)\n    end,\n    lists:foldl(fun(Num, Acc) -> Acc + abs(Num - Median) end, 0, Sorted)."
}