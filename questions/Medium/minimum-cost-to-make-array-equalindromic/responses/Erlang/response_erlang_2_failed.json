{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 177216000,
    "question_id": "3229",
    "elapsed_time": 1859,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]",
    "expected_output": "6",
    "task_finish_time": 1707783865109,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 26,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1173654534",
    "input_formatted": "[1,2,3,4,5]",
    "input": "[1,2,3,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_cost(Nums :: [integer()]) -> integer().\nminimum_cost(Nums) ->\n    Min = lists:min(Nums),\n    Max = lists:max(Nums),\n    find_min_cost(Nums, Min, Max, Max - Min).\n\nfind_min_cost(_, Min, Max, Best) when Min > Max -> Best;\nfind_min_cost(Nums, Min, Max, Best) ->\n    Mid = (Min + Max) div 2,\n    CostLeft = calculate_cost(Nums, Mid),\n    CostRight = calculate_cost(Nums, Mid + 1),\n    NewBest = min(Best, min(CostLeft, CostRight)),\n    case CostLeft < CostRight of\n        true -> find_min_cost(Nums, Min, Mid - 1, NewBest);\n        false -> find_min_cost(Nums, Mid + 1, Max, NewBest)\n    end.\n\ncalculate_cost(Nums, X) ->\n    lists:foldl(fun(Num, Acc) -> Acc + abs(Num - X) end, 0, Nums)."
}