{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11312000,
    "question_id": "3229",
    "elapsed_time": 57,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]",
    "expected_output": "6",
    "task_finish_time": 1707774127671,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 188,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1173579570",
    "input_formatted": "[1,2,3,4,5]",
    "input": "[1,2,3,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long minimumCost(int* nums, int numsSize) {\n    long long sum = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        sum += nums[i];\n    }\n    long long avg = sum / numsSize;\n    long long closestPalindrome = avg;\n    for (long long p = avg; p <= avg + 2; ++p) {\n        if (isPalindrome(p)) {\n            closestPalindrome = p;\n            break;\n        }\n    }\n    for (long long p = avg - 1; p >= avg - 2; --p) {\n        if (isPalindrome(p)) {\n            closestPalindrome = p;\n            break;\n        }\n    }\n    long long cost = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        cost += abs(nums[i] - closestPalindrome);\n    }\n    return cost;\n}\n\nint isPalindrome(long long x) {\n    if (x < 0) return 0;\n    long long rev = 0, original = x;\n    while (x != 0) {\n        rev = rev * 10 + x % 10;\n        x /= 10;\n    }\n    return original == rev;\n}"
}