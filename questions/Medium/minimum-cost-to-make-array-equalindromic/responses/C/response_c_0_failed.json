{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6296000,
    "question_id": "3229",
    "elapsed_time": 3019,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1]",
    "expected_output": "0",
    "task_finish_time": 1707774082358,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 542,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1173579134",
    "input_formatted": "[1]",
    "input": "[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n#include <stdlib.h>\n\nint isPalindrome(int x) {\n    int reversed = 0, original = x;\n    while (x > 0) {\n        reversed = reversed * 10 + x % 10;\n        x /= 10;\n    }\n    return original == reversed;\n}\n\nint findClosestPalindrome(int x) {\n    int lower = x - 1;\n    int upper = x + 1;\n    while (1) {\n        if (isPalindrome(lower)) return lower;\n        if (isPalindrome(upper)) return upper;\n        lower--;\n        upper++;\n    }\n}\n\nlong long minimumCost(int* nums, int numsSize) {\n    long long cost = LLONG_MAX;\n    for (int i = 0; i < numsSize; i++) {\n        int target = findClosestPalindrome(nums[i]);\n        long long tempCost = 0;\n        for (int j = 0; j < numsSize; j++) {\n            tempCost += abs(nums[j] - target);\n        }\n        if (tempCost < cost) {\n            cost = tempCost;\n        }\n    }\n    return cost;\n}"
}