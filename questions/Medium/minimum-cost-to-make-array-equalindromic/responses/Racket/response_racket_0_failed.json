{
    "status_code": 14,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 126636000,
    "question_id": "3229",
    "elapsed_time": 5016,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,1]",
    "expected_output": "1",
    "task_finish_time": 1707783690285,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 8,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1173653038",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-cost nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (is-palindrome? n)\n    (equal? (number->string n) (list->string (reverse (string->list (number->string n))))))\n  \n  (define (find-closest-palindrome n)\n    (let loop ((i 0))\n      (cond\n        ((is-palindrome? (+ n i)) (+ n i))\n        ((is-palindrome? (- n i)) (- n i))\n        (else (loop (+ i 1))))))\n  \n  (let* ((sorted-nums (sort nums <))\n         (median (if (even? (length nums))\n                     (/ (+ (list-ref sorted-nums (quotient (length nums) 2))\n                           (list-ref sorted-nums (- (quotient (length nums) 2) 1)))\n                        2)\n                     (list-ref sorted-nums (quotient (length nums) 2))))\n         (closest-palindrome (find-closest-palindrome median)))\n    (foldl (lambda (num acc) (+ acc (abs (- num closest-palindrome)))) 0 nums)))"
}