{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 13: java.lang.UnsupportedOperationException: empty.min (at minimumCost)",
    "full_runtime_error": "java.lang.UnsupportedOperationException: empty.min\nLine 914: scala.collection.IterableOnceOps.min (IterableOnce.scala)\nLine 912: scala.collection.IterableOnceOps.min$ (IterableOnce.scala)\nLine 926: scala.collection.AbstractIterable.min (Iterable.scala)\nLine 13: Solution$.minimumCost (solution.scala)\nLine 19: Main$.__helper__ (solution.scala)\nLine 33: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 55296000,
    "question_id": "3229",
    "elapsed_time": 470,
    "compare_result": "111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[301,309,312,322]",
    "expected_output": "26",
    "task_finish_time": 1707783518331,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 33,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1173651582",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def isPalindrome(x: Int): Boolean = {\n        val s = x.toString\n        s == s.reverse\n    }\n\n    def minimumCost(nums: Array[Int]): Long = {\n        val sorted = nums.sorted\n        val median = if (nums.length % 2 == 0) \n                        (sorted(nums.length / 2 - 1) + sorted(nums.length / 2)) / 2 \n                     else sorted(nums.length / 2)\n        val candidates = (median - 2 to median + 2).filter(isPalindrome)\n        candidates.map(candidate => nums.foldLeft(0L)((acc, num) => acc + (num - candidate).abs)).min\n    }\n}"
}