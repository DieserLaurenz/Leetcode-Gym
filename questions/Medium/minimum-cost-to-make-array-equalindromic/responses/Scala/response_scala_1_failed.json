{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70556000,
    "question_id": "3229",
    "elapsed_time": 1061,
    "compare_result": "101111111111111111111111111111111010101111001000001000001000100000000000000000000000000000001000111100100111010110011101111111000000100011101100000001101110101111111000001100111001011000101001110011001001111111101001010101000111110111110001101111000000111010100010001000000110001100111000000000000000000100000000100000000000000001000100000000000000000000000000000000000000001000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000100",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[10,12,13,14,15]",
    "expected_output": "11",
    "task_finish_time": 1707783490068,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 151,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1173651337",
    "input_formatted": "[10,12,13,14,15]",
    "input": "[10,12,13,14,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(nums: Array[Int]): Long = {\n        nums.sorted\n        val median = if (nums.length % 2 == 0) (nums(nums.length / 2 - 1).toLong + nums(nums.length / 2).toLong) / 2 else nums(nums.length / 2)\n        nums.foldLeft(0L)((acc, num) => acc + Math.abs(num - median))\n    }\n}"
}