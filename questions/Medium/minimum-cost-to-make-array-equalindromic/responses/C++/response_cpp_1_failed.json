{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27636000,
    "question_id": "3229",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[102,103,105,106,109]",
    "expected_output": "20",
    "task_finish_time": 1707773841082,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 535,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1173577087",
    "input_formatted": "[102,103,105,106,109]",
    "input": "[102,103,105,106,109]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    long long minimumCost(vector<int>& nums) {\n        auto isPalindrome = [](int x) {\n            string s = to_string(x);\n            string rev = s;\n            reverse(rev.begin(), rev.end());\n            return s == rev;\n        };\n\n        long long minCost = LLONG_MAX;\n        sort(nums.begin(), nums.end());\n        int left = nums[0], right = nums.back();\n        for (int i = left; i <= right; ++i) {\n            if (!isPalindrome(i)) continue;\n            long long cost = 0;\n            for (int num : nums) {\n                cost += abs(num - i);\n            }\n            minCost = min(minCost, cost);\n        }\n        return minCost == LLONG_MAX ? 0 : minCost;\n    }\n};"
}