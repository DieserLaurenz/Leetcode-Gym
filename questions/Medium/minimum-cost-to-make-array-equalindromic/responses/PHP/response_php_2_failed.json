{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25684000,
    "question_id": "3229",
    "elapsed_time": 5155,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[10,12,13,14,15]",
    "expected_output": "11",
    "task_finish_time": 1707774905012,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 345,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1173586338",
    "input_formatted": "[10,12,13,14,15]",
    "input": "[10,12,13,14,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumCost($nums) {\n        $n = count($nums);\n        $median = $this->findMedian($nums, 0, $n - 1, intdiv($n, 2) + $n % 2);\n        $cost = 0;\n        foreach ($nums as $num) {\n            $cost += abs($num - $median);\n        }\n        return $cost;\n    }\n\n    function findMedian(&$nums, $left, $right, $k) {\n        if ($left == $right) return $nums[$left];\n        $pivotIndex = $this->partition($nums, $left, $right);\n        if ($k == $pivotIndex + 1) {\n            return $nums[$pivotIndex];\n        } elseif ($k < $pivotIndex + 1) {\n            return $this->findMedian($nums, $left, $pivotIndex - 1, $k);\n        } else {\n            return $this->findMedian($nums, $pivotIndex + 1, $right, $k);\n        }\n    }\n\n    function partition(&$nums, $left, $right) {\n        $pivot = $nums[$right];\n        $i = $left;\n        for ($j = $left; $j <= $right - 1; $j++) {\n            if ($nums[$j] <= $pivot) {\n                $this->swap($nums, $i, $j);\n                $i++;\n            }\n        }\n        $this->swap($nums, $i, $right);\n        return $i;\n    }\n\n    function swap(&$nums, $i, $j) {\n        $temp = $nums[$i];\n        $nums[$i] = $nums[$j];\n        $nums[$j] = $temp;\n    }\n}"
}