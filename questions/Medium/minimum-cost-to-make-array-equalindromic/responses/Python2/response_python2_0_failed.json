{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 22904000,
    "question_id": "3229",
    "elapsed_time": 343,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "[308,313,319,322]",
    "expected_output": "20",
    "task_finish_time": 1708818176901,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 561,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185242677",
    "input_formatted": "[308,313,319,322]",
    "input": "[308,313,319,322]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def is_palindrome(n):\n            return str(n) == str(n)[::-1]\n        \n        nums.sort()\n        mid = len(nums) // 2\n        target = nums[mid]\n        if is_palindrome(target):\n            return sum(abs(num - target) for num in nums)\n        \n        # Find the closest palindromic number\n        lower, upper = target, target\n        while not is_palindrome(lower) and not is_palindrome(upper):\n            lower -= 1\n            upper += 1\n            if lower < 0:  # Ensure we don't go into negative numbers\n                lower = 0\n        \n        if is_palindrome(lower) and is_palindrome(upper):\n            lower_cost = sum(abs(num - lower) for num in nums)\n            upper_cost = sum(abs(num - upper) for num in nums)\n            return min(lower_cost, upper_cost)\n        elif is_palindrome(lower):\n            return sum(abs(num - lower) for num in nums)\n        else:\n            return sum(abs(num - upper) for num in nums)"
}