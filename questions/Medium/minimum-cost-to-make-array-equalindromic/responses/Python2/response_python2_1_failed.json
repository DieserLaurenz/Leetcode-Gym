{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11652000,
    "question_id": "3229",
    "elapsed_time": 37,
    "compare_result
    "code_output": "46",
    "std_output": "",
    "last_testcase": "[10,12,13,14,15]",
    "expected_output": "11",
    "task_finish_time": 1708818208905,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 33,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185242891",
    "input_formatted": "[10,12,13,14,15]",
    "input": "[10,12,13,14,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def is_palindrome(n):\n            return str(n) == str(n)[::-1]\n\n        def find_next_palindrome(n):\n            s = str(n)\n            half = len(s) // 2\n            odd = len(s) % 2\n            left = s[:half + odd]\n            next_palindrome = int(left + left[:half][::-1])\n            if next_palindrome < n:\n                if odd:\n                    left_mid = int(left[:-1] + str(int(left[-1]) + 1))\n                else:\n                    left_mid = str(int(left) + 1)\n                next_palindrome = int(left_mid + left_mid[:half][::-1])\n            return next_palindrome\n\n        nums.sort()\n        median = nums[len(nums) // 2]\n        palindrome_target = find_next_palindrome(median)\n        cost = sum(abs(num - palindrome_target) for num in nums)\n        return cost"
}