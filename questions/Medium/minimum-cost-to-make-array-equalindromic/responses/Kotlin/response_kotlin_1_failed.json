{
    "status_code": 15,
    "lang": "kotlin",
    "run_success": false,
    "runtime_error": "Line 43: Exception in thread \"main\" java.lang.RuntimeException: Error when serializing long: 9223372036854775807 out of range [-(2^53-1), 2^53-1]",
    "full_runtime_error": "Line 43: Exception in thread \"main\" java.lang.RuntimeException: Error when serializing long: 9223372036854775807 out of range [-(2^53-1), 2^53-1]",
    "status_runtime": "N/A",
    "memory": 37908000,
    "question_id": "3229",
    "elapsed_time": 182,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[102,103,105,106,109]",
    "expected_output": "20",
    "task_finish_time": 1707775108654,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1173587959",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumCost(nums: IntArray): Long {\n        fun isPalindrome(n: Int): Boolean {\n            return n.toString() == n.toString().reversed()\n        }\n\n        val sortedNums = nums.sorted()\n        var minCost = Long.MAX_VALUE\n        val minNum = sortedNums.first()\n        val maxNum = sortedNums.last()\n\n        for (num in minNum..maxNum) {\n            if (isPalindrome(num)) {\n                val cost = nums.fold(0L) { acc, current ->\n                    acc + kotlin.math.abs(current - num).toLong()\n                }\n                minCost = kotlin.math.min(minCost, cost)\n            }\n        }\n\n        return minCost\n    }\n}"
}