{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "174 ms",
    "memory": 65980000,
    "question_id": "3229",
    "elapsed_time": 181,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707774367178,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 648,
    "total_testcases": 648,
    "runtime_percentile": 18.498099999999972,
    "status_memory": "66 MB",
    "memory_percentile": 10.983499999999966,
    "pretty_lang": "JavaScript",
    "submission_id": "1173581762",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar minimumCost = function(nums) {\n    // Helper function to check if a number is palindromic\n    const isPalindrome = (x) => {\n        const s = x.toString();\n        let i = 0, j = s.length - 1;\n        while (i < j) {\n            if (s[i] !== s[j]) return false;\n            i++;\n            j--;\n        }\n        return true;\n    };\n\n    // Find the median of the array\n    nums.sort((a, b) => a - b);\n    const median = nums.length % 2 === 0 ? Math.round((nums[nums.length / 2 - 1] + nums[nums.length / 2]) / 2) : nums[Math.floor(nums.length / 2)];\n    \n    // If median is palindromic, use it directly\n    if (isPalindrome(median)) {\n        return nums.reduce((acc, cur) => acc + Math.abs(cur - median), 0);\n    }\n\n    // Search for the nearest palindromic numbers around the median\n    let lower = median - 1, upper = median + 1;\n    while (!isPalindrome(lower)) lower--;\n    while (!isPalindrome(upper)) upper++;\n\n    // Calculate costs for changing to lower or upper palindromic numbers\n    const costToLower = nums.reduce((acc, cur) => acc + Math.abs(cur - lower), 0);\n    const costToUpper = nums.reduce((acc, cur) => acc + Math.abs(cur - upper), 0);\n\n    // Return the minimum cost\n    return Math.min(costToLower, costToUpper);\n};"
}