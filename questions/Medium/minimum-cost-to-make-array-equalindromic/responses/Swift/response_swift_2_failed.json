{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20928000,
    "question_id": "3229",
    "elapsed_time": 239,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[10,12,13,14,15]",
    "expected_output": "11",
    "task_finish_time": 1707775021185,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 346,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1173587284",
    "input_formatted": "[10,12,13,14,15]",
    "input": "[10,12,13,14,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumCost(_ nums: [Int]) -> Int {\n        // Find the median or the middle value(s) in the sorted array\n        let sortedNums = nums.sorted()\n        let n = nums.count\n        let mid1 = sortedNums[n / 2]\n        let mid2 = n % 2 == 0 ? sortedNums[(n / 2) - 1] : mid1\n\n        // Calculate cost to make array elements equal to mid1 or mid2\n        func cost(to target: Int) -> Int {\n            nums.reduce(0) { $0 + abs($1 - target) }\n        }\n\n        // Return the minimum cost\n        return min(cost(to: mid1), cost(to: mid2))\n    }\n}"
}