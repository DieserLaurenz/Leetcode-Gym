{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57244000,
    "question_id": "3229",
    "elapsed_time": 254,
    "compare_result
    "code_output": "40",
    "std_output": "",
    "last_testcase": "[301,309,312,322]",
    "expected_output": "26",
    "task_finish_time": 1707774235626,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 120,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1173580550",
    "input_formatted": "[301,309,312,322]",
    "input": "[301,309,312,322]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinimumCost(int[] nums) {\n        long cost = long.MaxValue;\n        long total = 0;\n        foreach (var num in nums) {\n            total += num;\n        }\n        long avg = total / nums.Length;\n        long[] targets = { avg - 1, avg, avg + 1 };\n        foreach (var target in targets) {\n            if (IsPalindromic(target)) {\n                long tempCost = 0;\n                foreach (var num in nums) {\n                    tempCost += Math.Abs(num - target);\n                }\n                cost = Math.Min(cost, tempCost);\n            }\n        }\n        // Fallback if no average-based palindromic number minimizes cost\n        if (cost == long.MaxValue) {\n            cost = 0;\n            foreach (var num in nums) {\n                cost += Math.Abs(num - nums[0]); // Convert all to first element as last resort\n            }\n        }\n        return cost;\n    }\n\n    private bool IsPalindromic(long num) {\n        string str = num.ToString();\n        for (int i = 0, j = str.Length - 1; i < j; i++, j--) {\n            if (str[i] != str[j]) return false;\n        }\n        return true;\n    }\n}"
}