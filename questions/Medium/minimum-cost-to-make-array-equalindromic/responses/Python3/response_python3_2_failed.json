{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18088000,
    "question_id": "3229",
    "elapsed_time": 154,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "[308,313,319,322]",
    "expected_output": "20",
    "task_finish_time": 1708818346347,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 549,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185243760",
    "input_formatted": "[308,313,319,322]",
    "input": "[308,313,319,322]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minimumCost(self, nums: List[int]) -> int:\n        def is_palindrome(n):\n            return str(n) == str(n)[::-1]\n\n        def closest_palindrome(n):\n            # Find the closest palindromic number to n\n            if is_palindrome(n):\n                return n\n            for i in range(n-1, 0, -1):\n                if is_palindrome(i):\n                    lower = i\n                    break\n            for i in range(n+1, 10**9):\n                if is_palindrome(i):\n                    upper = i\n                    break\n            return lower if n - lower <= upper - n else upper\n\n        median = sorted(nums)[len(nums) // 2]  # Find median for minimal adjustment\n        target = closest_palindrome(median)  # Find closest palindromic number to median\n        return sum(abs(num - target) for num in nums)  # Calculate total cost"
}