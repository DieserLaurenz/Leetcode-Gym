{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 29932000,
    "question_id": "3229",
    "elapsed_time": 410,
    "compare_result
    "code_output": "46",
    "std_output": "",
    "last_testcase": "[10,12,13,14,15]",
    "expected_output": "11",
    "task_finish_time": 1708818321785,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 246,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185243607",
    "input_formatted": "[10,12,13,14,15]",
    "input": "[10,12,13,14,15]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minimumCost(self, nums: List[int]) -> int:\n        def is_palindrome(x: int) -> bool:\n            return str(x) == str(x)[::-1]\n        \n        def find_nearest_palindrome(x: int) -> int:\n            for i in range(x, 10**9):\n                if is_palindrome(i):\n                    return i\n            return x\n        \n        target = find_nearest_palindrome(sum(nums) // len(nums))\n        cost = sum(abs(num - target) for num in nums)\n        return cost"
}