{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67840000,
    "question_id": "3229",
    "elapsed_time": 4010,
    "compare_result": "111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000011111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[102,103,105,106,109]",
    "expected_output": "20",
    "task_finish_time": 1707774625724,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 482,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1173584047",
    "input_formatted": "[102,103,105,106,109]",
    "input": "[102,103,105,106,109]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumCost(nums: number[]): number {\n    // Calculate the total cost to make array elements equal to a certain value\n    function costToMakeEqual(target: number): number {\n        return nums.reduce((acc, cur) => acc + Math.abs(cur - target), 0);\n    }\n\n    // Generate palindromic numbers within a certain range\n    function generatePalindromes(min: number, max: number): number[] {\n        const palindromes = [];\n        for (let i = min; i <= max; i++) {\n            if (isPalindromic(i)) palindromes.push(i);\n        }\n        return palindromes;\n    }\n\n    // Check if a number is palindromic\n    function isPalindromic(x: number): boolean {\n        const s = x.toString();\n        return s === s.split('').reverse().join('');\n    }\n\n    // Find min and max in nums to limit the search range for palindromic numbers\n    const minNum = Math.min(...nums);\n    const maxNum = Math.max(...nums);\n\n    // Generate palindromic numbers within the range of numbers in the array\n    const palindromes = generatePalindromes(minNum, maxNum);\n\n    // If no palindromic number is found within the range, return the cost to make all elements equal to the closest number\n    if (palindromes.length === 0) {\n        return Math.min(costToMakeEqual(minNum), costToMakeEqual(maxNum));\n    }\n\n    // Calculate the minimum cost to make the array equalindromic using palindromic numbers\n    let minCost = Infinity;\n    for (const palindrome of palindromes) {\n        const currentCost = costToMakeEqual(palindrome);\n        if (currentCost < minCost) {\n            minCost = currentCost;\n        }\n    }\n\n    return minCost;\n}"
}