{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65956000,
    "question_id": "3229",
    "elapsed_time": 161,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "[308,313,319,322]",
    "expected_output": "20",
    "task_finish_time": 1707774577589,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 555,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1173583681",
    "input_formatted": "[308,313,319,322]",
    "input": "[308,313,319,322]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumCost(nums: number[]): number {\n    // Helper function to check if a number is palindromic\n    function isPalindromic(n: number): boolean {\n        const str = n.toString();\n        let left = 0, right = str.length - 1;\n        while (left < right) {\n            if (str[left] !== str[right]) return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n    // Find the median of the array to minimize the cost\n    nums.sort((a, b) => a - b);\n    let median = nums[Math.floor(nums.length / 2)];\n\n    // Adjust the median to the nearest palindromic number if it's not already one\n    if (!isPalindromic(median)) {\n        let lower = median, upper = median;\n        // Search downwards for the closest palindromic number\n        while (!isPalindromic(lower) && lower > 0) lower--;\n        // Search upwards for the closest palindromic number\n        while (!isPalindromic(upper)) upper++;\n        // Choose the closest palindromic number to the median\n        median = (median - lower <= upper - median) ? lower : upper;\n    }\n\n    // Calculate the total cost to convert all numbers to the chosen palindromic number\n    return nums.reduce((acc, cur) => acc + Math.abs(cur - median), 0);\n}"
}