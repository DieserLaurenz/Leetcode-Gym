{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44540000,
    "question_id": "3229",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "37",
    "std_output": "",
    "last_testcase": "[206,215,216,219,220,221]",
    "expected_output": "35",
    "task_finish_time": 1707773976073,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 538,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1173578247",
    "input_formatted": "[206,215,216,219,220,221]",
    "input": "[206,215,216,219,220,221]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minimumCost(int[] nums) {\n        long minCost = Long.MAX_VALUE;\n        int maxNum = 0;\n        // Find the maximum number in the array to limit the search for palindromic numbers.\n        for (int num : nums) {\n            maxNum = Math.max(maxNum, num);\n        }\n        // Generate all palindromic numbers up to the maximum number in the array.\n        for (int i = 1; i <= maxNum; i++) {\n            if (isPalindrome(i)) {\n                long cost = 0;\n                for (int num : nums) {\n                    cost += Math.abs(num - i);\n                }\n                minCost = Math.min(minCost, cost);\n            }\n        }\n        return minCost;\n    }\n\n    private boolean isPalindrome(int x) {\n        if (x < 0) return false;\n        int reversed = 0, original = x;\n        while (x != 0) {\n            reversed = reversed * 10 + x % 10;\n            x /= 10;\n        }\n        return original == reversed;\n    }\n}"
}