{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56520000,
    "display_runtime": "818",
    "question_id": "3229",
    "elapsed_time": 1053,
    "compare_result
    "code_output": "3557",
    "std_output": "",
    "last_testcase": "[279,578,993,142,326,673,257,497,405,455,849,789,105,664,972]",
    "expected_output": "3552",
    "task_finish_time": 1707774021315,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 647,
    "total_testcases": 648,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1173578653",
    "input_formatted": "[279,578,993,142,326,673,257,497,405,455,849,789,105,664,972]",
    "input": "[279,578,993,142,326,673,257,497,405,455,849,789,105,664,972]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minimumCost(int[] nums) {\n        long cost = 0;\n        int left = 0, right = 1000000000;\n        // Binary search to find the optimal palindromic target\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (isPalindrome(mid)) {\n                long currentCost = calculateCost(nums, mid);\n                cost = currentCost;\n                // Adjust search space based on comparison\n                if (calculateCost(nums, mid - 1) < currentCost) {\n                    right = mid - 1;\n                } else if (calculateCost(nums, mid + 1) < currentCost) {\n                    left = mid + 1;\n                } else {\n                    break; // Found optimal cost\n                }\n            } else {\n                // If mid is not palindrome, check both directions for the closest palindrome\n                int lower = mid - 1, higher = mid + 1;\n                while (!isPalindrome(lower)) --lower;\n                while (!isPalindrome(higher)) ++higher;\n                long costLower = calculateCost(nums, lower), costHigher = calculateCost(nums, higher);\n                if (costLower < costHigher) {\n                    right = lower;\n                } else {\n                    left = higher;\n                }\n            }\n        }\n        return cost;\n    }\n\n    private boolean isPalindrome(int x) {\n        if (x < 0) return false;\n        int res = 0, original = x;\n        while (x > 0) {\n            res = res * 10 + x % 10;\n            x /= 10;\n        }\n        return original == res;\n    }\n\n    private long calculateCost(int[] nums, int target) {\n        long cost = 0;\n        for (int num : nums) {\n            cost += Math.abs(num - target);\n        }\n        return cost;\n    }\n}"
}