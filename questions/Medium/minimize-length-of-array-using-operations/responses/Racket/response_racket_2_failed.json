{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 136956000,
    "question_id": "3244",
    "elapsed_time": 554,
    "compare_result": "101111111111110111111111010111111111111111111111111111111111111111111111111011011111010111111011111111110111101111011111111001111111001101101111111111110110100001111110101011001101111100100111001001111001101100101111111010000010000010101101001000000100010001000001000000010000001000000010100110000000000011000010000000000000001000100000000000010000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111011111010011011111001",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[5,5,5,10,5]",
    "expected_output": "2",
    "task_finish_time": 1707711106335,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 218,
    "total_testcases": 522,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1172819590",
    "input_formatted": "[5,5,5,10,5]",
    "input": "[5,5,5,10,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-array-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (define (gcd a b)\n    (if (= b 0) a (gcd b (remainder a b))))\n  (define (all-same lst)\n    (apply = (car lst) (cdr lst)))\n  (if (or (null? nums) (all-same nums)) (length nums)\n      (let loop ((nums nums) (count 0))\n        (let ((g (foldl gcd 0 nums)))\n          (if (= g 1) 1 (+ count 1))))))"
}