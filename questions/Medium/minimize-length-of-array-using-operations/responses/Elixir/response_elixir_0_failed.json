{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 203472000,
    "question_id": "3244",
    "elapsed_time": 1168,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,4,3,1]",
    "expected_output": "1",
    "task_finish_time": 1707711254683,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 66,
    "total_testcases": 522,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1172821070",
    "input_formatted": "[1,4,3,1]",
    "input": "[1,4,3,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_array_length(nums :: [integer]) :: integer\n  def minimum_array_length(nums) do\n    nums\n    |> Enum.reduce(%{}, fn x, acc -> \n      Map.update(acc, x, 1, &(&1 + 1))\n    end)\n    |> Enum.reduce(0, fn {k, v}, acc -> \n      if rem(v, 2) == 0, do: acc, else: acc + 1\n    end)\n    |> max(1)\n  end\nend"
}