{
    "acRate": 53.9773159777727,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2672",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Number of Adjacent Elements With the Same Color",
    "titleSlug": "number-of-adjacent-elements-with-the-same-color",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> colorTheArray(int n, vector<vector<int>>& queries) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] colorTheArray(int n, int[][] queries) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def colorTheArray(self, n, queries):         \"\"\"         :type n: int         :type queries: List[List[int]]         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def colorTheArray(self, n: int, queries: List[List[int]]) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* colorTheArray(int n, int** queries, int queriesSize, int* queriesColSize, int* returnSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] ColorTheArray(int n, int[][] queries) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} n  * @param {number[][]} queries  * @return {number[]}  */ var colorTheArray = function(n, queries) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function colorTheArray(n: number, queries: number[][]): number[] {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $n      * @param Integer[][] $queries      * @return Integer[]      */     function colorTheArray($n, $queries) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func colorTheArray(_ n: Int, _ queries: [[Int]]) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun colorTheArray(n: Int, queries: Array<IntArray>): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> colorTheArray(int n, List<List<int>> queries) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func colorTheArray(n int, queries [][]int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n # @param {Integer[][]} queries # @return {Integer[]} def color_the_array(n, queries)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def colorTheArray(n: Int, queries: Array[Array[Int]]): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn color_the_array(n: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (color-the-array n queries)   (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec color_the_array(N :: integer(), Queries :: [[integer()]]) -> [integer()]. color_the_array(N, Queries) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec color_the_array(n :: integer, queries :: [[integer]]) :: [integer]   def color_the_array(n, queries) do    end end"
        }
    ],
    "content": "There is a 0-indexed array nums of length n. Initially, all elements are uncolored (has a value of 0). You are given a 2D integer array queries where queries[i] = [indexi, colori]. For each query, you color the index indexi with the color colori in the array nums. Return an array answer of the same length as queries where answer[i] is the number of adjacent elements with the same color after the ith query. More formally, answer[i] is the number of indices j, such that 0 <= j < n - 1 and nums[j] == nums[j + 1] and nums[j] != 0 after the ith query.  Example 1:  Input: n = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]] Output: [0,1,1,0,2] Explanation: Initially array nums = [0,0,0,0], where 0 denotes uncolored elements of the array. - After the 1st query nums = [2,0,0,0]. The count of adjacent elements with the same color is 0. - After the 2nd query nums = [2,2,0,0]. The count of adjacent elements with the same color is 1. - After the 3rdquery nums = [2,2,0,1]. The count of adjacent elements with the same color is 1. - After the 4thquery nums = [2,1,0,1]. The count of adjacent elements with the same color is 0. - After the 5thquery nums = [2,1,1,1]. The count of adjacent elements with the same color is 2.  Example 2:  Input: n = 1, queries = [[0,100000]] Output: [0] Explanation: Initially array nums = [0], where 0 denotes uncolored elements of the array. - After the 1st query nums = [100000]. The count of adjacent elements with the same color is 0.   Constraints:  1 <= n <= 105 1 <= queries.length <= 105 queries[i].length== 2 0 <= indexi<= n - 1 1 <= colori<= 105  "
}