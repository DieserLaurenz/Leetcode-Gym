{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 138020000,
    "question_id": "2792",
    "elapsed_time": 1456,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "[1,1,0]",
    "expected_output": "true",
    "task_finish_time": 1708072388876,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1061,
    "total_testcases": 1425,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1176787969",
    "input_formatted": "[1,1,0]",
    "input": "[1,1,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec does_valid_array_exist(derived :: [integer]) :: boolean\n  def does_valid_array_exist(derived) do\n    # Check if the XOR of all elements in derived is equal to 0 for even length\n    # or equal to the first element for odd length, which would indicate that a valid original array might exist\n    xor_all = Enum.reduce(derived, 0, fn x, acc -> Bitwise.bxor(x, acc) end)\n    cond do\n      rem(length(derived), 2) == 0 -> xor_all == 0\n      true -> xor_all == hd(derived)\n    end\n  end\nend"
}