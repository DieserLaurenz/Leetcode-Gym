{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "163 ms",
    "memory": 52072000,
    "question_id": "3106",
    "elapsed_time": 179,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707495115541,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 941,
    "total_testcases": 941,
    "runtime_percentile": 71.42859999999999,
    "status_memory": "52.1 MB",
    "memory_percentile": 71.42859999999999,
    "pretty_lang": "JavaScript",
    "submission_id": "1170735650",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar lengthOfLongestSubsequence = function(nums, target) {\n    let dp = Array(target + 1).fill(-1);\n    dp[0] = 0; // base case: sum of 0 requires 0 elements\n    \n    for (let num of nums) {\n        for (let sum = target; sum >= num; sum--) {\n            if (dp[sum - num] !== -1) {\n                dp[sum] = Math.max(dp[sum], dp[sum - num] + 1);\n            }\n        }\n    }\n\n    return dp[target];\n};"
}