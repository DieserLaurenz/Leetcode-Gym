{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "609 ms",
    "memory": 123568000,
    "question_id": "3106",
    "elapsed_time": 728,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707495060772,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 941,
    "total_testcases": 941,
    "runtime_percentile": 16.667000000000016,
    "status_memory": "123.6 MB",
    "memory_percentile": 8.333700000000016,
    "pretty_lang": "C#",
    "submission_id": "1170734910",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int LengthOfLongestSubsequence(IList<int> nums, int target) {\n        Dictionary<int, int> dp = new Dictionary<int, int>();\n        dp[0] = 0;\n        int maxLength = -1;\n        foreach (int num in nums) {\n            Dictionary<int, int> newDp = new Dictionary<int, int>(dp);\n            foreach (var entry in dp) {\n                int newSum = entry.Key + num;\n                if (newSum <= target) {\n                    if (!newDp.ContainsKey(newSum)) {\n                        newDp[newSum] = entry.Value + 1;\n                    } else {\n                        newDp[newSum] = Math.Max(newDp[newSum], entry.Value + 1);\n                    }\n                    if (newSum == target) {\n                        maxLength = Math.Max(maxLength, newDp[newSum]);\n                    }\n                }\n            }\n            dp = newDp;\n        }\n        return maxLength;\n    }\n}"
}