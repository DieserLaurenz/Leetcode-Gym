{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "85 ms",
    "memory": 6288000,
    "question_id": "3106",
    "elapsed_time": 99,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707494954258,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 941,
    "total_testcases": 941,
    "runtime_percentile": 100,
    "status_memory": "6.3 MB",
    "memory_percentile": 100,
    "pretty_lang": "C",
    "submission_id": "1170733618",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int lengthOfLongestSubsequence(int* nums, int numsSize, int target) {\n    int dp[target + 1];\n    for (int i = 0; i <= target; ++i) dp[i] = -1;\n    dp[0] = 0; // base case, sum 0 with 0 length\n\n    for (int i = 0; i < numsSize; ++i) {\n        for (int j = target; j >= nums[i]; --j) {\n            if (dp[j - nums[i]] != -1) {\n                dp[j] = (dp[j] == -1) ? dp[j - nums[i]] + 1 : (dp[j] > dp[j - nums[i]] + 1) ? dp[j] : dp[j - nums[i]] + 1;\n            }\n        }\n    }\n\n    int maxLength = -1;\n    for (int i = 1; i <= target; ++i) {\n        if (dp[i] != -1 && i == target) {\n            maxLength = (maxLength > dp[i]) ? maxLength : dp[i];\n        }\n    }\n\n    return maxLength;\n}"
}