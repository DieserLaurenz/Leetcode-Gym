{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 4: ** (ArgumentError) argument error",
    "full_runtime_error": "Line 4: ** (ArgumentError) argument error\n    (stdlib 5.1.1) :maps.from_list([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n    solution.ex:4: Solution.length_of_longest_subsequence/2\n    solution.ex:38: Driver.consume_test_cases/2\n    solution.ex:24: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 73516000,
    "question_id": "3106",
    "elapsed_time": 382,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]\n9",
    "expected_output": "3",
    "task_finish_time": 1707504543215,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 941,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1170867356",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec length_of_longest_subsequence(nums :: [integer], target :: integer) :: integer\n  def length_of_longest_subsequence(nums, target) do\n    dp = for _ <- 0..target, do: -1, into: %{}\n    dp = Map.put(dp, 0, 0)\n\n    for num <- nums, reduce: dp do\n      acc ->\n        Enum.reduce(acc, acc, fn {k, v}, acc2 ->\n          if k + num <= target and v >= 0 do\n            Map.update(acc2, k + num, v + 1, &Kernel.max(&1, v + 1))\n          else\n            acc2\n          end\n        end)\n    end\n\n    Map.get(dp, target, -1)\n  end\nend"
}