{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 8: ** (UndefinedFunctionError) function Integer.max/2 is undefined or private",
    "full_runtime_error": "Line 8: ** (UndefinedFunctionError) function Integer.max/2 is undefined or private\n    (elixir 1.15.7) Integer.max(-1, 1)\n    (elixir 1.15.7) lib/map.ex:676: Map.update/4\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:8: anonymous fn/4 in Solution.length_of_longest_subsequence/2\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:7: Solution.length_of_longest_subsequence/2\n    solution.ex:37: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72944000,
    "question_id": "3106",
    "elapsed_time": 424,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]\n9",
    "expected_output": "3",
    "task_finish_time": 1707504484540,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 941,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1170866674",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec length_of_longest_subsequence(nums :: [integer], target :: integer) :: integer\n  def length_of_longest_subsequence(nums, target) do\n    dp = :maps.from_list(Enum.map(0..target, fn x -> {x, -1} end))\n    dp = Map.put(dp, 0, 0)\n\n    for num <- nums do\n      dp = Enum.reduce(Map.keys(dp), dp, fn key, acc ->\n        if key + num <= target and acc[key] != -1 do\n          Map.update(acc, key + num, acc[key] + 1, &Integer.max(&1, acc[key] + 1))\n        else\n          acc\n        end\n      end)\n    end\n\n    dp[target]\n  end\nend"
}