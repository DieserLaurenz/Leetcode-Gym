{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "2442 ms",
    "memory": 62492000,
    "question_id": "3106",
    "elapsed_time": 3622,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707504425599,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 941,
    "total_testcases": 941,
    "runtime_percentile": 100,
    "status_memory": "62.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1170865885",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec length_of_longest_subsequence(Nums :: [integer()], Target :: integer()) -> integer().\nlength_of_longest_subsequence(Nums, Target) ->\n  dp(Nums, Target, #{0 => 0}, -1).\n\ndp([], 0, _, MaxLen) ->\n  MaxLen;\ndp([], _, _, MaxLen) ->\n  MaxLen;\ndp([H|T], Target, Map, MaxLen) ->\n  NewMap = maps:fold(fun(K, V, Acc) ->\n                       Sum = K + H,\n                       if\n                         Sum =< Target ->\n                           Len = V + 1,\n                           case maps:is_key(Sum, Acc) of\n                             true -> Acc#{Sum => max(Len, maps:get(Sum, Acc))};\n                             false -> Acc#{Sum => Len}\n                           end;\n                         true -> Acc\n                       end\n                     end, Map, Map),\n  dp(T, Target, NewMap, max(MaxLen, maps:get(Target, NewMap, -1)))."
}