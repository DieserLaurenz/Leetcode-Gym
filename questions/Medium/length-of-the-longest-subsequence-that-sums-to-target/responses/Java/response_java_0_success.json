{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "23 ms",
    "memory": 44260000,
    "display_runtime": "23",
    "question_id": "3106",
    "elapsed_time": 196,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707494891099,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 941,
    "total_testcases": 941,
    "runtime_percentile": 95.92609999999999,
    "status_memory": "44.3 MB",
    "memory_percentile": 89.25909999999998,
    "pretty_lang": "Java",
    "submission_id": "1170732856",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {\n        int[] dp = new int[target + 1];\n        Arrays.fill(dp, -1000); // Fill with large negative values except for dp[0]\n        dp[0] = 0; // Base case, sum of 0 can be achieved with 0 elements\n        \n        for (int num : nums) {\n            for (int j = target; j >= num; j--) {\n                dp[j] = Math.max(dp[j], dp[j - num] + 1);\n            }\n        }\n        \n        return dp[target] > 0 ? dp[target] : -1;\n    }\n}"
}