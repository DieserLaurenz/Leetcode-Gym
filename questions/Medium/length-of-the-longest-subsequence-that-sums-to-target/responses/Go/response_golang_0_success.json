{
    "status_code": 10,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "23 ms",
    "memory": 5532000,
    "question_id": "3106",
    "elapsed_time": 72,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707504067617,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 941,
    "total_testcases": 941,
    "runtime_percentile": 76.19050000000001,
    "status_memory": "5.5 MB",
    "memory_percentile": 90.4762,
    "pretty_lang": "Go",
    "submission_id": "1170861362",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "func lengthOfLongestSubsequence(nums []int, target int) int {\n    dp := make([]int, target+1)\n    for i := range dp {\n        dp[i] = -10000 // Use a very small number to indicate that the sum cannot be made\n    }\n    dp[0] = 0 // Base case: sum of 0 can always be made with a subsequence of length 0\n    for _, num := range nums {\n        for sum := target; sum >= num; sum-- {\n            if dp[sum-num] + 1 > dp[sum] {\n                dp[sum] = dp[sum-num] + 1\n            }\n        }\n    }\n    if dp[target] < 0 {\n        return -1 // If dp[target] is still a very small number, it means no subsequence sums up to target\n    }\n    return dp[target]\n}"
}