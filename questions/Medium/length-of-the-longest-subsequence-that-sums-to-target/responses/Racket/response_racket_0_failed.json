{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101156000,
    "question_id": "3106",
    "elapsed_time": 5014,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,1,5,4,5]\n3",
    "expected_output": "-1",
    "task_finish_time": 1707504302233,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 189,
    "total_testcases": 941,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1170864318",
    "input_formatted": "[1,1,5,4,5], 3",
    "input": "[1,1,5,4,5]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (length-of-longest-subsequence nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let loop ((nums nums) (target target) (max-len -1) (current-len 0) (current-sum 0))\n    (cond\n     ((null? nums)\n      max-len)\n     ((= current-sum target)\n      (loop (cdr nums) target (max max-len current-len) 0 0))\n     ((> current-sum target)\n      (loop (cdr nums) target max-len (if (> current-len 0) (- current-len 1) 0) (if (> current-len 0) (- current-sum (car nums)) 0)))\n     (else\n      (let ((include (loop (cdr nums) target max-len (+ current-len 1) (+ current-sum (car nums))))\n            (exclude (loop (cdr nums) target max-len current-len current-sum)))\n        (max include exclude)))))\n  )"
}