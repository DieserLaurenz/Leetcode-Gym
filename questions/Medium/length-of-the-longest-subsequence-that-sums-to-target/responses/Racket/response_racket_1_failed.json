{
    "status_code": 12,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 975176000,
    "question_id": "3106",
    "elapsed_time": 3299,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,7,6,7,2,2,2,10,7,10,8,7,7,10,7,3,1,2,8,3,5,1,5,8,4,8,8,7,6,2,4,8,10,9,5,9,2,3,1,7,4,10,7,5,2,8,6,5,1,3,5,9,9,10,6,10]\n162",
    "expected_output": "38",
    "task_finish_time": 1707504337583,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 616,
    "total_testcases": 941,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1170864806",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (length-of-longest-subsequence nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  \n  (define (subsequences lst)\n    (if (null? lst)\n        '(())\n        (let ((subs (subsequences (cdr lst))))\n          (append subs (map (lambda (sub) (cons (car lst) sub)) subs)))))\n\n  (define (subseq-sums-equal subs target)\n    (foldl (lambda (sub acc)\n             (if (= (apply + sub) target)\n                 (max acc (length sub))\n                 acc))\n           -1\n           subs))\n\n  (subseq-sums-equal (subsequences nums) target))"
}