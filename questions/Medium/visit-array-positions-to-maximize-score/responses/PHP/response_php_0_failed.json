{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26684000,
    "question_id": "2893",
    "elapsed_time": 396,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708207252257,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 95,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1178275502",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @return Integer\n     */\n    function maxScore($nums, $x) {\n        $n = count($nums);\n        $dp = array_fill(0, $n + 1, 0); // DP array to hold the maximum score up to index i\n        $dp[0] = $nums[0];\n        for ($i = 1; $i < $n; $i++) {\n            $dp[$i] = $dp[$i - 1] + $nums[$i]; // Accumulate scores\n            if (($nums[$i] % 2) != ($nums[$i - 1] % 2)) { // Check if parity differs\n                $dp[$i] -= $x; // Subtract x if parity differs\n            }\n        }\n\n        // Max score after considering all positions\n        $maxScore = $dp[$n - 1];\n        for ($i = $n - 2; $i >= 0; $i--) {\n            // Check if we can get a higher score by stopping at earlier position\n            $maxScore = max($maxScore, $dp[$i]);\n        }\n        return $maxScore;\n    }\n}"
}