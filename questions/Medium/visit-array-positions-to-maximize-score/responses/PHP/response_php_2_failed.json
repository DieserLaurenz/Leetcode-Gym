{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27080000,
    "question_id": "2893",
    "elapsed_time": 415,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708207326057,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1178276084",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    /**\n     * @param Integer[] $nums\n     * @param Integer $x\n     * @return Integer\n     */\n    function maxScore($nums, $x) {\n        $n = count($nums);\n        $maxScore = 0;\n        $score = 0;\n        $j = -1; // Start with -1 to include first element in the initial score calculation\n\n        // Initial score from the first element\n        $score += $nums[0];\n\n        for ($i = 0; $i < $n; $i++) {\n            // Move j to the right while ensuring the score does not exceed the limit\n            while ($j + 1 < $n && ($i == $j + 1 || $score + $nums[$j + 1] - ($nums[$i] % 2 != $nums[$j + 1] % 2 ? $x : 0) <= $score)) {\n                $j++;\n                $score += $nums[$j] - ($nums[$i] % 2 != $nums[$j] % 2 ? $x : 0);\n            }\n\n            // Update max score\n            $maxScore = max($maxScore, $score);\n\n            // Prepare score for next iteration by subtracting the current element and penalty if moving to a different parity\n            if ($i < $n - 1) {\n                $score -= $nums[$i] + ($nums[$i] % 2 != $nums[$i + 1] % 2 ? $x : 0);\n            }\n        }\n\n        return $maxScore;\n    }\n}"
}