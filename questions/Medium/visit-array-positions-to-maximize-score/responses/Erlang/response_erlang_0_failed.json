{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 168344000,
    "question_id": "2893",
    "elapsed_time": 2108,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708217300120,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 72,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178347176",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_score(Nums :: [integer()], X :: integer()) -> integer().\nmax_score(Nums, X) ->\n    Lists = lists,\n    {MaxScore, _} = Lists:foldl(fun (N, {Score, Last}) ->\n                                     {NewScore, NewLast} = case (N rem 2) =:= (Last rem 2) of\n                                                                true -> {Score + N, N};\n                                                                false -> {Score + N - X, N}\n                                                            end,\n                                     {max(Score, NewScore), NewLast}\n                                 end, {hd(Nums), hd(Nums)}, tl(Nums)),\n    MaxScore."
}