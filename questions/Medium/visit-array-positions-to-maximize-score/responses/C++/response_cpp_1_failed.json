{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59116000,
    "question_id": "2893",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "23",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708206537135,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 15,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1178269893",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maxScore(vector<int>& nums, int x) {\n        int n = nums.size();\n        vector<long long> prefix(n + 1, 0);\n        for (int i = 0; i < n; ++i) {\n            prefix[i + 1] = prefix[i] + nums[i];\n        }\n\n        long long maxScore = prefix[1]; // Initial score with the first element only\n        long long score, penalty;\n\n        for (int i = 0; i < n; ++i) {\n            score = prefix[i + 1]; // Score up to current index\n            penalty = 0;\n            for (int j = i + 1; j < n; ++j) {\n                if ((nums[j] % 2) != (nums[j - 1] % 2)) {\n                    penalty += x; // Apply penalty for parity change\n                }\n                score = max(score, prefix[i + 1] + prefix[j + 1] - prefix[i + 1] - penalty);\n            }\n            maxScore = max(maxScore, score);\n        }\n\n        return maxScore;\n    }\n};"
}