{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 110792000,
    "question_id": "2893",
    "elapsed_time": 176,
    "compare_result
    "code_output": "23",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708206499760,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1178269629",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maxScore(vector<int>& nums, int x) {\n        int n = nums.size();\n        vector<long long> prefixSum(n + 1, 0);\n        for (int i = 0; i < n; ++i) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i];\n        }\n\n        long long result = prefixSum[n]; // Start with the sum of all elements.\n        long long currSum = 0;\n\n        for (int i = 0, j = 0; i < n; ++i) {\n            if (i > 0 && (nums[i] % 2 != nums[i - 1] % 2)) {\n                currSum -= x; // Deduct x if parities differ.\n            }\n            currSum += nums[i]; // Add current number to currSum.\n\n            // Maintain the sliding window [j, i] where the conditions are met.\n            while (j < i && currSum < prefixSum[i + 1] - prefixSum[j]) {\n                if (nums[j] % 2 != nums[j + 1] % 2) {\n                    currSum += x; // Add x back if removing nums[j] fixes the parity issue.\n                }\n                currSum -= nums[j]; // Remove nums[j] from currSum.\n                ++j;\n            }\n\n            result = max(result, currSum); // Update result with the maximum score found so far.\n        }\n\n        return result;\n    }\n};"
}