{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 113924000,
    "question_id": "2893",
    "elapsed_time": 6019,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708217415495,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 82,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1178347920",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_score(nums :: [integer], x :: integer) :: integer\n  def max_score(nums, x) do\n    Enum.reduce(1..(length(nums) - 1), nums |> hd(), fn i, acc ->\n      if rem(Enum.at(nums, i - 1), 2) == rem(Enum.at(nums, i), 2) do\n        acc + Enum.at(nums, i)\n      else\n        acc + Enum.at(nums, i) - x\n      end\n    end)\n  end\nend"
}