{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 7: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 7: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:7: anonymous fn/6 in Solution.max_score/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:6: anonymous fn/4 in Solution.max_score/2\n    (stdlib 5.1.1) maps.erl:416: :maps.fold_1/4\n    solution.ex:5: Solution.max_score/2\n    solution.ex:33: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 74764000,
    "question_id": "2893",
    "elapsed_time": 460,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708217487520,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1178348431",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_score(nums :: [integer], x :: integer) :: integer\n  def max_score(nums, x) do\n    dp = :maps.from_list(Enum.with_index(nums))\n    |> Enum.reduce(%{0 => hd(nums)}, fn {value, idx}, acc ->\n      max = Enum.reduce(0..idx-1, -1, fn prev_idx, max_so_far ->\n        score_if_moved = acc[prev_idx] + value - if rem(nums[prev_idx], 2) !== rem(value, 2), do: x, else: 0\n        max(max_so_far, score_if_moved)\n      end)\n      if max > -1, do: Map.put(acc, idx, max), else: acc\n    end)\n    |> Map.values()\n    |> Enum.max()\n  end\nend"
}