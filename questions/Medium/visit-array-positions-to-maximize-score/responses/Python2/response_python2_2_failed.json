{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24416000,
    "question_id": "2893",
    "elapsed_time": 798,
    "compare_result
    "code_output": "19",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708850192948,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185608220",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxScore(self, nums, x):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\"\n        total_score = sum(nums)\n        n = len(nums)\n        min_loss = float('inf')\n        left, current_loss = 0, 0\n        target = total_score - x\n        \n        if target == 0:\n            return total_score\n        \n        for right in range(n):\n            current_loss += nums[right]\n            while current_loss > target and left <= right:\n                current_loss -= nums[left]\n                left += 1\n            if current_loss == target:\n                min_loss = min(min_loss, right - left + 1)\n        \n        if min_loss == float('inf'):\n            return -1\n        \n        return total_score - min_loss"
}