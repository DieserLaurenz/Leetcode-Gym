{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 121292000,
    "question_id": "2893",
    "elapsed_time": 11014,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708850167228,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185607819",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxScore(self, nums, x):\n        \"\"\"\n        :type nums: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\"\n        def dfs(i, j, memo):\n            if (i, j) in memo:\n                return memo[(i, j)]\n            if i >= j:\n                return 0\n            score = 0\n            if nums[i] % 2 == nums[j] % 2:\n                score = max(nums[i] + dfs(i + 1, j, memo), nums[j] + dfs(i, j - 1, memo))\n            else:\n                score = max(nums[i] - x + dfs(i + 1, j, memo), nums[j] - x + dfs(i, j - 1, memo))\n            memo[(i, j)] = score\n            return score\n        \n        memo = {}\n        return nums[0] + dfs(1, len(nums) - 1, memo)"
}