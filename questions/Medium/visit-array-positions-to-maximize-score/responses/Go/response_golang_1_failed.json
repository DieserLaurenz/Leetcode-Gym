{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9500000,
    "question_id": "2893",
    "elapsed_time": 143,
    "compare_result
    "code_output": "46",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708216750093,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1178343548",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxScore(nums []int, x int) int64 {\n    n := len(nums)\n    prefixSum := make([]int64, n+1)\n    for i := 0; i < n; i++ {\n        prefixSum[i+1] = prefixSum[i] + int64(nums[i])\n    }\n\n    var maxScore int64 = 0\n    var j int = n\n    for i := 0; i <= n; i++ {\n        for j > i && prefixSum[i]+prefixSum[n]-prefixSum[j]-(int64(n-j-i)*int64(x)) < maxScore {\n            j--\n        }\n        if j > i {\n            score := prefixSum[i] + prefixSum[n] - prefixSum[j] - (int64(n-j-i) * int64(x))\n            if score > maxScore {\n                maxScore = score\n            }\n        }\n    }\n\n    return maxScore\n}"
}