{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128052000,
    "question_id": "2893",
    "elapsed_time": 5016,
    "compare_result
    "code_output": "22",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708217192366,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178346434",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (max-score nums x)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let ([n (length nums)])\n    (define (dp i prev even odd)\n      (if (= i n) 0\n          (max (+ (if (not (= (modulo (list-ref nums i) 2) (modulo (list-ref nums prev) 2))) (- (list-ref nums i) x) (list-ref nums i))\n                   (if (= (modulo (list-ref nums i) 2) 0)\n                       (dp (+ i 1) i (max even (list-ref nums i)) odd)\n                       (dp (+ i 1) i even (max odd (list-ref nums i)))))\n              (if (= (modulo (list-ref nums i) 2) 0)\n                  (+ even (dp (+ i 1) prev even odd))\n                  (+ odd (dp (+ i 1) prev even odd))))))\n    (+ (list-ref nums 0) (dp 1 0 (list-ref nums 0) (list-ref nums 0)))))"
}