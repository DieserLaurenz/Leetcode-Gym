{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 125588000,
    "question_id": "2893",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708217223205,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 93,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178346648",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (max-score nums x)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (define (dp i sum max-sum)\n    (cond\n      [(>= i (length nums)) max-sum]\n      [else\n       (let* ((new-sum (+ sum (list-ref nums i)))\n              (next-sum (if (and (> i 0) (not (= (modulo (list-ref nums (sub1 i)) 2) (modulo (list-ref nums i) 2))))\n                              (- new-sum x)\n                              new-sum))\n              (new-max-sum (if (> next-sum max-sum) next-sum max-sum)))\n         (dp (add1 i) next-sum new-max-sum))]))\n  (dp 0 0 (list-ref nums 0)))"
}