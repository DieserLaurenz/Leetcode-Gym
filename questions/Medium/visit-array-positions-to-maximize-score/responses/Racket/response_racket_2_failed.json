{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 13: Char 69: read-syntax: missing `)` to close preceding `(`, found instead `]`",
    "full_compile_error": "Line 13: Char 69: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2893",
    "task_finish_time": 1708217248369,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178346866",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (max-score nums x)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (letrec ([dp (memoize (lambda (i last-pick)\n                          (if (>= i (length nums))\n                              0\n                              (let ((pick (list-ref nums i))\n                                    (next-i (+ i 1))\n                                    (score-if-pick (+ pick\n                                                      (if (and last-pick (not (= (modulo pick 2) (modulo last-pick 2))))\n                                                          (- (dp next-i pick) x)\n                                                          (dp next-i pick))))\n                                    (score-if-skip (dp next-i last-pick)))\n                                (max score-if-pick score-if-skip))))])\n    (dp 1 (list-ref nums 0))))"
}