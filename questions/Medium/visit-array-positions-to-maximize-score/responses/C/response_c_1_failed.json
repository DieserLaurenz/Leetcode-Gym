{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 14172000,
    "question_id": "2893",
    "elapsed_time": 130,
    "compare_result
    "code_output": "23",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708206808236,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1178272163",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long maxScore(int* nums, int numsSize, int x) {\n    long long totalSum = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        totalSum += nums[i]; // Calculate total sum of the array\n    }\n\n    long long minLoss = LONG_MAX, currentLoss = 0;\n    int left = 0, right = 0;\n    // Calculate minimum loss due to penalty for having different parities\n    for (right = 0; right < numsSize; ++right) {\n        if (right > 0 && (nums[right] % 2 != nums[right - 1] % 2)) {\n            currentLoss += x; // Add penalty if parities differ\n        }\n        // Shrink the window from the left if it includes the whole array or if parity changes\n        while (left < right && (right - left + 1 == numsSize || nums[left] % 2 != nums[left + 1] % 2)) {\n            if (nums[left] % 2 != nums[left + 1] % 2) currentLoss -= x; // Remove penalty if moving left pointer\n            left++;\n        }\n        minLoss = currentLoss < minLoss ? currentLoss : minLoss; // Update minimum loss\n    }\n\n    return totalSum - minLoss; // Max score is total sum minus minimum penalty loss\n}"
}