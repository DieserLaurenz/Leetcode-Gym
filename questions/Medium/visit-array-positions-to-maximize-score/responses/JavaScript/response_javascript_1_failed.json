{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64368000,
    "question_id": "2893",
    "elapsed_time": 122,
    "compare_result
    "code_output": "-5",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708207049960,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1178274047",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} x\n * @return {number}\n */\nvar maxScore = function(nums, x) {\n    let n = nums.length;\n    let total = nums.reduce((a, b) => a + b, 0);\n    let minCost = Infinity;\n    let current = 0;\n    let target = total - x;\n    if (target < 0) return -1;\n    for (let i = 0, j = 0; j < n; j++) {\n        current += nums[j];\n        while (i <= j && current > target) {\n            current -= nums[i++];\n        }\n        if (current === target) {\n            minCost = Math.min(minCost, n - (j - i + 1));\n        }\n    }\n    return minCost === Infinity ? -1 : total - (target + minCost * x);\n};"
}