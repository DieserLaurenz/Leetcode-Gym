{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31532000,
    "question_id": "2893",
    "elapsed_time": 878,
    "compare_result
    "code_output": "18",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708850319954,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185609562",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxScore(self, nums: List[int], x: int) -> int:\n        n = len(nums)\n        total = sum(nums)\n        min_penalty = float('inf')\n        i = 0\n        current_penalty = 0\n        for j in range(n):\n            if nums[j] % 2 != nums[i] % 2:\n                current_penalty += x\n            while j - i + 1 > n // 2 or (j - i + 1 == n // 2 and current_penalty > x * (n // 2)):\n                if nums[j] % 2 != nums[i] % 2:\n                    current_penalty -= x\n                i += 1\n            if j - i + 1 == n // 2:\n                min_penalty = min(min_penalty, current_penalty)\n        if min_penalty == float('inf'):\n            return total\n        return total - min_penalty"
}