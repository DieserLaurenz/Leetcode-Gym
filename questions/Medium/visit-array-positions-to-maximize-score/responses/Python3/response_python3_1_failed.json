{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 117764000,
    "question_id": "2893",
    "elapsed_time": 11013,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708850287927,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 81,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185609109",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxScore(self, nums: List[int], x: int) -> int:\n        def dfs(i, j, memo):\n            if (i, j) in memo:\n                return memo[(i, j)]\n            if i == j:\n                return nums[i]\n            left = nums[i] - (x if nums[i] % 2 != nums[i + 1] % 2 else 0) + dfs(i + 1, j, memo)\n            right = nums[j] - (x if nums[j] % 2 != nums[j - 1] % 2 else 0) + dfs(i, j - 1, memo)\n            memo[(i, j)] = max(left, right)\n            return memo[(i, j)]\n        \n        memo = {}\n        return dfs(0, len(nums) - 1, memo)"
}