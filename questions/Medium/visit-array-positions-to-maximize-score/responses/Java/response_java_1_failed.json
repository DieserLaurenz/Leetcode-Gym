{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40900000,
    "question_id": "2893",
    "elapsed_time": 159,
    "compare_result
    "code_output": "23",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708206658600,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1178270905",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long maxScore(int[] nums, int x) {\n        int n = nums.length;\n        long maxScore = 0;\n        long total = 0;\n        long penalty = 0;\n        long currentScore = 0;\n\n        // Calculate total sum\n        for (int num : nums) {\n            total += num;\n        }\n\n        // Use sliding window to find the minimum penalty when not visiting some elements\n        int left = 0, right = 0;\n        while (right < n) {\n            // Expand the window to the right\n            if ((nums[left] % 2) != (nums[right] % 2)) {\n                penalty += x; // Increment penalty if parities differ\n            }\n            currentScore += nums[right]; // Add current number to currentScore\n            right++; // Move right pointer\n\n            // Shrink the window from the left if necessary\n            while ((right - left > 1 && penalty > total - currentScore) || (left < n && (nums[left] % 2) != (nums[left + 1] % 2) && right - left > 1)) {\n                if ((nums[left] % 2) != (nums[left + 1] % 2)) {\n                    penalty -= x; // Decrement penalty if parities differ\n                }\n                currentScore -= nums[left]; // Subtract the leftmost number from currentScore\n                left++; // Move left pointer\n            }\n\n            // Update maxScore if current configuration is better\n            if (total - penalty > maxScore) {\n                maxScore = total - penalty;\n            }\n        }\n\n        return maxScore;\n    }\n}"
}