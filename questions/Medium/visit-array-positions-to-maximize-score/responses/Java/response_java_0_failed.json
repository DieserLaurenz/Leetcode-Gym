{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58800000,
    "display_runtime": "8",
    "question_id": "2893",
    "elapsed_time": 385,
    "compare_result
    "code_output": "23",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708206618904,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1178270577",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long maxScore(int[] nums, int x) {\n        int n = nums.length;\n        long[] prefixSum = new long[n];\n        prefixSum[0] = nums[0];\n        for (int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + nums[i];\n        }\n\n        long maxScore = prefixSum[n - 1]; // Start with the total sum of the array\n        for (int i = 0; i < n - 1; i++) {\n            if (nums[i] % 2 != nums[i + 1] % 2) { // Check for different parities\n                maxScore = Math.max(maxScore, prefixSum[i] + (prefixSum[n - 1] - prefixSum[i + 1]) - x);\n            }\n        }\n        \n        return maxScore;\n    }\n}"
}