{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60180000,
    "display_runtime": "13",
    "question_id": "2893",
    "elapsed_time": 361,
    "compare_result
    "code_output": "1677",
    "std_output": "",
    "last_testcase": "[38,92,23,30,25,96,6,71,78,77,33,23,71,48,87,77,53,28,6,20,90,83,42,21,64,95,84,29,22,21,33,36,53,51,85,25,80,56,71,69,5,21,4,84,28,16,65,7]\n52",
    "expected_output": "1545",
    "task_finish_time": 1708206698925,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 24,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1178271261",
    "input_formatted": "[38,92,23,30,25,96,6,71,78,77,33,23,71,48,87,77,53,28,6,20,90,83,42,21,64,95,84,29,22,21,33,36,53,51,85,25,80,56,71,69,5,21,4,84,28,16,65,7], 52",
    "input": "[38,92,23,30,25,96,6,71,78,77,33,23,71,48,87,77,53,28,6,20,90,83,42,21,64,95,84,29,22,21,33,36,53,51,85,25,80,56,71,69,5,21,4,84,28,16,65,7]\n52",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long maxScore(int[] nums, int x) {\n        long score = nums[0];\n        long maxScore = score;\n        int n = nums.length;\n        int j = n; // Initialize j outside the bounds as we'll search from the end backwards.\n\n        // First, try moving forwards and collecting scores until a parity change would cause a penalty.\n        for (int i = 1; i < n; ++i) {\n            if (nums[i] % 2 != nums[i - 1] % 2) {\n                // If moving to nums[i] incurs a penalty, check if it's better to start removing elements from the end instead.\n                while (j > i && (nums[j - 1] % 2 != nums[i] % 2 || j == n)) {\n                    score += nums[--j];\n                }\n                if (j == i) break; // If j has met i, we've considered all elements we can without incurring a penalty.\n                score -= x; // Apply the penalty for the parity change.\n            }\n            score += nums[i];\n            maxScore = Math.max(maxScore, score);\n        }\n\n        // Reset score to include the possibility of not moving at all and only removing elements from the end to avoid penalties.\n        score = nums[0];\n        j = n;\n        // Try to maximize score by only removing elements from the end to avoid penalties.\n        for (int i = 1; i < n; ++i) {\n            if (nums[i] % 2 != nums[i - 1] % 2) {\n                score -= x; // Apply penalty for the parity change.\n            }\n            while (j > i && (nums[j - 1] % 2 != nums[i - 1] % 2 || j == n)) {\n                score += nums[--j];\n            }\n            if (j == i) break; // If j has met i, all elements have been considered.\n            score += nums[i];\n            maxScore = Math.max(maxScore, score);\n        }\n\n        return maxScore;\n    }\n}"
}