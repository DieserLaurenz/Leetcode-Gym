{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50652000,
    "question_id": "2893",
    "elapsed_time": 4975,
    "compare_result
    "code_output": "23",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708216524375,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1178342051",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxScore(nums: IntArray, x: Int): Long {\n        val prefixSum = LongArray(nums.size + 1)\n        for (i in nums.indices) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i]\n        }\n\n        var maxScore = Long.MIN_VALUE\n        var currentScore: Long\n        for (i in nums.indices) {\n            for (j in i + 1 until nums.size) {\n                currentScore = prefixSum[j + 1] - prefixSum[i]\n                if (nums[i] % 2 != nums[j] % 2) currentScore -= x\n                maxScore = maxOf(maxScore, currentScore)\n            }\n        }\n\n        return maxScore\n    }\n}"
}