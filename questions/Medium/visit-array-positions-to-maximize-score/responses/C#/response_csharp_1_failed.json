{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64324000,
    "question_id": "2893",
    "elapsed_time": 577,
    "compare_result
    "code_output": "23",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708206940458,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 30,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1178273193",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaxScore(int[] nums, int x) {\n        long totalScore = 0;\n        int n = nums.Length;\n        long maxScore = 0;\n        for (int i = 0; i < n; i++) {\n            totalScore += nums[i];\n        }\n        \n        long currentScore = totalScore;\n        int left = 0, right = n-1;\n        while (left < n) {\n            if ((nums[left] % 2 != nums[right] % 2)) {\n                currentScore -= x;\n            }\n            maxScore = Math.Max(maxScore, currentScore);\n            currentScore -= nums[left];\n            left++;\n            \n            // Adjust right pointer to maintain parity change condition\n            while (right > left && nums[right] % 2 != nums[left] % 2) {\n                currentScore -= nums[right];\n                right--;\n            }\n        }\n        \n        return maxScore;\n    }\n}"
}