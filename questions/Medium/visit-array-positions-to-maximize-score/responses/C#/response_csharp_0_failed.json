{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72552000,
    "question_id": "2893",
    "elapsed_time": 467,
    "compare_result
    "code_output": "29",
    "std_output": "",
    "last_testcase": "[2,3,6,1,9,2]\n5",
    "expected_output": "13",
    "task_finish_time": 1708206915338,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 744,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1178272993",
    "input_formatted": "[2,3,6,1,9,2], 5",
    "input": "[2,3,6,1,9,2]\n5",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaxScore(int[] nums, int x) {\n        int n = nums.Length;\n        long[] prefixSums = new long[n + 1];\n        for (int i = 0; i < n; i++) {\n            prefixSums[i + 1] = prefixSums[i] + nums[i];\n        }\n\n        long maxScore = prefixSums[n];\n        long minPenalty = long.MaxValue;\n\n        // Two pointers technique to find minimum penalty for parity changes\n        int j = 0;\n        for (int i = 0; i < n; i++) {\n            while (j < n && (j <= i || nums[j] % 2 == nums[j - 1] % 2)) {\n                j++;\n            }\n            if (j < n) {\n                long penalty = x * (long)(j - i);\n                long score = prefixSums[j + 1] - prefixSums[i];\n                minPenalty = Math.Min(minPenalty, penalty - score);\n            }\n        }\n\n        return maxScore - (minPenalty == long.MaxValue ? 0 : minPenalty);\n    }\n}"
}