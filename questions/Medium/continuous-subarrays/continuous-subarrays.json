{
    "acRate": 40.67174227031261,
    "difficulty": "Medium",
    "freqBar": null,
    "questionId": "2868",
    "frontendQuestionId": "2762",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Continuous Subarrays",
    "titleSlug": "continuous-subarrays",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Queue",
            "id": "VG9waWNUYWdOb2RlOjM0",
            "slug": "queue"
        },
        {
            "name": "Sliding Window",
            "id": "VG9waWNUYWdOb2RlOjU1ODIx",
            "slug": "sliding-window"
        },
        {
            "name": "Heap (Priority Queue)",
            "id": "VG9waWNUYWdOb2RlOjYxMDUw",
            "slug": "heap-priority-queue"
        },
        {
            "name": "Ordered Set",
            "id": "VG9waWNUYWdOb2RlOjYxMDcw",
            "slug": "ordered-set"
        },
        {
            "name": "Monotonic Queue",
            "id": "VG9waWNUYWdOb2RlOjYxMDcx",
            "slug": "monotonic-queue"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    long long continuousSubarrays(vector<int>& nums) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public long continuousSubarrays(int[] nums) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def continuousSubarrays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def continuousSubarrays(self, nums: List[int]) -> int:\n        "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long continuousSubarrays(int* nums, int numsSize){\n\n}"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public long ContinuousSubarrays(int[] nums) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar continuousSubarrays = function(nums) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function continuousSubarrays(nums: number[]): number {\n\n};"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function continuousSubarrays($nums) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func continuousSubarrays(_ nums: [Int]) -> Int {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun continuousSubarrays(nums: IntArray): Long {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  int continuousSubarrays(List<int> nums) {\n\n  }\n}"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func continuousSubarrays(nums []int) int64 {\n    \n}"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef continuous_subarrays(nums)\n    \nend"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def continuousSubarrays(nums: Array[Int]): Long = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn continuous_subarrays(nums: Vec<i32>) -> i64 {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (continuous-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec continuous_subarrays(Nums :: [integer()]) -> integer().\ncontinuous_subarrays(Nums) ->\n  ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec continuous_subarrays(nums :: [integer]) :: integer\n  def continuous_subarrays(nums) do\n\n  end\nend"
        }
    ],
    "content": "You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:\n\nLet i, i + 1, ..., j be the indices in the subarray. Then, for each pair of indices i <= i1, i2 <= j, 0 <= |nums[i1] - nums[i2]| <= 2.\n\nReturn the total number of continuous subarrays.\nA subarray is a contiguous non-empty sequence of elements within an array.\n\nExample 1:\n\nInput: nums = [5,4,2,4]\nOutput: 8\nExplanation: \nContinuous subarray of size 1: [5], [4], [2], [4].\nContinuous subarray of size 2: [5,4], [4,2], [2,4].\nContinuous subarray of size 3: [4,2,4].\nThereare no subarrys of size 4.\nTotal continuous subarrays = 4 + 3 + 1 = 8.\nIt can be shown that there are no more continuous subarrays.\n\n\nExample 2:\n\nInput: nums = [1,2,3]\nOutput: 6\nExplanation: \nContinuous subarray of size 1: [1], [2], [3].\nContinuous subarray of size 2: [1,2], [2,3].\nContinuous subarray of size 3: [1,2,3].\nTotal continuous subarrays = 3 + 2 + 1 = 6.\n\n\nConstraints:\n\n1 <= nums.length <= 105\n1 <= nums[i] <= 109\n\n"
}