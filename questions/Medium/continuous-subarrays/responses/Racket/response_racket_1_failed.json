{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 16: Char 108: read-syntax: missing `)` to close `(` on line 22, found instead `]`",
    "full_compile_error": "Line 16: Char 108: read-syntax: missing `)` to close `(` on line 22, found instead `]`\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2868",
    "task_finish_time": 1707054070703,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1165867817",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (continuous-subarrays nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (letrec ([is-continuous\n            (lambda (start end)\n              (and (<= start end)\n                   (let ([subarray (take (drop nums start) (+ 1 (- end start)))])\n                     (let ([min-val (apply min subarray)]\n                           [max-val (apply max subarray)])\n                       (<= (- max-val min-val) 2)))))]\n           [count-continuous\n            (lambda (start end total)\n              (if (> start (length nums))\n                  total\n                  (if (>= end (length nums))\n                      (count-continuous (+ start 1) (+ start 1) total)\n                      (count-continuous start (+ end 1) (if (is-continuous start end) (+ total 1) total))))])\n    (count-continuous 0 0 0)))"
}