{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73588000,
    "question_id": "2868",
    "elapsed_time": 10508,
    "compare_result
    "code_output": "45",
    "std_output": "",
    "last_testcase": "[65,66,67,66,66,65,64,65,65,64]",
    "expected_output": "43",
    "task_finish_time": 1707053845446,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1699,
    "total_testcases": 2135,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1165865016",
    "input_formatted": "[65,66,67,66,66,65,64,65,65,64]",
    "input": "[65,66,67,66,66,65,64,65,65,64]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def continuousSubarrays(nums: Array[Int]): Long = {\n        var total: Long = 0\n        var start = 0\n        for (end <- nums.indices) {\n            // Ensure the current window [start, end] satisfies the condition\n            var min = nums(start)\n            var max = nums(start)\n            for (k <- start to end) {\n                min = min min nums(k)\n                max = max max nums(k)\n                // If the condition is violated, move the start pointer\n                if (max - min > 2) {\n                    start += 1\n                    min = nums(start)\n                    max = nums(start)\n                    for (j <- start to end) {\n                        min = min min nums(j)\n                        max = max max nums(j)\n                    }\n                }\n            }\n            // Add the number of continuous subarrays ending at 'end'\n            total += end - start + 1\n        }\n        total\n    }\n}"
}