{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 76860000,
    "question_id": "2868",
    "elapsed_time": 6014,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[5,4,2,4]",
    "expected_output": "8",
    "task_finish_time": 1707054351932,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1650,
    "total_testcases": 2135,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1165871050",
    "input_formatted": "[5,4,2,4]",
    "input": "[5,4,2,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec continuous_subarrays(nums :: [integer]) :: integer\n  def continuous_subarrays(nums) do\n    Enum.reduce(0..length(nums)-1, 0, fn i, acc ->\n      min_val = Enum.at(nums, i)\n      max_val = min_val\n      Enum.reduce(i..length(nums)-1, acc, fn j, inner_acc ->\n        min_val = min(min_val, Enum.at(nums, j))\n        max_val = max(max_val, Enum.at(nums, j))\n        if max_val - min_val <= 2 do\n          inner_acc + 1\n        else\n          inner_acc\n        end\n      end)\n    end)\n  end\nend"
}