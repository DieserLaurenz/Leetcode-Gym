{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "4420 ms",
    "memory": 77816000,
    "question_id": "2868",
    "elapsed_time": 4597,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707022097787,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2135,
    "total_testcases": 2135,
    "runtime_percentile": 6.666299999999999,
    "status_memory": "77.8 MB",
    "memory_percentile": 19.99959999999998,
    "pretty_lang": "Kotlin",
    "submission_id": "1165514421",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun continuousSubarrays(nums: IntArray): Long {\n        var total = 0L\n        var left = 0\n        var max = Int.MIN_VALUE\n        var min = Int.MAX_VALUE\n\n        for (right in nums.indices) {\n            // Update max and min for the current window\n            max = maxOf(max, nums[right])\n            min = minOf(min, nums[right])\n\n            // Shrink the window from the left if the condition is violated\n            while (max - min > 2) {\n                // Update max and min if they were equal to nums[left]\n                if (nums[left] == max || nums[left] == min) {\n                    max = nums.subArray(left + 1, right + 1).maxOrNull()!!\n                    min = nums.subArray(left + 1, right + 1).minOrNull()!!\n                }\n                left++\n            }\n\n            // Count the number of subarrays ending at 'right'\n            total += (right - left + 1)\n        }\n        return total\n    }\n\n    private fun IntArray.subArray(start: Int, end: Int): IntArray {\n        return this.copyOfRange(start, end)\n    }\n}"
}