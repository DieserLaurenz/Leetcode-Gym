{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "1060 ms",
    "memory": 57916000,
    "display_runtime": "1060",
    "question_id": "2868",
    "elapsed_time": 1446,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706896754259,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2135,
    "total_testcases": 2135,
    "runtime_percentile": 5.05920000000005,
    "status_memory": "57.9 MB",
    "memory_percentile": 61.867900000000056,
    "pretty_lang": "Java",
    "submission_id": "1164136149",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long continuousSubarrays(int[] nums) {\n        long count = 0;\n        int left = 0;\n        int max = nums[0], min = nums[0];\n        \n        for (int right = 0; right < nums.length; right++) {\n            // Update the max and min within the current window\n            max = Math.max(max, nums[right]);\n            min = Math.min(min, nums[right]);\n            \n            // While the difference between max and min in the window is more than 2,\n            // move the left pointer to the right and update max and min accordingly.\n            while (max - min > 2) {\n                if (nums[left] == max) {\n                    max = getMax(nums, left + 1, right);\n                }\n                if (nums[left] == min) {\n                    min = getMin(nums, left + 1, right);\n                }\n                left++;\n            }\n            \n            // Add the number of continuous subarrays ending at `right`\n            count += right - left + 1;\n        }\n        \n        return count;\n    }\n    \n    // Helper method to find the max within a range of the array\n    private int getMax(int[] nums, int start, int end) {\n        int max = nums[start];\n        for (int i = start + 1; i <= end; i++) {\n            max = Math.max(max, nums[i]);\n        }\n        return max;\n    }\n    \n    // Helper method to find the min within a range of the array\n    private int getMin(int[] nums, int start, int end) {\n        int min = nums[start];\n        for (int i = start + 1; i <= end; i++) {\n            min = Math.min(min, nums[i]);\n        }\n        return min;\n    }\n}"
}