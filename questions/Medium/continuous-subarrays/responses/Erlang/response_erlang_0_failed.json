{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 15: exception error: badarg",
    "full_runtime_error": "Line 15: exception error: badarg\n[{lists,split,[-1,[]],[{file,\"lists.erl\"},{line,1815}]},\n {solution,continuous_subarrays,5,[{file,\"solution.erl\"},{line,15}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,33}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,21}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,50}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 63216000,
    "question_id": "2868",
    "elapsed_time": 1347,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,4,2,4]",
    "expected_output": "8",
    "task_finish_time": 1707054197244,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2135,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1165869257",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec continuous_subarrays(Nums :: [integer()]) -> integer().\ncontinuous_subarrays(Nums) ->\n    continuous_subarrays(Nums, 0, 0, 0, []).\n\ncontinuous_subarrays([], Count, _, _, _) ->\n    Count;\ncontinuous_subarrays([H|T], Count, Min, Max, Window) ->\n    NewMin = min(H, Min),\n    NewMax = max(H, Max),\n    if\n        NewMax - NewMin =< 2 ->\n            NewCount = Count + length(Window) + 1,\n            continuous_subarrays(T, NewCount, NewMin, NewMax, [H|Window]);\n        true ->\n            {_, NewWindow} = lists:split(length(Window) - 1, Window),\n            continuous_subarrays([H|T], Count, lists:min(NewWindow), lists:max(NewWindow), tl(NewWindow))\n    end."
}