{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 196544000,
    "question_id": "2868",
    "elapsed_time": 5218,
    "compare_result": "01100011101001011111111101011111101101010111011100111111111001110111111101111111011111111111111101111101101011111111111101111011111110101111110111011111101111110011111111110101111011110111111111101111111110111110111101011111111110111111111111111101110111111011110110101010101111111110010111011011111110111101111111110111111111111111111011101101110101111011101011100100111011111111111111011110101100101111001111111011111010110111011101101010110111011110101100111110110111011101110110111110011111011110111111000111111101010110101110111110100111011011111100111111110101111111011111011111000110111101011110001001010111111000111111110001111101011011111101011011111111111001010111011101111011110111111111111111001110011111010011101111100111111100111111111111110111011010111111111111001111111110101001001110111110011100111111111111111111100111101110111100111001001100011111101111100111111111111111011111110111111001111001111011111110011111111111011101111101011101011111111011110111111110111011111111011111110011111011101111110111110101011111101111111111011111010101111001111111111111111110011111011101001111111100110110111011111111010000111110101111101111110111111111001110101111111111111111100111101101110111101101110011111011111110111110111001111110111111111111001100101111111101111111111101011010101111100111011011011001001101110011000001111101110111011101110101111001011011111100100011001110011111111111111111111011011111111110110011011011111011111111011110011011111111111111001111111110111111110010111111011111111111101011111100101111011111111111111111111001011011111110111110111111111111111011111111111110011111101111110110101001111001011010010100110111111111011010111111011110111000111010111111110111110111110111111111011100101111101010111111111011111111010110011101011111110111111101111110101111001110101110111001110100011111111111011011111110111111111011111111011100110110101011011101111111111111010101101111011111101111111111111111000101110111011011111111001111111101000101111111111111111111111011110010111000000000010100011100001110000011110000000001000000000000000100000000010100000010000000100000000000000000000000010000000000000",
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[5,4,2,4]",
    "expected_output": "8",
    "task_finish_time": 1707054289094,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1572,
    "total_testcases": 2135,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1165870289",
    "input_formatted": "[5,4,2,4]",
    "input": "[5,4,2,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec continuous_subarrays(Nums :: [integer()]) -> integer().\ncontinuous_subarrays(Nums) ->\n    continuous_subarrays(Nums, 0, [], 0).\n\ncontinuous_subarrays([], Count, _, _) ->\n    Count;\ncontinuous_subarrays([H|T], Count, Window, WindowMin) when length(Window) =:= 0; abs(H - WindowMin) =< 2 ->\n    % Expand the window to include the current element if it's empty or within the condition.\n    NewWindow = [H|Window],\n    NewMin = lists:min(NewWindow),\n    NewCount = Count + length(NewWindow),\n    continuous_subarrays(T, NewCount, NewWindow, NewMin);\ncontinuous_subarrays([H|T], Count, [First|Rest], WindowMin) ->\n    % Try to adjust the window to meet the condition by removing elements from the start.\n    case abs(H - WindowMin) =< 2 of\n        true ->\n            NewWindow = [H|[First|Rest]],\n            NewMin = lists:min(NewWindow),\n            NewCount = Count + length(NewWindow),\n            continuous_subarrays(T, NewCount, NewWindow, NewMin);\n        false ->\n            % If the new element doesn't fit, shift the window and retry.\n            NewWindow = [H|Rest],\n            NewMin = case Rest of\n                [] -> H;\n                _ -> lists:min(NewWindow)\n            end,\n            NewCount = Count + length(NewWindow),\n            continuous_subarrays(T, NewCount, NewWindow, NewMin)\n    end."
}