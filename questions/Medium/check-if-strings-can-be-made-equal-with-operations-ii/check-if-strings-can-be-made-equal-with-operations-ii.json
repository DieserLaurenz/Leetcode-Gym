{
    "acRate": 54.86051647212583,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2840",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Check if Strings Can be Made Equal With Operations II",
    "titleSlug": "check-if-strings-can-be-made-equal-with-operations-ii",
    "topicTags": [
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     bool checkStrings(string s1, string s2) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public boolean checkStrings(String s1, String s2) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def checkStrings(self, s1, s2):         \"\"\"         :type s1: str         :type s2: str         :rtype: bool         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def checkStrings(self, s1: str, s2: str) -> bool:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "bool checkStrings(char * s1, char * s2){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public bool CheckStrings(string s1, string s2) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s1  * @param {string} s2  * @return {boolean}  */ var checkStrings = function(s1, s2) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function checkStrings(s1: string, s2: string): boolean {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s1      * @param String $s2      * @return Boolean      */     function checkStrings($s1, $s2) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func checkStrings(_ s1: String, _ s2: String) -> Bool {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun checkStrings(s1: String, s2: String): Boolean {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   bool checkStrings(String s1, String s2) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func checkStrings(s1 string, s2 string) bool {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s1 # @param {String} s2 # @return {Boolean} def check_strings(s1, s2)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def checkStrings(s1: String, s2: String): Boolean = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn check_strings(s1: String, s2: String) -> bool {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (check-strings s1 s2)   (-> string? string? boolean?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec check_strings(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean(). check_strings(S1, S2) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec check_strings(s1 :: String.t, s2 :: String.t) :: boolean   def check_strings(s1, s2) do    end end"
        }
    ],
    "content": "You are given two strings s1 and s2, both of length n, consisting of lowercase English letters. You can apply the following operation on any of the two strings any number of times:  Choose any two indices i and j such that i < j and the difference j - i is even, then swap the two characters at those indices in the string.  Return true if you can make the strings s1 and s2 equal, andfalse otherwise.  Example 1:  Input: s1 = \"abcdba\", s2 = \"cabdab\" Output: true Explanation: We can apply the following operations on s1: - Choose the indices i = 0, j = 2. The resulting string is s1 = \"cbadba\". - Choose the indices i = 2, j = 4. The resulting string is s1 = \"cbbdaa\". - Choose the indices i = 1, j = 5. The resulting string is s1 = \"cabdab\" = s2.  Example 2:  Input: s1 = \"abe\", s2 = \"bea\" Output: false Explanation: It is not possible to make the two strings equal.   Constraints:  n == s1.length == s2.length 1 <= n <= 105 s1 and s2 consist only of lowercase English letters.  "
}