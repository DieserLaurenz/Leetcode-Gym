{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "143 ms",
    "memory": 61792000,
    "question_id": "2978",
    "elapsed_time": 243,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706793342303,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 752,
    "total_testcases": 752,
    "runtime_percentile": 37.93059999999995,
    "status_memory": "61.8 MB",
    "memory_percentile": 10.344299999999958,
    "pretty_lang": "JavaScript",
    "submission_id": "1162960696",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} s1\n * @param {string} s2\n * @return {boolean}\n */\nvar checkStrings = function(s1, s2) {\n    // Initialize objects to count occurrences of each character at even and odd indices\n    const evenCounts1 = {};\n    const oddCounts1 = {};\n    const evenCounts2 = {};\n    const oddCounts2 = {};\n\n    // Populate the counts for s1\n    for (let i = 0; i < s1.length; i++) {\n        const char = s1[i];\n        if (i % 2 === 0) { // Even index\n            evenCounts1[char] = (evenCounts1[char] || 0) + 1;\n        } else { // Odd index\n            oddCounts1[char] = (oddCounts1[char] || 0) + 1;\n        }\n    }\n\n    // Populate the counts for s2\n    for (let i = 0; i < s2.length; i++) {\n        const char = s2[i];\n        if (i % 2 === 0) { // Even index\n            evenCounts2[char] = (evenCounts2[char] || 0) + 1;\n        } else { // Odd index\n            oddCounts2[char] = (oddCounts2[char] || 0) + 1;\n        }\n    }\n\n    // Compare the counts for both even and odd indices\n    for (const char in evenCounts1) {\n        if (evenCounts1[char] !== evenCounts2[char]) {\n            return false; // Mismatch found\n        }\n    }\n    for (const char in oddCounts1) {\n        if (oddCounts1[char] !== oddCounts2[char]) {\n            return false; // Mismatch found\n        }\n    }\n\n    // Ensure all characters in s2 are accounted for\n    for (const char in evenCounts2) {\n        if (evenCounts2[char] !== evenCounts1[char]) {\n            return false;\n        }\n    }\n    for (const char in oddCounts2) {\n        if (oddCounts2[char] !== oddCounts1[char]) {\n            return false;\n        }\n    }\n\n    // If all checks passed, the transformation is possible\n    return true;\n};"
}