{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "error: spec for undefined function check_strings/2",
    "full_compile_error": "error: spec for undefined function check_strings/2\n  solution.ex:2\n** (CompileError) solution.ex: cannot compile file (errors have been logged)\n    (stdlib 5.1.1) lists.erl:1594: :lists.foldl/3",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2978",
    "task_finish_time": 1706803692609,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1163098187",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec check_strings(s1 :: String.t(), s2 :: String.t()) :: boolean() do\n    s1_even = Enum.filter(0..String.length(s1)-1, &Integer.is_even/1) |> Enum.map(&String.at(s1, &1)) |> Enum.sort()\n    s2_even = Enum.filter(0..String.length(s2)-1, &Integer.is_even/1) |> Enum.map(&String.at(s2, &1)) |> Enum.sort()\n    s1_odd = Enum.filter(0..String.length(s1)-1, &Integer.is_odd/1) |> Enum.map(&String.at(s1, &1)) |> Enum.sort()\n    s2_odd = Enum.filter(0..String.length(s2)-1, &Integer.is_odd/1) |> Enum.map(&String.at(s2, &1)) |> Enum.sort()\n\n    s1_even == s2_even && s1_odd == s2_odd\n  end\nend"
}