{
    "status_code": 10,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "669 ms",
    "memory": 126976000,
    "question_id": "2978",
    "elapsed_time": 1835,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706803529851,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 752,
    "total_testcases": 752,
    "runtime_percentile": 100,
    "status_memory": "127 MB",
    "memory_percentile": 100,
    "pretty_lang": "Erlang",
    "submission_id": "1163095748",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "-spec check_strings(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\ncheck_strings(S1, S2) ->\n    % Convert binaries to lists of characters (since Erlang strings are lists)\n    List1 = binary_to_list(S1),\n    List2 = binary_to_list(S2),\n    \n    % Extract even and odd indexed characters from both strings\n    {Evens1, Odds1} = extract_even_odd(List1, [], [], 0),\n    {Evens2, Odds2} = extract_even_odd(List2, [], [], 0),\n    \n    % Sort the extracted characters to compare\n    SortedEvens1 = lists:sort(Evens1),\n    SortedOdds1 = lists:sort(Odds1),\n    SortedEvens2 = lists:sort(Evens2),\n    SortedOdds2 = lists:sort(Odds2),\n    \n    % Check if both strings have the same set of characters at even and odd positions\n    SortedEvens1 == SortedEvens2 andalso SortedOdds1 == SortedOdds2.\n\n% Helper function to extract even and odd indexed characters\nextract_even_odd([], Evens, Odds, _) ->\n    {Evens, Odds};\nextract_even_odd([H | T], Evens, Odds, Index) ->\n    if \n        Index rem 2 == 0 -> extract_even_odd(T, [H | Evens], Odds, Index + 1);\n        true -> extract_even_odd(T, Evens, [H | Odds], Index + 1)\n    end."
}