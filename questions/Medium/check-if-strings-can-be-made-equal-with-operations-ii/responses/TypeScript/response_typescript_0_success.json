{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "139 ms",
    "memory": 57808000,
    "question_id": "2978",
    "elapsed_time": 197,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706793425179,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 752,
    "total_testcases": 752,
    "runtime_percentile": 100,
    "status_memory": "57.8 MB",
    "memory_percentile": 50.0,
    "pretty_lang": "TypeScript",
    "submission_id": "1162961608",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function checkStrings(s1: string, s2: string): boolean {\n    // Create frequency maps for even and odd indices for s1 and s2\n    const s1Even = new Map<string, number>();\n    const s1Odd = new Map<string, number>();\n    const s2Even = new Map<string, number>();\n    const s2Odd = new Map<string, number>();\n\n    // Populate the frequency maps\n    for (let i = 0; i < s1.length; i++) {\n        const charS1 = s1[i];\n        const charS2 = s2[i];\n        if (i % 2 === 0) { // Even index\n            s1Even.set(charS1, (s1Even.get(charS1) || 0) + 1);\n            s2Even.set(charS2, (s2Even.get(charS2) || 0) + 1);\n        } else { // Odd index\n            s1Odd.set(charS1, (s1Odd.get(charS1) || 0) + 1);\n            s2Odd.set(charS2, (s2Odd.get(charS2) || 0) + 1);\n        }\n    }\n\n    // Helper function to compare maps\n    const mapsAreEqual = (map1: Map<string, number>, map2: Map<string, number>): boolean => {\n        if (map1.size !== map2.size) return false;\n        for (let [key, val] of map1) {\n            if (!map2.has(key) || map2.get(key) !== val) return false;\n        }\n        return true;\n    };\n\n    // Compare even and odd frequency maps\n    return mapsAreEqual(s1Even, s2Even) && mapsAreEqual(s1Odd, s2Odd);\n}"
}