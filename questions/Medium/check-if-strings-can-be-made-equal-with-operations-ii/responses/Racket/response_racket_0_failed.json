{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 130240000,
    "question_id": "2978",
    "elapsed_time": 536,
    "compare_result
    "code_output": "false",
    "std_output": "",
    "last_testcase": "\"abcdba\"\n\"cabdab\"",
    "expected_output": "true",
    "task_finish_time": 1706803404908,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 369,
    "total_testcases": 752,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1163094004",
    "input_formatted": "\"abcdba\", \"cabdab\"",
    "input": "\"abcdba\"\n\"cabdab\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (check-strings s1 s2)\n  (-> string? string? boolean?)\n  (let ([len (string-length s1)])\n    (let loop ([i 0] [even-counts (make-hash)] [odd-counts (make-hash)])\n      (cond\n        [(= i len)\n         (and (equal? even-counts (make-hash))\n              (equal? odd-counts (make-hash)))]\n        [else\n         (let* ([char1 (string-ref s1 i)]\n                [char2 (string-ref s2 i)]\n                [counts (if (even? i) even-counts odd-counts)])\n           (hash-update! counts char1 add1 0)\n           (hash-update! counts char2 sub1 0)\n           (loop (add1 i) even-counts odd-counts))]))))\n\n(define (add1 x) (+ x 1))\n(define (sub1 x) (- x 1))"
}