{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "283 ms",
    "memory": 129220000,
    "question_id": "2978",
    "elapsed_time": 376,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706803458503,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 752,
    "total_testcases": 752,
    "runtime_percentile": 100,
    "status_memory": "129.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1163094751",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (check-strings s1 s2)\n  (-> string? string? boolean?)\n  ; Create two vectors (for even and odd indices) of size 26 to count the frequency of each letter\n  ; 'a' to 'z' in both strings, since we are dealing with lowercase English letters only.\n  (let ([even-counts1 (make-vector 26 0)]\n        [odd-counts1 (make-vector 26 0)]\n        [even-counts2 (make-vector 26 0)]\n        [odd-counts2 (make-vector 26 0)])\n    ; Iterate over the strings to fill the frequency vectors.\n    (for ([i (in-range (string-length s1))])\n      (let ([index (- (char->integer (string-ref s1 i)) (char->integer #\\a))]\n            [parity (modulo i 2)])\n        (vector-set! (if (= parity 0) even-counts1 odd-counts1) index\n                     (+ 1 (vector-ref (if (= parity 0) even-counts1 odd-counts1) index))))\n      (let ([index (- (char->integer (string-ref s2 i)) (char->integer #\\a))]\n            [parity (modulo i 2)])\n        (vector-set! (if (= parity 0) even-counts2 odd-counts2) index\n                     (+ 1 (vector-ref (if (= parity 0) even-counts2 odd-counts2) index)))))\n    ; Compare the frequency vectors for both even and odd indices.\n    (and (equal? even-counts1 even-counts2) (equal? odd-counts1 odd-counts2))))"
}