{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "13 ms",
    "memory": 4320000,
    "question_id": "2978",
    "elapsed_time": 32,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706803324490,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 752,
    "total_testcases": 752,
    "runtime_percentile": 88.8889,
    "status_memory": "4.3 MB",
    "memory_percentile": 22.222300000000004,
    "pretty_lang": "Rust",
    "submission_id": "1163092905",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn check_strings(s1: String, s2: String) -> bool {\n        // Convert both strings to character vectors to facilitate operations\n        let mut s1_chars: Vec<char> = s1.chars().collect();\n        let mut s2_chars: Vec<char> = s2.chars().collect();\n\n        // Separate odd and even indexed characters for s1 and s2\n        let (mut s1_even, mut s1_odd) = (Vec::new(), Vec::new());\n        let (mut s2_even, mut s2_odd) = (Vec::new(), Vec::new());\n        \n        // Distribute characters based on their index\n        for i in 0..s1_chars.len() {\n            if i % 2 == 0 { // Even index\n                s1_even.push(s1_chars[i]);\n                s2_even.push(s2_chars[i]);\n            } else { // Odd index\n                s1_odd.push(s1_chars[i]);\n                s2_odd.push(s2_chars[i]);\n            }\n        }\n\n        // Sort the characters in each vector to compare them\n        s1_even.sort_unstable();\n        s1_odd.sort_unstable();\n        s2_even.sort_unstable();\n        s2_odd.sort_unstable();\n\n        // Return true if both odd and even characters match between s1 and s2\n        s1_even == s2_even && s1_odd == s2_odd\n    }\n}"
}