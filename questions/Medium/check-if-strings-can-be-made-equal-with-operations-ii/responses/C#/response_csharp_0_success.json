{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "74 ms",
    "memory": 51188000,
    "question_id": "2978",
    "elapsed_time": 196,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1706793249211,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 752,
    "total_testcases": 752,
    "runtime_percentile": 63.63639999999999,
    "status_memory": "51.2 MB",
    "memory_percentile": 45.45460000000001,
    "pretty_lang": "C#",
    "submission_id": "1162959678",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool CheckStrings(string s1, string s2) {\n        // Initialize counters for characters at even and odd positions for both strings\n        int[] evenCounts1 = new int[26], evenCounts2 = new int[26];\n        int[] oddCounts1 = new int[26], oddCounts2 = new int[26];\n        \n        // Populate the counters\n        for (int i = 0; i < s1.Length; i++) {\n            if (i % 2 == 0) { // Even index\n                evenCounts1[s1[i] - 'a']++;\n                evenCounts2[s2[i] - 'a']++;\n            } else { // Odd index\n                oddCounts1[s1[i] - 'a']++;\n                oddCounts2[s2[i] - 'a']++;\n            }\n        }\n        \n        // Compare the counters for even and odd indices separately\n        for (int i = 0; i < 26; i++) {\n            if (evenCounts1[i] != evenCounts2[i] || oddCounts1[i] != oddCounts2[i]) {\n                return false;\n            }\n        }\n        \n        // If all counts match, the strings can be made equal\n        return true;\n    }\n}"
}