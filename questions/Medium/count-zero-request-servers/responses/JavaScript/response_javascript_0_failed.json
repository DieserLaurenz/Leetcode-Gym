{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 75848000,
    "question_id": "2833",
    "elapsed_time": 4024,
    "compare_result
    "code_output": "[1,1]",
    "std_output": "",
    "last_testcase": "3\n[[2,4],[2,1],[1,2],[3,1]]\n2\n[3,4]",
    "expected_output": "[0,1]",
    "task_finish_time": 1707127077553,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 875,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1166664851",
    "input_formatted": "3, [[2,4],[2,1],[1,2],[3,1]], 2, [3,4]",
    "input": "3\n[[2,4],[2,1],[1,2],[3,1]]\n2\n[3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number[][]} logs\n * @param {number} x\n * @param {number[]} queries\n * @return {number[]}\n */\nvar countServers = function(n, logs, x, queries) {\n    const res = new Array(queries.length).fill(0);\n    const lastRequestTime = new Array(n + 1).fill(-1);\n\n    // Record the last request time of each server\n    for (const [server_id, time] of logs) {\n        lastRequestTime[server_id] = Math.max(lastRequestTime[server_id], time);\n    }\n\n    for (let i = 0; i < queries.length; i++) {\n        let count = n; // Assume all servers haven't received any requests\n        for (let j = 1; j <= n; j++) {\n            if (lastRequestTime[j] >= queries[i] - x && lastRequestTime[j] <= queries[i]) {\n                count--; // Server j received a request in the interval, decrement count\n            }\n        }\n        res[i] = count;\n    }\n\n    return res;\n};"
}