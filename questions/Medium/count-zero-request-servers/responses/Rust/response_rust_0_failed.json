{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8884000,
    "question_id": "2833",
    "elapsed_time": 2043,
    "compare_result
    "code_output": "[0,2]",
    "std_output": "",
    "last_testcase": "3\n[[2,4],[2,1],[1,2],[3,1]]\n2\n[3,4]",
    "expected_output": "[0,1]",
    "task_finish_time": 1707128314827,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 876,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1166678888",
    "input_formatted": "3, [[2,4],[2,1],[1,2],[3,1]], 2, [3,4]",
    "input": "3\n[[2,4],[2,1],[1,2],[3,1]]\n2\n[3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_servers(n: i32, logs: Vec<Vec<i32>>, x: i32, queries: Vec<i32>) -> Vec<i32> {\n        use std::collections::HashMap;\n\n        let mut server_last_request = HashMap::new();\n        for log in logs {\n            server_last_request.insert(log[0], log[1]);\n        }\n\n        queries.into_iter().map(|query| {\n            let mut count = 0;\n            for server_id in 1..=n {\n                if let Some(&last_time) = server_last_request.get(&server_id) {\n                    if last_time < query - x || last_time > query {\n                        count += 1;\n                    }\n                } else {\n                    count += 1;\n                }\n            }\n            count\n        }).collect()\n    }\n}"
}