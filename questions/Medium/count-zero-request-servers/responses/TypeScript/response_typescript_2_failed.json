{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73704000,
    "question_id": "2833",
    "elapsed_time": 4015,
    "compare_result
    "code_output": "[1,2,1,1]",
    "std_output": "",
    "last_testcase": "4\n[[2,30],[2,5],[3,9],[4,21]]\n9\n[11,28,16,18]",
    "expected_output": "[2,3,3,3]",
    "task_finish_time": 1707127309924,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 261,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1166667400",
    "input_formatted": "4, [[2,30],[2,5],[3,9],[4,21]], 9, [11,28,16,18]",
    "input": "4\n[[2,30],[2,5],[3,9],[4,21]]\n9\n[11,28,16,18]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function countServers(n: number, logs: number[][], x: number, queries: number[]): number[] {\n    const counts = new Array(queries.length).fill(0);\n    const lastRequestTimes = new Array(n + 1).fill(-1);\n\n    // Fill last request times for each server\n    logs.forEach(log => {\n        const [serverId, time] = log;\n        lastRequestTimes[serverId] = Math.max(lastRequestTimes[serverId], time);\n    });\n\n    // For each query, calculate how many servers did not receive any requests\n    for (let i = 0; i < queries.length; i++) {\n        const query = queries[i];\n        let activeServers = 0;\n\n        for (let serverId = 1; serverId <= n; serverId++) {\n            if (lastRequestTimes[serverId] === -1 || lastRequestTimes[serverId] < query - x) {\n                activeServers++;\n            }\n        }\n\n        counts[i] = activeServers;\n    }\n\n    return counts;\n}"
}