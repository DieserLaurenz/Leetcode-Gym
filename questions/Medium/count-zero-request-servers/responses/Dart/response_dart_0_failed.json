{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 191668000,
    "question_id": "2833",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "[0,2]",
    "std_output": "",
    "last_testcase": "3\n[[2,4],[2,1],[1,2],[3,1]]\n2\n[3,4]",
    "expected_output": "[0,1]",
    "task_finish_time": 1707127792179,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 223,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1166672934",
    "input_formatted": "3, [[2,4],[2,1],[1,2],[3,1]], 2, [3,4]",
    "input": "3\n[[2,4],[2,1],[1,2],[3,1]]\n2\n[3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> countServers(int n, List<List<int>> logs, int x, List<int> queries) {\n    // Initialize a map to track the latest request time for each server\n    Map<int, int> lastRequestTime = {};\n\n    // Populate the map with the logs data\n    for (List<int> log in logs) {\n      int serverId = log[0];\n      int time = log[1];\n      lastRequestTime[serverId] = time;\n    }\n\n    // Initialize the result list\n    List<int> result = [];\n\n    // Iterate over each query\n    for (int query in queries) {\n      // Calculate the start of the query interval\n      int startTime = query - x;\n\n      // Count servers that did not receive any requests during the interval\n      int count = 0;\n      for (int serverId = 1; serverId <= n; serverId++) {\n        // Check if the server did not receive any request or received it before the start time\n        if (!lastRequestTime.containsKey(serverId) || lastRequestTime[serverId]! < startTime) {\n          count++;\n        }\n      }\n\n      // Add the count to the result list\n      result.add(count);\n    }\n\n    return result;\n  }\n}"
}