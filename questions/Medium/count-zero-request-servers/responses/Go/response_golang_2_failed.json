{
    "status_code": 14,
    "lang": "golang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 174412000,
    "question_id": "2833",
    "elapsed_time": 3015,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "92\n[[56,317],[15,235],[49,161],[16,165],[66,212],[59,269],[57,250],[32,190],[66,124],[90,327],[73,5],[19,61],[67,253],[19,102],[79,267],[32,147],[88,274],[75,14],[18,329],[32,50],[22,93],[26,25],[36,295],[62,175],[50,300],[58,176],[41,136]]\n65\n[115,321,242,146,103,290,110,155,325,236,253,72,328,178,106,263,204,169,250,164,324,255,157,318,108,79,220,310,90,299,228,267,281,256,295,139,132,218,87,270,289,136,332,216,137,113,99,124,77,88,71,222,180,66,229,86,314,161,198,264,154,217,197,165,201,301,240]",
    "expected_output": "[89,86,89,88,89,86,89,87,86,87,87,88,85,85,89,88,87,87,88,87,86,87,87,85,89,88,86,85,89,85,87,87,86,88,85,88,89,86,89,86,86,88,84,86,88,89,89,89,88,89,88,86,85,87,87,89,85,87,86,88,87,86,86,86,86,85,87]",
    "task_finish_time": 1707127998353,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2093,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1166675261",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "func countServers(n int, logs [][]int, x int, queries []int) []int {\n    serverActivity := make([][]bool, n+1)\n    for i := range serverActivity {\n        serverActivity[i] = make([]bool, 1000001) // Assuming max time is 10^6 as per constraints\n    }\n\n    // Mark the times each server received a request\n    for _, log := range logs {\n        serverID, time := log[0], log[1]\n        serverActivity[serverID][time] = true\n    }\n\n    results := make([]int, len(queries))\n    for i, query := range queries {\n        idleCount := 0\n        for serverID := 1; serverID <= n; serverID++ {\n            idle := true\n            for time := max(0, query-x); time <= query && idle; time++ {\n                if serverActivity[serverID][time] {\n                    idle = false\n                }\n            }\n            if idle {\n                idleCount++\n            }\n        }\n        results[i] = idleCount\n    }\n\n    return results\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}