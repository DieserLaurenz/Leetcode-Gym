{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 40: ** (UndefinedFunctionError) function Enum.none?/2 is undefined or private",
    "full_runtime_error": "Line 40: ** (UndefinedFunctionError) function Enum.none?/2 is undefined or private\n    (elixir 1.15.7) Enum.none?([[1, 3], [1, 5]], #Function<3.125524365/1 in Solution.count_servers/4>)\n    (elixir 1.15.7) lib/enum.ex:721: anonymous fn/3 in Enum.count/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    (elixir 1.15.7) lib/enum.ex:1693: Enum.\"-map/2-lists^map/1-1-\"/2\n    solution.ex:40: Driver.consume_test_cases/2\n    solution.ex:22: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 76716000,
    "question_id": "2833",
    "elapsed_time": 514,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "expected_output": "[1,2]",
    "task_finish_time": 1707137327452,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1166771300",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_servers(n :: integer, logs :: [[integer]], x :: integer, queries :: [integer]) :: [integer]\n  def count_servers(n, logs, x, queries) do\n    logs_by_server = Enum.group_by(logs, fn [server_id, _time] -> server_id end)\n    queries\n    |> Enum.map(fn query ->\n      Enum.count(1..n, fn server_id ->\n        case Map.fetch(logs_by_server, server_id) do\n          :error -> true\n          {:ok, times} ->\n            Enum.none?(times, fn [_server_id, time] ->\n              time <= query and time >= query - x\n            end)\n        end\n      end)\n    end)\n  end\nend"
}