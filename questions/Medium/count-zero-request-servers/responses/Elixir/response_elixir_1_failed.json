{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 93480000,
    "question_id": "2833",
    "elapsed_time": 6017,
    "compare_result": "100011000100001011111111001001110100111011010000101001110010011010000011001000111101000111010100010011000011100011110101100111011110100111110000000000001110000000101011011110011001111100101010100111100101101000010001011000000111110110110111111011110010000010000000011011000111111011011010010010011010011010000101110110110100111111100011011001011011011111000011010011001000010111010100010111010101111110001001000111000101010000101100000101000110110011110011111001111000110010111111110100110011111011101000010011010101011101111101010100011111101101011010010111110110000000111111111001100010010001001110100111100001001110001011100101101101111010000111100110000101011100001000110101110010001010010100101000100010010111100101100010001000101000001101110000011000001111010111000010001010010111100111110101001110111101001101110110000111110000111101100110011111101100010000001111100001011110110000000111001000011111101101111011011010110110011001111111010010011010111110000001010100100011000000100111101101011110100001111010001010110111101010001010010011100111111011111000100010000010111010000101110100110100101000111100010011011011010100111101001111111001100101001011100110010001011001011000010001110100011001011000100010110101111000011100010000011101111101011110100000001011011000000100011011110100011110001111001000011010011111111110001011110011101101011101111111011011110001110000101100110101001101100101111111001000110101100111010010100001010100010000000100001110010010111110110000001010010100011011000111111100101011100011111010010110110110111110011001111000011001111111010101100110110111111110001001010011010110110101000000110011101011110001010010000010000001011100100000011100001011001100110100011111001110100010011000001100001100101100100011010011101000101101101001111011000000011100011001010111100011010110011000110110110101001101101001000000110100111101001011000001101010101000010000100100111011011110110110111110101000111000101110101011101001011010001111100001100111000010001110001001001100101110001100010011011010100100110001010011010000010111101110001000000101000001000110011011001011100011000000010000011001001010000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[1,1]",
    "std_output": "",
    "last_testcase": "3\n[[2,4],[2,1],[1,2],[3,1]]\n2\n[3,4]",
    "expected_output": "[0,1]",
    "task_finish_time": 1707137299295,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1066,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1166770927",
    "input_formatted": "3, [[2,4],[2,1],[1,2],[3,1]], 2, [3,4]",
    "input": "3\n[[2,4],[2,1],[1,2],[3,1]]\n2\n[3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_servers(n :: integer, logs :: [[integer]], x :: integer, queries :: [integer]) :: [integer]\n  def count_servers(n, logs, x, queries) do\n    active_at_time = Enum.reduce(logs, %{}, fn [server_id, time], acc ->\n      Map.update(acc, server_id, [time], fn times -> [time | times] end)\n    end)\n\n    Enum.map(queries, fn query ->\n      Enum.count(0..n-1, fn server_id ->\n        times = Map.get(active_at_time, server_id, [])\n\n        Enum.all?(times, fn time ->\n          time < query - x or time > query\n        end)\n      end)\n    end)\n  end\nend"
}