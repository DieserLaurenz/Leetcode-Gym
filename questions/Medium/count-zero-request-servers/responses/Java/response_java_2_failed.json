{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 69672000,
    "question_id": "2833",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "[1,1]",
    "std_output": "",
    "last_testcase": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "expected_output": "[1,2]",
    "task_finish_time": 1707119194028,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 23,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1166580202",
    "input_formatted": "3, [[1,3],[2,6],[1,5]], 5, [10,11]",
    "input": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int[] countServers(int n, int[][] logs, int x, int[] queries) {\n        // Map to keep track of requests for each server\n        boolean[][] hasRequest = new boolean[n + 1][1000001]; // Assuming maximum time as 10^6 based on constraints\n\n        // Fill the hasRequest array based on logs\n        for (int[] log : logs) {\n            hasRequest[log[0]][log[1]] = true;\n        }\n\n        // Preprocess to fill the intervals for each server\n        for (int i = 1; i <= n; i++) {\n            for (int t = 1; t < hasRequest[i].length; t++) {\n                hasRequest[i][t] |= hasRequest[i][t - 1];\n            }\n        }\n\n        int[] result = new int[queries.length];\n        for (int i = 0; i < queries.length; i++) {\n            int queryTime = queries[i];\n            int count = n; // Start with all servers and decrement if a request is found in the interval\n            for (int j = 1; j <= n; j++) {\n                int startTime = Math.max(0, queryTime - x);\n                if (queryTime < 1000001 && hasRequest[j][queryTime] || (startTime > 0 && hasRequest[j][startTime - 1])) {\n                    count--;\n                }\n            }\n            result[i] = count;\n        }\n\n        return result;\n    }\n}"
}