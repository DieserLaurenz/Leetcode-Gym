{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36224000,
    "question_id": "2833",
    "elapsed_time": 3015,
    "compare_result
    "code_output": "[2,3]",
    "std_output": "",
    "last_testcase": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "expected_output": "[1,2]",
    "task_finish_time": 1707119299215,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 589,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1166581266",
    "input_formatted": "3, [[1,3],[2,6],[1,5]], 5, [10,11]",
    "input": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countServers(int n, int** logs, int logsSize, int* logsColSize, int x, int* queries, int queriesSize, int* returnSize) {\n    *returnSize = queriesSize;\n    int* result = (int*)malloc(queriesSize * sizeof(int));\n    int** serverActivity = (int**)malloc((n + 1) * sizeof(int*)); // Track activity for each server\n    for (int i = 0; i <= n; i++) {\n        serverActivity[i] = (int*)calloc(2, sizeof(int)); // [0]: last active time, [1]: active flag\n    }\n\n    // Process logs to mark server activity within the query intervals\n    for (int i = 0; i < logsSize; i++) {\n        int server_id = logs[i][0];\n        int time = logs[i][1];\n        serverActivity[server_id][0] = time; // Update last active time\n        serverActivity[server_id][1] = 1; // Mark as active\n    }\n\n    for (int i = 0; i < queriesSize; i++) {\n        int queryTime = queries[i];\n        int count = n; // Assume all servers are inactive initially\n\n        for (int j = 1; j <= n; j++) {\n            if (serverActivity[j][1] == 1 && (serverActivity[j][0] <= queryTime && serverActivity[j][0] > queryTime - x)) {\n                count--; // Server is active in the interval, decrement count\n            }\n        }\n\n        result[i] = count; // Number of inactive servers for this query\n    }\n\n    // Free allocated memory\n    for (int i = 0; i <= n; i++) {\n        free(serverActivity[i]);\n    }\n    free(serverActivity);\n\n    return result;\n}"
}