{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 29236000,
    "question_id": "2833",
    "elapsed_time": 3018,
    "compare_result
    "code_output": "[3,2]",
    "std_output": "",
    "last_testcase": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "expected_output": "[1,2]",
    "task_finish_time": 1707119338332,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 80,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1166581670",
    "input_formatted": "3, [[1,3],[2,6],[1,5]], 5, [10,11]",
    "input": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* countServers(int n, int** logs, int logsSize, int* logsColSize, int x, int* queries, int queriesSize, int* returnSize) {\n    *returnSize = queriesSize;\n    int* result = (int*)malloc(queriesSize * sizeof(int));\n    int* requestTimes = (int*)malloc((n + 1) * sizeof(int));\n    for (int i = 0; i <= n; i++) {\n        requestTimes[i] = -1; // Initialize with -1 indicating no request has been received\n    }\n\n    // Record the latest request time for each server\n    for (int i = 0; i < logsSize; i++) {\n        int serverId = logs[i][0];\n        int time = logs[i][1];\n        requestTimes[serverId] = requestTimes[serverId] > time ? requestTimes[serverId] : time;\n    }\n\n    for (int i = 0; i < queriesSize; i++) {\n        int activeServers = 0;\n        for (int j = 1; j <= n; j++) {\n            // If the server has received a request and it's outside the query interval, increase activeServers\n            if (requestTimes[j] != -1 && (requestTimes[j] < queries[i] - x || requestTimes[j] > queries[i])) {\n                activeServers++;\n            }\n        }\n        // Total servers minus active ones give us the servers that did not receive any request in the interval\n        result[i] = n - activeServers;\n    }\n\n    free(requestTimes);\n    return result;\n}"
}