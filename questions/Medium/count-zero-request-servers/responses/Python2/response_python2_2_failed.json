{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 14856000,
    "question_id": "2833",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "[2,2,2,2]",
    "std_output": "",
    "last_testcase": "4\n[[2,30],[2,5],[3,9],[4,21]]\n9\n[11,28,16,18]",
    "expected_output": "[2,3,3,3]",
    "task_finish_time": 1708755006875,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1020,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184567059",
    "input_formatted": "4, [[2,30],[2,5],[3,9],[4,21]], 9, [11,28,16,18]",
    "input": "4\n[[2,30],[2,5],[3,9],[4,21]]\n9\n[11,28,16,18]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def countServers(self, n, logs, x, queries):\n        from collections import defaultdict\n        active_times = defaultdict(lambda: [0] * 2) # Use to store min and max time for each server\n\n        for log in logs:\n            server_id, time = log\n            if active_times[server_id][0] == 0:\n                active_times[server_id] = [time, time]\n            else:\n                active_times[server_id][0] = min(active_times[server_id][0], time)\n                active_times[server_id][1] = max(active_times[server_id][1], time)\n\n        result = []\n        for query in queries:\n            count = 0\n            for server_id in range(1, n + 1):\n                if server_id not in active_times or active_times[server_id][1] < query - x or active_times[server_id][0] > query:\n                    count += 1\n            result.append(count)\n\n        return result"
}