{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15148000,
    "question_id": "2833",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "[1,2,1,1]",
    "std_output": "",
    "last_testcase": "4\n[[2,30],[2,5],[3,9],[4,21]]\n9\n[11,28,16,18]",
    "expected_output": "[2,3,3,3]",
    "task_finish_time": 1708754928482,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 261,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184566172",
    "input_formatted": "4, [[2,30],[2,5],[3,9],[4,21]], 9, [11,28,16,18]",
    "input": "4\n[[2,30],[2,5],[3,9],[4,21]]\n9\n[11,28,16,18]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def countServers(self, n, logs, x, queries):\n        \"\"\"\n        :type n: int\n        :type logs: List[List[int]]\n        :type x: int\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n        server_last_active = [0] * (n + 1)\n        for server_id, time in logs:\n            server_last_active[server_id] = max(server_last_active[server_id], time)\n        \n        result = []\n        for query in queries:\n            count = 0\n            for i in range(1, n + 1):\n                if server_last_active[i] == 0 or server_last_active[i] < query - x:\n                    count += 1\n            result.append(count)\n        \n        return result"
}