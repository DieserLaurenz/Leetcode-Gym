{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 166932000,
    "question_id": "2833",
    "elapsed_time": 4018,
    "compare_result
    "code_output": "[3,3]",
    "std_output": "",
    "last_testcase": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "expected_output": "[1,2]",
    "task_finish_time": 1707119024349,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 214,
    "total_testcases": 3129,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1166578427",
    "input_formatted": "3, [[1,3],[2,6],[1,5]], 5, [10,11]",
    "input": "3\n[[1,3],[2,6],[1,5]]\n5\n[10,11]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    vector<int> countServers(int n, vector<vector<int>>& logs, int x, vector<int>& queries) {\n        unordered_map<int, vector<int>> requestsPerServer;\n        for (const auto& log : logs) {\n            requestsPerServer[log[0]].push_back(log[1]);\n        }\n\n        // Sort the request times for each server to improve search efficiency\n        for (auto& [_, times] : requestsPerServer) {\n            sort(times.begin(), times.end());\n        }\n\n        vector<int> result;\n        for (const int& query : queries) {\n            int count = n; // Start by assuming all servers are available\n            for (const auto& [server, times] : requestsPerServer) {\n                if (!times.empty() && !(times.back() < query - x)) {\n                    // Binary search to find if there's a request in the interval [query-x, query]\n                    if (binary_search(times.begin(), times.end(), query, [&query, &x](const int& time, const int& q) {\n                        return time > q - x;\n                    })) {\n                        count--; // Server received a request in the interval, so it's not available\n                    }\n                }\n            }\n            result.push_back(count);\n        }\n        return result;\n    }\n};"
}