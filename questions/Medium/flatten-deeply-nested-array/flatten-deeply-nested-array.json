{
    "acRate": 64.16603773584906,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2625",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Flatten Deeply Nested Array",
    "titleSlug": "flatten-deeply-nested-array",
    "topicTags": [],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {Array} arr  * @param {number} depth  * @return {Array}  */ var flat = function (arr, n) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "type MultiDimensionalArray = (number | MultiDimensionalArray)[];  var flat = function (arr:  MultiDimensionalArray, n: number):  MultiDimensionalArray {      };"
        }
    ],
    "content": "Given amulti-dimensional arrayarrand a depth n, returnaflattenedversion of that array. A multi-dimensionalarray is a recursive data structure that contains integers or othermulti-dimensionalarrays. Aflattenedarray is a version of that array with some or all of the sub-arrays removed and replaced with the actual elements in that sub-array. This flattening operation should only be done if the current depth of nestingis lessthann. The depth of the elements in the first array are considered to be0. Please solve it without the built-inArray.flat method.  Example 1:  Input arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 0 Output [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]]  Explanation Passing a depth of n=0 will always result in the original array. This is because the smallest possible depth of a subarray (0) is not less than n=0. Thus, no subarray should be flattened.  Example 2:  Input arr = [1, 2, 3, [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 1 Output [1, 2, 3, 4, 5, 6, 7, 8, [9, 10, 11], 12, 13, 14, 15]  Explanation The subarrays starting with 4, 7, and 13 are all flattened. This is because their depth of 0 is less than 1. However [9, 10, 11] remains unflattened because its depth is 1. Example 3:  Input arr = [[1, 2, 3], [4, 5, 6], [7, 8, [9, 10, 11], 12], [13, 14, 15]] n = 2 Output [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]  Explanation The maximum depth of any subarray is 1. Thus, all of them are flattened.  Constraints:  0 <= count of numbers in arr <=105 0 <= count of subarrays in arr <=105 maxDepth <= 1000 -1000 <= each number <= 1000 0 <= n <= 1000  "
}