{
    "acRate": 82.08733687078733,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2785",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Sort Vowels in a String",
    "titleSlug": "sort-vowels-in-a-string",
    "topicTags": [
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        }
    ],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     string sortVowels(string s) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public String sortVowels(String s) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def sortVowels(self, s):         \"\"\"         :type s: str         :rtype: str         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def sortVowels(self, s: str) -> str:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "char * sortVowels(char * s){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public string SortVowels(string s) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @return {string}  */ var sortVowels = function(s) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function sortVowels(s: string): string {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @return String      */     function sortVowels($s) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func sortVowels(_ s: String) -> String {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun sortVowels(s: String): String {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   String sortVowels(String s) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func sortVowels(s string) string {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @return {String} def sort_vowels(s)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def sortVowels(s: String): String = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn sort_vowels(s: String) -> String {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (sort-vowels s)   (-> string? string?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec sort_vowels(S :: unicode:unicode_binary()) -> unicode:unicode_binary(). sort_vowels(S) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec sort_vowels(s :: String.t) :: String.t   def sort_vowels(s) do    end end"
        }
    ],
    "content": "Given a 0-indexed string s, permute s to get a new string t such that:  All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i]. The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].  Return the resulting string. The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.  Example 1:  Input: s = \"lEetcOde\" Output: \"lEOtcede\" Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.  Example 2:  Input: s = \"lYmpH\" Output: \"lYmpH\" Explanation: There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\".   Constraints:  1 <= s.length <= 105 s consists only of letters of theEnglish alphabetin uppercase and lowercase.  "
}