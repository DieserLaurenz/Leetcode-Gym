{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 15: IndexError: list index out of range",
    "full_runtime_error": "IndexError: list index out of range\n    if last and word[0] == words[last-1][-1]:\nLine 15 in dfs (Solution.py)\n    res = min(res, dfs(temp, new_last, memo) + new_last)\nLine 18 in dfs (Solution.py)\n    res = min(res, dfs(temp, new_last, memo) + new_last)\nLine 18 in dfs (Solution.py)\n    return dfs(words, 0, memo)\nLine 23 in minimizeConcatenatedLength (Solution.py)\n    ret = Solution().minimizeConcatenatedLength(param_1)\nLine 42 in _driver (Solution.py)\n    _driver()\nLine 52 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11568000,
    "question_id": "2854",
    "elapsed_time": 77,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1708755257160,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184569969",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimizeConcatenatedLength(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        def dfs(words, last, memo):\n            if not words:\n                return 0\n            if (last, tuple(words)) in memo:\n                return memo[(last, tuple(words))]\n            res = float('inf')\n            for i, word in enumerate(words):\n                new_last = len(word)\n                if last and word[0] == words[last-1][-1]:\n                    new_last -= 1\n                temp = words[:i] + words[i+1:]\n                res = min(res, dfs(temp, new_last, memo) + new_last)\n            memo[(last, tuple(words))] = res\n            return res\n\n        memo = {}\n        return dfs(words, 0, memo)"
}