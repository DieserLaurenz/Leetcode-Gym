{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13700000,
    "question_id": "2854",
    "elapsed_time": 11011,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1708755209720,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184569337",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimizeConcatenatedLength(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        def join(x, y):\n            if x[-1] == y[0]:\n                return x + y[1:]\n            else:\n                return x + y\n\n        n = len(words)\n        dp = [[float('inf')] * n for _ in range(n)]\n\n        for i in range(n):\n            dp[i][i] = len(words[i])\n\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                j = i + l - 1\n                for k in range(i, j):\n                    dp[i][j] = min(dp[i][j], len(join(words[k], words[j])) + dp[i][k] - len(words[k]),\n                                   len(join(words[i], words[k + 1])) + dp[k + 1][j] - len(words[k + 1]))\n\n        return min(dp[0][j] for j in range(n))"
}