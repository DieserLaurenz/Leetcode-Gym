{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 78736000,
    "question_id": "2854",
    "elapsed_time": 2031,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[\"aaa\",\"c\",\"aba\"]",
    "expected_output": "6",
    "task_finish_time": 1707159880337,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 258,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1167111147",
    "input_formatted": "[\"aaa\",\"c\",\"aba\"]",
    "input": "[\"aaa\",\"c\",\"aba\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimize_concatenated_length(words :: [String.t]) :: integer\n  def minimize_concatenated_length(words) do\n    Enum.reduce(words, \"\", fn word, acc ->\n      if acc == \"\" do\n        word\n      else\n        case {String.last(acc), String.first(word)} do\n          {x, y} when x == y -> acc <> String.slice(word, 1..-1)\n          _ -> if String.length(acc <> word) <= String.length(word <> acc), do: acc <> word, else: word <> acc\n        end\n      end\n    end)\n    |> String.length()\n  end\nend"
}