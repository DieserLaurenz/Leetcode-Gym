{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6072000,
    "question_id": "2854",
    "elapsed_time": 2054,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[\"a\",\"ca\"]",
    "expected_output": "2",
    "task_finish_time": 1707159295512,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 496,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1167103064",
    "input_formatted": "[\"a\",\"ca\"]",
    "input": "[\"a\",\"ca\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimize_concatenated_length(words: Vec<String>) -> i32 {\n        let mut dp = vec![vec![50 * 1000 + 1; 1000]; 1000];\n        let n = words.len();\n        for i in 0..n {\n            dp[i][i] = words[i].len() as i32;\n        }\n        for len in 2..=n {\n            for i in 0..=n-len {\n                let j = i + len - 1;\n                for k in i..j {\n                    let extra = if words[k].chars().last().unwrap() == words[j].chars().next().unwrap() { 1 } else { 0 };\n                    dp[i][j] = dp[i][j].min(dp[i][k] + dp[k+1][j] - extra as i32);\n                }\n            }\n        }\n        dp[0][n-1]\n    }\n}"
}