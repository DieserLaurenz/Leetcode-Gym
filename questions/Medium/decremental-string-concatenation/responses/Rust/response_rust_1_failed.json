{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10176000,
    "question_id": "2854",
    "elapsed_time": 2047,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707159335828,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 47,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1167103609",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimize_concatenated_length(words: Vec<String>) -> i32 {\n        let n = words.len();\n        let mut dp = vec![vec![i32::MAX; n]; n];\n        let mut cost = vec![vec![0; n]; n];\n\n        for i in 0..n {\n            for j in 0..n {\n                if i == j {\n                    dp[i][j] = words[i].len() as i32;\n                } else {\n                    let last_char_i = words[i].chars().last().unwrap();\n                    let first_char_j = words[j].chars().next().unwrap();\n                    cost[i][j] = if last_char_i == first_char_j {\n                        (words[i].len() + words[j].len() - 1) as i32\n                    } else {\n                        (words[i].len() + words[j].len()) as i32\n                    };\n                }\n            }\n        }\n\n        for len in 2..=n {\n            for i in 0..=n-len {\n                let j = i + len - 1;\n                for k in i..j {\n                    dp[i][j] = dp[i][j].min(dp[i][k] + cost[k+1][j]);\n                    dp[i][j] = dp[i][j].min(dp[i][k] + dp[k+1][j] - if words[k].chars().last() == words[k+1].chars().next() { 1 } else { 0 });\n                }\n            }\n        }\n\n        let mut ans = i32::MAX;\n        for i in 0..n {\n            ans = ans.min(dp[0][i] + dp[i][n-1] - words[i].len() as i32);\n        }\n        ans\n    }\n}"
}