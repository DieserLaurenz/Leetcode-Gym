{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2308000,
    "question_id": "2854",
    "elapsed_time": 14,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[\"a\",\"ca\"]",
    "expected_output": "2",
    "task_finish_time": 1707159366288,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 341,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1167104079",
    "input_formatted": "[\"a\",\"ca\"]",
    "input": "[\"a\",\"ca\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimize_concatenated_length(words: Vec<String>) -> i32 {\n        let mut words = words;\n        words.sort_unstable_by(|a, b| a.chars().last().cmp(&b.chars().last()));\n        let mut result = words[0].len() as i32;\n        for i in 1..words.len() {\n            let last_char_prev = words[i - 1].chars().last().unwrap();\n            let first_char_curr = words[i].chars().next().unwrap();\n            if last_char_prev == first_char_curr {\n                result += (words[i].len() - 1) as i32;\n            } else {\n                result += words[i].len() as i32;\n            }\n        }\n        result\n    }\n}"
}