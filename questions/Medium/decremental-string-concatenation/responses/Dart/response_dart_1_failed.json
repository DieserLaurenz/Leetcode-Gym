{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 256040000,
    "question_id": "2854",
    "elapsed_time": 5036,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"aa\",\"acb\",\"ab\"]",
    "expected_output": "6",
    "task_finish_time": 1707158566517,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 302,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1167092308",
    "input_formatted": "[\"aa\",\"acb\",\"ab\"]",
    "input": "[\"aa\",\"acb\",\"ab\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimizeConcatenatedLength(List<String> words) {\n    int n = words.length;\n    List<int> dp = List.filled(1 << n, 10000);\n    List<int> concatLength = List.filled(1 << n, 0);\n    dp[0] = 0;\n\n    for (int mask = 0; mask < (1 << n); mask++) {\n      for (int i = 0; i < n; i++) {\n        if ((mask & (1 << i)) == 0) {\n          int nextMask = mask | (1 << i);\n          int addition = words[i].length;\n          for (int j = 0; j < n; j++) {\n            if ((mask & (1 << j)) != 0) {\n              if (words[i][0] == words[j][words[j].length - 1] || words[j][0] == words[i][words[i].length - 1]) {\n                addition = words[i].length - 1;\n              }\n            }\n          }\n          if (dp[nextMask] > dp[mask] + addition) {\n            dp[nextMask] = dp[mask] + addition;\n            concatLength[nextMask] = concatLength[mask] + words[i].length;\n          }\n        }\n      }\n    }\n\n    return dp[(1 << n) - 1];\n  }\n}"
}