{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 152444000,
    "question_id": "2854",
    "elapsed_time": 4019,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[\"abb\",\"bbc\"]",
    "expected_output": "5",
    "task_finish_time": 1707137571403,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 260,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1166774094",
    "input_formatted": "[\"abb\",\"bbc\"]",
    "input": "[\"abb\",\"bbc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimizeConcatenatedLength(String[] words) {\n        int n = words.length;\n        if (n == 1) return words[0].length();\n        \n        int[][] overlap = new int[n][n];\n        \n        // Calculate maximum overlap between each pair of words\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i != j) {\n                    for (int k = Math.min(words[i].length(), words[j].length()); k > 0; k--) {\n                        if (words[i].endsWith(words[j].substring(0, k))) {\n                            overlap[i][j] = k;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        \n        // dp[mask][i] stores the minimum length of concatenation ending with words[i]\n        int[][] dp = new int[1 << n][n];\n        for (int i = 0; i < (1 << n); i++) {\n            Arrays.fill(dp[i], Integer.MAX_VALUE);\n        }\n        \n        for (int i = 0; i < n; i++) {\n            dp[1 << i][i] = words[i].length();\n        }\n        \n        for (int mask = 1; mask < (1 << n); mask++) {\n            for (int last = 0; last < n; last++) {\n                if ((mask & (1 << last)) != 0) {\n                    for (int i = 0; i < n; i++) {\n                        if ((mask & (1 << i)) == 0) {\n                            int nextMask = mask | (1 << i);\n                            dp[nextMask][i] = Math.min(dp[nextMask][i], dp[mask][last] + words[i].length() - overlap[last][i]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        int minLen = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            minLen = Math.min(minLen, dp[(1 << n) - 1][i]);\n        }\n        \n        return minLen;\n    }\n}"
}