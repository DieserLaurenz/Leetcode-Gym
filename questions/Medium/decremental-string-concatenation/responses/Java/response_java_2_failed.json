{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 163572000,
    "question_id": "2854",
    "elapsed_time": 4018,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707137617720,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 111,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1166774618",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimizeConcatenatedLength(String[] words) {\n        // Initialize the dp array with -1, denoting uncomputed states\n        int n = words.length;\n        int[][] dp = new int[1 << n][n];\n        for (int[] row : dp) {\n            Arrays.fill(row, -1);\n        }\n\n        // Precompute the savings for each pair of words when one follows the other\n        int[][] savings = new int[n][n];\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (i != j) {\n                    int minLen = Math.min(words[i].length(), words[j].length());\n                    for (int k = 1; k <= minLen; ++k) {\n                        if (words[i].endsWith(words[j].substring(0, k))) {\n                            savings[i][j] = k;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Recursive function to compute the minimum length\n        return minLength(words, savings, dp, (1 << n) - 1, 0) + words[0].length();\n    }\n\n    private int minLength(String[] words, int[][] savings, int[][] dp, int mask, int last) {\n        if (mask == (1 << last)) return 0; // Base case: only one word is chosen\n        if (dp[mask][last] != -1) return dp[mask][last]; // Return the computed result if already done\n\n        int result = Integer.MAX_VALUE;\n        for (int i = 0; i < words.length; ++i) {\n            if ((mask & (1 << i)) != 0 && i != last) {\n                // Attempt to place words[i] before the current 'last' word\n                int prevMask = mask ^ (1 << last); // Remove 'last' word from the current combination\n                int cost = minLength(words, savings, dp, prevMask, i) + words[last].length() - savings[i][last];\n                result = Math.min(result, cost);\n            }\n        }\n\n        dp[mask][last] = result; // Memoize the result\n        return result;\n    }\n}"
}