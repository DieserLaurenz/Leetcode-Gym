{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17904000,
    "question_id": "2854",
    "elapsed_time": 3010,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707158689084,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 114,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1167094211",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimizeConcatenatedLength(words []string) int {\n    if len(words) == 1 {\n        return len(words[0])\n    }\n\n    join := func(x, y string) int {\n        if x[len(x)-1] == y[0] {\n            return len(x) + len(y) - 1\n        }\n        return len(x) + len(y)\n    }\n\n    dp := make([][]int, len(words))\n    for i := range dp {\n        dp[i] = make([]int, len(words))\n    }\n\n    for l := 2; l <= len(words); l++ {\n        for i := 0; i <= len(words)-l; i++ {\n            j := i + l - 1\n            dp[i][j] = 10000 // A large number\n            for k := i; k < j; k++ {\n                dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j]-1)\n                dp[i][j] = min(dp[i][j], join(words[i], words[j])+k-i+j-k-1)\n            }\n            if l == 2 {\n                dp[i][j] = join(words[i], words[j])\n            }\n        }\n    }\n\n    return dp[0][len(words)-1]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}