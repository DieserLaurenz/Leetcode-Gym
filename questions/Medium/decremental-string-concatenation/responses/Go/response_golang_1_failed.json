{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19620000,
    "question_id": "2854",
    "elapsed_time": 2554,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[\"aaa\",\"c\",\"aba\"]",
    "expected_output": "6",
    "task_finish_time": 1707158723689,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 258,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1167094732",
    "input_formatted": "[\"aaa\",\"c\",\"aba\"]",
    "input": "[\"aaa\",\"c\",\"aba\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimizeConcatenatedLength(words []string) int {\n    dp := make([][]int, len(words))\n    for i := range dp {\n        dp[i] = make([]int, len(words))\n        for j := range dp[i] {\n            dp[i][j] = 10001 // Use a large number to initialize\n        }\n    }\n\n    for i := range words {\n        dp[i][i] = len(words[i])\n    }\n\n    for sz := 2; sz <= len(words); sz++ {\n        for i := 0; i+sz <= len(words); i++ {\n            j := i + sz - 1\n            for k := i; k < j; k++ {\n                cost := dp[i][k] + dp[k+1][j]\n                if words[k][len(words[k])-1] == words[k+1][0] {\n                    cost--\n                }\n                if dp[i][j] > cost {\n                    dp[i][j] = cost\n                }\n            }\n        }\n    }\n\n    return dp[0][len(words)-1]\n}"
}