{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11188000,
    "question_id": "2854",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707158763001,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1167095340",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimizeConcatenatedLength(words []string) int {\n    n := len(words)\n    dp := make([]int, 1<<n)\n    for i := range dp {\n        dp[i] = 1<<31 - 1\n    }\n    dp[0] = 0\n\n    concatLen := func(a, b string) int {\n        la, lb := len(a), len(b)\n        if la == 0 || lb == 0 {\n            return la + lb\n        }\n        if a[la-1] == b[0] {\n            return la + lb - 1\n        }\n        return la + lb\n    }\n\n    for mask := 1; mask < (1 << n); mask++ {\n        for i := 0; i < n; i++ {\n            if mask&(1<<i) == 0 {\n                continue\n            }\n            prevMask := mask & ^(1 << i)\n            for j := 0; j < n; j++ {\n                if prevMask&(1<<j) != 0 {\n                    dp[mask] = min(dp[mask], dp[prevMask]+concatLen(words[j], words[i]))\n                }\n            }\n            if prevMask == 0 {\n                dp[mask] = min(dp[mask], len(words[i]))\n            }\n        }\n    }\n\n    return dp[(1<<n)-1]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}