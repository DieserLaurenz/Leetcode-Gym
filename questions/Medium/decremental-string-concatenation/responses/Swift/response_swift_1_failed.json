{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65904000,
    "question_id": "2854",
    "elapsed_time": 5164,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707148439094,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 43,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1166921807",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimizeConcatenatedLength(_ words: [String]) -> Int {\n        var memo = [String: Int]()\n        var words = words\n        let n = words.count\n\n        func dp(_ index: Int, _ lastWord: String) -> Int {\n            if index == n {\n                return lastWord.count\n            }\n\n            let key = \"\\(index)-\\(lastWord)\"\n            if let val = memo[key] {\n                return val\n            }\n\n            let currentWord = words[index]\n            var option1 = lastWord + currentWord\n            if lastWord.last == currentWord.first {\n                option1.removeLast()\n            }\n\n            var option2 = currentWord + lastWord\n            if currentWord.last == lastWord.first {\n                option2.removeLast()\n            }\n\n            let result = min(dp(index + 1, option1), dp(index + 1, option2))\n            memo[key] = result\n            return result\n        }\n\n        return dp(1, words[0]) - words[0].count\n    }\n}"
}