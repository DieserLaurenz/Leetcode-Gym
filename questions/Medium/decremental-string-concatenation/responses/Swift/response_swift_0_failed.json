{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16284000,
    "question_id": "2854",
    "elapsed_time": 5168,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"aaa\",\"c\",\"aba\"]",
    "expected_output": "6",
    "task_finish_time": 1707148405902,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 129,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1166921325",
    "input_formatted": "[\"aaa\",\"c\",\"aba\"]",
    "input": "[\"aaa\",\"c\",\"aba\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimizeConcatenatedLength(_ words: [String]) -> Int {\n        func join(_ x: String, _ y: String) -> String {\n            if x.last == y.first {\n                return x + y.dropFirst()\n            } else {\n                return x + y\n            }\n        }\n        \n        var dp = Array(repeating: Array(repeating: Int.max, count: words.count), count: words.count)\n        \n        for i in 0..<words.count {\n            dp[i][i] = words[i].count\n        }\n        \n        for length in 1..<words.count {\n            for i in 0..<words.count-length {\n                let j = i + length\n                for k in i..<j {\n                    let join1 = join(dp[i][k] == Int.max ? \"\" : words[i...k].joined(), words[j])\n                    let join2 = join(words[j], dp[i][k] == Int.max ? \"\" : words[i...k].joined())\n                    let newLength = min(join1.count, join2.count)\n                    dp[i][j] = min(dp[i][j], newLength)\n                }\n            }\n        }\n        \n        return dp[0][words.count-1]\n    }\n}"
}