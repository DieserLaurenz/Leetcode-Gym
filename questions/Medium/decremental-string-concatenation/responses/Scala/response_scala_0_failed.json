{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3192000,
    "question_id": "2854",
    "elapsed_time": 11010,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111101111111111111011111110111111101111111111101111111111111100111111111111110111111001111011110110111011010111011111011011101111101111101111001011101111111111010100101000111111011111011110000011111111000110010011001011111001101110111111010101110111011000011101001010101110001001100110001001110111010110110000011010010011011000110100111100110001101011011111110100000010101010111011000100000100110100100010000100000000011000100010110000000001011111101100000100101010001000110010000001011100100001100001001000001110000100010101000001101000000011000101000011000100010010000000001000001000001001000010000010100000000000000000000000000000001000000100000000000000100000100010000000000000000100100010000000001001001000100110100000000010010000000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[\"abc\",\"cb\",\"c\"]",
    "expected_output": "5",
    "task_finish_time": 1707159004646,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 465,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1167098706",
    "input_formatted": "[\"abc\",\"cb\",\"c\"]",
    "input": "[\"abc\",\"cb\",\"c\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimizeConcatenatedLength(words: Array[String]): Int = {\n        val dp = Array.ofDim[Int](1 << words.length, words.length)\n        for (i <- dp.indices; j <- dp(i).indices) dp(i)(j) = 10000 * 50 // Max possible length\n        for (i <- words.indices) dp(1 << i)(i) = words(i).length\n\n        for (mask <- 1 until (1 << words.length); i <- words.indices if (mask & (1 << i)) != 0) {\n            for (j <- words.indices if (mask & (1 << j)) == 0) {\n                val nextMask = mask | (1 << j)\n                val joinLen = if (words(i).last == words(j).head) -1 else 0\n                dp(nextMask)(j) = dp(nextMask)(j) min (dp(mask)(i) + words(j).length + joinLen)\n            }\n        }\n\n        (0 until words.length).map(dp((1 << words.length) - 1)(_)).min\n    }\n}"
}