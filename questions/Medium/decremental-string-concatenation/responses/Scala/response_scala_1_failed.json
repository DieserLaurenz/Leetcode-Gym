{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64280000,
    "question_id": "2854",
    "elapsed_time": 10611,
    "compare_result": "000111000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707159068907,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1167099723",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimizeConcatenatedLength(words: Array[String]): Int = {\n        def join(x: String, y: String): String = {\n            if (x.last == y.head) x + y.tail else x + y\n        }\n\n        val n = words.length\n        val dp = Array.fill(n, n)(10000) // Initialize with a large value\n\n        for (i <- 0 until n) dp(i)(i) = words(i).length\n\n        for (len <- 2 to n; i <- 0 to n - len; j = i + len - 1) {\n            for (k <- i until j) {\n                val joinLeft = join(words(k), words(j))\n                val joinRight = join(words(i), words(k + 1))\n                dp(i)(j) = dp(i)(j) min (dp(i)(k) + joinLeft.length - words(k).length)\n                dp(i)(j) = dp(i)(j) min (dp(k + 1)(j) + joinRight.length - words(k + 1).length)\n            }\n        }\n\n        var ans = 10000 // Initialize with a large value\n        for (i <- 0 until n) ans = ans min dp(0)(i) min dp(i)(n - 1)\n\n        ans\n    }\n}"
}