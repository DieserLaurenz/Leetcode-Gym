{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 105420000,
    "question_id": "2854",
    "elapsed_time": 10123,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[\"abb\",\"bbc\"]",
    "expected_output": "5",
    "task_finish_time": 1707159115845,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 386,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1167100369",
    "input_formatted": "[\"abb\",\"bbc\"]",
    "input": "[\"abb\",\"bbc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimizeConcatenatedLength(words: Array[String]): Int = {\n        val n = words.length\n        val dp = Array.fill(1 << n, n)(Int.MaxValue / 2)\n        val savings = Array.ofDim[Int](n, n)\n\n        for (i <- 0 until n; j <- 0 until n if i != j) {\n            val minLen = Math.min(words(i).length, words(j).length)\n            var k = 1\n            while (k <= minLen && words(i).endsWith(words(j).substring(0, k))) {\n                k += 1\n            }\n            savings(i)(j) = k - 1\n        }\n\n        for (i <- 0 until n) {\n            dp(1 << i)(i) = words(i).length\n        }\n\n        for (mask <- 0 until (1 << n); i <- 0 until n if (mask & (1 << i)) > 0) {\n            for (j <- 0 until n if (mask & (1 << j)) == 0) {\n                val nextMask = mask | (1 << j)\n                dp(nextMask)(j) = Math.min(dp(nextMask)(j), dp(mask)(i) + words(j).length - savings(i)(j))\n            }\n        }\n\n        var ans = Int.MaxValue\n        for (i <- 0 until n) {\n            ans = Math.min(ans, dp((1 << n) - 1)(i))\n        }\n        ans\n    }\n}"
}