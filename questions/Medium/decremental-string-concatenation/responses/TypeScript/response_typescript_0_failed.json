{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 69220000,
    "question_id": "2854",
    "elapsed_time": 4019,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707148048596,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1166915933",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimizeConcatenatedLength(words: string[]): number {\n  const n = words.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(Infinity));\n\n  for (let i = 0; i < n; i++) dp[i][i] = words[i].length;\n\n  for (let len = 2; len <= n; len++) {\n    for (let i = 0; i <= n - len; i++) {\n      const j = i + len - 1;\n      for (let k = i; k < j; k++) {\n        const leftJoin = joinCost(words[k], words[j]) + dp[i][k] + dp[k + 1][j] - words[j].length;\n        const rightJoin = joinCost(words[i], words[k + 1]) + dp[i][k] + dp[k + 1][j] - words[i].length;\n        dp[i][j] = Math.min(dp[i][j], leftJoin, rightJoin);\n      }\n    }\n  }\n\n  function joinCost(x: string, y: string): number {\n    return x[x.length - 1] === y[0] ? x.length + y.length - 1 : x.length + y.length;\n  }\n\n  return dp[0][n - 1];\n};"
}