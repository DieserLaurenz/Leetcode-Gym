{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72072000,
    "question_id": "2854",
    "elapsed_time": 4021,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[\"aaa\",\"c\",\"aba\"]",
    "expected_output": "6",
    "task_finish_time": 1707148089613,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 225,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1166916553",
    "input_formatted": "[\"aaa\",\"c\",\"aba\"]",
    "input": "[\"aaa\",\"c\",\"aba\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimizeConcatenatedLength(words: string[]): number {\n    function join(x: string, y: string): string {\n        if (x[x.length - 1] === y[0]) {\n            return x + y.substring(1);\n        }\n        return x + y;\n    }\n\n    function dfs(start: number, end: number, memo: Map<string, number>): number {\n        const key = `${start}-${end}`;\n        if (memo.has(key)) return memo.get(key)!;\n        if (start === end) return words[start].length;\n\n        let minLength = Infinity;\n        for (let i = start; i < end; i++) {\n            const leftPart = dfs(start, i, memo);\n            const rightPart = dfs(i + 1, end, memo);\n            const joined = join(words[i], words[i + 1]);\n            const currentLength = leftPart + rightPart + joined.length - words[i].length - words[i + 1].length;\n            minLength = Math.min(minLength, currentLength);\n        }\n\n        memo.set(key, minLength);\n        return minLength;\n    }\n\n    let memo = new Map<string, number>();\n    return dfs(0, words.length - 1, memo);\n}"
}