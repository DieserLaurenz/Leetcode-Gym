{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67512000,
    "question_id": "2854",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707148129951,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1166917157",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimizeConcatenatedLength(words: string[]): number {\n    // Helper function to calculate the cost of joining two words\n    const cost = (a: string, b: string) => a.endsWith(b[0]) ? b.length - 1 : b.length;\n\n    // Dynamic programming table\n    const dp = Array.from({ length: words.length }, () => Array(words.length).fill(Infinity));\n\n    // Base case: cost of single words\n    for (let i = 0; i < words.length; i++) dp[i][i] = words[i].length;\n\n    // Fill DP table\n    for (let len = 2; len <= words.length; len++) {\n        for (let i = 0; i <= words.length - len; i++) {\n            const j = i + len - 1;\n            for (let k = i; k < j; k++) {\n                const joinCost = dp[i][k] + cost(words[k], words[j]) - words[k].length;\n                dp[i][j] = Math.min(dp[i][j], joinCost);\n            }\n        }\n    }\n\n    // Reconstruct the minimum length\n    let minLen = Infinity;\n    for (let i = 0; i < words.length; i++) {\n        for (let j = i; j < words.length; j++) {\n            minLen = Math.min(minLen, dp[i][j]);\n        }\n    }\n\n    return minLen;\n}"
}