{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 217824000,
    "question_id": "2854",
    "elapsed_time": 3187,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[\"abc\",\"cb\",\"c\"]",
    "expected_output": "5",
    "task_finish_time": 1707158875026,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 404,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1167096945",
    "input_formatted": "[\"abc\",\"cb\",\"c\"]",
    "input": "[\"abc\",\"cb\",\"c\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String[]} words\n# @return {Integer}\ndef minimize_concatenated_length(words)\n  # Generate all possible permutations of the input array\n  permutations = words.permutation.to_a\n\n  # Define a lambda function for joining two strings with the specified rule\n  join = ->(x, y) { x[-1] == y[0] ? x + y[1..-1] : x + y }\n\n  # Initialize minimum length to a high number\n  min_length = Float::INFINITY\n\n  # Iterate through all permutations to find the minimum concatenated length\n  permutations.each do |perm|\n    # Reduce the permutation array by joining strings according to the rule\n    concatenated = perm.reduce { |acc, word| join.call(acc, word) }\n\n    # Update the minimum length if the current length is smaller\n    min_length = [min_length, concatenated.length].min\n  end\n\n  # Return the minimum length found\n  min_length\nend"
}