{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 147456000,
    "question_id": "2854",
    "elapsed_time": 5461,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[\"aaa\",\"c\",\"aba\"]",
    "expected_output": "6",
    "task_finish_time": 1707148655137,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 85,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1166924995",
    "input_formatted": "[\"aaa\",\"c\",\"aba\"]",
    "input": "[\"aaa\",\"c\",\"aba\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimizeConcatenatedLength(words: Array<String>): Int {\n        fun join(x: String, y: String): Int {\n            return if (x.last() == y.first()) x.length + y.length - 1 else x.length + y.length\n        }\n\n        val n = words.size\n        if (n == 1) return words[0].length\n\n        // dp[mask][i] represents the minimum length of the string formed by concatenating \n        // words represented by the mask, ending with the ith word.\n        val dp = Array(1 shl n) { IntArray(n) { Int.MAX_VALUE } }\n\n        // Initialize dp for single word cases\n        for (i in 0 until n) dp[1 shl i][i] = words[i].length\n\n        for (mask in 1 until (1 shl n)) {\n            for (last in 0 until n) {\n                if (mask and (1 shl last) == 0) continue // last is not in the current mask\n                val prevMask = mask xor (1 shl last)\n                if (prevMask == 0) continue // This should not happen due to initialization\n\n                for (secondLast in 0 until n) {\n                    if (prevMask and (1 shl secondLast) == 0) continue // secondLast is not in prevMask\n                    val cost = join(words[secondLast], words[last])\n                    dp[mask][last] = minOf(dp[mask][last], dp[prevMask][secondLast] + cost - words[last].length)\n                }\n            }\n        }\n\n        // Find the minimum length among all combinations ending with any word\n        var answer = Int.MAX_VALUE\n        for (i in 0 until n) {\n            answer = minOf(answer, dp[(1 shl n) - 1][i])\n        }\n\n        return answer\n    }\n}"
}