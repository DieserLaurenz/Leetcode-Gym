{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 151860000,
    "question_id": "2854",
    "elapsed_time": 5204,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[\"aaa\",\"bba\",\"bb\"]",
    "expected_output": "6",
    "task_finish_time": 1707148589808,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 447,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1166924017",
    "input_formatted": "[\"aaa\",\"bba\",\"bb\"]",
    "input": "[\"aaa\",\"bba\",\"bb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimizeConcatenatedLength(words: Array<String>): Int {\n        val n = words.size\n        val dp = Array(1 shl n) { Int.MAX_VALUE }\n        dp[0] = 0 // Base case: no words chosen\n\n        for (mask in 0 until (1 shl n)) {\n            var lastChar = ' '\n            var currentLength = 0\n            for (i in 0 until n) {\n                if (mask and (1 shl i) != 0) {\n                    val word = words[i]\n                    currentLength += word.length\n                    if (lastChar == word.first()) {\n                        currentLength-- // Overlap found, reduce length by 1\n                    }\n                    lastChar = word.last() // Update last character for next iteration\n                }\n            }\n\n            for (j in 0 until n) {\n                if (mask and (1 shl j) == 0) {\n                    // If j-th word hasn't been chosen yet\n                    val nextMask = mask or (1 shl j)\n                    var extraLength = words[j].length\n                    if (lastChar == words[j].first()) {\n                        extraLength-- // Overlap found, reduce length by 1\n                    }\n                    dp[nextMask] = minOf(dp[nextMask], dp[mask] + extraLength)\n                }\n            }\n        }\n\n        return dp.last() // Minimum length for all words concatenated\n    }\n}"
}