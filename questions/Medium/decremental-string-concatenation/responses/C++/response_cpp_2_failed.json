{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 497712000,
    "question_id": "2854",
    "elapsed_time": 4034,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[\"abb\",\"bbc\"]",
    "expected_output": "5",
    "task_finish_time": 1707137466199,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 260,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1166772878",
    "input_formatted": "[\"abb\",\"bbc\"]",
    "input": "[\"abb\",\"bbc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minimizeConcatenatedLength(vector<string>& words) {\n        vector<vector<int>> overlap(words.size(), vector<int>(words.size()));\n        for (int i = 0; i < words.size(); ++i) {\n            for (int j = 0; j < words.size(); ++j) {\n                if (i != j) {\n                    for (int k = min(words[i].size(), words[j].size()); k > 0; --k) {\n                        if (words[i].substr(words[i].size() - k) == words[j].substr(0, k)) {\n                            overlap[i][j] = k;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        int n = words.size();\n        vector<vector<int>> dp(1 << n, vector<int>(n, INT_MAX / 2));\n        for (int i = 0; i < n; ++i) {\n            dp[1 << i][i] = words[i].length();\n        }\n\n        for (int mask = 1; mask < (1 << n); ++mask) {\n            for (int j = 0; j < n; ++j) {\n                if (mask & (1 << j)) {\n                    int pmask = mask ^ (1 << j);\n                    for (int k = 0; k < n; ++k) {\n                        if (pmask & (1 << k)) {\n                            dp[mask][j] = min(dp[mask][j], dp[pmask][k] + (int)words[j].length() - overlap[k][j]);\n                        }\n                    }\n                }\n            }\n        }\n\n        int result = INT_MAX / 2;\n        for (int i = 0; i < n; ++i) {\n            result = min(result, dp[(1 << n) - 1][i]);\n        }\n        return result;\n    }\n};"
}