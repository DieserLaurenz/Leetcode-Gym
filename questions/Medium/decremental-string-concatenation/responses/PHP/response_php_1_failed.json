{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 100760000,
    "question_id": "2854",
    "elapsed_time": 5283,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707148262160,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 97,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1166919140",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function minimizeConcatenatedLength($words) {\n        $n = count($words);\n        $graph = array_fill(0, $n, array_fill(0, $n, 0));\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                if ($i !== $j) {\n                    $lenI = strlen($words[$i]);\n                    $lenJ = strlen($words[$j]);\n                    for ($k = min($lenI, $lenJ); $k > 0; $k--) {\n                        if (substr($words[$i], -$k) === substr($words[$j], 0, $k)) {\n                            $graph[$i][$j] = $k;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        $dp = array_fill(0, 1 << $n, PHP_INT_MAX);\n        $combine = array_fill(0, 1 << $n, array_fill(0, $n, 0));\n        for ($i = 0; $i < $n; $i++) {\n            $dp[1 << $i] = strlen($words[$i]);\n            $combine[1 << $i][$i] = strlen($words[$i]);\n        }\n\n        for ($mask = 1; $mask < (1 << $n); $mask++) {\n            for ($i = 0; $i < $n; $i++) {\n                if ($mask & (1 << $i)) {\n                    for ($j = 0; $j < $n; $j++) {\n                        if (!($mask & (1 << $j))) {\n                            $nextMask = $mask | (1 << $j);\n                            $saved = $graph[$i][$j] ?? 0;\n                            $newLength = $combine[$mask][$i] + strlen($words[$j]) - $saved;\n                            if ($dp[$nextMask] > $newLength) {\n                                $dp[$nextMask] = $newLength;\n                                for ($k = 0; $k < $n; $k++) {\n                                    $combine[$nextMask][$k] = ($k == $j) ? $newLength : $combine[$mask][$k];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $dp[(1 << $n) - 1];\n    }\n}"
}