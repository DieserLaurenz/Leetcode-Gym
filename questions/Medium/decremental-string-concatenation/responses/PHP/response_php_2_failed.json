{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 23292000,
    "question_id": "2854",
    "elapsed_time": 5379,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"aa\",\"acb\",\"ab\"]",
    "expected_output": "6",
    "task_finish_time": 1707148343401,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 337,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1166920384",
    "input_formatted": "[\"aa\",\"acb\",\"ab\"]",
    "input": "[\"aa\",\"acb\",\"ab\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String[] $words\n     * @return Integer\n     */\n    function minimizeConcatenatedLength($words) {\n        $n = count($words);\n        // Initialize dp array. dp[mask] will store the minimum length of the string that can be obtained by using words corresponding to the bits set in mask.\n        $dp = array_fill(0, 1 << $n, PHP_INT_MAX);\n        $dp[0] = 0; // Base case: no words used, length is 0.\n        \n        // Precompute the cost of concatenating any two words with possible reduction.\n        $concatCost = [];\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $n; $j++) {\n                $len = strlen($words[$j]);\n                if ($words[$i][strlen($words[$i]) - 1] === $words[$j][0]) {\n                    // Reduce the cost by 1 if last char of words[i] equals first char of words[j].\n                    $len--;\n                }\n                $concatCost[$i][$j] = $len;\n            }\n        }\n\n        // Try all subsets of words.\n        for ($mask = 1; $mask < (1 << $n); $mask++) {\n            // Try to add each word to the current subset of words.\n            for ($j = 0; $j < $n; $j++) {\n                if ($mask & (1 << $j)) { // Word j is in the current subset.\n                    $prevMask = $mask ^ (1 << $j); // Remove word j to get the previous subset.\n                    if ($prevMask === 0) {\n                        $dp[$mask] = min($dp[$mask], strlen($words[$j])); // If it's the first word, just take its length.\n                    } else {\n                        // Try to concatenate word j with all words in the previous subset.\n                        for ($i = 0; $i < $n; $i++) {\n                            if ($prevMask & (1 << $i)) { // Word i is in the previous subset.\n                                // Calculate new length after concatenating word j with word i, considering the reduction.\n                                $newLen = $dp[$prevMask] + $concatCost[$i][$j];\n                                $dp[$mask] = min($dp[$mask], $newLen);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // The answer is the minimum length obtained by using all words.\n        return $dp[(1 << $n) - 1];\n    }\n}"
}