{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 84716000,
    "question_id": "2854",
    "elapsed_time": 3740,
    "compare_result": "010111000001000010000000000010000000000000010000001101100000000100010000000000100000100010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000011111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707147725601,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1166911329",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimizeConcatenatedLength(string[] words) {\n        int n = words.Length;\n        if (n == 1) return words[0].Length;\n\n        // dp[i][j] represents the minimum length of the string formed by considering\n        // the first i words, with the jth word being the last in the sequence.\n        int[,] dp = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i, j] = int.MaxValue;\n            }\n            dp[i, i] = words[i].Length; // Base case, only one word.\n        }\n\n        // Precompute the savings for combining any two words.\n        int[,] savings = new int[n, n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (words[i][words[i].Length - 1] == words[j][0])\n                    savings[i, j] = 1;\n            }\n        }\n\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i <= n - len; i++) {\n                int j = i + len - 1;\n                for (int k = i; k < j; k++) {\n                    int left = dp[i, k] + words[j].Length - savings[k, j];\n                    int right = dp[k + 1, j] + words[i].Length - savings[i, k + 1];\n                    dp[i, j] = Math.Min(dp[i, j], Math.Min(left, right));\n                }\n            }\n        }\n\n        // Find the minimum length from all combinations.\n        int minLen = int.MaxValue;\n        for (int i = 0; i < n; i++) {\n            minLen = Math.Min(minLen, dp[0, i]);\n        }\n\n        return minLen;\n    }\n}"
}