{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 161652000,
    "question_id": "2854",
    "elapsed_time": 4024,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"aa\",\"ab\",\"bc\"]",
    "expected_output": "4",
    "task_finish_time": 1707147813036,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 347,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1166912535",
    "input_formatted": "[\"aa\",\"ab\",\"bc\"]",
    "input": "[\"aa\",\"ab\",\"bc\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimizeConcatenatedLength(string[] words) {\n        int n = words.Length;\n        // dp[i][j] stores the minimum length of the string formed by concatenating\n        // words from index i to j inclusively.\n        int[,] dp = new int[n,n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i,j] = i == j ? words[i].Length : 100000; // Initialize with large value\n            }\n        }\n\n        // Calculate savings when two words are joined.\n        int[,] save = new int[n,n];\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int minLen = Math.Min(words[i].Length, words[j].Length);\n                for (int k = 1; k <= minLen; k++) {\n                    if (words[i].EndsWith(words[j].Substring(0, k))) {\n                        save[i,j] = Math.Max(save[i,j], k);\n                    }\n                }\n            }\n        }\n\n        // Dynamic programming to find minimum length.\n        for (int len = 2; len <= n; len++) {\n            for (int i = 0; i <= n - len; i++) {\n                int j = i + len - 1;\n                for (int k = i; k < j; k++) {\n                    int cost = dp[i,k] + dp[k+1,j] - save[i,k] - save[k+1,j];\n                    dp[i,j] = Math.Min(dp[i,j], cost);\n                }\n            }\n        }\n\n        return dp[0,n-1];\n    }\n}"
}