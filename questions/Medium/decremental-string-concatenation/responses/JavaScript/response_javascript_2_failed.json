{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71536000,
    "question_id": "2854",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"aa\",\"acb\",\"ab\"]",
    "expected_output": "6",
    "task_finish_time": 1707147964732,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 337,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1166914700",
    "input_formatted": "[\"aa\",\"acb\",\"ab\"]",
    "input": "[\"aa\",\"acb\",\"ab\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar minimizeConcatenatedLength = function(words) {\n    // Helper function to calculate the extra length added when joining two strings\n    function extraLength(a, b) {\n        if (a[a.length - 1] === b[0]) {\n            return b.length - 1;\n        }\n        return b.length;\n    }\n\n    const n = words.length;\n    const dp = Array.from({ length: 1 << n }, () => Infinity);\n    const lastCharIndex = Array.from({ length: 26 }, () => -1);\n\n    dp[0] = 0;\n\n    for (let mask = 1; mask < (1 << n); mask++) {\n        for (let i = 0; i < n; i++) {\n            if ((mask & (1 << i)) === 0) continue; // Skip if i-th word is not in the current combination\n            const prevMask = mask ^ (1 << i); // Mask without the i-th word\n            if (prevMask === 0) {\n                dp[mask] = words[i].length;\n                continue;\n            }\n            for (let j = 0; j < n; j++) {\n                if ((prevMask & (1 << j)) === 0) continue; // Skip if j-th word is not in the previous combination\n                dp[mask] = Math.min(dp[mask], dp[prevMask] + extraLength(words[j], words[i]));\n            }\n        }\n    }\n\n    return dp[(1 << n) - 1];\n};"
}