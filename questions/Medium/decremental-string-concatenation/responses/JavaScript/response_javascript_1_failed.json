{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 83068000,
    "question_id": "2854",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[\"aa\",\"acb\",\"ab\"]",
    "expected_output": "6",
    "task_finish_time": 1707147906227,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 337,
    "total_testcases": 1332,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1166913912",
    "input_formatted": "[\"aa\",\"acb\",\"ab\"]",
    "input": "[\"aa\",\"acb\",\"ab\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string[]} words\n * @return {number}\n */\nvar minimizeConcatenatedLength = function(words) {\n    // Dynamic programming with bitmask to track used words\n    const n = words.length;\n    const dp = Array(1 << n).fill(Infinity);\n    dp[0] = 0; // Base case: no words used\n\n    // Helper function to calculate the cost of concatenating two words\n    const cost = (a, b) => {\n        if (a[a.length - 1] === b[0]) return b.length - 1;\n        return b.length;\n    };\n\n    for (let mask = 0; mask < (1 << n); ++mask) {\n        for (let i = 0; i < n; ++i) {\n            if ((mask & (1 << i)) === 0) { // If word i is not used\n                const newMask = mask | (1 << i);\n                for (let j = 0; j < n; ++j) {\n                    if (mask & (1 << j)) { // If word j is used\n                        dp[newMask] = Math.min(dp[newMask], dp[mask] + cost(words[j], words[i]));\n                    }\n                }\n                if (dp[mask] === 0) dp[newMask] = Math.min(dp[newMask], words[i].length); // If no word is used before word i\n            }\n        }\n    }\n\n    return dp[(1 << n) - 1];\n};"
}