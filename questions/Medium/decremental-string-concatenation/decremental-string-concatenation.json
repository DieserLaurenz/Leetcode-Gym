{
    "acRate": 25.695574959301464,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2746",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Decremental String Concatenation",
    "titleSlug": "decremental-string-concatenation",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minimizeConcatenatedLength(vector<string>& words) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minimizeConcatenatedLength(String[] words) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimizeConcatenatedLength(self, words):         \"\"\"         :type words: List[str]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimizeConcatenatedLength(self, words: List[str]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minimizeConcatenatedLength(char ** words, int wordsSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinimizeConcatenatedLength(string[] words) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string[]} words  * @return {number}  */ var minimizeConcatenatedLength = function(words) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimizeConcatenatedLength(words: string[]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String[] $words      * @return Integer      */     function minimizeConcatenatedLength($words) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimizeConcatenatedLength(_ words: [String]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimizeConcatenatedLength(words: Array<String>): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minimizeConcatenatedLength(List<String> words) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimizeConcatenatedLength(words []string) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String[]} words # @return {Integer} def minimize_concatenated_length(words)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimizeConcatenatedLength(words: Array[String]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimize_concatenated_length(words: Vec<String>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimize-concatenated-length words)   (-> (listof string?) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimize_concatenated_length(Words :: [unicode:unicode_binary()]) -> integer(). minimize_concatenated_length(Words) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimize_concatenated_length(words :: [String.t]) :: integer   def minimize_concatenated_length(words) do    end end"
        }
    ],
    "content": "You are given a 0-indexed array words containing n strings. Let's define a join operation join(x, y) between two strings x and y as concatenating them into xy. However, if the last character of x is equal to the first character of y, one of them is deleted. For example join(\"ab\", \"ba\") = \"aba\" and join(\"ab\", \"cde\") = \"abcde\". You are to perform n - 1 join operations. Let str0 = words[0]. Starting from i = 1 up to i = n - 1, for the ith operation, you can do one of the following:  Make stri = join(stri - 1, words[i]) Make stri = join(words[i], stri - 1)  Your task is to minimize the length of strn - 1. Return an integer denoting the minimum possible length of strn - 1.  Example 1:  Input: words = [\"aa\",\"ab\",\"bc\"] Output: 4 Explanation: In this example, we can perform join operations in the following order to minimize the length of str2:  str0 = \"aa\" str1 = join(str0, \"ab\") = \"aab\" str2 = join(str1, \"bc\") = \"aabc\"  It can be shown that the minimum possible length of str2 is 4. Example 2:  Input: words = [\"ab\",\"b\"] Output: 2 Explanation: In this example, str0 = \"ab\", there are two ways to get str1:  join(str0, \"b\") = \"ab\" or join(\"b\", str0) = \"bab\".  The first string, \"ab\", has the minimum length. Hence, the answer is 2.  Example 3:  Input: words = [\"aaa\",\"c\",\"aba\"] Output: 6 Explanation: In this example, we can perform join operations in the following order to minimize the length of str2:  str0 = \"aaa\" str1 = join(str0, \"c\") = \"aaac\" str2 = join(\"aba\", str1) = \"abaaac\" It can be shown that the minimum possible length of str2 is 6.    Constraints:  1 <= words.length <= 1000 1 <= words[i].length <= 50 Each character in words[i] is an English lowercase letter  "
}