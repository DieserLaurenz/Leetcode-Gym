{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 254580000,
    "question_id": "2867",
    "elapsed_time": 627,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708237479880,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 103,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1178610523",
    "input_formatted": "[0,1,0,0,1]",
    "input": "[0,1,0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef number_of_good_subarray_splits(nums)\n    total_ones = nums.count(1)\n    return total_ones if total_ones <= 1 # If there are 0 or 1 ones, all subarrays or no subarray are good.\n    \n    prefix_sum = 0\n    ones_count = Hash.new(0)\n    ones_count[0] = 1 # Before starting, there's one way to have a prefix with 0 ones.\n    ways = 0\n    mod = 10**9 + 7\n\n    nums.each do |num|\n        prefix_sum += num # Increase the count of ones seen so far\n        # If we have seen more than one 1, add the number of ways we could have formed a good subarray ending here.\n        if prefix_sum >= 1\n            ways += ones_count[prefix_sum - 1]\n            ways %= mod\n        end\n        ones_count[prefix_sum] += 1 # Update the count of how many times we've seen this many ones.\n    end\n\n    ways\nend"
}