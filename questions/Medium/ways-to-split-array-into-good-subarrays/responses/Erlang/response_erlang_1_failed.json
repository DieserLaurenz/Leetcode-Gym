{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 3: exception error: undef",
    "full_runtime_error": "Line 3: exception error: undef\n[{lists,scan,[#Fun<solution.0.2431760>,0,[0,1,0,0,1]],[]},\n {solution,number_of_good_subarray_splits,1,\n              [{file,\"solution.erl\"},{line,3}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,29}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,17}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,46}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 64312000,
    "question_id": "2867",
    "elapsed_time": 1516,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708237915952,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178616020",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec number_of_good_subarray_splits(Nums :: [integer()]) -> integer().\nnumber_of_good_subarray_splits(Nums) ->\n  PrefixSums = lists:scan(fun(X, Sum) -> X + Sum end, 0, Nums),\n  TotalCount = lists:last(PrefixSums),\n  CountZeros = length([X || X <- PrefixSums, X == 1]),\n  number_of_good_subarray_splits(PrefixSums, TotalCount, CountZeros, 0).\n\nnumber_of_good_subarray_splits(_, 0, _, Acc) ->\n  Acc;\nnumber_of_good_subarray_splits(PrefixSums, TotalCount, CountZeros, Acc) when TotalCount > 0 ->\n  GoodSplits = lists:foldl(fun(X, {Count, AccIn}) when X < TotalCount -> {Count + 1, AccIn}; (TotalCount, {Count, AccIn}) -> {Count, AccIn + Count} end, {0, 0}, PrefixSums),\n  AccNew = (Acc + element(2, GoodSplits)) rem 1000000007,\n  number_of_good_subarray_splits(PrefixSums, TotalCount - 1, CountZeros - 1, AccNew)."
}