{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 129084000,
    "question_id": "2867",
    "elapsed_time": 1967,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708237949709,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 116,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178616451",
    "input_formatted": "[0,1,0,0,1]",
    "input": "[0,1,0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_good_subarray_splits(Nums :: [integer()]) -> integer().\nnumber_of_good_subarray_splits(Nums) ->\n    TotalOnes = lists:sum(Nums),\n    number_of_good_subarray_splits(Nums, TotalOnes, 0, 0, 0).\n\nnumber_of_good_subarray_splits([], _, _, _, Acc) ->\n    Acc;\nnumber_of_good_subarray_splits([1 | T], TotalOnes, CurrentOnes, ZeroesAfterFirstOne, Acc) when TotalOnes > 1 ->\n    if\n        CurrentOnes == 0 ->\n            number_of_good_subarray_splits(T, TotalOnes, 1, ZeroesAfterFirstOne, Acc);\n        CurrentOnes == 1 ->\n            number_of_good_subarray_splits(T, TotalOnes - 1, 0, 0, Acc + ZeroesAfterFirstOne + 1)\n    end;\nnumber_of_good_subarray_splits([0 | T], TotalOnes, CurrentOnes, ZeroesAfterFirstOne, Acc) ->\n    number_of_good_subarray_splits(T, TotalOnes, CurrentOnes, ZeroesAfterFirstOne + 1, Acc);\nnumber_of_good_subarray_splits([1 | T], 1, _, ZeroesAfterFirstOne, Acc) ->\n    Acc + ZeroesAfterFirstOne."
}