{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 134944000,
    "question_id": "2867",
    "elapsed_time": 2174,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708237890422,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 73,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178615701",
    "input_formatted": "[0,1,0,0,1]",
    "input": "[0,1,0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_good_subarray_splits(Nums :: [integer()]) -> integer().\nnumber_of_good_subarray_splits(Nums) ->\n  Count1s = length([X || X <- Nums, X == 1]),\n  number_of_good_subarray_splits(Nums, Count1s, 0, 0, 0).\n\nnumber_of_good_subarray_splits([], 0, _, Acc, _) ->\n  Acc;\nnumber_of_good_subarray_splits([1 | T], Count1s, Current1s, Acc, PrevZeros) when Count1s > 1 ->\n  NewAcc = (Acc + (PrevZeros + 1)) rem 1000000007,\n  number_of_good_subarray_splits(T, Count1s - 1, Current1s + 1, NewAcc, 0);\nnumber_of_good_subarray_splits([0 | T], Count1s, Current1s, Acc, PrevZeros) when Count1s > 0 ->\n  number_of_good_subarray_splits(T, Count1s, Current1s, Acc, PrevZeros + 1);\nnumber_of_good_subarray_splits(_, _, _, Acc, _) ->\n  Acc."
}