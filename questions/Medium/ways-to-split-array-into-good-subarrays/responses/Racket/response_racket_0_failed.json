{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128124000,
    "question_id": "2867",
    "elapsed_time": 695,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708237750155,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 52,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178613857",
    "input_formatted": "[0,1,0,0,1]",
    "input": "[0,1,0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-good-subarray-splits nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (let ([mod 1000000007])\n    (define (count-ones lst)\n      (foldl (lambda (x acc) (if (= x 1) (+ acc 1) acc)) 0 lst))\n    (define ones (count-ones nums))\n    (if (= ones 0) 0\n        (let loop ([lst nums] [ones-count ones] [ways 0])\n          (if (null? lst) ways\n              (if (= (car lst) 1)\n                  (loop (cdr lst) (- ones-count 1) (+ ways (- ones-count 1) (modulo ways mod)))\n                  (loop (cdr lst) ones-count ways)))))))"
}