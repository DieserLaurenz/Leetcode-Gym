{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 237920000,
    "question_id": "2867",
    "elapsed_time": 257,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708227833109,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1178490384",
    "input_formatted": "[0,1,0,0,1]",
    "input": "[0,1,0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfGoodSubarraySplits(vector<int>& nums) {\n        long long ones = 0;\n        for (int num : nums) {\n            if (num == 1) ones++;\n        }\n        \n        if (ones == 0) return 0; // No 1s means no good subarrays possible.\n        \n        long long count = 0, result = 0;\n        const int mod = 1e9 + 7;\n        for (int num : nums) {\n            if (num == 1) count++;\n            if (count == ones / 2 || count == (ones + 1) / 2) result++;\n        }\n        \n        // If all 1s are in the middle, there's no way to split, so return 0.\n        return ((ones & 1) == 0) ? (result - 1) % mod : result % mod;\n    }\n};"
}