{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19144000,
    "question_id": "2867",
    "elapsed_time": 286,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[0,1,0]",
    "expected_output": "1",
    "task_finish_time": 1708227992193,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 122,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1178493902",
    "input_formatted": "[0,1,0]",
    "input": "[0,1,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int numberOfGoodSubarraySplits(int* nums, int numsSize){\n    long long prefixSum = 0, ans = 0;\n    int mod = 1e9 + 7;\n    for (int i = 0; i < numsSize; ++i) {\n        prefixSum += nums[i];\n    }\n    if (prefixSum < 2) return 0; // If there are less than 2 ones, cannot form good subarrays\n    long long countOne = 0;\n    for (int i = 0; i < numsSize - 1; ++i) { // Last element cannot start a new subarray\n        if (nums[i] == 1) countOne++;\n        if (countOne >= 1 && countOne < prefixSum) {\n            ans = (ans + 1) % mod;\n        }\n    }\n    return (int)ans;\n}"
}