{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26660000,
    "question_id": "2867",
    "elapsed_time": 843,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,0,0,0,0,0,1,0,1]",
    "expected_output": "12",
    "task_finish_time": 1708236890107,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 192,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1178603226",
    "input_formatted": "[1,0,0,0,0,0,1,0,1]",
    "input": "[1,0,0,0,0,0,1,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numberOfGoodSubarraySplits($nums) {\n        $mod = 1000000007;\n        $onesCount = 0;\n        $zeroesBeforeFirstOne = 0;\n        $goodSplits = 0;\n        $zeroesAfterLastOne = 0;\n        $foundFirstOne = false;\n\n        foreach ($nums as $num) {\n            if ($num == 1) {\n                if (!$foundFirstOne) {\n                    $foundFirstOne = true;\n                } else {\n                    $goodSplits += $zeroesAfterLastOne + 1;\n                }\n                $onesCount++;\n                $zeroesAfterLastOne = 0;\n            } else {\n                if (!$foundFirstOne) {\n                    $zeroesBeforeFirstOne++;\n                } else {\n                    $zeroesAfterLastOne++;\n                }\n            }\n        }\n\n        if ($onesCount == 1) {\n            $goodSplits = 1;\n        }\n\n        return $goodSplits % $mod;\n    }\n}"
}