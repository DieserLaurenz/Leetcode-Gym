{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71524000,
    "question_id": "2867",
    "elapsed_time": 1068,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708237111312,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 40,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1178605953",
    "input_formatted": "[0,1,0,0,1]",
    "input": "[0,1,0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun numberOfGoodSubarraySplits(nums: IntArray): Int {\n        val mod = 1000000007\n        val prefixSum = IntArray(nums.size + 1)\n        for (i in nums.indices) {\n            prefixSum[i + 1] = prefixSum[i] + nums[i]\n        }\n        if (prefixSum.last() < 2) return 0\n\n        var result = 0L\n        for (i in 1 until prefixSum.size) {\n            if (prefixSum[i] == 1) {\n                val left = i\n                val right = prefixSum.size - i - 1\n                result = (result + (left.toLong() * right.toLong()) % mod) % mod\n            }\n        }\n        return result.toInt()\n    }\n}"
}