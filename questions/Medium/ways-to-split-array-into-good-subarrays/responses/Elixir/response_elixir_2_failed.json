{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 75556000,
    "question_id": "2867",
    "elapsed_time": 471,
    "compare_result
    "code_output": "-8",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708238239880,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1178620077",
    "input_formatted": "[0,1,0,0,1]",
    "input": "[0,1,0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  def number_of_good_subarray_splits(nums) do\n    ones_positions = for({num, idx} <- Enum.with_index(nums), num == 1, into: [], do: idx)\n    count = Enum.count(ones_positions)\n\n    Enum.reduce(1..(count - 1), 0, fn i, acc ->\n      left = ones_positions |> Enum.at(i - 1) |> Kernel.-(ones_positions |> Enum.at(i - 2) |> Kernel.+(1) |> Kernel.||(0))\n      right = ones_positions |> Enum.at(i) |> Kernel.-(ones_positions |> Enum.at(i - 1)) |> Kernel.+(-1)\n      acc + (left * right)\n    end) |> rem(1_000_000_007)\n  end\nend"
}