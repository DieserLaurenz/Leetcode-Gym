{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3044000,
    "question_id": "2867",
    "elapsed_time": 40,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[0,1,0]",
    "expected_output": "1",
    "task_finish_time": 1708237689627,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 99,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1178613181",
    "input_formatted": "[0,1,0]",
    "input": "[0,1,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn number_of_good_subarray_splits(nums: Vec<i32>) -> i32 {\n        let mut ones = 0;\n        let mut result = 0;\n        let mut prefix_ones = vec![0; nums.len() + 1];\n        let mut modu = 1_000_000_007;\n\n        for (i, &num) in nums.iter().enumerate() {\n            ones += num;\n            prefix_ones[i + 1] = ones;\n        }\n\n        for i in 1..nums.len() {\n            if prefix_ones[i] == 1 && prefix_ones[nums.len()] - prefix_ones[i] == 1 {\n                result += 1;\n                result %= modu;\n            }\n        }\n\n        result\n    }\n}"
}