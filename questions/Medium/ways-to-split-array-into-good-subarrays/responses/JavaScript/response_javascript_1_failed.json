{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61148000,
    "question_id": "2867",
    "elapsed_time": 4017,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[0,1,0,0,1]",
    "expected_output": "3",
    "task_finish_time": 1708228254815,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 93,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1178499505",
    "input_formatted": "[0,1,0,0,1]",
    "input": "[0,1,0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numberOfGoodSubarraySplits = function(nums) {\n    let totalOnes = nums.reduce((acc, val) => acc + val, 0);\n    if (totalOnes === 0) return 0; // No 1s means no good subarray\n\n    let mod = 1e9 + 7;\n    let onesCount = 0, ways = 0;\n    \n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === 1) onesCount++;\n        // For each 1 found, add the number of zeros before the next 1\n        // to form a good subarray split at this point\n        if (onesCount === 1 || onesCount === totalOnes) {\n            let nextOneIndex = i + 1;\n            while (nextOneIndex < nums.length && nums[nextOneIndex] !== 1) {\n                nextOneIndex++;\n            }\n            ways = (ways + nextOneIndex - i) % mod;\n        }\n    }\n\n    return ways % mod;\n};"
}