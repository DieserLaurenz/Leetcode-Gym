{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8348000,
    "question_id": "2867",
    "elapsed_time": 264,
    "compare_result": "1001000100000000011000011000101010000000111010100011010000010100001010011010010010000010001011000000011001000011101101111001111010000000110010000000001010000100010101000001000000000100010000010001100101000000010110000011010100000011010000010011000010000000100010000010000011100100010100100000000001011100010100100010010010110011100110010011000000110100010111010101010000100000000100100010110000100101000010000000010011100010100000001000001100101000000000010000100100001000000100000101010101010000101000000000000000000000000000000000101100000010100000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[0,1,0]",
    "expected_output": "1",
    "task_finish_time": 1708237343066,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 159,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1178608797",
    "input_formatted": "[0,1,0]",
    "input": "[0,1,0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func numberOfGoodSubarraySplits(nums []int) int {\n    mod := 1000000007\n    onesCount := make([]int, len(nums)+1)\n    for i, num := range nums {\n        onesCount[i+1] = onesCount[i] + num\n    }\n    totalOnes := onesCount[len(nums)]\n    if totalOnes < 2 {\n        return 0\n    }\n    result := 0\n    for i := 1; i < len(nums); i++ {\n        if onesCount[i] == totalOnes/2 && totalOnes%2 == 0 {\n            result = (result + 1) % mod\n        } else if onesCount[i] == (totalOnes+1)/2 && totalOnes%2 == 1 {\n            result = (result + 1) % mod\n        }\n    }\n    return result\n}"
}