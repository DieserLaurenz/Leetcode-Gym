{
    "acRate": 43.842616249361264,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2611",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Mice and Cheese",
    "titleSlug": "mice-and-cheese",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        },
        {
            "name": "Heap (Priority Queue)",
            "id": "VG9waWNUYWdOb2RlOjYxMDUw",
            "slug": "heap-priority-queue"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int miceAndCheese(vector<int>& reward1, vector<int>& reward2, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int miceAndCheese(int[] reward1, int[] reward2, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def miceAndCheese(self, reward1, reward2, k):         \"\"\"         :type reward1: List[int]         :type reward2: List[int]         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def miceAndCheese(self, reward1: List[int], reward2: List[int], k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int miceAndCheese(int* reward1, int reward1Size, int* reward2, int reward2Size, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MiceAndCheese(int[] reward1, int[] reward2, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} reward1  * @param {number[]} reward2  * @param {number} k  * @return {number}  */ var miceAndCheese = function(reward1, reward2, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function miceAndCheese(reward1: number[], reward2: number[], k: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $reward1      * @param Integer[] $reward2      * @param Integer $k      * @return Integer      */     function miceAndCheese($reward1, $reward2, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func miceAndCheese(_ reward1: [Int], _ reward2: [Int], _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun miceAndCheese(reward1: IntArray, reward2: IntArray, k: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int miceAndCheese(List<int> reward1, List<int> reward2, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func miceAndCheese(reward1 []int, reward2 []int, k int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} reward1 # @param {Integer[]} reward2 # @param {Integer} k # @return {Integer} def mice_and_cheese(reward1, reward2, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def miceAndCheese(reward1: Array[Int], reward2: Array[Int], k: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn mice_and_cheese(reward1: Vec<i32>, reward2: Vec<i32>, k: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (mice-and-cheese reward1 reward2 k)   (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec mice_and_cheese(Reward1 :: [integer()], Reward2 :: [integer()], K :: integer()) -> integer(). mice_and_cheese(Reward1, Reward2, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec mice_and_cheese(reward1 :: [integer], reward2 :: [integer], k :: integer) :: integer   def mice_and_cheese(reward1, reward2, k) do    end end"
        }
    ],
    "content": "There are two mice and n different types of cheese, each type of cheese should be eaten by exactly one mouse. A point of the cheese with index i (0-indexed) is:  reward1[i] if the first mouse eats it. reward2[i] if the second mouse eats it.  You are given a positive integer array reward1, a positive integer array reward2, and a non-negative integer k. Return the maximum points the mice can achieve if the first mouse eats exactly k types of cheese.  Example 1:  Input: reward1 = [1,1,3,4], reward2 = [4,4,1,1], k = 2 Output: 15 Explanation: In this example, the first mouse eats the 2nd(0-indexed) and the 3rdtypes of cheese, and the second mouse eats the 0thand the 1st types of cheese. The total points are 4 + 4 + 3 + 4 = 15. It can be proven that 15 is the maximum total points that the mice can achieve.  Example 2:  Input: reward1 = [1,1], reward2 = [1,1], k = 2 Output: 2 Explanation: In this example, the first mouse eats the 0th(0-indexed) and 1sttypes of cheese, and the second mouse does not eat any cheese. The total points are 1 + 1 = 2. It can be proven that 2 is the maximum total points that the mice can achieve.   Constraints:  1 <= n == reward1.length == reward2.length <= 105 1 <= reward1[i],reward2[i] <= 1000 0 <= k <= n  "
}