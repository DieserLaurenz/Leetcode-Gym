{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 110604000,
    "question_id": "3201",
    "elapsed_time": 89,
    "compare_result
    "code_output": "27",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1707179843397,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 112,
    "total_testcases": 958,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1167301836",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long distributeCandies(int n, int limit) {\n    long long dp[limit+1][limit+1];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1; // base case\n\n    for (int candies = 1; candies <= n; ++candies) {\n        for (int i = limit; i >= 0; --i) {\n            for (int j = limit; j >= 0; --j) {\n                int k = candies - i - j;\n                if (k >= 0 && k <= limit) {\n                    if (i > 0) dp[i][j] += dp[i-1][j];\n                    if (j > 0) dp[i][j] += dp[i][j-1];\n                    if (i > 0 && j > 0) dp[i][j] -= dp[i-1][j-1];\n                }\n            }\n        }\n    }\n\n    long long totalWays = 0;\n    for (int i = 0; i <= limit; ++i) {\n        for (int j = 0; j <= limit; ++j) {\n            int k = n - i - j;\n            if (k >= 0 && k <= limit) {\n                totalWays += dp[i][j];\n            }\n        }\n    }\n    return totalWays;\n}"
}