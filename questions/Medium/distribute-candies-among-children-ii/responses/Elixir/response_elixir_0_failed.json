{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70624000,
    "question_id": "3201",
    "elapsed_time": 6013,
    "compare_result": "1110000000000000000000110000000000000000001100000000000000000111100000000000000001111000000000000000111111000000000000001111111000000000000011111111000000000000111111111000000000001111111111000000000011111111111000000000111111111111000000001111111111111000000011111111111111000000111111111111111000001111111111111111000011111111111111111000111111111111111111001111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "1\n2",
    "expected_output": "3",
    "task_finish_time": 1707190130495,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 310,
    "total_testcases": 958,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1167397028",
    "input_formatted": "1, 2",
    "input": "1\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec distribute_candies(n :: integer, limit :: integer) :: integer\n  def distribute_candies(n, limit) do\n    Enum.reduce(0..limit, 0, fn x, acc ->\n      acc + Enum.reduce(0..min(limit, n - x), 0, fn y, acc_inner ->\n        z = n - x - y\n        if z <= limit, do: acc_inner + 1, else: acc_inner\n      end)\n    end)\n  end\nend"
}