{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 269624000,
    "question_id": "3201",
    "elapsed_time": 488,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1707181008255,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 114,
    "total_testcases": 958,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1167311508",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun distributeCandies(n: Int, limit: Int): Long {\n        val dp = Array(n + 1) { LongArray(limit + 1) }\n        dp[0][0] = 1\n        for (i in 1..limit) {\n            for (j in 0..n) {\n                dp[j][i] = dp[j][i - 1]\n                if (j >= i) dp[j][i] += dp[j - i][i]\n            }\n        }\n        var ways = 0L\n        for (i in 0..limit) {\n            for (j in 0..limit) {\n                val k = n - i - j\n                if (k in 0..limit && i + j + k == n) {\n                    ways += dp[i][limit] * dp[j][limit] * dp[k][limit]\n                }\n            }\n        }\n        return ways\n    }\n}"
}