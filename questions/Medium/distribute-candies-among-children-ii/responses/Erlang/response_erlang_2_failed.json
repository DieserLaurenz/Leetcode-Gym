{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58728000,
    "question_id": "3201",
    "elapsed_time": 5174,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "96",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1707190018773,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 958,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1167395759",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec distribute_candies(N :: integer(), Limit :: integer()) -> integer().\ndistribute_candies(N, Limit) ->\n  distribute_candies(N, Limit, 0, 0).\n\ndistribute_candies(N, Limit, Current, Count) when Current > N ->\n  Count;\ndistribute_candies(N, Limit, Current, Count) ->\n  distribute_candies(N, Limit, Current + 1, Count + comb(N - Current, Limit)).\n\ncomb(N, Limit) ->\n  comb(N, Limit, 0, 0).\n\ncomb(N, Limit, Current, Count) when Current > N ->\n  Count;\ncomb(N, Limit, Current, Count) ->\n  NewCount = Count + ways(N, Current, Limit),\n  comb(N, Limit, Current + 1, NewCount).\n\nways(N, Current, Limit) ->\n  ways(N, Current, Limit, 0, 0).\n\nways(N, Current, Limit, X, Count) when X > Limit; Current + X > N ->\n  Count;\nways(N, Current, Limit, X, Count) ->\n  YMax = min(Limit, N - Current - X),\n  NewCount = Count + YMax + 1,\n  ways(N, Current, Limit, X + 1, NewCount)."
}