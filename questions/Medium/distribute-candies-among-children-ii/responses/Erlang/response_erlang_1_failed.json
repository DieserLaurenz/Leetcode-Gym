{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 983400000,
    "question_id": "3201",
    "elapsed_time": 1259,
    "compare_result
    "code_output": "18",
    "std_output": "",
    "last_testcase": "3\n3",
    "expected_output": "10",
    "task_finish_time": 1707189977616,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 117,
    "total_testcases": 958,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1167395399",
    "input_formatted": "3, 3",
    "input": "3\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec distribute_candies(N :: integer(), Limit :: integer()) -> integer().\ndistribute_candies(N, Limit) ->\n  Count = fun Count(0, _, Acc) -> Acc;\n              Count(_, 0, Acc) -> Acc;\n              Count(N, Limit, Acc) when N > 3*Limit -> Acc;\n              Count(N, Limit, Acc) ->\n                NewAcc = Acc + lists:sum([1 || X <- lists:seq(0, Limit), Y <- lists:seq(0, Limit), N - X - Y >= 0, N - X - Y =< Limit]),\n                Count(N, Limit - 1, NewAcc)\n          end,\n  Count(N, Limit, 0)."
}