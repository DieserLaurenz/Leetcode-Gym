{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 101024000,
    "question_id": "3201",
    "elapsed_time": 5032,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "5\n2",
    "expected_output": "3",
    "task_finish_time": 1707189807170,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 100,
    "total_testcases": 958,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1167393525",
    "input_formatted": "5, 2",
    "input": "5\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (distribute-candies n limit)\n  (-> exact-integer? exact-integer? exact-integer?)\n  (define (count-ways n limit)\n    (if (> n (* 3 limit))\n        0\n        (let ((ways 0))\n          (for ([i (in-range (min n limit) -1 -1)])\n            (for ([j (in-range 0 (+ i 1))])\n              (let ([k (- n i j)])\n                (when (and (<= k limit) (<= i j k))\n                  (set! ways (+ ways 1))))))\n          ways)))\n  (count-ways n limit))"
}