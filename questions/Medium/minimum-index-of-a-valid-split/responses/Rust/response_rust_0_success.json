{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "12 ms",
    "memory": 3968000,
    "question_id": "2888",
    "elapsed_time": 30,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707815416007,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 100,
    "status_memory": "4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Rust",
    "submission_id": "1174002331",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_index(nums: Vec<i32>) -> i32 {\n        let mut freq = std::collections::HashMap::new();\n        let n = nums.len();\n        for &num in &nums {\n            *freq.entry(num).or_insert(0) += 1;\n        }\n        \n        let (&dominant, &count) = freq.iter().find(|&(_, &count)| count * 2 > n as i32).unwrap();\n        let mut prefix_count = 0;\n        for i in 0..n-1 {\n            if nums[i] == dominant {\n                prefix_count += 1;\n            }\n            let suffix_count = count - prefix_count;\n            if prefix_count * 2 > (i + 1) as i32 && suffix_count * 2 > (n - i - 1) as i32 {\n                return i as i32;\n            }\n        }\n        -1\n    }\n}"
}