{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "321 ms",
    "memory": 64328000,
    "question_id": "2888",
    "elapsed_time": 450,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707814642828,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 100,
    "status_memory": "64.3 MB",
    "memory_percentile": 85.7143,
    "pretty_lang": "C#",
    "submission_id": "1173993739",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumIndex(IList<int> nums) {\n        int dominant = nums[0], n = nums.Count, freq = 1, half = n / 2;\n        for (int i = 1; i < n; i++) {\n            if (nums[i] == dominant) freq++;\n            else if (--freq == 0) {\n                dominant = nums[i];\n                freq = 1;\n            }\n        }\n\n        freq = 0;\n        foreach (int num in nums) {\n            if (num == dominant) freq++;\n        }\n\n        if (freq <= half) return -1;\n\n        int leftFreq = 0;\n        for (int i = 0; i < n - 1; i++) {\n            if (nums[i] == dominant) leftFreq++;\n            if (leftFreq > (i + 1) / 2 && (freq - leftFreq) > (n - i - 1) / 2) return i;\n        }\n\n        return -1;\n    }\n}"
}