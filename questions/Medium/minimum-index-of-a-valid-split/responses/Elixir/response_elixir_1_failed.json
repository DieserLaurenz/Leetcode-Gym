{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 144932000,
    "question_id": "2888",
    "elapsed_time": 6049,
    "compare_result": "00111111111111111110111011101101111111111111111101110110111011111111111111111011011101110111111111111111100110010000000000000000000001110001000100001000000100011000000001000000000000000010010000100100100001000000010000101010010110100000010000001100010010010000101000010101100100100000000000100101000010100100101100000101000010010000100001000011001011100000011000010010010001010000000000110000000110000010001000010000011110000000000000000001001000000001000000000011101000000100000000100000001000010000100011000011000100100010100001001000010001000000011100011110100000001000100010100100100000111000000100100000000000001000000000000000000000100001000000010000000000000000000000000000000000001000000000000000000010010000000000000000000100000000000000000000000000010000000000000010100000000000000000000000001000000001000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1707816310055,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 228,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174012182",
    "input_formatted": "[1,2,2,2]",
    "input": "[1,2,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_index(nums :: [integer]) :: integer\n  def minimum_index(nums) do\n    total_count = Enum.frequencies(nums)\n    {dominant, _} = Enum.find(total_count, fn {_k, v} -> v * 2 > length(nums) end)\n\n    left_count = %{}\n    Enum.reduce_while(0..Enum.count(nums)-2, -1, fn i, acc ->\n      left_count = Map.update(left_count, Enum.at(nums, i), 1, &(&1 + 1))\n      left_dominant_count = Map.get(left_count, dominant, 0)\n      right_dominant_count = total_count[dominant] - left_dominant_count\n\n      if left_dominant_count * 2 > i + 1 and right_dominant_count * 2 > length(nums) - i - 1 do\n        {:halt, i}\n      else\n        {:cont, acc}\n      end\n    end)\n  end\nend"
}