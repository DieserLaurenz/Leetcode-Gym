{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 13: ** (ArithmeticError) bad argument in arithmetic expression: nil * 2",
    "full_runtime_error": "Line 13: ** (ArithmeticError) bad argument in arithmetic expression: nil * 2\n    :erlang.*(nil, 2)\n    solution.ex:13: anonymous fn/5 in Solution.minimum_index/1\n    (elixir 1.15.7) lib/range.ex:526: Enumerable.Range.reduce/5\n    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3\n    solution.ex:38: Driver.consume_test_cases/2\n    solution.ex:26: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 76032000,
    "question_id": "2888",
    "elapsed_time": 393,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1707816267711,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174011804",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_index(nums :: [integer]) :: integer\n  def minimum_index(nums) do\n    total_count = Enum.frequencies(nums)\n    dominant = Enum.find(total_count, fn {_k, v} -> v * 2 > length(nums) end) |> elem(0)\n\n    left_count = %{}\n    valid_split = Enum.reduce_while(0..(length(nums) - 2), -1, fn i, acc ->\n      left_count = Map.update(left_count, Enum.at(nums, i), 1, &(&1 + 1))\n      right_dominant_freq = total_count[dominant] - Map.get(left_count, dominant, 0)\n\n      cond do\n        left_count[dominant] * 2 > i + 1 and right_dominant_freq * 2 > length(nums) - i - 1 ->\n          {:halt, i + 1}\n        true ->\n          {:cont, acc}\n      end\n    end)\n\n    valid_split\n  end\nend"
}