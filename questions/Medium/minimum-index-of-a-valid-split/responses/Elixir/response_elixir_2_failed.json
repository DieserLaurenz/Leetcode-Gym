{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 145144000,
    "question_id": "2888",
    "elapsed_time": 6018,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1707816344874,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 153,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1174012536",
    "input_formatted": "[1,2,2,2]",
    "input": "[1,2,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_index(nums :: [integer]) :: integer\n  def minimum_index(nums) do\n    total_freqs = Enum.frequencies(nums)\n    {dominant, _} = Enum.find(total_freqs, fn {_k, v} -> v * 2 > length(nums) end)\n\n    left_freqs = %{}\n    nums_len = length(nums)\n    Enum.reduce_while(0..nums_len-2, -1, fn i, _acc ->\n      left_freqs = Map.update(left_freqs, Enum.at(nums, i), 1, &(&1 + 1))\n      left_dominant_count = Map.get(left_freqs, dominant, 0)\n\n      if left_dominant_count * 2 > i + 1 and (total_freqs[dominant] - left_dominant_count) * 2 > nums_len - i - 1 do\n        {:halt, i + 1}\n      else\n        {:cont, -1}\n      end\n    end)\n  end\nend"
}