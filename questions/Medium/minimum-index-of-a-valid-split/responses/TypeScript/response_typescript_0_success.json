{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "93 ms",
    "memory": 61276000,
    "question_id": "2888",
    "elapsed_time": 170,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707814774037,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 100,
    "status_memory": "61.3 MB",
    "memory_percentile": 58.33340000000002,
    "pretty_lang": "TypeScript",
    "submission_id": "1173995123",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function minimumIndex(nums: number[]): number {\n    const n = nums.length;\n    let dominant = nums[0], count = 0;\n\n    // Find the dominant element\n    for (let i = 0; i < n; ++i) {\n        if (nums[i] === dominant) {\n            count++;\n        } else if (--count === 0) {\n            dominant = nums[i];\n            count = 1;\n        }\n    }\n\n    // Count occurrences of the dominant element\n    count = nums.reduce((acc, val) => acc + (val === dominant ? 1 : 0), 0);\n\n    // No valid split if the dominant element does not fulfill the criteria globally\n    if (count * 2 <= n) return -1;\n\n    let leftCount = 0;\n    for (let i = 0; i < n - 1; ++i) {\n        leftCount += (nums[i] === dominant ? 1 : 0);\n        if (leftCount * 2 > i + 1 && (count - leftCount) * 2 > n - i - 1) {\n            return i;\n        }\n    }\n\n    return -1;\n};"
}