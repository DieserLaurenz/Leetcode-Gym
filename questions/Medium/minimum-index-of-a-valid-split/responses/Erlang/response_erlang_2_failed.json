{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 5: exception error: undef",
    "full_runtime_error": "Line 5: exception error: undef\n[{lists,max_by,[#Fun<solution.1.34047085>,[{1,1},{2,3}]],[]},\n {solution,minimum_index,1,[{file,\"solution.erl\"},{line,5}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,43}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,31}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,60}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65016000,
    "question_id": "2888",
    "elapsed_time": 1285,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1707816205678,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1174011095",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec minimum_index(Nums :: [integer()]) -> integer().\nminimum_index(Nums) ->\n    Count = fun(X, Acc) -> maps:update_with(X, fun(C) -> C + 1 end, 1, Acc) end,\n    Freqs = lists:foldl(Count, #{}, Nums),\n    {DomElem, _} = lists:max_by(fun({_Key, Value}) -> Value end, maps:to_list(Freqs)),\n    Len = length(Nums),\n    DomFreq = maps:get(DomElem, Freqs),\n    TrySplit = lists:foldl(\n        fun(Elem, {Acc, LeftFreq, RightFreq}) ->\n            NewLeftFreq = case Elem == DomElem of\n                true -> LeftFreq + 1;\n                false -> LeftFreq\n            end,\n            NewRightFreq = RightFreq - 1,\n            NewAcc = case NewLeftFreq * 2 > Acc andalso NewRightFreq * 2 > (Len - Acc - 1) of\n                true -> Acc;\n                false -> Acc + 1\n            end,\n            {NewAcc, NewLeftFreq, NewRightFreq}\n        end,\n        {0, 0, DomFreq},\n        Nums\n    ),\n    case TrySplit of\n        {Split, _, _} when Split < Len - 1 -> Split;\n        _ -> -1\n    end."
}