{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31096000,
    "question_id": "2888",
    "elapsed_time": 608,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1708818907696,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185247529",
    "input_formatted": "[1,2,2,2]",
    "input": "[1,2,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import Counter\n\nclass Solution:\n    def minimumIndex(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return -1\n        \n        full_count = Counter(nums)\n        dominant = max(full_count, key=full_count.get)\n        if full_count[dominant] * 2 <= n:\n            return -1\n        \n        left_count = Counter()\n        for i in range(n - 1):\n            left_count[nums[i]] += 1\n            right_dominant = full_count[dominant] - left_count[dominant]\n            if left_count[nums[i]] * 2 > i + 1 and right_dominant * 2 > n - i - 1:\n                return i\n        return -1"
}