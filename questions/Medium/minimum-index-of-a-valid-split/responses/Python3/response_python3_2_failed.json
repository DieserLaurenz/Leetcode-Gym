{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31880000,
    "question_id": "2888",
    "elapsed_time": 550,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1708818958380,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 155,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185247926",
    "input_formatted": "[1,2,2,2]",
    "input": "[1,2,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import Counter\n\nclass Solution:\n    def minimumIndex(self, nums: List[int]) -> int:\n        n = len(nums)\n        dominant = nums[0]\n        freq = Counter(nums)\n        for k, v in freq.items():\n            if v > n // 2:\n                dominant = k\n                break\n\n        left_freq = 0\n        for i in range(n-1):\n            if nums[i] == dominant:\n                left_freq += 1\n            if left_freq > (i + 1) // 2 and (freq[dominant] - left_freq) > (n - i - 1) // 2:\n                return i + 1\n        return -1"
}