{
    "status_code": 10,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "462 ms",
    "memory": 179352000,
    "question_id": "2888",
    "elapsed_time": 672,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707815029990,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 100,
    "status_memory": "179.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Dart",
    "submission_id": "1173997945",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumIndex(List<int> nums) {\n    int n = nums.length;\n    Map<int, int> count = {};\n    int dominant = nums[0], maxCount = 1;\n    count[dominant] = 1;\n\n    for (int i = 1; i < n; i++) {\n      count[nums[i]] = (count[nums[i]] ?? 0) + 1;\n      if (count[nums[i]]! > maxCount) {\n        dominant = nums[i];\n        maxCount = count[nums[i]]!;\n      }\n    }\n\n    if (maxCount * 2 <= n) return -1;\n\n    int leftCount = 0;\n    for (int i = 0; i < n - 1; i++) {\n      if (nums[i] == dominant) leftCount++;\n      int rightDominantCount = maxCount - leftCount;\n      if (leftCount * 2 > i + 1 && rightDominantCount * 2 > n - i - 1) return i;\n    }\n\n    return -1;\n  }\n}"
}