{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "177 ms",
    "memory": 221552000,
    "question_id": "2888",
    "elapsed_time": 338,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707815215825,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 50.0,
    "status_memory": "221.6 MB",
    "memory_percentile": 100,
    "pretty_lang": "Ruby",
    "submission_id": "1174000077",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_index(nums)\n    count = Hash.new(0)\n    nums.each { |num| count[num] += 1 }\n    dominant, freq = count.max_by { |_k, v| v }\n    left_count = 0\n    nums.each_with_index do |num, i|\n        left_count += 1 if num == dominant\n        right_count = freq - left_count\n        if left_count * 2 > i + 1 && right_count * 2 > nums.size - i - 1\n            return i\n        end\n    end\n    -1\nend"
}