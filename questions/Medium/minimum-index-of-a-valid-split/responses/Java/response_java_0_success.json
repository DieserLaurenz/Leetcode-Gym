{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "37 ms",
    "memory": 57588000,
    "display_runtime": "37",
    "question_id": "2888",
    "elapsed_time": 385,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707814476877,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 43.22030000000001,
    "status_memory": "57.6 MB",
    "memory_percentile": 66.10130000000001,
    "pretty_lang": "Java",
    "submission_id": "1173991980",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumIndex(List<Integer> nums) {\n        int n = nums.size();\n        Map<Integer, Integer> freq = new HashMap<>();\n        int dominant = nums.get(0), maxFreq = 1;\n        freq.put(dominant, 1);\n        for (int i = 1; i < n; ++i) {\n            freq.put(nums.get(i), freq.getOrDefault(nums.get(i), 0) + 1);\n            if (freq.get(nums.get(i)) > maxFreq) {\n                dominant = nums.get(i);\n                maxFreq = freq.get(nums.get(i));\n            }\n        }\n        if (maxFreq * 2 <= n) return -1;\n        int leftFreq = 0, rightFreq = maxFreq;\n        for (int i = 0; i < n - 1; ++i) {\n            if (nums.get(i) == dominant) {\n                leftFreq++;\n                rightFreq--;\n            }\n            if (leftFreq * 2 > i + 1 && rightFreq * 2 > n - i - 1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}"
}