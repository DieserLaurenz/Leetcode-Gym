{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "538 ms",
    "memory": 65416000,
    "question_id": "2888",
    "elapsed_time": 727,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707814957594,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 100,
    "status_memory": "65.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Kotlin",
    "submission_id": "1173997146",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumIndex(nums: List<Int>): Int {\n        val n = nums.size\n        val freqMap = nums.groupingBy { it }.eachCount()\n        val dominantElement = freqMap.entries.find { it.value * 2 > n }?.key ?: return -1\n        var prefixFreq = 0\n        var suffixFreq = freqMap[dominantElement] ?: 0\n        \n        for (i in 0 until n - 1) {\n            if (nums[i] == dominantElement) {\n                prefixFreq++\n                suffixFreq--\n            }\n            if (prefixFreq * 2 > i + 1 && suffixFreq * 2 > n - i - 1) {\n                return i\n            }\n        }\n        \n        return -1\n    }\n}"
}