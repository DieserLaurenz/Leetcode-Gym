{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "428 ms",
    "memory": 24388000,
    "question_id": "2888",
    "elapsed_time": 495,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707814900254,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 100,
    "status_memory": "24.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "Swift",
    "submission_id": "1173996499",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumIndex(_ nums: [Int]) -> Int {\n        let n = nums.count\n        var freq = [Int: Int]()\n        var leftFreq = [Int: Int]()\n        \n        // Calculate frequency of each element in the entire array\n        for num in nums {\n            freq[num, default: 0] += 1\n        }\n        \n        // Identify the dominant element\n        var dominantElement = -1\n        for (num, count) in freq {\n            if count * 2 > n {\n                dominantElement = num\n                break\n            }\n        }\n        \n        var dominantCount = 0\n        for i in 0..<n-1 {\n            let num = nums[i]\n            leftFreq[num, default: 0] += 1\n            if num == dominantElement {\n                dominantCount += 1\n            }\n            let rightDominantCount = freq[dominantElement]! - dominantCount\n            // Check if both subarrays have the same dominant element\n            if dominantCount * 2 > i + 1 && rightDominantCount * 2 > n - i - 1 {\n                return i\n            }\n        }\n        \n        return -1\n    }\n}"
}