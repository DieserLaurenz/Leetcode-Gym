{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "hash-set: contract violation",
    "full_runtime_error": "hash-set: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   1\n   1\n  context...:\n   solution.rkt:1:0: minimum-index\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:27:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99772000,
    "question_id": "2888",
    "elapsed_time": 267,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1707815482988,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1174003020",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-index nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([n (length nums)])\n    (let loop ([i 0] [freq (make-hash)] [dominant #f] [dominant-freq 0])\n      (if (= i n)\n          -1\n          (let* ([current (list-ref nums i)]\n                 [current-freq (add1 (hash-ref freq current 0))]\n                 [updated-freq (hash-set freq current current-freq)])\n            (if (> (* current-freq 2) n)\n                (let ([left-dominant (check-dominant nums 0 i dominant current-freq)]\n                      [right-dominant (check-dominant nums (+ i 1) (- n 1) dominant current-freq)])\n                  (if (and left-dominant right-dominant) i (loop (+ i 1) updated-freq current current-freq)))\n                (loop (+ i 1) updated-freq dominant dominant-freq)))))))\n\n(define (check-dominant nums start end dominant-freq required-freq)\n  (let loop ([i start] [freq 0])\n    (if (> i end)\n        (> (* freq 2) (- end start 1))\n        (if (= (list-ref nums i) dominant-freq)\n            (loop (+ i 1) (+ freq 1))\n            (loop (+ i 1) freq)))))"
}