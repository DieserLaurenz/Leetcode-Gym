{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128364000,
    "question_id": "2888",
    "elapsed_time": 5019,
    "compare_result": "00111111111111111110111011101101111111111111111101110110111011111111111111111011011101110111111111111111100110010000000000000000000001110001000100001000000100011000000001000000000000000010010000100100100001000000010000101010010110100000010000001100010010010000101000010101100100100000000000100101000010100100101100000101000010010000100001000011001011100000011000010010010001010000000000110000000110000010001000010000011110000000000000000001001000000001000000000011101000000100000000100000001000010000100011000011000100100010100001001000010001000000011100011110100000001000100010100100100000111000000100100000000000001000000000000000000000100001000000010000000000000000000000000000000000001000000000000000000010010000000000000000000100000000000000000000000000010000000000000010100000000000000000000000001000000001000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1707815515703,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 228,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1174003309",
    "input_formatted": "[1,2,2,2]",
    "input": "[1,2,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-index nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let* ([n (length nums)]\n         [dominant (car nums)]\n         [dom-count (foldl (lambda (num acc) (if (= num dominant) (+ acc 1) acc)) 0 nums)])\n    (let loop ([i 0] [left-count 0] [right-count dom-count])\n      (if (< i (- n 1))\n          (let* ([num (list-ref nums i)]\n                 [new-left-count (if (= num dominant) (+ left-count 1) left-count)]\n                 [new-right-count (if (= num dominant) (- right-count 1) right-count)])\n            (if (and (> (* 2 new-left-count) (+ i 1)) (> (* 2 new-right-count) (- n (+ i 1))))\n                i\n                (loop (+ i 1) new-left-count new-right-count)))\n          -1))))"
}