{
    "status_code": 10,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "158 ms",
    "memory": 104220000,
    "question_id": "2888",
    "elapsed_time": 202,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707814422090,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 53.97620000000006,
    "status_memory": "104.2 MB",
    "memory_percentile": 10.510600000000073,
    "pretty_lang": "C++",
    "submission_id": "1173991341",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minimumIndex(vector<int>& nums) {\n        int n = nums.size();\n        unordered_map<int, int> freq;\n        int dominant = nums[0], maxFreq = 1;\n        for (int num : nums) {\n            ++freq[num];\n            if (freq[num] > maxFreq) {\n                dominant = num;\n                maxFreq = freq[num];\n            }\n        }\n        \n        vector<int> prefixFreq(n, 0), suffixFreq(n, 0);\n        int count = 0;\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] == dominant) ++count;\n            prefixFreq[i] = count;\n        }\n        count = 0;\n        for (int i = n - 1; i >= 0; --i) {\n            if (nums[i] == dominant) ++count;\n            suffixFreq[i] = count;\n        }\n        \n        for (int i = 0; i < n - 1; ++i) {\n            if (prefixFreq[i] * 2 > (i + 1) && suffixFreq[i + 1] * 2 > (n - i - 1)) {\n                return i;\n            }\n        }\n        \n        return -1;\n    }\n};"
}