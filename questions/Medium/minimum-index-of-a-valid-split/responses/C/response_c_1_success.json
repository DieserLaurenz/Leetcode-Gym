{
    "status_code": 10,
    "lang": "c",
    "run_success": true,
    "status_runtime": "87 ms",
    "memory": 13380000,
    "question_id": "2888",
    "elapsed_time": 112,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707814570545,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 100,
    "status_memory": "13.4 MB",
    "memory_percentile": 100,
    "pretty_lang": "C",
    "submission_id": "1173992990",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "int minimumIndex(int* nums, int numsSize) {\n    // Finding the dominant element and its frequency in the whole array\n    int dominant = nums[0], maxFreq = 1, currentFreq = 1;\n    for (int i = 1; i < numsSize; ++i) {\n        if (nums[i] == nums[i - 1]) {\n            ++currentFreq;\n        } else {\n            currentFreq = 1;\n        }\n        if (currentFreq > maxFreq) {\n            maxFreq = currentFreq;\n            dominant = nums[i];\n        }\n    }\n\n    int freq = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        if (nums[i] == dominant) ++freq;\n    }\n\n    // Checking for the minimum index where the split is valid\n    int leftFreq = 0;\n    for (int i = 0; i < numsSize - 1; ++i) {\n        if (nums[i] == dominant) ++leftFreq;\n        int rightFreq = freq - leftFreq;\n        if (leftFreq * 2 > i + 1 && rightFreq * 2 > numsSize - i - 1) {\n            return i;\n        }\n    }\n\n    return -1;\n}"
}