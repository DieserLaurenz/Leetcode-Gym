{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13396000,
    "question_id": "2888",
    "elapsed_time": 112,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,2,2]",
    "expected_output": "2",
    "task_finish_time": 1707814531852,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 233,
    "total_testcases": 917,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1173992569",
    "input_formatted": "[1,2,2,2]",
    "input": "[1,2,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int minimumIndex(int* nums, int numsSize){\n    int dominant = nums[0], count = 0;\n    for(int i = 0; i < numsSize; i++){\n        if(nums[i] == dominant) count++;\n    }\n    int leftCount = 0, rightCount = count;\n    for(int i = 0; i < numsSize - 1; i++){\n        if(nums[i] == dominant) leftCount++, rightCount--;\n        if(leftCount * 2 > i + 1 && rightCount * 2 > numsSize - i - 1) return i;\n    }\n    return -1;\n}"
}