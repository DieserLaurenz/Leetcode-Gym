{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "620 ms",
    "memory": 27016000,
    "question_id": "2888",
    "elapsed_time": 649,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708818849397,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 917,
    "total_testcases": 917,
    "runtime_percentile": 72.22200000000001,
    "status_memory": "27 MB",
    "memory_percentile": 88.8888,
    "pretty_lang": "Python",
    "submission_id": "1185247133",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumIndex(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        from collections import Counter\n        \n        total_count = Counter(nums)\n        dominant = max(total_count, key=total_count.get)\n        if total_count[dominant] * 2 <= len(nums): return -1\n        \n        prefix_count = 0\n        for i, num in enumerate(nums):\n            if num == dominant:\n                prefix_count += 1\n            if prefix_count * 2 > i + 1 and (total_count[dominant] - prefix_count) * 2 > len(nums) - i - 1:\n                return i\n        return -1"
}