{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 7: ** (Protocol.UndefinedError) protocol Enumerable not implemented for {1000000001} of type Tuple",
    "full_runtime_error": "Line 7: ** (Protocol.UndefinedError) protocol Enumerable not implemented for {1000000001} of type Tuple\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3\n    (elixir 1.15.7) lib/enum.ex:2564: Enum.reduce_while/3\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:7: Solution.min_absolute_difference/2\n    solution.ex:39: Driver.consume_test_cases/2\n    solution.ex:25: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75256000,
    "question_id": "3000",
    "elapsed_time": 420,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[4,3,2,4]\n2",
    "expected_output": "0",
    "task_finish_time": 1707731195354,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2013,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173045011",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_absolute_difference(nums :: [integer], x :: integer) :: integer\n  def min_absolute_difference(nums, x) do\n    nums\n    |> Enum.with_index()\n    |> Enum.sort()\n    |> Enum.reduce({1_000_000_001}, fn ({num, idx}, acc) ->\n      Enum.reduce_while(acc, acc, fn ({prev_num, prev_idx}, acc_inner) ->\n        if abs(idx - prev_idx) >= x do\n          diff = abs(num - prev_num)\n          new_acc = [{num, idx} | acc_inner]\n          {:halt, [diff | new_acc]}\n        else\n          {:cont, [{prev_num, prev_idx} | acc_inner]}\n        end\n      end)\n    end)\n    |> hd()\n    |> (fn min_diff -> if min_diff == 1_000_000_001, do: 0, else: min_diff end).()\n  end\nend"
}