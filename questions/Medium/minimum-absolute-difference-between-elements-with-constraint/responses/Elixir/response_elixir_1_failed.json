{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 246448000,
    "question_id": "3000",
    "elapsed_time": 1826,
    "compare_result": "110111111111111111111111111111111111111111111111111111111111110111111111111111110111111111111111111111111101111111010111101100110101111111111011010111011111101101111100111110111111111111111110111111111010011101010011110110111001101101111001110010001111110011011001111111011101111111111101100111111101011101110111110001110111111011111111010111101111111101101101111111011111111111101111011111011111111111111111111100111011000111111000011011011010101110111111110111101001010101101111111110101111101011110110110101101010111111001111111011100111111111100100110111101111111110111111111001111011110111111101111111101011111111101111011111100010011100111011010111101011111110111110111111111111111101111111101010011111111010111111010100011100111111111011111011111101110101110111110001010110010111011111111111111011110111111011011001111111010110111111111111111111101111101101111111111011111011011011001101111011011110100111110111110101111011110110111101111111111111101011100101111111111001111111101110110110111110110001011110111110010111011111111111101111101011101111111111111111101111101111011111111111011111010111100011101111011111011111111000101011110101010001111111011010111111101111101011010111111111101111100111111111111111101111111011111111101111111011110111111011110010111111110110110101111110111111100110101111101111111111101111111110111111110110011111111110111111101111100011100111111111111011111101111011111111010111010111111111011100111110111011111110011011011111111111111010111111111111111101011111111011111111111111111111111111111111100111111111110111011010111111101101111111111011011111101100111111111111110111110011111111110101111001111111111110011011110101011111111111111110011110111111111111010111011110111111111111111011110011101011111010111111111110101110110001110101111011111010111110110111111100011011111111111111111111111111111101111111111111111110011111100111011100011111110111101101111110111110101111111111111010110111001111111111111011111111011111111011111111111111111111101111111110111110111111010",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,3,4]\n3",
    "expected_output": "3",
    "task_finish_time": 1707731166200,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1617,
    "total_testcases": 2013,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1173044717",
    "input_formatted": "[1,2,3,4], 3",
    "input": "[1,2,3,4]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_absolute_difference(nums :: [integer], x :: integer) :: integer\n  def min_absolute_difference(nums, x) do\n    nums\n    |> Enum.with_index()\n    |> Enum.sort_by(fn {num, _index} -> num end)\n    |> Enum.reduce({nil, nil, nil}, fn ({num, index}, {min_diff, prev_num, prev_index}) ->\n      cond do\n        prev_index != nil and abs(prev_index - index) >= x ->\n          new_diff = abs(prev_num - num)\n          case min_diff do\n            nil -> {new_diff, num, index}\n            _ -> {min(new_diff, min_diff), num, index}\n          end\n        true ->\n          {min_diff, num, index}\n      end\n    end)\n    |> elem(0)\n    |> (fn diff -> case diff do nil -> 0; _ -> diff end end).()\n  end\nend"
}