{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 493516000,
    "question_id": "2920",
    "elapsed_time": 3012,
    "compare_result": "001111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707951632796,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175527908",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint minimumSeconds(int* nums, int numsSize) {\n    // Map to store frequency of each number\n    int* freq = (int*)calloc(1000000001, sizeof(int)); // Given 1 <= nums[i] <= 10^9\n    int maxFreq = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        freq[nums[i]]++;\n        if (freq[nums[i]] > maxFreq) {\n            maxFreq = freq[nums[i]];\n        }\n    }\n    free(freq); // Free allocated memory to prevent memory leak\n    // Minimum seconds needed is the total size minus the max frequency\n    return numsSize - maxFreq;\n}"
}