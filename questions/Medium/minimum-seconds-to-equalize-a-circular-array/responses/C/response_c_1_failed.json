{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12508000,
    "question_id": "2920",
    "elapsed_time": 96,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,3,2]",
    "expected_output": "2",
    "task_finish_time": 1707951603473,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 97,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175527723",
    "input_formatted": "[2,1,3,3,2]",
    "input": "[2,1,3,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint minimumSeconds(int* nums, int numsSize) {\n    if (numsSize == 1) return 0;\n    // Creating an auxiliary array to find the cycle length\n    bool visited[numsSize];\n    for (int i = 0; i < numsSize; ++i) {\n        visited[i] = false;\n    }\n    int cycleLength = 0;\n    for (int i = 0; i < numsSize; ++i) {\n        if (!visited[i]) {\n            int j = i, cycle = 0;\n            while (!visited[j]) {\n                visited[j] = true;\n                j = (j + 1) % numsSize;\n                cycle++;\n            }\n            cycleLength = gcd(cycleLength, cycle);\n        }\n    }\n    return cycleLength == numsSize ? 1 : (cycleLength % 2 == 0 ? 2 : 1);\n}"
}