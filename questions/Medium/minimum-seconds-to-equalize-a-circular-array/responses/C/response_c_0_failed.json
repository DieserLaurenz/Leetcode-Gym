{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12912000,
    "question_id": "2920",
    "elapsed_time": 92,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,3,2]",
    "expected_output": "2",
    "task_finish_time": 1707951570285,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175527505",
    "input_formatted": "[2,1,3,3,2]",
    "input": "[2,1,3,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n\nint minimumSeconds(int* nums, int numsSize){\n    int maxStreak = 1, currentStreak = 1;\n    // Check if all elements are initially the same\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] == nums[i - 1]) {\n            currentStreak++;\n            maxStreak = currentStreak > maxStreak ? currentStreak : maxStreak;\n        } else {\n            currentStreak = 1;\n        }\n    }\n    // Checking streak across the boundary\n    if (nums[0] == nums[numsSize - 1]) {\n        int i = 0, j = numsSize - 1;\n        while (i < numsSize - 1 && nums[i] == nums[i + 1]) i++;\n        while (j > 0 && nums[j] == nums[j - 1]) j--;\n        maxStreak = maxStreak > (i + numsSize - j) ? maxStreak : (i + numsSize - j);\n    }\n    // Calculate minimum seconds needed\n    return (maxStreak + 1) / 2;\n}"
}