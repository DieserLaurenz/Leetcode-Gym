{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 20: Char 19: Error: The getter 'Math' isn't defined for the class 'Solution'.",
    "full_runtime_error": "Line 20: Char 19: Error: The getter 'Math' isn't defined for the class 'Solution'.\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'Math'.\n        maxDist = Math.max(maxDist, currDist);\n                  ^^^^\nLine 22: Char 24: Error: The getter 'Math' isn't defined for the class 'Solution'.\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'Math'.\n      maxConsecutive = Math.max(maxConsecutive, value.length + (n - maxDist) ~/ 2);\n                       ^^^^",
    "status_runtime": "N/A",
    "memory": 150288000,
    "question_id": "2920",
    "elapsed_time": 427,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707961415519,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1175595374",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumSeconds(List<int> nums) {\n    if (nums.toSet().length == 1) return 0; // All elements are already equal\n    Map<int, List<int>> positions = {};\n    int n = nums.length;\n    \n    // Record positions of each number in nums\n    for (int i = 0; i < n; i++) {\n      positions.putIfAbsent(nums[i], () => []).add(i);\n    }\n\n    // Check consecutive distances for each unique number\n    int maxConsecutive = 0;\n    positions.forEach((key, value) {\n      int maxDist = 1;\n      for (int i = 0; i < value.length; i++) {\n        int currDist = i == value.length - 1 ? \n                       n - value.last + value.first : \n                       value[i + 1] - value[i];\n        maxDist = Math.max(maxDist, currDist);\n      }\n      maxConsecutive = Math.max(maxConsecutive, value.length + (n - maxDist) ~/ 2);\n    });\n\n    return (n + 1 - maxConsecutive + 1) ~/ 2;\n  }\n}"
}