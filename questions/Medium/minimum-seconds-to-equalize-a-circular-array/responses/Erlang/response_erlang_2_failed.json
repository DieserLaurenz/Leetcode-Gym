{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 190428000,
    "question_id": "2920",
    "elapsed_time": 2110,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707962235602,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 47,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175601589",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_seconds(Nums :: [integer()]) -> integer().\nminimum_seconds(Nums) ->\n  MaxFreq = lists:foldl(fun(X, Acc) -> maps:update_with(X, fun(C) -> C + 1 end, 1, Acc) end, #{}, Nums),\n  MaxCount = lists:max(maps:values(MaxFreq)),\n  length(Nums) - MaxCount."
}