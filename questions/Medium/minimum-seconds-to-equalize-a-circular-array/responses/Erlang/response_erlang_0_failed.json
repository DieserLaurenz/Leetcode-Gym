{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 198104000,
    "question_id": "2920",
    "elapsed_time": 1830,
    "compare_result": "101111111111111111111111111111111111111111111111111111111111111111111111000001010010000001110000011010100000001100000000101110001001100001010000000000000000001010000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,3,2]",
    "expected_output": "2",
    "task_finish_time": 1707962174450,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 99,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175601154",
    "input_formatted": "[2,1,3,3,2]",
    "input": "[2,1,3,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_seconds(Nums :: [integer()]) -> integer().\nminimum_seconds(Nums) ->\n  {_, Count} = lists:foldl(fun(X, {Prev, C}) ->\n                             if\n                               X =:= Prev -> {X, C};\n                               true -> {X, C + 1}\n                             end\n                           end, {hd(Nums), 1}, tl(Nums)),\n  if\n    Count =:= 1 -> 0; % All elements are the same\n    true -> 1\n  end."
}