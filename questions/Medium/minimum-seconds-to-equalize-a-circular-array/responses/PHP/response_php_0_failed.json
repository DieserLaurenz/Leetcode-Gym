{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27512000,
    "question_id": "2920",
    "elapsed_time": 247,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707960707301,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 178,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175590212",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumSeconds($nums) {\n        $n = count($nums);\n        if ($n <= 2) return $n === 2 && $nums[0] !== $nums[1] ? 1 : 0;\n\n        // Find the longest subsequence where consecutive elements are different\n        $maxLen = 1;\n        $currentLen = 1;\n        for ($i = 1; $i < $n; ++$i) {\n            if ($nums[$i] !== $nums[$i - 1]) {\n                $currentLen++;\n            } else {\n                $maxLen = max($maxLen, $currentLen);\n                $currentLen = 1;\n            }\n        }\n        // Check for circular match\n        if ($nums[0] !== $nums[$n - 1] && $currentLen + 1 > $maxLen) {\n            for ($i = 1; $i < $n && $nums[$i] !== $nums[$i - 1]; ++$i) {\n                $currentLen++;\n            }\n            $maxLen = max($maxLen, $currentLen);\n        }\n\n        // Calculate minimum seconds\n        if ($maxLen <= 2) return 1;\n        for ($i = 2; ; ++$i) {\n            if (pow(2, $i) - 1 >= $n) return $i;\n        }\n    }\n}"
}