{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38044000,
    "question_id": "2920",
    "elapsed_time": 303,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707960764842,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175590641",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minimumSeconds($nums) {\n        $n = count($nums);\n        $unique = array_unique($nums);\n        if (count($unique) === 1) return 0; // All elements are the same\n\n        // Create a frequency map\n        $freq = [];\n        foreach ($nums as $num) {\n            if (!isset($freq[$num])) {\n                $freq[$num] = 1;\n            } else {\n                $freq[$num]++;\n            }\n        }\n\n        // Calculate maximum reach in one second\n        $maxReach = 0;\n        foreach ($freq as $value) {\n            $maxReach = max($maxReach, $value);\n        }\n\n        // Main logic to calculate minimum seconds\n        for ($seconds = 1; ; $seconds++) {\n            // Maximum number of elements that can be made equal in 'seconds'\n            $reach = 1 + 2 * ($seconds - 1);\n            if ($reach >= $n) return $seconds;\n        }\n    }\n}"
}