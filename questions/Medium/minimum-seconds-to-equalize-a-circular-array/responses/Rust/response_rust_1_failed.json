{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4048000,
    "question_id": "2920",
    "elapsed_time": 20,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,3,2]",
    "expected_output": "2",
    "task_finish_time": 1707961960221,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 95,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175599446",
    "input_formatted": "[2,1,3,3,2]",
    "input": "[2,1,3,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_seconds(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        if n <= 2 {\n            return 1;\n        }\n        let mut prefix = vec![false; n];\n        let mut suffix = vec![false; n];\n        prefix[0] = true;\n        suffix[n - 1] = true;\n        for i in 1..n {\n            if nums[i] == nums[i - 1] {\n                prefix[i] = true;\n            }\n        }\n        for i in (0..n - 1).rev() {\n            if nums[i] == nums[i + 1] {\n                suffix[i] = true;\n            }\n        }\n        for i in 0..n {\n            if prefix[i] || suffix[i] {\n                return 1;\n            }\n            if i > 0 && prefix[i - 1] && nums[i] == nums[(i + 1) % n] {\n                return 1;\n            }\n            if i < n - 1 && suffix[i + 1] && nums[i] == nums[(i as isize - 1 + n as isize) as usize % n] {\n                return 1;\n            }\n        }\n        2\n    }\n}"
}