{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3552000,
    "question_id": "2920",
    "elapsed_time": 2004,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[8,13,3,3]",
    "expected_output": "1",
    "task_finish_time": 1707961994149,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 243,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175599685",
    "input_formatted": "[8,13,3,3]",
    "input": "[8,13,3,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_seconds(nums: Vec<i32>) -> i32 {\n        let mut nums = nums;\n        let mut count = 0;\n        while !nums.iter().all(|&x| x == nums[0]) {\n            let mut new_nums = nums.clone();\n            for i in 0..nums.len() {\n                if nums[i] != nums[(i + 1) % nums.len()] || nums[i] != nums[(i + nums.len() - 1) % nums.len()] {\n                    new_nums[i] = *[\n                        nums[i],\n                        nums[(i + 1) % nums.len()],\n                        nums[(i + nums.len() - 1) % nums.len()],\n                    ]\n                    .iter()\n                    .max()\n                    .unwrap();\n                }\n            }\n            nums = new_nums;\n            count += 1;\n        }\n        count\n    }\n}"
}