{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7272000,
    "question_id": "2920",
    "elapsed_time": 40,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707961926147,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175599130",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_seconds(nums: Vec<i32>) -> i32 {\n        use std::collections::HashMap;\n\n        // A map to store the frequency of each number.\n        let mut freq = HashMap::new();\n        // Fill the frequency map.\n        for &num in &nums {\n            *freq.entry(num).or_insert(0) += 1;\n        }\n\n        // Edge case: if all elements are the same, no operation is needed.\n        if freq.len() == 1 {\n            return 0;\n        }\n\n        // Calculate the maximum frequency.\n        let max_freq = freq.values().copied().max().unwrap_or(0);\n        // Calculate and return the minimum seconds needed.\n        // It is calculated based on the maximum frequency of a number in the array.\n        ((nums.len() - max_freq) as f64 / (max_freq - 1) as f64).ceil() as i32\n    }\n}"
}