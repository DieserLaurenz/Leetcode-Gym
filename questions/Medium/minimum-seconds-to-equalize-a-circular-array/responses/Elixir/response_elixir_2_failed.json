{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 17: ** (UndefinedFunctionError) function Enum.append/2 is undefined or private",
    "full_runtime_error": "Line 17: ** (UndefinedFunctionError) function Enum.append/2 is undefined or private\n    (elixir 1.15.7) Enum.append([0, 2], [4])\n    solution.ex:17: Solution.find_max_gap/2\n    (elixir 1.15.7) lib/enum.ex:1701: anonymous fn/3 in Enum.map/2\n    (stdlib 5.1.1) maps.erl:416: :maps.fold_1/4\n    (elixir 1.15.7) lib/enum.ex:2522: Enum.map/2\n    solution.ex:8: Solution.minimum_seconds/1\n    solution.ex:37: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75020000,
    "question_id": "2920",
    "elapsed_time": 389,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707971097061,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1175680870",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_seconds(nums :: [integer]) :: integer\n  def minimum_seconds(nums) do\n    len = length(nums)\n    max_gap = nums\n              |> Enum.with_index()\n              |> Enum.group_by(fn {num, _} -> num end, fn {_, index} -> index end)\n              |> Enum.map(fn {_num, indexes} -> find_max_gap(indexes, len) end)\n              |> Enum.max()\n\n    if max_gap == 0, do: 0, else: div(len - max_gap + 1, 2)\n  end\n\n  defp find_max_gap(indexes, len) do\n    indexes\n    |> Enum.sort()\n    |> Enum.append([hd(indexes) + len])\n    |> Enum.reduce({0, hd(indexes)}, fn x, {max_gap, prev} -> {max(max_gap, x - prev), x} end)\n    |> elem(0)\n  end\nend"
}