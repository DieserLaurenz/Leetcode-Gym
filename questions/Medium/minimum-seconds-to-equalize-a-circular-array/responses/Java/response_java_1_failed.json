{
    "status_code": 15,
    "lang": "java",
    "run_success": false,
    "runtime_error": "Line 14: java.lang.IndexOutOfBoundsException: Index 4 out of bounds for length 4",
    "full_runtime_error": "java.lang.IndexOutOfBoundsException: Index 4 out of bounds for length 4\n  at line 100, java.base/jdk.internal.util.Preconditions.outOfBounds\n  at line 106, java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex\n  at line 302, java.base/jdk.internal.util.Preconditions.checkIndex\n  at line 385, java.base/java.util.Objects.checkIndex\n  at line 427, java.base/java.util.ArrayList.get\n  at line 14, Solution.minimumSeconds\n  at line 54, __DriverSolution__.__helper__\n  at line 84, __Driver__.main",
    "status_runtime": "N/A",
    "memory": 41048000,
    "question_id": "2920",
    "elapsed_time": 125,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707951469375,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175526806",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public int minimumSeconds(List<Integer> nums) {\n        int n = nums.size();\n        if (n <= 2) return 1;\n        int[] prefix = new int[n + 1], suffix = new int[n + 1];\n        prefix[1] = suffix[n - 1] = 1;\n        for (int i = 2; i < n; i++) {\n            if (nums.get(i) == nums.get(i - 2)) prefix[i] = prefix[i - 2] + 1;\n            else prefix[i] = 1;\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            if (nums.get(i) == nums.get(i + 2)) suffix[i] = suffix[i + 2] + 1;\n            else suffix[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            if ((i > 0 && nums.get(i) == nums.get(i - 1)) || (i < n - 1 && nums.get(i) == nums.get(i + 1))) return 1;\n            if ((i > 1 && prefix[i - 2] >= 2) || (i < n - 2 && suffix[i + 2] >= 2)) return 1;\n        }\n        return 2;\n    }\n}"
}