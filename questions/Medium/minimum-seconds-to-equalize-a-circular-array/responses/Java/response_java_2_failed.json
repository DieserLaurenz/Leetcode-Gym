{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59944000,
    "display_runtime": "27",
    "question_id": "2920",
    "elapsed_time": 416,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,1,3,3,2]",
    "expected_output": "2",
    "task_finish_time": 1707951502387,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175527022",
    "input_formatted": "[2,1,3,3,2]",
    "input": "[2,1,3,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass Solution {\n    public int minimumSeconds(List<Integer> nums) {\n        Set<Integer> uniqueNums = new HashSet<>(nums);\n        if (uniqueNums.size() == 1) return 0; // All elements are already equal\n        if (isConsecutiveEqual(nums) || uniqueNums.size() == 2) return 1; // Either consecutive elements are equal or only 2 unique elements\n        return 2; // In worst case, it takes 2 operations\n    }\n\n    private boolean isConsecutiveEqual(List<Integer> nums) {\n        for (int i = 0; i < nums.size() - 1; i++) {\n            if (nums.get(i).equals(nums.get(i + 1)) || nums.get(i).equals(nums.get((i + 2) % nums.size()))) {\n                return true;\n            }\n        }\n        return nums.get(0).equals(nums.get(nums.size() - 1)) || nums.get(0).equals(nums.get(nums.size() - 2));\n    }\n}"
}