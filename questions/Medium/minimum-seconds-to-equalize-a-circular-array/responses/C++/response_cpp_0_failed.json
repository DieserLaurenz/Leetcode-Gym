{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 107384000,
    "question_id": "2920",
    "elapsed_time": 234,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707951294390,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 47,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175525675",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumSeconds(vector<int>& nums) {\n        int n = nums.size();\n        // Base case: if all elements are the same, no operation is needed.\n        if (all_of(nums.begin(), nums.end(), [&](int i){ return i == nums[0]; })) return 0;\n\n        unordered_map<int, int> countMap;\n        for (int num : nums) countMap[num]++;\n\n        // Find the maximum frequency of any element.\n        int maxFreq = 0;\n        for (auto& [_, freq] : countMap) maxFreq = max(maxFreq, freq);\n\n        // The minimum seconds needed is the total number of unique elements\n        // minus the maximum frequency of any element, as in the worst case,\n        // we can turn all elements into the most frequent element.\n        return n - maxFreq;\n    }\n};"
}