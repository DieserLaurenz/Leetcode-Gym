{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 107308000,
    "question_id": "2920",
    "elapsed_time": 228,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707951327391,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175525866",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumSeconds(vector<int>& nums) {\n        int n = nums.size();\n        unordered_set<int> uniqueNums(nums.begin(), nums.end());\n        \n        // If all elements are the same, no operation is needed.\n        if (uniqueNums.size() == 1) return 0;\n\n        // Check if the array is already in a pattern that can be equalized in 1 second.\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] == nums[(i + 1) % n] || nums[i] == nums[(i - 1 + n) % n]) {\n                return 1;\n            }\n        }\n\n        // If not, it requires 2 seconds at most due to the operation's nature.\n        return 2;\n    }\n};"
}