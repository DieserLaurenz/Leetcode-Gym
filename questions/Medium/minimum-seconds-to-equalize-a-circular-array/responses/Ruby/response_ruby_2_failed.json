{
    "status_code": 14,
    "lang": "ruby",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 211372000,
    "question_id": "2920",
    "elapsed_time": 3141,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707961711780,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1175597504",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef minimum_seconds(nums)\n  groups = nums.chunk_while(&:==).to_a\n  return 0 if groups.size <= 1\n  \n  # Check if nums is already equal\n  return 0 if nums.uniq.size == 1\n\n  # Extend array to simulate circular behavior\n  extended_groups = groups + groups\n\n  max_len = 0\n  left = 0\n  right = 0\n  sum_len = extended_groups[0].size\n\n  while right < extended_groups.size - 1\n    # Extend the window to the right\n    if sum_len < nums.size\n      right += 1\n      sum_len += extended_groups[right].size\n    # Shrink the window from the left\n    elsif sum_len > nums.size\n      sum_len -= extended_groups[left].size\n      left += 1\n    end\n\n    # Update max_len if a valid window is found\n    max_len = [max_len, sum_len].max if sum_len == nums.size\n    break if right == extended_groups.size - 1\n  end\n\n  # Calculation based on the extended groups' behavior\n  1 + (Math.log(nums.size.to_f / max_len, 2)).ceil\nend"
}