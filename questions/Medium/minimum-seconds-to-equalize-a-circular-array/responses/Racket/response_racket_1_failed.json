{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 99960000,
    "question_id": "2920",
    "elapsed_time": 289,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707962080154,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175600414",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-seconds nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n\n  (define (list-gcd lst)\n    (foldl gcd 0 lst))\n\n  (define (diffs lst)\n    (map (lambda (i)\n           (abs (- (list-ref lst (modulo (+ i 1) (length lst)))\n                   (list-ref lst i))))\n         (range (- (length lst) 1))))\n\n  (define n (length nums))\n  (if (= n 1)\n      0\n      (let ((g (list-gcd (diffs nums))))\n        (if (= g 0) 0 (/ (- n g) g)))))"
}