{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81424000,
    "question_id": "2920",
    "elapsed_time": 148,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[11,4,10]",
    "expected_output": "1",
    "task_finish_time": 1707960645049,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 278,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175589755",
    "input_formatted": "[11,4,10]",
    "input": "[11,4,10]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumSeconds(nums: number[]): number {\n    let maxFreq = 0;\n    const freq = new Map<number, number>();\n\n    for (const num of nums) {\n        freq.set(num, (freq.get(num) || 0) + 1);\n        maxFreq = Math.max(maxFreq, freq.get(num)!);\n    }\n\n    if (maxFreq === nums.length) return 0; // All elements are already equal\n\n    // The approach is based on the observation that the number of operations required is\n    // determined by the maximum frequency of any number in the array, because we can always\n    // choose the most frequent number to spread. The rest will be adjusted in the process.\n\n    // Calculate the minimum seconds based on spreading the most frequent number\n    let steps = 1;\n    while (maxFreq < nums.length) {\n        maxFreq *= 2; // Each step can potentially double the presence of the most frequent number\n        if (maxFreq < nums.length) steps++; // If after doubling, it's still less than the total, an additional step is needed\n    }\n\n    return steps;\n}"
}