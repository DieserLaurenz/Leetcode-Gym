{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59816000,
    "question_id": "2920",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,5,5,5]",
    "expected_output": "0",
    "task_finish_time": 1707960584777,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 127,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175589321",
    "input_formatted": "[5,5,5,5]",
    "input": "[5,5,5,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumSeconds(nums: number[]): number {\n    const n = nums.length;\n    if (n <= 1) return 0;\n\n    // Function to find greatest common divisor\n    const gcd = (a: number, b: number): number => {\n        while (b !== 0) {\n            let t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    };\n\n    // Function to find the cycle length starting from index 0\n    const findCycleLength = (start: number): number => {\n        let current = nums[start], count = 1;\n        let i = (start + 1) % n;\n        while (i !== start && nums[i] !== current) {\n            current = nums[i];\n            i = (i + 1) % n;\n            count++;\n        }\n        return count;\n    };\n\n    let cycleLength = findCycleLength(0);\n    for (let i = 1; i < n; i++) {\n        if (nums[i] !== nums[0]) {\n            cycleLength = gcd(cycleLength, findCycleLength(i));\n        }\n    }\n\n    return cycleLength === n ? 1 : 2;\n}"
}