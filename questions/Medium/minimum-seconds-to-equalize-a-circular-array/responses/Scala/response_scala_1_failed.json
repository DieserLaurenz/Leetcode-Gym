{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58580000,
    "question_id": "2920",
    "elapsed_time": 10140,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707961832336,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 216,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1175598351",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumSeconds(nums: List[Int]): Int = {\n        val extendedNums = nums ++ nums ++ nums\n        var maxStreak = 0\n        var currentStreak = 1\n\n        for (i <- 1 until extendedNums.length) {\n            if (extendedNums(i) == extendedNums(i - 1)) {\n                currentStreak += 1\n            } else {\n                maxStreak = maxStreak max currentStreak\n                currentStreak = 1\n            }\n        }\n        maxStreak = maxStreak max currentStreak\n        val n = nums.length\n        (n - maxStreak + 1) / 2\n    }\n}"
}