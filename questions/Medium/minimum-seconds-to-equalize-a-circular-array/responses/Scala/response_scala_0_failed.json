{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 405864000,
    "question_id": "2920",
    "elapsed_time": 4790,
    "compare_result": "011000000000000001000000000000000000000000000000000000000000000000000000111110101101111110001111100101011111110011111111010001110110011110100010001001101100100010110000000000001101001100101011111000101100000100100010111011011001000001101011100000000100100100000000100000000000000100000000000000010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707961790339,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 99,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1175598083",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumSeconds(nums: List[Int]): Int = {\n        if (nums.distinct.length == 1) 0\n        else {\n            val n = nums.length\n            val prefixSet = Array.fill(n + 1)(scala.collection.mutable.Set.empty[Int])\n            val suffixSet = Array.fill(n + 1)(scala.collection.mutable.Set.empty[Int])\n\n            for (i <- nums.indices) {\n                prefixSet(i + 1) = prefixSet(i).clone()\n                prefixSet(i + 1) += nums(i)\n            }\n\n            for (i <- nums.indices.reverse) {\n                suffixSet(i) = suffixSet(i + 1).clone()\n                suffixSet(i) += nums(i)\n            }\n\n            var ans = 2\n            for (i <- nums.indices) {\n                if (prefixSet(i).contains(nums(i)) && suffixSet(i + 1).contains(nums(i))) ans = 1\n            }\n            ans\n        }\n    }\n}"
}