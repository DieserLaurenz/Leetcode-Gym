{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73000000,
    "question_id": "2920",
    "elapsed_time": 926,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,18]",
    "expected_output": "1",
    "task_finish_time": 1707961287002,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 124,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175594455",
    "input_formatted": "[4,18]",
    "input": "[4,18]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumSeconds(nums: List<Int>): Int {\n        val n = nums.size\n        if (nums.toSet().size == 1) return 0\n\n        val prefix = IntArray(n) { 0 }\n        val suffix = IntArray(n) { 0 }\n        var answer = 2\n\n        prefix[0] = 1\n        for (i in 1 until n) {\n            if (nums[i] == nums[i - 1]) prefix[i] = prefix[i - 1] + 1\n            else prefix[i] = 1\n        }\n\n        suffix[n - 1] = 1\n        for (i in n - 2 downTo 0) {\n            if (nums[i] == nums[i + 1]) suffix[i] = suffix[i + 1] + 1\n            else suffix[i] = 1\n        }\n\n        for (i in 0 until n) {\n            if (i > 0 && nums[i] == nums[i - 1]) continue\n            if (i < n - 1 && nums[i] == nums[i + 1]) continue\n\n            val left = if (i == 0) 0 else prefix[i - 1]\n            val right = if (i == n - 1) 0 else suffix[i + 1]\n\n            if (left > 0 && right > 0 && nums[(i - 1 + n) % n] == nums[(i + 1) % n]) {\n                answer = 1\n                break\n            }\n        }\n\n        return answer\n    }\n}"
}