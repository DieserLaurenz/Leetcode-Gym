{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65720000,
    "question_id": "2920",
    "elapsed_time": 660,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707961251857,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175594209",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumSeconds(nums: List<Int>): Int {\n        if (nums.distinct().size == 1) return 0\n        val extendedNums = nums + nums\n        var maxEqualSubarray = 0\n        var currentEqualSubarray = 1\n        for (i in 1 until extendedNums.size) {\n            if (extendedNums[i] == extendedNums[i - 1]) {\n                currentEqualSubarray += 1\n            } else {\n                maxEqualSubarray = maxOf(maxEqualSubarray, currentEqualSubarray)\n                currentEqualSubarray = 1\n            }\n        }\n        maxEqualSubarray = maxOf(maxEqualSubarray, currentEqualSubarray)\n        return (nums.size - maxEqualSubarray + 1) / 2 + 1\n    }\n}"
}