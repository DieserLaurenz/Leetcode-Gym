{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 89692000,
    "question_id": "2920",
    "elapsed_time": 4949,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[8,13,3,3]",
    "expected_output": "1",
    "task_finish_time": 1707961334111,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 179,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175594766",
    "input_formatted": "[8,13,3,3]",
    "input": "[8,13,3,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumSeconds(nums: List<Int>): Int {\n        // A map to keep track of each number's occurrences at each possible index after an operation\n        val map = mutableMapOf<Int, MutableSet<Int>>()\n        val n = nums.size\n        // Initialize the map with the initial indices of each number\n        nums.forEachIndexed { index, num ->\n            map.getOrPut(num) { mutableSetOf() }.add(index)\n        }\n        var seconds = 0\n        while (map.any { it.value.size < n }) { // Continue until all numbers have spread to all indices\n            val newMap = mutableMapOf<Int, MutableSet<Int>>()\n            map.forEach { (num, indices) ->\n                val newIndices = mutableSetOf<Int>()\n                indices.forEach { index ->\n                    // For each number, add its current indices and the indices it can spread to\n                    newIndices.add(index)\n                    newIndices.add((index - 1 + n) % n)\n                    newIndices.add((index + 1) % n)\n                }\n                newMap[num] = newIndices\n            }\n            if (map == newMap) { // If no change, it's not possible to equalize further\n                break\n            }\n            map.clear()\n            map.putAll(newMap) // Prepare for the next iteration\n            seconds++\n        }\n        return seconds\n    }\n}"
}