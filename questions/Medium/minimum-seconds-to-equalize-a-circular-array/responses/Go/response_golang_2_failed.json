{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17676000,
    "question_id": "2920",
    "elapsed_time": 256,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707961581633,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 187,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175596568",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumSeconds(nums []int) int {\n    n := len(nums)\n    if n == 1 {\n        return 0\n    }\n\n    // Create a map to track the distance between same elements\n    distanceMap := make(map[int]int)\n    for i := 0; i < n; i++ {\n        distanceMap[nums[i]] = max(distanceMap[nums[i]], min((i+1)%n, n-(i+1)%n))\n    }\n\n    // The answer will be the maximum distance in the map\n    maxDistance := 0\n    for _, v := range distanceMap {\n        if v > maxDistance {\n            maxDistance = v\n        }\n    }\n\n    // Since the problem involves a circular array and picking the maximum distance,\n    // we calculate the minimum seconds based on the maximum gap found\n    // adjusted by the circular nature of the array.\n    return maxDistance\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}"
}