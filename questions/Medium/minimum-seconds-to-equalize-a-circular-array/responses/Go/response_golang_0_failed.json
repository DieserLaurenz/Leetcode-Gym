{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10980000,
    "question_id": "2920",
    "elapsed_time": 131,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1707961506193,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175596050",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumSeconds(nums []int) int {\n    maxCount := 1\n    currentCount := 1\n    n := len(nums)\n\n    // Check for the case where all numbers are the same\n    allSame := true\n    for i := 1; i < n; i++ {\n        if nums[i] != nums[0] {\n            allSame = false\n            break\n        }\n    }\n    if allSame {\n        return 0\n    }\n\n    // Extend nums by itself to handle circular nature without modulo operations\n    extendedNums := append(nums, nums...)\n\n    for i := 1; i < len(extendedNums); i++ {\n        if extendedNums[i] == extendedNums[i-1] {\n            currentCount++\n            if currentCount > maxCount {\n                maxCount = currentCount\n            }\n        } else {\n            currentCount = 1\n        }\n    }\n\n    // Calculate minimum seconds required\n    return (n - maxCount) / 2 + 1\n}"
}