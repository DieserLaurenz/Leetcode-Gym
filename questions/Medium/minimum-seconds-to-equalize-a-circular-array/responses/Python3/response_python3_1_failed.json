{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 49368000,
    "question_id": "2920",
    "elapsed_time": 644,
    "compare_result": "010111111110111110111111111111111111111111010010101100001000000000000000000100001000000000001111000001010010100001000001000001000000000000000000000000000000000000000000110100000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1708838417913,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 64,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185471658",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -> int:\n        from collections import defaultdict\n\n        def find_max_sequence(arr):\n            sequences = defaultdict(int)\n            max_sequence = 0\n            for num in arr:\n                sequences[num] = sequences[num - 1] + 1\n                max_sequence = max(max_sequence, sequences[num])\n            return max_sequence\n\n        nums_double = nums + nums\n        max_seq = find_max_sequence(nums_double)\n\n        return len(nums) - max_seq"
}