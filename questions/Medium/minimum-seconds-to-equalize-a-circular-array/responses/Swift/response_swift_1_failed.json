{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26132000,
    "question_id": "2920",
    "elapsed_time": 467,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[8,8,9,10,9]",
    "expected_output": "1",
    "task_finish_time": 1707960851300,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 250,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175591264",
    "input_formatted": "[8,8,9,10,9]",
    "input": "[8,8,9,10,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumSeconds(_ nums: [Int]) -> Int {\n        if nums.allSatisfy({ $0 == nums[0] }) {\n            return 0\n        }\n        \n        var maxFreq = 0\n        var freqMap = [Int: Int]()\n        \n        for num in nums {\n            freqMap[num, default: 0] += 1\n            maxFreq = max(maxFreq, freqMap[num]!)\n        }\n        \n        let n = nums.count\n        var minLength = n\n        \n        for (_, freq) in freqMap {\n            minLength = min(minLength, n - freq)\n        }\n        \n        return (minLength + 1) / 2\n    }\n}"
}