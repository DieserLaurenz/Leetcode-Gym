{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19728000,
    "question_id": "2920",
    "elapsed_time": 402,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[5,5,5,5]",
    "expected_output": "0",
    "task_finish_time": 1707960825457,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 161,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175591078",
    "input_formatted": "[5,5,5,5]",
    "input": "[5,5,5,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumSeconds(_ nums: [Int]) -> Int {\n        var count = 0\n        var visited = Array(repeating: false, count: nums.count)\n        for i in 0..<nums.count where !visited[i] {\n            var current = i\n            var cycleSize = 0\n            while !visited[current] {\n                visited[current] = true\n                current = (current + 1) % nums.count\n                cycleSize += 1\n                if nums[current] == nums[i] {\n                    count = max(count, (cycleSize + 1) / 2)\n                    break\n                }\n            }\n        }\n        return count\n    }\n}"
}