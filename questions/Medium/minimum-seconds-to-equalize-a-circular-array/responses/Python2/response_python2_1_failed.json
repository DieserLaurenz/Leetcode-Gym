{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34624000,
    "question_id": "2920",
    "elapsed_time": 631,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,1,2]",
    "expected_output": "1",
    "task_finish_time": 1708838296178,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 111,
    "total_testcases": 579,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185470376",
    "input_formatted": "[1,2,1,2]",
    "input": "[1,2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumSeconds(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        from collections import Counter\n        n = len(nums)\n        if n <= 2: return 1 if len(set(nums)) > 1 else 0\n        count = Counter(nums)\n        max_freq = max(count.values())\n        if max_freq == 1: return (n + 1) // 2\n        max_seq = 1\n        for i in range(n):\n            nums.append(nums[i])\n        for i in range(1, 2*n):\n            if nums[i] == nums[i-1]:\n                temp = 2\n                while i + 1 < 2*n and nums[i] == nums[i+1]:\n                    temp += 1\n                    i += 1\n                max_seq = max(max_seq, temp)\n        return max(1, n - max_seq)"
}