{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6324000,
    "question_id": "2855",
    "elapsed_time": 52,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,3,6,4,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707608145301,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 203,
    "total_testcases": 2639,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1171803351",
    "input_formatted": "[1,3,6,4,1,2], 2",
    "input": "[1,3,6,4,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "int maximumJumps(int* nums, int numsSize, int target) {\n    int dp[numsSize]; // dp[i] stores the minimum number of jumps needed to reach end from i\n    for (int i = 0; i < numsSize; i++) {\n        dp[i] = -1;\n    }\n    dp[numsSize - 1] = 0; // start from the end\n\n    for (int i = numsSize - 2; i >= 0; i--) {\n        for (int j = i + 1; j < numsSize; j++) {\n            if (abs(nums[j] - nums[i]) <= target) {\n                if (dp[j] != -1) {\n                    if (dp[i] == -1) dp[i] = dp[j] + 1;\n                    else dp[i] = dp[i] < dp[j] + 1 ? dp[i] : dp[j] + 1;\n                }\n            }\n        }\n    }\n\n    // Find the maximum jumps to reach the end\n    int maxJumps = -1;\n    for (int i = 0; i < numsSize; i++) {\n        if (dp[i] != -1) {\n            maxJumps = maxJumps > dp[i] ? maxJumps : dp[i];\n            break; // Break after finding the first valid jump sequence from the start\n        }\n    }\n\n    return maxJumps;\n}"
}