{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "608 ms",
    "memory": 57892000,
    "question_id": "2855",
    "elapsed_time": 664,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707609077608,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2639,
    "total_testcases": 2639,
    "runtime_percentile": 100,
    "status_memory": "57.9 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1171809035",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumJumps(nums: Array[Int], target: Int): Int = {\n        val n = nums.length\n        val dp = Array.fill(n)(-1)\n        dp(0) = 0\n        \n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (Math.abs(nums(i) - nums(j)) <= target && dp(j) != -1) {\n                    dp(i) = Math.max(dp(i), dp(j) + 1)\n                }\n            }\n        }\n        \n        if (dp(n - 1) == -1) -1 else dp(n - 1)\n    }\n}"
}