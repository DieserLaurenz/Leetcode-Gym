{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39520000,
    "question_id": "2855",
    "elapsed_time": 263,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,6,4,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707608688195,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1045,
    "total_testcases": 2639,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1171806724",
    "input_formatted": "[1,3,6,4,1,2], 2",
    "input": "[1,3,6,4,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumJumps(nums: IntArray, target: Int): Int {\n        val n = nums.size\n        val jumps = IntArray(n) { Int.MAX_VALUE }\n        jumps[0] = 0\n        for (i in 0 until n) {\n            for (j in i + 1 until n) {\n                if (Math.abs(nums[j] - nums[i]) <= target) {\n                    jumps[j] = minOf(jumps[j], jumps[i] + 1)\n                }\n            }\n        }\n        return if (jumps[n - 1] == Int.MAX_VALUE) -1 else jumps.count { it != Int.MAX_VALUE } - 1\n    }\n}"
}