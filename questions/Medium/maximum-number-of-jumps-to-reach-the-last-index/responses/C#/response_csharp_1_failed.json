{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51924000,
    "question_id": "2855",
    "elapsed_time": 179,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,3,6,4,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707608213598,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 919,
    "total_testcases": 2639,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1171803737",
    "input_formatted": "[1,3,6,4,1,2], 2",
    "input": "[1,3,6,4,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaximumJumps(int[] nums, int target) {\n        int n = nums.Length;\n        int[] jumps = new int[n];\n        Array.Fill(jumps, n); // Initialize with max possible value (n jumps to reach the end in the worst case)\n        jumps[0] = 0; // Starting point requires 0 jumps\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (Math.Abs(nums[i] - nums[j]) <= target) {\n                    jumps[i] = Math.Min(jumps[i], jumps[j] + 1);\n                }\n            }\n        }\n\n        return jumps[n - 1] == n ? -1 : jumps[n - 1];\n    }\n}"
}