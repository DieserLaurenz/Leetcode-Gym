{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6724000,
    "question_id": "2855",
    "elapsed_time": 45,
    "compare_result": "00111111111001000110011001000110011000100001100010000100001000011000100001100010000100001000010000100001000011000100001100010000100001000011000100001100011000010000011000010000010000010000011000011000011000010000011000010000011000010000011000010000010000010000010000010000011000010000010000010000011000010000011000010000010000010000011000010000011000010100010000010100011000010000011000010000010000010000010000010000010000010000010000010000010000010000010000010000010000010000011000010000011000011000010000010000010000010000011000011000010000011000010000010000010000010000010000010000010000010000010000010000010000010000010000010000010000011000010000011000010100010000010100011000010000011000010000010000010000011000010000011000010000010000010000011000010000010000010000010000010000011000010000011000010000011000010000011000011000011000010000010000010000011000010000011000010001111101111100100001001010011010000000101100011111000111001001001100010000111100110000010010001110100100000010110100001001000000100001011101110101000010000000000111010000000010000000100100001000110000110101110010001101010010001010010011100110011101110110000001000000011101000101000010100011000100110000001010100010000010011001000110110000000100001010010111001001001001000001001111011101010000100100010011001111110001010111111001011100111111000100100001001110000001001111100011110101100001010110001011010110010010010010110000000100111001001110000110100000000000010110001100000000100110110010000011011001011010000100111010100111001010001000010010000101100010000000100100100001000000011110011110010100100100000010111100011110110001110100010100101101000011110010100000010000000010100110001000001000011011011000000100111101111001010101110101010100000000100010011001001110010100101010101001010101011100000011010011110000010100101110010011111111100001001001101000101000101000001011100110000000110000001000000000100000000100000000010000000000010111000101001000001000101000100000000001011000010000001010000001100000101100010000100100100000000000110011110100000000000011010100000010000001000000000101011000000000010010100100010000001010001000000000001000100000000000000100000010010010110000000000010000010100101001000000000001001000000000000000101100000000011100000010010000010100100000010110000100001000100000110001000010000010000000000000001000000100010000000000000000101001001000001100000000000101000000100010010001001001000000000010001000000000000000000001000000000010000000000001000010010000000000000100000000000011000000000001001000000100100000010000001000110100011001000101000000000001110100000000000000000001000001000000000011000000000000000001000100000000000111110",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,3,6,4,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707608925240,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 756,
    "total_testcases": 2639,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1171808198",
    "input_formatted": "[1,3,6,4,1,2], 2",
    "input": "[1,3,6,4,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumJumps(nums []int, target int) int {\n    n := len(nums)\n    dp := make([]int, n)\n    for i := range dp {\n        dp[i] = n + 1 // Initialize with max possible jumps\n    }\n    dp[0] = 0 // No jumps needed to reach the starting point\n\n    for i := 1; i < n; i++ {\n        for j := 0; j < i; j++ {\n            if abs(nums[i]-nums[j]) <= target {\n                dp[i] = min(dp[i], dp[j]+1)\n            }\n        }\n    }\n\n    if dp[n-1] > n {\n        return -1 // If it's not possible to reach the end\n    }\n    // Find the maximum number of jumps required to reach the end\n    maxJumps := 0\n    for i := 1; i < n; i++ {\n        maxJumps = max(maxJumps, dp[i])\n    }\n    return maxJumps\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}"
}