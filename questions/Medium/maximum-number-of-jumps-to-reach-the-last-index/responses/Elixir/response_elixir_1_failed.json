{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 104956000,
    "question_id": "2855",
    "elapsed_time": 4243,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,3,6,4,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707618097060,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 716,
    "total_testcases": 2639,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171862345",
    "input_formatted": "[1,3,6,4,1,2], 2",
    "input": "[1,3,6,4,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_jumps(nums :: [integer], target :: integer) :: integer\n  def maximum_jumps(nums, target) do\n    dp = for _ <- 0..(length(nums) - 1), do: :infinity\n    dp = List.replace_at(dp, 0, 0)\n\n    for i <- 0..(length(nums) - 2) do\n      for j <- (i + 1)..(length(nums) - 1) do\n        if Enum.at(dp, i) != :infinity and abs(Enum.at(nums, j) - Enum.at(nums, i)) <= target do\n          current_jumps = Enum.at(dp, j)\n          if current_jumps == :infinity or current_jumps > Enum.at(dp, i) + 1 do\n            dp = List.replace_at(dp, j, Enum.at(dp, i) + 1)\n          end\n        end\n      end\n    end\n\n    case Enum.at(dp, length(nums) - 1) do\n      :infinity -> -1\n      jumps -> jumps\n    end\n  end\nend"
}