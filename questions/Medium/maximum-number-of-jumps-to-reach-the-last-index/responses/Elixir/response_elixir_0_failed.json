{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "",
    "full_compile_error": "** (ArgumentError) cannot pipe nums into Enum.at(j) - nums, the :- operator can only take one argument\n    (elixir 1.15.7) lib/macro.ex:371: Macro.pipe/3\n    (stdlib 5.1.1) lists.erl:1594: :lists.foldl/3\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 9:     Solution.maximum_jumps/2\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 9:     Solution.maximum_jumps/2\n    (elixir 1.15.7) expanding macro: Kernel.and/2\nLine 9:     Solution.maximum_jumps/2",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2855",
    "task_finish_time": 1707618062342,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171862154",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_jumps(nums :: [integer], target :: integer) :: integer\n  def maximum_jumps(nums, target) do\n    dp = Enum.map(0..(length(nums)-1), fn _ -> -1 end)\n    dp = List.replace_at(dp, 0, 0)\n\n    for i <- 0..(length(nums)-2) do\n      for j <- (i+1)..(length(nums)-1) do\n        if dp |> Enum.at(i) != -1 and abs(nums |> Enum.at(j) - nums |> Enum.at(i)) <= target do\n          current_jumps = dp |> Enum.at(j)\n          if current_jumps == -1 or current_jumps > dp |> Enum.at(i) + 1 do\n            dp = List.replace_at(dp, j, dp |> Enum.at(i) + 1)\n          end\n        end\n      end\n    end\n\n    Enum.at(dp, length(nums)-1)\n  end\nend"
}