{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "",
    "full_compile_error": "** (ArgumentError) cannot pipe jumps into Enum.at(i) + 1, the :+ operator can only take one argument\n    (elixir 1.15.7) lib/macro.ex:371: Macro.pipe/3\n    (stdlib 5.1.1) lists.erl:1594: :lists.foldl/3\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 12:     Solution.maximum_jumps/2\n    (elixir 1.15.7) expanding macro: Kernel.if/2\nLine 11:     Solution.maximum_jumps/2",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2855",
    "task_finish_time": 1707618117780,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171862519",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_jumps(nums :: [integer], target :: integer) :: integer\n  def maximum_jumps(nums, target) do\n    n = length(nums)\n    jumps = Enum.map(0..(n-1), fn _ -> 0 end)\n    max_reachable = 0\n\n    for i <- 0..(n-2) do\n      max_reachable = max(max_reachable, i)\n      for j <- (max_reachable+1)..min(n-1, i + target) do\n        if nums[j] - nums[i] <= target do\n          jumps = List.update_at(jumps, j, fn _ -> jumps |> Enum.at(i) + 1 end)\n          max_reachable = j\n        end\n      end\n    end\n\n    if Enum.at(jumps, n-1) > 0, do: Enum.at(jumps, n-1), else: -1\n  end\nend"
}