{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44964000,
    "display_runtime": "18",
    "question_id": "2855",
    "elapsed_time": 205,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,3,6,4,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707607985558,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 915,
    "total_testcases": 2639,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1171802365",
    "input_formatted": "[1,3,6,4,1,2], 2",
    "input": "[1,3,6,4,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maximumJumps(int[] nums, int target) {\n        int n = nums.length;\n        int[] dp = new int[n]; // dp[i] stores the maximum jumps to reach i\n        Arrays.fill(dp, -1); // Initialize with -1, as we haven't calculated any jumps yet\n        dp[0] = 0; // Base case: 0 jumps to reach the start\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (Math.abs(nums[i] - nums[j]) <= target) {\n                    if (dp[j] != -1) {\n                        if (dp[i] == -1) dp[i] = dp[j] + 1;\n                        else dp[i] = Math.min(dp[i], dp[j] + 1);\n                    }\n                }\n            }\n        }\n\n        if (dp[n-1] == -1) return -1; // If dp[n-1] is still -1, it means we can't reach the end\n\n        // To find the maximum number of jumps, we need to calculate the number of jumps for each index\n        // and then find the maximum value. However, since the problem requires us to reach the end with the maximum\n        // jumps, we just need to ensure we've reached the last index.\n        int maxJumps = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > maxJumps) maxJumps = dp[i];\n        }\n        return maxJumps;\n    }\n}"
}