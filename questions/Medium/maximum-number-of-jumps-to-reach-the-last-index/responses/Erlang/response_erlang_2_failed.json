{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 16: exception error: function_clause",
    "full_runtime_error": "Line 16: exception error: function_clause\n[{solution,check_jumps,\n              [[1,3,6,4,1,2],2,[0],[-1,-1,-1,-1,-1,-1],1,0],\n              [{file,\"solution.erl\"},{line,16}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,33}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,64}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 59764000,
    "question_id": "2855",
    "elapsed_time": 1280,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,6,4,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707609356176,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2639,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1171810725",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_jumps(Nums :: [integer()], Target :: integer()) -> integer().\nmaximum_jumps(Nums, Target) ->\n    dp(Nums, Target, [0], lists:duplicate(length(Nums), -1), 1, 0).\n\ndp(_Nums, _Target, _, Jumps, _, _) when element(1, hd(Jumps)) == -1 -> \n    -1;\ndp(Nums, Target, [{Index, J}|Q], Jumps, I, MaxJ) when I == length(Nums) -> \n    MaxJ;\ndp(Nums, Target, Q, Jumps, I, MaxJ) ->\n    {Num, NewQ, NewJumps, NewMaxJ} = case lists:nth(I, Jumps) of\n        -1 -> check_jumps(Nums, Target, Q, Jumps, I, MaxJ);\n        J -> {lists:nth(I, Nums), Q, Jumps, max(MaxJ, J)}\n    end,\n    dp(Nums, Target, NewQ, NewJumps, I + 1, NewMaxJ).\n\ncheck_jumps(Nums, Target, [], Jumps, _, MaxJ) -> \n    {lists:last(Nums), [], Jumps, MaxJ};\ncheck_jumps(Nums, Target, [{Index, J}|Q], Jumps, I, MaxJ) ->\n    Current = lists:nth(I, Nums),\n    Prev = lists:nth(Index + 1, Nums),\n    if \n        abs(Current - Prev) =< Target ->\n            NewJ = J + 1,\n            NewJumps = lists:update_nth(I, fun(_) -> NewJ end, Jumps),\n            NewQ = Q ++ [{I - 1, NewJ}],\n            check_jumps(Nums, Target, NewQ, NewJumps, I, max(MaxJ, NewJ));\n        true -> \n            check_jumps(Nums, Target, Q, Jumps, I, MaxJ)\n    end."
}