{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126360000,
    "question_id": "2855",
    "elapsed_time": 4255,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,3,6,4,1,2]\n2",
    "expected_output": "3",
    "task_finish_time": 1707609246278,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 919,
    "total_testcases": 2639,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1171810031",
    "input_formatted": "[1,3,6,4,1,2], 2",
    "input": "[1,3,6,4,1,2]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-jumps nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let ([n (length nums)])\n    (define dp (make-vector n (cons #f 0)))\n    (vector-set! dp 0 (cons #t 0))\n    (for ([i (in-range 1 n)])\n      (for ([j (in-range 0 i)])\n        (when (and (car (vector-ref dp j))\n                   (<= (abs (- (list-ref nums i) (list-ref nums j))) target))\n          (when (or (not (car (vector-ref dp i)))\n                    (> (cdr (vector-ref dp i)) (+ 1 (cdr (vector-ref dp j)))))\n            (vector-set! dp i (cons #t (+ 1 (cdr (vector-ref dp j)))))))))\n    (if (car (vector-ref dp (- n 1))) (cdr (vector-ref dp (- n 1))) -1)))"
}