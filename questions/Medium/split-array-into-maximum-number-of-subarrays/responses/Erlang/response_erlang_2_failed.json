{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 152744000,
    "question_id": "3080",
    "elapsed_time": 1987,
    "compare_result": "00011000100001001000010001010000110001010011000100000100000000100100100100110000001001000101000000100011001001000011010000100000000100110000000000001000000011001100000000000000000001000000000011100001100000000100000110000000001000100000011010010110101000100100010001011010010100000000001000000010000000000000100011000100010000001010001001100110010001000001001100001000100000000100010000000100000110110010000000000100010010000000001000001000000000011100001011000000000001000001000000000111000010000011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,0,2,0,1,2]",
    "expected_output": "3",
    "task_finish_time": 1708206285260,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 121,
    "total_testcases": 887,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178267745",
    "input_formatted": "[1,0,2,0,1,2]",
    "input": "[1,0,2,0,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_subarrays(Nums :: [integer()]) -> integer().\nmax_subarrays(Nums) ->\n    count_zeros(Nums, 0).\n\ncount_zeros([], Count) -> Count;\ncount_zeros([0 | T], Count) -> count_zeros(T, Count + 1);\ncount_zeros([_ | T], Count) -> count_zeros(T, Count)."
}