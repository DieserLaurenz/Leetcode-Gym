{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 107600000,
    "question_id": "3080",
    "elapsed_time": 147,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[1,0,2,0,1,2]",
    "expected_output": "3",
    "task_finish_time": 1708195826999,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 228,
    "total_testcases": 887,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1178161166",
    "input_formatted": "[1,0,2,0,1,2]",
    "input": "[1,0,2,0,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxSubarrays(vector<int>& nums) {\n        int count = 1; // Start with one subarray\n        for (int i = 1; i < nums.size(); ++i) {\n            if (nums[i] == 0 || nums[i-1] == 0) {\n                count++; // Increment count for each zero or when a zero precedes the current number\n            }\n        }\n        return count; // Return the total count of subarrays\n    }\n};"
}