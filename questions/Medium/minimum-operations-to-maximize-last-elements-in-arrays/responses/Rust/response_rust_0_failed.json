{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2204000,
    "question_id": "3190",
    "elapsed_time": 15,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940931885,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 64,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1175442269",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_operations(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {\n        let n = nums1.len();\n        let mut operations = 0;\n        \n        let mut nums1 = nums1;\n        let mut nums2 = nums2;\n        \n        // Sort both arrays to easily find and swap to satisfy the conditions\n        nums1.sort_unstable();\n        nums2.sort_unstable();\n        \n        let mut i = n - 1;\n        while i > 0 && (nums1[i] < nums1[i - 1] || nums2[i] < nums2[i - 1]) {\n            if nums1[i] < nums1[i - 1] && nums2[i] < nums2[i - 1] {\n                // If both conditions are violated, it's impossible to satisfy both\n                return -1;\n            }\n            if nums1[i] < nums1[i - 1] {\n                // Swap to make nums1[i] the max\n                nums1.swap(i, i - 1);\n                operations += 1;\n            }\n            if nums2[i] < nums2[i - 1] {\n                // Swap to make nums2[i] the max\n                nums2.swap(i, i - 1);\n                operations += 1;\n            }\n            i -= 1;\n        }\n        \n        // Check if conditions are satisfied\n        if nums1[n - 1] != *nums1.iter().max().unwrap() || nums2[n - 1] != *nums2.iter().max().unwrap() {\n            return -1;\n        }\n        \n        operations\n    }\n}"
}