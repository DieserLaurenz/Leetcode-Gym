{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45384000,
    "display_runtime": "1",
    "question_id": "3190",
    "elapsed_time": 168,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707928968442,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 123,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175279502",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(int[] nums1, int[] nums2) {\n        int n = nums1.length;\n        int maxIndexNums1 = 0, maxIndexNums2 = 0;\n\n        // Find indexes of maximum values in both arrays\n        for (int i = 1; i < n; i++) {\n            if (nums1[i] > nums1[maxIndexNums1]) {\n                maxIndexNums1 = i;\n            }\n            if (nums2[i] > nums2[maxIndexNums2]) {\n                maxIndexNums2 = i;\n            }\n        }\n\n        int operations = 0;\n        // If the max value is not at the last position, swap is required\n        if (maxIndexNums1 != n - 1 || maxIndexNums2 != n - 1) {\n            // If the max values are already in the correct positions in both arrays\n            if (maxIndexNums1 == n - 1 && nums2[n - 1] >= nums2[maxIndexNums2]) {\n                return 0; // No operation needed\n            }\n            if (maxIndexNums2 == n - 1 && nums1[n - 1] >= nums1[maxIndexNums1]) {\n                return 0; // No operation needed\n            }\n            // Swap to make the last elements the max of their respective arrays\n            if (nums1[maxIndexNums1] != nums1[n - 1] || nums2[maxIndexNums2] != nums2[n - 1]) {\n                int temp = nums1[maxIndexNums1];\n                nums1[maxIndexNums1] = nums2[maxIndexNums2];\n                nums2[maxIndexNums2] = temp;\n                operations++;\n            }\n        }\n\n        // After swap, check if the conditions are satisfied\n        boolean condition1 = nums1[n - 1] >= nums1[maxIndexNums1];\n        boolean condition2 = nums2[n - 1] >= nums2[maxIndexNums2];\n\n        if (!condition1 || !condition2) {\n            // If still not satisfied, check if swapping the current last elements helps\n            if (nums1[n - 1] < nums2[n - 1] || nums2[n - 1] < nums1[n - 1]) {\n                int temp = nums1[n - 1];\n                nums1[n - 1] = nums2[n - 1];\n                nums2[n - 1] = temp;\n                operations++;\n            }\n        }\n\n        // Final check if both conditions are satisfied\n        boolean finalCheck1 = nums1[n - 1] == nums1[maxIndexNums1];\n        boolean finalCheck2 = nums2[n - 1] == nums2[maxIndexNums2];\n        if (finalCheck1 && finalCheck2) {\n            return operations;\n        }\n\n        // If it's not possible to satisfy the conditions\n        return -1;\n    }\n}"
}