{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45016000,
    "display_runtime": "1",
    "question_id": "3190",
    "elapsed_time": 155,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "expected_output": "2",
    "task_finish_time": 1707929011161,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 79,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175280168",
    "input_formatted": "[2,3,4,5,9], [8,8,4,4,4]",
    "input": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(int[] nums1, int[] nums2) {\n        int n = nums1.length;\n        // Check if swapping is needed for nums1\n        int swapNeeded1 = nums1[n - 1] != getMax(nums1) ? 1 : 0;\n        // Check if swapping is needed for nums2\n        int swapNeeded2 = nums2[n - 1] != getMax(nums2) ? 1 : 0;\n        \n        // If both need swapping but the maximum of one is already in the last position of the other, only one swap is needed\n        if (swapNeeded1 + swapNeeded2 == 2) {\n            if (nums1[n - 1] == getMax(nums2) || nums2[n - 1] == getMax(nums1)) {\n                return 1;\n            }\n            // If the max of both are not in correct position and cannot be swapped to correct both in one operation\n            return 2;\n        }\n        // If either needs swapping or neither need swapping\n        return swapNeeded1 + swapNeeded2;\n    }\n    \n    private int getMax(int[] nums) {\n        int max = nums[0];\n        for (int num : nums) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"
}