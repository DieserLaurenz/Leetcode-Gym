{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44708000,
    "display_runtime": "1",
    "question_id": "3190",
    "elapsed_time": 282,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707928910906,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 118,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1175278680",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(int[] nums1, int[] nums2) {\n        int n = nums1.length;\n        int ops = 0;\n\n        // Find max values in both arrays\n        int maxNums1 = nums1[0];\n        int maxNums2 = nums2[0];\n        for (int i = 1; i < n; i++) {\n            if (nums1[i] > maxNums1) {\n                maxNums1 = nums1[i];\n            }\n            if (nums2[i] > maxNums2) {\n                maxNums2 = nums2[i];\n            }\n        }\n\n        // Check if the last elements are already the max elements\n        boolean nums1Correct = nums1[n - 1] == maxNums1;\n        boolean nums2Correct = nums2[n - 1] == maxNums2;\n\n        if (nums1Correct && nums2Correct) {\n            return 0; // No operations needed\n        }\n\n        // Perform operations if needed\n        if (!nums1Correct || !nums2Correct) {\n            for (int i = 0; i < n; i++) {\n                if ((nums1[i] == maxNums1 && nums2[i] != maxNums2) || (nums2[i] == maxNums2 && nums1[i] != maxNums1)) {\n                    // Swap the elements to satisfy the condition\n                    int temp = nums1[i];\n                    nums1[i] = nums2[i];\n                    nums2[i] = temp;\n                    ops++;\n\n                    // Update conditions\n                    nums1Correct = nums1[n - 1] == maxNums1;\n                    nums2Correct = nums2[n - 1] == maxNums2;\n                    if (nums1Correct && nums2Correct) {\n                        break; // Both conditions are satisfied\n                    }\n                }\n            }\n        }\n\n        // Check if conditions are met after operations\n        if (!nums1Correct || !nums2Correct) {\n            return -1; // Impossible to satisfy both conditions\n        }\n\n        return ops;\n    }\n}"
}