{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16840000,
    "question_id": "3190",
    "elapsed_time": 562,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "expected_output": "2",
    "task_finish_time": 1708829649608,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 126,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185343025",
    "input_formatted": "[2,3,4,5,9], [8,8,4,4,4]",
    "input": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        swap_count = 0\n        n = len(nums1)\n        \n        # Checking if swapping is needed at all\n        if nums1[n-1] == max(nums1) and nums2[n-1] == max(nums2):\n            return 0\n\n        for i in range(n):\n            if (i == n-1) or (nums1[i] == max(nums1) and nums2[i] == max(nums2)):\n                # If both maximum are already at the last position or being moved to the last position\n                if nums1[n-1] < nums2[i]:\n                    nums1[n-1], nums2[i] = nums2[i], nums1[n-1]\n                    swap_count += 1\n                elif nums2[n-1] < nums1[i]:\n                    nums1[i], nums2[i] = nums2[i], nums1[i]\n                    swap_count += 1\n                break\n\n        if nums1[n-1] != max(nums1) or nums2[n-1] != max(nums2):\n            return -1  # It's not possible to satisfy the condition\n        \n        return swap_count"
}