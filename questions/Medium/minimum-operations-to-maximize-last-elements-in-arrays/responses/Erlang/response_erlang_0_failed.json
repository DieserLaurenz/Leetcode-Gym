{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63476000,
    "question_id": "3190",
    "elapsed_time": 1499,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707941222026,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 111,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175445095",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_operations(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmin_operations(Nums1, Nums2) ->\n    Max1 = lists:max(Nums1),\n    Max2 = lists:max(Nums2),\n    Last1 = lists:last(Nums1),\n    Last2 = lists:last(Nums2),\n    case {Max1 == Last1 andalso Max2 == Last2, Max1 == Last2 andalso Max2 == Last1} of\n        {true, _} -> 0;\n        {false, true} -> 1;\n        _ ->\n            Indexes1 = [Index || {Value, Index} <- lists:zip(Nums1, lists:seq(0, length(Nums1) - 1)), Value == Max1],\n            Indexes2 = [Index || {Value, Index} <- lists:zip(Nums2, lists:seq(0, length(Nums2) - 1)), Value == Max2],\n            case {lists:any(fun(I) -> lists:member(I, Indexes2) end, Indexes1), lists:any(fun(I) -> lists:member(I, Indexes1) end, Indexes2)} of\n                {true, true} -> 2;\n                _ -> -1\n            end\n    end."
}