{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63720000,
    "question_id": "3190",
    "elapsed_time": 3582,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707941305939,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 118,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1175445891",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_operations(Nums1 :: [integer()], Nums2 :: [integer()]) -> integer().\nmin_operations(Nums1, Nums2) ->\n    Max1 = lists:max(Nums1),\n    Max2 = lists:max(Nums2),\n    Len = length(Nums1),\n    Last1 = lists:nth(Len, Nums1),\n    Last2 = lists:nth(Len, Nums2),\n    if \n        Max1 =:= Last1 andalso Max2 =:= Last2 -> 0;\n        true ->\n            PossibleSwaps = lists:filter(fun(I) -> \n                (Nums1 -- [lists:nth(I, Nums1)] ++ [lists:nth(I, Nums2)]) =:= lists:sort(Nums1) andalso\n                (Nums2 -- [lists:nth(I, Nums2)] ++ [lists:nth(I, Nums1)]) =:= lists:sort(Nums2)\n            end, lists:seq(1, Len)),\n            case PossibleSwaps of\n                [_|_] -> 1;\n                [] -> -1\n            end\n    end."
}