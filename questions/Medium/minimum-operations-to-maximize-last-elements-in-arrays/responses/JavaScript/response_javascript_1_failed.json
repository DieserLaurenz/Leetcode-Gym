{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52052000,
    "question_id": "3190",
    "elapsed_time": 106,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "expected_output": "2",
    "task_finish_time": 1707932103713,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 85,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1175327481",
    "input_formatted": "[2,3,4,5,9], [8,8,4,4,4]",
    "input": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar minOperations = function(nums1, nums2) {\n    let operations = 0;\n    if (nums1[nums1.length - 1] === Math.max(...nums1) && nums2[nums2.length - 1] === Math.max(...nums2)) {\n        return 0; // No operations needed\n    }\n\n    // Check for swapping opportunities\n    if (nums1[nums1.length - 1] < Math.max(...nums2)) {\n        operations++;\n        let swapIndex = nums2.indexOf(Math.max(...nums2));\n        [nums1[nums1.length - 1], nums2[swapIndex]] = [nums2[swapIndex], nums1[nums1.length - 1]];\n    }\n\n    if (nums2[nums2.length - 1] < Math.max(...nums1)) {\n        operations++;\n        let swapIndex = nums1.indexOf(Math.max(...nums1));\n        [nums2[nums2.length - 1], nums1[swapIndex]] = [nums1[swapIndex], nums2[nums2.length - 1]];\n    }\n\n    // Validate if conditions are met\n    if (nums1[nums1.length - 1] !== Math.max(...nums1) || nums2[nums2.length - 1] !== Math.max(...nums2)) {\n        return -1; // Conditions cannot be met\n    }\n\n    return operations;\n};"
}