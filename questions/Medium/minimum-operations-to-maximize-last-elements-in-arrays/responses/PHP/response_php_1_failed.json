{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20144000,
    "question_id": "3190",
    "elapsed_time": 187,
    "compare_result": "001110111111101111111100100001010101011100000001000111100011100100000000000001000011000101000000000000011101000100001000000100000001000000000000000000100000010001100001000001000000011100001000010000000010010000001000000000000000000100010000000000000000000010000001000000000110001100110100000000000000000000000000010000000100000010000000000000000000000100000000000100001000000000010100000000000100001000001001000001000001001001000000100100000000000001100000000100010000000000000000000000000000000000000000000000000000000000000000000000000100000000100000001000100000000000000010000000000000000100000001010000000000000000100000000010000001000000001000100000011111110010111110000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707932433954,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 121,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175332588",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minOperations($nums1, $nums2) {\n        $n = count($nums1);\n        $maxNums1 = max($nums1);\n        $maxNums2 = max($nums2);\n        $operations = 0;\n\n        if ($nums1[$n - 1] == $maxNums1 && $nums2[$n - 1] == $maxNums2) {\n            return $operations;\n        }\n\n        $swapNeededForNums1 = $nums1[$n - 1] != $maxNums1;\n        $swapNeededForNums2 = $nums2[$n - 1] != $maxNums2;\n\n        if ($swapNeededForNums1 && in_array($maxNums2, $nums1)) {\n            $operations++;\n        } else if ($swapNeededForNums2 && in_array($maxNums1, $nums2)) {\n            $operations++;\n        } else if ($swapNeededForNums1 || $swapNeededForNums2) {\n            return -1; // Impossible to satisfy both conditions with a single swap\n        }\n\n        // Check after potential swap\n        if (($swapNeededForNums1 && $nums2[$n - 1] != $maxNums2) || ($swapNeededForNums2 && $nums1[$n - 1] != $maxNums1)) {\n            return -1;\n        }\n\n        return $operations;\n    }\n}"
}