{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20100000,
    "question_id": "3190",
    "elapsed_time": 187,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "expected_output": "2",
    "task_finish_time": 1707932483266,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 81,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175333425",
    "input_formatted": "[2,3,4,5,9], [8,8,4,4,4]",
    "input": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minOperations($nums1, $nums2) {\n        $n = count($nums1);\n        // Calculate initial maximums\n        $maxNums1 = max($nums1);\n        $maxNums2 = max($nums2);\n\n        // If already in correct state, no operations needed.\n        if ($nums1[$n - 1] == $maxNums1 && $nums2[$n - 1] == $maxNums2) {\n            return 0;\n        }\n\n        // If swapping the last elements satisfies the condition\n        if (($nums1[$n - 1] < $maxNums2 && $nums2[$n - 1] < $maxNums1) || \n            ($nums1[$n - 1] < $maxNums2 && $nums2[$n - 1] == $maxNums2) ||\n            ($nums2[$n - 1] < $maxNums1 && $nums1[$n - 1] == $maxNums1)) {\n            return 1;\n        }\n\n        // Check if swapping any pair of elements can satisfy the condition\n        for ($i = 0; $i < $n - 1; $i++) {\n            if (($nums1[$i] == $maxNums2 && $nums2[$i] < $nums1[$n - 1]) ||\n                ($nums2[$i] == $maxNums1 && $nums1[$i] < $nums2[$n - 1])) {\n                return 1;\n            }\n        }\n\n        // If conditions cannot be satisfied\n        return -1;\n    }\n}"
}