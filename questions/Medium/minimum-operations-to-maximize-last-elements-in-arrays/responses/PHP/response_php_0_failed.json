{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20152000,
    "question_id": "3190",
    "elapsed_time": 376,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707932392959,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 465,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1175331950",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums1\n     * @param Integer[] $nums2\n     * @return Integer\n     */\n    function minOperations($nums1, $nums2) {\n        $n = count($nums1);\n        $maxNums1 = max($nums1);\n        $maxNums2 = max($nums2);\n        $lastNums1 = $nums1[$n - 1];\n        $lastNums2 = $nums2[$n - 1];\n        $operations = 0;\n\n        if ($maxNums1 == $lastNums1 && $maxNums2 == $lastNums2) {\n            return $operations;\n        }\n\n        for ($i = 0; $i < $n - 1; $i++) {\n            if (($nums1[$i] > $nums1[$n - 1] && $nums2[$i] < $nums2[$n - 1]) ||\n                ($nums2[$i] > $nums2[$n - 1] && $nums1[$i] < $nums1[$n - 1])) {\n                // Swap values\n                $temp = $nums1[$i];\n                $nums1[$i] = $nums2[$i];\n                $nums2[$i] = $temp;\n                $operations++;\n                // Update max values after swap\n                $maxNums1 = max($nums1);\n                $maxNums2 = max($nums2);\n            }\n\n            if ($nums1[$n - 1] == $maxNums1 && $nums2[$n - 1] == $maxNums2) {\n                return $operations;\n            }\n        }\n\n        return -1; // If conditions are not met\n    }\n}"
}