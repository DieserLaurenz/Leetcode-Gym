{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11764000,
    "question_id": "3190",
    "elapsed_time": 609,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,1,8,9]\n[1,7,1,1]",
    "expected_output": "1",
    "task_finish_time": 1708829515953,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185340439",
    "input_formatted": "[1,1,8,9], [1,7,1,1]",
    "input": "[1,1,8,9]\n[1,7,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minOperations(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        # Initialize operations count to 0\n        operations = 0\n\n        # Calculate the current max of both lists\n        max_num1 = max(nums1)\n        max_num2 = max(nums2)\n\n        # Check if the conditions are already met\n        if nums1[-1] == max_num1 and nums2[-1] == max_num2:\n            return operations\n\n        # Loop through the lists to find the required swaps\n        for i in range(len(nums1)-1, -1, -1):\n            # If the last element of nums1 is not the max, or the last element of nums2 is not the max\n            if nums1[i] != max_num1 or nums2[i] != max_num2:\n                # Check if swapping will help meet the conditions\n                if nums1[i] < max_num1 and nums2[i] > nums1[i] or nums2[i] < max_num2 and nums1[i] > nums2[i]:\n                    # Perform the swap\n                    nums1[i], nums2[i] = nums2[i], nums1[i]\n                    operations += 1\n                    # Update the max values if needed\n                    max_num1 = max(nums1)\n                    max_num2 = max(nums2)\n                    # Check if the conditions are met after the swap\n                    if nums1[-1] == max_num1 and nums2[-1] == max_num2:\n                        return operations\n\n        # If the loop completes without returning, it's impossible to meet the conditions\n        return -1"
}