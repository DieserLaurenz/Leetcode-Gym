{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11756000,
    "question_id": "3190",
    "elapsed_time": 149,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,5,4]\n[2,5,3]",
    "expected_output": "-1",
    "task_finish_time": 1708829549235,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 98,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185341085",
    "input_formatted": "[1,5,4], [2,5,3]",
    "input": "[1,5,4]\n[2,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minOperations(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n        swap_needed = 0\n        max1, max2 = max(nums1), max(nums2)\n        last1, last2 = nums1[-1], nums2[-1]\n        \n        # If both conditions are already met\n        if last1 == max1 and last2 == max2:\n            return 0\n        \n        # If swapping the last elements satisfies the condition\n        if (last1 != max1 or last2 != max2) and (nums1[-1] < max2 or nums2[-1] < max1):\n            nums1[-1], nums2[-1] = nums2[-1], nums1[-1]\n            swap_needed += 1\n            \n            # Check if conditions are met after the swap\n            if nums1[-1] == max(nums1) and nums2[-1] == max(nums2):\n                return swap_needed\n        \n        # Sort both arrays to prepare for possible swaps\n        nums1.sort()\n        nums2.sort()\n        \n        # Check each element from the start to the second last\n        for i in range(len(nums1) - 1):\n            if nums1[i] < nums2[i]:\n                nums1[i], nums2[i] = nums2[i], nums1[i]\n                swap_needed += 1\n                \n                # Check if conditions are met after each swap\n                if nums1[-1] == max(nums1) and nums2[-1] == max(nums2):\n                    return swap_needed\n        \n        # Final check if conditions are met\n        if nums1[-1] == max(nums1) and nums2[-1] == max(nums2):\n            return swap_needed\n        else:\n            return -1"
}