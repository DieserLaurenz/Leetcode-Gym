{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6692000,
    "question_id": "3190",
    "elapsed_time": 37,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707929316505,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 124,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1175284731",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n\nint minOperations(int* nums1, int nums1Size, int* nums2, int nums2Size) {\n    int maxNums1 = nums1[0], maxNums2 = nums2[0];\n    for (int i = 1; i < nums1Size; ++i) {\n        if (nums1[i] > maxNums1) {\n            maxNums1 = nums1[i];\n        }\n        if (nums2[i] > maxNums2) {\n            maxNums2 = nums2[i];\n        }\n    }\n    \n    int operations = 0;\n    if (nums1[nums1Size - 1] != maxNums1 || nums2[nums2Size - 1] != maxNums2) {\n        int needSwap1 = nums1[nums1Size - 1] != maxNums1;\n        int needSwap2 = nums2[nums2Size - 1] != maxNums2;\n\n        if (needSwap1 && nums2[nums1Size - 1] == maxNums1) operations++;\n        if (needSwap2 && nums1[nums2Size - 1] == maxNums2) operations++;\n\n        if ((needSwap1 && nums2[nums1Size - 1] != maxNums1) || \n            (needSwap2 && nums1[nums2Size - 1] != maxNums2)) {\n            return -1;\n        }\n    }\n\n    return operations;\n}"
}