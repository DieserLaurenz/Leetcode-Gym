{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50876000,
    "question_id": "3190",
    "elapsed_time": 185,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707929386092,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 76,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175285820",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "using System;\n\npublic class Solution {\n    public int MinOperations(int[] nums1, int[] nums2) {\n        int n = nums1.Length;\n        int maxNums1 = nums1[0];\n        int maxNums2 = nums2[0];\n        int swapCount = 0;\n\n        // Find the maximum value in both arrays\n        for (int i = 1; i < n; i++) {\n            if (nums1[i] > maxNums1) {\n                maxNums1 = nums1[i];\n            }\n            if (nums2[i] > maxNums2) {\n                maxNums2 = nums2[i];\n            }\n        }\n\n        // Check if the last elements are already the maximum\n        if (nums1[n - 1] == maxNums1 && nums2[n - 1] == maxNums2) {\n            return 0;\n        }\n\n        // Check if swapping is required and possible\n        if (nums1[n - 1] != maxNums1 && nums2[n - 1] != maxNums2) {\n            // Check if swapping the last elements makes both conditions true\n            if ((nums1[n - 1] == maxNums2 && nums2[n - 1] == maxNums1) || (nums1[n - 1] < maxNums2 && nums2[n - 1] < maxNums1)) {\n                return 1;\n            }\n            \n            for (int i = 0; i < n - 1; i++) {\n                if ((nums1[i] == maxNums2 && nums2[i] == maxNums1) || (nums1[i] < maxNums1 && nums2[i] > maxNums2) || (nums2[i] < maxNums2 && nums1[i] > maxNums1)) {\n                    swapCount++;\n                    int temp = nums1[i];\n                    nums1[i] = nums2[i];\n                    nums2[i] = temp;\n                    if ((nums1[n - 1] >= maxNums1 && nums2[n - 1] >= maxNums2) || (i == n - 2)) {\n                        return swapCount;\n                    }\n                }\n            }\n\n            return -1;\n        }\n\n        // If only one condition is not met and cannot be resolved by swapping\n        return -1;\n    }\n}"
}