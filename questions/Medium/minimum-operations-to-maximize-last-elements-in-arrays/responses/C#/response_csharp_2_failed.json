{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51468000,
    "question_id": "3190",
    "elapsed_time": 216,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707929491657,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 121,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175287378",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "using System;\nusing System.Linq;\n\npublic class Solution {\n    public int MinOperations(int[] nums1, int[] nums2) {\n        int operations = 0;\n        int n = nums1.Length;\n        int maxNums1 = nums1.Max();\n        int maxNums2 = nums2.Max();\n\n        // If both conditions are already satisfied\n        if (nums1[n - 1] == maxNums1 && nums2[n - 1] == maxNums2) return 0;\n\n        // If either condition is not satisfied and can be fixed by a single swap\n        if ((nums1[n - 1] < maxNums1 && nums2[n - 1] < maxNums2) && (maxNums1 == nums2[n - 1] && maxNums2 == nums1[n - 1])) {\n            return 1; // Swap the last elements to satisfy both conditions\n        }\n\n        // Operations needed to make nums1[n - 1] = max(nums1)\n        if (nums1[n - 1] != maxNums1) {\n            int index = Array.IndexOf(nums2, maxNums1);\n            if (index != -1) { // Swap if possible\n                Swap(nums1, nums2, index, n - 1);\n                operations++;\n            }\n        }\n\n        // Operations needed to make nums2[n - 1] = max(nums2)\n        if (nums2[n - 1] != maxNums2) {\n            int index = Array.IndexOf(nums1, maxNums2);\n            if (index != -1) { // Swap if possible\n                Swap(nums1, nums2, index, n - 1);\n                operations++;\n            }\n        }\n\n        // Check if both conditions are satisfied after operations\n        if (nums1[n - 1] == nums1.Max() && nums2[n - 1] == nums2.Max()) {\n            return operations;\n        }\n\n        return -1; // If it's impossible to satisfy both conditions\n    }\n\n    private void Swap(int[] nums1, int[] nums2, int i, int n) {\n        int temp = nums1[i];\n        nums1[i] = nums2[i];\n        nums2[i] = temp;\n    }\n}"
}