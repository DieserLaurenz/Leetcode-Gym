{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51356000,
    "question_id": "3190",
    "elapsed_time": 382,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707929443351,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 196,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1175286677",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "using System;\n\npublic class Solution {\n    public int MinOperations(int[] nums1, int[] nums2) {\n        int n = nums1.Length;\n        // Check if the maximum values are already at the last position\n        if ((nums1[n - 1] >= nums1.Max() && nums2[n - 1] >= nums2.Max())) return 0;\n        \n        // Check if swapping the last elements makes the conditions true\n        if (nums1[n - 1] < nums2[n - 1] && nums1.Max() <= nums2[n - 1] && nums2.Max() <= nums1[n - 1]\n            || nums2[n - 1] < nums1[n - 1] && nums2.Max() <= nums1[n - 1] && nums1.Max() <= nums2[n - 1]) {\n            return 1;\n        }\n\n        // Check other elements for possible swaps\n        int operations = 0;\n        for (int i = 0; i < n - 1; i++) {\n            if ((nums1[i] != nums1.Max() && nums2[i] == nums2.Max()) || (nums2[i] != nums2.Max() && nums1[i] == nums1.Max())) {\n                // Swap only if it helps in achieving the goal\n                if ((nums1[i] > nums1[n - 1] && nums2[i] < nums2[n - 1]) || (nums2[i] > nums2[n - 1] && nums1[i] < nums1[n - 1])) {\n                    int temp = nums1[i];\n                    nums1[i] = nums2[i];\n                    nums2[i] = temp;\n                    operations++;\n                    // Check if the conditions are met after the swap\n                    if (nums1[n - 1] >= nums1.Max() && nums2[n - 1] >= nums2.Max()) return operations;\n                }\n            }\n        }\n\n        // If conditions are met without swaps\n        if (nums1[n - 1] >= nums1.Max() && nums2[n - 1] >= nums2.Max()) return operations;\n\n        // Return -1 if it's impossible to meet the conditions\n        return -1;\n    }\n}"
}