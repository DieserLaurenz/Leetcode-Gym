{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 151028000,
    "question_id": "3190",
    "elapsed_time": 708,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940262878,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 116,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1175435300",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minOperations(List<int> nums1, List<int> nums2) {\n    int operations = 0;\n    // Finding the maximum value in both arrays\n    int maxNums1 = nums1.reduce((a, b) => a > b ? a : b);\n    int maxNums2 = nums2.reduce((a, b) => a > b ? a : b);\n\n    // Check if swapping is necessary for the last elements to be the max of their respective arrays\n    if (nums1.last != maxNums1 || nums2.last != maxNums2) {\n      // If the max of nums1 is not at the last position, find where it is and swap if it's beneficial\n      if (nums1.last != maxNums1) {\n        int indexMaxNums1 = nums1.indexOf(maxNums1);\n        if (nums2[indexMaxNums1] > nums1.last) {\n          int temp = nums1[indexMaxNums1];\n          nums1[indexMaxNums1] = nums2[indexMaxNums1];\n          nums2[indexMaxNums1] = temp;\n          operations++;\n        }\n      }\n      // If the max of nums2 is not at the last position, find where it is and swap if it's beneficial\n      if (nums2.last != maxNums2) {\n        int indexMaxNums2 = nums2.indexOf(maxNums2);\n        if (nums1[indexMaxNums2] > nums2.last) {\n          int temp = nums2[indexMaxNums2];\n          nums2[indexMaxNums2] = nums1[indexMaxNums2];\n          nums1[indexMaxNums2] = temp;\n          operations++;\n        }\n      }\n    }\n\n    // Re-evaluate the conditions after potential swaps\n    maxNums1 = nums1.reduce((a, b) => a > b ? a : b);\n    maxNums2 = nums2.reduce((a, b) => a > b ? a : b);\n    if (nums1.last == maxNums1 && nums2.last == maxNums2) {\n      return operations; // Conditions met\n    } else {\n      return -1; // Conditions cannot be met\n    }\n  }\n}"
}