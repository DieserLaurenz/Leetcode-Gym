{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53988000,
    "question_id": "3190",
    "elapsed_time": 528,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707932284902,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 132,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175330217",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(nums1: number[], nums2: number[]): number {\n    let operations = 0;\n    if (nums1[nums1.length - 1] < Math.max(...nums1) && nums2[nums1.length - 1] < Math.max(...nums2)) {\n        // Impossible to satisfy both conditions with a single swap\n        return -1;\n    }\n    // Check if already satisfied without any operations\n    if (nums1[nums1.length - 1] === Math.max(...nums1) && nums2[nums2.length - 1] === Math.max(...nums2)) {\n        return 0;\n    }\n    // Perform swap if it leads to satisfying the conditions\n    for (let i = 0; i < nums1.length; i++) {\n        if (nums1[i] !== nums2[i]) {\n            const maxNums1 = Math.max(...nums1);\n            const maxNums2 = Math.max(...nums2);\n            if (nums1[i] === maxNums1 && nums2[i] < nums2[nums2.length - 1]) {\n                [nums1[i], nums2[i]] = [nums2[i], nums1[i]]; // Swap to make nums2[n-1] the max\n                operations++;\n            } else if (nums2[i] === maxNums2 && nums1[i] < nums1[nums1.length - 1]) {\n                [nums1[i], nums2[i]] = [nums2[i], nums1[i]]; // Swap to make nums1[n-1] the max\n                operations++;\n            }\n            if (nums1[nums1.length - 1] === Math.max(...nums1) && nums2[nums2.length - 1] === Math.max(...nums2)) {\n                return operations; // Both conditions satisfied\n            }\n        }\n    }\n    // Final check to confirm if both conditions are met\n    if (nums1[nums1.length - 1] !== Math.max(...nums1) || nums2[nums2.length - 1] !== Math.max(...nums2)) {\n        return -1; // Not possible to satisfy both conditions\n    }\n    return operations;\n}"
}