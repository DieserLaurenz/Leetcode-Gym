{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54536000,
    "question_id": "3190",
    "elapsed_time": 110,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "expected_output": "2",
    "task_finish_time": 1707932324291,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 121,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1175330869",
    "input_formatted": "[2,3,4,5,9], [8,8,4,4,4]",
    "input": "[2,3,4,5,9]\n[8,8,4,4,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(nums1: number[], nums2: number[]): number {\n    // Initial conditions check\n    if (nums1[nums1.length - 1] === Math.max(...nums1) && nums2[nums2.length - 1] === Math.max(...nums2)) {\n        return 0; // No operations needed\n    }\n\n    let operations = 0;\n    const n = nums1.length;\n    let max1 = Math.max(...nums1);\n    let max2 = Math.max(...nums2);\n\n    // Perform operations\n    for (let i = 0; i < n; i++) {\n        if (nums1[i] !== nums2[i]) {\n            let potentialMax1 = nums1[n - 1] === max1 ? max1 : Math.max(max1, nums2[i]);\n            let potentialMax2 = nums2[n - 1] === max2 ? max2 : Math.max(max2, nums1[i]);\n            if (potentialMax1 > max1 || potentialMax2 > max2) {\n                [nums1[i], nums2[i]] = [nums2[i], nums1[i]];\n                operations++;\n                max1 = Math.max(...nums1);\n                max2 = Math.max(...nums2);\n                if (nums1[n - 1] === max1 && nums2[n - 1] === max2) {\n                    return operations; // Both conditions are satisfied\n                }\n            }\n        }\n    }\n\n    // Final check after attempting swaps\n    if (nums1[n - 1] === Math.max(...nums1) && nums2[n - 1] === Math.max(...nums2)) {\n        return operations;\n    }\n\n    return -1; // If conditions cannot be satisfied\n}"
}