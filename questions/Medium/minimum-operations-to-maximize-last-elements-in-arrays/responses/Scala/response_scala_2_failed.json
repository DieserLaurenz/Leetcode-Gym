{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59172000,
    "question_id": "3190",
    "elapsed_time": 902,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940852902,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 465,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1175441491",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minOperations(nums1: Array[Int], nums2: Array[Int]): Int = {\n        // Initial checks for the already satisfied conditions\n        if (nums1.last == nums1.max && nums2.last == nums2.max) return 0\n\n        var operations = 0\n        val n = nums1.length\n\n        // Arrays to keep track of swapped indices to avoid double swapping\n        val swappedIndices = scala.collection.mutable.Set[Int]()\n\n        // Try to make nums1[n-1] and nums2[n-1] maximum by swapping\n        for (i <- 0 until n) {\n            if (nums1(i) > nums2(i) && (nums1(i) > nums1(n - 1) || nums2(i) > nums2(n - 1))) {\n                if (!swappedIndices.contains(i)) {\n                    val temp = nums1(i)\n                    nums1(i) = nums2(i)\n                    nums2(i) = temp\n                    operations += 1\n                    swappedIndices.add(i)\n                }\n            }\n        }\n\n        // Check if the conditions are satisfied after swapping\n        if (nums1(n - 1) != nums1.max || nums2(n - 1) != nums2.max) {\n            // If not, try to correct it by additional swaps if possible\n            for (i <- 0 until n) {\n                if (nums2(i) > nums1(i) && (nums2(i) > nums2(n - 1) || nums1(i) > nums1(n - 1))) {\n                    if (!swappedIndices.contains(i)) {\n                        val temp = nums1(i)\n                        nums1(i) = nums2(i)\n                        nums2(i) = temp\n                        operations += 1\n                        swappedIndices.add(i)\n                    }\n                }\n            }\n        }\n\n        // Final check to see if conditions are met\n        if (nums1(n - 1) == nums1.max && nums2(n - 1) == nums2.max) operations else -1\n    }\n}"
}