{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6600000,
    "question_id": "3190",
    "elapsed_time": 70,
    "compare_result": "001110111111101111111100111101010111111100100001011110101011100110000011000001010011010101000000001100011101100110001000001100000001000010000000001010101000010011100001000011000000011100011000010001000010010000001000000000000000000100110000010000000000100010000001010000100111001101110110001000000100000000000000011000000100000010000000000000000000000100000000000100001000000000010100000110000100001000001001000001000001001001000010100100000000000011110000000100010000000000000000000000000010000000000000000000000000000000000000000000000100000000100000001001100000000000000010000000000000000100000001010000000000000000100000000010000001100000001000100000011111111010111110000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940332853,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 167,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175436087",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(nums1 []int, nums2 []int) int {\n    n := len(nums1)\n    opCount := 0\n\n    // Condition to check if already in desired state\n    if nums1[n-1] == max(nums1) && nums2[n-1] == max(nums2) {\n        return 0\n    }\n\n    // Perform operations\n    for i := 0; i < n; i++ {\n        if nums1[i] != nums1[n-1] && nums2[i] != nums2[n-1] {\n            if nums1[i] == max(nums2) || nums2[i] == max(nums1) {\n                nums1[i], nums2[i] = nums2[i], nums1[i]\n                opCount++\n                if nums1[n-1] == max(nums1) && nums2[n-1] == max(nums2) {\n                    return opCount\n                }\n            }\n        }\n    }\n\n    // Final check after all possible swaps\n    if nums1[n-1] == max(nums1) && nums2[n-1] == max(nums2) {\n        return opCount\n    }\n\n    return -1\n}\n\nfunc max(nums []int) int {\n    maxVal := nums[0]\n    for _, num := range nums {\n        if num > maxVal {\n            maxVal = num\n        }\n    }\n    return maxVal\n}"
}