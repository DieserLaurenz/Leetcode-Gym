{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6548000,
    "question_id": "3190",
    "elapsed_time": 48,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940382718,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 131,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175436629",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(nums1 []int, nums2 []int) int {\n    // Swap to ensure the last element of each list is the maximum of its list\n    n := len(nums1)\n    max1, max2 := nums1[n-1], nums2[n-1]\n    opCount := 0\n\n    for i := 0; i < n; i++ {\n        if nums1[i] > max1 {\n            max1 = nums1[i]\n        }\n        if nums2[i] > max2 {\n            max2 = nums2[i]\n        }\n    }\n\n    for i := 0; i < n; i++ {\n        if nums1[n-1] != max1 && nums1[i] == max1 {\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n            opCount++\n            break // Only one swap needed for nums1\n        }\n    }\n\n    for i := 0; i < n; i++ {\n        if nums2[n-1] != max2 && nums2[i] == max2 {\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n            opCount++\n            break // Only one swap needed for nums2\n        }\n    }\n\n    if nums1[n-1] != max(nums1) || nums2[n-1] != max(nums2) {\n        return -1\n    }\n\n    return opCount\n}\n\nfunc max(nums []int) int {\n    maxVal := nums[0]\n    for _, num := range nums {\n        if num > maxVal {\n            maxVal = num\n        }\n    }\n    return maxVal\n}"
}