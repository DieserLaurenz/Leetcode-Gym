{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6668000,
    "question_id": "3190",
    "elapsed_time": 36,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940423297,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 131,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1175437088",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(nums1 []int, nums2 []int) int {\n    swaps := 0\n    maxIndex1, maxIndex2 := 0, 0\n\n    // Find indexes of maximum values in nums1 and nums2\n    for i, val := range nums1 {\n        if val > nums1[maxIndex1] {\n            maxIndex1 = i\n        }\n    }\n    for i, val := range nums2 {\n        if val > nums2[maxIndex2] {\n            maxIndex2 = i\n        }\n    }\n\n    // Swap to make nums1[n-1] the maximum of nums1 if it's not already\n    if nums1[len(nums1)-1] < nums1[maxIndex1] {\n        nums1[maxIndex1], nums2[maxIndex1] = nums2[maxIndex1], nums1[maxIndex1]\n        swaps++\n    }\n\n    // Swap to make nums2[n-1] the maximum of nums2 if it's not already\n    if nums2[len(nums2)-1] < nums2[maxIndex2] {\n        nums1[maxIndex2], nums2[maxIndex2] = nums2[maxIndex2], nums1[maxIndex2]\n        swaps++\n    }\n\n    // After swapping, check if the conditions are satisfied\n    if nums1[len(nums1)-1] != maxVal(nums1) || nums2[len(nums2)-1] != maxVal(nums2) {\n        return -1 // It's impossible to satisfy the conditions\n    }\n    return swaps\n}\n\nfunc maxVal(nums []int) int {\n    max := nums[0]\n    for _, v := range nums {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}"
}