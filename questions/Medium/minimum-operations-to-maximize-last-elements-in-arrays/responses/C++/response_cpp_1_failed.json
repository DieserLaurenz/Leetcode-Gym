{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45960000,
    "question_id": "3190",
    "elapsed_time": 50,
    "compare_result": "000100111011101111111000100001000111111000000001000110100000100100000000000001000011010101000000000000001101000100001000000100000001000000000000000000100000010001100001000001000000001100001000000000000010010000001000000000000000000100010000000000000000100010000001000000000110001100100100000000000000000000000000010000000100000010000000000000000000000100000000000100001000000000000100000010000000000000000000000000000001001001000000100100000000000000100000000000010000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000010000000000000000100000000010000000000000000000000000000000001000000001000000000011011100010010010000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707928466998,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 93,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175272140",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int minOperations(std::vector<int>& nums1, std::vector<int>& nums2) {\n        // Find the maximum elements in both arrays.\n        int max1 = *std::max_element(nums1.begin(), nums1.end());\n        int max2 = *std::max_element(nums2.begin(), nums2.end());\n\n        // Check if swapping is needed for the last elements to become maximum.\n        if (nums1.back() == max1 && nums2.back() == max2) {\n            // No operation needed as both last elements are already maximum.\n            return 0;\n        } else if ((nums1.back() != max1 && nums2.back() == max2 && max1 > nums2.back()) ||\n                   (nums2.back() != max2 && nums1.back() == max1 && max2 > nums1.back())) {\n            // One operation needed if swapping the non-maximum last element makes both maximum.\n            return 1;\n        } else if (nums1.back() != max1 && nums2.back() != max2) {\n            // Check if swapping can make both last elements maximum.\n            if (max1 == *std::max_element(nums2.begin(), nums2.end()) && \n                max2 == *std::max_element(nums1.begin(), nums1.end())) {\n                return 1; // One operation is enough if each max can be swapped.\n            }\n        }\n        // If none of the above conditions are met, it's impossible to satisfy both conditions.\n        return -1;\n    }\n};"
}