{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45888000,
    "question_id": "3190",
    "elapsed_time": 104,
    "compare_result": "011111111111111111111111111111110111111110100101011110101111111110111111111001010011110101011000101111111101100111011110111111111111000011011101111111101110010111111111101111101111111111011011111011010110111000111111110111011110110110110011111100111111100110000101010011101111011101111110111011001111010111011011011011100111001111010111011000010111100110101011101110101001111110010110101111110100101101101101110101110011001111010110110111010111100011110100010100110010111101110010010111111010110111100010101010110000001001000000110110011101001011110010011111101111111101110011111001010010100110110101111000001001110010101111100010110111111110011011111101011111111010111111110100010100110110100000001000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707928499762,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 465,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175272621",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int minOperations(std::vector<int>& nums1, std::vector<int>& nums2) {\n        int n = nums1.size();\n        int ops = 0;\n        \n        // Swap elements to make the last elements of nums1 and nums2 their respective maxima\n        if (nums1[n - 1] < *max_element(nums1.begin(), nums1.end()) || nums2[n - 1] < *max_element(nums2.begin(), nums2.end())) {\n            for (int i = 0; i < n; ++i) {\n                if ((nums1[i] > nums1[n - 1] && nums2[i] < nums2[n - 1]) || (nums2[i] > nums2[n - 1] && nums1[i] < nums1[n - 1])) {\n                    std::swap(nums1[i], nums2[i]);\n                    ops++;\n                    if (nums1[n - 1] == *max_element(nums1.begin(), nums1.end()) && nums2[n - 1] == *max_element(nums2.begin(), nums2.end()))\n                        return ops;\n                }\n            }\n            return -1; // If conditions can't be satisfied after trying swaps\n        }\n\n        return ops; // No swaps needed, conditions already satisfied\n    }\n};"
}