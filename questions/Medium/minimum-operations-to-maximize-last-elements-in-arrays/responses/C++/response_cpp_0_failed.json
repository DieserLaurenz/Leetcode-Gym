{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45924000,
    "question_id": "3190",
    "elapsed_time": 50,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707928426114,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 465,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1175271532",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int minOperations(std::vector<int>& nums1, std::vector<int>& nums2) {\n        int n = nums1.size();\n        if (nums1[n - 1] == *std::max_element(nums1.begin(), nums1.end()) &&\n            nums2[n - 1] == *std::max_element(nums2.begin(), nums2.end()))\n            return 0; // No operations needed\n\n        int ops = 0;\n        for (int i = 0; i < n - 1; ++i) {\n            if (nums1[i] > nums1[n - 1] || nums2[i] > nums2[n - 1]) {\n                if (nums1[i] > nums2[i] && nums1[i] > nums1[n - 1] && nums2[i] < nums2[n - 1]) {\n                    std::swap(nums1[i], nums2[i]);\n                    ops++;\n                } else if (nums2[i] > nums1[i] && nums2[i] > nums2[n - 1] && nums1[i] < nums1[n - 1]) {\n                    std::swap(nums1[i], nums2[i]);\n                    ops++;\n                }\n            }\n        }\n\n        // Check if the conditions are satisfied after the operations\n        if (nums1[n - 1] == *std::max_element(nums1.begin(), nums1.end()) &&\n            nums2[n - 1] == *std::max_element(nums2.begin(), nums2.end()))\n            return ops;\n\n        // If conditions for nums1 and nums2 max are not satisfied simultaneously\n        if (nums1[n - 1] < *std::max_element(nums1.begin(), nums1.end()) ||\n            nums2[n - 1] < *std::max_element(nums2.begin(), nums2.end()))\n            return -1;\n\n        return ops;\n    }\n};"
}