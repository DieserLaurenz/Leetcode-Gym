{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 214400000,
    "question_id": "3190",
    "elapsed_time": 272,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940652363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 76,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1175439518",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums1\n# @param {Integer[]} nums2\n# @return {Integer}\ndef min_operations(nums1, nums2)\n  n = nums1.length\n  swap_needed1 = swap_needed2 = 0\n\n  # Check if nums1[n-1] is already the max in nums1\n  max1 = nums1.max\n  swap_needed1 += 1 if nums1[n-1] != max1 && nums2[n-1] == max1\n\n  # Check if nums2[n-1] is already the max in nums2\n  max2 = nums2.max\n  swap_needed2 += 1 if nums2[n-1] != max2 && nums1[n-1] == max2\n\n  if nums1[n-1] != max1 && nums2[n-1] != max2\n    if nums1[n-1] < max2 && nums2[n-1] < max1\n      return 1 # Swap the last elements to satisfy both conditions\n    else\n      return -1 # Impossible to satisfy both conditions\n    end\n  end\n\n  # No swaps needed if both are already in their correct positions\n  [swap_needed1, swap_needed2].max\nend"
}