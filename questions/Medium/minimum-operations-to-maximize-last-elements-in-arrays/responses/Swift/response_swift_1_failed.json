{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15668000,
    "question_id": "3190",
    "elapsed_time": 93,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707939873761,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 118,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1175431036",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minOperations(_ nums1: [Int], _ nums2: [Int]) -> Int {\n        let n = nums1.count\n        var ops = 0\n        \n        var nums1 = nums1\n        var nums2 = nums2\n        \n        // Ensure last elements are maximums\n        let maxNum1 = nums1.max()!\n        let maxNum2 = nums2.max()!\n        \n        if nums1[n-1] != maxNum1 || nums2[n-1] != maxNum2 {\n            for i in 0..<n {\n                if nums1[i] == maxNum1 && nums2[i] == maxNum2 {\n                    // Swap to make the last elements max if they are not already\n                    (nums1[i], nums2[i]) = (nums2[i], nums1[i])\n                    ops += 1\n                    if nums1[n-1] == maxNum1 && nums2[n-1] == maxNum2 {\n                        return ops\n                    }\n                }\n            }\n            // Check after all possible swaps\n            if nums1[n-1] == maxNum1 && nums2[n-1] == maxNum2 {\n                return ops\n            } else {\n                // If still not satisfied, then it's not possible\n                return -1\n            }\n        }\n        \n        // If initial arrays already satisfy the condition\n        return 0\n    }\n}"
}