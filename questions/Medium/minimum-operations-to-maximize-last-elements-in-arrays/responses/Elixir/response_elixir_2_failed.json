{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 75556000,
    "question_id": "3190",
    "elapsed_time": 1076,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,5,4]\n[2,5,3]",
    "expected_output": "-1",
    "task_finish_time": 1707941472289,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 77,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1175447509",
    "input_formatted": "[1,5,4], [2,5,3]",
    "input": "[1,5,4]\n[2,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_operations(nums1 :: [integer], nums2 :: [integer]) :: integer\n  def min_operations(nums1, nums2) do\n    swap_if_needed(nums1, nums2, Enum.count(nums1) - 1, 0)\n  end\n\n  defp swap_if_needed(nums1, nums2, -1, count), do: count\n  defp swap_if_needed(nums1, nums2, index, count) do\n    max1 = Enum.max(nums1)\n    max2 = Enum.max(nums2)\n    elem1 = Enum.at(nums1, index)\n    elem2 = Enum.at(nums2, index)\n\n    cond do\n      max1 == List.last(nums1) and max2 == List.last(nums2) -> count\n      elem1 == max1 and elem2 == max2 -> swap_if_needed(nums1, nums2, index - 1, count)\n      true ->\n        swapped_nums1 = List.replace_at(nums1, index, elem2)\n        swapped_nums2 = List.replace_at(nums2, index, elem1)\n        swap_if_needed(swapped_nums1, swapped_nums2, index - 1, count + 1)\n    end\n  end\nend"
}