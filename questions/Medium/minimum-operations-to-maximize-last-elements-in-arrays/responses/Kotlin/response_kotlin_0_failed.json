{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41552000,
    "question_id": "3190",
    "elapsed_time": 465,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707939985831,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 160,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175432331",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(nums1: IntArray, nums2: IntArray): Int {\n        val n = nums1.size\n        var operations = 0\n\n        if (nums1[n - 1] == nums1.maxOrNull() && nums2[n - 1] == nums2.maxOrNull()) {\n            return 0\n        }\n\n        val swaps = mutableListOf<Pair<Int, Int>>()\n\n        for (i in 0 until n) {\n            if ((nums1[i] > nums1[n - 1] && nums2[i] <= nums2[n - 1]) || (nums2[i] > nums2[n - 1] && nums1[i] <= nums1[n - 1])) {\n                swaps.add(Pair(nums1[i] - nums1[n - 1], nums2[i] - nums2[n - 1]))\n            }\n        }\n\n        val sortedSwaps = swaps.sortedWith(compareBy({ -Math.abs(it.first) }, { -Math.abs(it.second) }))\n\n        for (swap in sortedSwaps) {\n            if (nums1[n - 1] != nums1.maxOrNull() || nums2[n - 1] != nums2.maxOrNull()) {\n                val index = nums1.indexOfFirst { it - nums1[n - 1] == swap.first }\n                if (index != -1) {\n                    val temp = nums1[index]\n                    nums1[index] = nums2[index]\n                    nums2[index] = temp\n                    operations++\n                }\n            } else break\n        }\n\n        return if (nums1[n - 1] == nums1.maxOrNull() && nums2[n - 1] == nums2.maxOrNull()) operations else -1\n    }\n}"
}