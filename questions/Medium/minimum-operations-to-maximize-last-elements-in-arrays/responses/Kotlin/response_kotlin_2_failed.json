{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40916000,
    "question_id": "3190",
    "elapsed_time": 515,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940070487,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 171,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175433305",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(nums1: IntArray, nums2: IntArray): Int {\n        // Find max values of both arrays\n        val max1 = nums1.maxOrNull()!!\n        val max2 = nums2.maxOrNull()!!\n\n        // Initial conditions are already met\n        if (nums1.last() == max1 && nums2.last() == max2) return 0\n\n        var operations = 0\n\n        // Check if swapping is necessary and beneficial\n        for (i in nums1.indices) {\n            val isNum1MaxNotInPlace = nums1.last() != max1 && nums1[i] == max1\n            val isNum2MaxNotInPlace = nums2.last() != max2 && nums2[i] == max2\n\n            if (isNum1MaxNotInPlace || isNum2MaxNotInPlace) {\n                // Swap the elements\n                val temp = nums1[i]\n                nums1[i] = nums2[i]\n                nums2[i] = temp\n                operations++\n\n                // Check if conditions are met after swap\n                if (nums1.last() == nums1.maxOrNull()!! && nums2.last() == nums2.maxOrNull()!!) {\n                    return operations\n                }\n            }\n        }\n\n        // If after all possible swaps, the conditions are not met\n        return -1\n    }\n}"
}