{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41264000,
    "question_id": "3190",
    "elapsed_time": 461,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707940029514,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 465,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1175432841",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(nums1: IntArray, nums2: IntArray): Int {\n        val n = nums1.size\n        var opCount = 0\n\n        // Ensure the last elements are maximum in their respective arrays without any operation\n        val maxNum1 = nums1.maxOrNull() ?: return -1\n        val maxNum2 = nums2.maxOrNull() ?: return -1\n\n        if (nums1[n - 1] == maxNum1 && nums2[n - 1] == maxNum2) {\n            return 0 // No operations needed\n        }\n\n        // Check if swapping is needed and beneficial\n        for (i in 0 until n) {\n            if ((nums1[i] != maxNum1 || nums2[i] != maxNum2) && \n                ((nums1[i] > nums1[n - 1] && nums2[i] < nums2[n - 1]) || (nums2[i] > nums2[n - 1] && nums1[i] < nums1[n - 1]))) {\n                // Perform swap\n                val temp = nums1[i]\n                nums1[i] = nums2[i]\n                nums2[i] = temp\n                opCount++\n\n                // Check if conditions are satisfied after swap\n                if (nums1[n - 1] == nums1.maxOrNull() && nums2[n - 1] == nums2.maxOrNull()) {\n                    return opCount\n                }\n            }\n        }\n\n        // After all possible beneficial swaps, check if the conditions are met\n        if (nums1[n - 1] == nums1.maxOrNull() && nums2[n - 1] == nums2.maxOrNull()) {\n            return opCount\n        }\n\n        // If conditions cannot be met\n        return -1\n    }\n}"
}