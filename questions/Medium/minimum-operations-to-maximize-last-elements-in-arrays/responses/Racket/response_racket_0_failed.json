{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 16: Char 46: read-syntax: expected `)` to close `(` on line 16, found instead `]`",
    "full_compile_error": "Line 16: Char 46: read-syntax: expected `)` to close `(` on line 16, found instead `]`\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3190",
    "task_finish_time": 1707941088978,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175443771",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  (let ([n (length nums1)])\n    (let loop ([i 0] [swaps 0] [max1 (apply max nums1)] [max2 (apply max nums2)])\n      (cond\n        [(= i n) \n         (if (and (= (list-ref nums1 (- n 1)) max1) (= (list-ref nums2 (- n 1)) max2))\n             swaps\n             -1)]\n        [(and (= (list-ref nums1 i) max1) (= (list-ref nums2 i) max2))\n         (loop (+ i 1) swaps max1 max2)]\n        [(or (= (list-ref nums1 i) max1) (= (list-ref nums2 i) max2))\n         (if (or (= (list-ref nums1 i) max2) (= (list-ref nums2 i) max1))\n             (loop (+ i 1) (+ swaps 1) max1 max2)\n             -1)]\n        [else (loop (+ i 1) swaps max1 max2)]]\n      )))"
}