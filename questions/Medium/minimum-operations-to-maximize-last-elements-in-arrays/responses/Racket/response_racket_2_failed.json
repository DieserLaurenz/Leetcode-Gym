{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 127660000,
    "question_id": "3190",
    "elapsed_time": 315,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707941158638,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 81,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175444483",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  (let ([max1 (apply max nums1)]\n        [max2 (apply max nums2)])\n    (let ([need-swap1 (not (= (last nums1) max1))]\n          [need-swap2 (not (= (last nums2) max2))])\n      (cond\n        [(and need-swap1 need-swap2) \n         (if (or (= max1 (last nums2)) (= max2 (last nums1))) 1 2)]\n        [need-swap1 (if (= max1 (last nums2)) 1 -1)]\n        [need-swap2 (if (= max2 (last nums1)) 1 -1)]\n        [else 0]))))"
}