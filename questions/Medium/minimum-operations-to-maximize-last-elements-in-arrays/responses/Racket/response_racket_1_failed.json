{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128164000,
    "question_id": "3190",
    "elapsed_time": 353,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,7]\n[4,5,3]",
    "expected_output": "1",
    "task_finish_time": 1707941124901,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 91,
    "total_testcases": 702,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1175444136",
    "input_formatted": "[1,2,7], [4,5,3]",
    "input": "[1,2,7]\n[4,5,3]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums1 nums2)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n  (let ([n (length nums1)])\n    (if (and (= (list-ref nums1 (- n 1)) (apply max nums1))\n             (= (list-ref nums2 (- n 1)) (apply max nums2)))\n        0\n        (let* ([max1 (apply max nums1)]\n               [max2 (apply max nums2)]\n               [pos-max1 (for/or ([i (in-range n)]) (if (= (list-ref nums1 i) max1) i #f))]\n               [pos-max2 (for/or ([i (in-range n)]) (if (= (list-ref nums2 i) max2) i #f))])\n          (cond\n            [(and pos-max1 pos-max2)\n             (if (= pos-max1 pos-max2) 1 2)]\n            [else -1])))))"
}