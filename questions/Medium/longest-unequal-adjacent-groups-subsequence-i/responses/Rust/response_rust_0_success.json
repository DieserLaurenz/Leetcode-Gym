{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "8 ms",
    "memory": 2652000,
    "question_id": "3143",
    "elapsed_time": 20,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707526537684,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 384,
    "total_testcases": 384,
    "runtime_percentile": 9.090900000000005,
    "status_memory": "2.7 MB",
    "memory_percentile": 9.090899999999998,
    "pretty_lang": "Rust",
    "submission_id": "1171037403",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn get_words_in_longest_subsequence(n: i32, words: Vec<String>, groups: Vec<i32>) -> Vec<String> {\n        let mut dp = vec![vec![vec![]; 2]; n as usize + 1];\n        for i in 0..n as usize {\n            for j in 0..2 {\n                if i > 0 {\n                    if groups[i] == j as i32 && dp[i][j].len() < dp[i][1 - j].len() + 1 {\n                        dp[i + 1][j] = dp[i][1 - j].clone();\n                        dp[i + 1][j].push(words[i].clone());\n                    } else {\n                        dp[i + 1][j] = dp[i][j].clone();\n                    }\n                } else {\n                    if groups[i] == j as i32 {\n                        dp[i + 1][j].push(words[i].clone());\n                    }\n                }\n            }\n        }\n        if dp[n as usize][0].len() > dp[n as usize][1].len() {\n            dp[n as usize][0].clone()\n        } else {\n            dp[n as usize][1].clone()\n        }\n    }\n}"
}