{
    "status_code": 10,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "159 ms",
    "memory": 101044000,
    "question_id": "3143",
    "elapsed_time": 239,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707526590987,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 384,
    "total_testcases": 384,
    "runtime_percentile": 100,
    "status_memory": "101 MB",
    "memory_percentile": 100,
    "pretty_lang": "Racket",
    "submission_id": "1171037739",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "(define/contract (get-words-in-longest-subsequence n words groups)\n  (-> exact-integer? (listof string?) (listof exact-integer?) (listof string?))\n  (let loop ((i 0) (last-group -1) (selected-indices '()))\n    (if (= i n)\n        (map (lambda (idx) (list-ref words idx)) selected-indices)\n        (if (and (> i 0) (= (list-ref groups i) last-group))\n            (loop (+ i 1) last-group selected-indices)\n            (loop (+ i 1) (list-ref groups i) (append selected-indices (list i))))))\n  )"
}