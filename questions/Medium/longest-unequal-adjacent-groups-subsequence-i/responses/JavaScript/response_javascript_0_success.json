{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "63 ms",
    "memory": 52412000,
    "question_id": "3143",
    "elapsed_time": 74,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707525975360,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 384,
    "total_testcases": 384,
    "runtime_percentile": 65.51699999999997,
    "status_memory": "52.4 MB",
    "memory_percentile": 6.895899999999955,
    "pretty_lang": "JavaScript",
    "submission_id": "1171034378",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {string[]} words\n * @param {number[]} groups\n * @return {string[]}\n */\nvar getWordsInLongestSubsequence = function(n, words, groups) {\n    let result = [];\n    let lastGroup = -1; // Initialize to a value that doesn't match any group\n    \n    for (let i = 0; i < n; i++) {\n        if (groups[i] !== lastGroup) {\n            result.push(words[i]);\n            lastGroup = groups[i];\n        }\n    }\n    \n    return result;\n};"
}