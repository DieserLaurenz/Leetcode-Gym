{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (ArgumentError) the Access module does not support accessing lists by index, got: 1",
    "full_runtime_error": "Line 5: ** (ArgumentError) the Access module does not support accessing lists by index, got: 1\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:5: anonymous fn/3 in Solution.get_words_in_longest_subsequence/3\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:4: Solution.get_words_in_longest_subsequence/3\n    solution.ex:29: Driver.consume_test_cases/2\n    solution.ex:13: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72880000,
    "question_id": "3143",
    "elapsed_time": 316,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "3\n[\"e\",\"a\",\"b\"]\n[0,0,1]",
    "expected_output": "[\"e\",\"b\"]",
    "task_finish_time": 1707526936536,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 384,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1171039593",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec get_words_in_longest_subsequence(n :: integer, words :: [String.t], groups :: [integer]) :: [String.t]\n  def get_words_in_longest_subsequence(n, words, groups) do\n    indices = Enum.reduce(1..n-1, [0], fn i, acc ->\n      if groups[i] != groups[Enum.at(acc, -1)], do: acc ++ [i], else: acc\n    end)\n    Enum.map(indices, &Enum.at(words, &1))\n  end\nend"
}