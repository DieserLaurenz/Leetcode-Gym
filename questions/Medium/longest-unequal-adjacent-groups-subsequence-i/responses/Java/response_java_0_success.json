{
    "status_code": 10,
    "lang": "java",
    "run_success": true,
    "status_runtime": "1 ms",
    "memory": 44800000,
    "display_runtime": "1",
    "question_id": "3143",
    "elapsed_time": 169,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707525824657,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 384,
    "total_testcases": 384,
    "runtime_percentile": 96.2733,
    "status_memory": "44.8 MB",
    "memory_percentile": 67.08060000000002,
    "pretty_lang": "Java",
    "submission_id": "1171033571",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    public List<String> getWordsInLongestSubsequence(int n, String[] words, int[] groups) {\n        List<String> result = new ArrayList<>();\n        if (n == 0) return result;\n        int prevGroup = -1; // To ensure the first comparison is always true\n        for (int i = 0; i < n; i++) {\n            if (groups[i] != prevGroup) {\n                result.add(words[i]);\n                prevGroup = groups[i];\n            }\n        }\n        return result;\n    }\n}"
}