{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "73 ms",
    "memory": 53640000,
    "question_id": "3143",
    "elapsed_time": 109,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707526132675,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 384,
    "total_testcases": 384,
    "runtime_percentile": 25.000100000000018,
    "status_memory": "53.6 MB",
    "memory_percentile": 8.333500000000015,
    "pretty_lang": "TypeScript",
    "submission_id": "1171035229",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function getWordsInLongestSubsequence(n: number, words: string[], groups: number[]): string[] {\n    let dp = new Array(n).fill(1);\n    let prev = new Array(n).fill(-1);\n    let lastIndex = 0;\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (groups[j] !== groups[i] && dp[i] < dp[j] + 1) {\n                dp[i] = dp[j] + 1;\n                prev[i] = j;\n            }\n        }\n\n        if (dp[i] > dp[lastIndex]) {\n            lastIndex = i;\n        }\n    }\n\n    let result: string[] = [];\n    while (lastIndex !== -1) {\n        result.unshift(words[lastIndex]);\n        lastIndex = prev[lastIndex];\n    }\n\n    return result;\n}"
}