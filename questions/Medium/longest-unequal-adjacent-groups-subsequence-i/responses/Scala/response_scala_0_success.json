{
    "status_code": 10,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "586 ms",
    "memory": 59464000,
    "question_id": "3143",
    "elapsed_time": 613,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707526474932,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 384,
    "total_testcases": 384,
    "runtime_percentile": 100,
    "status_memory": "59.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Scala",
    "submission_id": "1171037058",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "object Solution {\n    def getWordsInLongestSubsequence(n: Int, words: Array[String], groups: Array[Int]): List[String] = {\n        var result = List[String]()\n        var i = 0\n        while (i < n - 1) {\n            result = result :+ words(i)\n            while (i < n - 1 && groups(i) == groups(i + 1)) {\n                i += 1\n            }\n            i += 1\n        }\n        if (i == n - 1) result = result :+ words(n - 1)\n        result\n    }\n}"
}