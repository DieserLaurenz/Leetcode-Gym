{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 47: AttributeError: 'Solution' object has no attribute 'getLongestSubsequence'",
    "full_runtime_error": "AttributeError: 'Solution' object has no attribute 'getLongestSubsequence'\n    ret = Solution().getLongestSubsequence(param_1, param_2)\nLine 47 in _driver (Solution.py)\n    _driver()\nLine 57 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11788000,
    "question_id": "3143",
    "elapsed_time": 26,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"c\"]\n[0]",
    "expected_output": "[\"c\"]",
    "task_finish_time": 1708786380947,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 382,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184888156",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def getWordsInLongestSubsequence(self, n, words, groups):\n        \"\"\"\n        :type n: int\n        :type words: List[str]\n        :type groups: List[int]\n        :rtype: List[str]\n        \"\"\"\n        if n == 0:\n            return []\n        elif n == 1:\n            return [words[0]]\n        \n        # Initialize variables to store the current best sequence and the last group encountered\n        best_sequence = [words[0]]\n        last_group = groups[0]\n        \n        for i in range(1, n):\n            if groups[i] != last_group:\n                best_sequence.append(words[i])\n                last_group = groups[i]\n        \n        return best_sequence"
}