{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 45: AttributeError: 'Solution' object has no attribute 'getLongestSubsequence'",
    "full_runtime_error": "AttributeError: 'Solution' object has no attribute 'getLongestSubsequence'\n    ret = Solution().getLongestSubsequence(param_1, param_2)\nLine 45 in _driver (Solution.py)\n    _driver()\nLine 55 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11596000,
    "question_id": "3143",
    "elapsed_time": 26,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"c\"]\n[0]",
    "expected_output": "[\"c\"]",
    "task_finish_time": 1708786356317,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 382,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184887840",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def getWordsInLongestSubsequence(self, n, words, groups):\n        \"\"\"\n        :type n: int\n        :type words: List[str]\n        :type groups: List[int]\n        :rtype: List[str]\n        \"\"\"\n        dp = [[[], []] for _ in range(n + 1)]  # dp[i][0] or dp[i][1] stores the longest subsequence ending at i with group 0 or 1\n        \n        for i in range(n):\n            if groups[i] == 0:\n                dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + [words[i]], key=len)\n                dp[i][1] = dp[i - 1][1]\n            else:\n                dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + [words[i]], key=len)\n                dp[i][0] = dp[i - 1][0]\n        \n        # Find the longest subsequence among all possibilities\n        longest_subsequence = max(dp[n - 1][0], dp[n - 1][1], key=len)\n        return longest_subsequence"
}