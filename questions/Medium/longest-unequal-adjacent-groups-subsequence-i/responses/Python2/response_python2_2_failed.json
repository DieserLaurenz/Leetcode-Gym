{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 79: AttributeError: 'Solution' object has no attribute 'getLongestSubsequence'",
    "full_runtime_error": "AttributeError: 'Solution' object has no attribute 'getLongestSubsequence'\n    ret = Solution().getLongestSubsequence(param_1, param_2)\nLine 79 in _driver (Solution.py)\n    _driver()\nLine 89 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11544000,
    "question_id": "3143",
    "elapsed_time": 27,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"c\"]\n[0]",
    "expected_output": "[\"c\"]",
    "task_finish_time": 1708786429794,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 382,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1184888705",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def getWordsInLongestSubsequence(self, n, words, groups):\n        \"\"\"\n        :type n: int\n        :type words: List[str]\n        :type groups: List[int]\n        :rtype: List[str]\n        \"\"\"\n        # Initialize the dynamic programming table\n        dp = [[-1 for _ in range(2)] for _ in range(n)]\n        parent = [[None for _ in range(2)] for _ in range(n)]\n        \n        # Function to find the maximum length and the last index of the longest subsequence\n        def find_max_length_and_last_index():\n            max_length = 0\n            last_index = -1\n            last_group = -1\n            for i in range(n):\n                for group in range(2):\n                    if dp[i][group] > max_length:\n                        max_length = dp[i][group]\n                        last_index = i\n                        last_group = group\n            return max_length, last_index, last_group\n        \n        # Dynamic programming to fill the table\n        for i in range(n):\n            for group in range(2):\n                if groups[i] == group:\n                    if i == 0:\n                        dp[i][group] = 1\n                    else:\n                        if dp[i-1][1-group] > dp[i-1][group]:\n                            dp[i][group] = dp[i-1][1-group] + 1\n                            parent[i][group] = (i-1, 1-group)\n                        else:\n                            dp[i][group] = dp[i-1][group]\n                            if dp[i-1][group] != -1:\n                                parent[i][group] = (i-1, group)\n                else:\n                    dp[i][group] = dp[i-1][group]\n                    if dp[i-1][group] != -1:\n                        parent[i][group] = (i-1, group)\n        \n        # Backtrack to find the longest subsequence\n        _, last_index, last_group = find_max_length_and_last_index()\n        if last_index == -1:\n            return []\n        \n        sequence = []\n        while last_index is not None:\n            sequence.append(words[last_index])\n            last_index, last_group = parent[last_index][last_group]\n        \n        return sequence[::-1]"
}