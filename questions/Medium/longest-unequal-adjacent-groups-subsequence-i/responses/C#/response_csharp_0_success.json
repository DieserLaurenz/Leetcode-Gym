{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "112 ms",
    "memory": 56312000,
    "question_id": "3143",
    "elapsed_time": 177,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707525927192,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 384,
    "total_testcases": 384,
    "runtime_percentile": 85.7143,
    "status_memory": "56.3 MB",
    "memory_percentile": 14.28579999999999,
    "pretty_lang": "C#",
    "submission_id": "1171034133",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public IList<string> GetWordsInLongestSubsequence(int n, string[] words, int[] groups) {\n        List<string> result = new List<string>();\n        if (n == 0) return result;\n\n        int prevGroup = groups[0];\n        result.Add(words[0]);\n        \n        for (int i = 1; i < n; i++) {\n            if (groups[i] != prevGroup) {\n                result.Add(words[i]);\n                prevGroup = groups[i];\n            }\n        }\n        \n        return result;\n    }\n}"
}