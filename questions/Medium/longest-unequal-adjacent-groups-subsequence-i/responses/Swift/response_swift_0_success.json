{
    "status_code": 10,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "16 ms",
    "memory": 16108000,
    "question_id": "3143",
    "elapsed_time": 28,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1707526233567,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 384,
    "total_testcases": 384,
    "runtime_percentile": 100,
    "status_memory": "16.1 MB",
    "memory_percentile": 75.0,
    "pretty_lang": "Swift",
    "submission_id": "1171035757",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    func getWordsInLongestSubsequence(_ n: Int, _ words: [String], _ groups: [Int]) -> [String] {\n        var result = [String]()\n        var prevGroup = -1 // Initialize with a value that can't be in groups\n        for i in 0..<n {\n            if groups[i] != prevGroup {\n                result.append(words[i])\n                prevGroup = groups[i]\n            }\n        }\n        return result\n    }\n}"
}