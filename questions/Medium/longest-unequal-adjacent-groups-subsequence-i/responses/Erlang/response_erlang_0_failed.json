{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59680000,
    "question_id": "3143",
    "elapsed_time": 1312,
    "compare_result": "000100110111000000000000010010001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000",
    "code_output": "[\"e\"]",
    "std_output": "",
    "last_testcase": "3\n[\"e\",\"a\",\"b\"]\n[0,0,1]",
    "expected_output": "[\"e\",\"b\"]",
    "task_finish_time": 1707526646457,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 384,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1171038040",
    "input_formatted": "3, [\"e\",\"a\",\"b\"], [0,0,1]",
    "input": "3\n[\"e\",\"a\",\"b\"]\n[0,0,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec get_words_in_longest_subsequence(N :: integer(), Words :: [unicode:unicode_binary()], Groups :: [integer()]) -> [unicode:unicode_binary()].\nget_words_in_longest_subsequence(N, Words, Groups) ->\n    Subsequences = lists:foldl(\n        fun(Group, Acc) ->\n            case Acc of\n                [] -> [[Group]];\n                [H | T] = _Acc ->\n                    if\n                        Group =:= hd(H) -> Acc;\n                        true -> [[Group] | Acc]\n                    end\n            end\n        end,\n        [],\n        Groups\n    ),\n    MaxLength = lists:max([length(S) || S <- Subsequences]),\n    LongestSubsequences = [S || S <- Subsequences, length(S) == MaxLength],\n    [lists:nth(I, Words) || {I, _} <- lists:zip(lists:seq(1, N), Groups), lists:any(fun(S) -> lists:member(I, S) end, LongestSubsequences)]."
}