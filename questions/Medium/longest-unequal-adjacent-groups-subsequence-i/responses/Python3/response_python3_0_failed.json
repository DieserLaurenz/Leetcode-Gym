{
    "status_code": 15,
    "lang": "python3",
    "run_success": false,
    "runtime_error": "Line 46: AttributeError: 'Solution' object has no attribute 'getLongestSubsequence'. Did you mean: 'getWordsInLongestSubsequence'?",
    "full_runtime_error": "AttributeError: 'Solution' object has no attribute 'getLongestSubsequence'. Did you mean: 'getWordsInLongestSubsequence'?\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ret = Solution().getLongestSubsequence(param_1, param_2)\nLine 46 in _driver (Solution.py)\n    _driver()\nLine 57 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 16896000,
    "question_id": "3143",
    "elapsed_time": 51,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[\"c\"]\n[0]",
    "expected_output": "[\"c\"]",
    "task_finish_time": 1708786491649,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 382,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1184889421",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def getWordsInLongestSubsequence(self, n: int, words: List[str], groups: List[int]) -> List[str]:\n        dp = [[[], []] for _ in range(n + 1)] # dp[i][0] stores the longest subsequence ending with group 0, dp[i][1] with group 1\n        for i in range(1, n + 1):\n            if groups[i - 1] == 0:\n                if len(dp[i - 1][1]) > len(dp[i - 1][0]):\n                    dp[i][0] = dp[i - 1][1] + [words[i - 1]]\n                else:\n                    dp[i][0] = dp[i - 1][0] + [words[i - 1]]\n                dp[i][1] = dp[i - 1][1]\n            else:\n                if len(dp[i - 1][0]) > len(dp[i - 1][1]):\n                    dp[i][1] = dp[i - 1][0] + [words[i - 1]]\n                else:\n                    dp[i][1] = dp[i - 1][1] + [words[i - 1]]\n                dp[i][0] = dp[i - 1][0]\n        if len(dp[n][0]) > len(dp[n][1]):\n            return dp[n][0]\n        else:\n            return dp[n][1]"
}