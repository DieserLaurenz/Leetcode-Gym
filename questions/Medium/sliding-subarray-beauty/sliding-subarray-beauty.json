{
    "acRate": 32.17439091408683,
    "difficulty": "Medium",
    "freqBar": null,
    "frontendQuestionId": "2653",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Sliding Subarray Beauty",
    "titleSlug": "sliding-subarray-beauty",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Sliding Window",
            "id": "VG9waWNUYWdOb2RlOjU1ODIx",
            "slug": "sliding-window"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> getSubarrayBeauty(vector<int>& nums, int k, int x) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] getSubarrayBeauty(int[] nums, int k, int x) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def getSubarrayBeauty(self, nums, k, x):         \"\"\"         :type nums: List[int]         :type k: int         :type x: int         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def getSubarrayBeauty(self, nums: List[int], k: int, x: int) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* getSubarrayBeauty(int* nums, int numsSize, int k, int x, int* returnSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] GetSubarrayBeauty(int[] nums, int k, int x) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @param {number} k  * @param {number} x  * @return {number[]}  */ var getSubarrayBeauty = function(nums, k, x) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function getSubarrayBeauty(nums: number[], k: number, x: number): number[] {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @param Integer $k      * @param Integer $x      * @return Integer[]      */     function getSubarrayBeauty($nums, $k, $x) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func getSubarrayBeauty(_ nums: [Int], _ k: Int, _ x: Int) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun getSubarrayBeauty(nums: IntArray, k: Int, x: Int): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> getSubarrayBeauty(List<int> nums, int k, int x) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func getSubarrayBeauty(nums []int, k int, x int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @param {Integer} k # @param {Integer} x # @return {Integer[]} def get_subarray_beauty(nums, k, x)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def getSubarrayBeauty(nums: Array[Int], k: Int, x: Int): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn get_subarray_beauty(nums: Vec<i32>, k: i32, x: i32) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (get-subarray-beauty nums k x)   (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec get_subarray_beauty(Nums :: [integer()], K :: integer(), X :: integer()) -> [integer()]. get_subarray_beauty(Nums, K, X) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec get_subarray_beauty(nums :: [integer], k :: integer, x :: integer) :: [integer]   def get_subarray_beauty(nums, k, x) do    end end"
        }
    ],
    "content": "Given an integer array nums containing n integers, find the beauty of each subarray of size k. The beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers. Return an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array.   A subarray is a contiguous non-empty sequence of elements within an array.    Example 1:  Input: nums = [1,-1,-3,-2,3], k = 3, x = 2 Output: [-1,-2,-2] Explanation: There are 3 subarrays with size k = 3.  The first subarray is [1, -1, -3] and the 2nd smallest negative integer is -1. The second subarray is [-1, -3, -2] and the 2nd smallest negative integer is -2. The third subarray is [-3, -2, 3]and the 2nd smallest negative integer is -2. Example 2:  Input: nums = [-1,-2,-3,-4,-5], k = 2, x = 2 Output: [-1,-2,-3,-4] Explanation: There are 4 subarrays with size k = 2. For [-1, -2], the 2nd smallest negative integer is -1. For [-2, -3], the 2nd smallest negative integer is -2. For [-3, -4], the 2nd smallest negative integer is -3. For [-4, -5], the 2nd smallest negative integer is -4. Example 3:  Input: nums = [-3,1,2,-3,0,-3], k = 2, x = 1 Output: [-3,0,-3,-3,-3] Explanation: There are 5 subarrays with size k = 2. For [-3, 1], the 1st smallest negative integer is -3. For [1, 2], there is no negative integer so the beauty is 0. For [2, -3], the 1st smallest negative integer is -3. For [-3, 0], the 1st smallest negative integer is -3. For [0, -3], the 1st smallest negative integer is -3.  Constraints:  n == nums.length 1 <= n <= 105 1 <= k <= n 1 <= x <= k -50<= nums[i] <= 50  "
}