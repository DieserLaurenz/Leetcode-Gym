{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 13: SyntaxError: invalid syntax",
    "full_runtime_error": "SyntaxError: invalid syntax\n                 ^\n    nonlocal count\nLine 13  (Solution.py)",
    "status_runtime": "N/A",
    "memory": 6660000,
    "question_id": "2921",
    "elapsed_time": 28,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"11\"",
    "expected_output": "10",
    "task_finish_time": 1708870455150,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185827261",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def countSteppingNumbers(self, low, high):\n        \"\"\"\n        :type low: str\n        :type high: str\n        :rtype: int\n        \"\"\"\n        low, high = int(low), int(high)\n        count = 1 if low == 0 else 0\n        MOD = 10**9 + 7\n        \n        def bfs(start, low, high):\n            nonlocal count\n            q = [start]\n            while q:\n                curr = q.pop(0)\n                if low <= curr <= high:\n                    count = (count + 1) % MOD\n                elif curr > high:\n                    continue\n                last_digit = curr % 10\n                if curr > 0 and last_digit < 9:\n                    q.append(curr * 10 + last_digit + 1)\n                if curr > 0 and last_digit > 0:\n                    q.append(curr * 10 + last_digit - 1)\n        \n        for i in range(1, 10):\n            bfs(i, low, high)\n        \n        return count"
}