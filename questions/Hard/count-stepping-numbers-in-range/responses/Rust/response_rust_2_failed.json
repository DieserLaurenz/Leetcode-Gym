{
    "status_code": 15,
    "lang": "rust",
    "run_success": false,
    "runtime_error": "",
    "full_runtime_error": "",
    "status_runtime": "N/A",
    "memory": 2248000,
    "question_id": "2921",
    "elapsed_time": 59,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"",
    "expected_output": "125046265",
    "task_finish_time": 1708372595681,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2402,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180246674",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_stepping_numbers(low: String, high: String) -> i32 {\n        let low = low.parse::<u128>().unwrap();\n        let high = high.parse::<u128>().unwrap();\n        let mut result = 0;\n        let mod_val = 1_000_000_007;\n\n        let mut nums = vec![];\n        for i in 0..=9 {\n            Self::dfs(i, &low, &high, &mut nums);\n        }\n\n        result = nums.len() as i32 % mod_val;\n        result\n    }\n\n    fn dfs(current: u128, low: &u128, high: &u128, nums: &mut Vec<u128>) {\n        if current >= *low && current <= *high {\n            nums.push(current);\n        }\n        if current == 0 || current > *high {\n            return;\n        }\n        let last_digit = current % 10;\n        if last_digit == 0 {\n            Self::dfs(current * 10 + 1, low, high, nums);\n        } else if last_digit == 9 {\n            Self::dfs(current * 10 + 8, low, high, nums);\n        } else {\n            Self::dfs(current * 10 + last_digit - 1, low, high, nums);\n            Self::dfs(current * 10 + last_digit + 1, low, high, nums);\n        }\n    }\n}"
}