{
    "status_code": 14,
    "lang": "erlang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 59212000,
    "question_id": "2921",
    "elapsed_time": 5092,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"",
    "expected_output": "125046265",
    "task_finish_time": 1708372941139,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2402,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180250711",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "-spec count_stepping_numbers(Low :: unicode:unicode_binary(), High :: unicode:unicode_binary()) -> integer().\ncount_stepping_numbers(Low, High) ->\n    LowInt = binary_to_integer(Low),\n    HighInt = binary_to_integer(High),\n    Result = lists:foldl(fun(X, Acc) -> Acc + count(X, LowInt, HighInt, X) end, 0, lists:seq(1, 9)),\n    Result rem 1000000007.\n\ncount(_N, _Low, High, Current) when Current > High -> 0;\ncount(N, Low, High, Current) when Current >= Low andalso Current =< High ->\n    Count1 = if N - 1 >= 0 -> count(N - 1, Low, High, Current * 10 + (N - 1)); true -> 0 end,\n    Count2 = if N + 1 < 10 -> count(N + 1, Low, High, Current * 10 + (N + 1)); true -> 0 end,\n    1 + Count1 + Count2;\ncount(N, Low, High, Current) ->\n    Count1 = if N - 1 >= 0 -> count(N - 1, Low, High, Current * 10 + (N - 1)); true -> 0 end,\n    Count2 = if N + 1 < 10 -> count(N + 1, Low, High, Current * 10 + (N + 1)); true -> 0 end,\n    Count1 + Count2."
}