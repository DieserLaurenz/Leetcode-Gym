{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59032000,
    "question_id": "2921",
    "elapsed_time": 5273,
    "compare_result
    "code_output": "20",
    "std_output": "",
    "last_testcase": "\"1\"\n\"11\"",
    "expected_output": "10",
    "task_finish_time": 1708372895158,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 71,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180250154",
    "input_formatted": "\"1\", \"11\"",
    "input": "\"1\"\n\"11\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_stepping_numbers(Low :: unicode:unicode_binary(), High :: unicode:unicode_binary()) -> integer().\ncount_stepping_numbers(Low, High) ->\n    LowInt = binary_to_integer(Low),\n    HighInt = binary_to_integer(High),\n    Count = count_stepping(LowInt, HighInt, 0, 0),\n    Count rem 1000000007.\n\ncount_stepping(Low, High, Step, Acc) when Step > High -> Acc;\ncount_stepping(Low, High, 0, Acc) ->\n    Acc1 = count_stepping(Low, High, 1, Acc),\n    count_stepping(Low, High, 1, Acc1);\ncount_stepping(Low, High, Step, Acc) when Step >= Low andalso Step =< High ->\n    Acc1 = Acc + 1,\n    Lists = lists:seq(0, 9),\n    Acc2 = lists:foldl(fun(X, AccIn) -> NewStep = Step * 10 + X, Delta = abs((Step rem 10) - X), if Delta == 1 -> count_stepping(Low, High, NewStep, AccIn); true -> AccIn end end, Acc1, Lists),\n    if Step < 9 -> count_stepping(Low, High, Step + 1, Acc2); true -> Acc2 end;\ncount_stepping(Low, High, Step, Acc) ->\n    Lists = lists:seq(0, 9),\n    Acc1 = lists:foldl(fun(X, AccIn) -> NewStep = Step * 10 + X, Delta = abs((Step rem 10) - X), if Delta == 1 -> count_stepping(Low, High, NewStep, AccIn); true -> AccIn end end, Acc, Lists),\n    if Step < 9 -> count_stepping(Low, High, Step + 1, Acc1); true -> Acc1 end."
}