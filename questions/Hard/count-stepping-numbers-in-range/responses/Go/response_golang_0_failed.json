{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17444000,
    "question_id": "2921",
    "elapsed_time": 3029,
    "compare_result
    "code_output": "18",
    "std_output": "",
    "last_testcase": "\"1\"\n\"11\"",
    "expected_output": "10",
    "task_finish_time": 1708372052169,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 43,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180239648",
    "input_formatted": "\"1\", \"11\"",
    "input": "\"1\"\n\"11\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countSteppingNumbers(low string, high string) int {\n    const MOD = 1e9 + 7\n    lowInt, highInt := new(big.Int), new(big.Int)\n    lowInt.SetString(low, 10)\n    highInt.SetString(high, 10)\n\n    var count func(num *big.Int, pos int, lastDigit int, leadingZero bool) int\n    count = func(num *big.Int, pos int, lastDigit int, leadingZero bool) int {\n        if pos == len(high) {\n            if leadingZero || num.Cmp(lowInt) < 0 {\n                return 0\n            }\n            return 1\n        }\n        total := 0\n        if leadingZero {\n            total = (total + count(new(big.Int).Set(num), pos+1, 0, true)) % MOD\n        }\n        start, end := 0, 9\n        if leadingZero {\n            start = 1\n        }\n        for d := start; d <= end; d++ {\n            if lastDigit == -1 || abs(lastDigit-d) == 1 {\n                nextNum := new(big.Int).Set(num)\n                nextNum = nextNum.Mul(nextNum, big.NewInt(10))\n                nextNum = nextNum.Add(nextNum, big.NewInt(int64(d)))\n                total = (total + count(nextNum, pos+1, d, false)) % MOD\n            }\n        }\n        return total\n    }\n\n    return count(new(big.Int), 0, -1, true)\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}"
}