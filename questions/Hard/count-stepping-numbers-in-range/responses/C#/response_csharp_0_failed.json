{
    "status_code": 15,
    "lang": "csharp",
    "run_success": false,
    "runtime_error": "Unhandled exception. System.OverflowException: Value was either too large or too small for an Int64.",
    "full_runtime_error": "Unhandled exception. System.OverflowException: Value was either too large or too small for an Int64.\nAt System.Number.ThrowOverflowException[TInteger]()\nAt System.Int64.Parse(String s)\nAt Solution.CountSteppingNumbers(String low, String high)\nAt __DriverSolution__.__Helper__(String param_1, String param_2)\nAt __Driver__.Main(String[] args)",
    "status_runtime": "N/A",
    "memory": 125116000,
    "question_id": "2921",
    "elapsed_time": 400,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"",
    "expected_output": "125046265",
    "task_finish_time": 1708362307404,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2402,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180083284",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int CountSteppingNumbers(string low, string high) {\n        int MOD = 1000000007;\n        long lowNum = long.Parse(low);\n        long highNum = long.Parse(high);\n        int count = 0;\n        \n        Queue<long> queue = new Queue<long>();\n        for (int i = 1; i <= 9; i++) {\n            queue.Enqueue(i);\n        }\n        \n        if (lowNum == 0) {\n            count++;\n        }\n        \n        while (queue.Count > 0) {\n            long current = queue.Dequeue();\n            if (current >= lowNum && current <= highNum) {\n                count = (count + 1) % MOD;\n            }\n            \n            if (current > highNum) {\n                continue;\n            }\n            \n            long lastDigit = current % 10;\n            long next1 = current * 10 + (lastDigit - 1);\n            long next2 = current * 10 + (lastDigit + 1);\n            \n            if (lastDigit > 0) queue.Enqueue(next1);\n            if (lastDigit < 9) queue.Enqueue(next2);\n        }\n        \n        return count;\n    }\n}"
}