{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 137916000,
    "question_id": "2921",
    "elapsed_time": 2157,
    "compare_result
    "code_output": "1143888",
    "std_output": "",
    "last_testcase": "\"1\"\n\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"",
    "expected_output": "125046265",
    "task_finish_time": 1708362349743,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2405,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180084031",
    "input_formatted": "\"1\", \"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"",
    "input": "\"1\"\n\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    private const int Mod = 1000000007;\n    \n    private void BFS(long start, long low, long high, ref int count) {\n        Queue<long> q = new Queue<long>();\n        q.Enqueue(start);\n        \n        while (q.Count > 0) {\n            long curr = q.Dequeue();\n            if (curr >= low && curr <= high) count = (count + 1) % Mod;\n            if (curr == 0 || curr > high) continue;\n            \n            long lastDigit = curr % 10;\n            long num1 = curr * 10 + lastDigit - 1;\n            long num2 = curr * 10 + lastDigit + 1;\n            \n            if (lastDigit > 0) q.Enqueue(num1);\n            if (lastDigit < 9) q.Enqueue(num2);\n        }\n    }\n    \n    public int CountSteppingNumbers(string low, string high) {\n        long lowNum = long.Parse(low.Length > 18 ? low.Substring(0, 18) : low);\n        long highNum = long.Parse(high.Length > 18 ? high.Substring(0, 18) : high);\n        int count = 0;\n        \n        for (long i = 0; i <= 9; i++) {\n            BFS(i, lowNum, highNum, ref count);\n        }\n        \n        return count;\n    }\n}"
}