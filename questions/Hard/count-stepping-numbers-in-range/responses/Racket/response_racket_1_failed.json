{
    "status_code": 14,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 129020000,
    "question_id": "2921",
    "elapsed_time": 5018,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"11\"",
    "expected_output": "10",
    "task_finish_time": 1708372732758,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1180248294",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (count-stepping-numbers low high)\n  (-> string? string? exact-integer?)\n  (let* ((mod 1000000007)\n         (low-int (string->number low))\n         (high-int (string->number high))\n         (count 0)\n         (next-level '()))\n    (define (valid-stepping? n)\n      (or (< n 10) (let loop ((prev (modulo n 10)) (n (quotient n 10)))\n                      (if (= n 0)\n                          #t\n                          (let ((curr (modulo n 10)))\n                            (and (= (abs (- curr prev)) 1) (loop curr (quotient n 10))))))))\n    (define (bfs queue)\n      (when (not (null? queue))\n        (for-each (lambda (n)\n                    (when (and (<= n high-int) (>= n low-int))\n                      (set! count (modulo (+ count 1) mod)))\n                    (let ((last-digit (modulo n 10)))\n                      (when (and (< n high-int) (> last-digit 0))\n                        (set! next-level (cons (+ (* n 10) (- last-digit 1)) next-level)))\n                      (when (and (< n high-int) (< last-digit 9))\n                        (set! next-level (cons (+ (* n 10) (+ last-digit 1)) next-level)))))\n                  queue)\n        (bfs next-level)\n        (set! next-level '())))\n    (do ([i 1 (+ i 1)]) ((> i 9))\n      (when (valid-stepping? i)\n        (bfs (list i))))\n    count))"
}