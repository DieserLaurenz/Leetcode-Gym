{
    "status_code": 12,
    "lang": "scala",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 357264000,
    "question_id": "2921",
    "elapsed_time": 10454,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"",
    "expected_output": "125046265",
    "task_finish_time": 1708372415284,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2402,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1180244135",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countSteppingNumbers(low: String, high: String): Int = {\n        val MOD = 1000000007\n        val lowLong = BigInt(low)\n        val highLong = BigInt(high)\n        var count = 0\n\n        def bfs(): Unit = {\n            val queue = scala.collection.mutable.Queue[BigInt]()\n            (1 to 9).foreach(i => queue.enqueue(BigInt(i)))\n\n            while (queue.nonEmpty) {\n                val current = queue.dequeue()\n                if (current <= highLong) {\n                    if (current >= lowLong) count = (count + 1) % MOD\n\n                    val lastDigit = current % 10\n                    if (lastDigit > 0 && current * 10 + (lastDigit - 1) <= highLong) queue.enqueue(current * 10 + (lastDigit - 1))\n                    if (lastDigit < 9 && current * 10 + (lastDigit + 1) <= highLong) queue.enqueue(current * 10 + (lastDigit + 1))\n                }\n            }\n        }\n\n        if (lowLong == 0) count = (count + 1) % MOD\n        bfs()\n        count\n    }\n}"
}