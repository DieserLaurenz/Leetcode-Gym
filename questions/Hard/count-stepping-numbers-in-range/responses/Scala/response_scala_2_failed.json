{
    "status_code": 12,
    "lang": "scala",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 353404000,
    "question_id": "2921",
    "elapsed_time": 10450,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"",
    "expected_output": "125046265",
    "task_finish_time": 1708372457253,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2402,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1180244695",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countSteppingNumbers(low: String, high: String): Int = {\n        val lowLong = BigInt(low)\n        val highLong = BigInt(high)\n        var count = 0\n        if (lowLong <= 0 && highLong >= 0) count += 1\n\n        def bfs(start: Int): Unit = {\n            val queue = scala.collection.mutable.Queue[BigInt](start)\n            while (queue.nonEmpty) {\n                val curr = queue.dequeue()\n                if (curr <= highLong && curr >= lowLong) count += 1\n                val lastDigit = curr % 10\n                if (curr > 0 && curr * 10 <= highLong) {\n                    if (lastDigit < 9) queue.enqueue(curr * 10 + lastDigit + 1)\n                    if (lastDigit > 0) queue.enqueue(curr * 10 + lastDigit - 1)\n                }\n            }\n        }\n\n        (1 to 9).foreach(bfs)\n        count\n    }\n}"
}