{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71164000,
    "question_id": "2921",
    "elapsed_time": 6019,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1\"\n\"11\"",
    "expected_output": "10",
    "task_finish_time": 1708373122453,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 71,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180252891",
    "input_formatted": "\"1\", \"11\"",
    "input": "\"1\"\n\"11\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_stepping_numbers(low :: String.t(), high :: String.t()) :: integer()\n  def count_stepping_numbers(low, high) do\n    {low_num, high_num} = {String.to_integer(low), String.to_integer(high)}\n    steps = for n <- 0..9, do: dfs(n, low_num, high_num, 0)\n    Enum.sum(steps)\n  end\n\n  defp dfs(_current, _low, high, count) when _current > high, do: count\n\n  defp dfs(current, low, high, count) when current >= low and current <= high do\n    if current > 0 do\n      count = count + 1\n    end\n\n    if current == 0 do\n      Enum.reduce(1..9, count, fn x, acc -> dfs(x, low, high, acc) end)\n    else\n      last_digit = rem(current, 10)\n      neighbors = []\n\n      neighbors =\n        if last_digit > 0, do: [current * 10 + last_digit - 1 | neighbors], else: neighbors\n\n      neighbors =\n        if last_digit < 9, do: [current * 10 + last_digit + 1 | neighbors], else: neighbors\n\n      Enum.reduce(neighbors, count, fn x, acc -> dfs(x, low, high, acc) end)\n    end\n  end\n\n  defp dfs(current, low, high, count) do\n    if current == 0 do\n      Enum.reduce(1..9, count, fn x, acc -> dfs(x, low, high, acc) end)\n    else\n      last_digit = rem(current, 10)\n      neighbors = []\n\n      neighbors =\n        if last_digit > 0, do: [current * 10 + last_digit - 1 | neighbors], else: neighbors\n\n      neighbors =\n        if last_digit < 9, do: [current * 10 + last_digit + 1 | neighbors], else: neighbors\n\n      Enum.reduce(neighbors, count, fn x, acc -> dfs(x, low, high, acc) end)\n    end\n  end\nend"
}