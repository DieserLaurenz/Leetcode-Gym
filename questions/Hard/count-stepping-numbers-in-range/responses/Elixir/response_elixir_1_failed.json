{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70840000,
    "question_id": "2921",
    "elapsed_time": 6017,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1\"\n\"11\"",
    "expected_output": "10",
    "task_finish_time": 1708373068165,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 71,
    "total_testcases": 2523,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180252220",
    "input_formatted": "\"1\", \"11\"",
    "input": "\"1\"\n\"11\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_stepping_numbers(low :: String.t(), high :: String.t()) :: integer()\n  def count_stepping_numbers(low, high) do\n    low_num = String.to_integer(low)\n    high_num = String.to_integer(high)\n    modulo = 1_000_000_007\n\n    Enum.map(0..9, &generate_stepping_numbers(&1, low_num, high_num))\n    |> List.flatten()\n    |> Enum.uniq()\n    |> Enum.filter(&(&1 >= low_num and &1 <= high_num))\n    |> length()\n    |> rem(modulo)\n  end\n\n  defp generate_stepping_numbers(num, low, high, acc \\\\ []) when num <= high do\n    if num >= low and num <= high and (num == 0 or Integer.digits(num) |> hd() != 0) do\n      acc = [num | acc]\n    else\n      acc = acc\n    end\n\n    last_digit = rem(num, 10)\n\n    acc = if last_digit > 0, do: generate_stepping_numbers(num * 10 + last_digit - 1, low, high, acc), else: acc\n    acc = if last_digit < 9, do: generate_stepping_numbers(num * 10 + last_digit + 1, low, high, acc), else: acc\n\n    acc\n  end\n  defp generate_stepping_numbers(_, _, _, acc), do: acc\nend"
}