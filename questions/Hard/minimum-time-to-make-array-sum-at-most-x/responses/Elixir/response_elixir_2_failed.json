{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 5: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:5: anonymous fn/2 in Solution.minimum_time/3\n    (elixir 1.15.7) lib/enum.ex:1693: Enum.\"-map/2-lists^map/1-1-\"/2\n    solution.ex:5: Solution.minimum_time/3\n    solution.ex:41: Driver.consume_test_cases/2\n    solution.ex:25: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72784000,
    "question_id": "2952",
    "elapsed_time": 821,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708923935834,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1186395362",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_time(nums1 :: [integer], nums2 :: [integer], x :: integer) :: integer\n  def minimum_time(nums1, nums2, x) do\n    nums_with_index = Enum.with_index(nums1)\n    |> Enum.map(fn {n1, idx} -> {n1 + nums2[idx] * 0, idx} end)\n\n    1..length(nums1)\n    |> Enum.reduce_while({0, nums_with_index}, fn _, {seconds, nums} ->\n      sum = Enum.reduce(nums, 0, fn {n, _}, acc -> n + acc end)\n      if sum <= x, do: {:halt, seconds}, else: {:cont, {seconds + 1, update_nums(nums, nums2)}}\n    end)\n    |> case do\n      {seconds, _} when seconds > length(nums1) -> -1\n      seconds -> seconds\n    end\n  end\n\n  defp update_nums(nums, nums2) do\n    Enum.map(nums, fn {n, idx} -> {max(n - nums2[idx], 0), idx} end)\n  end\nend"
}