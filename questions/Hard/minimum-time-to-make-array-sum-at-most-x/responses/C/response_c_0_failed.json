{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6624000,
    "question_id": "2952",
    "elapsed_time": 35,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708912947416,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 358,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1186281709",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return *(int*)b - *(int*)a;\n}\n\nint minimumTime(int* nums1, int nums1Size, int* nums2, int nums2Size, int x){\n    long long sum = 0;\n    for (int i = 0; i < nums1Size; ++i) {\n        sum += nums1[i];\n    }\n    if (sum <= x) return 0;\n\n    int* potential = (int*)malloc(nums1Size * sizeof(int));\n    for (int i = 0; i < nums1Size; ++i) {\n        potential[i] = nums1[i] + nums2[i] * (nums1Size - 1);\n    }\n    qsort(potential, nums1Size, sizeof(int), compare);\n\n    for (int i = 0; i < nums1Size; ++i) {\n        sum -= potential[i];\n        if (sum <= x) {\n            free(potential);\n            return i + 1;\n        }\n    }\n\n    free(potential);\n    return -1;\n}"
}