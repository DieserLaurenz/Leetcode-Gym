{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6980000,
    "question_id": "2952",
    "elapsed_time": 54,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708913028133,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 416,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1186282381",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint minimumTime(int* nums1, int nums1Size, int* nums2, int nums2Size, int x){\n    long long total = 0;\n    for (int i = 0; i < nums1Size; i++) {\n        total += nums1[i];\n    }\n    if (total <= x) return 0;\n\n    long long *gain = (long long *)malloc(nums1Size * sizeof(long long));\n    for (int i = 0; i < nums1Size; i++) {\n        gain[i] = (long long)nums1[i] + (long long)nums2[i] * (nums1Size - 1);\n    }\n\n    for (int time = 1; time <= nums1Size; time++) {\n        long long maxGain = 0;\n        int index = -1;\n        for (int i = 0; i < nums1Size; i++) {\n            if (gain[i] > maxGain) {\n                maxGain = gain[i];\n                index = i;\n            }\n        }\n        if (index == -1) break;\n        total -= nums1[index];\n        if (total <= x) {\n            free(gain);\n            return time;\n        }\n        gain[index] = 0; // This index won't be chosen again\n        for (int j = 0; j < nums1Size; j++) {\n            if (j != index) {\n                gain[j] -= nums2[j]; // Adjust the gain since we can reduce one less second\n            }\n        }\n    }\n    free(gain);\n    return -1;\n}"
}