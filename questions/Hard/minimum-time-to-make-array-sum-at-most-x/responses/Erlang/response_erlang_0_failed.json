{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60256000,
    "question_id": "2952",
    "elapsed_time": 1433,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708923741942,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1186392923",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_time(Nums1 :: [integer()], Nums2 :: [integer()], X :: integer()) -> integer().\nminimum_time(Nums1, Nums2, X) ->\n    Sorted = lists:sort(fun({A1, B1}, {A2, B2}) ->\n        A1/B1 > A2/B2 end, lists:zip(Nums1, Nums2)),\n    min_time(Sorted, X, 0).\n\nmin_time([], X, Time) when X >= 0 -> Time;\nmin_time(_, X, _) when X < 0 -> -1;\nmin_time([{N1, N2} | T], X, Time) ->\n    NewX = X - N1,\n    if\n        NewX >= 0 -> min_time(T, NewX - lists:foldl(fun({_, N}, Acc) -> Acc + N end, 0, T), Time + 1);\n        true -> -1\n    end."
}