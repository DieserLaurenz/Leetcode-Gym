{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61088000,
    "question_id": "2952",
    "elapsed_time": 1648,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708923811070,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 378,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1186393785",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_time(Nums1 :: [integer()], Nums2 :: [integer()], X :: integer()) -> integer().\nminimum_time(Nums1, Nums2, X) ->\n    Total = lists:sum(Nums1),\n    if\n        Total =< X -> 0;\n        true -> find_min_time(lists:zip(Nums1, Nums2), X, 0, Total, 1, length(Nums1))\n    end.\n\nfind_min_time(_, _, Time, Total, _, _) when Total =< 0 -> Time - 1;\nfind_min_time(_, _, _, _, Steps, Len) when Steps > Len -> -1;\nfind_min_time(Zipped, X, Time, Total, Steps, Len) ->\n    Possible = lists:map(fun({N1, N2}) ->\n        {N1 + (N2 * Time), N1, N2}\n    end, Zipped),\n    {Max, MaxN1, MaxN2} = lists:max(Possible),\n    if\n        Total - Max =< X -> Steps;\n        true -> find_min_time(Zipped, X, Time + 1, Total - Max + MaxN2, Steps + 1, Len)\n    end."
}