{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61096000,
    "question_id": "2952",
    "elapsed_time": 1605,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708923776283,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 141,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1186393351",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec minimum_time(Nums1 :: [integer()], Nums2 :: [integer()], X :: integer()) -> integer().\nminimum_time(Nums1, Nums2, X) ->\n    Times = lists:map(fun(N) -> calculate_time(N, X) end, lists:zip(Nums1, Nums2)),\n    case lists:filter(fun(T) -> T =/= -1 end, Times) of\n        [] -> -1;\n        FilteredTimes -> lists:min(FilteredTimes)\n    end.\n\ncalculate_time({N1, N2}, X) when N2 =:= 0 ->\n    if N1 > X -> -1; true -> 1 end;\ncalculate_time({N1, N2}, X) ->\n    if N1 > X -> -1;\n       true ->\n           NeededDecrease = X - N1,\n           Time = NeededDecrease div N2 + if NeededDecrease rem N2 =:= 0 -> 0; true -> 1 end,\n           Time + 1\n    end."
}