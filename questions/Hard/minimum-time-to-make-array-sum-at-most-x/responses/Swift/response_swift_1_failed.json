{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15288000,
    "question_id": "2952",
    "elapsed_time": 60,
    "compare_result": "00000010110110000000100000011000001001000000001010000011010100010000100001001000000000000010000010000000010000000000000001010100100000011000000110000100000100000001000000000011000000011000000010000000000000001001000000101001000000000000001110011110000000001001000001010100000001001010000000001001000000000010010000001000100101101000100001000000000001000110100010000001000110000100000000000000100000000100000101000010010011000000100000000000000100101001000001101000000000000000000010000000011000000001001010000000101000000100110000100010100100100100000000000001101101001000100100100000100100000100000001010000000001000000000000100011001010000100000010100000010000100010000000010101000001001010010000000100000100000001000001000011000000010000010001000000001000110000010001000100000001000111001110001000000000010100000110000100010001000000000010010010011001000000100000000111000000000100010001000000110011000000000000000000000001000100011001100000011000000010001100000000001011000110100000010100100010001000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000011111100",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708922623743,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 223,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1186379001",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumTime(_ nums1: [Int], _ nums2: [Int], _ x: Int) -> Int {\n        var totalSum = nums1.reduce(0, +)\n        if totalSum <= x { return 0 }\n        \n        let n = nums1.count\n        var prefixSums = [0]\n        for i in 0..<n {\n            prefixSums.append(prefixSums.last! + nums2[i])\n        }\n        \n        var best = Int.max\n        var suffixSum = 0\n        for i in stride(from: n, through: 1, by: -1) {\n            suffixSum += nums1[i - 1]\n            let remaining = x - suffixSum\n            if remaining < 0 { break }\n            var left = 0, right = i - 1\n            while left < right {\n                let mid = left + (right - left) / 2\n                if prefixSums[mid + 1] <= remaining {\n                    left = mid + 1\n                } else {\n                    right = mid\n                }\n            }\n            if prefixSums[left] <= remaining {\n                best = min(best, n - i + 1 + left)\n            }\n            totalSum -= nums1[i - 1]\n            if totalSum <= remaining {\n                best = min(best, n - i + 1)\n                break\n            }\n        }\n        \n        return best == Int.max ? -1 : best\n    }\n}"
}