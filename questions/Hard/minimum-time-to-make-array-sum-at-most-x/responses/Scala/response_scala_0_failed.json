{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57032000,
    "question_id": "2952",
    "elapsed_time": 1053,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708923254486,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 205,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1186386931",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumTime(nums1: List[Int], nums2: List[Int], x: Int): Int = {\n        val n = nums1.length\n        var prefixSum = Array.fill(n + 1)(0)\n        for (i <- nums1.indices) {\n            prefixSum(i + 1) = prefixSum(i) + nums1(i)\n        }\n        if (prefixSum(n) <= x) return 0\n\n        var bestTime = Int.MaxValue\n        var suffixSum = 0\n        for (i <- n - 1 to 0 by -1) {\n            suffixSum += nums2(i)\n            var left = 0\n            var right = i\n            while (left <= right) {\n                val mid = left + (right - left) / 2\n                if (prefixSum(mid) + suffixSum * (mid + 1) <= x) {\n                    bestTime = bestTime.min(mid + 1 + n - i)\n                    left = mid + 1\n                } else {\n                    right = mid - 1\n                }\n            }\n        }\n\n        if (bestTime == Int.MaxValue) -1 else bestTime\n    }\n}"
}