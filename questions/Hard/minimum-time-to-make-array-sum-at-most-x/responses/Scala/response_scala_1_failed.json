{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59292000,
    "question_id": "2952",
    "elapsed_time": 934,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[3,3,3]\n4",
    "expected_output": "-1",
    "task_finish_time": 1708923286894,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 291,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1186387287",
    "input_formatted": "[1,2,3], [3,3,3], 4",
    "input": "[1,2,3]\n[3,3,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumTime(nums1: List[Int], nums2: List[Int], x: Int): Int = {\n        val totalSum = nums1.sum\n        if (totalSum <= x) return 0\n        val n = nums1.length\n        var prefixSums = nums1.scanLeft(0)(_ + _).tail\n        var maxGain = Array.fill(n)(0)\n        var tempSum = 0\n        for (i <- nums1.indices) {\n            tempSum += nums2(i)\n            maxGain(i) = tempSum - nums1(i)\n        }\n        for (i <- 1 until n) {\n            maxGain(i) = math.max(maxGain(i), maxGain(i - 1))\n        }\n        var ans = Int.MaxValue\n        for (i <- nums1.indices) {\n            val currentSum = prefixSums(i) + (if (i > 0) maxGain(i - 1) else 0)\n            if (currentSum >= x) {\n                ans = ans.min(i + 1)\n            }\n        }\n        if (ans == Int.MaxValue) -1 else ans\n    }\n}"
}