{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50800000,
    "question_id": "2952",
    "elapsed_time": 777,
    "compare_result
    "code_output": "-3",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708922752611,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 110,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1186380535",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumTime(nums1: List<Int>, nums2: List<Int>, x: Int): Int {\n        val n = nums1.size\n        val prefix = IntArray(n + 1)\n        val suffix = IntArray(n + 1)\n        for (i in nums1.indices) {\n            prefix[i + 1] = prefix[i] + nums1[i]\n        }\n        for (i in nums1.indices.reversed()) {\n            suffix[i] = suffix[i + 1] + nums1[i]\n        }\n        var total = prefix[n]\n        if (total <= x) return 0\n        var minTime = Int.MAX_VALUE\n        for (i in 0..n) {\n            var left = 0\n            var right = n\n            while (left <= right) {\n                val mid = (left + right) / 2\n                val current = prefix[i] + suffix[n - mid]\n                val increment = nums2.subList(n - mid, n).sumOf { it * (i + mid - n) }\n                if (current + increment <= x) {\n                    minTime = minOf(minTime, i + mid - n)\n                    right = mid - 1\n                } else {\n                    left = mid + 1\n                }\n            }\n        }\n        return if (minTime == Int.MAX_VALUE) -1 else minTime\n    }\n}"
}