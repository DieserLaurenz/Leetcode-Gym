{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39612000,
    "question_id": "2952",
    "elapsed_time": 317,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,3]\n[1,2,3]\n4",
    "expected_output": "3",
    "task_finish_time": 1708922719519,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 642,
    "total_testcases": 1274,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1186380124",
    "input_formatted": "[1,2,3], [1,2,3], 4",
    "input": "[1,2,3]\n[1,2,3]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumTime(nums1: List<Int>, nums2: List<Int>, x: Int): Int {\n        var totalSum = nums1.sum()\n        if (totalSum <= x) return 0\n\n        val n = nums1.size\n        val prefixSums = MutableList(n + 1) { 0 }\n        for (i in 1..n) {\n            prefixSums[i] = prefixSums[i - 1] + nums1[i - 1]\n        }\n\n        var bestTime = Int.MAX_VALUE\n        for (i in 0 until n) {\n            var low = i\n            var high = n\n            while (low < high) {\n                val mid = (low + high) / 2\n                val sumAfterOperations = prefixSums[i] + (prefixSums[n] - prefixSums[mid + 1]) + nums2.subList(i, mid + 1).sum() * (mid - i + 1)\n                if (sumAfterOperations <= x) {\n                    bestTime = minOf(bestTime, mid - i + 1)\n                    high = mid\n                } else {\n                    low = mid + 1\n                }\n            }\n        }\n\n        return if (bestTime == Int.MAX_VALUE) -1 else bestTime\n    }\n}"
}