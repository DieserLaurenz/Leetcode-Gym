{
    "acRate": 24.069324628895625,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2809",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Time to Make Array Sum At Most x",
    "titleSlug": "minimum-time-to-make-array-sum-at-most-x",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minimumTime(vector<int>& nums1, vector<int>& nums2, int x) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minimumTime(List<Integer> nums1, List<Integer> nums2, int x) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimumTime(self, nums1, nums2, x):         \"\"\"         :type nums1: List[int]         :type nums2: List[int]         :type x: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minimumTime(int* nums1, int nums1Size, int* nums2, int nums2Size, int x){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinimumTime(IList<int> nums1, IList<int> nums2, int x) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums1  * @param {number[]} nums2  * @param {number} x  * @return {number}  */ var minimumTime = function(nums1, nums2, x) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimumTime(nums1: number[], nums2: number[], x: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums1      * @param Integer[] $nums2      * @param Integer $x      * @return Integer      */     function minimumTime($nums1, $nums2, $x) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimumTime(_ nums1: [Int], _ nums2: [Int], _ x: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimumTime(nums1: List<Int>, nums2: List<Int>, x: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minimumTime(List<int> nums1, List<int> nums2, int x) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimumTime(nums1 []int, nums2 []int, x int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums1 # @param {Integer[]} nums2 # @param {Integer} x # @return {Integer} def minimum_time(nums1, nums2, x)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimumTime(nums1: List[Int], nums2: List[Int], x: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimum_time(nums1: Vec<i32>, nums2: Vec<i32>, x: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimum-time nums1 nums2 x)   (-> (listof exact-integer?) (listof exact-integer?) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimum_time(Nums1 :: [integer()], Nums2 :: [integer()], X :: integer()) -> integer(). minimum_time(Nums1, Nums2, X) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimum_time(nums1 :: [integer], nums2 :: [integer], x :: integer) :: integer   def minimum_time(nums1, nums2, x) do    end end"
        }
    ],
    "content": "You are given two 0-indexed integer arrays nums1 and nums2 of equal length. Every second, for all indices 0 <= i < nums1.length, value of nums1[i] is incremented by nums2[i]. After this is done, you can do the following operation:  Choose an index 0 <= i < nums1.length and make nums1[i] = 0.  You are also given an integer x. Return the minimum time in which you can make the sum of all elements of nums1 to be less than or equal to x, or -1 if this is not possible.  Example 1:  Input: nums1 = [1,2,3], nums2 = [1,2,3], x = 4 Output: 3 Explanation:  For the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6].  For the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9].  For the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0].  Now sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.   Example 2:  Input: nums1 = [1,2,3], nums2 = [3,3,3], x = 4 Output: -1 Explanation: It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.   Constraints:  1 <= nums1.length <= 103 1 <= nums1[i] <= 103 0 <= nums2[i] <= 103 nums1.length == nums2.length 0 <= x <= 106  "
}