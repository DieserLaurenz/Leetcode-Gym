{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58424000,
    "question_id": "2808",
    "elapsed_time": 1137,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,2]\n[1,2,3,2]",
    "expected_output": "3",
    "task_finish_time": 1708954668506,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 416,
    "total_testcases": 2558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1186752642",
    "input_formatted": "[1,2,3,2], [1,2,3,2]",
    "input": "[1,2,3,2]\n[1,2,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def paintWalls(cost: Array[Int], time: Array[Int]): Int = {\n        val n = cost.length\n        val dp = Array.ofDim[Int](n + 1, n + 1)\n        for (i <- 0 to n) {\n            for (j <- 0 to n) {\n                dp(i)(j) = Int.MaxValue\n            }\n        }\n        dp(0)(0) = 0\n\n        for (i <- 1 to n) {\n            dp(i)(0) = dp(i - 1)(0) + cost(i - 1)\n            for (j <- 1 until i) {\n                dp(i)(j) = dp(i - 1)(j - 1)\n                if (dp(i - 1)(j) != Int.MaxValue) {\n                    dp(i)(j) = Math.min(dp(i)(j), dp(i - 1)(j) + cost(i - 1))\n                }\n            }\n            dp(i)(i) = dp(i - 1)(i - 1)\n        }\n\n        var minCost = Int.MaxValue\n        for (j <- 0 until n) {\n            if (dp(n)(j) < minCost) minCost = dp(n)(j)\n        }\n        minCost\n    }\n}"
}