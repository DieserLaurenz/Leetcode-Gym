{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6876000,
    "question_id": "2808",
    "elapsed_time": 32,
    "compare_result": "00000100000000000000000001000000000000000100000000001100000000000010000010000000000000000000000000000000010001000001000000101010001010000000000100000001000010010000001000000000000001100100000000000010000011000000000001000000000000001000000000100000000100000010000001000000100000000000000100000000000000000000000000000100001000000000010000000001100000000010000000000101000000000010000000000000000000101010010001000010000001000000000000101000000001010000000000000100000010100110000000000000000000000000000000000100000000000000000100000000100000000000000000000000000001000000100000000000000000000010000000110000000000100001000100000000000000010000000000000000100000010000000000000000100000000000100000000101000000000000000000000001000000000111001000000000000000000001000000001000000001000000000000000000000100000000000000100100000000000000000000000000010000000000000100000000000000000000000000000000000100000000010000000000000000000000010000000000000000000000000001000100000000001100011000000001000100001000100001010010000000000000000000000001110100011000000000000000000000001100000000000010001000000000010000000000100000000001000000000000000000000100100000000000000000000000000100000000000000000000011000000000000000000010110000000000000000000000000000010000000010010001010110001001000001000000000000000000000000000000000001000000000000000100000000000000001000000000000000000000000010000000001000000000000000000000000000001010000000000000000010010000000000000010100001100010000000000000000100000000000000010000000000000000000000010000000000000100000000000000000000000010100000000000000100000001000001010010000011000010001000000100001010000000010010000010110001001000000010100000000000000000000000000000000010000000000000010000011000001000000000000000010010000000000000000001000000010000010100100000000001100000000000010000000000000000000000000000010000000000000000000000000000000000000000000000010000010001000000010000000000000000000001000000101000100000010000100000000000000000000000100000010000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000001000000000000000000000000000000000001000000000000000000000000000000000000000000000000000100000000000000000000000000000000000001000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000001000000000000000000000000000000000001000010000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,3,2]\n[1,2,3,2]",
    "expected_output": "3",
    "task_finish_time": 1708944222806,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 218,
    "total_testcases": 2558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1186636015",
    "input_formatted": "[1,2,3,2], [1,2,3,2]",
    "input": "[1,2,3,2]\n[1,2,3,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    int l = *(const int*)a;\n    int r = *(const int*)b;\n    return (l - r);\n}\n\nint paintWalls(int* cost, int costSize, int* time, int timeSize) {\n    int *costPerTime = (int*)malloc(sizeof(int) * costSize);\n    for (int i = 0; i < costSize; i++) {\n        costPerTime[i] = cost[i] - time[i];\n    }\n\n    qsort(costPerTime, costSize, sizeof(int), compare);\n\n    int totalCost = 0, totalTime = 0, freePainterTime = 0;\n    for (int i = 0; i < costSize; i++) {\n        if (costPerTime[i] < 0 || totalTime < freePainterTime) {\n            totalCost += cost[i];\n            totalTime += time[i];\n        } else {\n            freePainterTime += 1;\n        }\n    }\n\n    free(costPerTime);\n    return totalCost;\n}"
}