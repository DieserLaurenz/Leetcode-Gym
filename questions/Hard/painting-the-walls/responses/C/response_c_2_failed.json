{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6856000,
    "question_id": "2808",
    "elapsed_time": 35,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[2,3,4,2]\n[1,1,1,1]",
    "expected_output": "4",
    "task_finish_time": 1708944311801,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 444,
    "total_testcases": 2558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1186636926",
    "input_formatted": "[2,3,4,2], [1,1,1,1]",
    "input": "[2,3,4,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint paintWalls(int* cost, int costSize, int* time, int timeSize) {\n    // Calculate total painting time by the paid painter\n    int maxTime = 0;\n    for (int i = 0; i < timeSize; i++) {\n        if (time[i] > maxTime) {\n            maxTime = time[i];\n        }\n    }\n\n    // Allocate and initialize an array to keep track of which walls are painted\n    int* painted = (int*)calloc(costSize, sizeof(int));\n    int totalCost = 0, currentTime = 0;\n\n    while (currentTime < maxTime) {\n        int minCostIndex = -1;\n        for (int i = 0; i < costSize; i++) {\n            if (!painted[i] && (minCostIndex == -1 || cost[i] < cost[minCostIndex])) {\n                minCostIndex = i;\n            }\n        }\n        if (minCostIndex != -1) {\n            totalCost += cost[minCostIndex];\n            painted[minCostIndex] = 1;\n            currentTime += time[minCostIndex];\n        }\n\n        for (int i = 0; i < costSize && currentTime <= maxTime; i++) {\n            if (!painted[i] && time[i] <= 1) {\n                painted[i] = 1;\n                currentTime += 1; // Free painter paints a wall\n            }\n        }\n    }\n\n    free(painted);\n    return totalCost;\n}"
}