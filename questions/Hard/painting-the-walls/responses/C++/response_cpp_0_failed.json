{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 93808000,
    "question_id": "2808",
    "elapsed_time": 75,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,3,4,2]\n[1,1,1,1]",
    "expected_output": "4",
    "task_finish_time": 1708943721075,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 551,
    "total_testcases": 2558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1186630789",
    "input_formatted": "[2,3,4,2], [1,1,1,1]",
    "input": "[2,3,4,2]\n[1,1,1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int paintWalls(vector<int>& cost, vector<int>& time) {\n        vector<pair<int, int>> walls(cost.size());\n        for (int i = 0; i < cost.size(); ++i) {\n            walls[i] = {time[i], cost[i]};\n        }\n        // Sort walls based on the time in descending order, if time is equal, sort by cost in ascending order\n        sort(walls.begin(), walls.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n            return a.first > b.first || (a.first == b.first && a.second < b.second);\n        });\n        \n        int totalCost = 0, totalTime = 0, freePainterTime = 0;\n        for (auto& wall : walls) {\n            if (freePainterTime < totalTime) { // Free painter is still painting\n                freePainterTime += 1; // Free painter takes 1 unit of time\n            } else { // Free painter is available or just finished\n                totalTime += wall.first; // Paid painter's time\n                totalCost += wall.second; // Paid painter's cost\n            }\n        }\n        return totalCost;\n    }\n};"
}