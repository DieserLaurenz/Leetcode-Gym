{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 5: exception error: badarg",
    "full_runtime_error": "Line 5: exception error: badarg\n[{erlang,'or',[2,false],[{error_info,#{module => erl_erts_errors}}]},\n {solution,'-paint_walls/2-fun-0-',2,[{file,\"solution.erl\"},{line,5}]},\n {lists,sort,2,[{file,\"lists.erl\"},{line,1210}]},\n {solution,paint_walls,2,[{file,\"solution.erl\"},{line,4}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,30}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,16}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,47}]},\n {init,start_em,1,[]}]",
    "status_runtime": "N/A",
    "memory": 59740000,
    "question_id": "2808",
    "elapsed_time": 1306,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,2]\n[1,2,3,2]",
    "expected_output": "3",
    "task_finish_time": 1708955122407,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1186759007",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec paint_walls(Cost :: [integer()], Time :: [integer()]) -> integer().\npaint_walls(Cost, Time) ->\n    Zipped = lists:zip(Time, Cost),\n    Sorted = lists:sort(fun({Time1, Cost1}, {Time2, Cost2}) -> \n                            Time1 > Time2 or (Time1 == Time2 andalso Cost1 < Cost2) end, Zipped),\n    {Paid, _} = lists:foldl(fun({Time, Cost}, {AccCost, AccTime}) ->\n                                if \n                                    AccTime >= Time -> {AccCost, AccTime + 1};\n                                    true -> {AccCost + Cost, AccTime + Time}\n                                end\n                            end, {0, 0}, Sorted),\n    Paid."
}