{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2252000,
    "question_id": "3238",
    "elapsed_time": 10,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708672435303,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1183770221",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_cost(source: String, target: String, original: Vec<String>, changed: Vec<String>, cost: Vec<i32>) -> i64 {\n        use std::collections::HashMap;\n\n        let n = source.len();\n        let mut dp = vec![vec![i64::MAX; n + 1]; n + 1];\n        let mut map: HashMap<(usize, usize), i64> = HashMap::new();\n\n        for i in 0..original.len() {\n            let (o, c) = (&original[i], &changed[i]);\n            if let Some(index) = source.find(o) {\n                let end = index + o.len();\n                map.insert((index, end), cost[i] as i64);\n            }\n        }\n\n        for i in 0..=n {\n            dp[i][i] = 0;\n        }\n\n        for len in 1..=n {\n            for i in 0..=n-len {\n                let j = i + len;\n                if let Some(&c) = map.get(&(i, j)) {\n                    if &source[i..j] == &target[i..j] {\n                        dp[i][j] = c.min(dp[i][j]);\n                    }\n                }\n                for k in i+1..j {\n                    dp[i][j] = dp[i][j].min(dp[i][k] + dp[k][j]);\n                }\n            }\n        }\n\n        if dp[0][n] == i64::MAX {\n            -1\n        } else {\n            dp[0][n]\n        }\n    }\n}"
}