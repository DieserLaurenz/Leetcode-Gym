{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 620156000,
    "question_id": "3238",
    "elapsed_time": 4037,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708661457855,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1183639101",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(string source, string target, vector<string>& original, vector<string>& changed, vector<int>& cost) {\n        int n = source.length(), m = target.length();\n        vector<vector<long long>> dp(n + 1, vector<long long>(m + 1, LLONG_MAX / 2));\n        dp[0][0] = 0;\n\n        // Map each original string to its cheapest transformation cost\n        unordered_map<string, vector<pair<string, int>>> transform;\n        for (int i = 0; i < original.size(); ++i) {\n            transform[original[i]].push_back({changed[i], cost[i]});\n        }\n\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j <= m; ++j) {\n                // Move to the next character in the source or target without changing\n                if (i < n) dp[i + 1][j] = min(dp[i + 1][j], dp[i][j]);\n                if (j < m) dp[i][j + 1] = min(dp[i][j + 1], dp[i][j]);\n\n                // Attempt to apply transformations\n                for (auto& [orig, vec] : transform) {\n                    int origLen = orig.length();\n                    if (i + origLen <= n && source.substr(i, origLen) == orig) { // If the substring matches original\n                        for (auto& [chg, c] : vec) {\n                            int chgLen = chg.length();\n                            if (j + chgLen <= m && target.substr(j, chgLen) == chg) { // If the change matches target\n                                dp[i + origLen][j + chgLen] = min(dp[i + origLen][j + chgLen], dp[i][j] + c);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[n][m] == LLONG_MAX / 2 ? -1 : dp[n][m];\n    }\n};"
}