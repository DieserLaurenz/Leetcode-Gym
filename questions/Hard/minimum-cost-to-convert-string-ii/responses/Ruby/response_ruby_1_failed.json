{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 222444000,
    "question_id": "3238",
    "elapsed_time": 3395,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708672100788,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 147,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1183766322",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} source\n# @param {String} target\n# @param {String[]} original\n# @param {String[]} changed\n# @param {Integer[]} cost\n# @return {Integer}\ndef minimum_cost(source, target, original, changed, cost)\n  n = source.length\n  dp = Array.new(n + 1, Float::INFINITY)\n  dp[0] = 0\n  (1..n).each do |i|\n    dp[i] = dp[i - 1] + (source[i - 1] == target[i - 1] ? 0 : Float::INFINITY)\n    original.each_with_index do |o, idx|\n      next unless i >= o.length && source[i - o.length, o.length] == o\n      c = changed[idx]\n      next unless target[i - c.length, c.length] == c\n      dp[i] = [dp[i], dp[i - o.length] + cost[idx]].min\n    end\n  end\n  dp[n] == Float::INFINITY ? -1 : dp[n]\nend"
}