{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 24: exception error: function_clause",
    "full_runtime_error": "Line 24: exception error: function_clause\n[{lists,prefix,[<<\"a\">>,\"abcd\"],[{file,\"lists.erl\"},{line,229}]},\n {solution,'-find_min_operation/3-fun-0-',4,\n              [{file,\"solution.erl\"},{line,24}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,find_min_operation,3,[{file,\"solution.erl\"},{line,22}]},\n {solution,find_min_cost,4,[{file,\"solution.erl\"},{line,14}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,70}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,50}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,87}]}]",
    "status_runtime": "N/A",
    "memory": 62240000,
    "question_id": "3238",
    "elapsed_time": 1279,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708672755155,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1183773905",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec minimum_cost(Source :: unicode:unicode_binary(), Target :: unicode:unicode_binary(), Original :: [unicode:unicode_binary()], Changed :: [unicode:unicode_binary()], Cost :: [integer()]) -> integer().\nminimum_cost(Source, Target, Original, Changed, Cost) ->\n    {SourceList, TargetList} = {binary_to_list(Source), binary_to_list(Target)},\n    Ops = lists:zip3(Original, Changed, Cost),\n    MinCost = find_min_cost(SourceList, TargetList, Ops, 0),\n    case MinCost of\n        infinity -> -1;\n        _ -> MinCost\n    end.\n\nfind_min_cost(_, [], _, Cost) ->\n    Cost;\nfind_min_cost(Source, Target, Ops, AccumulatedCost) ->\n    case find_min_operation(Source, Target, Ops) of\n        {ok, {Cost, SourceAfterOp, TargetAfterOp}} ->\n            find_min_cost(SourceAfterOp, TargetAfterOp, Ops, AccumulatedCost + Cost);\n        error ->\n            infinity\n    end.\n\nfind_min_operation(Source, [T|TargetRest], Ops) ->\n    MinOp = lists:foldl(\n        fun({Orig, Changed, Cost}, Acc) ->\n            case lists:prefix(Orig, Source) andalso lists:prefix(Changed, [T|TargetRest]) of\n                true ->\n                    SourceAfterOp = lists:nthtail(length(Orig), Source),\n                    TargetAfterOp = lists:nthtail(length(Changed), [T|TargetRest]),\n                    case Acc of\n                        {ok, {AccCost, _, _}} when Cost < AccCost ->\n                            {ok, {Cost, SourceAfterOp, TargetAfterOp}};\n                        {ok, _} ->\n                            Acc;\n                        error ->\n                            {ok, {Cost, SourceAfterOp, TargetAfterOp}}\n                    end;\n                false ->\n                    Acc\n            end\n        end,\n        error,\n        Ops\n    ),\n    case MinOp of\n        {ok, _} = Op -> Op;\n        error -> find_min_operation(tl(Source), [T|TargetRest], Ops)\n    end."
}