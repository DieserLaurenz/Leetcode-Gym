{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59976000,
    "question_id": "3238",
    "elapsed_time": 4261,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671092625,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1183754023",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "var minimumCost = function(source, target, original, changed, cost) {\n    const m = original.length;\n    const dp = Array(source.length + 1).fill(0);\n    for (let i = 1; i <= source.length; i++) dp[i] = dp[i - 1] + 1e9;\n    const costMap = new Map();\n    for (let i = 0; i < m; i++) {\n        if (!costMap.has(original[i])) costMap.set(original[i], []);\n        costMap.get(original[i]).push({ changed: changed[i], cost: cost[i] });\n    }\n    for (let i = 0; i < source.length; i++) {\n        for (let j = i + 1; j <= source.length; j++) {\n            const sub = source.slice(i, j);\n            if (costMap.has(sub)) {\n                for (const { changed, cost } of costMap.get(sub)) {\n                    let k = 0;\n                    for (; k < changed.length && i + k < target.length; k++) {\n                        if (target[i + k] !== changed[k]) break;\n                    }\n                    if (k === changed.length && dp[i] + cost < dp[j]) dp[j] = dp[i] + cost;\n                }\n            }\n        }\n    }\n    return dp[source.length] >= 1e9 ? -1 : dp[source.length];\n};"
}