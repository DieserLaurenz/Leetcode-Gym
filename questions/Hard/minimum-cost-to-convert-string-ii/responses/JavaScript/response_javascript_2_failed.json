{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58924000,
    "question_id": "3238",
    "elapsed_time": 467,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671125023,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 225,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1183754475",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "var minimumCost = function(source, target, original, changed, cost) {\n    const n = source.length;\n    const dp = new Array(n + 1).fill(Infinity);\n    dp[0] = 0; // base case\n\n    for (let i = 0; i < n; i++) {\n        if (dp[i] === Infinity) continue;\n        for (let j = 0; j < original.length; j++) {\n            const orig = original[j];\n            const chng = changed[j];\n            const cst = cost[j];\n            const len = orig.length;\n            if (i + len <= n && source.slice(i, i + len) === orig) {\n                let k = i;\n                while (k < n && k - i < chng.length && target[k] === chng[k - i]) {\n                    k++;\n                }\n                if (k - i === len) {\n                    dp[k] = Math.min(dp[k], dp[i] + cst);\n                }\n            }\n        }\n    }\n\n    return dp[n] === Infinity ? -1 : dp[n];\n};"
}