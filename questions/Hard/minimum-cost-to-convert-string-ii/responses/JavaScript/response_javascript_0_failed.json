{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58532000,
    "question_id": "3238",
    "elapsed_time": 522,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671048663,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1183753556",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "var minimumCost = function(source, target, original, changed, cost) {\n    const n = source.length;\n    let dp = Array(n + 1).fill(Infinity);\n    dp[0] = 0;\n    for (let i = 1; i <= n; ++i) {\n        dp[i] = dp[i - 1];\n        for (let j = 0; j < original.length; ++j) {\n            const len = original[j].length;\n            if (i >= len && source.substr(i - len, len) === original[j] && target.substr(i - len, len) === changed[j]) {\n                dp[i] = Math.min(dp[i], dp[i - len] + cost[j]);\n            }\n        }\n    }\n    return dp[n] === Infinity ? -1 : dp[n];\n};"
}