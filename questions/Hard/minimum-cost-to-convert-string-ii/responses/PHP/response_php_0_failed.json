{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20296000,
    "question_id": "3238",
    "elapsed_time": 1619,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671329573,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 225,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1183756970",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $source\n     * @param String $target\n     * @param String[] $original\n     * @param String[] $changed\n     * @param Integer[] $cost\n     * @return Integer\n     */\n    function minimumCost($source, $target, $original, $changed, $cost) {\n        $n = strlen($source);\n        $dp = array_fill(0, $n + 1, PHP_INT_MAX);\n        $dp[0] = 0;\n        \n        for ($i = 0; $i < $n; $i++) {\n            if ($dp[$i] == PHP_INT_MAX) continue;\n            foreach ($original as $idx => $orig) {\n                $len = strlen($orig);\n                $sub = substr($source, $i, $len);\n                if ($sub == $orig && substr($target, $i, $len) == $changed[$idx]) {\n                    $dp[$i + $len] = min($dp[$i + $len], $dp[$i] + $cost[$idx]);\n                }\n            }\n        }\n        \n        return $dp[$n] == PHP_INT_MAX ? -1 : $dp[$n];\n    }\n}"
}