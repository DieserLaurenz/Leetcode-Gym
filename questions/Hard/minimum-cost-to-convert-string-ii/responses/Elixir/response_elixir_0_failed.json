{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 23: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 23: ** (ArgumentError) errors were found at the given arguments:\n  * 2nd argument: not a tuple\n    :erlang.element(3, 0)\n    solution.ex:23: anonymous fn/6 in Solution.minimum_cost/5\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:19: anonymous fn/6 in Solution.minimum_cost/5\n    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2\n    solution.ex:16: anonymous fn/6 in Solution.minimum_cost/5\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75740000,
    "question_id": "3238",
    "elapsed_time": 393,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708672932998,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1183776026",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_cost(source :: String.t, target :: String.t, original :: [String.t], changed :: [String.t], cost :: [integer]) :: integer\n  def minimum_cost(source, target, original, changed, cost) do\n    transform_map = Enum.zip(original, Enum.zip(changed, cost))\n    |> Enum.group_by(fn {o, _} -> o end, fn {_, {c, co}} -> {c, co} end)\n\n    dp = for _ <- 0..String.length(source), do: :erlang.make_tuple(String.length(source) + 1, -1)\n    dp = List.update_at(dp, 0, fn _ -> :erlang.make_tuple(String.length(source) + 1, 0) end)\n\n    for i <- 0..String.length(source)-1 do\n      dp = List.update_at(dp, i + 1, fn _ -> \n        dp_elem = elem(Enum.at(dp, i), i + 1)\n        if dp_elem != -1, do: dp_elem, else: 0\n      end)\n\n      for j <- i..String.length(source)-1 do\n        sub_source = String.slice(source, i, j - i + 1)\n        if Map.has_key?(transform_map, sub_source) do\n          for {c, co} <- Map.fetch!(transform_map, sub_source) do\n            if String.slice(target, i, j - i + 1) == c do\n              prev_cost = if elem(Enum.at(dp, i), i) == -1, do: 0, else: elem(Enum.at(dp, i), i)\n              new_cost = if prev_cost == -1, do: -1, else: prev_cost + co\n              if elem(Enum.at(dp, j + 1), j + 1) == -1 or (new_cost < elem(Enum.at(dp, j + 1), j + 1) and new_cost != -1) do\n                dp = List.update_at(dp, j + 1, fn _ -> \n                  :erlang.setelement(i + 1, Enum.at(dp, j + 1), new_cost)\n                end)\n              end\n            end\n          end\n        end\n      end\n    end\n\n    if elem(Enum.at(dp, String.length(source)), String.length(source)) == -1, do: -1, else: elem(Enum.at(dp, String.length(source)), String.length(source))\n  end\nend"
}