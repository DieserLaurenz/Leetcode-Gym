{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20280000,
    "question_id": "3238",
    "elapsed_time": 3011,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671962579,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183764699",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumCost(source string, target string, original []string, changed []string, cost []int) int64 {\n    // Map to store minimum cost to change a string from original to changed\n    changeCost := make(map[string]int64)\n    for i, o := range original {\n        c := changed[i]\n        // Key for the map\n        key := o + \"->\" + c\n        if val, ok := changeCost[key]; !ok || val > int64(cost[i]) {\n            changeCost[key] = int64(cost[i])\n        }\n    }\n\n    n := len(source)\n    m := len(target)\n\n    // dp array to store the minimum cost to change source[0...i] to target[0...j]\n    dp := make([][]int64, n+1)\n    for i := range dp {\n        dp[i] = make([]int64, m+1)\n        for j := range dp[i] {\n            dp[i][j] = 1e18 // Initialize with a large value\n        }\n    }\n\n    dp[0][0] = 0 // No cost to change empty string to empty string\n\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= m; j++ {\n            // If both characters are same, no cost to change\n            if i < n && j < m && source[i] == target[j] {\n                dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j])\n            }\n            // Try changing source[i...k] to target[j...l] for all possible k and l\n            for k := i; k < n; k++ {\n                for l := j; l < m; l++ {\n                    orig := source[i : k+1]\n                    chng := target[j : l+1]\n                    key := orig + \"->\" + chng\n                    if cost, ok := changeCost[key]; ok {\n                        dp[k+1][l+1] = min(dp[k+1][l+1], dp[i][j]+cost)\n                    }\n                }\n            }\n        }\n    }\n\n    if dp[n][m] == 1e18 {\n        return -1\n    }\n    return dp[n][m]\n}\n\nfunc min(a, b int64) int64 {\n    if a < b {\n        return a\n    }\n    return b\n}"
}