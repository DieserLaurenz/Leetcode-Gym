{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53700000,
    "question_id": "3238",
    "elapsed_time": 1015,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708672004236,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 257,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183765210",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumCost(source string, target string, original []string, changed []string, cost []int) int64 {\n    inf := int64(1e9 + 7)\n    n := len(source)\n    dp := make([][]int64, n+1)\n    for i := range dp {\n        dp[i] = make([]int64, n+1)\n        for j := range dp[i] {\n            dp[i][j] = inf\n        }\n    }\n    dp[0][0] = 0\n\n    for i := 0; i <= n; i++ {\n        for j := 0; j <= i; j++ {\n            if dp[i][j] == inf {\n                continue\n            }\n            if i < n && j < n && source[i] == target[j] {\n                dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j])\n            }\n            for k := 0; k < len(original); k++ {\n                if i+len(original[k]) <= n && j+len(changed[k]) <= n {\n                    if source[i:i+len(original[k])] == original[k] && target[j:j+len(changed[k])] == changed[k] {\n                        dp[i+len(original[k])][j+len(changed[k])] = min(dp[i+len(original[k])][j+len(changed[k])], dp[i][j]+int64(cost[k]))\n                    }\n                }\n            }\n        }\n    }\n\n    ans := inf\n    for i := 0; i <= n; i++ {\n        ans = min(ans, dp[n][i])\n    }\n\n    if ans == inf {\n        return -1\n    }\n    return ans\n}\n\nfunc min(a, b int64) int64 {\n    if a < b {\n        return a\n    }\n    return b\n}"
}