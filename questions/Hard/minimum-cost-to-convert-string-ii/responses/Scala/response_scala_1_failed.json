{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58368000,
    "question_id": "3238",
    "elapsed_time": 1670,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708672320080,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 257,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183768881",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(source: String, target: String, original: Array[String], changed: Array[String], cost: Array[Int]): Long = {\n        val n = source.length\n        val m = original.length\n        val dp = Array.fill(n + 1)(Long.MaxValue / 2)\n        dp(0) = 0\n\n        for (i <- 1 to n) {\n            if (source(i - 1) == target(i - 1)) dp(i) = dp(i - 1)\n            for (j <- 0 until m) {\n                if (original(j).length <= i) {\n                    val startIdx = i - original(j).length\n                    if (source.substring(startIdx, i) == original(j) && target.substring(startIdx, i) == changed(j)) {\n                        dp(i) = Math.min(dp(i), dp(startIdx) + cost(j))\n                    }\n                }\n            }\n        }\n\n        if (dp(n) >= Long.MaxValue / 2) -1 else dp(n)\n    }\n}"
}