{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "java.lang.IllegalArgumentException: Error when serializing long: -9223372036854775784 out of range [-(2^53-1), 2^53-1]",
    "full_runtime_error": "java.lang.IllegalArgumentException: Error when serializing long: -9223372036854775784 out of range [-(2^53-1), 2^53-1]\nLine 29: precompiled.Serializer$.serialize (Serializer.scala)\nLine 50: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 54560000,
    "question_id": "3238",
    "elapsed_time": 767,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708672286348,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183768487",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(source: String, target: String, original: Array[String], changed: Array[String], cost: Array[Int]): Long = {\n        val n = source.length\n        val dp = Array.fill(n + 1)(Long.MaxValue)\n        dp(0) = 0\n\n        for (i <- 1 to n) {\n            dp(i) = dp(i - 1) + (if (source(i - 1) == target(i - 1)) 0 else Long.MaxValue)\n            for (j <- original.indices) {\n                if (i >= original(j).length && source.substring(i - original(j).length, i) == original(j)) {\n                    val targetSubstring = target.substring(i - original(j).length, i)\n                    if (targetSubstring == changed(j) && dp(i - original(j).length) != Long.MaxValue) {\n                        dp(i) = Math.min(dp(i), dp(i - original(j).length) + cost(j))\n                    }\n                }\n            }\n        }\n\n        if (dp(n) == Long.MaxValue) -1 else dp(n)\n    }\n}"
}