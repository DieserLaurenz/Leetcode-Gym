{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54960000,
    "question_id": "3238",
    "elapsed_time": 723,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708672374830,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183769501",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(source: String, target: String, original: Array[String], changed: Array[String], cost: Array[Int]): Long = {\n        val n = source.length\n        val operations = original.zip(changed).zip(cost).map { case ((o, c), co) => (o, c, co) }\n\n        // Dynamic programming table to store the minimum cost to convert the first i characters of source to target\n        val dp = Array.fill(n + 1)(Long.MaxValue)\n        dp(0) = 0 // Cost to convert 0 characters is 0\n\n        for (i <- 1 to n) {\n            // Try converting source to target directly character by character if they are different\n            if (source(i - 1) == target(i - 1)) dp(i) = dp(i - 1) // No cost if characters are the same\n\n            // Try using operations to convert source to target\n            for ((o, c, co) <- operations) {\n                if (i >= o.length) {\n                    val startIndex = i - o.length\n                    // Check if the operation can be applied: the substring matches and the target can be achieved\n                    if (source.substring(startIndex, i) == o && target.substring(startIndex, i) == c) {\n                        // Update the cost if this operation provides a lower cost solution\n                        dp(i) = Math.min(dp(i), dp(startIndex) + co)\n                    }\n                }\n            }\n        }\n\n        if (dp(n) == Long.MaxValue) -1 else dp(n)\n    }\n}"
}