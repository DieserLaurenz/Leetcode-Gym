{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66752000,
    "display_runtime": "608",
    "question_id": "3238",
    "elapsed_time": 1490,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708661661207,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 257,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1183641241",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minimumCost(String source, String target, String[] original, String[] changed, int[] cost) {\n        int n = source.length();\n        long[][] dp = new long[n + 1][n + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= n; j++) {\n                dp[i][j] = Long.MAX_VALUE;\n            }\n        }\n        dp[0][0] = 0; // cost of converting empty prefix is 0\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= i; j++) {\n                if (dp[i][j] == Long.MAX_VALUE) continue; // skip impossible states\n                \n                // Try to extend the current match without any operation\n                if (j < n && source.charAt(i) == target.charAt(j)) {\n                    dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i][j]);\n                }\n                \n                // Try all possible operations\n                for (int k = 0; k < original.length; k++) {\n                    if (i + original[k].length() <= n && source.startsWith(original[k], i)) {\n                        int newSourceLen = i + original[k].length();\n                        int newTargetLen = j + changed[k].length();\n                        if (newTargetLen <= n && target.startsWith(changed[k], j)) {\n                            dp[newSourceLen][newTargetLen] = Math.min(dp[newSourceLen][newTargetLen], dp[i][j] + cost[k]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        long minCost = Long.MAX_VALUE;\n        for (int i = 0; i <= n; i++) {\n            minCost = Math.min(minCost, dp[n][i]);\n        }\n        \n        return minCost == Long.MAX_VALUE ? -1 : minCost;\n    }\n}"
}