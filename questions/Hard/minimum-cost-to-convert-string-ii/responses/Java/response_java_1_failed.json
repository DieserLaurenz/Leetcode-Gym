{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67660000,
    "question_id": "3238",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708661619046,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 147,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1183640793",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.HashMap;\nimport java.util.Arrays;\n\nclass Solution {\n    public long minimumCost(String source, String target, String[] original, String[] changed, int[] cost) {\n        if (source.equals(target)) return 0;\n\n        int n = source.length();\n        long[][] dp = new long[n + 1][n + 1];\n        for (long[] row : dp) Arrays.fill(row, Long.MAX_VALUE);\n        dp[0][0] = 0; // Cost of transforming 0 characters to match is 0.\n\n        // Mapping transformation costs\n        HashMap<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < original.length; ++i) {\n            String key = original[i] + \"->\" + changed[i];\n            if (!map.containsKey(key) || map.get(key) > cost[i]) {\n                map.put(key, cost[i]);\n            }\n        }\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= i; ++j) {\n                if (dp[i][j] == Long.MAX_VALUE) continue;\n                // Match next character without transformation\n                if (j < n && source.charAt(i) == target.charAt(j)) {\n                    dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i][j]);\n                }\n                // Try all possible transformations\n                for (String key : map.keySet()) {\n                    String[] parts = key.split(\"->\");\n                    String orig = parts[0];\n                    String chng = parts[1];\n                    int origLen = orig.length();\n                    int chngLen = chng.length();\n                    if (i + origLen <= n && j + chngLen <= n && source.startsWith(orig, i) && target.startsWith(chng, j)) {\n                        dp[i + origLen][j + chngLen] = Math.min(dp[i + origLen][j + chngLen], dp[i][j] + map.get(key));\n                    }\n                }\n            }\n        }\n\n        long ans = Long.MAX_VALUE;\n        for (int i = 0; i <= n; ++i) {\n            ans = Math.min(ans, dp[n][i]);\n        }\n\n        return ans == Long.MAX_VALUE ? -1 : ans;\n    }\n}"
}