{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67900000,
    "question_id": "3238",
    "elapsed_time": 4012,
    "compare_result": "00100100000000000000001001110000000000100100001111111111111111111100001000100011000011110000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708661576466,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 40,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1183640371",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minimumCost(String source, String target, String[] original, String[] changed, int[] cost) {\n        int n = source.length();\n        long[][] dp = new long[n + 1][n + 1];\n        // Initialize dp array\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= n; j++) {\n                dp[i][j] = i == j ? 0 : Long.MAX_VALUE;\n            }\n        }\n        \n        // Fill the dp table\n        for (int i = 0; i < original.length; i++) {\n            int index = source.indexOf(original[i]);\n            while (index != -1) {\n                int end = index + original[i].length();\n                if (source.substring(index, end).equals(original[i]) && target.substring(index, end).equals(changed[i])) {\n                    for (int j = 0; j <= index; j++) {\n                        if (dp[j][index] != Long.MAX_VALUE) {\n                            dp[j][end] = Math.min(dp[j][end], dp[j][index] + cost[i]);\n                        }\n                    }\n                }\n                index = source.indexOf(original[i], index + 1);\n            }\n        }\n        \n        long minCost = Long.MAX_VALUE;\n        for (int i = 0; i <= n; i++) {\n            if (dp[i][n] < minCost) {\n                minCost = dp[i][n];\n            }\n        }\n        \n        // Check if conversion is possible\n        for (int i = 0; i < n; i++) {\n            if (!source.substring(i, i + 1).equals(target.substring(i, i + 1)) && dp[i][i + 1] == Long.MAX_VALUE) {\n                return -1;\n            }\n        }\n        \n        return minCost == Long.MAX_VALUE ? -1 : minCost;\n    }\n}"
}