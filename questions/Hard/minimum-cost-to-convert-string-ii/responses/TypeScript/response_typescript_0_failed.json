{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60496000,
    "question_id": "3238",
    "elapsed_time": 134,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671196271,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 67,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1183755348",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumCost(source: string, target: string, original: string[], changed: string[], cost: number[]): number {\n    const n = source.length;\n    const dp: number[] = new Array(n + 1).fill(Infinity);\n    dp[0] = 0;\n\n    for (let i = 0; i < n; i++) {\n        if (dp[i] !== Infinity) {\n            for (let j = 0; j < original.length; j++) {\n                if (source.startsWith(original[j], i) && i + original[j].length <= n) {\n                    const newTarget = source.substring(0, i) + changed[j] + source.substring(i + original[j].length);\n                    if (target.startsWith(newTarget.substring(0, i + changed[j].length))) {\n                        dp[i + original[j].length] = Math.min(dp[i + original[j].length], dp[i] + cost[j]);\n                    }\n                }\n            }\n        }\n    }\n\n    return dp[n] === Infinity ? -1 : dp[n];\n}"
}