{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60104000,
    "question_id": "3238",
    "elapsed_time": 102,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671268354,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 67,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1183756208",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumCost(source: string, target: string, original: string[], changed: string[], cost: number[]): number {\n    const m = original.length;\n    const n = source.length;\n    const dp = Array(n + 1).fill(Infinity);\n    dp[0] = 0; // Cost of converting an empty string to an empty string is 0.\n\n    for (let i = 0; i < n; i++) {\n        if (dp[i] !== Infinity) {\n            for (let j = 0; j < m; j++) {\n                const orig = original[j];\n                const chng = changed[j];\n                const cst = cost[j];\n                if (i + orig.length <= n && source.substr(i, orig.length) === orig) {\n                    let k = i + orig.length;\n                    let tempTarget = source.substring(0, i) + chng + source.substring(k);\n                    if (target.startsWith(tempTarget.substring(0, k))) {\n                        dp[k] = Math.min(dp[k], dp[i] + cst);\n                    }\n                }\n            }\n        }\n    }\n\n    // Final check if target can be formed and calculate minimum cost\n    if (dp[n] === Infinity || source === target && dp[n] > 0) {\n        return -1; // If it's impossible to form target from source or no operations needed but cost is positive\n    } else {\n        return dp[n];\n    }\n}"
}