{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61700000,
    "question_id": "3238",
    "elapsed_time": 923,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671237297,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 67,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1183755819",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumCost(source: string, target: string, original: string[], changed: string[], cost: number[]): number {\n    // Initialize dp array to store the minimum cost to convert source[0..i] to target[0..i]\n    let dp: number[] = new Array(source.length + 1).fill(Infinity);\n    dp[0] = 0; // Base case: cost of converting empty string to empty string is 0\n\n    // Preprocessing: Create a map for faster lookup of conversion options and costs\n    let conversionMap: Map<string, {target: string, cost: number}[]> = new Map();\n    for (let i = 0; i < original.length; i++) {\n        if (!conversionMap.has(original[i])) {\n            conversionMap.set(original[i], []);\n        }\n        conversionMap.get(original[i])!.push({target: changed[i], cost: cost[i]});\n    }\n\n    // Dynamic programming to find minimum cost\n    for (let i = 0; i < source.length; i++) {\n        if (dp[i] === Infinity) continue; // Skip if no valid conversion found so far\n        for (let j = i + 1; j <= source.length; j++) {\n            let substr = source.slice(i, j);\n            if (conversionMap.has(substr)) {\n                for (let conversion of conversionMap.get(substr)!) {\n                    let nextIndex = i + conversion.target.length;\n                    // Ensure the converted string aligns with the target up to the next index\n                    if (target.startsWith(source.substring(0, i) + conversion.target, 0)) {\n                        dp[nextIndex] = Math.min(dp[nextIndex], dp[i] + conversion.cost);\n                    }\n                }\n            }\n        }\n    }\n\n    // Check if conversion is possible\n    if (dp[source.length] === Infinity || source === target) {\n        return source === target ? 0 : -1; // If source is already equal to target, cost is 0; otherwise, -1 if conversion is impossible\n    }\n\n    // Attempt direct conversions that may lead to the target string without intermediate steps\n    for (let i = 0; i < original.length; i++) {\n        if (source === original[i] && target === changed[i]) {\n            return Math.min(dp[source.length], cost[i]); // Return the lesser of the DP result or direct conversion cost\n        }\n    }\n\n    return dp[source.length]; // Return the minimum cost to convert source to target\n}"
}