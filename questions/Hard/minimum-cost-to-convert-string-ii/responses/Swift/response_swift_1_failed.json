{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16004000,
    "question_id": "3238",
    "elapsed_time": 5164,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671513592,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1183759180",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumCost(_ source: String, _ target: String, _ original: [String], _ changed: [String], _ cost: [Int]) -> Int {\n        let n = source.count\n        var dp = Array(repeating: Array(repeating: Int.max, count: n + 1), count: n + 1)\n        dp[0][0] = 0\n        \n        for i in 0...n {\n            for j in 0...n {\n                if i > 0 {\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j])\n                }\n                if j > 0 {\n                    dp[i][j] = min(dp[i][j], dp[i][j - 1])\n                }\n                for k in 0..<original.count {\n                    if i >= original[k].count, j >= changed[k].count {\n                        let sourceEnd = source.index(source.startIndex, offsetBy: i)\n                        let sourceStart = source.index(sourceEnd, offsetBy: -original[k].count)\n                        let targetEnd = target.index(target.startIndex, offsetBy: j)\n                        let targetStart = target.index(targetEnd, offsetBy: -changed[k].count)\n                        \n                        if String(source[sourceStart..<sourceEnd]) == original[k], String(target[targetStart..<targetEnd]) == changed[k] {\n                            dp[i][j] = min(dp[i][j], dp[i - original[k].count][j - changed[k].count] + cost[k])\n                        }\n                    }\n                }\n            }\n        }\n        \n        return dp[n][n] == Int.max ? -1 : dp[n][n]\n    }\n}"
}