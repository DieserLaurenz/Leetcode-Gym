{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18856000,
    "question_id": "3238",
    "elapsed_time": 653,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671562342,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1183759800",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minimumCost(_ source: String, _ target: String, _ original: [String], _ changed: [String], _ cost: [Int]) -> Int {\n        let n = source.count\n        var dp = Array(repeating: Int.max, count: n + 1)\n        dp[0] = 0\n        \n        let s = Array(source), t = Array(target)\n        \n        for i in 1...n {\n            dp[i] = dp[i-1] + (s[i-1] == t[i-1] ? 0 : Int.max / 2)\n            for j in 0..<original.count {\n                if i >= original[j].count {\n                    let substr = String(s[i-original[j].count..<i])\n                    if substr == original[j] {\n                        let index = s[0..<i-original[j].count].lastIndex(of: t[i-1])\n                        if index != nil || changed[j].last == t[i-1] {\n                            let k = index != nil ? s.distance(from: s.startIndex, to: index!) + 1 : i - original[j].count\n                            dp[i] = min(dp[i], dp[k] + cost[j])\n                        }\n                    }\n                }\n            }\n        }\n        \n        var minCost = Int.max\n        for i in 0...n {\n            if String(t[0..<i]) == String(s[0..<i]) {\n                minCost = min(minCost, dp[i])\n            }\n        }\n        \n        return minCost == Int.max ? -1 : minCost\n    }\n}"
}