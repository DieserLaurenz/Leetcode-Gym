{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11884000,
    "question_id": "3238",
    "elapsed_time": 11010,
    "compare_result": "00111100000000000000001001110000000000100100001111111111111111111100001000100011000011110000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000010000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708903268841,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186203366",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, source, target, original, changed, cost):\n        if source == target:\n            return 0\n\n        # Map each original string to a list of tuples containing the changed string and its cost\n        transformation = {}\n        for o, c, co in zip(original, changed, cost):\n            if o in transformation:\n                transformation[o].append((c, co))\n            else:\n                transformation[o] = [(c, co)]\n\n        # Dynamic programming table\n        dp = [float('inf')] * (len(source) + 1)\n        dp[0] = 0  # Base case: cost of transforming an empty string to an empty string is 0\n\n        for i in range(1, len(source) + 1):\n            for j in range(i):\n                sub = source[j:i]\n                if sub in transformation:\n                    for change, co in transformation[sub]:\n                        if target.startswith(source[:j] + change, 0):\n                            dp[i] = min(dp[i], dp[j] + co)\n\n        return dp[len(source)] if dp[len(source)] != float('inf') else -1"
}