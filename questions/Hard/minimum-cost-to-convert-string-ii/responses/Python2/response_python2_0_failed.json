{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12428000,
    "question_id": "3238",
    "elapsed_time": 414,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708903182994,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 47,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186202798",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, source, target, original, changed, cost):\n        from collections import defaultdict\n        dp = defaultdict(lambda: float('inf'))\n        dp[0, source] = 0\n        \n        for i in range(len(source)):\n            dp_new = defaultdict(lambda: float('inf'))\n            for (j, cur_source), cur_cost in dp.items():\n                if j > i:\n                    continue\n                if cur_source[i] == target[i]:\n                    dp_new[j, cur_source] = min(dp_new[j, cur_source], cur_cost)\n                for k in range(len(original)):\n                    if i + len(original[k]) <= len(source) and cur_source[i:i+len(original[k])] == original[k] and cur_source[:i] + changed[k] + cur_source[i+len(original[k]):] == cur_source[:i] + target[i:i+len(original[k])] + cur_source[i+len(original[k]):]:\n                        new_source = cur_source[:i] + changed[k] + cur_source[i+len(original[k]):]\n                        dp_new[i+len(original[k]), new_source] = min(dp_new[i+len(original[k]), new_source], cur_cost + cost[k])\n            dp = dp_new\n        \n        result = float('inf')\n        for key, value in dp.items():\n            if key[1] == target:\n                result = min(result, value)\n        \n        return result if result != float('inf') else -1"
}