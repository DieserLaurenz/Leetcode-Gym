{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19768000,
    "question_id": "3238",
    "elapsed_time": 11017,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708903226158,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 159,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186203022",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, source, target, original, changed, cost):\n        n = len(source)\n        dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 0\n\n        for i in range(n + 1):\n            for j in range(i, n + 1):\n                if dp[i][j] < float('inf'):\n                    if j < n and source[j] == target[j]:\n                        dp[i][j + 1] = min(dp[i][j + 1], dp[i][j])\n                    for k in range(len(original)):\n                        if original[k] == source[j:j + len(original[k])] and j + len(original[k]) <= n and target.startswith(changed[k], j) and (i <= j or (i > j and changed[k] == target[i:i + len(changed[k])])):\n                            dp[j + len(original[k])][j + len(original[k])] = min(dp[j + len(original[k])][j + len(original[k])], dp[i][j] + cost[k])\n\n        return dp[n][n] if dp[n][n] != float('inf') else -1"
}