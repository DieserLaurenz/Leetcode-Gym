{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16684000,
    "question_id": "3238",
    "elapsed_time": 11014,
    "compare_result": "00110100000000000000001001110000000000100100001111111111111111111100001000100011000011110000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100000000000000000000100000110000000000000000011111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708911495609,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 146,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186269369",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        n = len(source)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        change_map = {}\n        for o, c, co in zip(original, changed, cost):\n            if o not in change_map or co < change_map[o][1]:\n                change_map[o] = (c, co)\n        \n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1] + (source[i - 1] != target[i - 1]) * 1000000  # Large cost for direct character change\n            for j in range(i):\n                orig = source[j:i]\n                if orig in change_map:\n                    changed_str, change_cost = change_map[orig]\n                    if target.startswith(changed_str, j) and len(changed_str) <= i - j:\n                        dp[i] = min(dp[i], dp[j] + change_cost)\n        \n        if dp[n] >= 1000000:\n            return -1\n        return dp[n]"
}