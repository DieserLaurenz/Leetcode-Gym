{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17060000,
    "question_id": "3238",
    "elapsed_time": 11010,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708911595535,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186270148",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minimumCost(self, source: str, target: str, original: List[str], changed: List[str], cost: List[int]) -> int:\n        # Dynamic programming approach to find the minimum cost\n        n = len(source)\n        m = len(original)\n        dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][i] = 0  # No cost to convert a string to itself\n\n        # Preprocess the costs for direct replacements\n        direct_cost = {}\n        for i in range(m):\n            if original[i] not in direct_cost or cost[i] < direct_cost[original[i]][1]:\n                direct_cost[original[i]] = (changed[i], cost[i])\n\n        for length in range(1, n + 1):\n            for start in range(n - length + 1):\n                end = start + length\n                # Check if direct replacement is possible and cheaper\n                for i in range(m):\n                    if source[start:end] == original[i] and target[start:start+len(changed[i])] == changed[i] and len(source[start:end]) == len(original[i]):\n                        dp[start][end] = min(dp[start][end], dp[start][start] + cost[i])\n                # Try splitting the interval into two\n                for mid in range(start + 1, end):\n                    dp[start][end] = min(dp[start][end], dp[start][mid] + dp[mid][end])\n\n        # Convert the entire source to target\n        result = dp[0][n]\n        return -1 if result == float('inf') else result"
}