{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128772000,
    "question_id": "3238",
    "elapsed_time": 4030,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708661930924,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1183644137",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinimumCost(string source, string target, string[] original, string[] changed, int[] cost) {\n        if (source == target) return 0;\n\n        int n = source.Length;\n        var dp = new long[n + 1];\n        for (int i = 0; i <= n; i++) dp[i] = long.MaxValue;\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == long.MaxValue) continue;\n            for (int j = 0; j < original.Length; j++) {\n                string ori = original[j], cha = changed[j];\n                int oriLen = ori.Length;\n                if (i + oriLen <= n && source.Substring(i, oriLen) == ori) {\n                    int idx = source.IndexOf(ori, i);\n                    while (idx != -1 && idx + oriLen <= n) {\n                        string tempSource = source.Substring(0, idx) + cha + source.Substring(idx + oriLen);\n                        int tempIdx = tempSource.IndexOf(target.Substring(0, i + oriLen), 0);\n                        if (tempIdx == 0) {\n                            dp[i + oriLen] = Math.Min(dp[i + oriLen], dp[i] + cost[j]);\n                        }\n                        if (idx + oriLen < n) {\n                            idx = source.IndexOf(ori, idx + 1);\n                        } else break;\n                    }\n                }\n            }\n        }\n\n        return dp[n] == long.MaxValue ? -1 : dp[n];\n    }\n}"
}