{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 139488000,
    "question_id": "3238",
    "elapsed_time": 1316,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708661852623,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 257,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1183643295",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinimumCost(string source, string target, string[] original, string[] changed, int[] cost) {\n        int n = source.Length;\n        long[,] dp = new long[n + 1, n + 1];\n        const long INF = long.MaxValue / 2;\n\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= n; j++) {\n                dp[i, j] = INF;\n            }\n        }\n\n        dp[0, 0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= i; j++) {\n                if (dp[i, j] == INF) continue;\n                // No operation, move to next if characters are equal\n                if (source[i] == target[j]) {\n                    dp[i + 1, j + 1] = Math.Min(dp[i + 1, j + 1], dp[i, j]);\n                }\n                // Try all operations\n                for (int k = 0; k < original.Length; k++) {\n                    int len = original[k].Length;\n                    if (i + len <= n && j + len <= n && source.Substring(i, len) == original[k] && target.Substring(j, len) == changed[k]) {\n                        dp[i + len, j + len] = Math.Min(dp[i + len, j + len], dp[i, j] + cost[k]);\n                    }\n                }\n                // Allow skipping characters in target\n                dp[i, j + 1] = Math.Min(dp[i, j + 1], dp[i, j]);\n            }\n        }\n\n        return dp[n, n] == INF ? -1 : dp[n, n];\n    }\n}"
}