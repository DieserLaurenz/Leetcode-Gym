{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 23: Char 27: Error: The getter 'Math' isn't defined for the class 'Solution'.",
    "full_runtime_error": "Line 23: Char 27: Error: The getter 'Math' isn't defined for the class 'Solution'.\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'Math'.\n                dp[end] = Math.min(dp[end], dp[start] + conversionCost[key]!);\n                          ^^^^",
    "status_runtime": "N/A",
    "memory": 149848000,
    "question_id": "3238",
    "elapsed_time": 334,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671840992,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1183763239",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumCost(String source, String target, List<String> original, List<String> changed, List<int> cost) {\n    int n = source.length;\n    Map<String, int> conversionCost = {};\n    for (int i = 0; i < original.length; i++) {\n      String key = \"${original[i]}->${changed[i]}\";\n      conversionCost[key] = (conversionCost[key] ?? 0) + cost[i];\n    }\n\n    List<int> dp = List.filled(n + 1, double.infinity.toInt());\n    dp[0] = 0;\n\n    for (int i = 0; i < n; i++) {\n      for (int j = i + 1; j <= n; j++) {\n        String srcSubstring = source.substring(i, j);\n        for (int k = 0; k < target.length; k++) {\n          for (int l = k + 1; l <= target.length; l++) {\n            String tgtSubstring = target.substring(k, l);\n            String key = \"$srcSubstring->$tgtSubstring\";\n            if (conversionCost.containsKey(key)) {\n              int start = i, end = j - i + k;\n              if (end <= n) {\n                dp[end] = Math.min(dp[end], dp[start] + conversionCost[key]!);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return dp[n] == double.infinity.toInt() ? -1 : dp[n];\n  }\n}"
}