{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 203556000,
    "question_id": "3238",
    "elapsed_time": 5020,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671771471,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1183762303",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumCost(String source, String target, List<String> original, List<String> changed, List<int> cost) {\n    final n = source.length;\n    List<List<int>> dp = List.generate(n + 1, (_) => List.generate(n + 1, (_) => 1 << 30), growable: false);\n    dp[0][0] = 0;\n\n    for (int i = 0; i <= n; i++) {\n      for (int j = 0; j <= n; j++) {\n        if (i < n) dp[i + 1][j] = dp[i + 1][j].compareTo(dp[i][j]) > 0 ? dp[i][j] : dp[i + 1][j];\n        if (j < n) dp[i][j + 1] = dp[i][j + 1].compareTo(dp[i][j]) > 0 ? dp[i][j] : dp[i][j + 1];\n        for (int k = 0; k < original.length; k++) {\n          if (i + original[k].length <= n && j + changed[k].length <= n && source.substring(i, i + original[k].length) == original[k] && target.substring(j, j + changed[k].length) == changed[k]) {\n            dp[i + original[k].length][j + changed[k].length] = dp[i + original[k].length][j + changed[k].length].compareTo(dp[i][j] + cost[k]) > 0 ? dp[i][j] + cost[k] : dp[i + original[k].length][j + changed[k].length];\n          }\n        }\n      }\n    }\n\n    return dp[n][n] == (1 << 30) ? -1 : dp[n][n];\n  }\n}"
}