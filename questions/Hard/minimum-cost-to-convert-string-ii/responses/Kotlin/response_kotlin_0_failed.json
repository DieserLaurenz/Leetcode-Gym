{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 33792000,
    "question_id": "3238",
    "elapsed_time": 193,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671622761,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1183760513",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumCost(source: String, target: String, original: Array<String>, changed: Array<String>, cost: IntArray): Long {\n        val n = source.length\n        val dp = Array(n + 1) { LongArray(n + 1) { Long.MAX_VALUE } }\n        dp[0][0] = 0\n        for (i in 0..n) {\n            for (j in 0..n) {\n                if (i < n && j < n && source[i] == target[j]) {\n                    dp[i + 1][j + 1] = dp[i + 1][j + 1].coerceAtMost(dp[i][j])\n                }\n                for (k in original.indices) {\n                    val ori = original[k]\n                    val chg = changed[k]\n                    val costVal = cost[k].toLong()\n                    if (i + ori.length <= n && j + chg.length <= n && source.substring(i, i + ori.length) == ori && target.substring(j, j + chg.length) == chg) {\n                        dp[i + ori.length][j + chg.length] = dp[i + ori.length][j + chg.length].coerceAtMost(dp[i][j] + costVal)\n                    }\n                }\n            }\n        }\n        return if (dp[n][n] == Long.MAX_VALUE) -1 else dp[n][n]\n    }\n}"
}