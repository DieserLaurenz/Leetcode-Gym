{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34548000,
    "question_id": "3238",
    "elapsed_time": 678,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671657015,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1183760962",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumCost(source: String, target: String, original: Array<String>, changed: Array<String>, cost: IntArray): Long {\n        if (source == target) return 0\n\n        val map = mutableMapOf<String, MutableList<Pair<String, Int>>>()\n\n        for (i in original.indices) {\n            map.getOrPut(original[i]) { mutableListOf() }.add(Pair(changed[i], cost[i]))\n        }\n\n        val dp = Array(source.length + 1) { LongArray(target.length + 1) { Long.MAX_VALUE } }\n        dp[0][0] = 0\n\n        for (i in 0..source.length) {\n            for (j in 0..target.length) {\n                if (i < source.length && j < target.length && source[i] == target[j]) {\n                    dp[i + 1][j + 1] = dp[i + 1][j + 1].coerceAtMost(dp[i][j])\n                }\n                if (i < source.length) {\n                    for ((chg, cost) in map.getOrDefault(source.substring(i, i + 1), mutableListOf())) {\n                        if (j + chg.length <= target.length && target.substring(j, j + chg.length) == chg) {\n                            dp[i + 1][j + chg.length] = dp[i + 1][j + chg.length].coerceAtMost(dp[i][j] + cost)\n                        }\n                    }\n                }\n            }\n        }\n\n        return if (dp[source.length][target.length] == Long.MAX_VALUE) -1 else dp[source.length][target.length]\n    }\n}"
}