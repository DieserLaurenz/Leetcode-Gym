{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68912000,
    "question_id": "3238",
    "elapsed_time": 4520,
    "compare_result
    "code_output": "30",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "expected_output": "28",
    "task_finish_time": 1708671702971,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 257,
    "total_testcases": 647,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1183761461",
    "input_formatted": "\"abcd\", \"acbe\", [\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"], [\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"], [2,5,5,1,2,20]",
    "input": "\"abcd\"\n\"acbe\"\n[\"a\",\"b\",\"c\",\"c\",\"e\",\"d\"]\n[\"b\",\"c\",\"b\",\"e\",\"b\",\"e\"]\n[2,5,5,1,2,20]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumCost(source: String, target: String, original: Array<String>, changed: Array<String>, cost: IntArray): Long {\n        val dp = Array(source.length + 1) { LongArray(target.length + 1) { Long.MAX_VALUE } }\n        dp[0][0] = 0L\n        for (i in source.indices) {\n            for (j in target.indices) {\n                if (dp[i][j] == Long.MAX_VALUE) continue\n                var k = i\n                var l = j\n                while (k < source.length && l < target.length && source[k] == target[l]) {\n                    k++\n                    l++\n                    dp[k][l] = minOf(dp[k][l], dp[i][j])\n                }\n                for (x in original.indices) {\n                    if (i + original[x].length <= source.length && source.substring(i, i + original[x].length) == original[x]) {\n                        for (y in changed.indices) {\n                            if (original[x] == original[y] && changed[x] == changed[y] && j + changed[y].length <= target.length && target.substring(j, j + changed[y].length) == changed[y]) {\n                                dp[i + original[x].length][j + changed[y].length] = minOf(dp[i + original[x].length][j + changed[y].length], dp[i][j] + cost[y])\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return if (dp[source.length][target.length] == Long.MAX_VALUE) -1 else dp[source.length][target.length]\n    }\n}"
}