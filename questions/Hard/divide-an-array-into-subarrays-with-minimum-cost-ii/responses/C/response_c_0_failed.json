{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10028000,
    "question_id": "3260",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708434028076,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180944973",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n\nlong long minimumCost(int* nums, int numsSize, int k, int dist) {\n    long long dp[numsSize][k];\n    for (int i = 0; i < numsSize; ++i) {\n        for (int j = 0; j < k; ++j) {\n            dp[i][j] = LLONG_MAX;\n        }\n    }\n    \n    dp[0][0] = nums[0];\n    for (int i = 1; i < numsSize; ++i) {\n        dp[i][0] = nums[i];\n        for (int j = 1; j <= i && j < k; ++j) {\n            for (int l = i - 1; l >= 0 && i - l <= dist + 1; --l) {\n                if (dp[l][j - 1] != LLONG_MAX) {\n                    dp[i][j] = fmin(dp[i][j], dp[l][j - 1] + nums[i]);\n                }\n            }\n        }\n    }\n    \n    long long minCost = LLONG_MAX;\n    for (int i = k - 1; i < numsSize; ++i) {\n        if (dp[i][k - 1] != LLONG_MAX) {\n            minCost = fmin(minCost, dp[i][k - 1]);\n        }\n    }\n    \n    return minCost;\n}"
}