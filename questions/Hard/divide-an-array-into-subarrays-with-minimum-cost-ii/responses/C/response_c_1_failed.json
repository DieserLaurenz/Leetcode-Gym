{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10092000,
    "question_id": "3260",
    "elapsed_time": 3011,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708434071960,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 239,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180945496",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n\nlong long minimumCost(int* nums, int numsSize, int k, int dist) {\n    long long dp[k][numsSize];\n    for (int i = 0; i < k; ++i) {\n        for (int j = 0; j < numsSize; ++j) {\n            dp[i][j] = LLONG_MAX;\n        }\n    }\n\n    for (int i = 0; i < numsSize; ++i) {\n        dp[0][i] = nums[0]; // First subarray starts with the first element\n    }\n\n    for (int i = 1; i < k; ++i) { // For each additional subarray\n        for (int j = i; j < numsSize; ++j) { // Start from 'i' because we need at least 'i' elements before j to form 'i' subarrays\n            long long minCost = LLONG_MAX;\n            for (int m = j - 1; m >= 0 && (j - m) <= dist + 1; --m) {\n                if (dp[i - 1][m] != LLONG_MAX) {\n                    minCost = fmin(minCost, dp[i - 1][m] + nums[j]);\n                }\n            }\n            dp[i][j] = minCost;\n        }\n    }\n\n    long long result = LLONG_MAX;\n    for (int i = k - 1; i < numsSize; ++i) {\n        result = fmin(result, dp[k - 1][i]);\n    }\n\n    return result;\n}"
}