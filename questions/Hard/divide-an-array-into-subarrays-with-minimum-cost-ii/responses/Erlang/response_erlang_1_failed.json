{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 5: exception error: undef",
    "full_runtime_error": "Line 5: exception error: undef\n[{lists,update_n,\n        [1,\n         {0,0},\n         [{infinity,0},\n          {infinity,0},\n          {infinity,0},\n          {infinity,0},\n          {infinity,0},\n          {infinity,0},\n          {infinity,0}]],\n        []},\n {solution,minimum_cost,3,[{file,\"solution.erl\"},{line,5}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,44}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,28}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,61}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 64560000,
    "question_id": "3260",
    "elapsed_time": 1484,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708444198720,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1181087422",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec minimum_cost(Nums :: [integer()], K :: integer(), Dist :: integer()) -> integer().\nminimum_cost(Nums, K, Dist) ->\n    N = length(Nums),\n    DP = lists:duplicate(N + 1, {infinity, 0}),\n    DP1 = lists:update_n(1, {0, 0}, DP),\n    {_, Result} = lists:foldl(fun(X, {Idx, DP_Current}) ->\n        {MinCost, _} = lists:foldl(fun(I, {Min, Count}) ->\n            if \n                Count < K - 1 ->\n                    StartIdx = max(1, Idx - Dist),\n                    EndIdx = Idx - 1,\n                    {Cost, _} = lists:nth(I, DP_Current),\n                    NewCost = Cost + X,\n                    NewMin = min(Min, NewCost),\n                    {NewMin, Count + 1};\n                true -> \n                    {Min, Count}\n            end\n        end, {infinity, 0}, lists:seq(1, N)),\n        DP_Next = lists:update_n(Idx, {MinCost, 0}, DP_Current),\n        {Idx + 1, DP_Next}\n    end, {1, DP1}, Nums),\n    {FinalCost, _} = lists:last(Result),\n    FinalCost."
}