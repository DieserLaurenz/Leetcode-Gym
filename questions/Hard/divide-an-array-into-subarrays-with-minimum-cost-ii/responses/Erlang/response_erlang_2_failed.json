{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 5: exception error: undef",
    "full_runtime_error": "Line 5: exception error: undef\n[{lists,update_n,\n        [1,0,[infinity,infinity,infinity,infinity,infinity,infinity,infinity]],\n        []},\n {solution,minimum_cost,3,[{file,\"solution.erl\"},{line,5}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,35}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,19}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,52}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65552000,
    "question_id": "3260",
    "elapsed_time": 1395,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708444240975,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1181088090",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec minimum_cost(Nums :: [integer()], K :: integer(), Dist :: integer()) -> integer().\nminimum_cost(Nums, K, Dist) ->\n    N = length(Nums),\n    DP = lists:duplicate(N + 1, infinity),\n    DP1 = lists:update_n(1, 0, DP),\n    lists:foldl(fun(X, Acc) ->\n                    lists:map(fun({I, Val}) ->\n                                  if I == 1 -> Val;\n                                     I - 1 > Dist andalso I > K -> infinity;\n                                     true -> min(lists:nth(I - 1, Acc) + X, Val)\n                                  end\n                              end, lists:zip(lists:seq(1, N), Acc))\n                end, DP1, Nums),\n    MinFun = fun(X, Acc) -> min(X, Acc) end,\n    lists:foldl(MinFun, infinity, lists:sublist(DP1, N - K + 2, K))."
}