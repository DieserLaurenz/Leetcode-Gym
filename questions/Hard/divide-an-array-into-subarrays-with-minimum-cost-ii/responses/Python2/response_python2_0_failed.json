{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11940000,
    "question_id": "3260",
    "elapsed_time": 35,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708881198401,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185966544",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, nums, k, dist):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type dist: int\n        :rtype: int\n        \"\"\"\n        from heapq import nsmallest\n        \n        def dp(i, k):\n            if k == 0 and i == len(nums): return 0\n            if k <= 0 or i >= len(nums): return float('inf')\n            if (i, k) in memo: return memo[(i, k)]\n            \n            ans = float('inf')\n            for j in range(i, min(i + dist + 1, len(nums) - k + 2)):\n                ans = min(ans, nums[i] + dp(j + 1, k - 1))\n            memo[(i, k)] = ans\n            return ans\n        \n        memo = {}\n        return dp(0, k)"
}