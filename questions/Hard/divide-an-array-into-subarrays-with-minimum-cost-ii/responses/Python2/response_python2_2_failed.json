{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 57: TypeError: inf is not valid value for the expected return type long",
    "full_runtime_error": "TypeError: inf is not valid value for the expected return type long\n    raise TypeError(str(ret) + \" is not valid value for the expected return type long\");\nLine 57 in _driver (Solution.py)\n    _driver()\nLine 63 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11740000,
    "question_id": "3260",
    "elapsed_time": 27,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708881271127,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185967593",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumCost(self, nums, k, dist):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :type dist: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n        dp[n][0] = 0\n\n        for i in range(n - 1, -1, -1):\n            for j in range(1, k + 1):\n                sum_costs = 0\n                for m in range(i, min(i + dist + 1, n - j + 1)):\n                    sum_costs = nums[m]\n                    if m + 1 < n:\n                        sum_costs += dp[m + 1][j - 1]\n                    dp[i][j] = min(dp[i][j], sum_costs)\n                    if dp[m + 1][j - 1] == float('inf'):\n                        break\n\n        return dp[0][k]"
}