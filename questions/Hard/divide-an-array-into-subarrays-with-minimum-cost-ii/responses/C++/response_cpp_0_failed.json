{
    "status_code": 15,
    "lang": "cpp",
    "run_success": false,
    "runtime_error": "Line 20: Char 36: runtime error: signed integer overflow: 9223372036854775807 + 4 cannot be represented in type 'long long' (solution.cpp)",
    "full_runtime_error": "Line 20: Char 36: runtime error: signed integer overflow: 9223372036854775807 + 4 cannot be represented in type 'long long' (solution.cpp)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:29:36",
    "status_runtime": "N/A",
    "memory": 7800000,
    "question_id": "3260",
    "elapsed_time": 11,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708433739711,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180941600",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(vector<int>& nums, int k, int dist) {\n        int n = nums.size();\n        vector<vector<long long>> dp(k + 1, vector<long long>(n + 1, LLONG_MAX));\n        dp[0][0] = 0;\n\n        for (int i = 1; i <= k; ++i) {\n            for (int j = i; j <= n; ++j) {\n                long long minCost = LLONG_MAX;\n                for (int m = max(i - 1, j - dist - 1); m < j; ++m) {\n                    minCost = min(minCost, dp[i - 1][m]);\n                }\n                dp[i][j] = minCost + nums[j - 1];\n            }\n        }\n\n        return *min_element(dp[k].begin() + k, dp[k].end());\n    }\n};"
}