{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58844000,
    "question_id": "3260",
    "elapsed_time": 4018,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708433776497,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 177,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180942009",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <limits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(vector<int>& nums, int k, int dist) {\n        int n = nums.size();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n        \n        for (int i = 1; i <= k; i++) {\n            vector<long long> newDp(n + 1, LLONG_MAX);\n            for (int j = i; j <= n; j++) {\n                for (int l = max(i - 1, j - dist - 1); l < j; l++) {\n                    if (dp[l] != LLONG_MAX) {\n                        newDp[j] = min(newDp[j], dp[l] + nums[j - 1]);\n                    }\n                }\n            }\n            dp = move(newDp);\n        }\n        \n        long long ans = LLONG_MAX;\n        for (int i = k; i <= n; i++) {\n            ans = min(ans, dp[i]);\n        }\n        return ans;\n    }\n};"
}