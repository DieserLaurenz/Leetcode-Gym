{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51580000,
    "question_id": "3260",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708433819176,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 170,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180942507",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <limits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(vector<int>& nums, int k, int dist) {\n        int n = nums.size();\n        vector<vector<long long>> dp(k + 1, vector<long long>(n, LLONG_MAX));\n        \n        for (int i = 0; i < n; ++i) {\n            dp[1][i] = nums[i];\n        }\n\n        for (int i = 2; i <= k; ++i) {\n            for (int j = i - 1; j < n; ++j) {\n                for (int m = j - 1; m >= i - 2 && j - m <= dist; --m) {\n                    if (dp[i-1][m] != LLONG_MAX) {\n                        dp[i][j] = min(dp[i][j], dp[i-1][m] + nums[j]);\n                    }\n                }\n            }\n        }\n\n        long long ans = LLONG_MAX;\n        for (int i = k - 1; i < n; ++i) {\n            ans = min(ans, dp[k][i]);\n        }\n        return ans;\n    }\n};"
}