{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 17: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 17: ** (ArgumentError) errors were found at the given arguments:\n  * 2nd argument: not a tuple\n    :erlang.element(2, nil)\n    solution.ex:17: anonymous fn/7 in Solution.minimum_cost/3\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    solution.ex:15: anonymous fn/6 in Solution.minimum_cost/3\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:12: Solution.minimum_cost/3\n    solution.ex:51: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75004000,
    "question_id": "3260",
    "elapsed_time": 848,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708444385101,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181090331",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer], k :: integer, dist :: integer) :: integer\n  def minimum_cost(nums, k, dist) do\n    n = length(nums)\n    dp = :array.new(n + 1, default: :infinity, fixed: true)\n    dp = :array.set(0, 0, dp)\n\n    for i <- 1..n do\n      dp = :array.set(i, Enum.at(nums, i - 1), dp)\n    end\n\n    for j <- 2..k do\n      new_dp = :array.new(n + 1, default: :infinity, fixed: true)\n      min_queue = [{0, :array.get(0, dp)}]\n      for i <- 1..n do\n        min_queue = Enum.drop_while(min_queue, fn {idx, _} -> i - idx > dist end)\n        min_cost = elem(List.first(min_queue), 1) + Enum.at(nums, i - 1)\n        new_dp = :array.set(i, min_cost, new_dp)\n        min_queue = Enum.drop_while(min_queue, fn {_, cost} -> cost >= :array.get(i, dp) end)\n        min_queue = min_queue ++ [{i, :array.get(i, dp)}]\n      end\n      dp = new_dp\n    end\n\n    min_val = :infinity\n    for i <- (n - dist)..n do\n      min_val = min(min_val, :array.get(i, dp))\n    end\n    min_val\n  end\nend"
}