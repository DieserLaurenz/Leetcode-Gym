{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (UndefinedFunctionError) function Tuple.put_element/3 is undefined or private",
    "full_runtime_error": "Line 6: ** (UndefinedFunctionError) function Tuple.put_element/3 is undefined or private\n    (elixir 1.15.7) Tuple.put_element({}, 1, 0)\n    (elixir 1.15.7) lib/list.ex:1351: List.do_update_at/3\n    solution.ex:6: Solution.minimum_cost/3\n    solution.ex:44: Driver.consume_test_cases/2\n    solution.ex:28: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 75636000,
    "question_id": "3260",
    "elapsed_time": 404,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708444310225,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181089189",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer], k :: integer, dist :: integer) :: integer\n  def minimum_cost(nums, k, dist) do\n    n = length(nums)\n    dp = for _ <- 0..n, do: :erlang.make_tuple(k + 1, :infinity)\n    dp = List.update_at(dp, 0, fn _ -> Tuple.put_element({}, 1, 0) end)\n\n    for i <- 1..n do\n      dp = List.update_at(dp, i, fn _ -> Tuple.put_element({}, 1, Enum.at(nums, i - 1)) end)\n      for j <- 2..min(i, k) do\n        min_cost = :infinity\n        for l <- max(1, i - dist)..(i - 1) do\n          cost = Tuple.to_list(Enum.at(dp, l))[j - 1] + Enum.at(nums, i - 1)\n          min_cost = min(min_cost, cost)\n        end\n        dp = List.update_at(dp, i, fn current ->\n          Tuple.put_element(current, j, min_cost)\n        end)\n      end\n    end\n\n    Tuple.to_list(Enum.at(dp, n))[k]\n  end\nend"
}