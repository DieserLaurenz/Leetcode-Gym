{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81084000,
    "question_id": "3260",
    "elapsed_time": 6022,
    "compare_result
    "code_output": "6000000001",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708444430360,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181090955",
    "input_formatted": "[1,3,2,6,4,2], 3, 3",
    "input": "[1,3,2,6,4,2]\n3\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_cost(nums :: [integer], k :: integer, dist :: integer) :: integer\n  def minimum_cost(nums, k, dist) do\n    {n, inf} = {length(nums), 1_000_000_000 * length(nums) + 1}\n    dp = Enum.map(0..n, fn _ -> Enum.map(0..k, fn _ -> inf end) end)\n    dp = List.update_at(dp, 0, fn _ -> List.update_at(Enum.at(dp, 0), 0, fn _ -> 0 end) end)\n\n    for i <- 1..n, j <- 1..k do\n      range_start = if j == 1, do: 1, else: max(1, i - dist)\n      min_cost = Enum.reduce(range_start..i-1, inf, fn x, acc ->\n        acc = min(Enum.at(Enum.at(dp, x), j - 1), acc)\n        acc\n      end)\n      if j == 1 do\n        dp = List.update_at(dp, i, fn _ -> List.replace_at(Enum.at(dp, i), j, nums |> Enum.at(i - 1)) end)\n      else\n        dp = List.update_at(dp, i, fn _ -> List.replace_at(Enum.at(dp, i), j, min_cost + Enum.at(nums, i - 1)) end)\n      end\n    end\n\n    Enum.min(Enum.at(dp, n))\n  end\nend"
}