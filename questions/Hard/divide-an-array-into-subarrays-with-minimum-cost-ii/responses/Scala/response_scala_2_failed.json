{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54540000,
    "question_id": "3260",
    "elapsed_time": 611,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708443659070,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181079219",
    "input_formatted": "[1,3,2,6,4,2], 3, 3",
    "input": "[1,3,2,6,4,2]\n3\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(nums: Array[Int], k: Int, dist: Int): Long = {\n        val n = nums.length\n        val dp = Array.fill(n)(Array.fill(k)(Long.MaxValue))\n        val sums = Array.fill(n)(0L)\n\n        for (i <- 0 until n) {\n            sums(i) = nums(i)\n            if (i > 0) sums(i) += sums(i - 1)\n        }\n\n        def sum(i: Int, j: Int): Long = if (i == 0) sums(j) else sums(j) - sums(i - 1)\n\n        for (i <- 0 until n) {\n            dp(i)(0) = nums(i)\n        }\n\n        for (subarrayCount <- 1 until k) {\n            for (end <- 0 until n) {\n                for (start <- 0 to end if end - start <= dist) {\n                    if (start > 0) {\n                        dp(end)(subarrayCount) = Math.min(dp(end)(subarrayCount), dp(start - 1)(subarrayCount - 1) + nums(start))\n                    } else if (subarrayCount == 1) {\n                        dp(end)(subarrayCount) = Math.min(dp(end)(subarrayCount), nums(0))\n                    }\n                }\n            }\n        }\n\n        var answer = Long.MaxValue\n        for (i <- n - 1 until n) {\n            answer = Math.min(answer, dp(i)(k - 1))\n        }\n\n        answer\n    }\n}"
}