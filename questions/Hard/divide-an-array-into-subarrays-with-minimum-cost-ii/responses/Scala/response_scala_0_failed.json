{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3404000,
    "question_id": "3260",
    "elapsed_time": 11080,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708443583628,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 170,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181077940",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(nums: Array[Int], k: Int, dist: Int): Long = {\n        val n = nums.length\n        val dp = Array.fill[Long](k, n)(Long.MaxValue)\n        val prefixMin = Array.fill[Long](n)(0L)\n        \n        for (i <- 0 until n) {\n            dp(0)(i) = nums(i)\n            prefixMin(i) = if (i == 0) nums(i) else math.min(prefixMin(i - 1), nums(i).toLong)\n        }\n\n        for (i <- 1 until k) {\n            for (j <- i until n) {\n                var minCost = Long.MaxValue\n                for (l <- math.max(0, j - dist) until j) {\n                    minCost = math.min(minCost, dp(i - 1)(l))\n                }\n                dp(i)(j) = minCost + nums(j)\n            }\n        }\n        \n        var result = Long.MaxValue\n        for (i <- k - 2 to n - 1) {\n            result = math.min(result, dp(k - 1)(i))\n        }\n        \n        result\n    }\n}"
}