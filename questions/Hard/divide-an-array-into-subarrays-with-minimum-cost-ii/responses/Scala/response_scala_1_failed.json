{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "java.lang.IllegalArgumentException: Error when serializing long: -9223372036854775808 out of range [-(2^53-1), 2^53-1]",
    "full_runtime_error": "java.lang.IllegalArgumentException: Error when serializing long: -9223372036854775808 out of range [-(2^53-1), 2^53-1]\nLine 29: precompiled.Serializer$.serialize (Serializer.scala)\nLine 48: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 54820000,
    "question_id": "3260",
    "elapsed_time": 683,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708443617454,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181078568",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumCost(nums: Array[Int], k: Int, dist: Int): Long = {\n        val n = nums.length\n        val dp = Array.fill(n + 1, k + 1)(Long.MaxValue)\n        dp(0)(0) = 0\n        \n        for (i <- 1 to n) {\n            for (j <- 1 to k) {\n                var minIndex = i - 1\n                while (minIndex >= 0 && i - minIndex <= dist + 1) {\n                    dp(i)(j) = dp(i)(j) min (dp(minIndex)(j - 1) + nums(minIndex))\n                    minIndex -= 1\n                }\n            }\n        }\n        \n        var ans = Long.MaxValue\n        for (i <- n - dist to n) {\n            ans = ans min dp(i)(k)\n        }\n        ans\n    }\n}"
}