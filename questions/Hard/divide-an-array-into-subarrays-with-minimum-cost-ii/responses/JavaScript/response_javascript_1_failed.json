{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 78824000,
    "question_id": "3260",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708434379587,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 174,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1180949034",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @param {number} dist\n * @return {number}\n */\nvar minimumCost = function(nums, k, dist) {\n    const n = nums.length;\n    const dp = Array.from({length: k}, () => Array(n).fill(Infinity));\n    const sum = Array(n + 1).fill(0);\n    \n    for (let i = 0; i < n; i++) sum[i + 1] = sum[i] + nums[i];\n    \n    for (let i = 0; i < n; i++) dp[0][i] = nums[i];\n    \n    for (let parts = 1; parts < k; parts++) {\n        for (let end = parts; end < n; end++) {\n            for (let start = end - 1; start >= parts - 1 && end - start <= dist + 1; start--) {\n                dp[parts][end] = Math.min(dp[parts][end], dp[parts - 1][start] + nums[end]);\n            }\n        }\n    }\n    \n    let minCost = Infinity;\n    for (let i = k - 1; i < n; i++) {\n        if (n - i - 1 <= dist) {\n            minCost = Math.min(minCost, dp[k - 1][i]);\n        }\n    }\n    \n    return minCost;\n};"
}