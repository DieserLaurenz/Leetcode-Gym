{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 215532000,
    "question_id": "3260",
    "elapsed_time": 3205,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708443466196,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 245,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1181076242",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "def minimum_cost(nums, k, dist)\n  n = nums.size\n  prefix_sum = Array.new(n+1, 0)\n  (1..n).each { |i| prefix_sum[i] = prefix_sum[i-1] + nums[i-1] }\n\n  dp = Array.new(n+1) { Array.new(k+1, Float::INFINITY) }\n  (0..n).each { |i| dp[i][1] = nums[0] }\n\n  (2..k).each do |j|\n    (j-1..n-1).each do |i|\n      (j-2..i-1).each do |m|\n        next if i - m > dist\n        dp[i+1][j] = [dp[i+1][j], dp[m+1][j-1] + nums[i]].min\n      end\n    end\n  end\n\n  min_cost = Float::INFINITY\n  (k-1..n-1).each do |i|\n    min_cost = [min_cost, dp[i+1][k]].min\n  end\n\n  min_cost\nend"
}