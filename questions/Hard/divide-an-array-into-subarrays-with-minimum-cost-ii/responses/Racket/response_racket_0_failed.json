{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "map: all lists must have same size",
    "full_runtime_error": "map: all lists must have same size\n  first list length: 3\n  other list length: 6\n  procedure: #<procedure:list-ref>\n  context...:\n   /usr/share/racket/collects/racket/private/map.rkt:257:2: gen-map\n   solution.rkt:4:4: dp\n   solution.rkt:13:4: loop\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:20:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100116000,
    "question_id": "3260",
    "elapsed_time": 289,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708443860555,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1181082233",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-cost nums k dist)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  (let ([n (length nums)])\n    (define (dp i j)\n      (if (= j 1)\n          (list-ref nums (sub1 i))\n          (if (= i j)\n              (apply + (map list-ref (build-list i (lambda (x) x)) nums))\n              (let loop ([l 1] [min-cost +inf.0])\n                (if (> l dist) min-cost\n                    (let ([cost (+ (dp (- i l) (- j 1)) (list-ref nums (- i 1)))])\n                      (loop (add1 l) (min min-cost cost))))))))\n    (let loop ([i k] [min-cost +inf.0])\n      (if (> i n) min-cost\n          (loop (add1 i) (min min-cost (dp i k)))))))"
}