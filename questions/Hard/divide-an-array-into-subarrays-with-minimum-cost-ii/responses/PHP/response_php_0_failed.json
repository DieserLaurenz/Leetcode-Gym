{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 23044000,
    "question_id": "3260",
    "elapsed_time": 5397,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708434640398,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 179,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1180952178",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $dist\n     * @return Integer\n     */\n    function minimumCost($nums, $k, $dist) {\n        $n = count($nums);\n        $dp = array_fill(0, $k + 1, array_fill(0, $n + 1, PHP_INT_MAX));\n        $dp[0][0] = 0;\n\n        for ($i = 1; $i <= $k; $i++) {\n            for ($j = $i; $j <= $n; $j++) {\n                for ($l = $i - 1; $l <= min($j - 1, $i - 1 + $dist); $l++) {\n                    $dp[$i][$j] = min($dp[$i][$j], $dp[$i - 1][$l] + $nums[$j - 1]);\n                }\n            }\n        }\n\n        $result = PHP_INT_MAX;\n        for ($i = $k - 1; $i <= min($n - 1, $k - 1 + $dist); $i++) {\n            $result = min($result, $dp[$k][$i + 1]);\n        }\n        return $result;\n    }\n}"
}