{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 22760000,
    "question_id": "3260",
    "elapsed_time": 5333,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708434694136,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 58,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1180952819",
    "input_formatted": "[1,3,2,6,4,2], 3, 3",
    "input": "[1,3,2,6,4,2]\n3\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @param Integer $dist\n     * @return Integer\n     */\n    function minimumCost($nums, $k, $dist) {\n        $n = count($nums);\n        $prefixSum = array_fill(0, $n + 1, 0);\n        for ($i = 1; $i <= $n; $i++) {\n            $prefixSum[$i] = $prefixSum[$i - 1] + $nums[$i - 1];\n        }\n\n        $dp = array_fill(0, $k + 1, array_fill(0, $n + 1, PHP_INT_MAX));\n        for ($i = 0; $i <= $n; $i++) {\n            $dp[1][$i] = $nums[0];\n        }\n\n        for ($i = 2; $i <= $k; $i++) {\n            for ($j = $i - 1; $j <= $n; $j++) {\n                for ($m = $i - 2; $m <= min($j - 1, $i - 2 + $dist); $m++) {\n                    $dp[$i][$j] = min($dp[$i][$j], $dp[$i - 1][$m] + $nums[$j - 1]);\n                }\n            }\n        }\n\n        return $dp[$k][$n];\n    }\n}"
}