{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59284000,
    "question_id": "3260",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708434273068,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180947774",
    "input_formatted": "[1,3,2,6,4,2], 3, 3",
    "input": "[1,3,2,6,4,2]\n3\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinimumCost(int[] nums, int k, int dist) {\n        long[,] dp = new long[k + 1, nums.Length];\n        for (int i = 0; i <= k; i++)\n            for (int j = 0; j < nums.Length; j++)\n                dp[i, j] = long.MaxValue;\n\n        for (int i = 0; i < nums.Length; i++) {\n            dp[1, i] = nums[i];\n        }\n\n        for (int i = 2; i <= k; i++) {\n            for (int j = i - 1; j < nums.Length; j++) {\n                long min = long.MaxValue;\n                for (int m = j; m >= i - 1 && j - m <= dist; m--) {\n                    min = Math.Min(min, dp[i - 1, m]);\n                }\n                if (min != long.MaxValue) {\n                    dp[i, j] = min + nums[j];\n                }\n            }\n        }\n\n        long answer = long.MaxValue;\n        for (int i = k - 1; i < nums.Length; i++) {\n            answer = Math.Min(answer, dp[k, i]);\n        }\n\n        return answer;\n    }\n}"
}