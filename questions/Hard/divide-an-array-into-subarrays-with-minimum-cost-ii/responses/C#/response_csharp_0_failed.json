{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59180000,
    "question_id": "3260",
    "elapsed_time": 4027,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708434197067,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180946854",
    "input_formatted": "[1,3,2,6,4,2], 3, 3",
    "input": "[1,3,2,6,4,2]\n3\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinimumCost(int[] nums, int k, int dist) {\n        int n = nums.Length;\n        long[] prefixSum = new long[n + 1];\n        for (int i = 0; i < n; i++) prefixSum[i + 1] = prefixSum[i] + nums[i];\n\n        long[,] dp = new long[k, n];\n        for (int i = 0; i < n; i++) dp[0, i] = nums[i];\n\n        for (int subArrayCount = 1; subArrayCount < k; subArrayCount++) {\n            for (int i = subArrayCount; i < n; i++) {\n                long minCost = long.MaxValue;\n                for (int j = Math.Max(subArrayCount - 1, i - dist - 1); j < i; j++) {\n                    minCost = Math.Min(minCost, dp[subArrayCount - 1, j] + nums[i]);\n                }\n                dp[subArrayCount, i] = minCost;\n            }\n        }\n\n        long answer = long.MaxValue;\n        for (int i = k - 2; i <= n - 1; i++) {\n            if (i - (k - 2) <= dist) {\n                answer = Math.Min(answer, dp[k - 1, i]);\n            }\n        }\n\n        return answer;\n    }\n}"
}