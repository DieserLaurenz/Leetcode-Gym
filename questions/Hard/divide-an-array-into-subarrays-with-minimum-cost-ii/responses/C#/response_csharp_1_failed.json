{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45268000,
    "question_id": "3260",
    "elapsed_time": 231,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708434235807,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 134,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180947381",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MinimumCost(int[] nums, int k, int dist) {\n        int n = nums.Length;\n        long[,] dp = new long[k + 1, n + 1];\n        for (int i = 0; i <= k; i++) {\n            for (int j = 0; j <= n; j++) {\n                dp[i, j] = long.MaxValue;\n            }\n        }\n        dp[0, 0] = 0;\n\n        for (int i = 1; i <= k; i++) {\n            for (int j = i; j <= n; j++) {\n                for (int m = 1; m <= dist + 1 && j - m >= i - 1; m++) {\n                    if (dp[i - 1, j - m] != long.MaxValue) {\n                        dp[i, j] = Math.Min(dp[i, j], dp[i - 1, j - m] + nums[j - m]);\n                    }\n                }\n            }\n        }\n\n        long result = long.MaxValue;\n        for (int i = n; i >= n - dist && i > 0; i--) {\n            result = Math.Min(result, dp[k, i]);\n        }\n\n        return result;\n    }\n}"
}