{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 184556000,
    "question_id": "3260",
    "elapsed_time": 5027,
    "compare_result": "1001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000111111101111111101110011111111000111111010100100000000101010110000000100010101000010100001010000010000000010101000000000010000000000000000000010000001000000000000000000000000000000000000000000000010000000000000001000000000000000000000000000000000000000000000000000000000011010100001010000000000000010000000000000001000001100010000000000000000000010010000100010000000000000000100000100001000000000000000000000000001000000000000001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708435105796,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 179,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180957890",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumCost(List<int> nums, int k, int dist) {\n    int n = nums.length;\n    List<List<int>> dp = List.generate(k, (_) => List.generate(n, (_) => 1 << 30));\n    for (int i = 0; i < n; i++) dp[0][i] = nums[i];\n    for (int i = 1; i < k; i++) {\n      for (int j = i; j < n; j++) {\n        for (int l = i - 1; l <= j - 1 && j - l <= dist + 1; l++) {\n          dp[i][j] = dp[i][j] < dp[i - 1][l] + nums[j] ? dp[i][j] : dp[i - 1][l] + nums[j];\n        }\n      }\n    }\n    int minCost = 1 << 30;\n    for (int i = k - 1; i < n; i++) {\n      minCost = minCost < dp[k - 1][i] ? minCost : dp[k - 1][i];\n    }\n    return minCost;\n  }\n}"
}