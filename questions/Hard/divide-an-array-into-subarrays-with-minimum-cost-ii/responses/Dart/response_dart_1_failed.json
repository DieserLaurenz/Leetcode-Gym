{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 190392000,
    "question_id": "3260",
    "elapsed_time": 5029,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708435150785,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 231,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180958489",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumCost(List<int> nums, int k, int dist) {\n    int n = nums.length;\n    List<int> prefixSum = List.filled(n + 1, 0);\n    for (int i = 1; i <= n; ++i) {\n      prefixSum[i] = prefixSum[i - 1] + nums[i - 1];\n    }\n\n    List<List<int>> dp = List.generate(k + 1, (_) => List.filled(n + 1, 1 << 30));\n    dp[0][0] = 0;\n    for (int i = 1; i <= k; ++i) {\n      for (int j = i; j <= n; ++j) {\n        for (int l = i - 1; l <= j - 1 && j - l <= dist + 1; ++l) {\n          dp[i][j] = dp[i][j] < dp[i - 1][l] + nums[l] ? dp[i][j] : dp[i - 1][l] + nums[l];\n        }\n      }\n    }\n\n    int result = 1 << 30;\n    for (int i = k - 1; i < n; ++i) {\n      if (n - i - 1 <= dist) {\n        result = result < dp[k][i + 1] ? result : dp[k][i + 1];\n      }\n    }\n    return result;\n  }\n}"
}