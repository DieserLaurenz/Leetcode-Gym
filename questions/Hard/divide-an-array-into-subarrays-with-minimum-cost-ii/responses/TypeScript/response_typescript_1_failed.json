{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 515572000,
    "question_id": "3260",
    "elapsed_time": 2013,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708434541582,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1180951014",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumCost(nums: number[], k: number, dist: number): number {\n    const n = nums.length;\n    const dp: number[][] = Array.from({ length: k + 1 }, () => Array(n).fill(Infinity));\n    const prefixMin: number[][] = Array.from({ length: k + 1 }, () => Array(n).fill(Infinity));\n    \n    // Base case: cost of taking the first subarray ending at each position with only one subarray (k=1)\n    for (let i = 0; i < n; i++) dp[1][i] = nums[0];\n    \n    for (let i = 2; i <= k; i++) {\n        // Precompute prefix minimums for dp[i-1] to optimize inner loop\n        prefixMin[i-1][0] = dp[i-1][0];\n        for (let j = 1; j < n; j++) {\n            prefixMin[i-1][j] = Math.min(prefixMin[i-1][j-1], dp[i-1][j]);\n        }\n        \n        for (let j = i - 1; j < n; j++) {\n            const validStart = Math.max(0, j - dist);\n            if (validStart <= j) {\n                dp[i][j] = prefixMin[i-1][j-1] + nums[j];\n                if (validStart > 0) {\n                    dp[i][j] = Math.min(dp[i][j], prefixMin[i-1][validStart - 1] + nums[j]);\n                }\n            }\n        }\n    }\n    \n    // Find minimum cost among all possible ending positions of the last subarray\n    let result = Infinity;\n    for (let i = k-1; i < n; i++) {\n        result = Math.min(result, dp[k][i]);\n    }\n    \n    return result;\n}"
}