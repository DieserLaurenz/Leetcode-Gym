{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61428000,
    "question_id": "3260",
    "elapsed_time": 215,
    "compare_result": "1001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000101110101111111101110011111111000111111010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708434484258,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1180950355",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumCost(nums: number[], k: number, dist: number): number {\n    const n = nums.length;\n    const dp = Array.from({ length: k + 1 }, () => new Array(n + 1).fill(Infinity));\n    dp[0][0] = 0;\n\n    for (let i = 1; i <= k; i++) {\n        for (let j = i; j <= n; j++) {\n            let minCost = Infinity;\n            for (let l = Math.max(i - 1, j - dist - 1); l < j; l++) {\n                minCost = Math.min(minCost, dp[i - 1][l]);\n            }\n            dp[i][j] = minCost + nums[j - 1];\n        }\n    }\n\n    let result = Infinity;\n    for (let i = n - k + 1; i <= n; i++) {\n        result = Math.min(result, dp[k][i]);\n    }\n    return result;\n}"
}