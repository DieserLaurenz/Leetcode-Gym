{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53248000,
    "question_id": "3260",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708433914764,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1180943677",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n        int n = nums.length;\n        long[][] dp = new long[k][n];\n        for (int i = 0; i < n; i++) {\n            dp[0][i] = nums[i];\n        }\n\n        for (int i = 1; i < k; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = Long.MAX_VALUE;\n            }\n            for (int j = i; j < n; j++) {\n                long min = Long.MAX_VALUE;\n                for (int m = j - 1; m >= 0 && (j - m) <= dist + 1; m--) {\n                    min = Math.min(min, dp[i - 1][m]);\n                    dp[i][j] = Math.min(dp[i][j], min + nums[j]);\n                }\n            }\n        }\n\n        long minCost = Long.MAX_VALUE;\n        for (int i = k - 1; i < n; i++) {\n            minCost = Math.min(minCost, dp[k - 1][i]);\n        }\n\n        return minCost;\n    }\n}"
}