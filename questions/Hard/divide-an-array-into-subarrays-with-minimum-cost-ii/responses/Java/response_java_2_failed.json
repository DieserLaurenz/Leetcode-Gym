{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44104000,
    "question_id": "3260",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708433965205,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1180944222",
    "input_formatted": "[1,3,2,6,4,2], 3, 3",
    "input": "[1,3,2,6,4,2]\n3\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long minimumCost(int[] nums, int k, int dist) {\n        final long INF = Long.MAX_VALUE / 2; // To avoid overflow\n        int n = nums.length;\n        long[] dp = new long[n];\n        long[] next = new long[n];\n        \n        for (int i = 0; i < n; ++i) {\n            dp[i] = nums[i]; // Base case for the first subarray\n        }\n        \n        for (int subarray = 2; subarray <= k; ++subarray) {\n            System.arraycopy(dp, 0, next, 0, n); // Copy current dp to next\n            \n            for (int i = n - 1; i >= 0; --i) {\n                dp[i] = INF; // Reset dp for new subarray calculation\n                for (int j = i + 1; j < n && j - i <= dist + 1; ++j) {\n                    dp[i] = Math.min(dp[i], next[j] + nums[i]);\n                }\n            }\n        }\n        \n        long minCost = INF;\n        for (int i = n - k; i < n; ++i) {\n            minCost = Math.min(minCost, dp[i]);\n        }\n        \n        return minCost == INF ? -1 : minCost; // Return -1 if solution is impossible, though problem statement guarantees a solution\n    }\n}"
}