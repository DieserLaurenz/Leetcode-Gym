{
    "status_code": 15,
    "lang": "golang",
    "run_success": false,
    "runtime_error": "Line 93: panic: Error when serializing long: -9223372036854775802 out of range [-(2^53-1), 2^53-1]",
    "full_runtime_error": "panic: Error when serializing long: -9223372036854775802 out of range [-(2^53-1), 2^53-1]\nleetcode/precompiled.(*Serializer).Serialize(0xc000072e30, {0x4b3220, 0xc0000120d0?})\nserializer.go, line 61\nmain.main()\nsolution.go, line 93",
    "status_runtime": "N/A",
    "memory": 1984000,
    "question_id": "3260",
    "elapsed_time": 11,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708435251464,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180959883",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "func minimumCost(nums []int, k int, dist int) int64 {\n    n := len(nums)\n    dp := make([][]int64, k+1)\n    for i := range dp {\n        dp[i] = make([]int64, n+1)\n        for j := range dp[i] {\n            dp[i][j] = 1<<63 - 1\n        }\n    }\n    dp[0][0] = 0\n    for i := 1; i <= k; i++ {\n        for j := i; j <= n; j++ {\n            for l := max(i-1, j-dist-1); l < j; l++ {\n                dp[i][j] = min(dp[i][j], dp[i-1][l]+int64(nums[l]))\n            }\n        }\n    }\n    return dp[k][n]\n}\n\nfunc min(a, b int64) int64 {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}