{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11248000,
    "question_id": "3260",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708435305228,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180960554",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumCost(nums []int, k int, dist int) int64 {\n    n := len(nums)\n    dp := make([][]int64, k+1)\n    for i := range dp {\n        dp[i] = make([]int64, n+1)\n        for j := range dp[i] {\n            if i == 0 {\n                dp[i][j] = 0\n            } else {\n                dp[i][j] = 1<<60 // Use a smaller max value to avoid serialization error\n            }\n        }\n    }\n\n    for i := 1; i <= k; i++ {\n        for j := i - 1; j < n; j++ {\n            if i == 1 {\n                dp[i][j+1] = int64(nums[0])\n            } else {\n                for p := max(0, j-dist); p < j; p++ {\n                    dp[i][j+1] = min(dp[i][j+1], dp[i-1][p+1]+int64(nums[j]))\n                }\n            }\n        }\n    }\n\n    result := int64(1<<60)\n    for i := n - 1; i >= n-dist-1 && i >= 0; i-- {\n        result = min(result, dp[k][i+1])\n    }\n    return result\n}\n\nfunc min(a, b int64) int64 {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}