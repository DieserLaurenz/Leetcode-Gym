{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 23188000,
    "question_id": "3260",
    "elapsed_time": 11015,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708881374064,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 104,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185968891",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:\n        n = len(nums)\n        if k == n: return sum(nums)\n        dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n        for i in range(n + 1): dp[i][1] = nums[i - 1] if i else 0\n\n        for i in range(1, n + 1):\n            for j in range(2, min(k, i) + 1):\n                for x in range(max(1, i - dist), i):\n                    dp[i][j] = min(dp[i][j], dp[x][j - 1] + nums[i - 1])\n\n        return dp[n][k]"
}