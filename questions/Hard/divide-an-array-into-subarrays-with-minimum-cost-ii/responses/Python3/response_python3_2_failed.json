{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56184000,
    "question_id": "3260",
    "elapsed_time": 11012,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708881416689,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 233,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185969524",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom functools import lru_cache\n\nclass Solution:\n    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:\n        n = len(nums)\n        \n        @lru_cache(None)\n        def dfs(index, remaining_k):\n            # Base case: if we are to select the last subarray\n            if remaining_k == 1:\n                return min(nums[index:])\n            min_cost = float('inf')\n            # Try every possible end for the next subarray within the distance limit\n            for next_index in range(index + 1, min(n - remaining_k + 2, index + dist + 2)):\n                cost = nums[index] + dfs(next_index, remaining_k - 1)\n                min_cost = min(min_cost, cost)\n            return min_cost\n        \n        return dfs(0, k)"
}