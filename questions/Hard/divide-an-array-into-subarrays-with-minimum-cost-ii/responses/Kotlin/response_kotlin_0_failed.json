{
    "status_code": 15,
    "lang": "kotlin",
    "run_success": false,
    "runtime_error": "Line 41: Exception in thread \"main\" java.lang.RuntimeException: Error when serializing long: -9223372036854775805 out of range [-(2^53-1), 2^53-1]",
    "full_runtime_error": "Line 41: Exception in thread \"main\" java.lang.RuntimeException: Error when serializing long: -9223372036854775805 out of range [-(2^53-1), 2^53-1]",
    "status_runtime": "N/A",
    "memory": 33492000,
    "question_id": "3260",
    "elapsed_time": 327,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,3,2,6,4,2]\n3\n3",
    "expected_output": "5",
    "task_finish_time": 1708434956970,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180956018",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumCost(nums: IntArray, k: Int, dist: Int): Long {\n        val n = nums.size\n        val dp = Array(n + 1) { LongArray(k + 1) { Long.MAX_VALUE } }\n        dp[0][0] = 0\n        for (i in 1..n) {\n            for (j in 1..k) {\n                var minCost = Long.MAX_VALUE\n                for (l in maxOf(i - dist - 1, 0)..i - 1) {\n                    minCost = minOf(minCost, dp[l][j - 1] + nums[i - 1])\n                }\n                dp[i][j] = minCost\n            }\n        }\n        return dp[n][k]\n    }\n}"
}