{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34028000,
    "question_id": "3260",
    "elapsed_time": 160,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[10,1,2,2,2,1]\n4\n3",
    "expected_output": "15",
    "task_finish_time": 1708434990762,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 691,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180956438",
    "input_formatted": "[10,1,2,2,2,1], 4, 3",
    "input": "[10,1,2,2,2,1]\n4\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minimumCost(nums: IntArray, k: Int, dist: Int): Long {\n        val n = nums.size\n        val dp = Array(n + 1) { LongArray(k + 1) { Long.MAX_VALUE / 2 } }\n        dp[0][0] = 0\n        for (i in 1..n) {\n            for (j in 1..minOf(i, k)) {\n                for (l in maxOf(0, i - dist - 1)..i - 1) {\n                    dp[i][j] = minOf(dp[i][j], dp[l][j - 1] + nums[i - 1])\n                }\n            }\n        }\n        var minCost = Long.MAX_VALUE\n        for (i in n - dist..n) {\n            minCost = minOf(minCost, dp[i][k])\n        }\n        return minCost\n    }\n}"
}