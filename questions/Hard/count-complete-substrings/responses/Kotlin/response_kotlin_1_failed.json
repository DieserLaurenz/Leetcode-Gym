{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37924000,
    "question_id": "3223",
    "elapsed_time": 5097,
    "compare_result
    "code_output": "21",
    "std_output": "",
    "last_testcase": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "expected_output": "20",
    "task_finish_time": 1708299078417,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 734,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1179275737",
    "input_formatted": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\", 2",
    "input": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun countCompleteSubstrings(word: String, k: Int): Int {\n        val n = word.length\n        var count = 0\n\n        for (start in 0 until n) {\n            val freq = IntArray(26) { 0 }\n            var uniqueChars = 0\n            for (end in start until n) {\n                if (++freq[word[end] - 'a'] == 1) uniqueChars++\n                if (freq[word[end] - 'a'] == k) uniqueChars--\n\n                if (uniqueChars == 0 && isAdjacentValid(freq, k)) count++\n            }\n        }\n\n        return count\n    }\n\n    private fun isAdjacentValid(freq: IntArray, k: Int): Boolean {\n        var prev = -3 // Start with a non-adjacent value\n        freq.forEachIndexed { index, count ->\n            if (count > 0) {\n                if (count != k) return false // Early exit if any char doesn't meet the exact frequency\n                if (prev >= 0 && index - prev > 2) return false // Check adjacency with a gap of more than 2\n                prev = index\n            }\n        }\n        return true\n    }\n}"
}