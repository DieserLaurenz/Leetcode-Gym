{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38048000,
    "question_id": "3223",
    "elapsed_time": 5122,
    "compare_result": "011111111110110111010111110111010111111011111011111011111010111010111000011101111011011110011111011111111110011110111001101010101110101111111011001111110110111111011111011101111111011011111111111011111111101110111111111111111110111111100111111111101111101101101010110111111010111111010101111110101111111101111111011001101111101101100111110111110111111111011111110001111111111111111111111111111111111111111011111011111101111111111111111111111111111111111111111111111101011110111111101000011101110011111110101011001110111111111111110010111101111101111111111111100011111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111000000000000000000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708299108395,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 621,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1179275952",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun countCompleteSubstrings(word: String, k: Int): Int {\n        var total = 0\n        val n = word.length\n\n        for (start in 0 until n) {\n            val freq = mutableMapOf<Char, Int>()\n            var maxChar = 'a'\n            var minChar = 'z'\n\n            for (end in start until n) {\n                val c = word[end]\n                freq[c] = freq.getOrDefault(c, 0) + 1\n\n                if (c > maxChar) maxChar = c\n                if (c < minChar) minChar = c\n\n                if (end - start + 1 >= k * (maxChar - minChar + 1) && freq.all { it.value % k == 0 } && maxChar - minChar <= 2) {\n                    total++\n                }\n            }\n        }\n        return total\n    }\n}"
}