{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59460000,
    "question_id": "3223",
    "elapsed_time": 4017,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298689139,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 448,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1179273018",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function countCompleteSubstrings(word: string, k: number): number {\n    let result = 0;\n    const n = word.length;\n\n    // Function to check if all characters in the map have exactly k occurrences\n    const allCharsHaveKOccurrences = (charMap: Map<string, number>): boolean => {\n        for (let value of charMap.values()) {\n            if (value !== k) return false;\n        }\n        return true;\n    };\n\n    for (let start = 0; start < n; start++) {\n        const charMap = new Map<string, number>();\n        for (let end = start; end < n; end++) {\n            const char = word[end];\n            charMap.set(char, (charMap.get(char) || 0) + 1);\n\n            // Check if current substring is valid\n            if (charMap.size > 1 && allCharsHaveKOccurrences(charMap)) {\n                let valid = true;\n                let prevChar = '';\n                for (let j = start; j <= end; j++) {\n                    if (prevChar && Math.abs(word.charCodeAt(j) - word.charCodeAt(j - 1)) > 2) {\n                        valid = false;\n                        break;\n                    }\n                    prevChar = word[j];\n                }\n                if (valid) result++;\n            }\n        }\n    }\n\n    return result;\n}"
}