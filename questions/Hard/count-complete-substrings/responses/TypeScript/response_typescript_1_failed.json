{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58024000,
    "question_id": "3223",
    "elapsed_time": 490,
    "compare_result
    "code_output": "29",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298644781,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 416,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1179272725",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function countCompleteSubstrings(word: string, k: number): number {\n    let total = 0;\n    // Iterate through all possible 26 characters as starting points\n    for (let i = 0; i < 26; i++) {\n        let freq = Array(26).fill(0);\n        let count = 0;\n        let distinctChar = 0;\n        for (let start = 0, end = 0; end < word.length; end++) {\n            // Update frequency of the current character\n            let index = word.charCodeAt(end) - 'a'.charCodeAt(0);\n            if (freq[index] == 0) distinctChar++;\n            freq[index]++;\n            // If the character's frequency hits k, increase count\n            if (freq[index] == k) count++;\n            // While the number of distinct characters is greater than the allowed range (i + 1 to i + 3)\n            while (distinctChar > 3 || (distinctChar == 3 && (i + 2 < index || freq[i] == 0))) {\n                let startIdx = word.charCodeAt(start) - 'a'.charCodeAt(0);\n                if (freq[startIdx] == k) count--;\n                freq[startIdx]--;\n                if (freq[startIdx] == 0) distinctChar--;\n                start++;\n            }\n            // If all characters in the window have exactly k occurrences, increment total\n            if (count == distinctChar && distinctChar <= 3) {\n                total += 1;\n            }\n        }\n    }\n    return total;\n}"
}