{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59784000,
    "question_id": "3223",
    "elapsed_time": 4007,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000",
    "code_output": "21",
    "std_output": "",
    "last_testcase": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "expected_output": "20",
    "task_finish_time": 1708298507885,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 715,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1179271700",
    "input_formatted": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\", 2",
    "input": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar countCompleteSubstrings = function(word, k) {\n    let result = 0;\n\n    for (let start = 0; start < word.length; start++) {\n        let freq = {};\n        let uniqueChars = 0;\n        for (let end = start; end < word.length; end++) {\n            const char = word[end];\n            if (!freq[char]) {\n                freq[char] = 0;\n                uniqueChars++;\n            }\n            freq[char]++;\n            \n            if (freq[char] > k) break;\n            \n            if (Object.values(freq).every(count => count === k) && isAdjacent(freq)) {\n                result++;\n            }\n        }\n    }\n\n    function isAdjacent(freq) {\n        const chars = Object.keys(freq).sort();\n        for (let i = 1; i < chars.length; i++) {\n            if (chars[i].charCodeAt(0) - chars[i - 1].charCodeAt(0) > 2) return false;\n        }\n        return true;\n    }\n\n    return result;\n};"
}