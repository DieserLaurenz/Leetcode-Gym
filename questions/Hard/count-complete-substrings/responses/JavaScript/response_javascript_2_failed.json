{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59008000,
    "question_id": "3223",
    "elapsed_time": 4012,
    "compare_result": "000000110000000101010110110001000110110000111011011011100010101010110000011100111001010110001110011110110110011110011001100000100010101001101011001110010000111010011110011100011111011011111001111011010100000110111111011110111110100111100110010000001011100101101010110111111010100110010101111110101111101101111100000001101011001001100011100111010101111110001100110001110110111101011111001101110010101111011001001000111100101101111111011111111000001111111111001101111101011000011111001000011001110010001110101000001110111111111111110000110101101101111001111111100011011001001001001100101011110100111001010111110100111111111011111111011111101111111011111011111111111110111111111110110111111100011111111101110111111111100001000110110000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298544079,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 443,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1179271959",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar countCompleteSubstrings = function(word, k) {\n    let totalCompleteSubstrings = 0;\n    const n = word.length;\n\n    // Function to check if a substring is complete\n    const isComplete = (counts, k) => {\n        for (const count of counts) {\n            if (count % k !== 0) return false;\n        }\n        return true;\n    };\n\n    // Main logic to find complete substrings\n    for (let i = 0; i < n; i++) {\n        const counts = Array(26).fill(0);\n        for (let j = i; j < n; j++) {\n            counts[word.charCodeAt(j) - 'a'.charCodeAt(0)]++;\n            if (isComplete(counts, k)) {\n                // Check if the substring satisfies the condition\n                let valid = true;\n                let prev = -3; // Initialize to satisfy the condition for the first character\n                for (let l = 0; l < 26; l++) {\n                    if (counts[l] > 0) {\n                        if (l - prev > 2) {\n                            valid = false;\n                            break;\n                        }\n                        prev = l;\n                    }\n                }\n                if (valid) totalCompleteSubstrings++;\n            }\n        }\n    }\n\n    return totalCompleteSubstrings;\n};"
}