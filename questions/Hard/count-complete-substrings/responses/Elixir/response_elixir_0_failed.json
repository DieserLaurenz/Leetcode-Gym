{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "warning: variable \"k\" is unused (if the variable is not meant to be used, prefix it with an underscore)",
    "full_compile_error": "warning: variable \"k\" is unused (if the variable is not meant to be used, prefix it with an underscore)\nLine 21:   Solution.count_combinations_for_char/4\n** (ArgumentError) cannot pipe char1 |> String.to_charlist() into hd() - char2, the :- operator can only take one argument\n    (elixir 1.15.7) lib/macro.ex:371: Macro.pipe/3\n    (stdlib 5.1.1) lists.erl:1594: :lists.foldl/3\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 27:     Solution.valid_chars?/2\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 27:     Solution.valid_chars?/2\n    (elixir 1.15.7) expanding macro: Kernel.|>/2\nLine 27:     Solution.valid_chars?/2",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3223",
    "task_finish_time": 1708308497252,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1179360470",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_complete_substrings(word :: String.t, k :: integer) :: integer\n  def count_complete_substrings(word, k) do\n    word\n    |> String.graphemes()\n    |> Enum.reduce(%{}, fn c, acc ->\n      Map.update(acc, c, 1, &(&1 + 1))\n    end)\n    |> Enum.filter(fn {_key, value} -> rem(value, k) == 0 end)\n    |> Enum.map(fn {key, value} -> {key, div(value, k)} end)\n    |> count_valid_combinations(k)\n  end\n\n  defp count_valid_combinations(char_map, k) do\n    char_map\n    |> Enum.reduce(0, fn {char, times}, acc ->\n      acc + count_combinations_for_char(char_map, char, times, k)\n    end)\n  end\n\n  defp count_combinations_for_char(char_map, char, times, k),\n    do: Enum.reduce(char_map, 0, fn {other_char, other_times}, acc ->\n      if valid_chars?(char, other_char) and times == other_times, do: acc + 1, else: acc\n    end)\n\n  defp valid_chars?(char1, char2) do\n    diff = abs(char1 |> String.to_charlist() |> hd() - char2 |> String.to_charlist() |> hd())\n    diff <= 2\n  end\nend"
}