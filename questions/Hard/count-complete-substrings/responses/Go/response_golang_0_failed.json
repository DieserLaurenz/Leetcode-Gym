{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6368000,
    "question_id": "3223",
    "elapsed_time": 3008,
    "compare_result": "011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708307512403,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 727,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1179351151",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countCompleteSubstrings(word string, k int) int {\n    count := 0\n    for start := 0; start < len(word); start++ {\n        freq := make(map[rune]int)\n        maxChar, minChar := 'a'-1, 'z'+1\n        for end := start; end < len(word); end++ {\n            char := rune(word[end])\n            freq[char]++\n            if char > maxChar {\n                maxChar = char\n            }\n            if char < minChar {\n                minChar = char\n            }\n            if end-start+1 >= k && (maxChar-minChar) <= 2 {\n                isValid := true\n                for _, v := range freq {\n                    if v != k {\n                        isValid = false\n                        break\n                    }\n                }\n                if isValid {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}"
}