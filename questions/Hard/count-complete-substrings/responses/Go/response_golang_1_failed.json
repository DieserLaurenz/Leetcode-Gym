{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6408000,
    "question_id": "3223",
    "elapsed_time": 176,
    "compare_result
    "code_output": "26",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708307544330,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 441,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1179351479",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countCompleteSubstrings(word string, k int) int {\n    result := 0\n    for i := 0; i < 26; i++ {\n        freq := make([]int, 26)\n        count := 0\n        for start, end := 0, 0; end < len(word); end++ {\n            idx := word[end] - 'a'\n            if freq[idx] == 0 {\n                count++\n            }\n            freq[idx]++\n            for count > 2 {\n                startIdx := word[start] - 'a'\n                freq[startIdx]--\n                if freq[startIdx] == 0 {\n                    count--\n                }\n                start++\n            }\n            if end-start+1 >= k*2 && (end-start+1)%k == 0 {\n                isValid := true\n                for j := 0; j < 26; j++ {\n                    if freq[j] != 0 && freq[j] != k {\n                        isValid = false\n                        break\n                    }\n                }\n                if isValid {\n                    result++\n                }\n            }\n        }\n    }\n    return result\n}"
}