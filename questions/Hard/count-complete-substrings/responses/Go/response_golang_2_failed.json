{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6396000,
    "question_id": "3223",
    "elapsed_time": 3011,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708307579583,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 722,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1179351784",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countCompleteSubstrings(word string, k int) int {\n    var count int\n    for start := 0; start < len(word); start++ {\n        freq := make(map[rune]int)\n        distinct := 0\n        for end := start; end < len(word); end++ {\n            char := rune(word[end])\n            if freq[char] == 0 {\n                distinct++\n            }\n            freq[char]++\n            if freq[char] > k {\n                break\n            }\n            if distinct <= 3 && end-start+1 >= k*distinct && checkCompleteSubstring(freq, k) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc checkCompleteSubstring(freq map[rune]int, k int) bool {\n    minChar, maxChar := 'z'+1, 'a'-1\n    for char, count := range freq {\n        if count != k {\n            return false\n        }\n        if char < minChar {\n            minChar = char\n        }\n        if char > maxChar {\n            maxChar = char\n        }\n    }\n    return maxChar-minChar <= 2\n}"
}