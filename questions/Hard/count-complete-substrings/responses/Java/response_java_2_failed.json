{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45336000,
    "display_runtime": "447",
    "question_id": "3223",
    "elapsed_time": 641,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298125876,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 432,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1179268922",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int countCompleteSubstrings(String word, int k) {\n        int res = 0;\n        for (char c = 'a'; c <= 'z'; ++c) {\n            res += countSubstringsWithCharKTimes(word, c, k);\n        }\n        return res;\n    }\n\n    private int countSubstringsWithCharKTimes(String s, char c, int k) {\n        int res = 0, freq = 0, validFreq = 0, l = 0;\n        int[] count = new int[128];\n        for (int r = 0; r < s.length(); ++r) {\n            if (s.charAt(r) == c) {\n                ++freq;\n                if (freq <= k) ++validFreq;\n                if (freq == k + 1) --validFreq;\n            }\n            count[s.charAt(r)]++;\n            while (count[s.charAt(r)] > k || (r - l + 1) > k * 3) {\n                if (s.charAt(l) == c) {\n                    --freq;\n                    if (freq < k) --validFreq;\n                }\n                count[s.charAt(l++)]--;\n            }\n            if (validFreq == k) res += l + 1;\n        }\n        return res;\n    }\n}"
}