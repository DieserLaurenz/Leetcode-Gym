{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45184000,
    "question_id": "3223",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298086597,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 542,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1179268578",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int countCompleteSubstrings(String word, int k) {\n        int total = 0;\n        for (int start = 0; start < word.length(); start++) {\n            int[] freq = new int[26];\n            int maxChar = 0, uniqueKCount = 0;\n            for (int end = start; end < word.length(); end++) {\n                int charIndex = word.charAt(end) - 'a';\n                if (++freq[charIndex] == k) uniqueKCount++;\n                maxChar = Math.max(maxChar, charIndex);\n                if (freq[charIndex] > k || (maxChar - (start == end ? maxChar : word.charAt(start) - 'a') > 2)) {\n                    if (freq[charIndex] == k + 1) uniqueKCount--;\n                    break;\n                }\n                if (uniqueKCount == end - start + 1) total++;\n            }\n        }\n        return total;\n    }\n}"
}