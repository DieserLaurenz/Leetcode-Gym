{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211696000,
    "question_id": "3223",
    "elapsed_time": 3017,
    "compare_result": "011111111111110111010111110011010111111001111011111011110010101010110000011101111011011110011111011110111110011110111001101010100110101111111011001110110010111011011111011101111111011011111011111111110101000110111111011111111111101111100111110000001111101101101011110111111011111111010101111110101111111101111101011001101111101001100011110111111111111111011110110001111111111111111111111111111110111111111011011011111101111111111111111111111111111111111111111111111101011010011111101000011101110010001110101001001110111111111111110010111101111101111001111111100011011111111111111111111111111111111111110111111111111111111111111111011111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708307711750,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 535,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1179353032",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef count_complete_substrings(word, k)\n    total_count = 0\n    \n    (0...word.size).each do |start|\n        freq = Hash.new(0)\n        unique_chars = 0\n        complete_chars = 0\n        \n        (start...word.size).each do |end_index|\n            char = word[end_index]\n            freq[char] += 1\n            \n            unique_chars += 1 if freq[char] == 1\n            complete_chars += 1 if freq[char] == k\n            \n            if unique_chars == complete_chars && unique_chars <= 3\n                all_valid = true\n                \n                freq.keys.each do |key1|\n                    freq.keys.each do |key2|\n                        if (key1.ord - key2.ord).abs > 2\n                            all_valid = false\n                            break\n                        end\n                    end\n                    break unless all_valid\n                end\n                \n                total_count += 1 if all_valid\n            end\n            \n            break if unique_chars > 3 || complete_chars > 3 || freq[char] > k\n        end\n    end\n    \n    total_count\nend"
}