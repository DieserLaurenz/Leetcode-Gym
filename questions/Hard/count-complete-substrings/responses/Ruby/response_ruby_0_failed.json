{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211568000,
    "question_id": "3223",
    "elapsed_time": 3096,
    "compare_result
    "code_output": "21",
    "std_output": "",
    "last_testcase": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "expected_output": "20",
    "task_finish_time": 1708307641296,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 586,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1179352348",
    "input_formatted": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\", 2",
    "input": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef count_complete_substrings(word, k)\n    return 0 if k > word.length\n    count = 0\n    (0...word.length).each do |i|\n        freq = Hash.new(0)\n        (i...word.length).each do |j|\n            freq[word[j]] += 1\n            break if freq[word[j]] > k\n            if freq.all? { |_, v| v == k } && valid_diff(freq.keys)\n                count += 1\n            end\n        end\n    end\n    count\nend\n\ndef valid_diff(chars)\n    chars = chars.sort\n    (1...chars.length).all? { |i| (chars[i].ord - chars[i-1].ord).abs <= 2 }\nend"
}