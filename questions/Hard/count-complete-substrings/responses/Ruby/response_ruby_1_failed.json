{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211600000,
    "question_id": "3223",
    "elapsed_time": 3091,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708307676119,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 454,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1179352692",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef count_complete_substrings(word, k)\n    max_count = 0\n    ('a'..'z').each do |first_char|\n        ('a'..'z').each do |second_char|\n            next if (first_char.ord - second_char.ord).abs > 2\n            count, freq, k_count = 0, Hash.new(0), 0\n            left = 0\n            (0...word.length).each do |right|\n                char = word[right]\n                next unless char == first_char || char == second_char\n                freq[char] += 1\n                k_count += 1 if freq[char] == k\n                while k_count == freq.keys.size\n                    if right - left + 1 == k * freq.keys.size\n                        count += 1\n                        break\n                    end\n                    if freq[word[left]] == k\n                        k_count -= 1\n                    end\n                    freq[word[left]] -= 1\n                    left += 1\n                end\n            end\n            max_count += count\n        end\n    end\n    max_count\nend"
}