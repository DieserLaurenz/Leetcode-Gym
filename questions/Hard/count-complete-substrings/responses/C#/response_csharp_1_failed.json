{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 87404000,
    "question_id": "3223",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298356831,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 734,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1179270594",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int CountCompleteSubstrings(string word, int k) {\n        int count = 0;\n        for (int start = 0; start < word.Length; start++) {\n            int[] freq = new int[26];\n            bool[] visited = new bool[26];\n            int uniqueChars = 0, validChars = 0;\n            for (int end = start; end < word.Length; end++) {\n                int idx = word[end] - 'a';\n                freq[idx]++;\n                if (!visited[idx]) {\n                    uniqueChars++;\n                    visited[idx] = true;\n                }\n                if (freq[idx] == k) validChars++;\n                else if (freq[idx] == k + 1) validChars--;\n\n                if (uniqueChars == validChars && isValidSubstring(freq, k)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private bool isValidSubstring(int[] freq, int k) {\n        int first = -1, last = -1;\n        for (int i = 0; i < 26; i++) {\n            if (freq[i] == k) {\n                if (first == -1) first = i;\n                last = i;\n            } else if (freq[i] != 0) return false;\n        }\n        return last - first <= 2;\n    }\n}"
}