{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27600000,
    "question_id": "3223",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708297993581,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 636,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179267929",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int countCompleteSubstrings(string word, int k) {\n        int result = 0;\n        for (int start = 0; start < word.size(); ++start) {\n            unordered_map<char, int> freq;\n            bool invalid = false;\n            for (int end = start; end < word.size() && !invalid; ++end) {\n                freq[word[end]]++;\n                // Check if all characters meet the frequency requirement and adjacent difference condition\n                bool valid = true;\n                int prevFreq = -1;\n                for (auto &pair : freq) {\n                    if (pair.second > k) {\n                        invalid = true;\n                        break;\n                    }\n                    if (prevFreq != -1 && pair.second != prevFreq) {\n                        valid = false;\n                    }\n                    prevFreq = pair.second;\n                }\n                if (valid && !invalid) {\n                    for (int i = start; i <= end; ++i) {\n                        for (int j = i + 1; j <= end; ++j) {\n                            if (abs(word[i] - word[j]) > 2) {\n                                valid = false;\n                                break;\n                            }\n                        }\n                        if (!valid) break;\n                    }\n                }\n                if (valid && !invalid && prevFreq == k) result++;\n            }\n        }\n        return result;\n    }\n};"
}