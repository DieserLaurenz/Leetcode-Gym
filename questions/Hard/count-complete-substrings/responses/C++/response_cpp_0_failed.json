{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 75360000,
    "question_id": "3223",
    "elapsed_time": 4027,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"abaab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708297926945,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 671,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179267425",
    "input_formatted": "\"abaab\", 2",
    "input": "\"abaab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int countCompleteSubstrings(string word, int k) {\n        int count = 0;\n        for (int start = 0; start < word.length(); ++start) {\n            unordered_map<char, int> charCount;\n            vector<int> lastPos(26, -1);\n            bool isValid = true;\n            for (int end = start; end < word.length(); ++end) {\n                char currentChar = word[end];\n                ++charCount[currentChar];\n                if (lastPos[currentChar - 'a'] != -1 && end - lastPos[currentChar - 'a'] > k) {\n                    isValid = false;\n                    break;\n                }\n                lastPos[currentChar - 'a'] = end;\n                if (charCount[currentChar] > k) {\n                    isValid = false;\n                    break;\n                }\n                bool allK = true;\n                for (auto &p : charCount) {\n                    if (p.second != k) {\n                        allK = false;\n                        break;\n                    }\n                    if (end > start) {\n                        char prevChar = word[end - 1];\n                        if (abs(prevChar - currentChar) > 2) {\n                            allK = false;\n                            break;\n                        }\n                    }\n                }\n                if (allK && isValid) {\n                    ++count;\n                }\n            }\n        }\n        return count;\n    }\n};"
}