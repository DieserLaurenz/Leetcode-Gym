{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63736000,
    "question_id": "3223",
    "elapsed_time": 10324,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708307830744,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 716,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1179354058",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countCompleteSubstrings(word: String, k: Int): Int = {\n        def isValid(freq: Map[Char, Int], k: Int): Boolean = \n            freq.values.forall(_ == k) && freq.keys.map(_.toInt).max - freq.keys.map(_.toInt).min <= 2\n\n        var count = 0\n        for (i <- word.indices) {\n            var freq: Map[Char, Int] = Map.empty\n            for (j <- i until word.length) {\n                freq = freq.updated(word(j), freq.getOrElse(word(j), 0) + 1)\n                if (freq.values.sum == (j - i + 1) && isValid(freq, k)) count += 1\n            }\n        }\n        count\n    }\n}"
}