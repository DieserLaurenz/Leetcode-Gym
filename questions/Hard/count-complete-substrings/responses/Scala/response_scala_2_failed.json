{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65868000,
    "question_id": "3223",
    "elapsed_time": 8027,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708307878489,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 472,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1179354554",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countCompleteSubstrings(word: String, k: Int): Int = {\n        var total = 0\n        for (i <- 'a' to 'z') {\n            for (j <- i to ('z'.min((i + 2).toChar))) {\n                var count = Array.fill(26)(0)\n                var unique = 0\n                var complete = 0\n                var left = 0\n                for (right <- word.indices) {\n                    if (word(right) < i || word(right) > j) {\n                        count = Array.fill(26)(0)\n                        unique = 0\n                        complete = 0\n                        left = right + 1\n                    } else {\n                        val rIndex = word(right) - 'a'\n                        if (count(rIndex) == 0) unique += 1\n                        count(rIndex) += 1\n                        if (count(rIndex) == k) complete += 1\n                        if (count(rIndex) == k + 1) complete -= 1\n                        if (unique == complete && unique > 0) total += 1\n                    }\n                }\n            }\n        }\n        total\n    }\n}"
}