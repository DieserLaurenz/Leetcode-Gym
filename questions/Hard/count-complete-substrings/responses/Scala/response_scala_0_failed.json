{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55448000,
    "question_id": "3223",
    "elapsed_time": 10250,
    "compare_result
    "code_output": "21",
    "std_output": "",
    "last_testcase": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "expected_output": "20",
    "task_finish_time": 1708307789378,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 734,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1179353661",
    "input_formatted": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\", 2",
    "input": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def countCompleteSubstrings(word: String, k: Int): Int = {\n        val n = word.length\n        var count = 0\n        \n        for (start <- 0 until n) {\n            val freq = new Array[Int](26)\n            var uniqueChars = 0\n            var validChars = 0\n            \n            for (end <- start until n) {\n                val index = word(end) - 'a'\n                if (freq(index) == 0) uniqueChars += 1\n                freq(index) += 1\n                if (freq(index) == k) validChars += 1\n                \n                if (uniqueChars == validChars && checkAdjacent(freq, k)) count += 1\n            }\n        }\n        \n        count\n    }\n    \n    def checkAdjacent(freq: Array[Int], k: Int): Boolean = {\n        var prev = -3 // Initialize with a value that is out of possible range\n        for (i <- freq.indices) {\n            if (freq(i) > 0 && freq(i) != k) return false\n            if (freq(i) == k) {\n                if (prev >= 0 && (i - prev) > 2) return false\n                prev = i\n            }\n        }\n        true\n    }\n}"
}