{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20032000,
    "question_id": "3223",
    "elapsed_time": 5024,
    "compare_result
    "code_output": "21",
    "std_output": "",
    "last_testcase": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "expected_output": "20",
    "task_finish_time": 1708298830090,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 716,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1179273988",
    "input_formatted": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\", 2",
    "input": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function countCompleteSubstrings($word, $k) {\n        $res = 0;\n        for ($i = 0; $i < strlen($word); ++$i) {\n            $count = [];\n            for ($j = $i; $j < strlen($word); ++$j) {\n                if (!isset($count[$word[$j]])) {\n                    $count[$word[$j]] = 1;\n                } else {\n                    $count[$word[$j]]++;\n                }\n                \n                if ($count[$word[$j]] > $k) break;\n                \n                $valid = true;\n                foreach ($count as $char => $cnt) {\n                    if ($cnt !== $k) {\n                        $valid = false;\n                        break;\n                    }\n                }\n                \n                if ($valid && $this->checkAdjacentChars(array_keys($count))) {\n                    $res++;\n                }\n            }\n        }\n        return $res;\n    }\n    \n    private function checkAdjacentChars($chars) {\n        sort($chars);\n        for ($i = 1; $i < count($chars); $i++) {\n            if (ord($chars[$i]) - ord($chars[$i - 1]) > 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
}