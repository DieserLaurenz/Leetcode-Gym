{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6336000,
    "question_id": "3223",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"gvgvvgv\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708298262924,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 647,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1179269901",
    "input_formatted": "\"gvgvvgv\", 2",
    "input": "\"gvgvvgv\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n\nint isValid(int* freq, int k) {\n    for (int i = 0; i < 26; i++) {\n        if (freq[i] && freq[i] != k) return false;\n    }\n    return true;\n}\n\nint countCompleteSubstrings(char* word, int k) {\n    int count = 0, n = strlen(word);\n    for (int start = 0; start < n; start++) {\n        int freq[26] = {0}, uniqueChars = 0;\n        for (int end = start; end < n; end++) {\n            if (++freq[word[end] - 'a'] == k) uniqueChars++;\n            if (freq[word[end] - 'a'] > k) uniqueChars--;\n            if (uniqueChars > 0 && isValid(freq, k)) {\n                count++;\n            }\n        }\n    }\n    return count;\n}"
}