{
    "status_code": 15,
    "lang": "c",
    "run_success": false,
    "runtime_error": "AddressSanitizer: heap-buffer-overflow on address 0x602000000017 at pc 0x55a714c1ab68 bp 0x7ffd39a62f20 sp 0x7ffd39a62f10",
    "full_runtime_error": "=================================================================\n==22==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x602000000017 at pc 0x55a714c1ab68 bp 0x7ffd39a62f20 sp 0x7ffd39a62f10\nREAD of size 1 at 0x602000000017 thread T0\n    #2 0x7fe8308d6d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #3 0x7fe8308d6e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n0x602000000017 is located 0 bytes to the right of 7-byte region [0x602000000010,0x602000000017)\nallocated by thread T0 here:\n    #0 0x7fe8312a6887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145\n    #3 0x7fe8308d6d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\nShadow bytes around the buggy address:\n  0x0c047fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c047fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x0c047fff8000: fa fa[07]fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07 \n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==22==ABORTING",
    "status_runtime": "N/A",
    "memory": 13072000,
    "question_id": "3223",
    "elapsed_time": 42,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298211929,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1179269539",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "#include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <limits.h>\n\nint countCompleteSubstrings(char* word, int k) {\n    int total = 0;\n    for (char ch = 'a'; ch <= 'z'; ++ch) {\n        int count[128] = {0}, distinct = 0;\n        for (int i = 0, j = 0; word[i]; ++i) {\n            if (++count[word[i]] == k) distinct += k;\n            while (distinct > k * 3 || (word[i] > ch + 2 || word[i] < ch - 2)) {\n                if (count[word[j]] == k) distinct -= k;\n                --count[word[j++]];\n            }\n            if (distinct == k * 3) total += j + 1;\n        }\n    }\n    return total;\n}"
}