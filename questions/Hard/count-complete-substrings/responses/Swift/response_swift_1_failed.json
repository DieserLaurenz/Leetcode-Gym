{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16368000,
    "question_id": "3223",
    "elapsed_time": 5029,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298936041,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 342,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179274712",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func countCompleteSubstrings(_ word: String, _ k: Int) -> Int {\n        var result = 0\n        let n = word.count\n        let s = Array(word.utf8).map { Int($0) - 97 }\n\n        for i in 0..<26 {\n            var count = [Int](repeating: 0, count: n + 1)\n            for j in 0..<n {\n                count[j + 1] = count[j] + (s[j] == i ? 1 : 0)\n            }\n            for start in 0..<n {\n                for end in start + 1...n where (end - start) % k == 0 {\n                    let uniqueChars = Set(s[start..<end]).count\n                    if uniqueChars == 1 || (uniqueChars == 2 && abs(s[start] - s[end - 1]) == 2) {\n                        if count[end] - count[start] == (end - start) / k {\n                            result += 1\n                        }\n                    }\n                }\n            }\n        }\n        return result\n    }\n}"
}