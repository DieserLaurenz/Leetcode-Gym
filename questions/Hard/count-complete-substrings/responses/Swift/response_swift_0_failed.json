{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16424000,
    "question_id": "3223",
    "elapsed_time": 5126,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708298898548,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 718,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179274451",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func countCompleteSubstrings(_ word: String, _ k: Int) -> Int {\n        let chars = Array(word)\n        var count = 0\n        \n        for start in 0..<chars.count {\n            var freq = [Character: Int]()\n            for end in start..<chars.count {\n                freq[chars[end], default: 0] += 1\n                if freq.values.allSatisfy({ $0 == k }) && isAdjacentDiffAtMostTwo(Array(freq.keys)) {\n                    count += 1\n                }\n            }\n        }\n        \n        return count\n    }\n    \n    private func isAdjacentDiffAtMostTwo(_ chars: [Character]) -> Bool {\n        for i in 1..<chars.count {\n            if abs(Int(chars[i].asciiValue!) - Int(chars[i-1].asciiValue!)) > 2 {\n                return false\n            }\n        }\n        return true\n    }\n}"
}