{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 97316000,
    "question_id": "3223",
    "elapsed_time": 2208,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708308391936,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 411,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1179359465",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_complete_substrings(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_complete_substrings(Word, K) ->\n    S = unicode:characters_to_list(Word),\n    ValidSubstrings = lists:foldl(fun(Char, Acc) ->\n        {NewAcc, _} = lists:foldl(fun\n            (C, {SubAcc, SubStr}) when C =:= Char; C =:= Char-1; C =:= Char+1 ->\n                case maps:get(C, SubStr, 0) of\n                    Count when Count < K -> {SubAcc, maps:put(C, Count+1, SubStr)};\n                    Count when Count == K -> {SubAcc + 1, maps:remove(C, SubStr)}\n                end;\n            (_, {SubAcc, SubStr}) ->\n                {SubAcc, SubStr}\n            end, {0, #{}}, S),\n        Acc + NewAcc\n    end, 0, lists:seq($a, $z)),\n    ValidSubstrings."
}