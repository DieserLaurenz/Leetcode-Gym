{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 99876000,
    "question_id": "3223",
    "elapsed_time": 5040,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708308438841,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 20,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1179359864",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_complete_substrings(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_complete_substrings(Word, K) ->\n    WordList = unicode:characters_to_list(Word),\n    count_valid_substrings(WordList, K, []).\n\ncount_valid_substrings([], _, Acc) ->\n    length(Acc);\ncount_valid_substrings([H|T], K, Acc) ->\n    Substrings = generate_substrings([H|T], K, []),\n    count_valid_substrings(T, K, Acc ++ Substrings).\n\ngenerate_substrings(_, 0, Acc) ->\n    [lists:sort(Acc)];\ngenerate_substrings([], _, Acc) when Acc =/= [] ->\n    [lists:sort(Acc)];\ngenerate_substrings([], _, _) ->\n    [];\ngenerate_substrings([H|T], K, Acc) ->\n    NextAcc = case Acc of\n                  [] -> [H];\n                  [AH|_] -> case abs(H - AH) of\n                                 0 -> [H|Acc];\n                                 1 -> [H|Acc];\n                                 2 -> [H|Acc];\n                                 _ -> []\n                             end\n              end,\n    if length(NextAcc) =:= K -> [lists:sort(NextAcc)];\n       true -> generate_substrings(T, K, NextAcc)\n    end.\n\n-spec is_complete_substring(list(char()), integer()) -> boolean().\nis_complete_substring(Substr, K) ->\n    Freq = lists:foldl(fun(E, Acc) -> maps:update_with(E, fun(Val) -> Val + 1 end, 1, Acc) end, #{}, Substr),\n    AllEqualK = maps:all(fun(_, Val) -> Val =:= K end, Freq),\n    Seq = lists:seq(hd(Substr), lists:last(Substr)),\n    Subset = maps:is_key_subset(maps:from_list([{X, true} || X <- Seq]), Freq),\n    AllEqualK andalso Subset."
}