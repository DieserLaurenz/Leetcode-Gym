{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2272000,
    "question_id": "3223",
    "elapsed_time": 2219,
    "compare_result
    "code_output": "21",
    "std_output": "",
    "last_testcase": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "expected_output": "20",
    "task_finish_time": 1708308141244,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 733,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1179357094",
    "input_formatted": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\", 2",
    "input": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_complete_substrings(word: String, k: i32) -> i32 {\n        let mut result = 0;\n        let word_len = word.len();\n        let word = word.as_bytes();\n        let k = k as usize;\n\n        for start in 0..word_len {\n            let mut freq = vec![0; 26];\n            let mut unique_chars = 0;\n            for end in start..word_len {\n                let idx = (word[end] - b'a') as usize;\n                if freq[idx] == 0 {\n                    unique_chars += 1;\n                }\n                freq[idx] += 1;\n\n                if freq[idx] > k {\n                    break;\n                }\n\n                if freq[idx] == k && unique_chars * k == end - start + 1 {\n                    let mut max_diff = 0;\n                    let mut last_char = 0;\n                    let mut first = true;\n                    for (i, &f) in freq.iter().enumerate() {\n                        if f == k {\n                            if first {\n                                last_char = i;\n                                first = false;\n                                continue;\n                            }\n                            max_diff = max_diff.max(i - last_char);\n                            last_char = i;\n                        }\n                    }\n                    if max_diff <= 2 {\n                        result += 1;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n}"
}