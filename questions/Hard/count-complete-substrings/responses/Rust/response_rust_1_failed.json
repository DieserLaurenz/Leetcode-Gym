{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2228000,
    "question_id": "3223",
    "elapsed_time": 2039,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708308105370,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 734,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1179356791",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_complete_substrings(word: String, k: i32) -> i32 {\n        let mut result = 0;\n        let mut char_counts = [0; 26];\n        let k = k as usize;\n        let word_bytes = word.as_bytes();\n        \n        for start in 0..word.len() {\n            char_counts.iter_mut().for_each(|x| *x = 0);\n            for end in start..word.len() {\n                char_counts[(word_bytes[end] - b'a') as usize] += 1;\n                if char_counts.iter().filter(|&&c| c > 0).all(|&c| c == k) {\n                    let max_char = char_counts.iter().enumerate().filter(|&(_, &c)| c > 0).max_by_key(|&(_, &c)| c).unwrap().0 as u8;\n                    let min_char = char_counts.iter().enumerate().filter(|&(_, &c)| c > 0).min_by_key(|&(_, &c)| c).unwrap().0 as u8;\n                    if max_char - min_char <= 2 {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        \n        result\n    }\n}"
}