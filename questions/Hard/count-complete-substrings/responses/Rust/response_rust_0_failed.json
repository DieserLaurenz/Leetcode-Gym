{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2164000,
    "question_id": "3223",
    "elapsed_time": 2014,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708308070363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 447,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1179356488",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_complete_substrings(word: String, k: i32) -> i32 {\n        let mut count = 0;\n        let k = k as usize;\n        let word = word.as_bytes();\n        let n = word.len();\n\n        'outer: for start in 0..n {\n            let mut freq = vec![0; 26];\n            for end in start..n {\n                let idx = (word[end] - b'a') as usize;\n                freq[idx] += 1;\n                if freq[idx] > k {\n                    continue 'outer;\n                }\n                if end - start + 1 >= k * 26 {\n                    let mut valid = true;\n                    let mut prev_char = 0;\n                    for i in 0..26 {\n                        if freq[i] > 0 {\n                            if freq[i] != k {\n                                valid = false;\n                                break;\n                            }\n                            if prev_char != 0 && (i as i32 - prev_char).abs() > 2 {\n                                valid = false;\n                                break;\n                            }\n                            prev_char = i as i32;\n                        }\n                    }\n                    if valid {\n                        count += 1;\n                    }\n                }\n            }\n        }\n\n        count\n    }\n}"
}