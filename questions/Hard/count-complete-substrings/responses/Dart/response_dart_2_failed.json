{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 154948000,
    "question_id": "3223",
    "elapsed_time": 3232,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"igigee\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708299251261,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 487,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1179277019",
    "input_formatted": "\"igigee\", 2",
    "input": "\"igigee\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int countCompleteSubstrings(String word, int k) {\n    int result = 0;\n    for (int first = 0; first < 26; ++first) {\n      Map<int, int> freq = {};\n      int uniqueCount = 0;\n      int kCount = 0;\n      for (int start = 0, end = 0; end < word.length; end++) {\n        int endChar = word.codeUnitAt(end) - 'a'.codeUnitAt(0);\n        freq[endChar] = (freq[endChar] ?? 0) + 1;\n        if (freq[endChar] == 1) uniqueCount++;\n        if (freq[endChar] == k) kCount++;\n\n        while (uniqueCount > 3) {\n          int startChar = word.codeUnitAt(start) - 'a'.codeUnitAt(0);\n          if (freq[startChar] == k) kCount--;\n          freq[startChar] = freq[startChar]! - 1;\n          if (freq[startChar] == 0) uniqueCount--;\n          start++;\n        }\n\n        if (uniqueCount == kCount && uniqueCount <= 3 && isAdjacent(first, freq.keys.toList())) {\n          result++;\n        }\n      }\n    }\n    return result;\n  }\n\n  bool isAdjacent(int first, List<int> keys) {\n    for (int key in keys) {\n      if (key < first || key > first + 2) return false;\n    }\n    return true;\n  }\n}"
}