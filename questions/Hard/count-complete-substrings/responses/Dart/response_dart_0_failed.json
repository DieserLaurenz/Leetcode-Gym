{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 149816000,
    "question_id": "3223",
    "elapsed_time": 5026,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000",
    "code_output": "21",
    "std_output": "",
    "last_testcase": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "expected_output": "20",
    "task_finish_time": 1708299176864,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 717,
    "total_testcases": 759,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1179276469",
    "input_formatted": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\", 2",
    "input": "\"fffififmfhhmihhifhifzhihizfmmffihzfifmfmizzfzfhmfmiimzffzzifzmziiizfzmfzfiiffffmhiizimmfm\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int countCompleteSubstrings(String word, int k) {\n    int count = 0;\n    for (int start = 0; start < word.length; start++) {\n      Map<String, int> charCount = {};\n      for (int end = start; end < word.length; end++) {\n        String currentChar = word[end];\n        charCount[currentChar] = (charCount[currentChar] ?? 0) + 1;\n        if (charCount[currentChar]! > k) break;\n        if (charCount.values.every((count) => count == k) && _checkAdjacentDiff(charCount.keys.toList())) {\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  bool _checkAdjacentDiff(List<String> chars) {\n    chars.sort();\n    for (int i = 1; i < chars.length; i++) {\n      if (chars[i].codeUnitAt(0) - chars[i - 1].codeUnitAt(0) > 2) return false;\n    }\n    return true;\n  }\n}"
}