{
    "acRate": 24.78392394122731,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2659",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Make Array Empty",
    "titleSlug": "make-array-empty",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Binary Search",
            "id": "VG9waWNUYWdOb2RlOjEx",
            "slug": "binary-search"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Binary Indexed Tree",
            "id": "VG9waWNUYWdOb2RlOjI4",
            "slug": "binary-indexed-tree"
        },
        {
            "name": "Segment Tree",
            "id": "VG9waWNUYWdOb2RlOjI5",
            "slug": "segment-tree"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        },
        {
            "name": "Ordered Set",
            "id": "VG9waWNUYWdOb2RlOjYxMDcw",
            "slug": "ordered-set"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long countOperationsToEmptyArray(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long countOperationsToEmptyArray(int[] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def countOperationsToEmptyArray(self, nums):         \"\"\"         :type nums: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def countOperationsToEmptyArray(self, nums: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long countOperationsToEmptyArray(int* nums, int numsSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long CountOperationsToEmptyArray(int[] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {number}  */ var countOperationsToEmptyArray = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function countOperationsToEmptyArray(nums: number[]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Integer      */     function countOperationsToEmptyArray($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func countOperationsToEmptyArray(_ nums: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun countOperationsToEmptyArray(nums: IntArray): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int countOperationsToEmptyArray(List<int> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func countOperationsToEmptyArray(nums []int) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Integer} def count_operations_to_empty_array(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def countOperationsToEmptyArray(nums: Array[Int]): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn count_operations_to_empty_array(nums: Vec<i32>) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (count-operations-to-empty-array nums)   (-> (listof exact-integer?) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec count_operations_to_empty_array(Nums :: [integer()]) -> integer(). count_operations_to_empty_array(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec count_operations_to_empty_array(nums :: [integer]) :: integer   def count_operations_to_empty_array(nums) do    end end"
        }
    ],
    "content": "You are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:  If the first element has the smallest value, remove it Otherwise, put the first element at the end of the array.  Return an integer denoting the number of operations it takes to make nums empty.  Example 1:  Input: nums = [3,4,-1] Output: 5     Operation Array     1 [4, -1, 3]   2 [-1, 3, 4]   3 [3, 4]   4 [4]   5 []    Example 2:  Input: nums = [1,2,4,3] Output: 5     Operation Array     1 [2, 4, 3]   2 [4, 3]   3 [3, 4]   4 [4]   5 []    Example 3:  Input: nums = [1,2,3] Output: 3     Operation Array     1 [2, 3]   2 [3]   3 []     Constraints:  1 <= nums.length <= 105 -109<= nums[i] <= 109 All values in nums are distinct.  "
}