{
    "acRate": 37.14700368869807,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2920",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Maximum Points After Collecting Coins From All Nodes",
    "titleSlug": "maximum-points-after-collecting-coins-from-all-nodes",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Bit Manipulation",
            "id": "VG9waWNUYWdOb2RlOjE5",
            "slug": "bit-manipulation"
        },
        {
            "name": "Tree",
            "id": "VG9waWNUYWdOb2RlOjIw",
            "slug": "tree"
        },
        {
            "name": "Depth-First Search",
            "id": "VG9waWNUYWdOb2RlOjIx",
            "slug": "depth-first-search"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int maximumPoints(vector<vector<int>>& edges, vector<int>& coins, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int maximumPoints(int[][] edges, int[] coins, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def maximumPoints(self, edges, coins, k):         \"\"\"         :type edges: List[List[int]]         :type coins: List[int]         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def maximumPoints(self, edges: List[List[int]], coins: List[int], k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int maximumPoints(int** edges, int edgesSize, int* edgesColSize, int* coins, int coinsSize, int k) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MaximumPoints(int[][] edges, int[] coins, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} edges  * @param {number[]} coins  * @param {number} k  * @return {number}  */ var maximumPoints = function(edges, coins, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function maximumPoints(edges: number[][], coins: number[], k: number): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $edges      * @param Integer[] $coins      * @param Integer $k      * @return Integer      */     function maximumPoints($edges, $coins, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func maximumPoints(_ edges: [[Int]], _ coins: [Int], _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun maximumPoints(edges: Array<IntArray>, coins: IntArray, k: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int maximumPoints(List<List<int>> edges, List<int> coins, int k) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func maximumPoints(edges [][]int, coins []int, k int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} edges # @param {Integer[]} coins # @param {Integer} k # @return {Integer} def maximum_points(edges, coins, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def maximumPoints(edges: Array[Array[Int]], coins: Array[Int], k: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn maximum_points(edges: Vec<Vec<i32>>, coins: Vec<i32>, k: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (maximum-points edges coins k)   (-> (listof (listof exact-integer?)) (listof exact-integer?) exact-integer? exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec maximum_points(Edges :: [[integer()]], Coins :: [integer()], K :: integer()) -> integer(). maximum_points(Edges, Coins, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec maximum_points(edges :: [[integer]], coins :: [integer], k :: integer) :: integer   def maximum_points(edges, coins, k) do        end end"
        }
    ],
    "content": "There exists an undirected tree rooted at node 0 with n nodes labeled from 0 to n - 1. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given a 0-indexed array coins of size n where coins[i] indicates the number of coins in the vertex i, and an integer k. Starting from the root, you have to collect all the coins such that the coins at a node can only be collected if the coins of its ancestors have been already collected. Coins at nodei can be collected in one of the following ways:  Collect all the coins, but you will get coins[i] - k points. If coins[i] - k is negative then you will lose abs(coins[i] - k) points. Collect all the coins, but you will get floor(coins[i] / 2) points. If this way is used, then for all the nodej present in the subtree of nodei, coins[j] will get reduced to floor(coins[j] / 2).  Return the maximum points you can get after collecting the coins from all the tree nodes.  Example 1:   Input: edges = [[0,1],[1,2],[2,3]], coins = [10,10,3,3], k = 5 Output: 11                         Explanation:  Collect all the coins from node 0 using the first way. Total points = 10 - 5 = 5. Collect all the coins from node 1 using the first way. Total points = 5 + (10 - 5) = 10. Collect all the coins from node 2 using the second way so coins left at node 3 will be floor(3 / 2) = 1. Total points = 10 + floor(3 / 2) = 11. Collect all the coins from node 3 using the second way. Total points = 11 + floor(1 / 2) = 11. It can be shown that the maximum points we can get after collecting coins from all the nodes is 11.   Example 2:    Input: edges = [[0,1],[0,2]], coins = [8,4,4], k = 0 Output: 16 Explanation:  Coins will be collected from all the nodes using the first way. Therefore, total points = (8 - 0) + (4 - 0) + (4 - 0) = 16.   Constraints:  n == coins.length 2 <= n <= 105 0 <= coins[i] <= 104 edges.length == n - 1 0 <= edges[i][0], edges[i][1] < n 0 <= k <= 104  "
}