{
    "acRate": 36.34498604956507,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2663",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Lexicographically Smallest Beautiful String",
    "titleSlug": "lexicographically-smallest-beautiful-string",
    "topicTags": [
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     string smallestBeautifulString(string s, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public String smallestBeautifulString(String s, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def smallestBeautifulString(self, s, k):         \"\"\"         :type s: str         :type k: int         :rtype: str         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def smallestBeautifulString(self, s: str, k: int) -> str:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "char * smallestBeautifulString(char * s, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public string SmallestBeautifulString(string s, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @param {number} k  * @return {string}  */ var smallestBeautifulString = function(s, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function smallestBeautifulString(s: string, k: number): string {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @param Integer $k      * @return String      */     function smallestBeautifulString($s, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func smallestBeautifulString(_ s: String, _ k: Int) -> String {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun smallestBeautifulString(s: String, k: Int): String {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   String smallestBeautifulString(String s, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func smallestBeautifulString(s string, k int) string {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @param {Integer} k # @return {String} def smallest_beautiful_string(s, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def smallestBeautifulString(s: String, k: Int): String = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn smallest_beautiful_string(s: String, k: i32) -> String {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (smallest-beautiful-string s k)   (-> string? exact-integer? string?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec smallest_beautiful_string(S :: unicode:unicode_binary(), K :: integer()) -> unicode:unicode_binary(). smallest_beautiful_string(S, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec smallest_beautiful_string(s :: String.t, k :: integer) :: String.t   def smallest_beautiful_string(s, k) do    end end"
        }
    ],
    "content": "A string is beautiful if:  It consists of the first k letters of the English lowercase alphabet. It does not contain any substring of length 2 or more which is a palindrome.  You are given a beautiful string s of length n and a positive integer k. Return the lexicographically smallest string of length n, which is larger than s and is beautiful. If there is no such string, return an empty string. A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b.  For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.   Example 1:  Input: s = \"abcz\", k = 26 Output: \"abda\" Explanation: The string \"abda\" is beautiful and lexicographically larger than the string \"abcz\". It can be proven that there is no string that is lexicographically larger than the string \"abcz\", beautiful, and lexicographically smaller than the string \"abda\".  Example 2:  Input: s = \"dc\", k = 4 Output: \"\" Explanation: It can be proven that there is no string that is lexicographically larger than the string \"dc\" and is beautiful.   Constraints:  1 <= n == s.length <= 105 4 <= k <= 26 s is a beautiful string.  "
}