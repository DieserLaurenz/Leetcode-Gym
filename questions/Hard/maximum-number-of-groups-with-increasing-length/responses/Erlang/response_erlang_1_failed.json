{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67844000,
    "question_id": "2919",
    "elapsed_time": 5372,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,1,2]",
    "expected_output": "2",
    "task_finish_time": 1708608464288,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 89,
    "total_testcases": 2027,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1183037819",
    "input_formatted": "[2,1,2]",
    "input": "[2,1,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_increasing_groups(UsageLimits :: [integer()]) -> integer().\nmax_increasing_groups(UsageLimits) ->\n    SortedLimits = lists:sort(UsageLimits),\n    max_groups(SortedLimits, 0, 1).\n\nmax_groups([], Groups, _) ->\n    Groups;\nmax_groups(Limits, Groups, Size) ->\n    {NewLimits, Enough} = check_and_reduce(Limits, Size, 0),\n    case Enough of\n        true -> max_groups(NewLimits, Groups + 1, Size + 1);\n        false -> Groups\n    end.\n\ncheck_and_reduce(Limits, Size, Count) when Count < Size ->\n    case Limits of\n        [H|T] when H > 0 ->\n            check_and_reduce([H-1|T], Size, Count + 1);\n        [_|T] ->\n            check_and_reduce(T, Size, Count + 1);\n        [] ->\n            {[], false}\n    end;\ncheck_and_reduce(Limits, _, _) ->\n    {lists:filter(fun(X) -> X > 0 end, Limits), true}."
}