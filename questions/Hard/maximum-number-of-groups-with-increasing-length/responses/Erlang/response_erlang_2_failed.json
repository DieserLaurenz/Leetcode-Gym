{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 23: exception error: function_clause",
    "full_runtime_error": "Line 23: exception error: function_clause\n[{solution,update_limits,[[0,2,5],2],[{file,\"solution.erl\"},{line,23}]},\n {solution,find_max_groups,3,[{file,\"solution.erl\"},{line,11}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,43}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,31}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,60}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 64468000,
    "question_id": "2919",
    "elapsed_time": 1332,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,5]",
    "expected_output": "3",
    "task_finish_time": 1708608497211,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2027,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1183038266",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec max_increasing_groups(UsageLimits :: [integer()]) -> integer().\nmax_increasing_groups(UsageLimits) ->\n    SortedLimits = lists:sort(UsageLimits),\n    find_max_groups(SortedLimits, 1, 0).\n\nfind_max_groups([], _, Groups) ->\n    Groups;\nfind_max_groups(Limits, GroupSize, Groups) ->\n    case can_form_group(Limits, GroupSize, 0) of\n        ok ->\n            NewLimits = update_limits(Limits, GroupSize),\n            find_max_groups(NewLimits, GroupSize + 1, Groups + 1);\n        error ->\n            Groups\n    end.\n\ncan_form_group([], Count, Required) when Count >= Required -> ok;\ncan_form_group([], _, _) -> error;\ncan_form_group([_H|T], Count, Required) when Count < Required ->\n    can_form_group(T, Count + 1, Required);\ncan_form_group(_, Count, Required) when Count >= Required -> ok.\n\nupdate_limits(Limits, 0) -> Limits;\nupdate_limits([], _) -> [];\nupdate_limits([H|T], Count) when H > 0, Count > 0 ->\n    [H - 1 | update_limits(T, Count - 1)];\nupdate_limits(L, Count) when Count =< 0 -> L."
}