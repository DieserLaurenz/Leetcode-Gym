{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211340000,
    "question_id": "2919",
    "elapsed_time": 1729,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[2,2]",
    "expected_output": "2",
    "task_finish_time": 1708608598114,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 373,
    "total_testcases": 2027,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1183039509",
    "input_formatted": "[2,2]",
    "input": "[2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_increasing_groups(usage_limits :: [integer]) :: integer\n  def max_increasing_groups(usage_limits) do\n    usage_limits\n    |> Enum.sort()\n    |> tally_frequencies()\n    |> Enum.reduce(0, fn {_, count}, acc -> acc + calculate_groups(count) end)\n  end\n\n  defp tally_frequencies(usage_limits) do\n    Enum.reduce(usage_limits, %{}, fn x, acc ->\n      Map.update(acc, x, 1, &(&1 + 1))\n    end)\n  end\n\n  defp calculate_groups(count), do: trunc(:math.sqrt(2 * count + 0.25) - 0.5)\nend"
}