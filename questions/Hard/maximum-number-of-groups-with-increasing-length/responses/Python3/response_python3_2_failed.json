{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38612000,
    "question_id": "2919",
    "elapsed_time": 855,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,2,5]",
    "expected_output": "3",
    "task_finish_time": 1708901790773,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 175,
    "total_testcases": 2027,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186192083",
    "input_formatted": "[1,2,5]",
    "input": "[1,2,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxIncreasingGroups(self, usageLimits: List[int]) -> int:\n        freq = {}\n        for limit in usageLimits:\n            freq[limit] = freq.get(limit, 0) + 1\n\n        keys = sorted(freq.keys(), reverse=True)\n        groups, prev_count = 0, 0\n\n        for key in keys:\n            count = freq[key]\n            total = prev_count + count\n            group_increase = (total - 1) // key + 1\n            groups += group_increase\n            prev_count = group_increase * key - total\n\n        return groups"
}