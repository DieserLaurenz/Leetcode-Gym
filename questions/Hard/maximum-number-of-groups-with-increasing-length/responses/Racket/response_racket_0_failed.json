{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "take: contract violation",
    "full_runtime_error": "take: contract violation\n  expected: a list with at least 3 elements\n  given: '(1 4)\n  context...:\n   /usr/share/racket/collects/racket/list.rkt:158:2: loop\n   [repeats 1 more time]\n   solution.rkt:1:0: max-increasing-groups\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:18:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100240000,
    "question_id": "2919",
    "elapsed_time": 261,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,5]",
    "expected_output": "3",
    "task_finish_time": 1708608276560,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2027,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1183035516",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (max-increasing-groups usageLimits)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (helper sorted-limits group-size acc)\n    (if (null? sorted-limits)\n        acc\n        (let* ((usable (take sorted-limits group-size))\n               (remaining (drop sorted-limits group-size))\n               (updated-limits (map (lambda (x) (- x 1)) usable))\n               (new-limits (append (filter (lambda (x) (> x 0)) updated-limits) remaining)))\n          (helper (sort new-limits <) (+ group-size 1) (+ acc 1)))))\n  \n  (helper (sort usageLimits <) 1 0))"
}