{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 99904000,
    "question_id": "3001",
    "elapsed_time": 311,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708278591172,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1179069531",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-score nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (define (prime-factors-count n)\n    (define (loop n i acc)\n      (cond [(> (* i i) n) (if (> n 1) (+ acc 1) acc)]\n            [(zero? (remainder n i))\n             (let loop2 ((n n))\n               (if (zero? (remainder n i))\n                   (loop2 (/ n i))\n                   (loop n (+ i 1) (+ acc 1))))]\n            [else (loop n (+ i 1) acc)]))\n    (loop n 2 0))\n  \n  (define (mod-mult a b mod)\n    (modulo (* a b) mod))\n  \n  (define (max-score-mod nums k mod)\n    (let* ((scores (map prime-factors-count nums))\n           (sorted (sort (map list nums scores) (lambda (x y) (or (> (second x) (second y)) (and (= (second x) (second y)) (< (first x) (first y)))))))\n           (selected (take sorted k)))\n      (foldl (lambda (x acc) (mod-mult (first x) acc mod)) 1 selected)))\n  \n  (max-score-mod nums k (+ (expt 10 9) 7)))"
}