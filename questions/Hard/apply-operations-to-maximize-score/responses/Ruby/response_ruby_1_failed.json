{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 213872000,
    "question_id": "3001",
    "elapsed_time": 3100,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708278170903,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1179063450",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef maximum_score(nums, k)\n    mod = 10**9 + 7\n\n    # Helper function to calculate the prime score of a number\n    def prime_score(n)\n        return 0 if n < 2\n        count = 0\n        (2..Math.sqrt(n)).each do |i|\n            if n % i == 0\n                count += 1\n                n /= i while n % i == 0\n            end\n        end\n        count += 1 if n > 1\n        count\n    end\n\n    # Calculate prime scores for all elements\n    scores = nums.map { |num| [num, prime_score(num)] }\n\n    # Sort by prime score and then by value descending\n    scores.sort_by! { |num, score| [-score, -num] }\n\n    result = 1\n    scores.take(k).each { |num, score| result = (result * num) % mod }\n    result\nend"
}