{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 25: ** (ArgumentError) ranges (first..last) expect both sides to be integers, got: 2..2.0",
    "full_runtime_error": "Line 25: ** (ArgumentError) ranges (first..last) expect both sides to be integers, got: 2..2.0\n    (elixir 1.15.7) lib/range.ex:193: Range.new/2\n    solution.ex:25: Solution.is_prime/1\n    (elixir 1.15.7) lib/enum.ex:1121: anonymous fn/3 in Enum.filter/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    (elixir 1.15.7) lib/enum.ex:2514: Enum.filter/2\n    solution.ex:13: Solution.prime_score/1\n    solution.ex:5: anonymous fn/1 in Solution.maximum_score/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 74904000,
    "question_id": "3001",
    "elapsed_time": 795,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708278804072,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1179072548",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_score(nums :: [integer], k :: integer) :: integer\n  def maximum_score(nums, k) do\n    nums\n    |> Enum.map(&{prime_score(&1), &1})\n    |> Enum.sort_by(&{&1 |> elem(0), &1 |> elem(1)}, &(&1 > &2))\n    |> Enum.take(k)\n    |> Enum.reduce(1, fn {_, val}, acc -> rem(acc * val, 1_000_000_007) end)\n  end\n\n  defp prime_score(n) do\n    n\n    |> prime_factors\n    |> Enum.uniq\n    |> length\n  end\n\n  defp prime_factors(n) do\n    2..n\n    |> Enum.filter(fn x -> rem(n, x) == 0 && is_prime(x) end)\n  end\n\n  defp is_prime(2), do: true\n  defp is_prime(n) when n > 1 do\n    Enum.none?(2..:math.sqrt(n), fn x -> rem(n, x) == 0 end)\n  end\n  defp is_prime(_), do: false\nend"
}