{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 127720000,
    "question_id": "3001",
    "elapsed_time": 6018,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708278852194,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 94,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1179073199",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_score(nums :: [integer], k :: integer) :: integer\n  def maximum_score(nums, k) do\n    nums\n    |> Enum.map(&{prime_score(&1), &1})\n    |> Enum.sort_by(&{-elem(&1, 0), elem(&1, 1)})\n    |> Enum.take(k)\n    |> Enum.reduce(1, fn {_, val}, acc -> rem(acc * val, 1_000_000_007) end)\n  end\n\n  defp prime_score(1), do: 0\n  defp prime_score(n) do\n    n\n    |> prime_factors\n    |> Enum.uniq\n    |> length\n  end\n\n  defp prime_factors(n), do: prime_factors(n, 2, [])\n\n  defp prime_factors(1, _, acc), do: acc\n  defp prime_factors(n, factor, acc) when n >= factor do\n    if rem(n, factor) == 0 do\n      prime_factors(div(n, factor), factor, [factor | acc])\n    else\n      prime_factors(n, next_factor(factor), acc)\n    end\n  end\n  defp prime_factors(_n, _factor, acc), do: acc\n\n  defp next_factor(2), do: 3\n  defp next_factor(n), do: n + 2\n\n  defp is_prime(1), do: false\n  defp is_prime(2), do: true\n  defp is_prime(n) do\n    2..:math.sqrt(n)\n    |> Enum.none?(fn x -> rem(n, x) == 0 end)\n  end\nend"
}