{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 5: exception error: badarg",
    "full_runtime_error": "Line 5: exception error: badarg\n[{erlang,'or',[2,false],[{error_info,#{module => erl_erts_errors}}]},\n {solution,'-maximum_score/2-fun-1-',2,[{file,\"solution.erl\"},{line,5}]},\n {lists,sort,2,[{file,\"lists.erl\"},{line,1210}]},\n {solution,maximum_score,2,[{file,\"solution.erl\"},{line,4}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,56}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,42}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,73}]},\n {init,start_em,1,[]}]",
    "status_runtime": "N/A",
    "memory": 63728000,
    "question_id": "3001",
    "elapsed_time": 1836,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708278743150,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1179071678",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_score(Nums :: [integer()], K :: integer()) -> integer().\nmaximum_score(Nums, K) ->\n    PrimeScores = lists:map(fun(X) -> {prime_score(X), X} end, Nums),\n    Sorted = lists:sort(fun({PS1, X1}, {PS2, X2}) ->\n                            PS1 > PS2 or (PS1 == PS2 andalso X1 < X2)\n                        end, PrimeScores),\n    Modulo = 1000000007,\n    MaxScore = lists:foldl(fun({_, X}, Acc) -> (Acc * X) rem Modulo end, 1, lists:sublist(Sorted, 1, K)),\n    MaxScore.\n\nprime_score(N) ->\n    find_primes(N, 2, 0).\n\nfind_primes(1, _, Count) -> Count;\nfind_primes(N, Factor, Count) when N rem Factor == 0 ->\n    find_primes(N div Factor, Factor, Count + 1);\nfind_primes(N, Factor, Count) ->\n    NextFactor = next_factor(Factor),\n    if N rem NextFactor == 0 ->\n        find_primes(N, NextFactor, Count + 1);\n       true ->\n        find_primes(N, NextFactor, Count)\n    end.\n\nnext_factor(2) -> 3;\nnext_factor(Factor) ->\n    case is_prime(Factor + 1) of\n        true -> Factor + 1;\n        false -> next_factor(Factor + 1)\n    end.\n\nis_prime(2) -> true;\nis_prime(N) when N > 2 ->\n    is_prime_helper(N, 2).\n\nis_prime_helper(N, Factor) when Factor * Factor > N -> true;\nis_prime_helper(N, Factor) when N rem Factor == 0 -> false;\nis_prime_helper(N, Factor) -> is_prime_helper(N, Factor + 1)."
}