{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37980000,
    "question_id": "3001",
    "elapsed_time": 146,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708277754994,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1179057334",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    private fun primeFactors(n: Int): Int {\n        var count = 0\n        var number = n\n        if (number % 2 == 0) {\n            count++\n            while (number % 2 == 0) number /= 2\n        }\n        var i = 3\n        while (i <= Math.sqrt(number.toDouble()).toInt()) {\n            if (number % i == 0) {\n                count++\n                while (number % i == 0) number /= i\n            }\n            i += 2\n        }\n        if (number > 2) count++\n        return count\n    }\n\n    fun maximumScore(nums: List<Int>, k: Int): Int {\n        val mod = 1000000007\n        val scores = nums.map { primeFactors(it) to it }.sortedWith(compareBy({ -it.first }, { it.second }))\n        var result = 1L\n        for (i in 0 until k) {\n            result = (result * scores[i].second) % mod\n        }\n        return result.toInt()\n    }\n}"
}