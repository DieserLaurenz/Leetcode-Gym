{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58824000,
    "question_id": "3001",
    "elapsed_time": 143,
    "compare_result
    "code_output": "24",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708268508729,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1178937798",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumScore(nums: number[], k: number): number {\n  const MOD = 1e9 + 7;\n\n  function primeFactors(n: number): number {\n    const factors = new Set<number>();\n    while (n % 2 === 0) {\n      factors.add(2);\n      n = n / 2;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n      while (n % i === 0) {\n        factors.add(i);\n        n = n / i;\n      }\n    }\n    if (n > 2) factors.add(n);\n    return factors.size;\n  }\n\n  const primeScores = nums.map(primeFactors);\n  const items = nums.map((num, i) => ({ value: num, score: primeScores[i], index: i }));\n  items.sort((a, b) => b.score - a.score || a.index - b.index);\n\n  let result = 1;\n  for (let i = 0; i < k; i++) {\n    result = (result * items[i].value) % MOD;\n  }\n\n  return result;\n};"
}