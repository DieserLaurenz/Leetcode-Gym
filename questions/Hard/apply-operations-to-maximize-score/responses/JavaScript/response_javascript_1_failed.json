{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55332000,
    "question_id": "3001",
    "elapsed_time": 91,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708268399066,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1178936661",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumScore = function(nums, k) {\n    const MOD = 1e9 + 7;\n    let maxScore = 1;\n\n    const getPrimeFactors = (n) => {\n        const factors = new Set();\n        for (let i = 2; i * i <= n; i++) {\n            while (n % i === 0) {\n                factors.add(i);\n                n = n / i;\n            }\n        }\n        if (n > 1) factors.add(n);\n        return factors.size;\n    };\n\n    const scores = nums.map(n => ({\n        value: n,\n        primeScore: getPrimeFactors(n)\n    })).sort((a, b) => b.primeScore - a.primeScore || b.value - a.value);\n\n    for (let i = 0; i < k; i++) {\n        maxScore = BigInt(maxScore) * BigInt(scores[i].value) % BigInt(MOD);\n    }\n\n    return Number(maxScore);\n};"
}