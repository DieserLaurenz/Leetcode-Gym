{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36172000,
    "question_id": "3001",
    "elapsed_time": 1162,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708277539132,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1179054148",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * Calculates the number of distinct prime factors of a number.\n     *\n     * @param Integer $num The number to calculate prime factors for.\n     * @return Integer The number of distinct prime factors.\n     */\n    private function primeFactorsCount($num) {\n        $count = 0;\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) {\n                $count++;\n                while ($num % $i == 0) {\n                    $num /= $i;\n                }\n            }\n        }\n        if ($num > 1) $count++;\n        return $count;\n    }\n\n    /**\n     * @param Integer[] $nums Array of positive integers.\n     * @param Integer $k The maximum number of operations.\n     * @return Integer The maximum possible score modulo 10^9 + 7.\n     */\n    function maximumScore($nums, $k) {\n        $mod = 1000000007;\n        $n = count($nums);\n        $scores = array_map([$this, 'primeFactorsCount'], $nums);\n        $maxScore = 1;\n\n        // Sort $nums alongside $scores to prioritize larger numbers with the same prime factors count\n        array_multisort($scores, SORT_DESC, $nums, SORT_DESC);\n\n        for ($i = 0; $i < min($k, $n); $i++) {\n            $maxScore = ($maxScore * $nums[$i]) % $mod;\n        }\n\n        return $maxScore;\n    }\n}"
}