{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 49852000,
    "question_id": "3001",
    "elapsed_time": 1989,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708277507311,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 80,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1179053656",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maximumScore($nums, $k) {\n        $mod = 1e9 + 7;\n\n        // Create a priority queue to store numbers based on their prime score and value\n        $pq = new SplPriorityQueue();\n        foreach ($nums as $index => $num) {\n            $primeScore = $this->getPrimeScore($num);\n            // Use negative values to simulate max heap based on prime score and value\n            $pq->insert($index, [-$primeScore, -$num]);\n        }\n\n        $score = 1;\n        $used = array_fill(0, count($nums), false);\n        for ($i = 0; $i < $k; $i++) {\n            while (!$pq->isEmpty() && $used[$pq->top()]) {\n                $pq->extract(); // Remove used elements\n            }\n            if ($pq->isEmpty()) break;\n\n            $index = $pq->extract();\n            $score = ($score * abs($nums[$index])) % $mod;\n            $used[$index] = true; // Mark as used\n        }\n\n        return $score;\n    }\n\n    private function getPrimeScore($num) {\n        $score = 0;\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) {\n                $score++;\n                while ($num % $i == 0) {\n                    $num /= $i;\n                }\n            }\n        }\n        if ($num > 1) $score++;\n        return $score;\n    }\n}"
}