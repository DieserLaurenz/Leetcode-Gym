{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20456000,
    "question_id": "3001",
    "elapsed_time": 629,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708277694347,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179056446",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumScore(_ nums: [Int], _ k: Int) -> Int {\n        let mod = 1_000_000_007\n        var scores = [(score: Int, value: Int)]()\n        for num in nums {\n            scores.append((primeScore(num), num))\n        }\n        scores.sort { $0.score == $1.score ? $0.value > $1.value : $0.score > $1.score }\n        \n        var result = 1\n        for i in 0..<min(k, scores.count) {\n            result = (result * scores[i].value) % mod\n        }\n        return result\n    }\n    \n    private func primeScore(_ num: Int) -> Int {\n        var n = num\n        var factors = Set<Int>()\n        var factor = 2\n        while factor * factor <= n {\n            while n % factor == 0 {\n                factors.insert(factor)\n                n /= factor\n            }\n            factor += 1\n        }\n        if n > 1 {\n            factors.insert(n)\n        }\n        return factors.count\n    }\n}"
}