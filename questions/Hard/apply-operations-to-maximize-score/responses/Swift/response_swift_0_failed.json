{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20420000,
    "question_id": "3001",
    "elapsed_time": 5260,
    "compare_result
    "code_output": "24",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708277620448,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179055277",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumScore(_ nums: [Int], _ k: Int) -> Int {\n        let mod = 1_000_000_007\n        var primeScores = nums.map { primeScore($0) }\n        var pq = PriorityQueue<(Int, Int)>(sort: { $0.0 > $1.0 })\n        \n        for i in 0..<nums.count {\n            pq.enqueue((primeScores[i], nums[i]))\n        }\n        \n        var score = 1\n        for _ in 0..<k {\n            if let top = pq.dequeue() {\n                score = (score * top.1) % mod\n            }\n        }\n        \n        return score\n    }\n    \n    func primeScore(_ n: Int) -> Int {\n        var n = n\n        var score = 0\n        var factor = 2\n        \n        while factor * factor <= n {\n            if n % factor == 0 {\n                score += 1\n                while n % factor == 0 {\n                    n /= factor\n                }\n            }\n            factor += 1\n        }\n        \n        if n > 1 { score += 1 }\n        \n        return score\n    }\n}\n\nstruct PriorityQueue<T> {\n    var elements: [T] = []\n    let sort: (T, T) -> Bool\n    \n    init(sort: @escaping (T, T) -> Bool) {\n        self.sort = sort\n    }\n    \n    var isEmpty: Bool { return elements.isEmpty }\n    var count: Int { return elements.count }\n    \n    func peek() -> T? {\n        return elements.first\n    }\n    \n    mutating func enqueue(_ element: T) {\n        elements.append(element)\n        elements.sort(by: sort)\n    }\n    \n    mutating func dequeue() -> T? {\n        return isEmpty ? nil : elements.removeFirst()\n    }\n}"
}