{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20152000,
    "question_id": "3001",
    "elapsed_time": 436,
    "compare_result
    "code_output": "27",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708277661615,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 115,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179055961",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumScore(_ nums: [Int], _ k: Int) -> Int {\n        let mod = 1_000_000_007\n        var maxScore = 1\n        var sortedNums = nums.enumerated().map { ($0.element, $0.offset) }\n        sortedNums.sort { $0.0 > $1.0 }\n\n        var used = Array(repeating: false, count: nums.count)\n        var operations = 0\n\n        for i in 0..<sortedNums.count {\n            if operations == k { break }\n            let (num, index) = sortedNums[i]\n            if !used[index] {\n                maxScore = (maxScore * num) % mod\n                used[index] = true\n                operations += 1\n\n                // Attempt to expand to adjacent elements if not already used\n                var left = index - 1\n                var right = index + 1\n                while left >= 0 && !used[left] && operations < k {\n                    maxScore = (maxScore * nums[left]) % mod\n                    used[left] = true\n                    operations += 1\n                    left -= 1\n                }\n                while right < nums.count && !used[right] && operations < k {\n                    maxScore = (maxScore * nums[right]) % mod\n                    used[right] = true\n                    operations += 1\n                    right += 1\n                }\n            }\n        }\n\n        return maxScore\n    }\n}"
}