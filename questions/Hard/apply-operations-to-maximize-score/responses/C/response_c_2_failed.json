{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13276000,
    "question_id": "3001",
    "elapsed_time": 47,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708268151772,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1178933814",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint primeCount(int x) {\n    int count = 0;\n    for (int i = 2; i <= x; i++) {\n        if (x % i == 0) {\n            while (x % i == 0) x /= i;\n            count++;\n        }\n    }\n    return count;\n}\n\nint compare(const void* a, const void* b, void* nums) {\n    int* arr = (int*)nums;\n    int l = *(const int*)a;\n    int r = *(const int*)b;\n    int leftPrimeCount = primeCount(arr[l]);\n    int rightPrimeCount = primeCount(arr[r]);\n    if (leftPrimeCount == rightPrimeCount) return arr[r] - arr[l];\n    return rightPrimeCount - leftPrimeCount;\n}\n\nint maximumScore(int* nums, int numsSize, int k) {\n    long long score = 1;\n    int mod = 1000000007;\n    int* indices = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        indices[i] = i;\n    }\n\n    qsort_r(indices, numsSize, sizeof(int), compare, nums);\n\n    for (int i = 0; i < k; i++) {\n        score = (score * nums[indices[i]]) % mod;\n    }\n\n    free(indices);\n    return (int)score;\n}"
}