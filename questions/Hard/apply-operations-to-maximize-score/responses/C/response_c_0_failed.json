{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13212000,
    "question_id": "3001",
    "elapsed_time": 57,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708268077104,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1178933021",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\nint primeScore(int n) {\n    int score = 0;\n    for (int i = 2; i*i <= n; i++) {\n        if (n % i == 0) {\n            score++;\n            while (n % i == 0) n /= i;\n        }\n    }\n    if (n > 1) score++;\n    return score;\n}\n\nint compare(const void *a, const void *b) {\n    return (*(int*)b) - (*(int*)a);\n}\n\nint maximumScore(int* nums, int numsSize, int k) {\n    long long score = 1;\n    int* scores = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        scores[i] = primeScore(nums[i]);\n    }\n\n    int* values = (int*)malloc(sizeof(int) * numsSize);\n    for (int i = 0; i < numsSize; i++) {\n        values[i] = nums[i];\n    }\n\n    qsort(values, numsSize, sizeof(int), compare);\n\n    for (int i = 0; i < k; i++) {\n        score = (score * values[i]) % MOD;\n    }\n\n    free(scores);\n    free(values);\n\n    return (int)score;\n}"
}