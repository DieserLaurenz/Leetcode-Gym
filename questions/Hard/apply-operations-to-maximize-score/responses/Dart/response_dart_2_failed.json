{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 199068000,
    "question_id": "3001",
    "elapsed_time": 1002,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708277941472,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1179060054",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import 'dart:math';\n\nclass Solution {\n  int maximumScore(List<int> nums, int k) {\n    final int mod = 1000000007;\n    List<int> scores = [];\n\n    // Calculate prime scores for all numbers\n    for (int num in nums) {\n      scores.add(_primeScore(num));\n    }\n\n    // Sort numbers by their prime scores and values descendingly\n    List<int> sortedIndexes = List.generate(nums.length, (i) => i);\n    sortedIndexes.sort((a, b) => scores[b] != scores[a] ? scores[b].compareTo(scores[a]) : nums[b].compareTo(nums[a]));\n\n    // Pick top k elements based on sorted order\n    int result = 1;\n    for (int i = 0; i < min(k, sortedIndexes.length); i++) {\n      result = (result * nums[sortedIndexes[i]]) % mod;\n    }\n\n    return result;\n  }\n\n  int _primeScore(int n) {\n    int score = 0;\n    for (int i = 2; i <= sqrt(n); i++) {\n      if (n % i == 0) {\n        score++;\n        while (n % i == 0) {\n          n ~/= i;\n        }\n      }\n    }\n    if (n > 1) score++;\n    return score;\n  }\n}"
}