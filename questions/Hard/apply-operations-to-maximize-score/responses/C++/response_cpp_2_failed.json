{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 308908000,
    "question_id": "3001",
    "elapsed_time": 945,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708267870591,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1178930730",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    static const int MOD = 1e9 + 7;\n\n    int countPrimeFactors(int n) {\n        unordered_map<int, int> primeFactors;\n        for (int i = 2; i * i <= n; ++i) {\n            while (n % i == 0) {\n                primeFactors[i]++;\n                n /= i;\n            }\n        }\n        if (n > 1) primeFactors[n]++;\n        return primeFactors.size();\n    }\n\n    int maximumScore(vector<int>& nums, int k) {\n        vector<pair<int, int>> primeScores;\n        for (int num : nums) {\n            primeScores.push_back({countPrimeFactors(num), num});\n        }\n        sort(primeScores.begin(), primeScores.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n            if (a.first == b.first) return a.second > b.second;\n            return a.first > b.first;\n        });\n\n        long long result = 1;\n        for (int i = 0; i < k && i < primeScores.size(); ++i) {\n            result = (result * primeScores[i].second) % MOD;\n        }\n        return result;\n    }\n};"
}