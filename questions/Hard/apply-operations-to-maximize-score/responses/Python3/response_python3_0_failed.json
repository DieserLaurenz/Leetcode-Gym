{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31464000,
    "question_id": "3001",
    "elapsed_time": 2117,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708860508322,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185716513",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom math import sqrt\n\nclass Solution:\n    def maximumScore(self, nums: List[int], k: int) -> int:\n        def prime_factors_count(x):\n            count = 0\n            if x % 2 == 0:\n                count += 1\n                while x % 2 == 0:\n                    x //= 2\n            for i in range(3, int(sqrt(x)) + 1, 2):\n                if x % i == 0:\n                    count += 1\n                    while x % i == 0:\n                        x //= i\n            if x > 2:\n                count += 1\n            return count\n        \n        nums_prime_scores = [(prime_factors_count(x), x) for x in nums]\n        nums_prime_scores.sort(reverse=True)\n        \n        score = 1\n        mod = 10**9 + 7\n        for _, val in nums_prime_scores[:k]:\n            score = (score * val) % mod\n        \n        return score"
}