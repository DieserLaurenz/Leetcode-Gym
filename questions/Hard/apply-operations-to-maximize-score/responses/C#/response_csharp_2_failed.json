{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73052000,
    "question_id": "3001",
    "elapsed_time": 904,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708268300401,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1178935501",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    private const int Mod = 1000000007;\n\n    private static int GetPrimeScore(int n) {\n        int score = 0;\n        for (int i = 2; i <= n / i; i++) {\n            if (n % i == 0) {\n                while (n % i == 0) n /= i;\n                score++;\n            }\n        }\n        if (n > 1) score++;\n        return score;\n    }\n\n    public int MaximumScore(IList<int> nums, int k) {\n        var elements = nums.Select(n => new { Value = n, Score = GetPrimeScore(n) })\n                           .OrderByDescending(x => x.Score)\n                           .ThenByDescending(x => x.Value)\n                           .Take(k)\n                           .ToList();\n\n        long result = 1;\n        foreach (var element in elements) {\n            result = result * element.Value % Mod;\n        }\n\n        return (int)result;\n    }\n}"
}