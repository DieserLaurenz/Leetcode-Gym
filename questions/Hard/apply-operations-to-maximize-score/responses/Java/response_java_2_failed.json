{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62744000,
    "display_runtime": "347",
    "question_id": "3001",
    "elapsed_time": 751,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708267996459,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1178932156",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.*;\n\nclass Solution {\n    static final int MOD = 1000000007;\n\n    private static int primeScore(int n) {\n        Map<Integer, Integer> primeFactors = new HashMap<>();\n        for (int i = 2; i <= n / i; ++i) {\n            while (n % i == 0) {\n                primeFactors.put(i, primeFactors.getOrDefault(i, 0) + 1);\n                n /= i;\n            }\n        }\n        if (n > 1) primeFactors.put(n, 1);\n        return primeFactors.size();\n    }\n\n    public int maximumScore(List<Integer> nums, int k) {\n        List<int[]> scores = new ArrayList<>();\n        for (int num : nums) {\n            scores.add(new int[]{primeScore(num), num});\n        }\n\n        scores.sort((a, b) -> {\n            if (b[0] != a[0]) return b[0] - a[0];\n            return b[1] - a[1];\n        });\n\n        long result = 1;\n        for (int i = 0; i < k && i < scores.size(); ++i) {\n            result = (result * scores.get(i)[1]) % MOD;\n        }\n\n        return (int) result;\n    }\n}"
}