{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55532000,
    "question_id": "3001",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708267965015,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1178931793",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.*;\n\nclass Solution {\n    static final int MOD = 1000000007;\n\n    private int primeScore(int n) {\n        Set<Integer> factors = new HashSet<>();\n        for (int i = 2; i * i <= n; i++) {\n            while (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n        }\n        if (n > 1) factors.add(n);\n        return factors.size();\n    }\n\n    public int maximumScore(List<Integer> nums, int k) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> {\n            int scoreA = primeScore(a);\n            int scoreB = primeScore(b);\n            if (scoreB != scoreA) return scoreB - scoreA;\n            return b - a;\n        });\n\n        pq.addAll(nums);\n\n        long score = 1;\n        for (int i = 0; i < k && !pq.isEmpty(); i++) {\n            score = (score * pq.poll()) % MOD;\n        }\n\n        return (int) score;\n    }\n}"
}