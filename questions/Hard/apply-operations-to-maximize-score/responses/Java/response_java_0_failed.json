{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41968000,
    "question_id": "3001",
    "elapsed_time": 141,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708267928052,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1178931415",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.*;\n\nclass Solution {\n    static final int MOD = (int) 1e9 + 7;\n\n    public int maximumScore(List<Integer> nums, int k) {\n        int[] maxPrimeScore = new int[100001];\n        for (int i = 2; i < maxPrimeScore.length; i++) {\n            if (maxPrimeScore[i] == 0) { // i is prime\n                for (int j = i; j < maxPrimeScore.length; j += i) {\n                    maxPrimeScore[j]++;\n                }\n            }\n        }\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> {\n            int cmp = Integer.compare(maxPrimeScore[b], maxPrimeScore[a]);\n            if (cmp == 0) return Integer.compare(a, b);\n            return cmp;\n        });\n\n        pq.addAll(nums);\n\n        long score = 1;\n        for (int i = 0; i < k; i++) {\n            score = (score * pq.poll()) % MOD;\n        }\n\n        return (int) score;\n    }\n}"
}