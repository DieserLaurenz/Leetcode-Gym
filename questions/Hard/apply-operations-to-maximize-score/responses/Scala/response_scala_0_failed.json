{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 85780000,
    "question_id": "3001",
    "elapsed_time": 1632,
    "compare_result
    "code_output": "24",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708278273023,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1179064935",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    val mod = (1e9 + 7).toInt\n\n    def maximumScore(nums: List[Int], k: Int): Int = {\n        def primeFactors(n: Int): Set[Int] = {\n            var number = n\n            var factors = Set[Int]()\n            var i = 2\n            while (i * i <= number) {\n                while (number % i == 0) {\n                    factors += i\n                    number /= i\n                }\n                i += 1\n            }\n            if (number > 1) factors += number\n            factors\n        }\n\n        def primeScore(n: Int): Int = primeFactors(n).size\n\n        val scoredNums = nums.map(n => (n, primeScore(n)))\n        val sortedNums = scoredNums.sortBy(-_._2).take(k)\n        sortedNums.foldLeft(1L)((acc, num) => (acc * num._1) % mod).toInt\n    }\n}"
}