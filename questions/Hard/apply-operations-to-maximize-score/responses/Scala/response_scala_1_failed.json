{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 82364000,
    "question_id": "3001",
    "elapsed_time": 2055,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708278306972,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1179065392",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n  def maximumScore(nums: List[Int], k: Int): Int = {\n    val mod = 1000000007\n    val primeScores = nums.map(n => (n, primeScore(n)))\n    val sortedScores = primeScores.sortWith((a, b) => if (a._2 != b._2) a._2 > b._2 else a._1 > b._1)\n    sortedScores.take(k).foldLeft(1L)((acc, num) => (acc * num._1) % mod).toInt\n  }\n\n  def primeScore(n: Int): Int = {\n    var number = n\n    var factors = Set[Int]()\n    var i = 2\n    while (i * i <= number) {\n      if (number % i == 0) {\n        factors += i\n        while (number % i == 0) {\n          number /= i\n        }\n      }\n      i += 1\n    }\n    if (number > 1) factors += number\n    factors.size\n  }\n}"
}