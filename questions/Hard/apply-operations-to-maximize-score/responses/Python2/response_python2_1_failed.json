{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 30524000,
    "question_id": "3001",
    "elapsed_time": 4782,
    "compare_result
    "code_output": "72",
    "std_output": "",
    "last_testcase": "[8,3,9,3,8]\n2",
    "expected_output": "81",
    "task_finish_time": 1708860377712,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 113,
    "total_testcases": 869,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185715057",
    "input_formatted": "[8,3,9,3,8], 2",
    "input": "[8,3,9,3,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumScore(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        from collections import defaultdict\n        MOD = 10**9 + 7\n        \n        def prime_factors(x):\n            factors = defaultdict(int)\n            d = 2\n            while d * d <= x:\n                while (x % d) == 0:\n                    factors[d] += 1\n                    x //= d\n                d += 1\n            if x > 1:\n               factors[x] += 1\n            return len(factors)\n        \n        scores = [(prime_factors(num), num) for num in nums]\n        scores.sort(reverse=True)\n        \n        result = 1\n        for i in range(min(k, len(scores))):\n            result = (result * scores[i][1]) % MOD\n        return result"
}