{
    "acRate": 33.644983754392946,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2940",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find Building Where Alice and Bob Can Meet",
    "titleSlug": "find-building-where-alice-and-bob-can-meet",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Binary Search",
            "id": "VG9waWNUYWdOb2RlOjEx",
            "slug": "binary-search"
        },
        {
            "name": "Stack",
            "id": "VG9waWNUYWdOb2RlOjE1",
            "slug": "stack"
        },
        {
            "name": "Binary Indexed Tree",
            "id": "VG9waWNUYWdOb2RlOjI4",
            "slug": "binary-indexed-tree"
        },
        {
            "name": "Segment Tree",
            "id": "VG9waWNUYWdOb2RlOjI5",
            "slug": "segment-tree"
        },
        {
            "name": "Heap (Priority Queue)",
            "id": "VG9waWNUYWdOb2RlOjYxMDUw",
            "slug": "heap-priority-queue"
        },
        {
            "name": "Monotonic Stack",
            "id": "VG9waWNUYWdOb2RlOjYxMDU0",
            "slug": "monotonic-stack"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def leftmostBuildingQueries(self, heights, queries):         \"\"\"         :type heights: List[int]         :type queries: List[List[int]]         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* leftmostBuildingQueries(int* heights, int heightsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] LeftmostBuildingQueries(int[] heights, int[][] queries) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} heights  * @param {number[][]} queries  * @return {number[]}  */ var leftmostBuildingQueries = function(heights, queries) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function leftmostBuildingQueries(heights: number[], queries: number[][]): number[] {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $heights      * @param Integer[][] $queries      * @return Integer[]      */     function leftmostBuildingQueries($heights, $queries) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func leftmostBuildingQueries(_ heights: [Int], _ queries: [[Int]]) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun leftmostBuildingQueries(heights: IntArray, queries: Array<IntArray>): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> leftmostBuildingQueries(List<int> heights, List<List<int>> queries) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func leftmostBuildingQueries(heights []int, queries [][]int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} heights # @param {Integer[][]} queries # @return {Integer[]} def leftmost_building_queries(heights, queries)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def leftmostBuildingQueries(heights: Array[Int], queries: Array[Array[Int]]): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn leftmost_building_queries(heights: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (leftmost-building-queries heights queries)   (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec leftmost_building_queries(Heights :: [integer()], Queries :: [[integer()]]) -> [integer()]. leftmost_building_queries(Heights, Queries) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec leftmost_building_queries(heights :: [integer], queries :: [[integer]]) :: [integer]   def leftmost_building_queries(heights, queries) do        end end"
        }
    ],
    "content": "You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building. If a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j]. You are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi. Return an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query. If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.  Example 1:  Input: heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]] Output: [2,5,-1,5,2] Explanation: In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2].  In the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5].  In the third query, Alice cannot meet Bob since Alice cannot move to any other building. In the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5]. In the fifth query, Alice and Bob are already in the same building.   For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet. For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.  Example 2:  Input: heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]] Output: [7,6,-1,4,6] Explanation: In the first query, Alice can directly move to Bob's building since heights[0] < heights[7]. In the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6]. In the third query, Alice cannot meet Bob since Bob cannot move to any other building. In the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4]. In the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6]. For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet. For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.    Constraints:  1 <= heights.length <= 5 * 104 1 <= heights[i] <= 109 1 <= queries.length <= 5 * 104 queries[i] = [ai, bi] 0 <= ai, bi <= heights.length - 1  "
}