{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60504000,
    "question_id": "3181",
    "elapsed_time": 5234,
    "compare_result
    "code_output": "[-1,-1,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474958562,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 59,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181455959",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function leftmostBuildingQueries($heights, $queries) {\n        $n = count($heights);\n        $ans = [];\n        \n        foreach ($queries as $query) {\n            list($a, $b) = $query;\n            if ($a == $b) {\n                $ans[] = $a; // Alice and Bob are in the same building.\n                continue;\n            }\n            if ($a > $b || $heights[$a] >= $heights[$b]) {\n                $ans[] = -1; // Alice cannot move right or Alice's building is not shorter than Bob's.\n                continue;\n            }\n\n            $leftmost = -1;\n            $maxHeight = $heights[$a];\n            for ($i = $a + 1; $i <= $b; $i++) {\n                if ($heights[$i] > $maxHeight) {\n                    if ($leftmost == -1) $leftmost = $i;\n                    $maxHeight = $heights[$i];\n                    if ($maxHeight >= $heights[$b]) break; // Found a building as high as or higher than Bob's before reaching Bob.\n                }\n            }\n            $ans[] = ($maxHeight >= $heights[$b]) ? $leftmost : -1;\n        }\n        \n        return $ans;\n    }\n}"
}