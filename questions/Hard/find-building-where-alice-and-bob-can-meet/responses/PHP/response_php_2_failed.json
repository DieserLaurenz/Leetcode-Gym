{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 48292000,
    "question_id": "3181",
    "elapsed_time": 5097,
    "compare_result
    "code_output": "[2,2,2,5,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475011477,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 10,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181456384",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function leftmostBuildingQueries($heights, $queries) {\n        $n = count($heights);\n        $ans = array_fill(0, count($queries), -1);\n\n        foreach ($queries as $index => $query) {\n            [$a, $b] = $query;\n            if ($a == $b) {\n                $ans[$index] = $a;\n                continue;\n            }\n\n            $meet = false;\n            $maxHeightFromA = $heights[$a];\n            $maxHeightFromB = $heights[$b];\n            $leftmostFromA = PHP_INT_MAX;\n            $leftmostFromB = PHP_INT_MAX;\n\n            // Find the leftmost meeting point from A\n            for ($i = $a + 1; $i < $n; $i++) {\n                if ($heights[$i] > $maxHeightFromA) {\n                    $maxHeightFromA = $heights[$i];\n                    $leftmostFromA = min($leftmostFromA, $i);\n                    if ($i == $b || $maxHeightFromA >= $maxHeightFromB) {\n                        $meet = true;\n                        break;\n                    }\n                }\n            }\n\n            // Find the leftmost meeting point from B, if needed\n            if (!$meet) {\n                for ($j = $b - 1; $j >= 0; $j--) {\n                    if ($heights[$j] > $maxHeightFromB) {\n                        $maxHeightFromB = $heights[$j];\n                        $leftmostFromB = min($leftmostFromB, $j);\n                        if ($j == $a || $maxHeightFromB >= $maxHeightFromA) {\n                            $meet = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if ($meet) {\n                $ans[$index] = min($leftmostFromA, $leftmostFromB);\n            }\n        }\n\n        return $ans;\n    }\n}"
}