{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60680000,
    "question_id": "3181",
    "elapsed_time": 5182,
    "compare_result
    "code_output": "[-1,-1,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474906012,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181455504",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $heights\n     * @param Integer[][] $queries\n     * @return Integer[]\n     */\n    function leftmostBuildingQueries($heights, $queries) {\n        $n = count($heights);\n        $maxRight = array_fill(0, $n, -1);\n        $stack = [];\n        \n        // Preprocess to find the next greater element for each building\n        for ($i = 0; $i < $n; $i++) {\n            while (!empty($stack) && $heights[end($stack)] < $heights[$i]) {\n                $maxRight[array_pop($stack)] = $i;\n            }\n            $stack[] = $i;\n        }\n        \n        $ans = [];\n        foreach ($queries as $query) {\n            $a = $query[0];\n            $b = $query[1];\n            $found = false;\n            \n            if ($a < $b) {\n                // Move Alice to the right\n                while ($a < $n && $maxRight[$a] != -1 && $maxRight[$a] <= $b) {\n                    if ($maxRight[$a] == $b) {\n                        $found = true;\n                        break;\n                    }\n                    $a = $maxRight[$a];\n                }\n            }\n            \n            $ans[] = $found ? $b : -1;\n        }\n        \n        return $ans;\n    }\n}"
}