{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126892000,
    "question_id": "3181",
    "elapsed_time": 5019,
    "compare_result
    "code_output": "[-1,6,-1,4,7]",
    "std_output": "",
    "last_testcase": "[5,3,8,2,6,1,4,6]\n[[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "expected_output": "[7,6,-1,4,6]",
    "task_finish_time": 1708485035105,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 53,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1181548292",
    "input_formatted": "[5,3,8,2,6,1,4,6], [[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "input": "[5,3,8,2,6,1,4,6]\n[[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (leftmost-building-queries heights queries)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  \n  (define (can-meet? a b)\n    (and (< a b) (< (list-ref heights a) (list-ref heights b))))\n  \n  (define (find-meet a b)\n    (let loop ([i (add1 a)])\n      (cond [(>= i (length heights)) -1]\n            [(and (can-meet? a i) (can-meet? b i)) i]\n            [else (loop (add1 i))])))\n  \n  (map (lambda (query)\n         (let ([a (first query)]\n               [b (second query)])\n           (if (= a b) a (find-meet a b))))\n       queries))"
}