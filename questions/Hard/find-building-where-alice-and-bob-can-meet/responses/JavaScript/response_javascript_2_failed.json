{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73960000,
    "question_id": "3181",
    "elapsed_time": 3012,
    "compare_result
    "code_output": "[-1,2,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474709228,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1181453831",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} heights\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar leftmostBuildingQueries = function(heights, queries) {\n    const n = heights.length;\n    let ans = [];\n    for (let [start, end] of queries) {\n        if (start == end) {\n            ans.push(start);\n            continue;\n        }\n        let maxH = -1, idx = -1;\n        for (let i = start + 1; i <= end; i++) {\n            if (heights[i] > heights[start] && heights[i] > maxH) {\n                maxH = heights[i];\n                idx = i;\n                break;\n            }\n        }\n        if (idx != -1) {\n            for (let i = idx + 1; i <= end; i++) {\n                if (heights[i] > maxH) {\n                    maxH = heights[i];\n                    idx = i;\n                }\n            }\n            ans.push(idx);\n        } else {\n            ans.push(-1);\n        }\n    }\n    return ans;\n};"
}