{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73960000,
    "question_id": "3181",
    "elapsed_time": 1256,
    "compare_result
    "code_output": "[0,2,2,3,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474673471,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1181453539",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} heights\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar leftmostBuildingQueries = function(heights, queries) {\n    const n = heights.length;\n    const nextGreater = new Array(n).fill(n);\n    const stack = [];\n    for (let i = n - 1; i >= 0; --i) {\n        while (stack.length && heights[stack[stack.length - 1]] <= heights[i]) {\n            stack.pop();\n        }\n        if (stack.length) {\n            nextGreater[i] = stack[stack.length - 1];\n        }\n        stack.push(i);\n    }\n\n    return queries.map(([a, b]) => {\n        if (a >= b) return -1;\n        let pos = a;\n        while (pos < b && pos < n && nextGreater[pos] <= b) {\n            pos = nextGreater[pos];\n        }\n        return pos < b ? pos : -1;\n    });\n};"
}