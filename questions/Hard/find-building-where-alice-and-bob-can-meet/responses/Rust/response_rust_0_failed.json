{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5900000,
    "question_id": "3181",
    "elapsed_time": 2157,
    "compare_result": "0011010000010000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000000000000000000000000001000000000000000000000000000000000000000000000000001100101000000000000000010000000000000000001000100000000000010000000000000100000100000000000000000000000000000000000010000000000000000001000010000000000000000000010000001000000000010000100001000000100000000000000010000000000100000001000000000000000000000000000101010010000000000001000000000100000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000",
    "code_output": "[2,5,5,5,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708484886529,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1181546621",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn leftmost_building_queries(heights: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        let mut ans = vec![];\n        for query in queries {\n            let (start, end) = (query[0] as usize, query[1] as usize);\n            if start == end {\n                ans.push(start as i32);\n                continue;\n            }\n            let mut possible = false;\n            let mut max_height = -1;\n            let mut leftmost = i32::MAX;\n            for i in start.max(end)..heights.len() {\n                if heights[i] > max_height {\n                    max_height = heights[i];\n                    if i > start && i > end {\n                        possible = true;\n                        leftmost = leftmost.min(i as i32);\n                    }\n                }\n            }\n            ans.push(if possible { leftmost } else { -1 });\n        }\n        ans\n    }\n}"
}