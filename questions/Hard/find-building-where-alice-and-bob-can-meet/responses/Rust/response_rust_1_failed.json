{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5880000,
    "question_id": "3181",
    "elapsed_time": 1033,
    "compare_result
    "code_output": "[-1,-1,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708484920455,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 65,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1181547063",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn leftmost_building_queries(heights: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = heights.len();\n        let mut next_meet = vec![-1; n];\n        let mut stack: Vec<usize> = vec![];\n\n        // Preprocess to find the next building to the right that is taller\n        for i in (0..n).rev() {\n            while !stack.is_empty() && heights[i] >= heights[*stack.last().unwrap()] {\n                stack.pop();\n            }\n            if !stack.is_empty() {\n                next_meet[i] = stack.last().copied().unwrap() as i32;\n            }\n            stack.push(i);\n        }\n\n        queries.iter().map(|query| {\n            let (mut a, b) = (query[0] as usize, query[1] as usize);\n            if a > b {\n                return -1;\n            }\n            while a < b && next_meet[a] != -1 && next_meet[a] as usize <= b {\n                a = next_meet[a] as usize;\n            }\n            if a == b { a as i32 } else { -1 }\n        }).collect()\n    }\n}"
}