{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 76248000,
    "question_id": "3181",
    "elapsed_time": 2215,
    "compare_result
    "code_output": "[-1,-1,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708484754218,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181545238",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def leftmostBuildingQueries(heights: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        val n = heights.length\n        val maxRight = Array.fill(n)(-1)\n        var stack = List[Int]()\n\n        for (i <- heights.indices.reverse) {\n            while (stack.nonEmpty && heights(i) >= heights(stack.head)) {\n                stack = stack.tail\n            }\n            if (stack.nonEmpty) maxRight(i) = stack.head\n            stack = i :: stack\n        }\n\n        queries.map { case Array(a, b) =>\n            if (a >= b) -1\n            else {\n                var i = a\n                var canMeet = false\n                while (i != -1 && i <= b) {\n                    if (i == b) {\n                        canMeet = true\n                        i = -1\n                    } else i = maxRight(i)\n                }\n                if (canMeet) b else -1\n            }\n        }\n    }\n}"
}