{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71908000,
    "question_id": "3181",
    "elapsed_time": 1296,
    "compare_result
    "code_output": "[-1,-1,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708484819285,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181545922",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def leftmostBuildingQueries(heights: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        val n = heights.length\n        val maxToRight = new Array[Int](n)\n\n        for (i <- n - 2 to 0 by -1) {\n            maxToRight(i) = math.max(maxToRight(i + 1), heights(i + 1))\n        }\n\n        queries.map { case Array(a, b) =>\n            if (a >= b || heights(a) >= heights(b)) -1\n            else {\n                var answer = -1\n                var i = a + 1\n                while (i <= b && answer == -1) {\n                    if (heights(i) > heights(a)) {\n                        answer = i\n                    }\n                    i += 1\n                }\n                answer\n            }\n        }\n    }\n}"
}