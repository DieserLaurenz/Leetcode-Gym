{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 77908000,
    "question_id": "3181",
    "elapsed_time": 5800,
    "compare_result
    "code_output": "[-1,-1,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708484791084,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181545602",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def leftmostBuildingQueries(heights: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        val n = heights.length\n        val leftMax = Array.fill(n)(0)\n        var maxSoFar = heights(0)\n        for (i <- 1 until n) {\n            leftMax(i) = maxSoFar\n            if (heights(i) > maxSoFar) maxSoFar = heights(i)\n        }\n\n        queries.map { case Array(a, b) =>\n            if (a >= b || heights(a) >= heights(b)) -1\n            else {\n                var meetPoint = -1\n                for (j <- (a + 1) to b if meetPoint == -1) {\n                    if (heights(j) > leftMax(j) && heights(j) > heights(a)) meetPoint = j\n                }\n                meetPoint\n            }\n        }\n    }\n}"
}