{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50624000,
    "question_id": "3181",
    "elapsed_time": 3019,
    "compare_result
    "code_output": "[1,3,4,4,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474379780,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1181451127",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint* leftmostBuildingQueries(int* heights, int heightsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    *returnSize = queriesSize;\n    int* ans = (int*)malloc(queriesSize * sizeof(int));\n    for (int i = 0; i < queriesSize; ++i) {\n        int a = queries[i][0], b = queries[i][1];\n        if (a == b) {\n            ans[i] = a; // Alice and Bob are in the same building\n            continue;\n        }\n        int direction = a < b ? 1 : -1; // Determine search direction\n        int meet = -1, maxHeight = heights[a];\n        for (int j = a + direction; j != b + direction; j += direction) {\n            if (heights[j] > maxHeight) {\n                maxHeight = heights[j];\n                if (j > b) { // Found a meeting point beyond b\n                    meet = j;\n                    break;\n                }\n            }\n        }\n        if (meet == -1 && maxHeight > heights[b]) meet = b;\n        ans[i] = (meet > b || meet < 0) ? -1 : meet;\n    }\n    return ans;\n}"
}