{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37612000,
    "question_id": "3181",
    "elapsed_time": 3012,
    "compare_result
    "code_output": "[2,2,-1,5,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474345316,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1181450864",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint* leftmostBuildingQueries(int* heights, int heightsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    *returnSize = queriesSize;\n    int* ans = (int*)malloc(sizeof(int) * queriesSize);\n    for (int q = 0; q < queriesSize; q++) {\n        int start = queries[q][0];\n        int end = queries[q][1];\n        int leftmost = -1;\n        \n        // Checking if direct move is possible or not\n        if (heights[start] < heights[end]) {\n            leftmost = end;\n        } else {\n            for (int j = start + 1; j < heightsSize; j++) {\n                if (heights[j] > heights[start] && heights[j] > heights[end]) {\n                    leftmost = j;\n                    break;\n                }\n            }\n        }\n        \n        ans[q] = leftmost;\n    }\n    return ans;\n}"
}