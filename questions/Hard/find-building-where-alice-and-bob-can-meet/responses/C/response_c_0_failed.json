{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37504000,
    "question_id": "3181",
    "elapsed_time": 3015,
    "compare_result
    "code_output": "[2,2,-1,5,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474295682,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 40,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1181450465",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint* leftmostBuildingQueries(int* heights, int heightsSize, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    *returnSize = queriesSize;\n    int* ans = (int*)malloc(sizeof(int) * queriesSize);\n    for (int i = 0; i < queriesSize; i++) {\n        int ai = queries[i][0];\n        int bi = queries[i][1];\n        if (ai == bi) {\n            ans[i] = ai;\n            continue;\n        }\n        int leftmost = -1;\n        int max_height = heights[ai] > heights[bi] ? heights[ai] : heights[bi];\n        for (int j = ai < bi ? ai + 1 : bi + 1; j < heightsSize; j++) {\n            if (heights[j] > max_height) {\n                leftmost = j;\n                break;\n            }\n        }\n        ans[i] = leftmost;\n    }\n    return ans;\n}"
}