{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31948000,
    "question_id": "3181",
    "elapsed_time": 11015,
    "compare_result": "0011010000010000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000010000000000000000000000000001000000000000000000000000000010000000000000000000001100100000000001000000000000000000100100001000100000000000010000000000000100000100000000000000000000000000000000000010000000000000000001000010000010000000000000010010001000000000010000100001000000000000000000000010000000000100000001000000000000000000000000000101010010000000000001000000000100000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "[2,2,-1,5,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708882102965,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185979871",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def leftmostBuildingQueries(self, heights, queries):\n        \"\"\"\n        :type heights: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        def findLeftmost(heights, start, end):\n            for i in range(start + 1, len(heights)):\n                if heights[i] > heights[start] and heights[i] > heights[end]:\n                    return i\n            return -1\n\n        answer = []\n        for query in queries:\n            if query[0] == query[1]:\n                answer.append(query[0])\n            else:\n                leftmost = findLeftmost(heights, query[0], query[1])\n                answer.append(leftmost)\n        return answer"
}