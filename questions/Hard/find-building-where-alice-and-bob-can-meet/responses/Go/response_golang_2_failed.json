{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11888000,
    "question_id": "3181",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "[-1,2,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475575418,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181461109",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func leftmostBuildingQueries(heights []int, queries [][]int) []int {\n    n := len(heights)\n    ans := make([]int, len(queries))\n\n    for i, query := range queries {\n        alice, bob := query[0], query[1]\n        meet := -1\n\n        if alice > bob {\n            alice, bob = bob, alice\n        }\n\n        maxFromAlice := heights[alice]\n        for j := alice + 1; j < n; j++ {\n            if heights[j] > maxFromAlice {\n                maxFromAlice = heights[j]\n                if j >= alice && j <= bob {\n                    meet = j\n                    break\n                }\n            }\n        }\n\n        if meet != -1 {\n            maxFromBob := heights[bob]\n            for j := bob - 1; j > meet; j-- {\n                if heights[j] > maxFromBob {\n                    meet = -1\n                    break\n                }\n                maxFromBob = max(maxFromBob, heights[j])\n            }\n        }\n\n        ans[i] = meet\n    }\n\n    return ans\n}"
}