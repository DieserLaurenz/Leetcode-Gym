{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11744000,
    "question_id": "3181",
    "elapsed_time": 2262,
    "compare_result
    "code_output": "[-1,2,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475497630,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181460442",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func leftmostBuildingQueries(heights []int, queries [][]int) []int {\n    ans := make([]int, len(queries))\n    for i, q := range queries {\n        a, b := q[0], q[1]\n        if a == b {\n            ans[i] = a\n            continue\n        }\n        if a > b {\n            a, b = b, a\n        }\n        maxH := heights[a]\n        leftmost := -1\n        for j := a + 1; j <= b; j++ {\n            if heights[j] > maxH {\n                maxH = heights[j]\n                leftmost = j\n                break\n            }\n        }\n        if leftmost == -1 {\n            ans[i] = -1\n            continue\n        }\n        for j := leftmost + 1; j <= b; j++ {\n            if heights[j] > maxH {\n                maxH = heights[j]\n                leftmost = j\n            }\n        }\n        ans[i] = leftmost\n    }\n    return ans\n}"
}