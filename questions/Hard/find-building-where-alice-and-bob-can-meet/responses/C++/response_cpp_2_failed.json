{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 192400000,
    "question_id": "3181",
    "elapsed_time": 4019,
    "compare_result
    "code_output": "[-1,-1,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474083594,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1181448769",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {\n        int n = heights.size();\n        vector<int> answer(queries.size(), -1);\n        set<pair<int, int>> heightWithIndex; // To store heights with their indices\n\n        for (int i = 0; i < n; ++i) {\n            heightWithIndex.insert({heights[i], i});\n        }\n\n        for (int i = 0; i < queries.size(); ++i) {\n            int start = queries[i][0];\n            int end = queries[i][1];\n            auto it = heightWithIndex.lower_bound({heights[start], start});\n            // Ensure we start checking from the next building to 'start'\n            if (it != heightWithIndex.end()) {\n                ++it;\n            }\n            for (; it != heightWithIndex.end(); ++it) {\n                int buildingIndex = it->second;\n                if (buildingIndex > start && buildingIndex <= end && heights[buildingIndex] > heights[start] && heights[buildingIndex] > heights[end]) {\n                    answer[i] = buildingIndex;\n                    break;\n                }\n                if (buildingIndex > end) {\n                    break;\n                }\n            }\n        }\n\n        return answer;\n    }\n};"
}