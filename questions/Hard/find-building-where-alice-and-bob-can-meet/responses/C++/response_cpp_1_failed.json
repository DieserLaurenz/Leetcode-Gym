{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 174280000,
    "question_id": "3181",
    "elapsed_time": 1984,
    "compare_result
    "code_output": "[-1,2,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474040861,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 87,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1181448442",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {\n        int n = heights.size();\n        vector<int> ans(queries.size(), -1);\n        for (int i = 0; i < queries.size(); ++i) {\n            int a = queries[i][0], b = queries[i][1];\n            if (a == b) {\n                ans[i] = a;\n                continue;\n            }\n            if (a > b) swap(a, b);\n            int max_height = heights[a];\n            for (int j = a + 1; j <= b; ++j) {\n                if (heights[j] > max_height) {\n                    max_height = heights[j];\n                    ans[i] = j;\n                    if (j > a && j < b) break; // Optimize by breaking early if a meeting point is found\n                }\n            }\n        }\n        return ans;\n    }\n};"
}