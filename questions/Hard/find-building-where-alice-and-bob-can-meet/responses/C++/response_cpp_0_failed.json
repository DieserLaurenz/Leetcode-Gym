{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 177908000,
    "question_id": "3181",
    "elapsed_time": 404,
    "compare_result
    "code_output": "[-1,2,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474014215,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1181448268",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {\n        int n = heights.size();\n        vector<int> maxRight(n);\n        maxRight[n - 1] = heights[n - 1];\n        for (int i = n - 2; i >= 0; --i) {\n            maxRight[i] = max(maxRight[i + 1], heights[i]);\n        }\n\n        vector<int> ans;\n        for (const auto& q : queries) {\n            int a = q[0], b = q[1];\n            if (heights[a] >= maxRight[b] || a >= b) {\n                ans.push_back(-1);\n                continue;\n            }\n\n            int left = a + 1, right = b, meet = -1;\n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n                if (heights[mid] > heights[a] && heights[mid] > heights[b]) {\n                    meet = mid;\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            }\n            ans.push_back(meet);\n        }\n\n        return ans;\n    }\n};"
}