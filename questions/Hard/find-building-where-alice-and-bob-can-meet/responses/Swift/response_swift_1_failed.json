{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24676000,
    "question_id": "3181",
    "elapsed_time": 2724,
    "compare_result
    "code_output": "[-1,2,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475106853,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181457193",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func leftmostBuildingQueries(_ heights: [Int], _ queries: [[Int]]) -> [Int] {\n        func canMeet(_ a: Int, _ b: Int) -> Int {\n            let lower = min(a, b), higher = max(a, b)\n            var maxHeight = 0\n            for i in lower...higher {\n                if heights[i] > maxHeight {\n                    maxHeight = heights[i]\n                }\n                if i > lower && heights[i] >= heights[lower] && heights[i] >= heights[higher] {\n                    return i\n                }\n            }\n            return -1\n        }\n        \n        return queries.map { query in\n            let a = query[0], b = query[1]\n            if a == b { return a }\n            return canMeet(a, b)\n        }\n    }\n}"
}