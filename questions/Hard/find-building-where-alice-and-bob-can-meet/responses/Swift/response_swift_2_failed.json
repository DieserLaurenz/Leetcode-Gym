{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18532000,
    "question_id": "3181",
    "elapsed_time": 607,
    "compare_result
    "code_output": "[-1,2,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475156331,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181457615",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func leftmostBuildingQueries(_ heights: [Int], _ queries: [[Int]]) -> [Int] {\n        var ans = [Int]()\n\n        for query in queries {\n            let a = query[0], b = query[1]\n            if a == b {\n                ans.append(a)\n                continue\n            }\n\n            let direction = a < b ? 1 : -1\n            var meetPoint = -1\n            var maxLeft = heights[a], maxRight = heights[b]\n            var i = a, j = b\n\n            while i != j {\n                if direction > 0 { // Moving right\n                    i += direction\n                    if heights[i] > maxLeft {\n                        maxLeft = heights[i]\n                        if maxLeft >= maxRight {\n                            meetPoint = i\n                            break\n                        }\n                    }\n                } else { // Moving left\n                    j += direction\n                    if heights[j] > maxRight {\n                        maxRight = heights[j]\n                        if maxRight >= maxLeft {\n                            meetPoint = j\n                            break\n                        }\n                    }\n                }\n            }\n\n            // Check if they can meet at the current building\n            if heights[i] >= maxLeft && heights[j] >= maxRight {\n                meetPoint = direction > 0 ? i : j\n            }\n\n            ans.append(meetPoint)\n        }\n\n        return ans\n    }\n}"
}