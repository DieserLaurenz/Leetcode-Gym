{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24508000,
    "question_id": "3181",
    "elapsed_time": 3195,
    "compare_result
    "code_output": "[-1,6,-1,4,7]",
    "std_output": "",
    "last_testcase": "[5,3,8,2,6,1,4,6]\n[[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "expected_output": "[7,6,-1,4,6]",
    "task_finish_time": 1708475065071,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181456832",
    "input_formatted": "[5,3,8,2,6,1,4,6], [[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "input": "[5,3,8,2,6,1,4,6]\n[[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func leftmostBuildingQueries(_ heights: [Int], _ queries: [[Int]]) -> [Int] {\n        var ans = [Int]()\n        for query in queries {\n            let (start, end) = (query[0], query[1])\n            if start == end {\n                ans.append(start)\n                continue\n            }\n            var possible = false\n            var leftmost = max(start, end)\n            for i in max(start, end)..<heights.count {\n                if heights[start] < heights[i] && heights[end] < heights[i] {\n                    leftmost = i\n                    possible = true\n                    break\n                }\n            }\n            ans.append(possible ? leftmost : -1)\n        }\n        return ans\n    }\n}"
}