{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 27: exception error: undef",
    "full_runtime_error": "Line 27: exception error: undef\n[{lists,drop,[0,[0,6,6,8,8,8]],[]},\n {solution,find_leftmost,4,[{file,\"solution.erl\"},{line,27}]},\n {solution,'-leftmost_building_queries/2-fun-1-',2,\n              [{file,\"solution.erl\"},{line,13}]},\n {lists,map,2,[{file,\"lists.erl\"},{line,1559}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,52}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,38}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,69}]},\n {init,start_em,1,[]}]",
    "status_runtime": "N/A",
    "memory": 66004000,
    "question_id": "3181",
    "elapsed_time": 1370,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708485183351,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1181549966",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec leftmost_building_queries(Heights :: [integer()], Queries :: [[integer()]]) -> [integer()].\nleftmost_building_queries(Heights, Queries) ->\n    Reachable = lists:foldl(fun(H, {Max, Acc}) ->\n                                {max(H, Max), [Max | Acc]}\n                            end, {0, []}, Heights),\n    ReachableRev = lists:reverse(element(2, Reachable)),\n    lists:map(fun([A, B]) ->\n        case A == B of\n            true -> A;\n            false ->\n                AliceReach = lists:nth(A + 1, ReachableRev),\n                BobReach = lists:nth(B + 1, ReachableRev),\n                MeetIndex = find_meet(AliceReach, BobReach, ReachableRev, A, B),\n                case MeetIndex of\n                    undefined -> -1;\n                    _ -> MeetIndex\n                end\n        end\n    end, Queries).\n\nfind_meet(AliceReach, BobReach, Reachable, A, B) when AliceReach >= B orelse BobReach >= A ->\n    find_leftmost(A, B, max(AliceReach, BobReach), Reachable);\nfind_meet(_, _, _, _, _) ->\n    undefined.\n\nfind_leftmost(A, B, MaxReach, Reachable) ->\n    case lists:drop(A, Reachable) of\n        [] -> undefined;\n        [_|T] ->\n            case lists:nth(B - A, T) of\n                H when H >= MaxReach -> B;\n                _ -> find_leftmost(A + 1, B, MaxReach, T)\n            end\n    end."
}