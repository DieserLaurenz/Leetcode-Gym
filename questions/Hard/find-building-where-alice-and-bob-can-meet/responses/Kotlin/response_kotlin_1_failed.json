{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 90072000,
    "question_id": "3181",
    "elapsed_time": 3254,
    "compare_result
    "code_output": "[-1,2,3,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475252059,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181458379",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun leftmostBuildingQueries(heights: IntArray, queries: Array<IntArray>): IntArray {\n        return queries.map { query ->\n            val (start, end) = query\n            var leftmost = -1\n            if (start < end && heights[start] < heights[end]) {\n                for (i in start + 1..end) {\n                    if (heights[start] < heights[i] && heights[end] <= heights[i]) {\n                        leftmost = i\n                        break\n                    }\n                }\n            } else if (start < end) {\n                var max = Int.MIN_VALUE\n                for (i in start + 1 until end) {\n                    if (heights[i] > max) {\n                        max = heights[i]\n                        if (heights[end] <= max) {\n                            leftmost = i\n                            break\n                        }\n                    }\n                }\n            }\n            leftmost\n        }.toIntArray()\n    }\n}"
}