{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81364000,
    "question_id": "3181",
    "elapsed_time": 2030,
    "compare_result
    "code_output": "[-1,2,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475215923,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181458065",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun leftmostBuildingQueries(heights: IntArray, queries: Array<IntArray>): IntArray {\n        val n = heights.size\n        val maxRight = IntArray(n)\n        maxRight[n - 1] = heights[n - 1]\n        for (i in n - 2 downTo 0) {\n            maxRight[i] = maxOf(heights[i], maxRight[i + 1])\n        }\n\n        return queries.map { query ->\n            val (a, b) = query\n            if (a >= b) return@map -1\n            var leftmost = -1\n            for (i in a + 1..b) {\n                if (heights[a] < heights[i] && heights[b] <= maxRight[i]) {\n                    leftmost = i\n                    break\n                }\n            }\n            leftmost\n        }.toIntArray()\n    }\n}"
}