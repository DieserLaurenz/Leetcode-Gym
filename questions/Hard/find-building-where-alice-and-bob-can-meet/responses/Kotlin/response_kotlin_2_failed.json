{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 87052000,
    "question_id": "3181",
    "elapsed_time": 2464,
    "compare_result
    "code_output": "[-1,2,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475288536,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181458709",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun leftmostBuildingQueries(heights: IntArray, queries: Array<IntArray>): IntArray {\n        val n = heights.size\n        val answer = IntArray(queries.size) { -1 }\n        for ((index, query) in queries.withIndex()) {\n            val (a, b) = query\n            if (a >= b) {\n                answer[index] = -1\n            } else {\n                var meet = false\n                for (i in b downTo a + 1) {\n                    if (heights[i] > heights[a] && heights[i] > heights[b]) {\n                        answer[index] = i\n                        meet = true\n                        break\n                    }\n                }\n                if (!meet) {\n                    for (i in a + 1 until b) {\n                        if (heights[i] > heights[a]) {\n                            answer[index] = i\n                            break\n                        }\n                    }\n                }\n            }\n        }\n        return answer\n    }\n}"
}