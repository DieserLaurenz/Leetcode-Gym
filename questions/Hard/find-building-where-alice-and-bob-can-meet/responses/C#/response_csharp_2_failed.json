{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 113864000,
    "question_id": "3181",
    "elapsed_time": 2013,
    "compare_result
    "code_output": "[-1,6,-1,4,7]",
    "std_output": "",
    "last_testcase": "[5,3,8,2,6,1,4,6]\n[[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "expected_output": "[7,6,-1,4,6]",
    "task_finish_time": 1708474504612,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1181452103",
    "input_formatted": "[5,3,8,2,6,1,4,6], [[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "input": "[5,3,8,2,6,1,4,6]\n[[0,7],[3,5],[5,2],[3,0],[1,6]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] LeftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.Length;\n        int[] ans = new int[queries.Length];\n        for (int i = 0; i < queries.Length; i++) {\n            int start = queries[i][0], end = queries[i][1];\n            if (start == end) {\n                ans[i] = start; // Alice and Bob are in the same building\n                continue;\n            }\n            int leftmost = -1;\n            int maxHeight = Math.Max(heights[start], heights[end]);\n            for (int j = Math.Max(start, end) + 1; j < n; j++) {\n                if (heights[j] > maxHeight) {\n                    leftmost = j;\n                    break;\n                }\n            }\n            ans[i] = leftmost;\n        }\n        return ans;\n    }\n}"
}