{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 111440000,
    "question_id": "3181",
    "elapsed_time": 2015,
    "compare_result
    "code_output": "[2,5,-1,5,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474476148,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1181451899",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] LeftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.Length;\n        int[] ans = new int[queries.Length];\n        for (int i = 0; i < queries.Length; i++) {\n            int a = queries[i][0], b = queries[i][1];\n            int leftmost = -1;\n            int maxA = heights[a], maxB = heights[b];\n            for (int j = Math.Max(a, b); j < n; j++) {\n                if (heights[j] > maxA && heights[j] > maxB) {\n                    leftmost = j;\n                    break;\n                }\n                if (heights[j] > maxA) maxA = heights[j];\n                if (heights[j] > maxB) maxB = heights[j];\n            }\n            ans[i] = leftmost;\n        }\n        return ans;\n    }\n}"
}