{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 112892000,
    "question_id": "3181",
    "elapsed_time": 2025,
    "compare_result
    "code_output": "[1,3,-1,4,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474441685,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1181451632",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] LeftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.Length;\n        int[] maxRight = new int[n];\n        maxRight[n - 1] = heights[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            maxRight[i] = Math.Max(heights[i], maxRight[i + 1]);\n        }\n\n        int[] ans = new int[queries.Length];\n        for (int i = 0; i < queries.Length; i++) {\n            int a = queries[i][0], b = queries[i][1];\n            if (a > b) {\n                ans[i] = -1; // Alice can't move to a building with a smaller index.\n            } else {\n                int leftmost = -1;\n                for (int j = Math.Max(a + 1, b); j < n; j++) {\n                    if (heights[a] < maxRight[j] && heights[b] < maxRight[j]) {\n                        leftmost = j;\n                        break;\n                    }\n                }\n                ans[i] = leftmost;\n            }\n        }\n\n        return ans;\n    }\n}"
}