{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 67004000,
    "display_runtime": "12",
    "question_id": "3181",
    "elapsed_time": 479,
    "compare_result
    "code_output": "[-1,2,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474142344,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181449260",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.length;\n        int[] ans = new int[queries.length];\n        int[] maxRight = new int[n];\n        maxRight[n - 1] = heights[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            maxRight[i] = Math.max(maxRight[i + 1], heights[i]);\n        }\n\n        for (int i = 0; i < queries.length; i++) {\n            int a = queries[i][0], b = queries[i][1];\n            if (a > b) {\n                ans[i] = -1;\n                continue;\n            }\n            if (heights[a] >= maxRight[b]) {\n                ans[i] = -1;\n                continue;\n            }\n            int left = a, right = b, meetingPoint = -1;\n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n                if (heights[mid] > heights[a] && heights[mid] > heights[b]) {\n                    meetingPoint = mid;\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            }\n            ans[i] = meetingPoint;\n        }\n        return ans;\n    }\n}"
}