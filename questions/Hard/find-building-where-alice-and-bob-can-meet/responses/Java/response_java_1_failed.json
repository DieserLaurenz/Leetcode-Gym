{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63824000,
    "display_runtime": "16",
    "question_id": "3181",
    "elapsed_time": 491,
    "compare_result
    "code_output": "[-1,-1,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474182448,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181449570",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {\n        int n = heights.length;\n        int[] ans = new int[queries.length];\n        int[][] maxRight = new int[n][2]; // [0]: max height till now, [1]: index of max height\n        maxRight[n - 1][0] = heights[n - 1];\n        maxRight[n - 1][1] = n - 1;\n        for (int i = n - 2; i >= 0; i--) {\n            if (heights[i] > maxRight[i + 1][0]) {\n                maxRight[i][0] = heights[i];\n                maxRight[i][1] = i;\n            } else {\n                maxRight[i][0] = maxRight[i + 1][0];\n                maxRight[i][1] = maxRight[i + 1][1];\n            }\n        }\n\n        for (int i = 0; i < queries.length; i++) {\n            int a = queries[i][0], b = queries[i][1];\n            if (heights[a] >= maxRight[b][0]) {\n                ans[i] = -1;\n                continue;\n            }\n\n            int left = a, right = b;\n            while (left < right) {\n                int mid = left + (right - left) / 2;\n                if (maxRight[mid][0] > heights[a] && maxRight[mid][0] > heights[b]) {\n                    right = mid;\n                } else {\n                    left = mid + 1;\n                }\n            }\n            ans[i] = (heights[left] > heights[a] && heights[left] > heights[b]) ? left : -1;\n        }\n        return ans;\n    }\n}"
}