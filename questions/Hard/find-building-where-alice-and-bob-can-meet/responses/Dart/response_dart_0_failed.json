{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 213208000,
    "question_id": "3181",
    "elapsed_time": 1459,
    "compare_result
    "code_output": "[-1,2,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475345908,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1181459183",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> leftmostBuildingQueries(List<int> heights, List<List<int>> queries) {\n    int n = heights.length;\n    List<int> nextGreater = List.filled(n, -1);\n    List<int> ans = List.filled(queries.length, -1);\n    List<int> stack = [];\n\n    for (int i = n - 1; i >= 0; i--) {\n      while (stack.isNotEmpty && heights[stack.last] <= heights[i]) {\n        stack.removeLast();\n      }\n      if (stack.isNotEmpty) {\n        nextGreater[i] = stack.last;\n      }\n      stack.add(i);\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      int a = queries[i][0], b = queries[i][1];\n      if (a > b) {\n        ans[i] = -1;\n        continue;\n      }\n      while (a < b && a != -1) {\n        a = nextGreater[a];\n        if (a != -1 && a <= b) {\n          ans[i] = a;\n        }\n      }\n    }\n\n    return ans;\n  }\n}"
}