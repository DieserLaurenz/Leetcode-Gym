{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212152000,
    "question_id": "3181",
    "elapsed_time": 4285,
    "compare_result
    "code_output": "[-1,2,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475438786,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1181459935",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> leftmostBuildingQueries(List<int> heights, List<List<int>> queries) {\n    int n = heights.length;\n    List<int> res = List.filled(queries.length, -1);\n    for (int q = 0; q < queries.length; q++) {\n      int start = queries[q][0];\n      int end = queries[q][1];\n      if (start == end) {\n        res[q] = start;\n        continue;\n      }\n      if (start > end) {\n        int temp = start;\n        start = end;\n        end = temp;\n      }\n      int maxH = 0;\n      for (int i = start + 1; i <= end; i++) {\n        if (heights[i] > heights[start] && heights[i] > maxH) {\n          maxH = heights[i];\n          if (res[q] == -1) res[q] = i;\n          else res[q] = i < res[q] ? i : res[q];\n        }\n      }\n      if (res[q] != -1) {\n        for (int i = res[q]; i <= end; i++) {\n          if (heights[i] >= heights[end]) {\n            res[q] = i;\n            break;\n          }\n        }\n      }\n    }\n    return res;\n  }\n}"
}