{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 41: Char 7: Error: 'boolean' isn't a type.",
    "full_runtime_error": "Line 41: Char 7: Error: 'boolean' isn't a type.\n      boolean canMeet = true;\n      ^^^^^^^",
    "status_runtime": "N/A",
    "memory": 151764000,
    "question_id": "3181",
    "elapsed_time": 358,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708475385080,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1181459518",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> leftmostBuildingQueries(List<int> heights, List<List<int>> queries) {\n    List<int> answer = [];\n    for (var query in queries) {\n      int start = query[0];\n      int end = query[1];\n      int max_height = -1;\n      int meet_point = -1;\n\n      if (start < end) {\n        for (int i = start + 1; i <= end; i++) {\n          if (heights[i] > heights[start] && heights[i] > max_height) {\n            max_height = heights[i];\n            meet_point = i;\n            break;\n          }\n        }\n        for (int i = meet_point + 1; i <= end && meet_point != -1; i++) {\n          if (heights[i] > max_height) {\n            max_height = heights[i];\n            meet_point = i;\n          }\n        }\n      } else {\n        for (int i = start - 1; i >= end; i--) {\n          if (heights[i] > heights[start] && heights[i] > max_height) {\n            max_height = heights[i];\n            meet_point = i;\n            break;\n          }\n        }\n        for (int i = meet_point - 1; i >= end && meet_point != -1; i--) {\n          if (heights[i] > max_height) {\n            max_height = heights[i];\n            meet_point = i;\n          }\n        }\n      }\n\n      // Check if both can meet\n      boolean canMeet = true;\n      if (meet_point == -1) {\n        canMeet = false;\n      } else {\n        for (int i = start; i != meet_point; i = (i < meet_point) ? i + 1 : i - 1) {\n          if (heights[i] >= heights[meet_point]) {\n            canMeet = false;\n            break;\n          }\n        }\n        for (int i = end; i != meet_point; i = (i < meet_point) ? i + 1 : i - 1) {\n          if (heights[i] >= heights[meet_point]) {\n            canMeet = false;\n            break;\n          }\n        }\n      }\n      answer.add(canMeet ? meet_point : -1);\n    }\n    return answer;\n  }\n}"
}