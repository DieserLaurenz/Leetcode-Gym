{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 78432000,
    "question_id": "3181",
    "elapsed_time": 305,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000",
    "code_output": "[-1,2,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708474765612,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1181454320",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function leftmostBuildingQueries(heights: number[], queries: number[][]): number[] {\n    const n = heights.length;\n    const nextSmallest = new Array(n).fill(-1);\n    const stack: number[] = [];\n    \n    for (let i = 0; i < n; i++) {\n        while (stack.length && heights[stack[stack.length - 1]] < heights[i]) {\n            const idx = stack.pop()!;\n            nextSmallest[idx] = i;\n        }\n        stack.push(i);\n    }\n\n    const ans: number[] = [];\n    for (const [ai, bi] of queries) {\n        if (nextSmallest[ai] !== -1 && nextSmallest[ai] <= bi) {\n            ans.push(nextSmallest[ai]);\n        } else {\n            ans.push(-1);\n        }\n    }\n    \n    return ans;\n};"
}