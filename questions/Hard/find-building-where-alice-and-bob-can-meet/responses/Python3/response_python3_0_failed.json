{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39964000,
    "question_id": "3181",
    "elapsed_time": 1505,
    "compare_result
    "code_output": "[-1,2,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708882205587,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185981449",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(heights)\n        max_right = [-1] * n  # max_right[i] stores the index of the first building taller than the ith building to its right\n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and heights[i] >= heights[stack[-1]]:\n                stack.pop()\n            if stack:\n                max_right[i] = stack[-1]\n            stack.append(i)\n        \n        ans = []\n        for a, b in queries:\n            if a >= b:\n                ans.append(-1)  # Alice cannot move left or stay in the same building\n            else:\n                current = a\n                while current != -1 and current < b:\n                    current = max_right[current]\n                    if current != -1 and current <= b:\n                        ans.append(current)\n                        break\n                else:\n                    ans.append(-1)  # Alice cannot reach a building where she can meet Bob\n        return ans"
}