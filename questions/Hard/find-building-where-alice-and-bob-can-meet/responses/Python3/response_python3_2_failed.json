{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 35248000,
    "question_id": "3181",
    "elapsed_time": 11010,
    "compare_result
    "code_output": "[-1,2,-1,-1,2]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708882288172,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185982443",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def leftmostBuildingQueries(self, heights: List[int], queries: List[List[int]]) -> List[int]:\n        def find_leftmost_building(ai, bi):\n            leftmost = -1\n            max_height = heights[ai]\n            for j in range(ai + 1, bi + 1):\n                if heights[j] > max_height:\n                    if leftmost == -1:\n                        leftmost = j\n                    max_height = heights[j]\n            return leftmost\n\n        ans = []\n        for ai, bi in queries:\n            if ai == bi:\n                ans.append(ai)  # Alice and Bob are already in the same building\n            else:\n                leftmost_meeting_point = find_leftmost_building(ai, bi)\n                ans.append(leftmost_meeting_point)\n        return ans"
}