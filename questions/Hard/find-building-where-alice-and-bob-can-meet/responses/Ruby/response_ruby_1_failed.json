{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 222076000,
    "question_id": "3181",
    "elapsed_time": 3228,
    "compare_result
    "code_output": "[-1,-1,-1,-1,-1]",
    "std_output": "",
    "last_testcase": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "expected_output": "[2,5,-1,5,2]",
    "task_finish_time": 1708484377468,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 949,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1181541272",
    "input_formatted": "[6,4,8,5,2,7], [[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "input": "[6,4,8,5,2,7]\n[[0,1],[0,3],[2,4],[3,4],[2,2]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} heights\n# @param {Integer[][]} queries\n# @return {Integer[]}\ndef leftmost_building_queries(heights, queries)\n    n = heights.size\n    nxt_greater = Array.new(n) { n }\n    stack = []\n    (0...n).each do |i|\n        while stack.any? && heights[stack.last] < heights[i]\n            nxt_greater[stack.pop] = i\n        end\n        stack.push(i)\n    end\n\n    ans = queries.map do |query|\n        a, b = query\n        meet = false\n        if a > b\n            a, b = b, a\n        end\n        while a < b && a < n\n            a = nxt_greater[a]\n            meet = true if a == b\n        end\n        meet ? b : -1\n    end\n    ans\nend"
}