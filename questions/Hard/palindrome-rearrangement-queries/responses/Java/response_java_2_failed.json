{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 109264000,
    "display_runtime": "38",
    "question_id": "3203",
    "elapsed_time": 571,
    "compare_result": "01111110101010111011010010111101101011111111111110110000011000001100001001001110000010000000100101111111111011110100100000000010100011111111111000000000000000000011101010101111111011000000000000000000000010000001000000011111111100100000000000000000000000011101111111011100100000000000100101111111000000000000001000100111111100000000000000000000000000000000000000000001100001000000000000100100000011101000000000000000001011000000000100000100000000000000000110000000000000010000000000000011000000000000000100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001010100110101111111111111110111111111111100010",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708964116924,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 195,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1186890112",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public boolean[] canMakePalindromeQueries(String s, int[][] queries) {\n        int n = s.length();\n        int[][] prefixCounts = new int[n / 2 + 1][26]; // Prefix sum array for character frequencies\n        boolean[] ans = new boolean[queries.length];\n\n        // Fill prefixCounts for the first half of the string\n        for (int i = 0; i < n / 2; i++) {\n            prefixCounts[i + 1] = prefixCounts[i].clone(); // Copy previous counts\n            prefixCounts[i + 1][s.charAt(i) - 'a']++; // Increment count for current char\n        }\n\n        // Process queries\n        for (int q = 0; q < queries.length; q++) {\n            int[] query = queries[q];\n            int ai = query[0], bi = query[1], ci = query[2], di = query[3];\n            int oddCounts = 0; // Count of chars with odd frequencies in the query range\n\n            // Check frequencies in the first half\n            for (int i = 0; i < 26; i++) {\n                int countFirstHalf = prefixCounts[bi + 1][i] - prefixCounts[ai][i];\n                int countSecondHalf = prefixCounts[di - n / 2 + 1][i] - prefixCounts[ci - n / 2][i];\n                if ((countFirstHalf + countSecondHalf) % 2 != 0) oddCounts++;\n            }\n\n            // A palindrome can be formed if the count of characters with odd frequencies is <= 1\n            ans[q] = oddCounts <= 1;\n        }\n\n        return ans;\n    }\n}"
}