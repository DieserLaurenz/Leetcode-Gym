{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212476000,
    "question_id": "3203",
    "elapsed_time": 492,
    "compare_result": "10111111011111111111100000001001000011111110111110110101010100010000000000001110101011110000001101010011111111010000100000000000000011111111011100100010100000000000001010101111111011111010010000000000000000000000000000011111111100100010000000000001000000010101111111111111000000000000000001111111100000000000000000000000111110100000001000000000000000000000000010000000000001100000000000000110000000011001001000000000000011100000000100000000010000000000000111000000000000000000000000000001000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011010000010101111111111111110111111111111100010",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708963934377,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1186887350",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<bool> canMakePalindromeQueries(string s, vector<vector<int>>& queries) {\n        int n = s.length();\n        vector<vector<int>> prefixSum((n / 2) + 1, vector<int>(26, 0));\n        // Calculate prefix sums for character frequencies separately for each half\n        for (int i = 0; i < n / 2; ++i) {\n            prefixSum[i + 1] = prefixSum[i];\n            prefixSum[i + 1][s[i] - 'a']++;\n            prefixSum[i + 1][s[n - 1 - i] - 'a']++;\n        }\n\n        vector<bool> ans;\n        for (const auto& q : queries) {\n            int ai = q[0], bi = q[1], ci = q[2], di = q[3];\n            vector<int> freq(26, 0);\n            // Aggregate frequencies for the query ranges\n            for (int i = 0; i < 26; ++i) {\n                freq[i] += prefixSum[bi + 1][i] - prefixSum[ai][i];\n                freq[i] += prefixSum[di - n / 2 + 1][i] - prefixSum[ci - n / 2][i];\n            }\n\n            // Count the number of characters that have odd frequencies\n            int oddCount = 0;\n            for (int count : freq) {\n                if (count % 2 != 0) oddCount++;\n            }\n\n            // It is possible to form a palindrome if the number of characters with odd frequency is less than or equal to 2\n            ans.push_back(oddCount <= 2);\n        }\n\n        return ans;\n    }\n};"
}