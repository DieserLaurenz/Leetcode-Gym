{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211140000,
    "question_id": "3203",
    "elapsed_time": 545,
    "compare_result": "00011011101000000000001111111111111111101111111110000000000010101001111101111110001010000011100111111111111000000000000000000101001111111100000000000001010000010010101110111111111000000000000000000000000000000000101010011111111100000000000000000010000011110101111110000000000000000000110111111111000000000000011010100111111100000000000000000000000000000000111100000011100111000000000100101100010010000000000000000110001011000000000100000110000000010000000110000000000100000000000000011111000000001000010100011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001110001100111111111111111110111111111111100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708963876349,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 213,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1186886449",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<bool> canMakePalindromeQueries(string s, vector<vector<int>>& queries) {\n        int n = s.length();\n        vector<vector<int>> prefixSum(n + 1, vector<int>(26, 0));\n        // Build prefix sum array for character frequencies\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < 26; ++j) {\n                prefixSum[i + 1][j] = prefixSum[i][j] + (s[i] - 'a' == j);\n            }\n        }\n\n        vector<bool> ans;\n        for (const auto& q : queries) {\n            int ai = q[0], bi = q[1], ci = q[2], di = q[3];\n            // Count the odd frequencies in the first and second half\n            int oddCount1 = 0, oddCount2 = 0;\n            for (int i = 0; i < 26; ++i) {\n                oddCount1 += (prefixSum[bi + 1][i] - prefixSum[ai][i]) % 2;\n                oddCount2 += (prefixSum[di + 1][i] - prefixSum[ci][i]) % 2;\n            }\n            \n            // For the entire string to be a palindrome:\n            // - The total odd character counts from both halves must be less than or equal to 2\n            // - The difference in odd counts between halves must be 0 (both must be even or both odd)\n            ans.push_back((oddCount1 + oddCount2) <= 2 && ((oddCount1 - oddCount2) % 2 == 0));\n        }\n        return ans;\n    }\n};"
}