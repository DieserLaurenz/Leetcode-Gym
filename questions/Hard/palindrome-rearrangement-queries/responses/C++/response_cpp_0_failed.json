{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 299108000,
    "question_id": "3203",
    "elapsed_time": 574,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708963827838,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1186885703",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<bool> canMakePalindromeQueries(string s, vector<vector<int>>& queries) {\n        int n = s.length();\n        vector<vector<int>> freq(n + 1, vector<int>(26, 0));\n        // Precompute the frequency of each character up to each position.\n        for (int i = 0; i < n; ++i) {\n            freq[i + 1] = freq[i]; // Copy previous frequencies.\n            freq[i + 1][s[i] - 'a']++; // Increment the frequency of the current character.\n        }\n\n        vector<bool> answer;\n        for (auto& q : queries) {\n            int ai = q[0], bi = q[1], ci = q[2], di = q[3];\n            // Calculate frequency differences for each half.\n            vector<int> diff1(26, 0), diff2(26, 0);\n            for (int i = 0; i < 26; ++i) {\n                diff1[i] = freq[bi + 1][i] - freq[ai][i];\n                diff2[i] = freq[di + 1][i] - freq[ci][i];\n            }\n\n            // Check if it's possible to rearrange to a palindrome.\n            int oddCount = 0;\n            for (int i = 0; i < 26; ++i) {\n                oddCount += (diff1[i] + diff2[i]) % 2; // Count characters that appear an odd number of times.\n            }\n            answer.push_back(oddCount <= 2); // A palindrome can have at most one character with an odd count.\n        }\n        return answer;\n    }\n};"
}