{
    "status_code": 20,
    "lang": "rust",
    "run_success": false,
    "compile_error": "Line 25, Char 52: can't call method `abs` on ambiguous numeric type `{integer}` (solution.rs)",
    "full_compile_error": "Line 25, Char 52: can't call method `abs` on ambiguous numeric type `{integer}` (solution.rs)\n   |\n25 |                 diff += (count_left - count_right).abs();\n   |                                                    ^^^\nFor more information about this error, try `rustc --explain E0689`.\nerror: could not compile `prog` (bin \"prog\") due to previous error\nmv: cannot stat '/leetcode/rust_compile/target/release/prog': No such file or directory",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3203",
    "task_finish_time": 1708974965087,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1187046454",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn can_make_palindrome_queries(s: String, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        let n = s.len();\n        let mut prefix_count = vec![vec![0; 26]; n / 2 + 1];\n        let mut suffix_count = vec![vec![0; 26]; n / 2 + 1];\n        let s_bytes = s.as_bytes();\n\n        for i in 0..n / 2 {\n            prefix_count[i + 1] = prefix_count[i].clone();\n            prefix_count[i + 1][(s_bytes[i] - b'a') as usize] += 1;\n        }\n\n        for i in (n / 2..n).rev() {\n            suffix_count[n - i] = suffix_count[n - i - 1].clone();\n            suffix_count[n - i][(s_bytes[i] - b'a') as usize] += 1;\n        }\n\n        queries.into_iter().map(|query| {\n            let (ai, bi, ci, di) = (query[0] as usize, query[1] as usize, query[2] as usize - n / 2, query[3] as usize - n / 2);\n            let mut diff = 0;\n\n            for j in 0..26 {\n                let count_left = prefix_count[bi + 1][j] - prefix_count[ai][j];\n                let count_right = suffix_count[di + 1][j] - suffix_count[ci][j];\n                diff += (count_left - count_right).abs();\n            }\n\n            diff / 2 <= 1\n        }).collect()\n    }\n}"
}