{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21928000,
    "question_id": "3203",
    "elapsed_time": 89,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708974885037,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1187045537",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn can_make_palindrome_queries(s: String, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        let n = s.len();\n        let mut prefix_count = vec![vec![0; 26]; n + 1];\n\n        for (i, c) in s.chars().enumerate() {\n            prefix_count[i + 1] = prefix_count[i].clone();\n            prefix_count[i + 1][(c as usize) - ('a' as usize)] += 1;\n        }\n\n        queries.into_iter().map(|query| {\n            let (ai, bi, ci, di) = (query[0] as usize, query[1] as usize, query[2] as usize, query[3] as usize);\n            let mut odd_count = 0;\n\n            for j in 0..26 {\n                let count = prefix_count[bi + 1][j] - prefix_count[ai][j] +\n                            prefix_count[di + 1][j] - prefix_count[ci][j];\n                if count % 2 != 0 {\n                    odd_count += 1;\n                }\n            }\n\n            odd_count <= 2\n        }).collect()\n    }\n}"
}