{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21768000,
    "question_id": "3203",
    "elapsed_time": 135,
    "compare_result": "10111111110111111111110000000000011011010001111110110110000100010000000000000110100010110000000000000011111111110100100000000000000001111111100100100010000000000000000000001111111011100010000000000000000001000000000000001111111100000010000000000001000000000001111111111100000000000000000001111111100000000000000000000000111100000000001000000000000000000000000000000000000001000000000000000000000000000000000000000000000011000000000100000000000000000000000111000000000000000000000000000001000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110110010000000000000000000000000000000100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708974924979,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 134,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1187046019",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn can_make_palindrome_queries(s: String, queries: Vec<Vec<i32>>) -> Vec<bool> {\n        let n = s.len();\n        let mut prefix_count = vec![vec![0; 26]; n + 1];\n\n        for (i, c) in s.chars().enumerate() {\n            prefix_count[i + 1] = prefix_count[i].clone();\n            prefix_count[i + 1][(c as usize) - ('a' as usize)] += 1;\n        }\n\n        queries.into_iter().map(|query| {\n            let (ai, bi, ci, di) = (query[0] as usize, query[1] as usize, query[2] as usize, query[3] as usize);\n            let mut left_count = vec![0; 26];\n            let mut right_count = vec![0; 26];\n\n            for i in 0..26 {\n                left_count[i] = prefix_count[bi + 1][i] - prefix_count[ai][i];\n                right_count[i] = prefix_count[di + 1][i] - prefix_count[ci][i];\n            }\n\n            let mut mismatches = 0;\n            for i in 0..26 {\n                mismatches += (left_count[i] as i32 - right_count[i] as i32).abs();\n            }\n\n            mismatches / 2 <= (bi - ai + 1) as i32 + (di - ci + 1) as i32 - mismatches\n        }).collect()\n    }\n}"
}