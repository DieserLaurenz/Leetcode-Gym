{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 316584000,
    "question_id": "3203",
    "elapsed_time": 5829,
    "compare_result": "00011111110110111011010011111111111111101111111110110010000010000000011101111110100010000010100011111111111111110100100000000000001111111111100100000000010000000011101110111111111011100000000000000000000000000001110000011111111100000000000000000000000011111101111111111100000000000000100111111111100000000000001010100101111100000000000000000000000000000000001100000001100111000000000100100100010001100000000000000010011011000001000100000110000000000000000111000000000101010000000010010111000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110110010111111111111111110111111111111000000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708975438955,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 229,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1187052429",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec can_make_palindrome_queries(s :: String.t, queries :: [[integer]]) :: [boolean]\n  def can_make_palindrome_queries(s, queries) do\n    queries\n    |> Enum.map(&can_make_palindrome_query?(s, &1))\n  end\n\n  defp can_make_palindrome_query?(s, [ai, bi, ci, di]) do\n    s1 = frequency(String.slice(s, ai..bi))\n    s2 = frequency(String.slice(s, ci..di))\n\n    combined = Map.merge(s1, s2, fn _key, v1, v2 -> v1 + v2 end)\n    odd_count = Enum.count(combined, fn {_k, v} -> rem(v, 2) == 1 end)\n\n    odd_count <= 1\n  end\n\n  defp frequency(subs) do\n    subs\n    |> String.graphemes()\n    |> Enum.reduce(%{}, fn g, acc ->\n      Map.update(acc, g, 1, &(&1 + 1))\n    end)\n  end\nend"
}