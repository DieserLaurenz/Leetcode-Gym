{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 12: ** (BadArityError) #Function<0.124927518/2 in Solution.can_form_palindrome?/2> with arity 2 called with 1 argument ({\"b\", 1})",
    "full_runtime_error": "Line 12: ** (BadArityError) #Function<0.124927518/2 in Solution.can_form_palindrome?/2> with arity 2 called with 1 argument ({\"b\", 1})\n    (elixir 1.15.7) lib/enum.ex:1590: anonymous fn/3 in Enum.into/3\n    (elixir 1.15.7) lib/enum.ex:1590: anonymous fn/3 in Enum.into/3\n    (stdlib 5.1.1) maps.erl:416: :maps.fold_1/4\n    solution.ex:12: Solution.can_form_palindrome?/2\n    (elixir 1.15.7) lib/enum.ex:1693: Enum.\"-map/2-lists^map/1-1-\"/2\n    solution.ex:45: Driver.consume_test_cases/2\n    solution.ex:31: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75964000,
    "question_id": "3203",
    "elapsed_time": 530,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708975355809,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1187051453",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec can_make_palindrome_queries(s :: String.t, queries :: [[integer]]) :: [boolean]\n  def can_make_palindrome_queries(s, queries) do\n    queries\n    |> Enum.map(fn [ai, bi, ci, di] ->\n      {left, right} = {String.slice(s, ai..bi), String.slice(s, ci..di)}\n      can_form_palindrome?(left, right)\n    end)\n  end\n\n  defp can_form_palindrome?(left, right) do\n    combined_freqs = frequency(left) |> Enum.into(frequency(right), fn {k, v1}, acc ->\n      Map.update(acc, k, v1, &(&1 + v1))\n    end)\n\n    odd_counts = Enum.count(combined_freqs, fn {_k, v} -> rem(v, 2) == 1 end)\n    odd_counts <= 1\n  end\n\n  defp frequency(str) do\n    str\n    |> String.graphemes()\n    |> Enum.reduce(%{}, fn char, acc ->\n      Map.update(acc, char, 1, &(&1 + 1))\n    end)\n  end\nend"
}