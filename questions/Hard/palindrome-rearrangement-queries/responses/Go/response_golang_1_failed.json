{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60112000,
    "question_id": "3203",
    "elapsed_time": 328,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708974486757,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1187040759",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func canMakePalindromeQueries(s string, queries [][]int) []bool {\n    n := len(s)\n    ans := make([]bool, len(queries))\n\n    // Function to check if a palindrome can be formed\n    isPalindromePossible := func(leftFreq, rightFreq [26]int) bool {\n        mismatch := 0\n        for i := 0; i < 26; i++ {\n            // Count how many characters have odd occurrences in total\n            if (leftFreq[i]+rightFreq[i])%2 != 0 {\n                mismatch++\n            }\n        }\n        // A palindrome can have at most one character with an odd count\n        return mismatch <= 2\n    }\n\n    // Precompute frequency of each character up to each position\n    precomputed := make([][26]int, n+1)\n    for i := 0; i < n; i++ {\n        precomputed[i+1] = precomputed[i]\n        precomputed[i+1][s[i]-'a']++\n    }\n\n    for i, q := range queries {\n        a, b, c, d := q[0], q[1], q[2], q[3]\n\n        var leftFreq, rightFreq [26]int\n        // Calculate frequency of each character in the left and right segments\n        for j := 0; j < 26; j++ {\n            leftFreq[j] = precomputed[b+1][j] - precomputed[a][j]\n            rightFreq[j] = precomputed[d+1][j] - precomputed[c][j]\n        }\n\n        // Check if it's possible to form a palindrome\n        ans[i] = isPalindromePossible(leftFreq, rightFreq)\n    }\n    return ans\n}"
}