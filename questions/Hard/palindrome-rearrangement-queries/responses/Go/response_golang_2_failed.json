{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20720000,
    "question_id": "3203",
    "elapsed_time": 3011,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708974521805,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1187041164",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func canMakePalindromeQueries(s string, queries [][]int) []bool {\n    results := make([]bool, len(queries))\n    for i, q := range queries {\n        ai, bi, ci, di := q[0], q[1], q[2], q[3]\n        count := make(map[rune]int)\n        for _, c := range s[ai : bi+1] {\n            count[c]++\n        }\n        for _, c := range s[ci : di+1] {\n            count[c]++\n        }\n        oddCount := 0\n        for _, v := range count {\n            if v%2 != 0 {\n                oddCount++\n            }\n        }\n        results[i] = oddCount <= 2\n    }\n    return results\n}"
}