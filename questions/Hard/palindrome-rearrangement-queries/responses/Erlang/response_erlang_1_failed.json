{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 305120000,
    "question_id": "3203",
    "elapsed_time": 4967,
    "compare_result": "00111111111110111111100010101011011011001001111110110111000000010000000000110110101010000000000000010011111111010000100000000010000001111111011100100000000000000000100000001111111011111000000000000000000000000000000000001111111100100010000000000000000001000001111111111111000000000000000001111111100000000000000000000000111110100000000000000000000000000000000010000000000011100000000000000000010000011001000000000000000011100000000100000000010000000000000111000000000000000000000000000001000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010000000000000000000000000000000100000",
    "code_output": "[true,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708975250326,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 149,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1187050015",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec can_make_palindrome_queries(S :: unicode:unicode_binary(), Queries :: [[integer()]]) -> [boolean()].\ncan_make_palindrome_queries(S, Queries) ->\n    lists:map(fun([Ai, Bi, Ci, Di]) ->\n                  {LeftPart, RightPart} = {binary:part(S, {Ai, Bi - Ai + 1}), binary:part(S, {Ci, Di - Ci + 1})},\n                  LeftFreq = frequency(binary:bin_to_list(LeftPart)),\n                  RightFreq = frequency(binary:bin_to_list(RightPart)),\n                  FreqDiff = maps:fold(fun(Char, Count, Acc) -> maps:update_with(Char, fun(C) -> C - Count end, -Count, Acc) end, LeftFreq, RightFreq),\n                  OddCounts = maps:fold(fun(_, C, Acc) -> Acc + if C rem 2 == 1 -> 1; true -> 0 end end, 0, FreqDiff),\n                  OddCounts =< 1\n              end, Queries).\n\nfrequency(List) ->\n    lists:foldl(fun(Char, Acc) -> maps:update_with(Char, fun(Count) -> Count + 1 end, 1, Acc) end, #{}, List)."
}