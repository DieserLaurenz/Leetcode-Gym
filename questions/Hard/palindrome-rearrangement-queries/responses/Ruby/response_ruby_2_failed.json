{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 360532000,
    "question_id": "3203",
    "elapsed_time": 1356,
    "compare_result": "00011111110110111011010011111111111111101111111110110010000010000000011101111110100010000010100011111111111111110100100000000000001111111111100100000000010000000011101110111111111011100000000000000000000000000001110000011111111100000000000000000000000011111101111111111100000000000000100111111111100000000000001010100101111100000000000000000000000000000000001100000001100111000000000100100100010001100000000000000010011011000001000100000110000000000000000111000000000101010000000010010111000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110110010111111111111111110111111111111100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708974670084,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 230,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1187042846",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} s\n# @param {Integer[][]} queries\n# @return {Boolean[]}\ndef can_make_palindrome_queries(s, queries)\n    n = s.length / 2\n    freq = Array.new(s.length + 1) { Array.new(26, 0) }\n  \n    # Calculate frequency of each character up to each point in the string\n    (1..s.length).each do |i|\n        freq[i] = freq[i - 1].dup\n        freq[i][s[i - 1].ord - 'a'.ord] += 1\n    end\n  \n    queries.map do |(ai, bi, ci, di)|\n        # Count the odd frequencies in the combined range to check if they can form a palindrome\n        odd_count = 0\n        (0..25).each do |i|\n            left = freq[bi + 1][i] - freq[ai][i]\n            right = freq[di + 1][i] - freq[ci][i]\n            odd_count += 1 if (left + right).odd?\n        end\n        odd_count <= 1\n    end\nend"
}