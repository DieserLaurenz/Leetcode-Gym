{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 135484000,
    "question_id": "3203",
    "elapsed_time": 5017,
    "compare_result": "00111111111110111111100010101011011011001001111110110111000000010000000001110110101010000000001000011011111111010000100000000010000001111111011100100000000000000000100000001111111011111000000000000000000000000000000000001111111100100010000000000000000001100101111111111111000000000000000001111111100000000000000000000000111110100000000000000000000000000000000010000000000011100000000000000000010000011001000000000000000011100000000100000000010000000000000111000000000000000000000000000001000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010000101000001010000100010111011100000",
    "code_output": "[true,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708975145074,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 165,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187048659",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (can-make-palindrome-queries s queries)\n  (-> string? (listof (listof exact-integer?)) (listof boolean?))\n\n  ; Function to count characters in a substring and return a hash table of counts\n  (define (char-count s start end)\n    (foldl (lambda (char count-map)\n             (dict-update count-map char (lambda (v) (if v (+ v 1) 1)) 0))\n           (make-immutable-hash)\n           (string->list (substring s start (+ end 1)))))\n\n  ; Function to merge two hash tables of character counts and check if they can form a palindrome\n  (define (can-form-palindrome left-counts right-counts)\n    (let* ((total-counts (foldl (lambda (key value acc)\n                                  (dict-update acc key (lambda (v) (+ v value)) value))\n                                left-counts\n                                (hash-keys right-counts)\n                                (hash-values right-counts)))\n           (odd-count (foldl (lambda (count acc) (if (odd? count) (+ acc 1) acc))\n                             0\n                             (hash-values total-counts))))\n      (<= odd-count 1)))\n\n  ; Main function logic to process each query\n  (map (lambda (query)\n         (let* ((ai (list-ref query 0))\n                (bi (list-ref query 1))\n                (ci (list-ref query 2))\n                (di (list-ref query 3))\n                (left-counts (char-count s ai bi))\n                (right-counts (char-count s ci di)))\n           (can-form-palindrome left-counts right-counts)))\n       queries))"
}