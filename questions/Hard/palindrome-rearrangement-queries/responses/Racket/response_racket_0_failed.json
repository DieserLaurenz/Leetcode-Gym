{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "foldl: contract violation",
    "full_runtime_error": "foldl: contract violation\n  expected: list?\n  given: \"b\"\n  argument position: 3rd\n  other arguments...:\n   #<procedure:...338solution.rkt:5:11>\n   '#hash()\n  context...:\n   /usr/share/racket/collects/racket/private/list.rkt:223:2: check-fold\n   /usr/share/racket/collects/racket/private/list.rkt:248:4: foldl\n   solution.rkt:20:7\n   .../private/map.rkt:40:19: loop\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:33:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100100000,
    "question_id": "3203",
    "elapsed_time": 243,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708975037779,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187047338",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (can-make-palindrome-queries s queries)\n  (-> string? (listof (listof exact-integer?)) (listof boolean?))\n  \n  (define (char-count s start end)\n    (foldl (lambda (char count-map)\n             (dict-update count-map char (lambda (v) (if v (+ v 1) 1)) 0))\n           (make-immutable-hash)\n           (substring s start (+ end 1))))\n  \n  (define (can-make-palindrome a-counts b-counts)\n    (let* ((combined-counts (foldl (lambda (char count)\n                                     (dict-update count char (lambda (v) (+ v 1)) 0))\n                                   a-counts\n                                   (hash-keys b-counts)))\n           (odd-counts (foldl (lambda (count acc) (if (odd? count) (+ acc 1) acc))\n                              0\n                              (hash-values combined-counts))))\n      (<= odd-counts 1)))\n  \n  (map (lambda (query)\n         (let* ((ai (list-ref query 0))\n                (bi (list-ref query 1))\n                (ci (list-ref query 2))\n                (di (list-ref query 3))\n                (a-counts (char-count s ai bi))\n                (b-counts (char-count s ci di)))\n           (can-make-palindrome a-counts b-counts)))\n       queries))"
}