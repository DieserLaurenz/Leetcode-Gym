{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 143004000,
    "question_id": "3203",
    "elapsed_time": 5015,
    "compare_result": "00011111110110111011010011111111111111101111111110110010000010000000011101111110100010000010100011111111111111110100100000000000001111111111100100000000010000000011101110111111111011100000000000000000000000000001110000011111111100000000000000000000000011111101111111111100000000000000100111111111100000000000001010100101111100000000000000000000000000000000001100000001100111000000000100100100010001100000000000000010011011000001000100000110000000000000000111000000000101010000000010010111000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110110010111111111111111110111111111111100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708975083020,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 230,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187047877",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (can-make-palindrome-queries s queries)\n  (-> string? (listof (listof exact-integer?)) (listof boolean?))\n\n  (define (char-count s start end)\n    (foldl (lambda (char count-map)\n             (dict-update count-map char (lambda (v) (if v (+ v 1) 1)) 0))\n           (make-immutable-hash)\n           (string->list (substring s start (+ end 1)))))\n  \n  (define (can-make-palindrome a-counts b-counts)\n    (let* ((combined-counts (foldl (lambda (key value acc)\n                                     (dict-update acc key (lambda (v) (if v (+ v value) value)) 0))\n                                   a-counts\n                                   (hash-keys b-counts)\n                                   (hash-values b-counts)))\n           (odd-counts (foldl (lambda (count acc) (if (odd? count) (+ acc 1) acc))\n                              0\n                              (hash-values combined-counts))))\n      (<= odd-counts 1)))\n  \n  (map (lambda (query)\n         (let* ((ai (list-ref query 0))\n                (bi (list-ref query 1))\n                (ci (list-ref query 2))\n                (di (list-ref query 3))\n                (a-counts (char-count s ai bi))\n                (b-counts (char-count s ci di)))\n           (can-make-palindrome a-counts b-counts)))\n       queries))"
}