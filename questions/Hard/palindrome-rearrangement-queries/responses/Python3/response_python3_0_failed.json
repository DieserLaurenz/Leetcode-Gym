{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 104452000,
    "question_id": "3203",
    "elapsed_time": 1673,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708964355433,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186893748",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n        def can_form_palindrome(counts):\n            odd_count = sum(count % 2 for count in counts.values())\n            return odd_count <= 2\n\n        # Calculate prefix sums for character frequencies\n        prefix_sums = [{}]\n        current_count = {}\n        for char in s:\n            current_count[char] = current_count.get(char, 0) + 1\n            prefix_sums.append(current_count.copy())\n\n        result = []\n        for a, b, c, d in queries:\n            left_counts = {char: prefix_sums[b + 1].get(char, 0) - prefix_sums[a].get(char, 0) for char in prefix_sums[b + 1]}\n            right_counts = {char: prefix_sums[d + 1].get(char, 0) - prefix_sums[c].get(char, 0) for char in prefix_sums[d + 1]}\n\n            # Combine counts\n            for char in right_counts:\n                if char in left_counts:\n                    left_counts[char] += right_counts[char]\n                else:\n                    left_counts[char] = right_counts[char]\n\n            result.append(can_form_palindrome(left_counts))\n\n        return result"
}