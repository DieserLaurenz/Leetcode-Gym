{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 104452000,
    "question_id": "3203",
    "elapsed_time": 1620,
    "compare_result": "10111111011111111111100000100101011011101111111110110101000100000000010000111110101011110000000000111011111111010000100000000000000011111111011100100010100000000000100110101111111011111010010000000000000000000100000000001111111100100010000000000000000000010101111111111111000000000000000001111111100000000000000000000100111110100000001000000000000000000000000110000000100011100000000000100110000000011001001000000000000011100000000100000000010000000000000111000000000000000000000000010101000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708964440093,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 201,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186895095",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n        def is_palindrome_possible(freq1, freq2):\n            diff = 0\n            for ch in set(freq1.keys()) | set(freq2.keys()):\n                diff += abs(freq1.get(ch, 0) - freq2.get(ch, 0))\n            return diff // 2 <= 1\n\n        n = len(s)\n        prefix_freq = [{} for _ in range(n+1)]\n\n        for i in range(1, n+1):\n            prefix_freq[i] = prefix_freq[i-1].copy()\n            prefix_freq[i][s[i-1]] = prefix_freq[i].get(s[i-1], 0) + 1\n\n        result = []\n        for a, b, c, d in queries:\n            freq1 = {ch: prefix_freq[b+1].get(ch, 0) - prefix_freq[a].get(ch, 0) for ch in prefix_freq[b+1].keys()}\n            freq2 = {ch: prefix_freq[d+1].get(ch, 0) - prefix_freq[c].get(ch, 0) for ch in prefix_freq[d+1].keys()}\n            result.append(is_palindrome_possible(freq1, freq2))\n\n        return result"
}