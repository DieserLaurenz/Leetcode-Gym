{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 121868000,
    "question_id": "3203",
    "elapsed_time": 2749,
    "compare_result": "10111111011111111111100000000000000000010000111110110101000100010000000000000110101011110000000000000011111111010000100000000000000001111111011100100010100000000000000000001111111011111010010000000000000000000000000000001111111100100010000000000001000000000001111111111111000000000000000001111111100000000000000000000000111110100000001000000000000000000000000010000000000001100000000000000010000000011001001000000000000011100000000100000000010000000000000111000000000000000000000000000001000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000000010000000000000000000000000000000100010",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708964406999,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 139,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186894595",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def canMakePalindromeQueries(self, s: str, queries: List[List[int]]) -> List[bool]:\n        n = len(s)\n        # Calculate prefix sums for character frequencies for both halves\n        prefix = [[0] * 26 for _ in range(n // 2 + 1)]\n        suffix = [[0] * 26 for _ in range(n // 2 + 1)]\n        \n        for i in range(1, n // 2 + 1):\n            char_index = ord(s[i - 1]) - ord('a')\n            for j in range(26):\n                prefix[i][j] = prefix[i - 1][j] + (1 if j == char_index else 0)\n                \n        for i in range(n - 1, n // 2 - 1, -1):\n            char_index = ord(s[i]) - ord('a')\n            for j in range(26):\n                suffix[n - i][j] = suffix[n - i - 1][j] + (1 if j == char_index else 0)\n                \n        ans = []\n        for a, b, c, d in queries:\n            left_odd = 0\n            right_odd = 0\n            for i in range(26):\n                left_count = prefix[b + 1][i] - prefix[a][i]\n                right_count = suffix[d - n // 2 + 1][i] - suffix[c - n // 2][i]\n                left_odd += left_count % 2\n                right_odd += right_count % 2\n            ans.append(left_odd // 2 + right_odd // 2 <= (b - a + 1) // 2 + (d - c + 1) // 2)\n        return ans"
}