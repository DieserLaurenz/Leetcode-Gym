{
    "status_code": 15,
    "lang": "kotlin",
    "run_success": false,
    "runtime_error": "Line 15: Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 9",
    "full_runtime_error": "Line 15: Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 9",
    "status_runtime": "N/A",
    "memory": 26856000,
    "question_id": "3203",
    "elapsed_time": 59,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708966071734,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1186913929",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun canMakePalindromeQueries(s: String, queries: Array<IntArray>): BooleanArray {\n        val n = s.length\n        val half = n / 2\n        val preSum = Array(n + 1) { IntArray(26) }\n        for (i in 1..n) {\n            preSum[i] = preSum[i - 1].clone()\n            ++preSum[i][s[i - 1] - 'a']\n        }\n\n        fun canFormPalindrome(a: Int, b: Int, c: Int, d: Int): Boolean {\n            var oddCount = 0\n            for (i in 0..25) {\n                val left = preSum[b + 1][i] - preSum[a][i]\n                val right = preSum[d + 1][i] - preSum[c][i]\n                if ((left + right) % 2 != 0) oddCount++\n            }\n            return oddCount / 2 <= ((b - a + 1) + (d - c + 1)) % 2\n        }\n\n        return BooleanArray(queries.size) { i ->\n            val (a, b, c, d) = queries[i]\n            canFormPalindrome(a, b, c + half, d + half)\n        }\n    }\n}"
}