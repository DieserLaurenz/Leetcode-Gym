{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 117076000,
    "question_id": "3203",
    "elapsed_time": 1144,
    "compare_result": "01011010101000100000001011111111111111101111111110000000000010101000110101111110000010000011110111111111111001000000100000000001000111111101000000000011010000010011101110111111111011000000000000000000000000000000101010011111111100000000001000000010000011111101111110010000000000000000110111111111000000000000011010100111111100000000000000000000000000000000111100000011000111000000000101101100010010000000000000000110001011000000000100000110000000010000000110000000000100000000000010011111000000001000010100111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001110001100111111111111111110111111111111100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708966030805,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 221,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1186913304",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun canMakePalindromeQueries(s: String, queries: Array<IntArray>): BooleanArray {\n        // Function to count odd occurrences\n        fun countOdds(counts: Array<IntArray>, start: Int, end: Int): Int {\n            var odds = 0\n            for (i in 0 until 26) {\n                if ((counts[end + 1][i] - counts[start][i]) % 2 != 0) odds++\n            }\n            return odds\n        }\n\n        val n = s.length\n        val counts = Array(n / 2 + 1) { IntArray(26) } // Prefix sums for character counts\n        for (i in 1..n / 2) {\n            for (j in 0 until 26) {\n                counts[i][j] = counts[i - 1][j] + if (s[i - 1] - 'a' == j) 1 else 0\n            }\n        }\n\n        val result = BooleanArray(queries.size)\n        queries.forEachIndexed { index, query ->\n            val (ai, bi, ci, di) = query\n            val leftOdds = countOdds(counts, ai, bi)\n            val rightOdds = countOdds(counts, ci - n / 2, di - n / 2)\n            result[index] = leftOdds <= 1 && rightOdds <= 1 // Can be palindrome if odd counts are less than or equal to 1\n        }\n        return result\n    }\n}"
}