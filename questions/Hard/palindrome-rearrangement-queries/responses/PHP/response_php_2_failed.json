{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 136680000,
    "question_id": "3203",
    "elapsed_time": 1443,
    "compare_result": "10111111011111111111100000000000000000010000111110110101000100010000000000000110101011110000000000000011111111010000100000000000000001111111011100100010100000000000000000001111111011111010010000000000000000000000000000001111111100100010000000000001000000000001111111111111000000000000000001111111100000000000000000000000111110100000001000000000000000000000000010000000000001100000000000000010000000011001001000000000000011100000000100000000010000000000000111000000000000000000000000000001000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000000010000000000000000000000000000000100010",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708965750689,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 139,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1186908939",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function canMakePalindromeQueries($s, $queries) {\n        $answers = [];\n        $n = strlen($s);\n        $prefix = array_fill(0, $n + 1, array_fill(0, 26, 0));\n\n        for ($i = 0; $i < $n; ++$i) {\n            for ($j = 0; $j < 26; ++$j) {\n                $prefix[$i + 1][$j] = $prefix[$i][$j];\n            }\n            ++$prefix[$i + 1][ord($s[$i]) - ord('a')];\n        }\n\n        foreach ($queries as $query) {\n            [$a, $b, $c, $d] = $query;\n            $oddCnt = 0;\n            for ($i = 0; $i < 26; ++$i) {\n                $oddCnt += ($prefix[$b + 1][$i] - $prefix[$a][$i] + $prefix[$d + 1][$i] - $prefix[$c][$i]) % 2;\n            }\n            $answers[] = $oddCnt / 2 <= ($b - $a + 1) / 2 + ($d - $c + 1) / 2;\n        }\n\n        return $answers;\n    }\n}"
}