{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72812000,
    "question_id": "3203",
    "elapsed_time": 5550,
    "compare_result": "00011111110110111011010011111111111111101111111110110010000010000000011101111110100010000010100011111111111111110100100000000000001111111111100100000000010000000011101110111111111011100000000000000000000000000001110000011111111100000000000000000000000011111101111111111100000000000000100111111111100000000000001010100101111100000000000000000000000000000000001100000001100111000000000100100100010001100000000000000010011011000001000100000110000000000000000111000000000101010000000010010111000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110110010111111111111111110111111111111100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708965656293,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 230,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1186907328",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer[][] $queries\n     * @return Boolean[]\n     */\n    function canMakePalindromeQueries($s, $queries) {\n        $answers = [];\n        foreach ($queries as $query) {\n            [$a, $b, $c, $d] = $query;\n            $freq = array_fill(0, 26, 0);\n            \n            for ($i = $a; $i <= $b; $i++) {\n                $freq[ord($s[$i]) - ord('a')]++;\n            }\n            for ($i = $c; $i <= $d; $i++) {\n                $freq[ord($s[$i]) - ord('a')]++;\n            }\n            \n            $oddCount = 0;\n            foreach ($freq as $count) {\n                if ($count % 2 != 0) {\n                    $oddCount++;\n                }\n            }\n            \n            // Since we're operating on two halves of the string separately,\n            // if there is more than 1 odd character count, it's not possible to form a palindrome.\n            $answers[] = $oddCount <= 1;\n        }\n        return $answers;\n    }\n}"
}