{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41496000,
    "question_id": "3203",
    "elapsed_time": 1009,
    "compare_result": "10100111010101111111110000011000110101000101000000110000110000111001000000000000100000110000000000000000000111010000100000000000000100000011000110100010000000000000000000000000000011100010000000000000000000000000000000000000000000000010000000000100000000000000000001111100000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000101110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111001111100000000000000001000000000000000001001",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708965926327,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 725,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1186911662",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func canMakePalindromeQueries(_ s: String, _ queries: [[Int]]) -> [Bool] {\n        let n = s.count\n        let sArray = Array(s)\n        var prefixSum = Array(repeating: Array(repeating: 0, count: 26), count: n / 2 + 1)\n\n        for i in 0..<(n / 2) {\n            let c1 = Int(sArray[i].asciiValue! - Character(\"a\").asciiValue!)\n            let c2 = Int(sArray[n - 1 - i].asciiValue! - Character(\"a\").asciiValue!)\n            for j in 0..<26 {\n                prefixSum[i + 1][j] = prefixSum[i][j] + (j == c1 ? 1 : 0) + (j == c2 ? 1 : 0)\n            }\n        }\n\n        return queries.map { query -> Bool in\n            let (ai, bi, ci, di) = (query[0], query[1], query[2], query[3])\n            var diff = 0\n            for j in 0..<26 {\n                let left = prefixSum[bi + 1][j] - prefixSum[ai][j]\n                let right = prefixSum[n / 2][j] - prefixSum[di + 1 - n / 2][j] + prefixSum[ci - n / 2][j]\n                diff += abs(left - right)\n            }\n            return diff / 2 <= (bi - ai + 1) / 2 + (di - ci + 1) / 2\n        }\n    }\n}"
}