{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54088000,
    "question_id": "3203",
    "elapsed_time": 1124,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708965885586,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1186910998",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func canMakePalindromeQueries(_ s: String, _ queries: [[Int]]) -> [Bool] {\n        let sArray = Array(s)\n        var prefixSum = Array(repeating: Array(repeating: 0, count: 26), count: s.count + 1)\n\n        for i in 0..<s.count {\n            let c = Int(sArray[i].asciiValue! - Character(\"a\").asciiValue!)\n            for j in 0..<26 {\n                prefixSum[i + 1][j] = prefixSum[i][j] + (j == c ? 1 : 0)\n            }\n        }\n\n        return queries.map { query -> Bool in\n            let (ai, bi, ci, di) = (query[0], query[1], query[2], query[3])\n            var oddCount = 0\n            for j in 0..<26 {\n                let left = prefixSum[bi + 1][j] - prefixSum[ai][j]\n                let right = prefixSum[di + 1][j] - prefixSum[ci][j]\n                oddCount += (left % 2) ^ (right % 2)\n            }\n            return oddCount <= 2\n        }\n    }\n}"
}