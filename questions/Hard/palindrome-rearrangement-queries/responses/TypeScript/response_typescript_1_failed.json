{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 125364000,
    "question_id": "3203",
    "elapsed_time": 572,
    "compare_result": "00111011110010111010110010100001011011010001111110000010100001100001100010000110010110000000000100000011111000000110100100000000000011111100000000000000000000000000000000001111111000000101000000000000000000000000000000001111111100000000000000000000010100000001111110000000000000000000000001111111000001000000000000000000111100000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000011000000000100000000000000000000000110000000000000000000000000000001000000000000000000011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101110111000000000000000000000000000000000100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708965525592,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 114,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1186905749",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function canMakePalindromeQueries(s: string, queries: number[][]): boolean[] {\n    const n = s.length;\n    const prefixCounts = new Array(n + 1).fill(0).map(() => new Array(26).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < 26; j++) {\n            prefixCounts[i + 1][j] = prefixCounts[i][j] + (s[i].charCodeAt(0) - 'a'.charCodeAt(0) === j ? 1 : 0);\n        }\n    }\n\n    return queries.map(([ai, bi, ci, di]) => {\n        let changes = 0;\n        for (let i = 0; i < 26; i++) {\n            const left = prefixCounts[bi + 1][i] - prefixCounts[ai][i];\n            const right = prefixCounts[di + 1][i] - prefixCounts[ci][i];\n            changes += (left + right) % 2;\n        }\n        return changes / 2 <= Math.min(bi - ai, di - ci);\n    });\n}"
}