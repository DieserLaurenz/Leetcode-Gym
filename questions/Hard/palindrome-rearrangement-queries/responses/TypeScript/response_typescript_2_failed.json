{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 90816000,
    "question_id": "3203",
    "elapsed_time": 425,
    "compare_result": "10111111011111111111100000101001000011111110111110110101000100110000000001001110101011110000000000001011111111010000100000000010000011111111011100100010100000000010001010001111111011111010010000000000000000000000000000011111111100100010000000000001000000010001111111111111000000000000000001111111100000000000000000000100111110100000001000000000000000000000000010000000000001100000000000000010000000011001000000000000001011100000000100000000010000000000000111000000000000010000000000000011000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000100010101111111111111110111111111111100010",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708965582955,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 191,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1186906270",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function canMakePalindromeQueries(s: string, queries: number[][]): boolean[] {\n    const n = s.length;\n    const half = n / 2;\n    const prefixSum = Array.from({ length: half + 1 }, () => new Array(26).fill(0));\n\n    for (let i = 0; i < half; i++) {\n        for (let j = 0; j < 26; j++) {\n            prefixSum[i + 1][j] = prefixSum[i][j] + (s.charCodeAt(i) - 97 === j ? 1 : 0);\n            if (i + half < n) {\n                prefixSum[i + 1][j] += (s.charCodeAt(i + half) - 97 === j ? 1 : 0);\n            }\n        }\n    }\n\n    return queries.map(([ai, bi, ci, di]) => {\n        let diff = 0;\n        for (let i = 0; i < 26; i++) {\n            const countLeft = prefixSum[bi + 1][i] - prefixSum[ai][i];\n            const countRight = prefixSum[di + 1 - half][i] - prefixSum[ci - half][i];\n            diff += ((countLeft - countRight) % 2 !== 0) ? 1 : 0;\n        }\n        return diff <= 2;\n    });\n}"
}