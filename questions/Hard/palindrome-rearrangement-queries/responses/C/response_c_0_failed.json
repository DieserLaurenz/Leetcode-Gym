{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 46444000,
    "question_id": "3203",
    "elapsed_time": 410,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708964514520,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1186896273",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n#include <stdlib.h>\n#include <string.h>\n\nbool* canMakePalindromeQueries(char* s, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    *returnSize = queriesSize;\n    bool* result = (bool*)malloc(queriesSize * sizeof(bool));\n    int n = strlen(s) / 2;\n    int prefixSum[2][n + 1][26];\n    memset(prefixSum, 0, sizeof(prefixSum));\n\n    // Build prefix sum array for character frequencies in both halves\n    for (int i = 0; i < 2 * n; i++) {\n        int half = i >= n ? 1 : 0;\n        int index = half ? i - n : i;\n        for (int j = 0; j < 26; j++) {\n            prefixSum[half][index + 1][j] = prefixSum[half][index][j];\n        }\n        prefixSum[half][index + 1][s[i] - 'a']++;\n    }\n\n    for (int i = 0; i < queriesSize; i++) {\n        int ai = queries[i][0], bi = queries[i][1], ci = queries[i][2] - n, di = queries[i][3] - n;\n        int oddCount = 0;\n        for (int j = 0; j < 26; j++) {\n            int freqLeft = prefixSum[0][bi + 1][j] - prefixSum[0][ai][j];\n            int freqRight = prefixSum[1][di + 1][j] - prefixSum[1][ci][j];\n            oddCount += (freqLeft + freqRight) % 2;\n        }\n        result[i] = oddCount <= 2; // At most one character can have an odd count for a palindrome\n    }\n\n    return result;\n}"
}