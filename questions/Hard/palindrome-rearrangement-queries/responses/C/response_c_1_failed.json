{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 46384000,
    "question_id": "3203",
    "elapsed_time": 392,
    "compare_result": "00011111110110111011010011111111111111101111111110110010000010000000011101111110100010000010100011111111111111110100100000000000001111111111100100000000010000000011101110111111111011100000000000000000000000000001110000011111111100000000000000000000000011111101111111111100000000000000100111111111100000000000001010100101111100000000000000000000000000000000001100000001100111000000000100100100010001100000000000000010011011000001000100000110000000000000000111000000000101010000000010010111000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110110010111111111111111110111111111111100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708964565155,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 230,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1186897091",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdbool.h>\n#include <stdlib.h>\n#include <string.h>\n\nbool* canMakePalindromeQueries(char* s, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    *returnSize = queriesSize;\n    bool* result = (bool*)malloc(queriesSize * sizeof(bool));\n    int n = strlen(s);\n    int prefixSum[n + 1][26];\n    memset(prefixSum, 0, sizeof(prefixSum));\n\n    // Build prefix sum array for character frequencies\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < 26; j++) {\n            prefixSum[i + 1][j] = prefixSum[i][j];\n        }\n        prefixSum[i + 1][s[i] - 'a']++;\n    }\n\n    for (int i = 0; i < queriesSize; i++) {\n        int ai = queries[i][0], bi = queries[i][1];\n        int ci = queries[i][2], di = queries[i][3];\n        int oddCount = 0;\n\n        // Count characters with odd frequencies in the first half\n        for (int j = 0; j < 26; j++) {\n            int freqFirstHalf = prefixSum[bi + 1][j] - prefixSum[ai][j];\n            int freqSecondHalf = prefixSum[di + 1][j] - prefixSum[ci][j];\n            oddCount += (freqFirstHalf + freqSecondHalf) % 2;\n        }\n        \n        // Check if the string can be rearranged into a palindrome\n        result[i] = oddCount <= (bi - ai + 1 + di - ci + 1) % 2;\n    }\n\n    return result;\n}"
}