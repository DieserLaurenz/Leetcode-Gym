{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 313460000,
    "question_id": "3203",
    "elapsed_time": 778,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708966234760,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1186916529",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<bool> canMakePalindromeQueries(String s, List<List<int>> queries) {\n    List<bool> result = List<bool>.filled(queries.length, false);\n    int n = s.length;\n    List<List<int>> prefixSum = List.generate(n + 1, (_) => List.filled(26, 0));\n\n    // Calculate prefix sums for character frequencies\n    for (int i = 0; i < n; ++i) {\n      for (int j = 0; j < 26; ++j) {\n        prefixSum[i + 1][j] = prefixSum[i][j];\n      }\n      ++prefixSum[i + 1][s.codeUnitAt(i) - 'a'.codeUnitAt(0)];\n    }\n\n    for (int i = 0; i < queries.length; ++i) {\n      int ai = queries[i][0], bi = queries[i][1], ci = queries[i][2], di = queries[i][3];\n      int oddCount = 0;\n      \n      for (int j = 0; j < 26; ++j) {\n        int charCountFirstHalf = prefixSum[bi + 1][j] - prefixSum[ai][j];\n        int charCountSecondHalf = prefixSum[di + 1][j] - prefixSum[ci][j];\n        oddCount += (charCountFirstHalf + charCountSecondHalf) % 2;\n      }\n\n      result[i] = oddCount <= 2;\n    }\n\n    return result;\n  }\n}"
}