{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 217788000,
    "question_id": "3203",
    "elapsed_time": 5014,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708966175337,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1186915498",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<bool> canMakePalindromeQueries(String s, List<List<int>> queries) {\n    List<bool> result = [];\n    for (var query in queries) {\n      int ai = query[0], bi = query[1], ci = query[2], di = query[3];\n      String firstHalf = s.substring(ai, bi + 1);\n      String secondHalf = s.substring(ci, di + 1);\n      Map<String, int> countMap = {};\n      for (int i = 0; i < firstHalf.length; i++) {\n        countMap[firstHalf[i]] = (countMap[firstHalf[i]] ?? 0) + 1;\n      }\n      for (int i = 0; i < secondHalf.length; i++) {\n        countMap[secondHalf[i]] = (countMap[secondHalf[i]] ?? 0) - 1;\n      }\n      int oddCount = 0;\n      for (var entry in countMap.entries) {\n        if (entry.value.abs() % 2 != 0) oddCount++;\n      }\n      result.add(oddCount <= 2);\n    }\n    return result;\n  }\n}"
}