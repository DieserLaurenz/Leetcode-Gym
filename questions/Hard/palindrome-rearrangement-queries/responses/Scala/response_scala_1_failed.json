{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 114908000,
    "question_id": "3203",
    "elapsed_time": 1650,
    "compare_result": "00111011110010111010110010100001011011010001111110000010100001100001100010000110010110000000000100000011111000000110100100000000000011111100000000000000000000000000000000001111111000000101000000000000000000000000000000001111111100000000000000000000010100000001111110000000000000000000000001111111000001000000000000000000111100000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000011000000000100000000000000000000000110000000000000000000000000000001000000000000000000011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101110111000000000000000000000000000000000100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708974768422,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 114,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1187044043",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def canMakePalindromeQueries(s: String, queries: Array[Array[Int]]): Array[Boolean] = {\n        val n = s.length\n        val prefixCount = Array.ofDim[Int](n + 1, 26)\n        \n        for (i <- 0 until n) {\n            prefixCount(i + 1) = prefixCount(i).clone()\n            prefixCount(i + 1)(s(i) - 'a') += 1\n        }\n        \n        queries.map { case Array(ai, bi, ci, di) =>\n            val mismatch = (0 until 26).count { i =>\n                val left = prefixCount(bi + 1)(i) - prefixCount(ai)(i)\n                val right = prefixCount(di + 1)(i) - prefixCount(ci)(i)\n                left % 2 != right % 2\n            }\n            \n            mismatch <= 2 * ((bi - ai) min (di - ci))\n        }\n    }\n}"
}