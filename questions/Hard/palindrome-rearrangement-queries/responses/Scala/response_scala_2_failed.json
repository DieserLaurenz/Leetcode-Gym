{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 17: java.lang.ArrayIndexOutOfBoundsException: 6 (at $anonfun$canMakePalindromeQueries$4)",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: 6\nLine 17: Solution$.$anonfun$canMakePalindromeQueries$4 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 16: Solution$.$anonfun$canMakePalindromeQueries$3 (solution.scala)\nLine 14: Solution$.$anonfun$canMakePalindromeQueries$3$adapted (solution.scala)\nLine 929: scala.collection.ArrayOps$.map$extension (ArrayOps.scala)\nLine 14: Solution$.canMakePalindromeQueries (solution.scala)\nLine 27: Main$.__helper__ (solution.scala)\nLine 43: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 54464000,
    "question_id": "3203",
    "elapsed_time": 890,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708974817327,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1187044681",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def canMakePalindromeQueries(s: String, queries: Array[Array[Int]]): Array[Boolean] = {\n        val n = s.length\n        val prefixCount = Array.ofDim[Int](n / 2 + 1, 26)\n        \n        for (i <- 0 until n / 2) {\n            for (j <- 0 until 26) {\n                prefixCount(i + 1)(j) = prefixCount(i)(j)\n            }\n            prefixCount(i + 1)(s(i) - 'a') += 1\n            prefixCount(i + 1)(s(n - i - 1) - 'a') -= 1\n        }\n\n        queries.map { case Array(ai, bi, ci, di) =>\n            val countDiffs = new Array[Int](26)\n            for (i <- 0 until 26) {\n                countDiffs(i) = Math.abs(prefixCount(bi + 1)(i) - prefixCount(ai)(i) + prefixCount(di + 1)(i) - prefixCount(ci)(i))\n            }\n            val oddCounts = countDiffs.count(_ % 2 != 0)\n            oddCounts <= 1\n        }\n    }\n}"
}