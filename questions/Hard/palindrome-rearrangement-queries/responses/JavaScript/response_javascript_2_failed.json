{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 108640000,
    "question_id": "3203",
    "elapsed_time": 574,
    "compare_result": "00111111110111111010111000000100010011010101111110110110000100000000000010101110100010010000000000100011111111110100100000000000010101111111100100000000000000000000000000011111111011100000000000000000000000000000000000001111111100000000000000000001000000000001111111111100000000000000000001111111100000000000000000000000111100000000001000000000000000000000000000000000000001000000000000000000000000000000000000000000000011000000000100000000000000000000000111000000000000000000000000000001000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111110110010000000000000000000000000000000100000",
    "code_output": "[false,true]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708965307574,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 133,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1186905048",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "var canMakePalindromeQueries = function(s, queries) {\n    const n = s.length;\n    const prefixCounts = Array.from({ length: n / 2 + 1 }, () => new Array(26).fill(0));\n\n    for (let i = 0; i < n / 2; ++i) {\n        for (let j = 0; j < 26; ++j) {\n            prefixCounts[i + 1][j] = prefixCounts[i][j] + (s.charCodeAt(i) - 'a'.charCodeAt(0) === j ? 1 : 0);\n        }\n    }\n\n    const suffixCounts = Array.from({ length: n / 2 + 1 }, () => new Array(26).fill(0));\n    for (let i = n - 1; i >= n / 2; --i) {\n        for (let j = 0; j < 26; ++j) {\n            suffixCounts[n - i][j] = suffixCounts[n - i - 1][j] + (s.charCodeAt(i) - 'a'.charCodeAt(0) === j ? 1 : 0);\n        }\n    }\n\n    return queries.map(([a, b, c, d]) => {\n        let mismatch = 0;\n        for (let i = 0; i < 26; ++i) {\n            const diff = Math.abs((prefixCounts[b + 1][i] - prefixCounts[a][i]) - (suffixCounts[n - c][i] - suffixCounts[n - d - 1][i]));\n            mismatch += diff;\n        }\n        return mismatch / 2 <= (b - a + 1) / 2;\n    });\n};"
}