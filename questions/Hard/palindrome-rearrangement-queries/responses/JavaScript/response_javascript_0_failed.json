{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 116332000,
    "question_id": "3203",
    "elapsed_time": 551,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708965115324,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1186904490",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "var canMakePalindromeQueries = function(s, queries) {\n    const n = s.length;\n    const prefixCounts = Array.from({ length: n + 1 }, () => new Array(26).fill(0));\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < 26; ++j) {\n            prefixCounts[i + 1][j] = prefixCounts[i][j] + (s.charCodeAt(i) - 'a'.charCodeAt(0) === j ? 1 : 0);\n        }\n    }\n\n    const results = queries.map(([a, b, c, d]) => {\n        const count = new Array(26).fill(0);\n        for (let i = 0; i < 26; ++i) {\n            count[i] = prefixCounts[b + 1][i] - prefixCounts[a][i] + prefixCounts[d + 1][i] - prefixCounts[c][i];\n        }\n        let oddCount = 0;\n        for (let i = 0; i < 26; ++i) {\n            oddCount += count[i] % 2;\n        }\n        return oddCount <= 2;\n    });\n\n    return results;\n};"
}