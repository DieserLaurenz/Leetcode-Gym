{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 155596000,
    "question_id": "3203",
    "elapsed_time": 919,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708964849477,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1186901375",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool[] CanMakePalindromeQueries(string s, int[][] queries) {\n        int n = s.Length;\n        int[][] count = new int[n + 1][];\n        for (int i = 0; i <= n; i++) {\n            count[i] = new int[26];\n            if (i > 0) {\n                for (int j = 0; j < 26; j++) {\n                    count[i][j] = count[i - 1][j] + (s[i - 1] - 'a' == j ? 1 : 0);\n                }\n            }\n        }\n\n        bool[] answer = new bool[queries.Length];\n        for (int i = 0; i < queries.Length; i++) {\n            int a = queries[i][0], b = queries[i][1], c = queries[i][2], d = queries[i][3];\n            int oddCount = 0;\n            for (int j = 0; j < 26; j++) {\n                int charCount = (count[b + 1][j] - count[a][j]) + (count[d + 1][j] - count[c][j]);\n                if (charCount % 2 != 0) oddCount++;\n            }\n            answer[i] = oddCount <= 2;\n        }\n        return answer;\n    }\n}"
}