{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 155724000,
    "question_id": "3203",
    "elapsed_time": 798,
    "compare_result": "00111111011110111011100000101101101010111111111110110101001000000000000000001110101011000000000000100011111111010000100000000000000001111111011100000010100000000000000000001111111011111000000000000000000000000000000000001111111100100010000000000000000000000001111111111111000000000000000001111111100000000000000000000000111110100000001000000000000000000000000010000000000001100000000000000000000000011000000000000000000011100000000100000000010000000000000111000000000000000000000000000001000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011000000010000000000000000000000010000000100010",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708964907880,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 141,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1186902185",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public bool[] CanMakePalindromeQueries(string s, int[][] queries) {\n        int n = s.Length;\n        int[][] prefixCounts = new int[n + 1][];\n        for (int i = 0; i <= n; i++) {\n            prefixCounts[i] = new int[26];\n            if (i > 0) {\n                for (int j = 0; j < 26; j++) {\n                    prefixCounts[i][j] = prefixCounts[i - 1][j] + (s[i - 1] - 'a' == j ? 1 : 0);\n                }\n            }\n        }\n\n        bool[] result = new bool[queries.Length];\n        for (int q = 0; q < queries.Length; q++) {\n            int[] query = queries[q];\n            int ai = query[0], bi = query[1], ci = query[2], di = query[3];\n            int oddCountFirstHalf = 0, oddCountSecondHalf = 0;\n\n            for (int i = 0; i < 26; i++) {\n                int firstHalf = prefixCounts[bi + 1][i] - prefixCounts[ai][i];\n                int secondHalf = prefixCounts[di + 1][i] - prefixCounts[ci][i];\n                \n                // Count odd occurrences in first and second half\n                if (firstHalf % 2 != 0) oddCountFirstHalf++;\n                if (secondHalf % 2 != 0) oddCountSecondHalf++;\n            }\n\n            // To form a palindrome, the odd counts in each half must be equal or differ by at most 1 (for the middle character in an odd-length palindrome)\n            result[q] = Math.Abs(oddCountFirstHalf - oddCountSecondHalf) <= 1;\n        }\n\n        return result;\n    }\n}"
}