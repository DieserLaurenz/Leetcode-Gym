{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71400000,
    "question_id": "3203",
    "elapsed_time": 2847,
    "compare_result": "00011011110010000000011111111111111111101111111110000000000010101011111101111110010010000011110111111111111000000000001000000000001111111100000000000001010000010011101110111111111000000000000000000000000000000001111010011111111100000000001000000010000011111101111110000000000000000000110111111111000000000000001010100111111100000000000000100000000000000000111100000011100111000000000101101100010011100000000000000110011011000001000100000110000000010000000110000000000101010000000010011111000000001000110100011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101110111000111111111111111110111111111111100000",
    "code_output": "[false,false]",
    "std_output": "",
    "last_testcase": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "expected_output": "[true,true]",
    "task_finish_time": 1708964280388,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 232,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186892565",
    "input_formatted": "\"abcabc\", [[1,1,3,5],[0,2,5,5]]",
    "input": "\"abcabc\"\n[[1,1,3,5],[0,2,5,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def canMakePalindromeQueries(self, s, queries):\n        \"\"\"\n        :type s: str\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        # Precompute prefix sums of character frequencies\n        n = len(s)\n        prefix = [[0] * 26 for _ in range(n + 1)]\n        for i in range(n):\n            prefix[i + 1] = prefix[i][:]\n            prefix[i + 1][ord(s[i]) - ord('a')] += 1\n\n        def query(a, b, c, d):\n            # Calculate frequency differences for the query ranges\n            freq = [0] * 26\n            for i in range(26):\n                freq[i] = (prefix[b + 1][i] - prefix[a][i]) - (prefix[d + 1][i] - prefix[c][i])\n            # Count how many characters have odd differences\n            odd = sum(1 for f in freq if f % 2 != 0)\n            # A palindrome can be formed if at most one character has an odd frequency\n            return odd == 0\n\n        return [query(a, b, c, d) for a, b, c, d in queries]"
}