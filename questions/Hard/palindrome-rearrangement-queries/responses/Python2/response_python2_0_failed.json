{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68216000,
    "question_id": "3203",
    "elapsed_time": 3237,
    "compare_result": "10111111111111111111100011100111011011101111111110110110000100010000000101111110101010110000000001111011111111010100100000000000000111111111011100100010000000000000100110111111111011111010010000000000000000000000000100011111111100100010000000000000000001110101111111111111000000000000000011111111100000000000001000000100111110100000001000000000000000000000000110000001100011100000000000000100010000011001000000000010001011100000000100000010010000000000010111000000000000000000000000010101000000000000000000101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011110000010111111111111111110111111111111100000",
    "code_output": "[true]",
    "std_output": "",
    "last_testcase": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "expected_output": "[false]",
    "task_finish_time": 1708964190201,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 220,
    "total_testcases": 1211,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186891183",
    "input_formatted": "\"abbcdecbba\", [[0,2,7,9]]",
    "input": "\"abbcdecbba\"\n[[0,2,7,9]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def canMakePalindromeQueries(self, s, queries):\n        def canBePalindrome(counts):\n            oddCount = sum(c % 2 for c in counts)\n            return oddCount <= 2\n        \n        n = len(s)\n        prefixCounts = [[0] * 26]\n        for c in s:\n            newCount = prefixCounts[-1][:]\n            newCount[ord(c) - ord('a')] += 1\n            prefixCounts.append(newCount)\n        \n        answers = []\n        for a, b, c, d in queries:\n            leftCounts = [prefixCounts[b + 1][i] - prefixCounts[a][i] for i in range(26)]\n            rightCounts = [prefixCounts[d + 1][i] - prefixCounts[c][i] for i in range(26)]\n            combinedCounts = [leftCounts[i] + rightCounts[i] for i in range(26)]\n            answers.append(canBePalindrome(combinedCounts))\n        return answers"
}