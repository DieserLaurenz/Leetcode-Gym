{
    "acRate": 24.719138141205153,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2617",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Number of Visited Cells in a Grid",
    "titleSlug": "minimum-number-of-visited-cells-in-a-grid",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Binary Search",
            "id": "VG9waWNUYWdOb2RlOjEx",
            "slug": "binary-search"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Stack",
            "id": "VG9waWNUYWdOb2RlOjE1",
            "slug": "stack"
        },
        {
            "name": "Union Find",
            "id": "VG9waWNUYWdOb2RlOjIz",
            "slug": "union-find"
        },
        {
            "name": "Binary Indexed Tree",
            "id": "VG9waWNUYWdOb2RlOjI4",
            "slug": "binary-indexed-tree"
        },
        {
            "name": "Segment Tree",
            "id": "VG9waWNUYWdOb2RlOjI5",
            "slug": "segment-tree"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int minimumVisitedCells(vector<vector<int>>& grid) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int minimumVisitedCells(int[][] grid) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minimumVisitedCells(self, grid):         \"\"\"         :type grid: List[List[int]]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minimumVisitedCells(self, grid: List[List[int]]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int minimumVisitedCells(int** grid, int gridSize, int* gridColSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int MinimumVisitedCells(int[][] grid) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} grid  * @return {number}  */ var minimumVisitedCells = function(grid) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minimumVisitedCells(grid: number[][]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $grid      * @return Integer      */     function minimumVisitedCells($grid) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minimumVisitedCells(_ grid: [[Int]]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minimumVisitedCells(grid: Array<IntArray>): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int minimumVisitedCells(List<List<int>> grid) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minimumVisitedCells(grid [][]int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} grid # @return {Integer} def minimum_visited_cells(grid)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minimumVisitedCells(grid: Array[Array[Int]]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn minimum_visited_cells(grid: Vec<Vec<i32>>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (minimum-visited-cells grid)   (-> (listof (listof exact-integer?)) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec minimum_visited_cells(Grid :: [[integer()]]) -> integer(). minimum_visited_cells(Grid) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec minimum_visited_cells(grid :: [[integer]]) :: integer   def minimum_visited_cells(grid) do    end end"
        }
    ],
    "content": "You are given a 0-indexed m x n integer matrix grid. Your initial position is at the top-left cell (0, 0). Starting from the cell (i, j), you can move to one of the following cells:  Cells (i, k) with j < k <= grid[i][j] + j (rightward movement), or Cells (k, j) with i < k <= grid[i][j] + i (downward movement).  Return the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). If there is no valid path, return -1.  Example 1:   Input: grid = [[3,4,2,1],[4,2,3,1],[2,1,0,0],[2,4,0,0]] Output: 4 Explanation: The image above shows one of the paths that visits exactly 4 cells.  Example 2:   Input: grid = [[3,4,2,1],[4,2,1,1],[2,1,1,0],[3,4,1,0]] Output: 3 Explanation: The image above shows one of the paths that visits exactly 3 cells.  Example 3:   Input: grid = [[2,1,0],[1,0,0]] Output: -1 Explanation: It can be proven that no path exists.   Constraints:  m == grid.length n == grid[i].length 1 <= m, n <= 105 1 <= m * n <= 105 0 <= grid[i][j] < m * n grid[m - 1][n - 1] == 0  "
}