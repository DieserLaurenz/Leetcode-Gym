{
    "acRate": 36.71129331881366,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2603",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Collect Coins in a Tree",
    "titleSlug": "collect-coins-in-a-tree",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Tree",
            "id": "VG9waWNUYWdOb2RlOjIw",
            "slug": "tree"
        },
        {
            "name": "Graph",
            "id": "VG9waWNUYWdOb2RlOjI0",
            "slug": "graph"
        },
        {
            "name": "Topological Sort",
            "id": "VG9waWNUYWdOb2RlOjI2",
            "slug": "topological-sort"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int collectTheCoins(vector<int>& coins, vector<vector<int>>& edges) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int collectTheCoins(int[] coins, int[][] edges) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def collectTheCoins(self, coins, edges):         \"\"\"         :type coins: List[int]         :type edges: List[List[int]]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def collectTheCoins(self, coins: List[int], edges: List[List[int]]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int collectTheCoins(int* coins, int coinsSize, int** edges, int edgesSize, int* edgesColSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int CollectTheCoins(int[] coins, int[][] edges) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} coins  * @param {number[][]} edges  * @return {number}  */ var collectTheCoins = function(coins, edges) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function collectTheCoins(coins: number[], edges: number[][]): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $coins      * @param Integer[][] $edges      * @return Integer      */     function collectTheCoins($coins, $edges) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func collectTheCoins(_ coins: [Int], _ edges: [[Int]]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun collectTheCoins(coins: IntArray, edges: Array<IntArray>): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int collectTheCoins(List<int> coins, List<List<int>> edges) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func collectTheCoins(coins []int, edges [][]int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} coins # @param {Integer[][]} edges # @return {Integer} def collect_the_coins(coins, edges)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def collectTheCoins(coins: Array[Int], edges: Array[Array[Int]]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn collect_the_coins(coins: Vec<i32>, edges: Vec<Vec<i32>>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (collect-the-coins coins edges)   (-> (listof exact-integer?) (listof (listof exact-integer?)) exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec collect_the_coins(Coins :: [integer()], Edges :: [[integer()]]) -> integer(). collect_the_coins(Coins, Edges) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec collect_the_coins(coins :: [integer], edges :: [[integer]]) :: integer   def collect_the_coins(coins, edges) do    end end"
        }
    ],
    "content": "There exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. You are given an integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also givenan array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i. Initially, you choose to start at any vertex inthe tree.Then, you can performthe following operations any number of times:  Collect all the coins that are at a distance of at most 2 from the current vertex, or Move to any adjacent vertex in the tree.  Find the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex. Note that if you pass an edge several times, you need to count it into the answer several times.  Example 1:   Input: coins = [1,0,0,0,0,1], edges = [[0,1],[1,2],[2,3],[3,4],[4,5]] Output: 2 Explanation: Start at vertex 2, collect the coin at vertex 0, move to vertex 3, collect the coin at vertex 5 then move back to vertex 2.  Example 2:   Input: coins = [0,0,0,1,1,0,0,1], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[5,6],[5,7]] Output: 2 Explanation: Start at vertex 0, collect the coins at vertices 4 and 3, move to vertex 2,  collect the coin at vertex 7, then move back to vertex 0.   Constraints:  n == coins.length 1 <= n <= 3 * 104 0 <= coins[i] <= 1 edges.length == n - 1 edges[i].length == 2 0 <= ai, bi < n ai != bi edges represents a valid tree.  "
}