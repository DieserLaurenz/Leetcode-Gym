{
    "acRate": 24.247533408267767,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2949",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Count Beautiful Substrings II",
    "titleSlug": "count-beautiful-substrings-ii",
    "topicTags": [
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Number Theory",
            "id": "VG9waWNUYWdOb2RlOjYxMDY3",
            "slug": "number-theory"
        },
        {
            "name": "Prefix Sum",
            "id": "VG9waWNUYWdOb2RlOjYxMDY4",
            "slug": "prefix-sum"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long beautifulSubstrings(string s, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long beautifulSubstrings(String s, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def beautifulSubstrings(self, s, k):         \"\"\"         :type s: str         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def beautifulSubstrings(self, s: str, k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long beautifulSubstrings(char* s, int k) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long BeautifulSubstrings(string s, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @param {number} k  * @return {number}  */ var beautifulSubstrings = function(s, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function beautifulSubstrings(s: string, k: number): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @param Integer $k      * @return Integer      */     function beautifulSubstrings($s, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func beautifulSubstrings(_ s: String, _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun beautifulSubstrings(s: String, k: Int): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int beautifulSubstrings(String s, int k) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func beautifulSubstrings(s string, k int) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @param {Integer} k # @return {Integer} def beautiful_substrings(s, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def beautifulSubstrings(s: String, k: Int): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn beautiful_substrings(s: String, k: i32) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (beautiful-substrings s k)   (-> string? exact-integer? exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec beautiful_substrings(S :: unicode:unicode_binary(), K :: integer()) -> integer(). beautiful_substrings(S, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec beautiful_substrings(s :: String.t, k :: integer) :: integer   def beautiful_substrings(s, k) do        end end"
        }
    ],
    "content": "You are given a string s and a positive integer k. Let vowels and consonants be the number of vowels and consonants in a string. A string is beautiful if:  vowels == consonants. (vowels * consonants) % k == 0, in other terms the multiplication of vowels and consonants is divisible by k.  Return the number of non-empty beautiful substrings in the given string s. A substring is a contiguous sequence of characters in a string. Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'. Consonant letters in English are every letter except vowels.  Example 1:  Input: s = \"baeyh\", k = 2 Output: 2 Explanation: There are 2 beautiful substrings in the given string. - Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"y\",\"h\"]). You can see that string \"aeyh\" is beautiful as vowels == consonants and vowels * consonants % k == 0. - Substring \"baeyh\", vowels = 2 ([\"a\",e\"]), consonants = 2 ([\"b\",\"y\"]). You can see that string \"baey\" is beautiful as vowels == consonants and vowels * consonants % k == 0. It can be shown that there are only 2 beautiful substrings in the given string.  Example 2:  Input: s = \"abba\", k = 1 Output: 3 Explanation: There are 3 beautiful substrings in the given string. - Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). - Substring \"abba\", vowels = 1 ([\"a\"]), consonants = 1 ([\"b\"]). - Substring \"abba\", vowels = 2 ([\"a\",\"a\"]), consonants = 2 ([\"b\",\"b\"]). It can be shown that there are only 3 beautiful substrings in the given string.  Example 3:  Input: s = \"bcdf\", k = 1 Output: 0 Explanation: There are no beautiful substrings in the given string.   Constraints:  1 <= s.length <= 5 * 104 1 <= k <= 1000 s consists of only English lowercase letters.  "
}