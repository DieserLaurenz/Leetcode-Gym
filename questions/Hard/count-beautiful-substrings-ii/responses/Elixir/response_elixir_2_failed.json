{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 10: ** (BadMapError) expected a map, got: []",
    "full_runtime_error": "Line 10: ** (BadMapError) expected a map, got: []\n    solution.ex:10: anonymous fn/3 in Solution.beautiful_substrings/2\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:7: Solution.beautiful_substrings/2\n    solution.ex:47: Driver.consume_test_cases/2\n    solution.ex:33: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 73744000,
    "question_id": "3208",
    "elapsed_time": 407,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"baeyh\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708297863874,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1179267022",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec beautiful_substrings(s :: String.t, k :: integer) :: integer\n  def beautiful_substrings(s, k) do\n    s\n    |> String.graphemes()\n    |> Enum.map(&char_to_tuple/1)\n    |> Enum.reduce({0, %{}}, fn {v, c}, {total, acc} ->\n      acc = Enum.map(acc, fn {key, {vowels, consonants}} ->\n        {key + 1, {vowels + v, consonants + c}}\n      end) |> Map.put(0, {v, c})\n      beautiful_count = Enum.count(acc, fn {_key, {vowels, consonants}} ->\n        vowels == consonants and rem(vowels * consonants, k) == 0\n      end)\n      {total + beautiful_count, acc}\n    end)\n    |> elem(0)\n  end\n\n  defp char_to_tuple(char) do\n    case char do\n      \"a\" -> {1, 0}\n      \"e\" -> {1, 0}\n      \"i\" -> {1, 0}\n      \"o\" -> {1, 0}\n      \"u\" -> {1, 0}\n      _ -> {0, 1}\n    end\n  end\nend"
}