{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 71948000,
    "question_id": "3208",
    "elapsed_time": 6015,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"unrudmeboasiiuefioruvgloaraensiqiaiigoaoayandnoigeopspmaobempyouaauyomuaiiuiiiaaeaaseioaeoyrumxaeokquvojzmelnoehiwruaaowxejvicwezzizgnffiedienerseqyuuozuaszrccnttzzayiosuriedzyeepuoujxetvucgehgbebvauerpmdiiiezoapmjigooegompiyaaizuutzoemiaonaoveuwgimrognefhniujiobsdtcohxroaodovyhenoaltvwamenffiusimpausoiaaaaujpxajtlifosoiksktdauuouobaueiutnjaxqewcarcvhlzvuauuufqhrimurivzkceieuorbfkwphhajrewxcootblncsihsseutveiiiuriadqeuvlxgxuloxriiuanozoqkaeiruaadpimwvahkzypubdujwineiusinnknuutvhdijomygoeeuiiitidfexprxtosyaeinqrwapoaginyerxqunvoueyzxgieimilqfosofuvbodqrfusionbbchpxtiuecaerodimwialeekoeoaigmpduaoeourudoupeluzcgjzqbriuuvqcioauuyiooadesifiivntuiaaofaaewruvcoaaxqeoauooubignuoyoaiy\"\n221",
    "expected_output": "0",
    "task_finish_time": 1708297821960,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 553,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1179266686",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec beautiful_substrings(s :: String.t, k :: integer) :: integer\n  def beautiful_substrings(s, k) do\n    vowels = \"aeiou\"\n    len = String.length(s)\n\n    0..len-1\n    |> Enum.reduce(0, fn i, acc ->\n      acc + Enum.reduce(i..len-1, 0, fn j, acc_inner ->\n        substring = String.slice(s, i, j-i+1)\n        {vowel_count, consonant_count} = count_vowels_and_consonants(substring, vowels)\n        if vowel_count == consonant_count && rem(vowel_count * consonant_count, k) == 0, do: acc_inner + 1, else: acc_inner\n      end)\n    end)\n  end\n\n  defp count_vowels_and_consonants(s, vowels) do\n    String.graphemes(s)\n    |> Enum.reduce({0, 0}, fn c, {v_count, c_count} ->\n      if String.contains?(vowels, c), do: {v_count + 1, c_count}, else: {v_count, c_count + 1}\n    end)\n  end\nend"
}