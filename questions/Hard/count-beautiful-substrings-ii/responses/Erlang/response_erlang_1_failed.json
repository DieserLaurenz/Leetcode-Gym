{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 6: exception error: {badarity,{#Fun<solution.1.97533809>,[1,2,0,0,0]}}",
    "full_runtime_error": "Line 6: exception error: {badarity,{#Fun<solution.1.97533809>,[1,2,0,0,0]}}\n[{solution,'-beautiful_substrings/2-CountBeauties/3-0-',4,\n              [{file,\"solution.erl\"},{line,6}]},\n {solution,'-beautiful_substrings/2-BeautifulCount/2-1-',4,\n              [{file,\"solution.erl\"},{line,24}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,46}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,32}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,63}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 60456000,
    "question_id": "3208",
    "elapsed_time": 1312,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"baeyh\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708297671757,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1179265568",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec beautiful_substrings(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nbeautiful_substrings(S, K) ->\n    Length = byte_size(S),\n    IsVowel = fun(C) -> lists:member(C, [$a, $e, $i, $o, $u]) end,\n    CountBeauties = fun CountBeauties(I, J, Acc) when I =< Length ->\n        CountBeauties(I, J, Acc, 0, 0); \n        CountBeauties(_, _, Acc) -> \n        Acc \n    end,\n    CountSubstr = fun CountSubstr(I, J, Vowels, Consonants) when J =< Length ->\n        Char = binary:at(S, J-1),\n        Vowels1 = Vowels + case IsVowel(Char) of true -> 1; false -> 0 end,\n        Consonants1 = Consonants + case IsVowel(Char) of true -> 0; false -> 1 end,\n        if \n            Vowels1 == Consonants1, (Vowels1 * Consonants1) rem K == 0 -> \n                CountBeauties(I, J+1, 1); \n            true -> \n                CountBeauties(I, J+1, 0) \n        end;\n        CountSubstr(_, _, _, _) -> \n        0 \n    end,\n    BeautifulCount = fun BeautifulCount(I, Acc) when I =< Length ->\n        BeautifulCount(I+1, Acc + CountSubstr(I, I, 0, 0));\n        BeautifulCount(_, Acc) -> \n        Acc \n    end,\n    BeautifulCount(1, 0)."
}