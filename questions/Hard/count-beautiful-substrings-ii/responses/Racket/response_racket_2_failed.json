{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "application: not a procedure;",
    "full_runtime_error": "application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n  context...:\n   solution.rkt:1:0: beautiful-substrings\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:20:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99852000,
    "question_id": "3208",
    "elapsed_time": 243,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"baeyh\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708297566351,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1179264875",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (beautiful-substrings s k)\n  (-> string? exact-integer? exact-integer?)\n  (let ([vowels \"aeiou\"])\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length s))\n          count\n          (let loop-inner ([j (+ i 1)] [count-inner count])\n            (if (> j (string-length s))\n                (loop (+ i 1) count-inner)\n                (let* ([sub (substring s i j)]\n                       [vowel-count (count (lambda (c) (member c vowels)) (string->list sub))]\n                       [consonant-count (- (string-length sub) vowel-count)])\n                  (if (and (= vowel-count consonant-count) (zero? (modulo (* vowel-count consonant-count) k)))\n                      (loop-inner (+ j 1) (+ count-inner 1))\n                      (loop-inner (+ j 1) count-inner)))))))))"
}