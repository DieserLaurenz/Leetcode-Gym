{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "application: not a procedure;",
    "full_runtime_error": "application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n  context...:\n   solution.rkt:1:0: beautiful-substrings\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:17:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100024000,
    "question_id": "3208",
    "elapsed_time": 228,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"baeyh\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708297496175,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1179264384",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (beautiful-substrings s k)\n  (-> string? exact-integer? exact-integer?)\n  (let ([vowels (lambda (c) (member c '(#\\a #\\e #\\i #\\o #\\u)))]\n        [count 0])\n    (for ([i (in-range (string-length s))])\n      (for ([j (in-range (+ i 1) (+ (string-length s) 1))])\n        (let* ([sub (substring s i j)]\n               [v (count vowels sub)]\n               [c (- (string-length sub) v)])\n          (when (and (= v c) (= (modulo (* v c) k) 0))\n            (set! count (+ count 1))))))\n    count))"
}