{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39308000,
    "question_id": "3208",
    "elapsed_time": 5062,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "\"baeyh\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708288305062,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1179187190",
    "input_formatted": "\"baeyh\", 2",
    "input": "\"baeyh\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun beautifulSubstrings(s: String, k: Int): Long {\n        val vowels = \"aeiou\"\n        var beautifulCount = 0L\n        val freq = IntArray(s.length + 1) { 0 }\n\n        for (i in 1..s.length) {\n            freq[i] = freq[i - 1] + if (vowels.contains(s[i - 1])) 1 else -1\n        }\n\n        val countMap = mutableMapOf<Int, Int>()\n\n        for (f in freq) {\n            for (j in -s.length..s.length) {\n                if ((f - j) * (f - j) % k == 0 && countMap.containsKey(j)) {\n                    beautifulCount += countMap[j]!!\n                }\n            }\n            countMap[f] = countMap.getOrDefault(f, 0) + 1\n        }\n\n        return beautifulCount\n    }\n}"
}