{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15564000,
    "question_id": "3208",
    "elapsed_time": 784,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "\"baeyh\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708278981132,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179075252",
    "input_formatted": "\"baeyh\", 2",
    "input": "\"baeyh\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    long long beautifulSubstrings(string s, int k) {\n        long long count = 0;\n        int n = s.length();\n        // Map to store difference between vowels and consonants count and its occurrences\n        std::unordered_map<int, int> diffMap;\n        int diff = 0; // Difference between vowels and consonants\n        diffMap[0] = 1; // Initial condition\n\n        for (int i = 0; i < n; ++i) {\n            // Increment or decrement diff based on whether it's a vowel or consonant\n            diff += (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') ? 1 : -1;\n            \n            for (int j = 0; j*j <= diff * diff; ++j) {\n                // Only check the cases where the product can be divisible by k\n                if (j * (diff - j) % k == 0 || j * (diff + j) % k == 0) {\n                    // Add count of substrings ending at current position with difference j or -j\n                    count += diffMap[j - diff] + diffMap[-j - diff];\n                }\n            }\n            // Increment the count of current difference for future substrings\n            diffMap[diff]++;\n        }\n\n        return count;\n    }\n};"
}