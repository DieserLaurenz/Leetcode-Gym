{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10596000,
    "question_id": "3208",
    "elapsed_time": 4032,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"uzuxpzou\"\n3",
    "expected_output": "1",
    "task_finish_time": 1708279033537,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 259,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179075983",
    "input_formatted": "\"uzuxpzou\", 3",
    "input": "\"uzuxpzou\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <unordered_map>\n#include <vector>\n\nclass Solution {\npublic:\n    long long beautifulSubstrings(string s, int k) {\n        long long result = 0;\n        int n = s.length();\n        std::unordered_map<int, int> count;\n        count[0] = 1; // Base case: diff 0 occurs once before any characters are processed\n        int vowels = 0, consonants = 0;\n\n        for (int i = 0; i < n; ++i) {\n            // Increment vowels or consonants count\n            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n                ++vowels;\n            } else {\n                ++consonants;\n            }\n\n            // Check for every possible (vowels - consonants) value\n            for (int j = -n; j <= n; ++j) {\n                int diff = vowels - consonants;\n                if ((j == diff) && ((vowels * consonants) % k == 0) && vowels == consonants) {\n                    result += count[j];\n                }\n            }\n            count[vowels - consonants]++;\n        }\n\n        return result;\n    }\n};"
}