{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13984000,
    "question_id": "3208",
    "elapsed_time": 11018,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"baeyh\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708860729240,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 684,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185718730",
    "input_formatted": "\"baeyh\", 2",
    "input": "\"baeyh\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def beautifulSubstrings(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        count = 0\n        vowels = set(\"aeiou\")\n\n        # Calculate the difference between vowels and consonants at each position\n        # Use a dictionary to store counts of differences encountered\n        diff_counts = {0: 1}  # Initial difference of 0 with one occurrence\n        diff = 0  # Current difference between vowels and consonants\n        \n        for i in range(n):\n            if s[i] in vowels:\n                diff += 1  # Increment for vowel\n            else:\n                diff -= 1  # Decrement for consonant\n\n            # For each substring ending at i, find if there's a complement difference\n            # that would make the substring beautiful\n            for d in range(-i, i+2, 2):  # Step by 2 to ensure vowels == consonants\n                if (diff - d) in diff_counts:\n                    if abs(d) % k == 0:  # Check if the product (which is square of d/2) is divisible by k\n                        count += diff_counts[diff - d]\n\n            # Update the count of the current difference\n            diff_counts[diff] = diff_counts.get(diff, 0) + 1\n\n        return count"
}