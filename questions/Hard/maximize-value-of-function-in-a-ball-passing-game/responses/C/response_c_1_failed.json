{
    "status_code": 15,
    "lang": "c",
    "run_success": false,
    "runtime_error": "AddressSanitizer: SEGV on unknown address 0x602df5f5f630 (pc 0x56379e576ddf bp 0x7ffeba7fb690 sp 0x7ffeba7fb630 T0)",
    "full_runtime_error": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==22==ERROR: AddressSanitizer: SEGV on unknown address 0x602df5f5f630 (pc 0x56379e576ddf bp 0x7ffeba7fb690 sp 0x7ffeba7fb630 T0)\n==22==The signal is caused by a READ memory access.\n    #2 0x7fce63b02d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #3 0x7fce63b02e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\nAddressSanitizer can not provide additional info.\n==22==ABORTING",
    "status_runtime": "N/A",
    "memory": 13060000,
    "question_id": "3032",
    "elapsed_time": 25,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708545108548,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1182348176",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nlong long getMaxFunctionValue(int* receiver, int receiverSize, long long k) {\n    long long* dp = (long long*)malloc(receiverSize * sizeof(long long));\n    int* next = (int*)malloc(receiverSize * sizeof(int));\n    int* visited = (int*)calloc(receiverSize, sizeof(int));\n    long long max = 0;\n\n    for (int i = 0; i < receiverSize; i++) {\n        if (!visited[i]) {\n            int current = i;\n            long long cycleSum = 0;\n            int cycleLength = 0;\n            while (!visited[current]) {\n                visited[current] = 1;\n                current = receiver[current];\n                cycleLength++;\n                cycleSum += current;\n            }\n\n            // Now find cycle start\n            current = i;\n            int stepsToCycleStart = 0;\n            while (next[current] == 0) {\n                next[current] = receiver[current];\n                dp[current] = receiver[current] + (stepsToCycleStart > 0 ? dp[receiver[current]] : 0);\n                current = receiver[current];\n                stepsToCycleStart++;\n                if (stepsToCycleStart == cycleLength) {\n                    // Once we hit the cycle length, start counting from 0 again to only count within the cycle\n                    stepsToCycleStart = 0;\n                }\n            }\n\n            // Calculate maximum value using the precomputed sums\n            current = i;\n            for (int j = 0; j < receiverSize && j < k; j++) {\n                long long passesInCycle = (k - j + cycleLength - 1) / cycleLength;\n                long long total = dp[current] + cycleSum * passesInCycle - current;\n                if (total > max) max = total;\n                current = next[current];\n            }\n        }\n    }\n\n    free(dp);\n    free(next);\n    free(visited);\n\n    return max;\n}"
}