{
    "status_code": 14,
    "lang": "dart",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 149952000,
    "question_id": "3032",
    "elapsed_time": 5019,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708546173987,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1182359856",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n  int getMaxFunctionValue(List<int> receiver, int k) {\n    int n = receiver.length;\n    List<List<int>> dp = List.generate(n, (_) => List.filled(2, 0));\n    int maxVal = 0;\n\n    for (int i = 0; i < n; i++) {\n      dp[i][0] = i; // Initial sum includes the player itself\n    }\n\n    for (int pass = 1; pass <= k; pass++) {\n      for (int i = 0; i < n; i++) {\n        dp[i][pass % 2] = dp[receiver[i]][(pass - 1) % 2] + i;\n        if (pass == k) { // Only check at the last pass\n          maxVal = max(maxVal, dp[i][pass % 2]);\n        }\n      }\n    }\n\n    return maxVal;\n  }\n\n  int max(int a, int b) => a > b ? a : b;\n}"
}