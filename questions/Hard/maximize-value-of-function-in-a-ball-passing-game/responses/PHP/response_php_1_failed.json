{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 28252000,
    "question_id": "3032",
    "elapsed_time": 5101,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708545689771,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 122,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1182354583",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $receiver\n     * @param Integer $k\n     * @return Integer\n     */\n    function getMaxFunctionValue($receiver, $k) {\n        $n = count($receiver);\n        $dp = array_fill(0, $n, 0);\n        $maxValue = PHP_INT_MIN;\n\n        for ($i = 0; $i < $n; $i++) {\n            if ($dp[$i] == 0) {\n                $current = $i;\n                $cycle = [];\n                while (!isset($visited[$current])) {\n                    $visited[$current] = true;\n                    $cycle[] = $current;\n                    $current = $receiver[$current];\n                }\n                $cycleSize = count($cycle);\n                $sum = array_sum($cycle);\n                for ($j = 0; $j < $cycleSize; $j++) {\n                    $totalPasses = $k;\n                    $value = 0;\n                    if ($totalPasses >= $cycleSize) {\n                        $completeCycles = intdiv($totalPasses, $cycleSize);\n                        $value += $sum * $completeCycles;\n                        $totalPasses -= $completeCycles * $cycleSize;\n                    }\n                    for ($pass = 0; $pass < $totalPasses; $pass++) {\n                        $value += $cycle[($j + $pass) % $cycleSize];\n                    }\n                    $dp[$cycle[$j]] = $value + $cycle[$j]; // Add self id to the total\n                    $maxValue = max($maxValue, $dp[$cycle[$j]]);\n                }\n            } else {\n                $maxValue = max($maxValue, $dp[$i]);\n            }\n        }\n        return $maxValue;\n    }\n}"
}