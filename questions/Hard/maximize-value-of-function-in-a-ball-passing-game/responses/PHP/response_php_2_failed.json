{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25152000,
    "question_id": "3032",
    "elapsed_time": 5112,
    "compare_result
    "code_output": "5.6",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708545734419,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1182355068",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $receiver\n     * @param Integer $k\n     * @return Integer\n     */\n    function getMaxFunctionValue($receiver, $k) {\n        $n = count($receiver);\n        $maxValue = 0;\n        $visit = array_fill(0, $n, -1);\n\n        for ($i = 0; $i < $n; ++$i) {\n            $current = $i;\n            $steps = 0;\n            $sum = 0;\n            while ($visit[$current] < $i) {\n                $visit[$current] = $i;\n                $sum += $current;\n                $current = $receiver[$current];\n                ++$steps;\n                if ($steps == $k) break;\n            }\n            if ($steps < $k && $visit[$current] == $i) { // Detected a cycle\n                $cycleLength = $steps;\n                $cycleSum = $current;\n                $temp = $receiver[$current];\n                while ($temp != $current) {\n                    $cycleSum += $temp;\n                    $temp = $receiver[$temp];\n                    ++$cycleLength;\n                }\n                $sum += ($k - $steps) / $cycleLength * $cycleSum;\n                $remaining = ($k - $steps) % $cycleLength;\n                $temp = $current;\n                while ($remaining-- > 0) {\n                    $sum += $temp;\n                    $temp = $receiver[$temp];\n                }\n            }\n            $maxValue = max($maxValue, $sum);\n        }\n        return $maxValue;\n    }\n}"
}