{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53700000,
    "question_id": "3032",
    "elapsed_time": 67,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n3",
    "expected_output": "10",
    "task_finish_time": 1708545437644,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 15,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1182351876",
    "input_formatted": "[1,1,1,2,3], 3",
    "input": "[1,1,1,2,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} receiver\n * @param {number} k\n * @return {number}\n */\nvar getMaxFunctionValue = function(receiver, k) {\n    const n = receiver.length;\n    let maxVal = 0;\n\n    // Precompute sums and lengths to handle cycles efficiently\n    let visited = new Array(n).fill(false);\n    let sums = new Array(n).fill(0);\n    let lengths = new Array(n).fill(0);\n\n    for (let i = 0; i < n; ++i) {\n        if (!visited[i]) {\n            let current = i;\n            let cycleSum = 0;\n            let cycleLength = 0;\n            while (!visited[current]) {\n                visited[current] = true;\n                cycleSum += current;\n                cycleLength++;\n                current = receiver[current];\n            }\n\n            // Apply precomputed values for all nodes in the cycle\n            current = i;\n            while (lengths[current] === 0) {\n                sums[current] = cycleSum;\n                lengths[current] = cycleLength;\n                current = receiver[current];\n            }\n        }\n    }\n\n    for (let start = 0; start < n; ++start) {\n        let sum = 0;\n        let current = start;\n        for (let pass = 0; pass < k; ++pass) {\n            sum += current;\n            if (pass + lengths[current] <= k) {\n                sum += (k - pass) / lengths[current] * sums[current];\n                break;\n            }\n            current = receiver[current];\n        }\n        maxVal = Math.max(maxVal, sum);\n    }\n\n    return maxVal;\n};"
}