{
    "status_code": 14,
    "lang": "erlang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 62860000,
    "question_id": "3032",
    "elapsed_time": 5116,
    "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708555822443,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182444292",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "-spec get_max_function_value(Receiver :: [integer()], K :: integer()) -> integer().\nget_max_function_value(Receiver, K) ->\n    CalcSum = fun(CalcSum, X, N, Sum) when N > 0 ->\n                      Next = lists:nth(X + 1, Receiver),\n                      CalcSum(CalcSum, Next, N - 1, Sum + Next);\n                 (_, _, _, Sum) -> Sum\n              end,\n    MaxFunValue = lists:max([CalcSum(CalcSum, X, K, X) || X <- lists:seq(0, length(Receiver) - 1)]),\n    MaxFunValue."
}