{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16324000,
    "question_id": "3032",
    "elapsed_time": 11010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708892011208,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186105865",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n        n = len(receiver)\n        max_value = 0\n        for i in range(n):\n            current = i\n            total = 0\n            for _ in range(k):\n                current = receiver[current]\n                total += current\n            max_value = max(max_value, total + i)\n        return max_value"
}