{
    "status_code": 15,
    "lang": "python3",
    "run_success": false,
    "runtime_error": "Line 33: IndexError: list index out of range",
    "full_runtime_error": "IndexError: list index out of range\n                    ~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    cycle_sum = sum(receiver[cycle_start + j % cycle_length] for j in range(cycle_passes))\nLine 33 in <genexpr> (Solution.py)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    cycle_sum = sum(receiver[cycle_start + j % cycle_length] for j in range(cycle_passes))\nLine 33 in getMaxFunctionValue (Solution.py)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ret = Solution().getMaxFunctionValue(param_1, param_2)\nLine 64 in _driver (Solution.py)\n    _driver()\nLine 75 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 16644000,
    "question_id": "3032",
    "elapsed_time": 52,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708891936316,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186105205",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n        def find_cycle_start_and_length(x):\n            visited = set()\n            steps = 0\n            while x not in visited:\n                visited.add(x)\n                x = receiver[x]\n                steps += 1\n            cycle_start = x\n            cycle_length = 1\n            x = receiver[x]\n            while x != cycle_start:\n                x = receiver[x]\n                cycle_length += 1\n            return cycle_start, cycle_length\n\n        n = len(receiver)\n        max_value = 0\n        for i in range(n):\n            cycle_start, cycle_length = find_cycle_start_and_length(i)\n            value = i\n            passes = k\n            x = i\n            while passes > 0 and x != cycle_start:\n                x = receiver[x]\n                value += x\n                passes -= 1\n            cycle_passes = min(passes, cycle_length)\n            if cycle_passes > 0:\n                cycle_sum = sum(receiver[cycle_start + j % cycle_length] for j in range(cycle_passes))\n                full_cycles = passes // cycle_length\n                value += full_cycles * cycle_sum\n                remainder_passes = passes % cycle_length\n                if remainder_passes > 0:\n                    value += sum(receiver[cycle_start + j % cycle_length] for j in range(remainder_passes))\n            max_value = max(max_value, value)\n        return max_value"
}