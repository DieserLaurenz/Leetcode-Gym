{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25496000,
    "question_id": "3032",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,0,0]\n6",
    "expected_output": "5",
    "task_finish_time": 1708891977543,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 692,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186105499",
    "input_formatted": "[1,0,0], 6",
    "input": "[1,0,0]\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def getMaxFunctionValue(self, receiver: List[int], k: int) -> int:\n        n = len(receiver)\n        max_value = 0\n        for start_player in range(n):\n            visited = [False] * n\n            sum_ids = start_player\n            current_player = start_player\n            passes = 0\n            while passes < k:\n                if visited[current_player]:\n                    break\n                visited[current_player] = True\n                current_player = receiver[current_player]\n                sum_ids += current_player\n                passes += 1\n            additional_passes = k - passes\n            if additional_passes > 0 and current_player == start_player:\n                cycle_length = passes\n                complete_cycles = additional_passes // cycle_length\n                remainder_passes = additional_passes % cycle_length\n                cycle_sum = sum_ids - start_player\n                sum_ids += complete_cycles * cycle_sum\n                current_player = start_player\n                for _ in range(remainder_passes):\n                    current_player = receiver[current_player]\n                    sum_ids += current_player\n            max_value = max(max_value, sum_ids)\n        return max_value"
}