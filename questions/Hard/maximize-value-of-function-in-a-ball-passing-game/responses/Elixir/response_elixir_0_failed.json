{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 74396000,
    "question_id": "3032",
    "elapsed_time": 6025,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708555924339,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182445045",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec get_max_function_value(receiver :: [integer], k :: integer) :: integer\n  def get_max_function_value(receiver, k) do\n    Enum.reduce(0..Enum.count(receiver)-1, 0, fn x, acc ->\n      sum = get_sum(receiver, k, x, x)\n      if sum > acc, do: sum, else: acc\n    end)\n  end\n\n  defp get_sum(receiver, 0, _current, acc), do: acc\n  defp get_sum(receiver, k, current, acc) do\n    next = Enum.at(receiver, current)\n    get_sum(receiver, k-1, next, acc + next)\n  end\nend"
}