{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 986172000,
    "question_id": "3032",
    "elapsed_time": 1816,
    "compare_result
    "code_output": "[2,0,1,2]",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708555992314,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182445632",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec get_max_function_value(receiver :: [integer], k :: integer) :: integer\n  def get_max_function_value(receiver, k) do\n    paths = Enum.map(receiver, &build_path(&1, receiver, k))\n    Enum.max_by(paths, &Enum.sum(&1))\n  end\n\n  defp build_path(start, receiver, k, acc \\\\ []) \n  defp build_path(_start, _receiver, 0, acc), do: acc\n  defp build_path(start, receiver, k, acc) do\n    next = Enum.at(receiver, start)\n    build_path(next, receiver, k - 1, [next | acc])\n  end\nend"
}