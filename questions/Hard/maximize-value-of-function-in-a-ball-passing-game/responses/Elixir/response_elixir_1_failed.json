{
    "status_code": 12,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 985936000,
    "question_id": "3032",
    "elapsed_time": 3049,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708555958713,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182445375",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec get_max_function_value(receiver :: [integer], k :: integer) :: integer\n  def get_max_function_value(receiver, k) do\n    max_value = Enum.with_index(receiver)\n    |> Enum.reduce(%{sums: %{}, max: 0}, fn {r, idx}, acc ->\n      {sum, acc_sums} = get_sum_cached(receiver, k, idx, acc.sums)\n      new_max = max(acc.max, sum)\n      %{sums: acc_sums, max: new_max}\n    end)\n    |> Map.get(:max)\n\n    max_value\n  end\n\n  defp get_sum_cached(receiver, 0, idx, sums) do\n    {idx, sums}\n  end\n  defp get_sum_cached(receiver, k, idx, sums) do\n    case Map.fetch(sums, {k, idx}) do\n      :error ->\n        next_idx = Enum.at(receiver, idx)\n        {sum_next, updated_sums} = get_sum_cached(receiver, k-1, next_idx, sums)\n        new_sum = idx + sum_next\n        {new_sum, Map.put(updated_sums, {k, idx}, new_sum)}\n      {:ok, sum} ->\n        {sum, sums}\n    end\n  end\nend"
}