{
    "status_code": 14,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 101312000,
    "question_id": "3032",
    "elapsed_time": 5013,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708546936185,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1182368138",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (get-max-function-value receiver k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let ([n (length receiver)])\n    (let loop ([i 0] [max-sum 0])\n      (if (= i n)\n          max-sum\n          (let ([start i])\n            (let iter ([j 0] [current start] [sum start])\n              (if (= j k)\n                  (loop (+ i 1) (max max-sum sum))\n                  (iter (+ j 1) (list-ref receiver current) (+ sum (list-ref receiver current))))))))))"
}