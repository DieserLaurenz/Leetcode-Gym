{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 100052000,
    "question_id": "3032",
    "elapsed_time": 5018,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708546906536,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 53,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1182367785",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (get-max-function-value receiver k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let loop ((i 0) (max-value 0))\n    (if (= i (length receiver))\n        max-value\n        (let ((value (let calc ((j 0) (current i) (sum 0))\n                       (if (= j k)\n                           sum\n                           (calc (+ j 1) (list-ref receiver current) (+ sum current))))))\n          (loop (+ i 1) (max max-value value))))))"
}