{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 16: Char 63: read-syntax: missing `)` to close `(` on line 22, found instead `]`",
    "full_compile_error": "Line 16: Char 63: read-syntax: missing `)` to close `(` on line 22, found instead `]`\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3032",
    "task_finish_time": 1708546968448,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1182368526",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (get-max-function-value receiver k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let ([n (length receiver)])\n    (let ([sums (make-vector n 0)])\n      (letrec ([compute-sum\n                (lambda (x k)\n                  (if (= k 0)\n                      x\n                      (+ x (compute-sum (vector-ref receiver x) (- k 1)))))]\n               [maximize\n                (lambda (i max-val)\n                  (if (= i n)\n                      max-val\n                      (let ([sum (compute-sum i k)])\n                        (vector-set! sums i sum)\n                        (maximize (+ i 1) (max max-val sum))))])\n        (maximize 0 0)))))"
}