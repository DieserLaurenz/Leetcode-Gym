{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 416232000,
    "question_id": "3032",
    "elapsed_time": 4021,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708537349269,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1182235014",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long getMaxFunctionValue(vector<int>& receiver, long long k) {\n        int n = receiver.size();\n        unordered_map<int, long long> cache;\n        long long maxVal = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (cache.find(i) != cache.end()) {\n                maxVal = max(maxVal, cache[i]);\n                continue;\n            }\n\n            int current = i;\n            long long sum = i;\n            vector<int> path = {i};\n            unordered_map<int, int> visited;\n            visited[i] = 0;\n\n            for (long long j = 1; j <= k; ++j) {\n                current = receiver[current];\n                if (visited.count(current)) {\n                    long long cycleLen = j - visited[current];\n                    long long cycleSum = sum - path[visited[current]];\n                    long long fullCycles = (k - j) / cycleLen;\n                    sum += cycleSum * fullCycles;\n                    j += cycleLen * fullCycles;\n\n                    while (j < k) {\n                        sum += current;\n                        j++;\n                        current = receiver[current];\n                    }\n                    break;\n                } else {\n                    sum += current;\n                    path.push_back(current);\n                    visited[current] = j;\n                }\n            }\n            cache[i] = sum;\n            maxVal = max(maxVal, sum);\n        }\n        return maxVal;\n    }\n};"
}