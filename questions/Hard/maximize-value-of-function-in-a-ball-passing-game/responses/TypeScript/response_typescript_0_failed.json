{
    "status_code": 14,
    "lang": "typescript",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 56580000,
    "question_id": "3032",
    "elapsed_time": 4017,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708545504386,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182352555",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "function getMaxFunctionValue(receiver: number[], k: number): number {\n  let maxValue = 0;\n  const n = receiver.length;\n  const dp: number[] = new Array(n).fill(-1);\n\n  const calculateF = (x: number): number => {\n    let sum = x, current = x;\n    for (let i = 0; i < k; i++) {\n      current = receiver[current];\n      sum += current;\n    }\n    return sum;\n  };\n\n  for (let i = 0; i < n; i++) {\n    if (dp[i] === -1) {\n      dp[i] = calculateF(i);\n    }\n    maxValue = Math.max(maxValue, dp[i]);\n  }\n\n  return maxValue;\n};"
}