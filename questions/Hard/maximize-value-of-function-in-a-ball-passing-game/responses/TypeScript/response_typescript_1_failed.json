{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63864000,
    "question_id": "3032",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708545549252,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 37,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182353064",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function getMaxFunctionValue(receiver: number[], k: number): number {\n  let maxValue = 0;\n  const n = receiver.length;\n  const visit = new Array(n).fill(0);\n  const sum = new Array(n).fill(0);\n  let cycleSum = 0, cycleLength = 0, steps = 0;\n\n  for (let i = 0; i < n; i++) {\n    let x = i;\n    cycleSum = 0;\n    cycleLength = 0;\n    steps = k;\n\n    while (visit[x] !== i + 1) {\n      if (steps === 0) break;\n      visit[x] = i + 1;\n      cycleSum += x;\n      x = receiver[x];\n      cycleLength++;\n      steps--;\n    }\n\n    let totalSum = cycleSum;\n    if (steps > 0) {\n      let remainingSteps = steps % cycleLength;\n      cycleSum = (steps / cycleLength >> 0) * cycleSum;\n      totalSum += cycleSum;\n      x = i;\n      while (remainingSteps-- > 0) {\n        x = receiver[x];\n        totalSum += x;\n      }\n    }\n    maxValue = Math.max(maxValue, totalSum);\n  }\n  return maxValue;\n}"
}