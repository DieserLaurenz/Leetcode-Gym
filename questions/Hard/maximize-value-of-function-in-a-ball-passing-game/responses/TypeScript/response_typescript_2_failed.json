{
    "status_code": 14,
    "lang": "typescript",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 56588000,
    "question_id": "3032",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708545579540,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182353414",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "function getMaxFunctionValue(receiver: number[], k: number): number {\n    const n = receiver.length;\n    const value = new Array(n).fill(0);\n    for (let i = 0; i < n; ++i) {\n        let current = i;\n        for (let j = 0; j < k; ++j) {\n            value[i] += current;\n            current = receiver[current];\n        }\n        value[i] += current; // Add the last receiver to include k passes\n    }\n    return Math.max(...value);\n}"
}