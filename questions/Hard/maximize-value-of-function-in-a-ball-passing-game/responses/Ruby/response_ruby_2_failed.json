{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211176000,
    "question_id": "3032",
    "elapsed_time": 232,
    "compare_result": "101111100000111111111111011111111111000000111101100100110111101101110111001111100111011001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n3",
    "expected_output": "10",
    "task_finish_time": 1708546457929,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1182362947",
    "input_formatted": "[1,1,1,2,3], 3",
    "input": "[1,1,1,2,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} receiver\n# @param {Integer} k\n# @return {Integer}\ndef get_max_function_value(receiver, k)\n  n = receiver.size\n  max_value = 0\n  cycle_length = Array.new(n, 0)\n  cycle_sum = Array.new(n, 0)\n  visited = Array.new(n, -1)\n\n  n.times do |i|\n    next if visited[i] != -1\n    \n    current = i\n    steps = 0\n    path = []\n    \n    while visited[current] == -1\n      visited[current] = steps\n      path << current\n      current = receiver[current]\n      steps += 1\n    end\n\n    cycle_start = visited[current]\n    cycle_len = steps - cycle_start\n    sum = 0\n\n    (cycle_start...steps).each { |j| sum += path[j] }\n\n    (0...cycle_start).each { |j| cycle_length[path[j]] = steps }\n    (cycle_start...steps).each do |j|\n      cycle_length[path[j]] = cycle_len\n      cycle_sum[path[j]] = sum\n    end\n  end\n\n  n.times do |i|\n    value = i\n    current = i\n    remaining_k = k\n\n    while remaining_k > cycle_length[current]\n      remaining_k -= cycle_length[current]\n      value += cycle_sum[current]\n      current = receiver[current]\n    end\n\n    remaining_k.times do\n      current = receiver[current]\n      value += current\n    end\n\n    max_value = [max_value, value].max\n  end\n\n  max_value\nend"
}