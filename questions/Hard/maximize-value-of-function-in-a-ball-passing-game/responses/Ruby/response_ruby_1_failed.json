{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211252000,
    "question_id": "3032",
    "elapsed_time": 123,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708546416568,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1182362501",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} receiver\n# @param {Integer} k\n# @return {Integer}\ndef get_max_function_value(receiver, k)\n    n = receiver.length\n    dp = Array.new(n, 0)\n    next_player = Array.new(n)\n    (0...n).each { |i| next_player[i] = [receiver[i], 1] } # [next player, steps taken]\n\n    # Precompute the cycle length and sum for each player\n    (0...n).each do |i|\n        current = i\n        seen = {}\n        while !seen.include?(current)\n            seen[current] = dp[current]\n            next_info = next_player[current]\n            current = next_info[0]\n            if next_info[1] < k\n                dp[i] += current\n                next_player[current][1] += next_info[1]\n            else\n                break\n            end\n        end\n\n        # Adjust for cycles\n        if next_player[current][1] < k && seen.include?(current)\n            cycle_sum = dp[i] - seen[current] + current\n            cycle_length = next_player[current][1] - seen.values.count + 1\n            full_cycles, remaining_steps = (k - next_player[current][1]).divmod(cycle_length)\n            dp[i] += full_cycles * cycle_sum\n            (1..remaining_steps).each do |step|\n                current = receiver[current]\n                dp[i] += current\n            end\n        end\n    end\n\n    dp.max\nend"
}