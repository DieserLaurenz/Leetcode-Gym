{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57940000,
    "question_id": "3032",
    "elapsed_time": 10689,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n3",
    "expected_output": "10",
    "task_finish_time": 1708546575717,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 63,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182364121",
    "input_formatted": "[1,1,1,2,3], 3",
    "input": "[1,1,1,2,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def getMaxFunctionValue(receiver: List[Int], k: Long): Long = {\n        val n = receiver.length\n        val dp = Array.fill(n)(0L)\n        val visited = Array.fill(n)(false)\n        var maxSum: Long = 0\n\n        def dfs(start: Int): Long = {\n            if (visited(start)) return dp(start)\n            visited(start) = true\n            dp(start) = start + dfs(receiver(start))\n            dp(start)\n        }\n\n        for (i <- receiver.indices) {\n            dfs(i)\n        }\n\n        for (i <- 0 until n) {\n            var sum = 0L\n            var current = i\n            var kTemp = k\n            while (kTemp > 0) {\n                if (kTemp == k) { // First pass includes the starting player\n                    sum += current\n                    kTemp -= 1\n                }\n                current = receiver(current)\n                if (kTemp <= dp(current) - current) { // Use precomputed sum if remaining passes are covered\n                    sum += dp(current) - current\n                    kTemp = 0\n                } else { // Otherwise, add the current player and decrement passes\n                    sum += current\n                    kTemp -= 1\n                }\n            }\n            maxSum = maxSum max sum\n        }\n\n        maxSum\n    }\n}"
}