{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 99692000,
    "question_id": "3032",
    "elapsed_time": 115,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708546759492,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182366286",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn get_max_function_value(receiver: Vec<i32>, k: i64) -> i64 {\n        let n = receiver.len();\n        let mut cache = vec![vec![-1; 2]; n];\n        let mut max_value = 0;\n\n        fn dfs(receiver: &Vec<i32>, cache: &mut Vec<Vec<i64>>, x: usize, k: i64, depth: i64) -> i64 {\n            if k == 0 {\n                return x as i64;\n            }\n            if depth > 0 && cache[x][0] != -1 {\n                return cache[x][0] + (k - 1) / depth * cache[x][1];\n            }\n            let next_x = receiver[x] as usize;\n            let sum = dfs(receiver, cache, next_x, k - 1, depth + 1);\n            if depth == 0 {\n                cache[x][0] = sum - (next_x as i64);\n                cache[x][1] = sum - x as i64;\n            }\n            sum\n        }\n\n        for i in 0..n {\n            max_value = max_value.max(dfs(&receiver, &mut cache, i, k, 0));\n        }\n\n        max_value\n    }\n}"
}