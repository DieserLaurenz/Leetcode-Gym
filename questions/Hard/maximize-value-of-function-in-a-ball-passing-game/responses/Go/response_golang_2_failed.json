{
    "status_code": 14,
    "lang": "golang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 2792000,
    "question_id": "3032",
    "elapsed_time": 3018,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0]\n10000000000",
    "expected_output": "0",
    "task_finish_time": 1708546324719,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 909,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1182361533",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "func getMaxFunctionValue(receiver []int, k int64) int64 {\n    n := len(receiver)\n    maxVal := int64(0)\n\n    // Function to calculate the sum for a given start index and k\n    getSum := func(start int, k int64) int64 {\n        sum, current := int64(0), start\n        for i := int64(0); i < k; i++ {\n            sum += int64(current)\n            current = receiver[current]\n        }\n        return sum\n    }\n\n    // Calculate sum for each player as starting point and find the maximum\n    for i := 0; i < n; i++ {\n        sum := getSum(i, k+1) // Pass k+1 times to include the starting player in the count\n        if sum > maxVal {\n            maxVal = sum\n        }\n    }\n\n    return maxVal\n}"
}