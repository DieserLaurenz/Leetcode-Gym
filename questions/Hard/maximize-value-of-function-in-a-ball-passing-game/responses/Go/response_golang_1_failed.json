{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20636000,
    "question_id": "3032",
    "elapsed_time": 3013,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n3",
    "expected_output": "10",
    "task_finish_time": 1708546287915,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 51,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1182361131",
    "input_formatted": "[1,1,1,2,3], 3",
    "input": "[1,1,1,2,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func getMaxFunctionValue(receiver []int, k int64) int64 {\n    n := len(receiver)\n    visited := make([]bool, n)\n    maxVal := int64(0)\n\n    for i := 0; i < n; i++ {\n        if visited[i] {\n            continue\n        }\n\n        // Detect cycle and its length\n        cycle := make([]int, 0)\n        cycleIndices := make(map[int]int)\n        current := i\n        for !visited[current] {\n            visited[current] = true\n            cycle = append(cycle, current)\n            cycleIndices[current] = len(cycle) - 1\n            current = receiver[current]\n        }\n\n        // If current is part of the cycle detected\n        if idx, exists := cycleIndices[current]; exists {\n            cycleLen := len(cycle) - idx\n            cycleSum := int64(0)\n            for j := idx; j < len(cycle); j++ {\n                cycleSum += int64(cycle[j])\n            }\n\n            preCycleSum := int64(0)\n            for j := 0; j < idx; j++ {\n                preCycleSum += int64(cycle[j])\n            }\n\n            // Calculate maximum value considering cycles\n            for startIdx := idx; startIdx < len(cycle); startIdx++ {\n                sum := preCycleSum + cycleSum*int64(k)/int64(cycleLen)\n                if k%int64(cycleLen) != 0 {\n                    for j := 0; j < int(k%int64(cycleLen)); j++ {\n                        sum += int64(cycle[(startIdx+j)%cycleLen])\n                    }\n                }\n                if sum > maxVal {\n                    maxVal = sum\n                }\n            }\n        }\n    }\n\n    return maxVal\n}"
}