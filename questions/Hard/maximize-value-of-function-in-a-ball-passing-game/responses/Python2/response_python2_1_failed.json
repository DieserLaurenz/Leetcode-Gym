{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 33096000,
    "question_id": "3032",
    "elapsed_time": 648,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "[1,1,1,2,3]\n3",
    "expected_output": "10",
    "task_finish_time": 1708891822861,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 30,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186104024",
    "input_formatted": "[1,1,1,2,3], 3",
    "input": "[1,1,1,2,3]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def getMaxFunctionValue(self, receiver, k):\n        \"\"\"\n        :type receiver: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(receiver)\n        max_value = 0\n        dp = [-1] * n\n\n        for i in range(n):\n            if dp[i] != -1:\n                continue\n            \n            cycle = []\n            visited = set()\n            current = i\n            \n            while current not in visited:\n                visited.add(current)\n                cycle.append(current)\n                current = receiver[current]\n                \n                if dp[current] != -1:\n                    for j in range(len(cycle)):\n                        dp[cycle[j]] = dp[current] + len(cycle) - j\n                    break\n            \n            if current in visited:\n                cycle_start = cycle.index(current)\n                cycle_length = len(cycle) - cycle_start\n                \n                for j in range(len(cycle)):\n                    if j < cycle_start:\n                        dp[cycle[j]] = len(cycle) + k // cycle_length * cycle_length - cycle_start\n                    else:\n                        dp[cycle[j]] = j - cycle_start + 1 + k // cycle_length * cycle_length\n            \n            max_cycle_value = max(dp[cycle[j]] for j in range(len(cycle)))\n            max_value = max(max_value, max_cycle_value)\n        \n        return max_value"
}