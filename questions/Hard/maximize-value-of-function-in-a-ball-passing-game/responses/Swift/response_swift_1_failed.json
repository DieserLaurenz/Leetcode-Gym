{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 210676000,
    "question_id": "3032",
    "elapsed_time": 704,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708545833411,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 267,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1182356246",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func getMaxFunctionValue(_ receiver: [Int], _ k: Int) -> Int {\n        var f = [Int](repeating: 0, count: receiver.count)\n        var visited = [Bool](repeating: false, count: receiver.count)\n        let n = receiver.count\n        \n        func dfs(_ x: Int, _ depth: Int) -> Int {\n            if visited[x] { return f[x] }\n            if depth == k {\n                visited[x] = true\n                f[x] = x\n                return x\n            }\n            let next = dfs(receiver[x], depth + 1)\n            f[x] = x + next\n            visited[x] = true\n            return f[x]\n        }\n        \n        var maxVal = 0\n        for i in 0..<n {\n            maxVal = max(maxVal, dfs(i, 0))\n        }\n        return maxVal\n    }\n}"
}