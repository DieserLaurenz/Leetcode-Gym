{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 294340000,
    "question_id": "3032",
    "elapsed_time": 3810,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708545944813,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182357405",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun getMaxFunctionValue(receiver: List<Int>, k: Long): Long {\n        val n = receiver.size\n        val next = Array(n) { arrayOf(-1L, 0L) }\n        for (i in receiver.indices) {\n            next[i][0] = receiver[i].toLong()\n            next[i][1] = i.toLong()\n        }\n\n        var maxSteps = 1\n        while (1L shl maxSteps <= k) maxSteps++\n\n        val dp = Array(n) { Array(maxSteps + 1) { arrayOf(-1L, 0L) } }\n        for (i in 0 until n) dp[i][0] = next[i]\n\n        for (j in 1..maxSteps) {\n            for (i in 0 until n) {\n                val prev = dp[i][j - 1][0].toInt()\n                dp[i][j][0] = dp[prev][j - 1][0]\n                dp[i][j][1] = dp[i][j - 1][1] + dp[prev][j - 1][1]\n            }\n        }\n\n        var ans = 0L\n        for (i in 0 until n) {\n            var sum = 0L\n            var x = i\n            var kLeft = k\n            for (j in maxSteps downTo 0) {\n                if (kLeft >= (1L shl j)) {\n                    sum += dp[x][j][1] + (1L shl j)\n                    x = dp[x][j][0].toInt()\n                    kLeft -= (1L shl j)\n                }\n            }\n            ans = maxOf(ans, sum)\n        }\n        return ans\n    }\n}"
}