{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64528000,
    "question_id": "3032",
    "elapsed_time": 5323,
    "compare_result
    "code_output": "147",
    "std_output": "",
    "last_testcase": "[0]\n100",
    "expected_output": "0",
    "task_finish_time": 1708545984309,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 274,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182357763",
    "input_formatted": "[0], 100",
    "input": "[0]\n100",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun getMaxFunctionValue(receiver: List<Int>, k: Long): Long {\n        var maxVal = 0L\n        val n = receiver.size\n        val visitCount = LongArray(n)\n\n        for (i in 0 until n) {\n            var current = i\n            var total = i.toLong()\n            var passes = k\n\n            while (passes > 0) {\n                current = receiver[current]\n                total += current\n                passes--\n\n                // Increment visit count for cycle detection\n                visitCount[current]++\n                if (visitCount[current] > 1) {\n                    // Found a cycle, calculate the cycle's contribution in one complete iteration\n                    val cycleLength = visitCount[current]\n                    val cyclePasses = passes / cycleLength\n                    val cycleContribution = (cycleLength * (cycleLength + 1)) / 2\n                    total += cycleContribution * cyclePasses\n                    passes %= cycleLength // Remaining passes after completing the cycles\n                    break\n                }\n            }\n            maxVal = maxOf(maxVal, total)\n\n            // Reset visit count for the next starting player\n            visitCount.fill(0)\n        }\n\n        return maxVal\n    }\n}"
}