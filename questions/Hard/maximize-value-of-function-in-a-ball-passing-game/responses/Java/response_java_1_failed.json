{
    "status_code": 14,
    "lang": "java",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 40568000,
    "question_id": "3032",
    "elapsed_time": 4036,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708537451605,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1182236844",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Solution {\n    public long getMaxFunctionValue(List<Integer> receiver, long k) {\n        int n = receiver.size();\n        long maxVal = 0;\n        Map<Integer, Integer> next = new HashMap<>();\n        Map<Integer, Long> sumCache = new HashMap<>();\n        Map<Integer, Long> countCache = new HashMap<>();\n\n        for (int i = 0; i < n; i++) {\n            if (!next.containsKey(i)) {\n                long sum = 0;\n                long count = 0;\n                int current = i;\n                while (!next.containsKey(current)) {\n                    next.put(current, receiver.get(current));\n                    sum += current;\n                    count++;\n                    current = receiver.get(current);\n                    if (count > k) break;\n                }\n                long cycleSum = sum;\n                long cycleCount = count;\n\n                current = receiver.get(current);\n                while (count <= k && current != i) {\n                    cycleSum += current;\n                    cycleCount++;\n                    current = receiver.get(current);\n                }\n\n                for (Map.Entry<Integer, Integer> entry : next.entrySet()) {\n                    int start = entry.getKey();\n                    current = start;\n                    sum = 0;\n                    count = 0;\n                    while (count < k) {\n                        if (countCache.containsKey(current) && (k - count) >= countCache.get(current)) {\n                            long cycleTimes = (k - count) / cycleCount;\n                            sum += cycleSum * cycleTimes;\n                            count += cycleCount * cycleTimes;\n                        } else {\n                            sum += current;\n                            count++;\n                            current = next.get(current);\n                        }\n                    }\n                    maxVal = Math.max(maxVal, sum);\n                    sumCache.put(start, sum);\n                    countCache.put(start, count);\n                }\n                next.clear();\n            }\n        }\n        return maxVal;\n    }\n}"
}