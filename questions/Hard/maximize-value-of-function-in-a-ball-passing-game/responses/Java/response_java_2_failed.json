{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40308000,
    "question_id": "3032",
    "elapsed_time": 4017,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708537494794,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1182237624",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public long getMaxFunctionValue(List<Integer> receiver, long k) {\n        int n = receiver.size();\n        long[] dp = new long[n];\n        long max = Long.MIN_VALUE;\n\n        // Precompute the next receiver and the length of each cycle\n        int[] next = new int[n];\n        long[] cycleLength = new long[n];\n        boolean[] visited = new boolean[n];\n        for (int i = 0; i < n; i++) {\n            if (!visited[i]) {\n                int slow = i;\n                int fast = receiver.get(i);\n                while (fast != slow && !visited[fast]) {\n                    visited[slow] = true;\n                    slow = receiver.get(slow);\n                    fast = receiver.get(receiver.get(fast));\n                }\n\n                int start = slow;\n                long length = 0;\n                do {\n                    length++;\n                    slow = receiver.get(slow);\n                } while (slow != start);\n\n                long sum = 0;\n                slow = start;\n                do {\n                    sum += slow;\n                    cycleLength[slow] = length;\n                    next[slow] = receiver.get(slow);\n                    slow = receiver.get(slow);\n                } while (slow != start);\n\n                // Calculate the contribution of each cycle\n                do {\n                    long passes = k / length;\n                    long remainder = k % length;\n                    long total = passes * sum;\n                    int current = slow;\n                    for (int j = 0; j < remainder; j++) {\n                        total += current;\n                        current = receiver.get(current);\n                    }\n                    dp[slow] = total;\n                    max = Math.max(max, total + slow * (passes + (remainder > 0 ? 1 : 0)));\n                    slow = receiver.get(slow);\n                } while (slow != start);\n            }\n        }\n\n        return max;\n    }\n}"
}