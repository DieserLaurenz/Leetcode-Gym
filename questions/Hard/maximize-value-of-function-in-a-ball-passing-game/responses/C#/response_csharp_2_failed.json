{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 123064000,
    "question_id": "3032",
    "elapsed_time": 4017,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708545293211,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 629,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182350158",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long GetMaxFunctionValue(IList<int> receiver, long k) {\n        int n = receiver.Count;\n        long max = 0;\n        for (int i = 0; i < n; i++) {\n            int curr = i;\n            long sum = curr;\n            var visited = new Dictionary<int, int>();\n            visited[curr] = 0;\n            int steps = 1;\n            while (steps <= k) {\n                curr = receiver[curr];\n                sum += curr;\n                if (visited.ContainsKey(curr)) {\n                    int cycleLen = steps - visited[curr];\n                    long remainingCycles = (k - steps) / cycleLen;\n                    long cycleSum = (sum - visited.Keys.Select(x => (long)x).Sum()) * remainingCycles;\n                    sum += cycleSum;\n                    break;\n                } else {\n                    visited[curr] = steps;\n                }\n                steps++;\n            }\n            max = Math.Max(max, sum);\n        }\n        return max;\n    }\n}"
}