{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44496000,
    "question_id": "3032",
    "elapsed_time": 4021,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[2,0,1]\n4",
    "expected_output": "6",
    "task_finish_time": 1708545248168,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 35,
    "total_testcases": 948,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182349627",
    "input_formatted": "[2,0,1], 4",
    "input": "[2,0,1]\n4",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long GetMaxFunctionValue(IList<int> receiver, long k) {\n        int n = receiver.Count;\n        long[] dp = new long[n];\n        int[] nextIndex = new int[n];\n        bool[] visited = new bool[n];\n        long maxVal = 0;\n\n        for (int i = 0; i < n; i++) {\n            long sum = 0;\n            int current = i;\n            long passes = k;\n            while (passes > 0) {\n                if (visited[current]) {\n                    long cycleLen = dp[current];\n                    long cycles = passes / cycleLen;\n                    sum += cycles * dp[nextIndex[current]];\n                    passes %= cycleLen;\n                }\n\n                if (passes > 0) {\n                    visited[current] = true;\n                    sum += current;\n                    nextIndex[current] = receiver[current];\n                    dp[current]++;\n                    current = receiver[current];\n                    passes--;\n                }\n            }\n            maxVal = Math.Max(maxVal, sum);\n\n            // Reset visited for next iteration\n            current = i;\n            while (visited[current]) {\n                visited[current] = false;\n                current = receiver[current];\n            }\n        }\n\n        return maxVal;\n    }\n}"
}