{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 71604000,
    "question_id": "3017",
    "elapsed_time": 6028,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "349863935\n772153463\n11",
    "expected_output": "0",
    "task_finish_time": 1708943479879,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 573,
    "total_testcases": 595,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1186628024",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_beautiful_integers(low :: integer, high :: integer, k :: integer) :: integer\n  def number_of_beautiful_integers(low, high, k) do\n    Enum.count(low..high, fn x ->\n      even_odd_equal?(Integer.digits(x)) and rem(x, k) == 0\n    end)\n  end\n\n  defp even_odd_equal?(digits) do\n    {even, odd} = Enum.reduce(digits, {0, 0}, fn\n      x, {even, odd} when rem(x, 2) == 0 -> {even + 1, odd}\n      x, {even, odd} -> {even, odd + 1}\n    end)\n\n    even == odd\n  end\nend"
}