{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "map: contract violation",
    "full_runtime_error": "map: contract violation\n  expected: list?\n  given: \"10\"\n  context...:\n   /usr/share/racket/collects/racket/private/map.rkt:257:2: gen-map\n   solution.rkt:1:0: number-of-beautiful-integers\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:16:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100064000,
    "question_id": "3017",
    "elapsed_time": 282,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "10\n20\n3",
    "expected_output": "2",
    "task_finish_time": 1708943211765,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 595,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1186625001",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-beautiful-integers low high k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  (let loop ((i low) (count 0))\n    (if (> i high)\n        count\n        (let ((digits (number->string i)))\n          (loop (+ i 1) (if (and (even? (count even? (map (lambda (x) (modulo (char->integer x) 2)) digits)))\n                                  (even? (count odd? (map (lambda (x) (modulo (char->integer x) 2)) digits)))\n                                  (zero? (modulo i k)))\n                             (+ count 1)\n                             count))))))"
}