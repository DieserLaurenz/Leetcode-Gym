{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "char->integer: arity mismatch;",
    "full_runtime_error": "char->integer: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n  context...:\n   /usr/share/racket/collects/racket/list.rkt:531:0: count\n   solution.rkt:3:2: is-beautiful?\n   /usr/share/racket/collects/racket/private/list.rkt:275:2: filter\n   solution.rkt:1:0: number-of-beautiful-integers\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:13:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100160000,
    "question_id": "3017",
    "elapsed_time": 274,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "10\n20\n3",
    "expected_output": "2",
    "task_finish_time": 1708943245054,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 595,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1186625399",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-beautiful-integers low high k)\n  (-> exact-integer? exact-integer? exact-integer? exact-integer?)\n  (define (is-beautiful? n)\n    (let* ((digits (string->list (number->string n)))\n           (even-count (count (lambda (d) (even? (char->integer d (- (char->integer d) 48)))) digits))\n           (odd-count (count (lambda (d) (odd? (char->integer d (- (char->integer d) 48)))) digits)))\n      (and (= even-count odd-count) (zero? (modulo n k)))))\n  (length (filter is-beautiful? (range low (+ high 1)))))"
}