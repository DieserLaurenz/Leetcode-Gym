{
    "status_code": 12,
    "lang": "erlang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 836440000,
    "question_id": "3017",
    "elapsed_time": 1369,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "349863935\n772153463\n11",
    "expected_output": "0",
    "task_finish_time": 1708943342528,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 573,
    "total_testcases": 595,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1186626475",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "-spec number_of_beautiful_integers(Low :: integer(), High :: integer(), K :: integer()) -> integer().\nnumber_of_beautiful_integers(Low, High, K) ->\n    lists:foldl(fun(X, Acc) -> Acc + is_beautiful(X, K) end, 0, lists:seq(Low, High)).\n\nis_beautiful(Number, K) when Number rem K =:= 0 ->\n    Digits = integer_to_list(Number, []),\n    Even = length([X || X <- Digits, X rem 2 =:= 0]),\n    Odd = length(Digits) - Even,\n    case Even =:= Odd of\n        true -> 1;\n        false -> 0\n    end;\nis_beautiful(_Number, _K) ->\n    0.\n\ninteger_to_list(Number, Acc) when Number > 0 ->\n    integer_to_list(Number div 10, [Number rem 10 | Acc]);\ninteger_to_list(0, Acc) ->\n    Acc."
}