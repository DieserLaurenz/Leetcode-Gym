{
    "status_code": 12,
    "lang": "golang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 972852000,
    "question_id": "3017",
    "elapsed_time": 1068,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "10\n20\n3",
    "expected_output": "2",
    "task_finish_time": 1708942712087,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 595,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1186619313",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "func numberOfBeautifulIntegers(low int, high int, k int) int {\n    count := 0\n\n    // Generate all beautiful numbers in the possible range and check if they are in the given range\n    for evenDigits := 1; evenDigits <= 10; evenDigits++ {\n        for oddDigits := 1; oddDigits <= 10; oddDigits++ {\n            if evenDigits != oddDigits {\n                continue\n            }\n            totalDigits := evenDigits + oddDigits\n            numbers := generateNumbers(totalDigits, totalDigits/2)\n            for _, num := range numbers {\n                if num >= low && num <= high && num%k == 0 {\n                    count++\n                }\n            }\n        }\n    }\n\n    return count\n}\n\n// generateNumbers generates numbers with a total of `totalDigits` digits, half of which are even, half odd.\nfunc generateNumbers(totalDigits, evenDigits int) []int {\n    if totalDigits == 0 {\n        return []int{0}\n    }\n    if totalDigits == 1 {\n        return []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    }\n\n    var result []int\n    previous := generateNumbers(totalDigits-1, evenDigits)\n    for _, p := range previous {\n        if totalDigits > evenDigits*2 {\n            // Add odd digits\n            for _, odd := range []int{1, 3, 5, 7, 9} {\n                result = append(result, p*10+odd)\n            }\n        } else {\n            // Add even digits\n            for _, even := range []int{0, 2, 4, 6, 8} {\n                result = append(result, p*10+even)\n            }\n        }\n    }\n    return result\n}"
}