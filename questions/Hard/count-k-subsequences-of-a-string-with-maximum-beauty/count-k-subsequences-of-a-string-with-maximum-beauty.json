{
    "acRate": 28.257372654155493,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2842",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Count K-Subsequences of a String With Maximum Beauty",
    "titleSlug": "count-k-subsequences-of-a-string-with-maximum-beauty",
    "topicTags": [
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Combinatorics",
            "id": "VG9waWNUYWdOb2RlOjYxMDU2",
            "slug": "combinatorics"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int countKSubsequencesWithMaxBeauty(string s, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int countKSubsequencesWithMaxBeauty(String s, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def countKSubsequencesWithMaxBeauty(self, s, k):         \"\"\"         :type s: str         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def countKSubsequencesWithMaxBeauty(self, s: str, k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int countKSubsequencesWithMaxBeauty(char* s, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int CountKSubsequencesWithMaxBeauty(string s, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @param {number} k  * @return {number}  */ var countKSubsequencesWithMaxBeauty = function(s, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function countKSubsequencesWithMaxBeauty(s: string, k: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @param Integer $k      * @return Integer      */     function countKSubsequencesWithMaxBeauty($s, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func countKSubsequencesWithMaxBeauty(_ s: String, _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun countKSubsequencesWithMaxBeauty(s: String, k: Int): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int countKSubsequencesWithMaxBeauty(String s, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func countKSubsequencesWithMaxBeauty(s string, k int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @param {Integer} k # @return {Integer} def count_k_subsequences_with_max_beauty(s, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def countKSubsequencesWithMaxBeauty(s: String, k: Int): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn count_k_subsequences_with_max_beauty(s: String, k: i32) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (count-k-subsequences-with-max-beauty s k)   (-> string? exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec count_k_subsequences_with_max_beauty(S :: unicode:unicode_binary(), K :: integer()) -> integer(). count_k_subsequences_with_max_beauty(S, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec count_k_subsequences_with_max_beauty(s :: String.t, k :: integer) :: integer   def count_k_subsequences_with_max_beauty(s, k) do    end end"
        }
    ],
    "content": "You are given a string s and an integer k. A k-subsequence is a subsequence of s, having length k, and all its characters are unique, i.e., every character occurs once. Let f(c) denote the number of times the character c occurs in s. The beauty of a k-subsequence is the sum of f(c) for every character c in the k-subsequence. For example, consider s = \"abbbdd\" and k = 2:  f('a') = 1, f('b') = 3, f('d') = 2 Some k-subsequences of s are:   \"abbbdd\" -> \"ab\" having a beauty of f('a') + f('b') = 4 \"abbbdd\" -> \"ad\" having a beauty of f('a') + f('d') = 3 \"abbbdd\" -> \"bd\" having a beauty of f('b') + f('d') = 5    Return an integer denoting the number of k-subsequences whose beauty is the maximum among all k-subsequences. Since the answer may be too large, return it modulo 109 + 7. A subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters. Notes  f(c) is the number of times a character c occurs in s, not a k-subsequence. Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.   Example 1:  Input: s = \"bcca\", k = 2 Output: 4 Explanation: From s we have f('a') = 1, f('b') = 1, and f('c') = 2. The k-subsequences of s are:  bcca having a beauty of f('b') + f('c') = 3  bcca having a beauty of f('b') + f('c') = 3  bcca having a beauty of f('b') + f('a') = 2  bcca having a beauty of f('c') + f('a') = 3 bcca having a beauty of f('c') + f('a') = 3  There are 4 k-subsequences that have the maximum beauty, 3.  Hence, the answer is 4.   Example 2:  Input: s = \"abbcd\", k = 4 Output: 2 Explanation: From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1.  The k-subsequences of s are:  abbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5 abbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5  There are 2 k-subsequences that have the maximum beauty, 5.  Hence, the answer is 2.    Constraints:  1 <= s.length <= 2 * 105 1 <= k <= s.length s consists only of lowercase English letters.  "
}