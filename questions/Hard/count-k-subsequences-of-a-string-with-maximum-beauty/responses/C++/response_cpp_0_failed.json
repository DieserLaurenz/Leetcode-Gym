{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8092000,
    "question_id": "3057",
    "elapsed_time": 13,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708308638048,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179361790",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int countKSubsequencesWithMaxBeauty(string s, int k) {\n        const int mod = 1e9 + 7;\n        unordered_map<char, int> freq;\n        for (char c : s) freq[c]++;\n        \n        vector<int> beauties;\n        for (auto &[_, count] : freq) beauties.push_back(count);\n        \n        sort(beauties.rbegin(), beauties.rend());\n        \n        long long maxBeauty = 0;\n        for (int i = 0; i < k; ++i) maxBeauty += beauties[i];\n        \n        vector<vector<long long>> dp(k + 1, vector<long long>(beauties.size() + 1, 0));\n        dp[0][0] = 1;\n        \n        for (int i = 1; i <= beauties.size(); ++i) {\n            for (int j = 0; j <= k; ++j) {\n                dp[j][i] = dp[j][i - 1];\n                if (j > 0) dp[j][i] = (dp[j][i] + dp[j - 1][i - 1] * beauties[i - 1]) % mod;\n            }\n        }\n        \n        long long count = 0;\n        for (int i = 0; i <= beauties.size(); ++i) {\n            if (i >= k && beauties[i - k] == beauties[k - 1]) {\n                count = (count + dp[k][i]) % mod;\n            }\n        }\n        \n        return count;\n    }\n};"
}