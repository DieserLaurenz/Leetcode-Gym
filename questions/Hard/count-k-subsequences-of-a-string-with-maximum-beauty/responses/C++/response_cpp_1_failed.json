{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8304000,
    "question_id": "3057",
    "elapsed_time": 14,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708308672178,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179362107",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int countKSubsequencesWithMaxBeauty(string s, int k) {\n        const int mod = 1e9 + 7;\n        unordered_map<char, int> freq;\n        for (char c : s) ++freq[c];\n\n        // Collect frequencies in descending order\n        vector<int> frequencies;\n        for (const auto& p : freq) frequencies.push_back(p.second);\n        sort(frequencies.rbegin(), frequencies.rend());\n\n        // Calculate the maximum beauty\n        long long maxBeauty = 0;\n        for (int i = 0; i < k; ++i) maxBeauty += frequencies[i];\n\n        // Combinatorial calculation\n        vector<vector<long long>> comb(26, vector<long long>(k+1, 0));\n        for (int i = 0; i < 26; ++i) {\n            comb[i][0] = 1;\n            for (int j = 1; j <= min(i, k); ++j)\n                comb[i][j] = (comb[i-1][j] + comb[i-1][j-1]) % mod;\n        }\n\n        long long ans = 1;\n        int extra = 0; // Count characters with the same frequency as the k-th\n        for (int i = 0; i < frequencies.size(); ++i) {\n            if (i < k) {\n                int freq = frequencies[i];\n                if (i < k-1 && freq == frequencies[i+1])\n                    continue; // Skip until the last of the duplicates\n                int count = count_if(frequencies.begin(), frequencies.end(),\n                                     [freq](int x) { return x == freq; });\n                ans = ans * comb[extra + count][count] % mod;\n                extra += count - 1; // Adjust extra for already used\n            } else if (frequencies[i] == frequencies[k-1]) {\n                extra++; // Increment extra for characters with the same frequency as the k-th\n            }\n        }\n\n        return ans;\n    }\n};"
}