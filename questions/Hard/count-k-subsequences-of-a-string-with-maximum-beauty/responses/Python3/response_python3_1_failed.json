{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16784000,
    "question_id": "3057",
    "elapsed_time": 54,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708869753538,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185819060",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def countKSubsequencesWithMaxBeauty(self, s: str, k: int) -> int:\n        from collections import Counter\n        from math import comb\n\n        MOD = 10**9 + 7\n        freq = Counter(s)\n        values = list(freq.values())\n        values.sort(reverse=True)\n\n        max_beauty = sum(values[:k])\n        count_max_beauty = 0\n\n        # Calculate the number of subsequences with maximum beauty\n        for i in range(1, k + 1):\n            if sum(values[:i]) < max_beauty:\n                break\n            if i == k or values[i] < values[i - 1]:\n                same_freq = values[:i].count(values[i - 1])\n                total_freq = same_freq + values[i:].count(values[i - 1])\n                count_max_beauty += comb(total_freq, same_freq)\n                count_max_beauty %= MOD\n\n        return count_max_beauty"
}