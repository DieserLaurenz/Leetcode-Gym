{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18848000,
    "question_id": "3057",
    "elapsed_time": 98,
    "compare_result": "00111111111111111111111111111111111111111111111111111111111111111110011111111000011100111111011111001111010101111111100111101000111001100001011010011111010100000101010111001001010000000000111000000001110000000101000000000000110000001000011001000001000100000000000000000100110010000001100000000000010000100001000000000100101111101010010000011110000000000000000000101000001110010001111000000000000000000101000001000100100110011011100001100011001100110100000000100000000000101100000000010001110111000000001000100011011100000110101001001110100011001000100000111111111111111111111111111100000000001000000100000011000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708869722333,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 264,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185818697",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def countKSubsequencesWithMaxBeauty(self, s: str, k: int) -> int:\n        from collections import Counter\n        from math import comb\n        MOD = 10**9 + 7\n\n        char_freq = Counter(s)\n        freq_values = sorted(char_freq.values(), reverse=True)\n\n        # Calculate the sum of the k highest frequencies\n        max_beauty = sum(freq_values[:k])\n\n        # Count how many characters have each frequency\n        freq_counter = Counter(freq_values)\n        unique_freqs = sorted(list(freq_counter.keys()), reverse=True)\n\n        # Calculate the number of ways to choose k characters that achieve the max beauty\n        ways = 1\n        for freq in unique_freqs:\n            if k <= 0:\n                break\n            if freq_counter[freq] <= k:\n                ways *= comb(freq_counter[freq], k)\n                k -= freq_counter[freq]\n            else:\n                ways *= comb(freq_counter[freq], k)\n                k = 0\n            ways %= MOD\n        \n        return ways"
}