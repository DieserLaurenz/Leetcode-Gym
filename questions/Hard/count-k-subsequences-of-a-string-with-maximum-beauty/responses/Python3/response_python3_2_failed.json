{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16740000,
    "question_id": "3057",
    "elapsed_time": 52,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708869793610,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185819536",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def countKSubsequencesWithMaxBeauty(self, s: str, k: int) -> int:\n        from collections import Counter\n        MOD = 10**9 + 7\n\n        freq = Counter(s)\n        # Sort characters by their frequency in descending order, then by character\n        sorted_chars = sorted(freq, key=lambda x: (-freq[x], x))\n\n        # Calculate the maximum beauty\n        max_beauty = sum(sorted(freq.values(), reverse=True)[:k])\n        \n        # Find all characters that contribute to the maximum beauty\n        contributing_chars = [c for c in sorted_chars if freq[c] >= freq[sorted_chars[k-1]]]\n\n        # Count combinations for characters with frequency equal to the k-th contributing character's frequency\n        last_char_freq = freq[sorted_chars[k-1]]\n        equal_freq_chars = [c for c in contributing_chars if freq[c] == last_char_freq]\n        total_ways = 0\n\n        if len(equal_freq_chars) > 1:\n            from math import comb\n            for i in range(k - (len(contributing_chars) - len(equal_freq_chars)), min(k, len(equal_freq_chars)) + 1):\n                total_ways += comb(len(equal_freq_chars), i)\n                total_ways %= MOD\n        else:\n            total_ways = 1\n\n        return total_ways"
}