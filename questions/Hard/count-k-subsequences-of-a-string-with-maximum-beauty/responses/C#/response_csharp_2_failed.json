{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 46472000,
    "question_id": "3057",
    "elapsed_time": 116,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708309157450,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 153,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1179366962",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    private const int MOD = 1000000007;\n\n    public int CountKSubsequencesWithMaxBeauty(string s, int k) {\n        int[] freq = new int[26];\n        foreach (char c in s) freq[c - 'a']++;\n\n        int[] count = new int[s.Length + 1];\n        foreach (int f in freq) if (f > 0) count[f]++;\n\n        long maxBeauty = 0, ways = 1;\n        for (int i = count.Length - 1; i >= 0 && k > 0; i--) {\n            int take = Math.Min(count[i], k);\n            maxBeauty += (long)take * i;\n            k -= take;\n            ways = (ways * Combination(count[i], take)) % MOD;\n        }\n\n        return (int)ways;\n    }\n\n    private long Combination(int n, int k) {\n        long result = 1;\n        for (int i = 1; i <= k; i++) {\n            result = result * (n - i + 1) % MOD;\n            result = result * ModularInverse(i, MOD) % MOD;\n        }\n        return result;\n    }\n\n    private long ModularInverse(long a, long m) {\n        long m0 = m, t, q;\n        long x0 = 0, x1 = 1;\n\n        if (m == 1) return 0;\n\n        // Apply extended Euclid Algorithm\n        while (a > 1) {\n            // q is quotient\n            q = a / m;\n            t = m;\n\n            // m is remainder now, process same as\n            // Euclid's algo\n            m = a % m;\n            a = t;\n            t = x0;\n            x0 = x1 - q * x0;\n            x1 = t;\n        }\n\n        // Make x1 positive\n        if (x1 < 0) x1 += m0;\n\n        return x1;\n    }\n}"
}