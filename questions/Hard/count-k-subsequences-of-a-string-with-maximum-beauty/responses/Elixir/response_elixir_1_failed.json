{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 168704000,
    "question_id": "3057",
    "elapsed_time": 1040,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708319474597,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 161,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1179493413",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  def count_k_subsequences_with_max_beauty(s, k) do\n    counts = s |> String.graphemes() |> Enum.frequencies() |> Enum.map(fn {_, v} -> v end)\n    sorted_counts = Enum.sort(counts, :desc)\n    max_beauty = Enum.take(sorted_counts, k) |> Enum.sum()\n    combinations = Enum.filter(counts, fn count -> count >= max_beauty end) |> length()\n    Enum.reduce(1..k, 1, fn _, acc -> acc * combinations end) |> rem(1_000_000_007)\n  end\nend"
}