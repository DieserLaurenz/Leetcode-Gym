{
    "status_code": 15,
    "lang": "php",
    "run_success": false,
    "runtime_error": "Line 19: PHP Fatal error:  Uncaught ArgumentCountError: pow() expects exactly 2 arguments, 3 given in solution.php",
    "full_runtime_error": "Line 19: PHP Fatal error:  Uncaught ArgumentCountError: pow() expects exactly 2 arguments, 3 given in solution.php\nStack trace:\n#0 solution.php: pow()\n#1 solution.php: Solution->countKSubsequencesWithMaxBeauty()\n#2 {main}",
    "status_runtime": "N/A",
    "memory": 20160000,
    "question_id": "3057",
    "elapsed_time": 20,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708318067061,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1179471965",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function countKSubsequencesWithMaxBeauty($s, $k) {\n        $mod = 1000000007;\n        $freq = array_count_values(str_split($s));\n        $freqValues = array_values($freq);\n        \n        // Calculate factorials and inverse factorials for later combinations calculation\n        $maxN = max($freqValues) + 1;\n        $factorial = array_fill(0, $maxN, 1);\n        $inverseFactorial = array_fill(0, $maxN, 1);\n        for ($i = 2; $i < $maxN; $i++) {\n            $factorial[$i] = ($factorial[$i - 1] * $i) % $mod;\n            $inverseFactorial[$i] = pow($factorial[$i], $mod - 2, $mod); // Fermat's little theorem for modular inverse\n        }\n\n        // Combination function using precomputed factorials and their inverses\n        $comb = function($n, $k) use ($mod, $factorial, $inverseFactorial) {\n            if ($k > $n) return 0;\n            return $factorial[$n] * $inverseFactorial[$k] % $mod * $inverseFactorial[$n - $k] % $mod;\n        };\n\n        $result = 0;\n        foreach ($freq as $char => $count) {\n            if ($count >= $k) {\n                $result = ($result + $comb($count, $k)) % $mod;\n            }\n        }\n\n        return $result;\n    }\n}"
}