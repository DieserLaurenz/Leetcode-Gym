{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "vector-set!: contract violation",
    "full_runtime_error": "vector-set!: contract violation\n  expected: (and/c vector? (not/c immutable?))\n  given: #<procedure:...213solution.rkt:5:52>\n  context...:\n   solution.rkt:1:0: count-k-subsequences-with-max-beauty\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:31:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99828000,
    "question_id": "3057",
    "elapsed_time": 260,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708319199175,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1179489213",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (count-k-subsequences-with-max-beauty s k)\n  (-> string? exact-integer? exact-integer?)\n  (let* ([mod 1000000007]\n         [freq (make-hash)]\n         [comb (make-vector (+ (string-length s) 1) (lambda () (make-vector (+ (string-length s) 1) 0)))]\n         [ans 0])\n    ;; Calculate frequencies of each character\n    (for ([c (in-string s)])\n      (hash-update! freq c add1 0))\n    (let ([vals (sort (hash-values freq) >)])\n      (when (>= (length vals) k)\n        (let ([max-beauty (+ (apply + (take vals k)))])\n          ;; Initialize combination table\n          (for ([i (in-range (+ (string-length s) 1))])\n            (vector-set! (vector-ref comb i) 0 1)\n            (for ([j (in-range 1 (+ i 1))])\n              (vector-set! (vector-ref comb i) j\n                           (if (= j 0) 0\n                               (modulo (+ (vector-ref (vector-ref comb (- i 1)) (- j 1))\n                                          (vector-ref (vector-ref comb (- i 1)) j))\n                                       mod)))))\n          ;; Calculate answer\n          (for ([val (in-list vals)])\n            (when (= val (car vals))\n              (set! ans (modulo (+ ans (vector-ref (vector-ref comb val) k)) mod)))))\n        ans))))"
}