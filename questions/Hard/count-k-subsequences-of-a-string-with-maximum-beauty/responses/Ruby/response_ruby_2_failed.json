{
    "status_code": 15,
    "lang": "ruby",
    "run_success": false,
    "runtime_error": "Line 10: wrong number of arguments (given 0, expected 1..2) (ArgumentError) in solution.rb (inject)",
    "full_runtime_error": "Line 10: wrong number of arguments (given 0, expected 1..2) (ArgumentError) in solution.rb (inject)\n  max_beauty = max_beauty_combinations.map(&:inject).max\n                                           ^^^^^^^^\nLine 10 in solution.rb (map)\nLine 10 in solution.rb (count_k_subsequences_with_max_beauty)\nLine 32 in solution.rb (__driver_helper__)\nLine 47 in solution.rb (block in _driver)\nLine 42 in solution.rb (each)\nLine 42 in solution.rb (each_slice)\nLine 42 in solution.rb (_driver)\nLine 59 in solution.rb (<main>)",
    "status_runtime": "N/A",
    "memory": 211160000,
    "question_id": "3057",
    "elapsed_time": 214,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708318820671,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1179483361",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef count_k_subsequences_with_max_beauty(s, k)\n  mod = 10**9 + 7\n  count = Hash.new(0)\n  s.each_char { |c| count[c] += 1 }\n  frequencies = count.values.sort.reverse\n  max_beauty_combinations = frequencies.combination(k).select { |combo| combo.inject(:+) == frequencies.first(k).inject(:+) }\n  max_beauty = max_beauty_combinations.map(&:inject).max\n  \n  # Count the number of ways to choose k characters such that their combined frequency equals max_beauty\n  ways = 0\n  count.values.each do |frequency|\n    ways += 1 if frequency == max_beauty\n  end\n  \n  # Calculate combinations of characters that can form the max beauty\n  result = 1\n  count.each do |char, frequency|\n    next if frequency < max_beauty / k\n    result *= frequency\n    result %= mod\n  end\n  \n  result\nend"
}