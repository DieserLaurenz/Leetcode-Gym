{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41856000,
    "question_id": "3057",
    "elapsed_time": 272,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708308824125,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 29,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1179363584",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int countKSubsequencesWithMaxBeauty(String s, int k) {\n        final int MOD = 1000000007;\n        int[] freq = new int[26];\n        for (char c : s.toCharArray()) {\n            freq[c - 'a']++;\n        }\n\n        // Sort frequencies in descending order\n        Integer[] freqSorted = new Integer[26];\n        for (int i = 0; i < 26; i++) {\n            freqSorted[i] = freq[i];\n        }\n        Arrays.sort(freqSorted, Collections.reverseOrder());\n\n        // Calculate the maximum beauty\n        long maxBeauty = 0;\n        for (int i = 0; i < k; i++) {\n            maxBeauty += freqSorted[i];\n        }\n\n        // Count combinations for achieving max beauty\n        long count = 1;\n        for (int i = 0; i < k; i++) {\n            int f = freqSorted[i];\n            long combinations = 0;\n            for (int j = 0; j < 26; j++) {\n                if (freq[j] == f) {\n                    combinations++;\n                }\n            }\n\n            count = (count * combinations) % MOD;\n            // Reduce frequency to avoid recounting the same character\n            for (int j = 0; j < 26; j++) {\n                if (freq[j] == f) {\n                    freq[j]--;\n                    break;\n                }\n            }\n        }\n\n        return (int) count;\n    }\n}"
}