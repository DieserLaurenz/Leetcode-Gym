{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45708000,
    "display_runtime": "3",
    "question_id": "3057",
    "elapsed_time": 183,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708308782723,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1179363186",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int countKSubsequencesWithMaxBeauty(String s, int k) {\n        final int MOD = 1000000007;\n        int[] freq = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            freq[s.charAt(i) - 'a']++;\n        }\n        \n        // Find the beauty of all possible k-subsequences\n        long maxBeauty = 0;\n        for (int i = 0; i < 26; i++) {\n            if (freq[i] > 0) {\n                maxBeauty += freq[i];\n            }\n        }\n        \n        // Count how many characters have the maximum frequency\n        int maxFreq = 0;\n        for (int f : freq) {\n            if (f > maxFreq) {\n                maxFreq = f;\n            }\n        }\n        \n        // Calculate the number of k-subsequences with maximum beauty\n        long count = 1;\n        for (int i = 0; i < 26; i++) {\n            if (freq[i] == maxFreq) {\n                count = (count * (freq[i] + 1)) % MOD;\n            }\n        }\n        \n        // Adjust the count for the k characters\n        for (int i = 1; i <= k; i++) {\n            count = (count * i) % MOD;\n        }\n        \n        return (int) count;\n    }\n}"
}