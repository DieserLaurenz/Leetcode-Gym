{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2484000,
    "question_id": "3057",
    "elapsed_time": 24,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708319065800,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 174,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1179487160",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_k_subsequences_with_max_beauty(s: String, k: i32) -> i32 {\n        use std::collections::HashMap;\n        \n        let mut char_count = HashMap::new();\n        for c in s.chars() {\n            *char_count.entry(c).or_insert(0) += 1;\n        }\n        \n        let mut counts: Vec<_> = char_count.values().cloned().collect();\n        counts.sort_unstable_by(|a, b| b.cmp(a));\n        \n        if k as usize > counts.len() {\n            return 0;\n        }\n        \n        let mut max_beauty = 0;\n        for i in 0..k as usize {\n            max_beauty += counts[i];\n        }\n        \n        let mut combinations = 1;\n        let modulo = 1_000_000_007;\n        for i in 0..k as usize {\n            combinations = (combinations * (counts[i] - max_beauty + k)) % modulo;\n        }\n        \n        combinations\n    }\n}"
}