{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 154716000,
    "question_id": "3057",
    "elapsed_time": 576,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708318536303,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 160,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1179479095",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int countKSubsequencesWithMaxBeauty(String s, int k) {\n    const int mod = 1000000007;\n    final Map<String, int> freq = {};\n    for (int i = 0; i < s.length; i++) {\n      freq[s[i]] = (freq[s[i]] ?? 0) + 1;\n    }\n    List<int> counts = freq.values.toList();\n    counts.sort((a, b) => b.compareTo(a));\n\n    if (k > counts.length) return 0;\n\n    int maxBeauty = counts.take(k).reduce((a, b) => a + b);\n    List<List<int>> choose = List.generate(counts.length + 1,\n        (i) => List.generate(k + 1, (j) => 0));\n    for (int i = 0; i <= counts.length; i++) {\n      choose[i][0] = 1;\n      for (int j = 1; j <= k && j <= i; j++) {\n        choose[i][j] = (choose[i - 1][j] + choose[i - 1][j - 1]) % mod;\n      }\n    }\n\n    int result = 0;\n    for (int i = 0; i < counts.length; i++) {\n      if (counts[i] >= k) {\n        result = (result + choose[counts[i]][k]) % mod;\n      }\n    }\n\n    return result;\n  }\n}"
}