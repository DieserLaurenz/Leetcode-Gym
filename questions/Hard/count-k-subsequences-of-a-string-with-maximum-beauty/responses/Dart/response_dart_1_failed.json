{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 148344000,
    "question_id": "3057",
    "elapsed_time": 457,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708318497586,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1179478486",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int countKSubsequencesWithMaxBeauty(String s, int k) {\n    const int mod = 1000000007;\n    final Map<String, int> freq = {};\n    for (final char in s.split('')) {\n      freq[char] = (freq[char] ?? 0) + 1;\n    }\n    final List<int> values = freq.values.toList()..sort((a, b) => b.compareTo(a));\n    List<int> factorials = List.filled(s.length + 1, 1);\n    for (int i = 1; i <= s.length; i++) {\n      factorials[i] = (factorials[i - 1] * i) % mod;\n    }\n    int maxBeauty = 0;\n    for (int i = 0; i < k; i++) {\n      maxBeauty += values[i];\n    }\n    int combinations = 1;\n    for (int i = 0; i < k; i++) {\n      combinations = (combinations * (values[i] - k + 1 + i)) % mod;\n    }\n    return combinations;\n  }\n}"
}