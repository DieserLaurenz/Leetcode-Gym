{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 3: exception error: badarg",
    "full_runtime_error": "Line 3: exception error: badarg\n[{binary,bin_to_list,\n         [2],\n         [{file,\"binary.erl\"},\n          {line,482},\n          {error_info,#{module => erl_stdlib_errors}}]},\n {solution,count_k_subsequences_with_max_beauty,2,\n              [{file,\"solution.erl\"},{line,3}]},\n {solution,count_k_subsequences_with_max_beauty,2,\n              [{file,\"solution.erl\"},{line,9}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,31}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,17}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,48}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 61032000,
    "question_id": "3057",
    "elapsed_time": 1366,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708319300445,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1179490804",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec count_k_subsequences_with_max_beauty(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_k_subsequences_with_max_beauty(S, K) ->\n    Freqs = lists:foldl(fun(C, Acc) -> maps:update_with(C, fun(X) -> X + 1 end, 1, Acc) end, #{}, binary:bin_to_list(S)),\n    SortedFreqs = lists:reverse(lists:sort(maps:values(Freqs))),\n    {MaxFreqs, Rest} = lists:split(K, SortedFreqs),\n    MaxBeauty = lists:sum(MaxFreqs),\n    CountMaxBeauty = fun\n        (0, _) -> 1;\n        (N, [H|T]) when N >= H -> (H * count_k_subsequences_with_max_beauty(N - H, T)) rem 1000000007;\n        (N, [H|_]) when N < H -> N;\n        (_, []) -> 0\n    end,\n    CountMaxBeauty(MaxBeauty, Rest) rem 1000000007."
}