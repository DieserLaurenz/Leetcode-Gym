{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128796000,
    "question_id": "3057",
    "elapsed_time": 1562,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708319368105,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 112,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1179491779",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_k_subsequences_with_max_beauty(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_k_subsequences_with_max_beauty(S, K) ->\n    Freqs = lists:foldl(fun(C, Acc) -> maps:update_with(C, fun(X) -> X + 1 end, 1, Acc) end, #{}, binary:bin_to_list(S)),\n    Values = lists:sort(maps:values(Freqs)),\n    MaxValues = lists:reverse(tl(lists:reverse(Values))),\n    Comb = fun(N, K) when N >= K -> \n                  Prod = lists:foldl(fun(X, {P, I}) -> {P * X div I, I + 1} end, {1, 1}, lists:seq(N - K + 1, N)),\n                  Prod;\n               (_, _) -> \n                  {0, 0}\n           end,\n    Count = fun\n        Count([], _, Acc) -> Acc;\n        Count([H|T], K, Acc) when H >= K ->\n            {C, _} = Comb(H, K),\n            Count(T, K, (Acc + C) rem 1000000007);\n        Count(_, _, Acc) -> Acc\n    end,\n    Count(MaxValues, K, 0)."
}