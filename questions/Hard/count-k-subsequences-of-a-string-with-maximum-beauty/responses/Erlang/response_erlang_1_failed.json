{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 132132000,
    "question_id": "3057",
    "elapsed_time": 1582,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708319335874,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 148,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1179491320",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec count_k_subsequences_with_max_beauty(S :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_k_subsequences_with_max_beauty(S, K) ->\n    Freqs = lists:foldl(fun(C, Acc) -> maps:update_with(C, fun(X) -> X + 1 end, 1, Acc) end, #{}, binary:bin_to_list(unicode:characters_to_binary(S))),\n    SortedFreqs = lists:sublist(lists:reverse(lists:sort(maps:values(Freqs))), K),\n    MaxBeauty = lists:foldl(fun(X, Acc) -> X + Acc end, 0, SortedFreqs),\n    CountMaxBeauty = fun CountMaxBeauty(0, _, Acc) -> Acc;\n                          CountMaxBeauty(N, [H|T], Acc) when N > 0 -> CountMaxBeauty(N - 1, T, Acc * H rem 1000000007);\n                          CountMaxBeauty(_, [], Acc) -> Acc\n                        end,\n    CountMaxBeauty(K, SortedFreqs, 1) rem 1000000007."
}