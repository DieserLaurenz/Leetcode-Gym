{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37772000,
    "question_id": "3057",
    "elapsed_time": 183,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708318303480,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 46,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1179475540",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun countKSubsequencesWithMaxBeauty(s: String, k: Int): Int {\n        val mod = 1_000_000_007\n        val freq = IntArray(26)\n        for (char in s) {\n            freq[char - 'a']++\n        }\n        freq.sortDescending()\n        var maxBeauty = freq.take(k).sum()\n        val freqCount = IntArray(s.length + 1)\n        for (f in freq) {\n            freqCount[f]++\n        }\n        var combinations = 1L\n        for (i in 0 until k) {\n            combinations = combinations * freqCount[freq[i]] % mod\n            freqCount[freq[i]]--\n        }\n        return combinations.toInt()\n    }\n}"
}