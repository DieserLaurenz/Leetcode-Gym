{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5288000,
    "question_id": "3057",
    "elapsed_time": 25,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708308976747,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 29,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1179365087",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\n// Function to calculate power with modulo\nlong long power(long long base, int exponent, int modulo) {\n    long long result = 1;\n    base = base % modulo;\n    while (exponent > 0) {\n        if (exponent & 1)\n            result = (result * base) % modulo;\n        exponent = exponent >> 1;\n        base = (base * base) % modulo;\n    }\n    return result;\n}\n\n// Function to calculate factorial modulo mod\nlong long factorialMod(int n, int mod) {\n    long long result = 1;\n    for (int i = 1; i <= n; ++i) {\n        result = (result * i) % mod;\n    }\n    return result;\n}\n\n// Function to calculate modular inverse using Fermat's little theorem\nlong long modInverse(long long n, int mod) {\n    return power(n, mod - 2, mod);\n}\n\n// Main function to count k-subsequences with max beauty\nint countKSubsequencesWithMaxBeauty(char* s, int k) {\n    int freq[26] = {0};\n    int n = strlen(s);\n    \n    // Count frequency of each character in s\n    for (int i = 0; i < n; i++) {\n        freq[s[i] - 'a']++;\n    }\n    \n    // Sort frequencies in decreasing order\n    for (int i = 0; i < 26 - 1; i++) {\n        for (int j = 0; j < 26 - i - 1; j++) {\n            if (freq[j] < freq[j + 1]) {\n                int temp = freq[j];\n                freq[j] = freq[j + 1];\n                freq[j + 1] = temp;\n            }\n        }\n    }\n\n    // Find the maximum beauty and the number of characters with that frequency\n    long long maxBeauty = 0, ways = 1;\n    for (int i = 0; i < k; i++) {\n        maxBeauty += freq[i];\n    }\n\n    // Count frequencies of each frequency value\n    int freqCount[101] = {0}; // Assuming maximum frequency of a character in s does not exceed 100\n    for (int i = 0; i < 26; i++) {\n        if (freq[i] > 0) freqCount[freq[i]]++;\n    }\n\n    // Calculate combinations for each frequency level\n    for (int i = 0; i < k && i < 26; i++) {\n        if (freqCount[freq[i]] > 1) {\n            int f = freqCount[freq[i]];\n            long long numerator = factorialMod(f, MOD);\n            long long denominator = (factorialMod(f - 1, MOD) * modInverse(k - i, MOD)) % MOD;\n            ways = (ways * numerator * modInverse(denominator, MOD)) % MOD;\n            freqCount[freq[i]]--;\n        }\n    }\n\n    return (int)(ways % MOD);\n}"
}