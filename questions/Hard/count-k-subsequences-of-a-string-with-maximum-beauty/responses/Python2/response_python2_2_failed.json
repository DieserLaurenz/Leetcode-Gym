{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 14832000,
    "question_id": "3057",
    "elapsed_time": 191,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708869650434,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 266,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185817847",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def countKSubsequencesWithMaxBeauty(self, s, k):\n        from collections import Counter\n        mod = 10**9 + 7\n\n        # Count the frequency of each character in s\n        freq = Counter(s)\n        # Get all unique frequencies in descending order\n        unique_freqs = sorted(set(freq.values()), reverse=True)\n\n        # Calculate the maximum beauty a k-subsequence can have\n        max_beauty = sum(sorted(freq.values(), reverse=True)[:k])\n\n        # Initialize variables to store the total number of ways to achieve max beauty\n        ways = 0\n\n        def nCr(n, r):\n            if n < r:\n                return 0\n            # Factorial function\n            f = 1\n            for i in range(2, n+1):\n                f = f * i\n            return (f // (factorial(r) * factorial(n-r))) % mod\n\n        # Function to calculate factorial modulo mod\n        def factorial(x):\n            ans = 1\n            for i in range(2, x+1):\n                ans = (ans * i) % mod\n            return ans\n\n        # Check every combination of frequencies to find those that sum up to max_beauty\n        for freq_value in unique_freqs:\n            # Count how many characters have this frequency\n            chars_with_freq = sum(1 for f in freq.values() if f == freq_value)\n            # If there are enough characters with this frequency to form a k-subsequence\n            if chars_with_freq >= k:\n                # Calculate the number of ways to choose k characters among those with this frequency\n                ways += nCr(chars_with_freq, k)\n                ways %= mod\n\n        return ways"
}