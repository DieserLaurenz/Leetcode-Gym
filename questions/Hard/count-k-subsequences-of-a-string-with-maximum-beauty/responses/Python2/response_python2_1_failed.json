{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 14652000,
    "question_id": "3057",
    "elapsed_time": 189,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708869612257,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185817382",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def countKSubsequencesWithMaxBeauty(self, s, k):\n        from collections import Counter\n        mod = 10**9 + 7\n\n        # Count frequency of each character\n        freq = Counter(s)\n        values = list(freq.values())\n        values.sort(reverse=True)\n\n        # Calculate prefix sums of frequencies and combinations\n        prefix_sums = [0] * (len(values) + 1)\n        for i in range(1, len(values) + 1):\n            prefix_sums[i] = prefix_sums[i-1] + values[i-1]\n\n        max_beauty = sum(values[:k])\n\n        # Calculate number of ways to achieve max beauty\n        def nCr(n, r):\n            if r > n:\n                return 0\n            r = min(r, n - r)\n            numerator = denominator = 1\n            for i in range(1, r + 1):\n                numerator = (numerator * (n + 1 - i)) % mod\n                denominator = (denominator * i) % mod\n            return numerator * pow(denominator, mod - 2, mod) % mod\n\n        count = 0\n        for i in range(len(values)):\n            if i + k > len(values):\n                break\n            if prefix_sums[i + k] - prefix_sums[i] == max_beauty:\n                # Count combinations of remaining characters after choosing k with maximum beauty\n                if i + k < len(values) and values[i + k] == values[i + k - 1]:\n                    continue\n                cnt = values.count(values[i + k - 1])\n                idx = i + k - 1\n                while idx < len(values) and values[idx] == values[i + k - 1]:\n                    idx += 1\n                count += nCr(cnt, idx - (i + k - 1))\n                count %= mod\n\n        return count"
}