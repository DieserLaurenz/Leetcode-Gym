{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11864000,
    "question_id": "3057",
    "elapsed_time": 28,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708869574344,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185816925",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def countKSubsequencesWithMaxBeauty(self, s, k):\n        from collections import Counter\n        from math import factorial\n\n        def nCr(n, r):\n            return factorial(n) // (factorial(r) * factorial(n - r))\n\n        mod = 10**9 + 7\n        freq = Counter(s)\n        freq_values = sorted(freq.values(), reverse=True)\n\n        if k == 1:\n            return sum(v == freq_values[0] for v in freq_values) % mod\n\n        max_beauty = sum(freq_values[:k])\n        ways = 1\n        i = 0\n\n        while i < k:\n            if i == 0 or freq_values[i] != freq_values[i-1]:\n                total_count = sum(v == freq_values[i] for v in freq_values)\n                selected_count = sum(v == freq_values[i] for v in freq_values[:k])\n                ways *= nCr(total_count, selected_count)\n                ways %= mod\n            i += selected_count\n\n        return ways % mod"
}