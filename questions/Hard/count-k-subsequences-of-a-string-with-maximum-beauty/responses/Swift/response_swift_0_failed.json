{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16684000,
    "question_id": "3057",
    "elapsed_time": 113,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708318161210,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 184,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179473399",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func countKSubsequencesWithMaxBeauty(_ s: String, _ k: Int) -> Int {\n        let mod = 1_000_000_007\n        var charCounts = [Character: Int]()\n        for char in s {\n            charCounts[char, default: 0] += 1\n        }\n        \n        let frequencies = charCounts.values.sorted(by: >)\n        if frequencies.count < k {\n            return 0\n        }\n        \n        var maxBeauty = frequencies.prefix(k).reduce(0, +)\n        var ways = 1\n        var freqCount = [Int: Int]()\n        for freq in frequencies {\n            freqCount[freq, default: 0] += 1\n        }\n        \n        var used = [Int: Int]()\n        for i in 0..<k {\n            let freq = frequencies[i]\n            used[freq, default: 0] += 1\n            let totalFreq = freqCount[freq]!\n            let usedFreq = used[freq]!\n            ways = ways * (totalFreq - usedFreq + 1) % mod\n        }\n        \n        return ways\n    }\n}"
}