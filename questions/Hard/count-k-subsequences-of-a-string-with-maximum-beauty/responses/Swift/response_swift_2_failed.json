{
    "status_code": 15,
    "lang": "swift",
    "run_success": false,
    "runtime_error": "*** Program crashed: Illegal instruction at 0x000055d337b3a245 ***",
    "full_runtime_error": "*** Program crashed: Illegal instruction at 0x000055d337b3a245 ***\nThread 0 \"prog\" crashed:\n0  0x000055d337b3a245 specialized Solution.countKSubsequencesWithMaxBeauty(_:_:) + 581 in prog\nRegisters:\nrax 0x000055d33917efa0  b8 0e ae b7 8b 7f 00 00 03 00 00 00 00 00 00 00  \u00b8\u00b7\u00ae\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nrdx 0x000055d33917e810  18 99 be b7 8b 7f 00 00 03 00 00 00 00 00 00 00  \u00b7\u00b7\u00be\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nrcx 0xfffffffe00000000  18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nrbx 0x0000000400000003  18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nrsi 0x000055d33917e748  03 00 00 00 04 00 00 00 03 00 00 00 00 00 00 00  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nrdi 0x000055d33917e760  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nrbp 0x0000000000000003  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nrsp 0x00007ffc9d039da0  80 e7 17 39 d3 55 00 00 30 ee 17 39 d3 55 00 00  \u00b7\u00e7\u00b79\u00d3U\u00b7\u00b70\u00ee\u00b79\u00d3U\u00b7\u00b7\n r8 0x000055d33917e860  7e 91 33 5d 05 00 00 00 fd 6b 09 f4 e6 7d d5 d6  ~\u00b73]\u00b7\u00b7\u00b7\u00b7\u00fdk\u00b7\u00f4\u00e6}\u00d5\u00d6\n r9 0x0000000000000000  7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e  ~~~~~~~~~~~~~~~~\nr10 0x00007f8bb7b05d7c  09 00 00 00 03 00 00 00 01 00 00 00 38 27 d6 ff  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b78'\u00d6\u00ff\nr11 0xd6d57de6f4096bfd  09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nr12 0x0000000000000000  09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nr13 0x0000000000000002  09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nr14 0x000055d33917efa0  b8 0e ae b7 8b 7f 00 00 03 00 00 00 00 00 00 00  \u00b8\u00b7\u00ae\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\nr15 0x0000000000000003  b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8  \u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\u00b8\nrip 0x000055d337b3a245  0f 0b 0f 0b 0f 0b 0f 0b 0f 0b 48 8b 3c 24 e8 e8  \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7H\u00b7<$\u00e8\u00e8\nrflags 0x0000000000010206  PF\ncs 0x0033  fs 0x0000  gs 0x0000\nImages (18 omitted):",
    "status_runtime": "N/A",
    "memory": 18476000,
    "question_id": "3057",
    "elapsed_time": 685,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708318251332,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179474777",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    func countKSubsequencesWithMaxBeauty(_ s: String, _ k: Int) -> Int {\n        let mod = 1_000_000_007\n        var charCounts = [Int](repeating: 0, count: 26) // Count of each character\n        s.forEach { charCounts[Int($0.asciiValue! - Character(\"a\").asciiValue!)] += 1 }\n        \n        // Counts of characters sorted by their frequency in descending order\n        let sortedCounts = charCounts.filter { $0 > 0 }.sorted(by: >)\n        \n        // Dynamic programming table for combinations: C(n, k) = n! / (k! * (n-k)!)\n        var combination = Array(repeating: Array(repeating: 0, count: k+1), count: sortedCounts.count + 1)\n        for i in 0...sortedCounts.count {\n            combination[i][0] = 1 // Base case: C(n, 0) = 1\n            for j in 1...min(i, k) {\n                combination[i][j] = (combination[i-1][j] + combination[i-1][j-1]) % mod\n            }\n        }\n        \n        // Calculate the number of k-subsequences with max beauty\n        var total = 0\n        func dfs(_ index: Int, _ remainingK: Int, _ currentProduct: Int) {\n            if remainingK == 0 {\n                total = (total + currentProduct) % mod\n                return\n            }\n            if index == sortedCounts.count {\n                return\n            }\n            \n            // Skip this character\n            dfs(index + 1, remainingK, currentProduct)\n            \n            // Include this character if its count is enough to contribute to remainingK\n            if sortedCounts[index] >= remainingK {\n                let nextProduct = (currentProduct * combination[sortedCounts[index]][remainingK]) % mod\n                dfs(index + 1, 0, nextProduct)\n            }\n        }\n        \n        dfs(0, k, 1)\n        return total\n    }\n}"
}