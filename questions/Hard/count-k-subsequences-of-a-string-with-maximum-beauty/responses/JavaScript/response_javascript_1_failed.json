{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63296000,
    "question_id": "3057",
    "elapsed_time": 171,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708309249791,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 166,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1179367856",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar countKSubsequencesWithMaxBeauty = function(s, k) {\n    const mod = 10**9 + 7;\n    let freq = {};\n    for (let char of s) {\n        freq[char] = (freq[char] || 0) + 1;\n    }\n\n    let values = Object.values(freq).sort((a, b) => b - a);\n    let maxBeautyValues = values.slice(0, k);\n    let maxBeauty = maxBeautyValues.reduce((acc, val) => acc + val, 0);\n    let counts = new Array(maxBeauty + 1).fill(0);\n    for (let val of values) {\n        counts[val] = (counts[val] || 0) + 1;\n    }\n\n    let comb = (n, r) => {\n        let result = 1;\n        for (let i = 1; i <= r; ++i) {\n            result = (result * (n - i + 1)) / i;\n        }\n        return result;\n    };\n\n    let ways = 1;\n    for (let val of maxBeautyValues) {\n        ways = (ways * comb(counts[val], maxBeautyValues.filter(x => x === val).length)) % mod;\n        counts[val] -= maxBeautyValues.filter(x => x === val).length;\n    }\n\n    return ways;\n};"
}