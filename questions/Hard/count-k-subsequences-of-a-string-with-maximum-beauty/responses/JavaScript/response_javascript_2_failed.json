{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60560000,
    "question_id": "3057",
    "elapsed_time": 161,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708309288654,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 89,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1179368242",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar countKSubsequencesWithMaxBeauty = function(s, k) {\n    const mod = 1e9 + 7;\n    const freq = new Array(26).fill(0);\n    for (const char of s) {\n        freq[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n\n    const combinations = (n, k) => {\n        let result = 1;\n        for (let i = 1; i <= k; ++i) {\n            result = (result * (n - i + 1)) / i;\n        }\n        return result;\n    }\n\n    freq.sort((a, b) => b - a);\n    const topKFreq = freq.slice(0, k);\n\n    let maxBeauty = topKFreq.reduce((acc, val) => acc + val, 0);\n    let ways = 1;\n    for (let i = 0; i < k; ++i) {\n        const freqCount = freq.filter(f => f === topKFreq[i]).length;\n        ways = (ways * combinations(freqCount, freq.slice(0, k).filter(f => f === topKFreq[i]).length)) % mod;\n    }\n\n    return ways;\n};"
}