{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60768000,
    "question_id": "3057",
    "elapsed_time": 189,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708309440465,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 73,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1179369830",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function countKSubsequencesWithMaxBeauty(s: string, k: number): number {\n    const mod = 1e9 + 7;\n    const freq = new Map<string, number>();\n    for (const char of s) {\n        freq.set(char, (freq.get(char) || 0) + 1);\n    }\n    const beauties = Array.from(freq.values());\n    beauties.sort((a, b) => b - a);\n\n    let maxBeauty = 0;\n    for (let i = 0; i < k; i++) {\n        maxBeauty += beauties[i];\n    }\n\n    let ways = 1;\n    let freqCounter = new Map<number, number>();\n    for (const beauty of beauties) {\n        freqCounter.set(beauty, (freqCounter.get(beauty) || 0) + 1);\n    }\n\n    for (let i = 0; i < k; i++) {\n        const freqOfBeauty = freqCounter.get(beauties[i])!;\n        ways = (ways * freqOfBeauty) % mod;\n        freqCounter.set(beauties[i], freqOfBeauty - 1);\n    }\n\n    return ways;\n}"
}