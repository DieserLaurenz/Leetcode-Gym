{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58892000,
    "question_id": "3057",
    "elapsed_time": 119,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708309405805,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 166,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1179369469",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function countKSubsequencesWithMaxBeauty(s: string, k: number): number {\n    const mod = 1e9 + 7;\n    const freq = new Array(26).fill(0);\n    for (let i = 0; i < s.length; i++) {\n        freq[s.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n    const freqCounts = new Array(s.length + 1).fill(0);\n    for (let i = 0; i < 26; i++) {\n        if (freq[i] > 0) {\n            freqCounts[freq[i]]++;\n        }\n    }\n    let total = 0, combinations = 1;\n    for (let i = s.length; i > 0; i--) {\n        if (freqCounts[i] === 0) continue;\n        for (let j = 1; j <= Math.min(freqCounts[i], k - total); j++) {\n            combinations = (combinations * (freqCounts[i] - j + 1)) % mod;\n            combinations = (combinations * modInv(j, mod)) % mod;\n            if (total + j === k) {\n                total = (total + combinations) % mod;\n                return total;\n            }\n        }\n        total += freqCounts[i];\n        if (total >= k) break;\n    }\n    return total;\n\n    function modInv(a: number, mod: number): number {\n        let m0 = mod, t, q;\n        let x0 = 0, x1 = 1;\n        if (mod === 1) return 0;\n        while (a > 1) {\n            q = Math.floor(a / mod);\n            t = mod;\n            mod = a % mod;\n            a = t;\n            t = x0;\n            x0 = x1 - q * x0;\n            x1 = t;\n        }\n        if (x1 < 0) x1 += m0;\n        return x1;\n    }\n}"
}