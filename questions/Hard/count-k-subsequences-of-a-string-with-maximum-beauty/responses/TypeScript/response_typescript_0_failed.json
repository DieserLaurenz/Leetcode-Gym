{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59836000,
    "question_id": "3057",
    "elapsed_time": 131,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708309348712,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1179368873",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function countKSubsequencesWithMaxBeauty(s: string, k: number): number {\n    const mod = 1e9 + 7;\n    const freq = new Array(26).fill(0);\n    for (const char of s) {\n        freq[char.charCodeAt(0) - 'a'.charCodeAt(0)]++;\n    }\n    freq.sort((a, b) => b - a);\n    let maxBeauty = freq.slice(0, k).reduce((a, b) => a + b, 0);\n    let count = 1;\n    let sameFreq = 1;\n    for (let i = 1; i < k; i++) {\n        if (freq[i] === freq[i - 1]) {\n            sameFreq++;\n            count = (count * sameFreq) % mod;\n        } else {\n            sameFreq = 1;\n        }\n    }\n    return count;\n};"
}