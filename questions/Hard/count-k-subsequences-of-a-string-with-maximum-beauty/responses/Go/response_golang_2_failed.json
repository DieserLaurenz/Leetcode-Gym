{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6700000,
    "question_id": "3057",
    "elapsed_time": 65,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"bcca\"\n2",
    "expected_output": "4",
    "task_finish_time": 1708318693031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 310,
    "total_testcases": 611,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1179481422",
    "input_formatted": "\"bcca\", 2",
    "input": "\"bcca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countKSubsequencesWithMaxBeauty(s string, k int) int {\n const MOD int = 1e9 + 7\n freq := make(map[rune]int)\n for _, c := range s {\n  freq[c]++\n }\n\n beauties := make([]int, 0, len(freq))\n for _, f := range freq {\n  beauties = append(beauties, f)\n }\n\n // Sort the beauties in descending order\n sort.Slice(beauties, func(i, j int) bool {\n  return beauties[i] > beauties[j]\n })\n\n // Calculate the maximum beauty\n maxBeauty := 0\n if len(beauties) >= k {\n  for i := 0; i < k; i++ {\n   maxBeauty += beauties[i]\n  }\n }\n\n // Calculate combinations using dynamic programming\n dp := make([][]int, len(beauties)+1)\n for i := range dp {\n  dp[i] = make([]int, k+1)\n  dp[i][0] = 1\n }\n for i := 1; i <= len(beauties); i++ {\n  for j := 1; j <= k; j++ {\n   dp[i][j] = dp[i-1][j] + dp[i-1][j-1]*beauties[i-1]\n   dp[i][j] %= MOD\n  }\n }\n\n return dp[len(beauties)][k]\n}"
}