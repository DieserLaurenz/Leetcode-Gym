{
    "status_code": 14,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 126124000,
    "question_id": "3248",
    "elapsed_time": 5018,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[499,222,413,246,415,313,171,264,243,488,249,110,299,317,280,297,396,378,111,197,291,354,493,185,469,377,306,425,452,153,492,237,454,312,147,338,139,123,200,166,300,436,377,136,407,160,392,321,197,109,355,275,295,448,307,183,114,353,182,424,338,433,340,408,464,242,261,392,493,264,205,213,315,417,482,122,146,196,315,399,152,125,197,347,349,165,201,105,432,208,143,221,320,465,282,124,316,135,156,373,138,228,338,425,127,273,343,417,419,231,311,402,373,299,400,187,430,399,131,283,300,104,112,262,357,364,366,126,238,500,264,432,192,165,329,157,457,125,131,389,358,212,500,391,496,123,200,134,361,220,113,368,186,391,495,500,347,434,374,124,369,288,178,281,455,293,390,183,136,100,216,165,328,428,437,297,439,101,293,372,382,221,141,431,395,232,318,173,153,210,369,448,380,228,436,324,340,125,342,366,234,145,464,401,274,103,144,117,189,150,275,140,199,452,244,216,209,434,493,268,223,290,181,197,247,193,200,399,331,449,131,167,245,233,234,371,123,288,154,187,392,147,490,378,123,425,379,410,421,229,445,449,406,203,144,302,408,180,383,249,294,239,107,372,237,108,238,276,325,443,374,427,280,132,200,260,245,458,295,445,251,465,446,332,477,329,159,254,126,197,357,134,465,300,180,111,272,362,293,426,407,438,481,452,209,168,111,398,338,498,189,489,282,139,458,287,119,255,216,333,314,443,429,307,465,324,321,360,351,144,121,422,232,477,268,107,407,228,235,416,136,330,188,364,234,479,173,348,438,111,263,271,353,128,114,126,469,430,290,103,130,407,335,145,218,307,345,332,122,151,262,452,218,416,408,482,387,143,239,159,488,500,191,147,394,367,406,106,331,324,129,180,329,334,485,428,140,289,285,215,177,347,307,422,189,247,329,270,313,139,341,491,371,251,385,481,416,153,223,469,193,124,235,414,459,236,414,396,472,162,252,344,377,363,170,250,158,271,354,118,156,458,422,278,495,287,356,228,119,169,392,392,261,411,309,153,355,173,248,194,236,206,348,224,228,466,139,367,174,463,294,251,163,192,262,327,406,349,349,290,191,160,383,118,317,426,441,142,434,131,239,197,258,345,426,479,404,414,255,422]",
    "expected_output": "4",
    "task_finish_time": 1708403030987,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 782,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1180561420",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (incremovable-subarray-count nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (strictly-increasing? lst)\n    (or (null? lst) (null? (cdr lst))\n        (and (< (car lst) (cadr lst)) (strictly-increasing? (cdr lst)))))\n  \n  (define (remove-subarray lst start end)\n    (append (take lst start) (drop lst (+ 1 end))))\n  \n  (define (incremovable? lst start end)\n    (strictly-increasing? (remove-subarray lst start end)))\n  \n  (define (count-incremovables lst)\n    (let loop ((start 0) (end 0) (count 0))\n      (cond\n        ((>= start (length lst)) count)\n        ((>= end (length lst)) (loop (+ start 1) (+ start 1) count))\n        (else (loop start (+ end 1)\n                    (if (incremovable? lst start end)\n                        (+ count 1)\n                        count)))))\n    )\n  \n  (count-incremovables nums)\n)"
}