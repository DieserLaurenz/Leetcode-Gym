{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9064000,
    "question_id": "3248",
    "elapsed_time": 130,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708402426031,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180553425",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func incremovableSubarrayCount(nums []int) int64 {\n    n := len(nums)\n    totalSubarrays := int64(n) * (int64(n) + 1) / 2 // Total number of subarrays\n    var stack []int // To keep track of the start of non-increasing sequences\n    var badSubarrays int64 // To count subarrays that cannot be removed to make the array strictly increasing\n\n    for i, num := range nums {\n        for len(stack) > 0 && nums[stack[len(stack)-1]] < num {\n            // When we find a number that is larger than the previous ones,\n            // it means the sequence can end with this number to be strictly increasing.\n            // We pop all elements that are smaller than the current number.\n            lastIndex := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            // Calculate the width of the sequence that ends at lastIndex\n            leftIndex := -1\n            if len(stack) > 0 {\n                leftIndex = stack[len(stack)-1]\n            }\n            // Count subarrays where lastIndex is the maximum element and cannot be removed\n            // to make the sequence strictly increasing\n            badSubarrays += int64(lastIndex-leftIndex) * int64(i-lastIndex)\n        }\n        stack = append(stack, i)\n    }\n\n    // Count remaining sequences that are non-increasing towards the end\n    for len(stack) > 0 {\n        lastIndex := stack[len(stack)-1]\n        stack = stack[:len(stack)-1]\n        leftIndex := -1\n        if len(stack) > 0 {\n            leftIndex = stack[len(stack)-1]\n        }\n        badSubarrays += int64(lastIndex-leftIndex) * int64(n-lastIndex)\n    }\n\n    // Subtract the bad subarrays from the total to get the incremovable subarrays\n    return totalSubarrays - badSubarrays\n}"
}