{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8776000,
    "question_id": "3248",
    "elapsed_time": 127,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708402459495,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 28,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180553881",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func incremovableSubarrayCount(nums []int) int64 {\n    var result int64\n    stack := []int{-1} // Initialize stack with -1 to handle edge case for the first element\n    nums = append(nums, 1<<31-1) // Append a large number at the end to flush the stack\n\n    for i, num := range nums {\n        for len(stack) > 1 && num >= nums[stack[len(stack)-1]] {\n            // Pop the middle element of a non-strictly increasing triplet\n            mid := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n\n            // Calculate the number of subarrays ending with mid as the smallest element\n            // that can be removed to make the remaining array strictly increasing\n            left := stack[len(stack)-1]\n            right := i\n\n            // Add the number of such subarrays to the result\n            result += int64(mid-left) * int64(right-mid)\n        }\n        stack = append(stack, i)\n    }\n\n    return result\n}"
}