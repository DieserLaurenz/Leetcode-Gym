{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11660000,
    "question_id": "3248",
    "elapsed_time": 141,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708402376789,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 28,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180552761",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func incremovableSubarrayCount(nums []int) int64 {\n    n := len(nums)\n    left := make([]int, n)\n    right := make([]int, n)\n    stack := []int{}\n\n    // Left limits\n    for i := 0; i < n; i++ {\n        for len(stack) > 0 && nums[stack[len(stack)-1]] >= nums[i] {\n            stack = stack[:len(stack)-1]\n        }\n        if len(stack) == 0 {\n            left[i] = -1\n        } else {\n            left[i] = stack[len(stack)-1]\n        }\n        stack = append(stack, i)\n    }\n\n    stack = []int{}\n\n    // Right limits\n    for i := n - 1; i >= 0; i-- {\n        for len(stack) > 0 && nums[stack[len(stack)-1]] > nums[i] {\n            stack = stack[:len(stack)-1]\n        }\n        if len(stack) == 0 {\n            right[i] = n\n        } else {\n            right[i] = stack[len(stack)-1]\n        }\n        stack = append(stack, i)\n    }\n\n    var result int64 = 0\n\n    // Calculate the count\n    for i := 0; i < n; i++ {\n        result += int64((i - left[i]) * (right[i] - i))\n    }\n\n    return result\n}"
}