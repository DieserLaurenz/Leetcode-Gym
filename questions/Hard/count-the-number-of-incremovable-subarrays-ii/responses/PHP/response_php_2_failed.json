{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27728000,
    "question_id": "3248",
    "elapsed_time": 337,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708393179310,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1180449300",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function incremovableSubarrayCount($nums) {\n        $n = count($nums);\n        $dp = array_fill(0, $n + 2, 0);\n        $result = 0;\n        $last = 0;\n\n        for ($i = 0; $i < $n; ++$i) {\n            if ($i > 0 && $nums[$i] <= $nums[$i - 1]) {\n                $last = $i;\n            }\n            $dp[$i + 1] = $last;\n        }\n\n        for ($i = $n - 1; $i >= 0; --$i) {\n            $dp[$i] = max($dp[$i], $dp[$i + 1]);\n        }\n\n        for ($i = 0; $i < $n; ++$i) {\n            $result += $i - $dp[$i + 1];\n        }\n\n        return $result;\n    }\n}"
}