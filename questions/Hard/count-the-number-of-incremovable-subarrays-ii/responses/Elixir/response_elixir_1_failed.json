{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 13: ** (ArgumentError) argument error",
    "full_runtime_error": "Line 13: ** (ArgumentError) argument error\n    (stdlib 5.1.1) array.erl:589: :array.set/3\n    solution.ex:13: anonymous fn/2 in Solution.incremovable_subarray_count/1\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:9: Solution.incremovable_subarray_count/1\n    solution.ex:53: Driver.consume_test_cases/2\n    solution.ex:41: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 74832000,
    "question_id": "3248",
    "elapsed_time": 457,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708403329946,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180565523",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec incremovable_subarray_count(nums :: [integer]) :: integer\n  def incremovable_subarray_count(nums) do\n    len = length(nums)\n    left = :array.new(len, {:default, 0})\n    right = :array.new(len, {:default, 0})\n\n    nums\n    |> Enum.reduce({:infinity, 0, left}, fn x, {prev, idx, left} ->\n      if x > prev do\n        left = :array.set(left, idx, idx - 1)\n      else\n        left = :array.set(left, idx, idx)\n      end\n      {x, idx + 1, left}\n    end)\n    |> elem(2)\n\n    |> Enum.reduce({:infinity, len - 1, right}, fn x, {prev, idx, right} ->\n      if x < prev do\n        right = :array.set(right, idx, idx + 1)\n      else\n        right = :array.set(right, idx, idx)\n      end\n      {x, idx - 1, right}\n    end)\n    |> elem(2)\n\n    |> Enum.with_index()\n    |> Enum.map(fn {r, idx} ->\n      l_val = :array.get(left, idx)\n      r - l_val - 1\n    end)\n    |> Enum.sum()\n    |> Kernel.+(len)\n  end\nend"
}