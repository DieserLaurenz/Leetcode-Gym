{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 11: ** (UndefinedFunctionError) function Enum.last/1 is undefined or private",
    "full_runtime_error": "Line 11: ** (UndefinedFunctionError) function Enum.last/1 is undefined or private\n    (elixir 1.15.7) Enum.last([1])\n    solution.ex:11: anonymous fn/4 in Solution.incremovable_subarray_count/1\n    (elixir 1.15.7) lib/enum.ex:721: anonymous fn/3 in Enum.count/2\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    solution.ex:6: anonymous fn/4 in Solution.incremovable_subarray_count/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:33: Driver.consume_test_cases/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 74672000,
    "question_id": "3248",
    "elapsed_time": 447,
    "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708403355330,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180565907",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec incremovable_subarray_count(nums :: [integer]) :: integer\n  def incremovable_subarray_count(nums) do\n    n = length(nums)\n    Enum.reduce(1..n, 0, fn i, acc ->\n      acc + Enum.count(1..(n-i+1), fn j ->\n        subarray = Enum.slice(nums, j-1, i)\n        prefix = Enum.slice(nums, 0, j-1)\n        suffix = Enum.slice(nums, j-1+i, n-(j-1+i))\n        is_incremovable = (prefix == [] or Enum.last(prefix) < hd(subarray)) and\n                          (suffix == [] or Enum.last(subarray) < hd(suffix)) and\n                          (Enum.sort(subarray) == subarray and Enum.uniq(subarray) == subarray)\n        is_incremovable && (prefix ++ suffix |> Enum.sort() == prefix ++ suffix) || i == 1\n      end)\n    end)\n  end\nend"
}