{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 202296000,
    "question_id": "3248",
    "elapsed_time": 1821,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708403293795,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 11,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180565013",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec incremovable_subarray_count(nums :: [integer]) :: integer\n  def incremovable_subarray_count(nums) do\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce({0, :infinity, :infinity, 0}, fn {num, idx}, {count, prev, min_start, total} ->\n      if num > prev do\n        {count + idx - min_start, num, min_start, total + count + idx - min_start}\n      else\n        {0, num, idx, total + 1}\n      end\n    end)\n    |> elem(3)\n  end\nend"
}