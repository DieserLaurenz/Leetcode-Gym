{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 186544000,
    "question_id": "3248",
    "elapsed_time": 513,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708393500370,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180452468",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int incremovableSubarrayCount(List<int> nums) {\n    int n = nums.length;\n    List<int> left = List.filled(n, 0);\n    List<int> right = List.filled(n, 0);\n    for (int i = 1; i < n; i++) {\n      if (nums[i] > nums[i - 1]) left[i] = left[i - 1] + 1;\n    }\n    for (int i = n - 2; i >= 0; i--) {\n      if (nums[i] < nums[i + 1]) right[i] = right[i + 1] + 1;\n    }\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i < n - 1 && nums[i - 1] < nums[i + 1]) {\n        count += (left[i - 1] + 1) * (right[i + 1] + 1);\n      } else {\n        count += left[i] + right[i] + 1;\n      }\n    }\n    return count - (n * (n + 1) / 2).toInt();\n  }\n}"
}