{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 161656000,
    "question_id": "3248",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708393539834,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180452813",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int incremovableSubarrayCount(List<int> nums) {\n    int total = 0, n = nums.length;\n    List<int> dp = List.filled(n, 0);\n    dp[n - 1] = 1; // Last element forms a strictly increasing subarray of length 1.\n    for (int i = n - 2; i >= 0; i--) {\n      if (nums[i] < nums[i + 1]) {\n        dp[i] = dp[i + 1] + 1;\n      } else {\n        dp[i] = 1;\n      }\n    }\n    for (int len = 1; len <= n; len++) {\n      for (int i = 0; i + len - 1 < n; i++) {\n        int j = i + len - 1;\n        if ((i == 0 || nums[i - 1] < nums[i]) && (j == n - 1 || nums[j] < nums[j + 1]) && (len == 1 || dp[i + 1] >= len - 1)) {\n          total++;\n        }\n      }\n    }\n    return total;\n  }\n}"
}