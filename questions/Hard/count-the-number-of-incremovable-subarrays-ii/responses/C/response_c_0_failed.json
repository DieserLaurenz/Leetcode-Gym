{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13384000,
    "question_id": "3248",
    "elapsed_time": 350,
    "compare_result
    "code_output": "-3",
    "std_output": "",
    "last_testcase": "[8,7,6,6]",
    "expected_output": "3",
    "task_finish_time": 1708392555867,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 37,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180443076",
    "input_formatted": "[8,7,6,6]",
    "input": "[8,7,6,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long incremovableSubarrayCount(int* nums, int numsSize) {\n    long long count = 0;\n    int left = 0, right = 0;\n\n    while (left < numsSize) {\n        right = left;\n        while (right + 1 < numsSize && nums[right] < nums[right + 1]) {\n            right++;\n        }\n        long long length = right - left + 1;\n        count += (length * (length + 1)) / 2;\n        left = right + 1;\n        if (left < numsSize && nums[left - 1] >= nums[left]) {\n            int decreaseCount = 2;\n            while (left - decreaseCount >= 0 && nums[left - decreaseCount] >= nums[left - decreaseCount + 1]) {\n                count -= decreaseCount;\n                decreaseCount++;\n            }\n        }\n    }\n    return count;\n}"
}