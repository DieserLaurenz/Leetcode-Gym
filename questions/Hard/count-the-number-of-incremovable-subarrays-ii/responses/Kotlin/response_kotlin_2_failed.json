{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60476000,
    "question_id": "3248",
    "elapsed_time": 653,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708393440943,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180451839",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun incremovableSubarrayCount(nums: IntArray): Long {\n        var total = 0L\n        val n = nums.size\n        val nextGreater = IntArray(n) { n }\n        val stack = java.util.Stack<Int>()\n\n        for (i in nums.indices) {\n            while (stack.isNotEmpty() && nums[stack.peek()] < nums[i]) {\n                nextGreater[stack.pop()] = i\n            }\n            stack.push(i)\n        }\n\n        for (i in nums.indices) {\n            for (j in i until nextGreater[i]) {\n                if (j + 1 < n && nums[j] >= nums[j + 1]) break\n                total++\n            }\n        }\n\n        return total\n    }\n}"
}