{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66052000,
    "question_id": "3248",
    "elapsed_time": 586,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708393381099,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180451254",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun incremovableSubarrayCount(nums: IntArray): Long {\n        val n = nums.size\n        val left = IntArray(n) { 0 }\n        val right = IntArray(n) { 0 }\n        var count: Long = 0\n\n        for (i in 1 until n) {\n            if (nums[i] <= nums[i - 1]) left[i] = left[i - 1] + 1\n        }\n        for (i in n - 2 downTo 0) {\n            if (nums[i] >= nums[i + 1]) right[i] = right[i + 1] + 1\n        }\n        for (i in nums.indices) {\n            count += (left[i] + 1).toLong() * (right[i] + 1).toLong()\n        }\n        return count - n\n    }\n}"
}