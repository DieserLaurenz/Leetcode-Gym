{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 29888000,
    "question_id": "3248",
    "elapsed_time": 851,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708871305920,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 28,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185837759",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def incremovableSubarrayCount(self, nums: List[int]) -> int:\n        def is_incremovable(left, right):\n            return left == 0 or right == len(nums) or nums[left - 1] < nums[right]\n        \n        n = len(nums)\n        dp = [0] * (n + 1)  # dp[i] stores the count of strictly increasing sequences ending at i\n        total = 0\n        \n        for i in range(n):\n            dp[i] = 1 + (dp[i - 1] if i > 0 and nums[i - 1] < nums[i] else 0)\n            total += dp[i]\n        \n        # Count the subarrays where removal does not result in strictly increasing order\n        for i in range(1, n):\n            if nums[i - 1] >= nums[i]:\n                left = i - 1\n                while left > 0 and nums[left - 1] < nums[i]:\n                    left -= 1\n                right = i + 1\n                while right < n and nums[right - 1] < nums[right]:\n                    right += 1\n                total += (i - left) * (right - i)\n                \n        return total"
}