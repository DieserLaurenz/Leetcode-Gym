{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 30300000,
    "question_id": "3248",
    "elapsed_time": 828,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708871338094,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 28,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185838138",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def incremovableSubarrayCount(self, nums: List[int]) -> int:\n        n = len(nums)\n        left = [0] * n\n        right = [0] * n\n        stack = []\n        \n        # Monotonically decreasing stack from the left\n        for i in range(n):\n            while stack and nums[stack[-1]] < nums[i]:\n                stack.pop()\n            left[i] = stack[-1] if stack else -1\n            stack.append(i)\n        \n        stack = []\n        # Monotonically decreasing stack from the right\n        for i in range(n - 1, -1, -1):\n            while stack and nums[stack[-1]] <= nums[i]:\n                stack.pop()\n            right[i] = stack[-1] if stack else n\n            stack.append(i)\n        \n        ans = 0\n        for i in range(n):\n            ans += (i - left[i]) * (right[i] - i)\n        \n        return ans"
}