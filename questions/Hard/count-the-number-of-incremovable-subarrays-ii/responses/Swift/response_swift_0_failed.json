{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19760000,
    "question_id": "3248",
    "elapsed_time": 471,
    "compare_result": "10011111111111111100000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111110000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000",
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708393247509,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 28,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1180449976",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func incremovableSubarrayCount(_ nums: [Int]) -> Int {\n        let n = nums.count\n        var left = [Int](repeating: 0, count: n)\n        var right = [Int](repeating: 0, count: n)\n        var stack: [Int] = []\n        \n        for i in 0..<n {\n            while !stack.isEmpty && nums[stack.last!] >= nums[i] {\n                stack.removeLast()\n            }\n            left[i] = stack.isEmpty ? -1 : stack.last!\n            stack.append(i)\n        }\n        \n        stack = []\n        for i in stride(from: n - 1, through: 0, by: -1) {\n            while !stack.isEmpty && nums[stack.last!] > nums[i] {\n                stack.removeLast()\n            }\n            right[i] = stack.isEmpty ? n : stack.last!\n            stack.append(i)\n        }\n        \n        var result = 0\n        for i in 0..<n {\n            result += (i - left[i]) * (right[i] - i)\n        }\n        \n        return result\n    }\n}"
}