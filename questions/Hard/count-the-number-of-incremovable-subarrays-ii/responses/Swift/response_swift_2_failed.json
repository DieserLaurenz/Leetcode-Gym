{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19808000,
    "question_id": "3248",
    "elapsed_time": 487,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708393312231,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1180450617",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func incremovableSubarrayCount(_ nums: [Int]) -> Int {\n        var result = 0\n        let n = nums.count\n        var prefix = Array(repeating: 0, count: n)\n        var suffix = Array(repeating: 0, count: n)\n        \n        prefix[0] = 1\n        for i in 1..<n {\n            if nums[i] > nums[i-1] {\n                prefix[i] = prefix[i-1] + 1\n            } else {\n                prefix[i] = 1\n            }\n        }\n        \n        suffix[n-1] = 1\n        for i in stride(from: n-2, through: 0, by: -1) {\n            if nums[i] < nums[i+1] {\n                suffix[i] = suffix[i+1] + 1\n            } else {\n                suffix[i] = 1\n            }\n        }\n        \n        for i in 0..<n {\n            if i > 0 && i < n-1 && nums[i-1] < nums[i+1] {\n                result = max(result, prefix[i-1] + suffix[i+1])\n            }\n            result = max(result, max(prefix[i], suffix[i]))\n        }\n        \n        var totalIncremovableSubarrays = 0\n        for i in 0..<n {\n            totalIncremovableSubarrays += (prefix[i] * (prefix[i] + 1)) / 2\n            if i > 0 && nums[i] > nums[i-1] {\n                totalIncremovableSubarrays -= (suffix[i] * (suffix[i] - 1)) / 2\n            }\n        }\n        \n        return totalIncremovableSubarrays - result\n    }\n}"
}