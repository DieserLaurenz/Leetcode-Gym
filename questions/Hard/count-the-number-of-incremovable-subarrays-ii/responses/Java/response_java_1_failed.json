{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57988000,
    "display_runtime": "2",
    "question_id": "3248",
    "elapsed_time": 374,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708392472980,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 10,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1180442276",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long incremovableSubarrayCount(int[] nums) {\n        int n = nums.length;\n        long totalSubarrays = (long) n * (n + 1) / 2;\n        int start = 0;\n\n        for (int end = 1; end < n; ++end) {\n            if (nums[end] <= nums[end - 1]) {\n                int length = end - start;\n                totalSubarrays -= (long) length * (length + 1) / 2;\n                start = end;\n            }\n        }\n\n        // For the last increasing sequence in the array\n        int length = n - start;\n        totalSubarrays -= (long) length * (length + 1) / 2;\n\n        return totalSubarrays + 1; // Including the empty subarray\n    }\n}"
}