{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 116020000,
    "question_id": "3248",
    "elapsed_time": 202,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708392313668,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 28,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180440718",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long incremovableSubarrayCount(std::vector<int>& nums) {\n        int n = nums.size();\n        std::vector<int> left(n), right(n);\n        std::vector<std::pair<int, int>> stack;\n        \n        // Compute the next smaller element on the left\n        for (int i = 0; i < n; ++i) {\n            while (!stack.empty() && stack.back().first >= nums[i]) stack.pop_back();\n            left[i] = stack.empty() ? -1 : stack.back().second;\n            stack.emplace_back(nums[i], i);\n        }\n        \n        stack.clear();\n        \n        // Compute the next smaller element on the right\n        for (int i = n - 1; i >= 0; --i) {\n            while (!stack.empty() && stack.back().first > nums[i]) stack.pop_back();\n            right[i] = stack.empty() ? n : stack.back().second;\n            stack.emplace_back(nums[i], i);\n        }\n        \n        long long ans = 0;\n        for (int i = 0; i < n; ++i) {\n            ans += (long long)(i - left[i]) * (right[i] - i);\n        }\n        \n        return ans;\n    }\n};"
}