{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 105356000,
    "question_id": "3248",
    "elapsed_time": 165,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708392389159,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 29,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180441442",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n\nclass Solution {\npublic:\n    long long incremovableSubarrayCount(std::vector<int>& nums) {\n        long long count = 0;\n        int n = nums.size();\n        std::vector<int> dp(n, 1); // dp[i] represents the length of longest increasing subsequence ending at i\n        std::vector<int> lis(n, 1); // lis[i] represents the length of longest increasing subsequence starting from i\n        \n        // Calculate dp (LIS ending at each index)\n        for (int i = 1; i < n; ++i) {\n            if (nums[i] > nums[i - 1]) dp[i] += dp[i - 1];\n        }\n        \n        // Calculate lis (LIS starting from each index)\n        for (int i = n - 2; i >= 0; --i) {\n            if (nums[i] < nums[i + 1]) lis[i] += lis[i + 1];\n        }\n        \n        // Count total incremovable subarrays\n        for (int i = 0; i < n; ++i) {\n            count += dp[i]; // Subarrays ending at i\n            if (i < n - 1 && nums[i] >= nums[i + 1]) {\n                // Count subarrays that can be formed by excluding elements after i\n                // which are part of a decreasing sequence starting from i\n                count += lis[i + 1] - 1;\n            }\n        }\n        \n        return count;\n    }\n};"
}