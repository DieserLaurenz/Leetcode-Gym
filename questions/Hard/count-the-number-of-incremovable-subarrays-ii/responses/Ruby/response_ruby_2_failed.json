{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 261488000,
    "question_id": "3248",
    "elapsed_time": 3096,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708402590037,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 14,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1180555621",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef incremovable_subarray_count(nums)\n    n = nums.length\n    lis_left = Array.new(n, 1)\n    lis_right = Array.new(n, 1)\n    total = 0\n\n    # Compute LIS ending at each index from the left\n    for i in 0...n\n        for j in 0...i\n            if nums[i] > nums[j]\n                lis_left[i] = [lis_left[i], lis_left[j] + 1].max\n            end\n        end\n    end\n\n    # Compute LIS starting at each index from the right\n    for i in (0...n).to_a.reverse\n        for j in (i+1...n).to_a.reverse\n            if nums[i] > nums[j]\n                lis_right[i] = [lis_right[i], lis_right[j] + 1].max\n            end\n        end\n    end\n\n    # Count subarrays that can be removed to make the array strictly increasing\n    for i in 0...n\n        total += [lis_left[i], lis_right[i]].min\n    end\n\n    total\nend"
}