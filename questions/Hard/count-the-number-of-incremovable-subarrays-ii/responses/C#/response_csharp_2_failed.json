{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50936000,
    "question_id": "3248",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708392757912,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 31,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180445067",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long IncremovableSubarrayCount(int[] nums) {\n        long count = 0;\n        for (int i = 0; i < nums.Length; i++) {\n            for (int j = i; j < nums.Length; j++) {\n                if (IsIncremovable(nums, i, j)) count++;\n            }\n        }\n        return count;\n    }\n\n    private bool IsIncremovable(int[] nums, int start, int end) {\n        bool leftIncreasing = start == 0 || nums[start - 1] < nums[start];\n        bool rightIncreasing = end == nums.Length - 1 || nums[end] < nums[end + 1];\n        if (!leftIncreasing || !rightIncreasing) return false;\n\n        for (int i = start + 1; i <= end; i++) {\n            if (nums[i - 1] >= nums[i]) return false;\n        }\n        return true;\n    }\n}"
}