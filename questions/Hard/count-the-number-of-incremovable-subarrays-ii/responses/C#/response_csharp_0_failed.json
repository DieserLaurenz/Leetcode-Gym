{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68476000,
    "question_id": "3248",
    "elapsed_time": 476,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[6,5,7,8]",
    "expected_output": "7",
    "task_finish_time": 1708392679302,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 28,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180444330",
    "input_formatted": "[6,5,7,8]",
    "input": "[6,5,7,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long IncremovableSubarrayCount(int[] nums) {\n        int n = nums.Length;\n        long total = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n\n        var stack = new Stack<int>();\n        for (int i = 0; i < n; i++) {\n            while (stack.Count > 0 && nums[stack.Peek()] <= nums[i]) stack.Pop();\n            left[i] = stack.Count == 0 ? -1 : stack.Peek();\n            stack.Push(i);\n        }\n\n        stack.Clear();\n        for (int i = n - 1; i >= 0; i--) {\n            while (stack.Count > 0 && nums[stack.Peek()] < nums[i]) stack.Pop();\n            right[i] = stack.Count == 0 ? n : stack.Peek();\n            stack.Push(i);\n        }\n\n        for (int i = 0; i < n; i++) {\n            total += (long)(i - left[i]) * (right[i] - i);\n        }\n\n        return total;\n    }\n}"
}