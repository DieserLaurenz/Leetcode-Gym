{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 195972000,
    "question_id": "3248",
    "elapsed_time": 2273,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708403154511,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180563119",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec incremovable_subarray_count(Nums :: [integer()]) -> integer().\nincremovable_subarray_count(Nums) ->\n  Length = length(Nums),\n  {_, _, Count} = lists:foldl(fun(X, {Prev, Max, Acc}) ->\n                                if\n                                  X > Prev ->\n                                    {X, max(Max, X), Acc + 1};\n                                  true ->\n                                    {X, Max, Acc + Length - Max}\n                                end\n                              end, {hd(Nums), 0, 0}, tl(Nums)),\n  Count."
}