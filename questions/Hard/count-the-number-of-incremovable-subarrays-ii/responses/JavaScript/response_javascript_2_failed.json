{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 62096000,
    "question_id": "3248",
    "elapsed_time": 147,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708392887267,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 18,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1180446377",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar incremovableSubarrayCount = function(nums) {\n    const n = nums.length;\n    let dp = Array.from({ length: n + 2 }, () => 0);\n    let totalSubarrays = 0;\n\n    for (let i = n - 1; i >= 0; i--) {\n        dp[i] = dp[i + 1];\n        if (i + 1 < n && nums[i] >= nums[i + 1]) {\n            dp[i] = Math.max(dp[i], dp[i + 2] + 1);\n        }\n        if (i + 2 < n && nums[i] >= nums[i + 2]) {\n            dp[i] = Math.max(dp[i], dp[i + 3] + 1);\n        }\n        totalSubarrays += dp[i];\n    }\n\n    return totalSubarrays + n; // Include all single-element subarrays\n};"
}