{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66872000,
    "question_id": "3248",
    "elapsed_time": 156,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708392825199,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 17,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1180445759",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar incremovableSubarrayCount = function(nums) {\n    let n = nums.length, count = 0;\n    let left = new Array(n).fill(0), right = new Array(n).fill(0);\n\n    // Compute the length of non-decreasing sequence ending at each position\n    left[0] = 1;\n    for (let i = 1; i < n; ++i) {\n        left[i] = nums[i] > nums[i - 1] ? left[i - 1] + 1 : 1;\n    }\n\n    // Compute the length of non-decreasing sequence starting at each position\n    right[n - 1] = 1;\n    for (let i = n - 2; i >= 0; --i) {\n        right[i] = nums[i] < nums[i + 1] ? right[i + 1] + 1 : 1;\n    }\n\n    // Count total incremovable subarrays\n    for (let i = 0; i < n; ++i) {\n        if (i > 0 && i < n - 1 && nums[i - 1] < nums[i + 1]) {\n            count += left[i - 1] * right[i + 1];\n        } else {\n            count += left[i] + right[i] - 1;\n        }\n    }\n\n    // Remove duplicates (each element is counted twice except the ones that can't form an incremovable subarray)\n    count -= n;\n\n    return count;\n};"
}