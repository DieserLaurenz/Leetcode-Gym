{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27164000,
    "question_id": "3248",
    "elapsed_time": 836,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708871175553,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185836124",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def incremovableSubarrayCount(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        left_strict = [0] * n\n        right_strict = [0] * n\n\n        for i in range(1, n):\n            if nums[i-1] < nums[i]:\n                left_strict[i] = left_strict[i-1] + 1\n            else:\n                left_strict[i] = 0\n\n        for i in range(n-2, -1, -1):\n            if nums[i] < nums[i+1]:\n                right_strict[i] = right_strict[i+1] + 1\n            else:\n                right_strict[i] = 0\n\n        total = 0\n        for i in range(n):\n            total += (left_strict[i] + 1) * (right_strict[i] + 1) - 1\n\n        return total"
}