{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 23808000,
    "question_id": "3248",
    "elapsed_time": 731,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "10",
    "task_finish_time": 1708871207833,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 839,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185836522",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def incremovableSubarrayCount(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        def count_decreasing_subarrays(nums):\n            count = 0\n            total = 0\n            for i in range(1, len(nums)):\n                if nums[i-1] >= nums[i]:\n                    count += 1\n                    total += count\n                else:\n                    count = 0\n            return total\n        \n        total_subarrays = len(nums) * (len(nums) + 1) // 2\n        return total_subarrays - count_decreasing_subarrays(nums) - count_decreasing_subarrays(nums[::-1])"
}