{
    "acRate": 36.783331063597984,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2972",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Count the Number of Incremovable Subarrays II",
    "titleSlug": "count-the-number-of-incremovable-subarrays-ii",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Two Pointers",
            "id": "VG9waWNUYWdOb2RlOjk=",
            "slug": "two-pointers"
        },
        {
            "name": "Binary Search",
            "id": "VG9waWNUYWdOb2RlOjEx",
            "slug": "binary-search"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "cpp": "class Solution { public:     long long incremovableSubarrayCount(vector<int>& nums) {              } };"
        },
        {
            "java": "class Solution {     public long incremovableSubarrayCount(int[] nums) {              } }"
        },
        {
            "python": "class Solution(object):     def incremovableSubarrayCount(self, nums):         \"\"\"         :type nums: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "python3": "class Solution:     def incremovableSubarrayCount(self, nums: List[int]) -> int:         "
        },
        {
            "c": "long long incremovableSubarrayCount(int* nums, int numsSize) {      }"
        },
        {
            "csharp": "public class Solution {     public long IncremovableSubarrayCount(int[] nums) {              } }"
        },
        {
            "javascript": "/**  * @param {number[]} nums  * @return {number}  */ var incremovableSubarrayCount = function(nums) {      };"
        },
        {
            "typescript": "function incremovableSubarrayCount(nums: number[]): number {      };"
        },
        {
            "php": "class Solution {      /**      * @param Integer[] $nums      * @return Integer      */     function incremovableSubarrayCount($nums) {              } }"
        },
        {
            "swift": "class Solution {     func incremovableSubarrayCount(_ nums: [Int]) -> Int {              } }"
        },
        {
            "kotlin": "class Solution {     fun incremovableSubarrayCount(nums: IntArray): Long {              } }"
        },
        {
            "dart": "class Solution {   int incremovableSubarrayCount(List<int> nums) {        } }"
        },
        {
            "golang": "func incremovableSubarrayCount(nums []int) int64 {      }"
        },
        {
            "ruby": "# @param {Integer[]} nums # @return {Integer} def incremovable_subarray_count(nums)      end"
        },
        {
            "scala": "object Solution {     def incremovableSubarrayCount(nums: Array[Int]): Long = {              } }"
        },
        {
            "rust": "impl Solution {     pub fn incremovable_subarray_count(nums: Vec<i32>) -> i64 {              } }"
        },
        {
            "racket": "(define/contract (incremovable-subarray-count nums)   (-> (listof exact-integer?) exact-integer?)   )"
        },
        {
            "erlang": "-spec incremovable_subarray_count(Nums :: [integer()]) -> integer(). incremovable_subarray_count(Nums) ->   ."
        },
        {
            "elixir": "defmodule Solution do   @spec incremovable_subarray_count(nums :: [integer]) :: integer   def incremovable_subarray_count(nums) do        end end"
        }
    ],
    "content": "You are given a 0-indexed array of positive integers nums. A subarray of nums is called incremovable if nums becomes strictly increasing on removing the subarray. For example, the subarray [3, 4] is an incremovable subarray of [5, 3, 4, 6, 7] because removing this subarray changes the array [5, 3, 4, 6, 7] to [5, 6, 7] which is strictly increasing. Return the total number of incremovable subarrays of nums. Note that an empty array is considered strictly increasing. A subarray is a contiguous non-empty sequence of elements within an array.  Example 1:  Input: nums = [1,2,3,4] Output: 10 Explanation: The 10 incremovable subarrays are: [1], [2], [3], [4], [1,2], [2,3], [3,4], [1,2,3], [2,3,4], and [1,2,3,4], because on removing any one of these subarrays nums becomes strictly increasing. Note that you cannot select an empty subarray.  Example 2:  Input: nums = [6,5,7,8] Output: 7 Explanation: The 7 incremovable subarrays are: [5], [6], [5,7], [6,5], [5,7,8], [6,5,7] and [6,5,7,8]. It can be shown that there are only 7 incremovable subarrays in nums.  Example 3:  Input: nums = [8,7,6,6] Output: 3 Explanation: The 3 incremovable subarrays are: [8,7,6], [7,6,6], and [8,7,6,6]. Note that [8,7] is not an incremovable subarray because after removing [8,7] nums becomes [6,6], which is sorted in ascending order but not strictly increasing.   Constraints:  1 <= nums.length <= 105 1 <= nums[i] <= 109  "
}