{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 93880000,
    "question_id": "2839",
    "elapsed_time": 1474,
    "compare_result
    "code_output": "[6,12,7]",
    "std_output": "",
    "last_testcase": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "expected_output": "[6,10,7]",
    "task_finish_time": 1708639422197,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 348,
    "total_testcases": 1414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1183461330",
    "input_formatted": "[4,3,1,2], [2,4,9,5], [[4,1],[1,3],[2,5]]",
    "input": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int[] MaximumSumQueries(int[] nums1, int[] nums2, int[][] queries) {\n        int[] ans = new int[queries.Length];\n        var pairs = new List<(int, int)>();\n        for (int i = 0; i < nums1.Length; i++) {\n            pairs.Add((nums1[i], nums2[i]));\n        }\n\n        pairs.Sort((a, b) => a.Item1 == b.Item1 ? b.Item2.CompareTo(a.Item2) : b.Item1.CompareTo(a.Item1));\n\n        var maxSofar = new List<int>();\n        int max = int.MinValue;\n        foreach (var pair in pairs) {\n            max = Math.Max(max, pair.Item2);\n            maxSofar.Add(max);\n        }\n\n        for (int i = 0; i < queries.Length; i++) {\n            int xi = queries[i][0];\n            int yi = queries[i][1];\n            int left = 0, right = pairs.Count - 1, idx = -1;\n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n                if (pairs[mid].Item1 >= xi) {\n                    if (pairs[mid].Item2 >= yi) {\n                        idx = mid;\n                        right = mid - 1;\n                    } else {\n                        left = mid + 1;\n                    }\n                } else {\n                    right = mid - 1;\n                }\n            }\n\n            if (idx == -1) ans[i] = -1;\n            else {\n                int max2 = int.MinValue;\n                for (int j = idx; j < pairs.Count && pairs[j].Item1 >= xi; j++) {\n                    max2 = Math.Max(max2, maxSofar[j]);\n                }\n                ans[i] = max2 >= yi ? pairs[idx].Item1 + max2 : -1;\n            }\n        }\n\n        return ans;\n    }\n}"
}