{
    "status_code": 20,
    "lang": "scala",
    "run_success": false,
    "compile_error": "Line 5: error: constructor cannot be instantiated to expected type; (in solution.scala)",
    "full_compile_error": "Line 5: error: constructor cannot be instantiated to expected type; (in solution.scala)\n found   : (T1, T2, T3)\n required: ((Int, Int), Int)\n            (n1, n2, index) <- nums1.zip(nums2).zipWithIndex\n            ^",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2839",
    "task_finish_time": 1708640624444,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183471404",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumSumQueries(nums1: Array[Int], nums2: Array[Int], queries: Array[Array[Int]]): Array[Int] = {\n        val sums = nums1.zip(nums2).map { case (n1, n2) => n1 + n2 }\n        val filteredIndices = for {\n            (n1, n2, index) <- nums1.zip(nums2).zipWithIndex\n        } yield (n1, n2, index)\n\n        queries.map { case Array(xi, yi) =>\n            filteredIndices\n                .filter { case (n1, n2, _) => n1 >= xi && n2 >= yi }\n                .map { case (_, _, index) => sums(index) }\n                .reduceOption(_ max _)\n                .getOrElse(-1)\n        }\n    }\n}"
}