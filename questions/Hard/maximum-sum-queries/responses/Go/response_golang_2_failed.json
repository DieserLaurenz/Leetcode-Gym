{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21524000,
    "question_id": "2839",
    "elapsed_time": 3012,
    "compare_result
    "code_output": "[10,10,10]",
    "std_output": "",
    "last_testcase": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "expected_output": "[6,10,7]",
    "task_finish_time": 1708640408401,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 292,
    "total_testcases": 1414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183469636",
    "input_formatted": "[4,3,1,2], [2,4,9,5], [[4,1],[1,3],[2,5]]",
    "input": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumSumQueries(nums1 []int, nums2 []int, queries [][]int) []int {\n    n := len(nums1)\n    sums := make([]int, n)\n    for i := 0; i < n; i++ {\n        sums[i] = nums1[i] + nums2[i]\n    }\n\n    type queryWithIndex struct {\n        x, y, index int\n    }\n    queriesWithIndex := make([]queryWithIndex, len(queries))\n    for i, q := range queries {\n        queriesWithIndex[i] = queryWithIndex{q[0], q[1], i}\n    }\n\n    sort.Slice(queriesWithIndex, func(i, j int) bool {\n        if queriesWithIndex[i].x == queriesWithIndex[j].x {\n            return queriesWithIndex[i].y < queriesWithIndex[j].y\n        }\n        return queriesWithIndex[i].x < queriesWithIndex[j].x\n    })\n\n    maxSums := make([]int, len(queries))\n    for i := range maxSums {\n        maxSums[i] = -1\n    }\n\n    maxX, maxY := queriesWithIndex[len(queriesWithIndex)-1].x, queriesWithIndex[len(queriesWithIndex)-1].y\n    maxXSum, maxYSum := make(map[int]int), make(map[int]int)\n\n    for _, q := range queriesWithIndex {\n        maxX = max(maxX, q.x)\n        maxY = max(maxY, q.y)\n        maxSumX, maxSumY := -1, -1\n        if sum, exists := maxXSum[q.x]; exists {\n            maxSumX = sum\n        } else {\n            for i := 0; i < n; i++ {\n                if nums1[i] >= q.x && sums[i] > maxSumX {\n                    maxSumX = sums[i]\n                }\n            }\n            maxXSum[q.x] = maxSumX\n        }\n        if sum, exists := maxYSum[q.y]; exists {\n            maxSumY = sum\n        } else {\n            for i := 0; i < n; i++ {\n                if nums2[i] >= q.y && sums[i] > maxSumY {\n                    maxSumY = sums[i]\n                }\n            }\n            maxYSum[q.y] = maxSumY\n        }\n        maxSums[q.index] = max(maxSumX, maxSumY)\n    }\n\n    return maxSums\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}