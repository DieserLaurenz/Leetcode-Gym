{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10408000,
    "question_id": "2839",
    "elapsed_time": 64,
    "compare_result
    "code_output": "[10,10,-1]",
    "std_output": "",
    "last_testcase": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "expected_output": "[6,10,7]",
    "task_finish_time": 1708649485759,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 297,
    "total_testcases": 1414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1183536662",
    "input_formatted": "[4,3,1,2], [2,4,9,5], [[4,1],[1,3],[2,5]]",
    "input": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn maximum_sum_queries(mut nums1: Vec<i32>, mut nums2: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        let mut sums: Vec<(i32, i32)> = nums1.into_iter().zip(nums2.into_iter()).collect();\n        sums.sort_unstable_by_key(|k| (k.0, k.1));\n        let mut prefix_max = Vec::new();\n        let mut current_max = std::i32::MIN;\n        for (x, y) in sums.iter() {\n            current_max = current_max.max(x + y);\n            prefix_max.push(current_max);\n        }\n        queries.iter().map(|query| {\n            let (xi, yi) = (query[0], query[1]);\n            let pos = sums.binary_search_by(|k| {\n                if k.0 >= xi && k.1 >= yi { std::cmp::Ordering::Greater }\n                else { std::cmp::Ordering::Less }\n            }).unwrap_or_else(|e| e);\n            if pos == sums.len() || sums[pos].0 < xi || sums[pos].1 < yi {\n                -1\n            } else {\n                *prefix_max.get(pos).unwrap_or(&-1)\n            }\n        }).collect()\n    }\n}"
}