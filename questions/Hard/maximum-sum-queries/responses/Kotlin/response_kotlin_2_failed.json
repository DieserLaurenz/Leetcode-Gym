{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 114296000,
    "question_id": "2839",
    "elapsed_time": 1095,
    "compare_result
    "code_output": "[-1,-1]",
    "std_output": "",
    "last_testcase": "[86,41,85]\n[42,89,16]\n[[67,51],[18,73]]",
    "expected_output": "[-1,130]",
    "task_finish_time": 1708640122213,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 999,
    "total_testcases": 1414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1183467178",
    "input_formatted": "[86,41,85], [42,89,16], [[67,51],[18,73]]",
    "input": "[86,41,85]\n[42,89,16]\n[[67,51],[18,73]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSumQueries(nums1: IntArray, nums2: IntArray, queries: Array<IntArray>): IntArray {\n        val sortedIndices = (nums1.indices).sortedWith(compareBy({ nums1[it] }, { nums2[it] }))\n        val sortedSums = sortedIndices.map { nums1[it] + nums2[it] }.toIntArray()\n        val maxSums = sortedSums.clone()\n        for (i in maxSums.size - 2 downTo 0) {\n            maxSums[i] = maxOf(maxSums[i], maxSums[i + 1])\n        }\n\n        return queries.map { query ->\n            var result = -1\n            val (x, y) = query\n            var low = 0\n            var high = sortedIndices.size - 1\n            while (low <= high) {\n                val mid = (low + high) / 2\n                if (nums1[sortedIndices[mid]] >= x && nums2[sortedIndices[mid]] >= y) {\n                    result = maxSums[mid]\n                    high = mid - 1\n                } else {\n                    low = mid + 1\n                }\n            }\n            result\n        }.toIntArray()\n    }\n}"
}