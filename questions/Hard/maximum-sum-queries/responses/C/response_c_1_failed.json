{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 28156000,
    "question_id": "2839",
    "elapsed_time": 3012,
    "compare_result
    "code_output": "[6,7,7]",
    "std_output": "",
    "last_testcase": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "expected_output": "[6,10,7]",
    "task_finish_time": 1708639283709,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 787,
    "total_testcases": 1414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1183460270",
    "input_formatted": "[4,3,1,2], [2,4,9,5], [[4,1],[1,3],[2,5]]",
    "input": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint cmp(const void *a, const void *b) {\n    int *pairA = *(int**)a;\n    int *pairB = *(int**)b;\n    if (pairA[0] == pairB[0]) return pairB[1] - pairA[1];\n    return pairB[0] - pairA[0];\n}\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maximumSumQueries(int* nums1, int nums1Size, int* nums2, int nums2Size, int** queries, int queriesSize, int* queriesColSize, int* returnSize) {\n    *returnSize = queriesSize;\n    int* answer = (int*)malloc(queriesSize * sizeof(int));\n    int** pairs = (int**)malloc(nums1Size * sizeof(int*));\n    for (int i = 0; i < nums1Size; i++) {\n        pairs[i] = (int*)malloc(2 * sizeof(int));\n        pairs[i][0] = nums1[i];\n        pairs[i][1] = nums2[i];\n    }\n\n    qsort(pairs, nums1Size, sizeof(pairs[0]), cmp);\n\n    for (int i = 0; i < queriesSize; i++) {\n        int maxSum = -1;\n        for (int j = 0; j < nums1Size; j++) {\n            if (pairs[j][0] >= queries[i][0] && pairs[j][1] >= queries[i][1]) {\n                maxSum = pairs[j][0] + pairs[j][1];\n                break; // Found the maximum possible sum for this query\n            }\n        }\n        answer[i] = maxSum;\n    }\n\n    // Free the allocated memory for pairs\n    for (int i = 0; i < nums1Size; i++) {\n        free(pairs[i]);\n    }\n    free(pairs);\n\n    return answer;\n}"
}