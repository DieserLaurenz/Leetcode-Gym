{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68488000,
    "question_id": "2839",
    "elapsed_time": 1642,
    "compare_result
    "code_output": "[10,10,10]",
    "std_output": "",
    "last_testcase": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "expected_output": "[6,10,7]",
    "task_finish_time": 1708902682423,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 314,
    "total_testcases": 1414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186199037",
    "input_formatted": "[4,3,1,2], [2,4,9,5], [[4,1],[1,3],[2,5]]",
    "input": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumSumQueries(self, nums1, nums2, queries):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        nums = sorted(zip(nums1, nums2, [n1+n2 for n1, n2 in zip(nums1, nums2)]), key=lambda x: (x[0], x[1]))\n        prefix_max = []\n        cur_max = -1\n        for _, _, sum_val in nums:\n            cur_max = max(cur_max, sum_val)\n            prefix_max.append(cur_max)\n\n        def find_max(x, y):\n            left, right = 0, len(nums) - 1\n            res = -1\n            while left <= right:\n                mid = (left + right) // 2\n                if nums[mid][0] >= x and nums[mid][1] >= y:\n                    res = mid\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            return prefix_max[res] if res != -1 else -1\n\n        result = [find_max(x, y) for x, y in queries]\n        return result"
}