{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126308000,
    "question_id": "2839",
    "elapsed_time": 5014,
    "compare_result
    "code_output": "[10,10,10]",
    "std_output": "",
    "last_testcase": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "expected_output": "[6,10,7]",
    "task_finish_time": 1708649633276,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 950,
    "total_testcases": 1414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1183537750",
    "input_formatted": "[4,3,1,2], [2,4,9,5], [[4,1],[1,3],[2,5]]",
    "input": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-sum-queries nums1 nums2 queries)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof (listof exact-integer?)) (listof exact-integer?))\n  (let* ((n (length nums1))\n         (sums (map + nums1 nums2))\n         (sorted-sums (sort sums >))\n         (indexed-sums (map list sums (range n)))\n         (sorted-indexed-sums (sort indexed-sums (lambda (x y) (> (car x) (car y)))))\n         (prefix-max (make-vector n))\n         (max-so-far -1))\n    (for ([i (in-range n)])\n      (set! max-so-far (max max-so-far (car (list-ref sorted-indexed-sums i))))\n      (vector-set! prefix-max i max-so-far))\n    (map (lambda (query)\n           (let* ((xi (first query))\n                  (yi (second query))\n                  (valid-indices (filter (lambda (idx)\n                                           (and (>= (list-ref nums1 (cadr idx)) xi)\n                                                (>= (list-ref nums2 (cadr idx)) yi)))\n                                         sorted-indexed-sums)))\n             (if (null? valid-indices)\n                 -1\n                 (vector-ref prefix-max (cadr (car valid-indices))))))\n         queries)))"
}