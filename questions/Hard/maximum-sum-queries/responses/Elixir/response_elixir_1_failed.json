{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (KeyError) key :third not found in: {4, 2, 6}",
    "full_runtime_error": "Line 6: ** (KeyError) key :third not found in: {4, 2, 6}\nIf you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map\n    solution.ex:6: anonymous fn/1 in Solution.maximum_sum_queries/3\n    (elixir 1.15.7) lib/enum.ex:3314: anonymous fn/3 in Enum.sort_by/3\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    (elixir 1.15.7) lib/enum.ex:3314: Enum.sort_by/3\n    solution.ex:6: Solution.maximum_sum_queries/3\n    solution.ex:38: Driver.consume_test_cases/2\n    solution.ex:22: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75372000,
    "question_id": "2839",
    "elapsed_time": 380,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[4,3,1,2]\n[2,4,9,5]\n[[4,1],[1,3],[2,5]]",
    "expected_output": "[6,10,7]",
    "task_finish_time": 1708649898629,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1414,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1183539740",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_sum_queries(nums1 :: [integer], nums2 :: [integer], queries :: [[integer]]) :: [integer]\n  def maximum_sum_queries(nums1, nums2, queries) do\n    nums = Enum.zip(nums1, nums2)\n            |> Enum.map(fn {x, y} -> {x, y, x + y} end)\n            |> Enum.sort_by(&(&1.third), :desc)\n\n    Enum.map(queries, fn [xi, yi] ->\n      Enum.reduce_while(nums, -1, fn {x, y, sum}, acc ->\n        if x >= xi and y >= yi do\n          {:halt, sum}\n        else\n          {:cont, acc}\n        end\n      end)\n    end)\n  end\nend"
}