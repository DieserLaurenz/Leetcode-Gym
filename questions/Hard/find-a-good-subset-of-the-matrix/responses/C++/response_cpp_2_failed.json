{
    "status_code": 14,
    "lang": "cpp",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 20164000,
    "question_id": "2826",
    "elapsed_time": 4009,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708444594676,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1181093609",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        vector<int> bestSubset;\n\n        for (int subset = 1; subset < (1 << m); ++subset) {\n            bool good = true;\n            for (int col = 0; col < n && good; ++col) {\n                int sum = 0;\n                for (int row = 0; row < m; ++row) {\n                    if (subset & (1 << row)) {\n                        sum += grid[row][col];\n                    }\n                }\n                if (sum > __builtin_popcount(subset) / 2) {\n                    good = false;\n                }\n            }\n            if (good) {\n                if (bestSubset.empty() || __builtin_popcount(subset) > __builtin_popcount(*reinterpret_cast<unsigned int*>(&bestSubset))) {\n                    bestSubset.clear();\n                    for (int row = 0; row < m; ++row) {\n                        if (subset & (1 << row)) {\n                            bestSubset.push_back(row);\n                        }\n                    }\n                }\n            }\n        }\n\n        return bestSubset;\n    }\n};"
}