{
    "status_code": 14,
    "lang": "cpp",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 553328000,
    "question_id": "2826",
    "elapsed_time": 4091,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708444500108,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1181092121",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        vector<int> subset;\n        \n        // Check each possible subset\n        for (int mask = 1; mask < (1 << m); ++mask) {\n            bool isValid = true;\n            vector<int> colSum(n, 0);\n            vector<int> tempSubset;\n            \n            for (int row = 0; row < m; ++row) {\n                if (mask & (1 << row)) {\n                    tempSubset.push_back(row);\n                    for (int col = 0; col < n; ++col) {\n                        colSum[col] += grid[row][col];\n                    }\n                }\n            }\n            \n            int subsetSize = tempSubset.size();\n            for (int col = 0; col < n && isValid; ++col) {\n                if (colSum[col] > subsetSize / 2) isValid = false;\n            }\n            \n            if (isValid && tempSubset.size() > subset.size()) {\n                subset = tempSubset;\n            }\n        }\n        \n        return subset;\n    }\n};"
}