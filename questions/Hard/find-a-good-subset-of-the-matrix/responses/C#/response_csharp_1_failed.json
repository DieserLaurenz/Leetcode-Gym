{
    "status_code": 20,
    "lang": "csharp",
    "run_success": false,
    "compile_error": "Line 28: Char 26: error CS1002: ; expected (in Solution.cs)",
    "full_compile_error": "Line 28: Char 26: error CS1002: ; expected (in Solution.cs)\nLine 28: Char 26: error CS1525: Invalid expression term ':' (in Solution.cs)\nLine 28: Char 26: error CS1001: Identifier expected (in Solution.cs)",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2826",
    "task_finish_time": 1708445081003,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1181101330",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public IList<int> GoodSubsetofBinaryMatrix(int[][] grid) {\n        int m = grid.Length, n = grid[0].Length;\n        // Initialize the list to keep track of the best subset found\n        List<int> bestSubset = new List<int>();\n        int bestSubsetSize = int.MaxValue;\n\n        // Use bit manipulation to generate all possible subsets\n        for (int mask = 1; mask < (1 << m); mask++) {\n            List<int> currentSubset = new List<int>();\n            int[] columnSum = new int[n];\n            int rowCount = 0;\n\n            // Check each row if it's included in the current subset\n            for (int i = 0; i < m; i++) {\n                if ((mask & (1 << i)) != 0) {\n                    currentSubset.Add(i);\n                    rowCount++;\n                    // Sum up the columns for the current subset\n                    for (int j = 0; j < n; j++) {\n                        columnSum[j] += grid[i][j];\n                    }\n                }\n            }\n\n            // Verify if the current subset is a good subset\n            bool isGood = true;\n            for (int sum : columnSum) {\n                if (sum > rowCount / 2) {\n                    isGood = false;\n                    break;\n                }\n            }\n\n            // Update the best subset if a new, smaller good subset is found\n            if (isGood && rowCount < bestSubsetSize) {\n                bestSubset = new List<int>(currentSubset);\n                bestSubsetSize = rowCount;\n            }\n        }\n\n        // If no good subset is found, return an empty list\n        if (bestSubsetSize == int.MaxValue) {\n            return new List<int>();\n        }\n\n        // Return the indices of the best subset found\n        return bestSubset;\n    }\n}"
}