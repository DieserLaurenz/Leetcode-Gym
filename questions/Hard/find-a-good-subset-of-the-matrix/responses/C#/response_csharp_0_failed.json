{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 133876000,
    "question_id": "2826",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "expected_output": "[5]",
    "task_finish_time": 1708445024366,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 622,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1181100392",
    "input_formatted": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "input": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public IList<int> GoodSubsetofBinaryMatrix(int[][] grid) {\n        int m = grid.Length, n = grid[0].Length;\n        for (int mask = 1; mask < (1 << m); mask++) {\n            List<int> subset = new List<int>();\n            int[] columnSum = new int[n];\n            int rowsCount = 0;\n            for (int i = 0; i < m; i++) {\n                if ((mask & (1 << i)) != 0) {\n                    subset.Add(i);\n                    rowsCount++;\n                    for (int j = 0; j < n; j++) {\n                        columnSum[j] += grid[i][j];\n                    }\n                }\n            }\n            bool isGoodSubset = true;\n            foreach (int sum in columnSum) {\n                if (sum > rowsCount / 2) {\n                    isGoodSubset = false;\n                    break;\n                }\n            }\n            if (isGoodSubset) {\n                return subset;\n            }\n        }\n        return new List<int>();\n    }\n}"
}