{
    "status_code": 14,
    "lang": "ruby",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 215624000,
    "question_id": "2826",
    "elapsed_time": 3213,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,1,1,1],[1,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[0,1,1,1],[1,1,1,0],[1,1,1,1]]",
    "expected_output": "[]",
    "task_finish_time": 1708454232651,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 642,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1181256397",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "# @param {Integer[][]} grid\n# @return {Integer[]}\ndef good_subsetof_binary_matrix(grid)\n  m, n = grid.size, grid[0].size\n  best_subset = []\n\n  # Iterate through all possible subsets of rows\n  (1..m).each do |subset_size|\n    (0...m).to_a.combination(subset_size).each do |subset|\n      # Check if current subset is a good subset\n      is_good_subset = true\n      (0...n).each do |col|\n        col_sum = subset.sum { |row| grid[row][col] }\n        if col_sum > subset_size / 2\n          is_good_subset = false\n          break\n        end\n      end\n\n      if is_good_subset\n        # If a good subset is found with a size larger than any previously found, update best_subset\n        if subset.size > best_subset.size\n          best_subset = subset\n          break # Break early since we prefer the first valid subset found\n        end\n      end\n    end\n    break unless best_subset.empty? # Stop if we've found a good subset\n  end\n\n  best_subset\nend"
}