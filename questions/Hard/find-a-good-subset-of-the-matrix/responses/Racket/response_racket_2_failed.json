{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 161584000,
    "question_id": "2826",
    "elapsed_time": 5021,
    "compare_result
    "code_output": "[1,0]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708454718849,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 320,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1181263414",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (good-subsetof-binary-matrix grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n\n  (define (check-column-sums subset)\n    (let* ((subset-length (length subset))\n           (column-sums (for/list ([j (length (first grid))])\n                          (for/sum ([i subset]) (list-ref (list-ref grid i) j)))))\n      (for/or ([sum column-sums])\n        (> sum (floor (/ subset-length 2))))))\n  \n  (define (good-subsets indices)\n    (define (helper remaining current)\n      (if (null? remaining)\n          (if (and (not (null? current)) (not (check-column-sums current)))\n              (list current)\n              '())\n          (append (helper (cdr remaining) current)\n                  (helper (cdr remaining) (cons (car remaining) current)))))\n    (helper indices '()))\n\n  (let* ((indices (range (length grid)))\n         (subsets (good-subsets indices)))\n    (if (null? subsets) '() (car subsets))))"
}