{
    "status_code": 12,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 975192000,
    "question_id": "2826",
    "elapsed_time": 3406,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708454673379,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1181262774",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (good-subsetof-binary-matrix grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n\n  (define (is-good-subset rows)\n    (let ((k (length rows)))\n      (let loop ((j 0) (valid #t))\n        (if (or (not valid) (>= j (length (car grid))))\n            valid\n            (let ((sum (foldl (lambda (row acc) (+ acc (list-ref row j))) 0 rows)))\n              (loop (+ j 1) (and valid (<= sum (floor (/ k 2))))))))))\n\n  (define (subsets lst)\n    (if (null? lst)\n        '(())\n        (let ((ss (subsets (cdr lst))))\n          (append ss (map (lambda (s) (cons (car lst) s)) ss)))))\n\n  (define (find-good-subset)\n    (let* ((indices (range (length grid)))\n           (all-subsets (subsets indices))\n           (good-subsets (filter (lambda (s) (and (not (null? s)) (is-good-subset (map (lambda (i) (list-ref grid i)) s)))) all-subsets)))\n      (if (null? good-subsets) '() (car good-subsets))))\n\n  (find-good-subset))"
}