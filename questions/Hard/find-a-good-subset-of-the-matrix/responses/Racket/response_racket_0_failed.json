{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "map: contract violation",
    "full_runtime_error": "map: contract violation\n  expected: list?\n  given: 0\n  context...:\n   /usr/share/racket/collects/racket/private/map.rkt:257:2: gen-map\n   solution.rkt:9:2: find-good-subsets\n   [repeats 3 more times]\n   solution.rkt:1:0: good-subsetof-binary-matrix\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:32:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100016000,
    "question_id": "2826",
    "elapsed_time": 245,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708454627680,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1181262098",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (good-subsetof-binary-matrix grid)\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\n  \n  (define (is-good-subset subset)\n    (let* ((k (length subset))\n           (col-sums (apply map + (apply map list subset))))\n      (andmap (lambda (sum) (<= sum (floor (/ k 2)))) col-sums)))\n  \n  (define (find-good-subsets lst acc)\n    (cond\n      [(null? lst) (if (is-good-subset acc) (list acc) '())]\n      [else\n       (let ((with (find-good-subsets (cdr lst) (cons (car lst) acc)))\n             (without (find-good-subsets (cdr lst) acc)))\n         (if (null? with) without with))]))\n  \n  (define (matrix->rows matrix)\n    (let loop ((i 0) (acc '()))\n      (if (= i (length matrix))\n          acc\n          (loop (+ i 1) (cons i acc)))))\n  \n  (let* ((rows (matrix->rows grid))\n         (good-subsets (find-good-subsets rows '())))\n    (if (null? good-subsets)\n        '()\n        (sort (car good-subsets) <))))"
}