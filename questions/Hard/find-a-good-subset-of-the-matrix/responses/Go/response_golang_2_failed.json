{
    "status_code": 14,
    "lang": "golang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 3072000,
    "question_id": "2826",
    "elapsed_time": 3010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,1,0,1,0],[0,1,0,0,1],[1,1,0,1,0],[1,1,0,1,0],[1,0,0,1,0],[1,0,1,1,1],[1,1,0,0,0],[1,1,0,1,0],[0,0,1,1,1],[1,1,1,1,1],[1,1,1,0,0],[1,1,0,0,1],[1,1,0,1,1],[0,1,1,1,1],[0,0,0,1,0],[1,1,1,0,0],[0,1,0,1,1],[0,0,1,1,0],[0,1,1,1,0],[0,0,0,0,1],[1,1,0,1,0],[1,1,1,0,1],[0,0,1,0,1],[1,1,1,0,0],[0,0,1,0,0],[1,0,1,1,0],[0,0,1,0,0],[0,1,1,1,0],[1,1,1,0,1],[0,0,1,0,0],[0,0,0,1,1],[1,1,0,0,0],[1,1,1,0,0],[1,0,1,1,0],[0,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,1,0,1,0],[1,1,1,0,0],[0,0,0,0,1],[0,0,1,1,0],[0,1,1,1,1],[1,0,1,0,0],[1,0,1,0,0]]",
    "expected_output": "[35]",
    "task_finish_time": 1708454020847,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 526,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181253326",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "func goodSubsetofBinaryMatrix(grid [][]int) []int {\n    m := len(grid)\n    if m == 0 {\n        return []int{}\n    }\n    n := len(grid[0])\n    for subsetSize := 1; subsetSize <= m; subsetSize++ {\n        for subset := 0; subset < (1 << m); subset++ {\n            if bits.OnesCount(uint(subset)) != subsetSize {\n                continue\n            }\n            sum := make([]int, n)\n            valid := true\n            rows := []int{}\n            for row := 0; row < m; row++ {\n                if subset&(1<<row) != 0 {\n                    rows = append(rows, row)\n                    for col := 0; col < n; col++ {\n                        sum[col] += grid[row][col]\n                    }\n                }\n            }\n            for _, s := range sum {\n                if s*2 > subsetSize {\n                    valid = false\n                    break\n                }\n            }\n            if valid {\n                return rows\n            }\n        }\n    }\n    return []int{}\n}"
}