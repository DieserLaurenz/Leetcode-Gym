{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 14544000,
    "question_id": "2826",
    "elapsed_time": 3011,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[1,1,0,1],[0,0,1,0],[0,0,0,0],[0,1,1,0],[1,0,0,1],[0,1,1,1],[0,0,0,0],[0,1,0,0],[0,1,0,0],[0,0,1,1],[1,0,1,0],[1,1,1,0],[1,1,1,1],[0,0,1,0],[1,1,1,0],[1,0,0,1],[1,1,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0],[0,0,1,1],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,0],[0,0,1,1],[1,0,0,1],[0,1,0,1],[0,1,1,0],[1,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,1,0],[1,1,1,1],[0,0,1,0],[1,0,0,1],[0,0,0,0],[1,0,1,0],[0,0,0,1],[1,1,1,0],[1,0,1,0],[1,0,0,0],[0,0,1,1],[1,1,0,0],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,1],[0,1,0,1],[1,0,0,0],[1,1,0,0],[0,1,1,1],[0,1,0,0],[1,0,0,1],[1,0,0,0],[0,1,1,1],[0,1,0,1],[1,1,1,0],[1,1,1,1],[1,1,0,1],[0,0,0,1],[0,1,0,0],[1,0,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1],[0,1,1,1],[0,0,1,1],[0,0,0,1],[1,0,0,0],[0,0,0,0],[0,0,0,0],[1,0,0,1],[1,1,1,1],[0,0,1,1],[1,0,1,0],[0,1,0,0],[1,0,0,1],[0,1,0,0],[1,0,0,1],[0,0,0,1],[0,1,1,1],[0,0,0,0],[1,1,0,1],[1,1,0,1],[1,0,1,0],[0,0,1,1],[0,0,1,1],[0,0,0,1]]",
    "expected_output": "[2]",
    "task_finish_time": 1708453950638,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 569,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181252295",
    "input_formatted": "[[1,1,0,1],[0,0,1,0],[0,0,0,0],[0,1,1,0],[1,0,0,1],[0,1,1,1],[0,0,0,0],[0,1,0,0],[0,1,0,0],[0,0,1,1],[1,0,1,0],[1,1,1,0],[1,1,1,1],[0,0,1,0],[1,1,1,0],[1,0,0,1],[1,1,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0],[0,0,1,1],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,0],[0,0,1,1],[1,0,0,1],[0,1,0,1],[0,1,1,0],[1,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,1,0],[1,1,1,1],[0,0,1,0],[1,0,0,1],[0,0,0,0],[1,0,1,0],[0,0,0,1],[1,1,1,0],[1,0,1,0],[1,0,0,0],[0,0,1,1],[1,1,0,0],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,1],[0,1,0,1],[1,0,0,0],[1,1,0,0],[0,1,1,1],[0,1,0,0],[1,0,0,1],[1,0,0,0],[0,1,1,1],[0,1,0,1],[1,1,1,0],[1,1,1,1],[1,1,0,1],[0,0,0,1],[0,1,0,0],[1,0,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1],[0,1,1,1],[0,0,1,1],[0,0,0,1],[1,0,0,0],[0,0,0,0],[0,0,0,0],[1,0,0,1],[1,1,1,1],[0,0,1,1],[1,0,1,0],[0,1,0,0],[1,0,0,1],[0,1,0,0],[1,0,0,1],[0,0,0,1],[0,1,1,1],[0,0,0,0],[1,1,0,1],[1,1,0,1],[1,0,1,0],[0,0,1,1],[0,0,1,1],[0,0,0,1]]",
    "input": "[[1,1,0,1],[0,0,1,0],[0,0,0,0],[0,1,1,0],[1,0,0,1],[0,1,1,1],[0,0,0,0],[0,1,0,0],[0,1,0,0],[0,0,1,1],[1,0,1,0],[1,1,1,0],[1,1,1,1],[0,0,1,0],[1,1,1,0],[1,0,0,1],[1,1,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0],[0,0,1,1],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,0],[0,0,1,1],[1,0,0,1],[0,1,0,1],[0,1,1,0],[1,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,1,0],[1,1,1,1],[0,0,1,0],[1,0,0,1],[0,0,0,0],[1,0,1,0],[0,0,0,1],[1,1,1,0],[1,0,1,0],[1,0,0,0],[0,0,1,1],[1,1,0,0],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,1],[0,1,0,1],[1,0,0,0],[1,1,0,0],[0,1,1,1],[0,1,0,0],[1,0,0,1],[1,0,0,0],[0,1,1,1],[0,1,0,1],[1,1,1,0],[1,1,1,1],[1,1,0,1],[0,0,0,1],[0,1,0,0],[1,0,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1],[0,1,1,1],[0,0,1,1],[0,0,0,1],[1,0,0,0],[0,0,0,0],[0,0,0,0],[1,0,0,1],[1,1,1,1],[0,0,1,1],[1,0,1,0],[0,1,0,0],[1,0,0,1],[0,1,0,0],[1,0,0,1],[0,0,0,1],[0,1,1,1],[0,0,0,0],[1,1,0,1],[1,1,0,1],[1,0,1,0],[0,0,1,1],[0,0,1,1],[0,0,0,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func goodSubsetofBinaryMatrix(grid [][]int) []int {\n    m := len(grid)\n    n := len(grid[0])\n    for mask := 1; mask < (1 << m); mask++ {\n        sum := make([]int, n)\n        rows := []int{}\n        for i := 0; i < m; i++ {\n            if mask&(1<<i) != 0 {\n                rows = append(rows, i)\n                for j := 0; j < n; j++ {\n                    sum[j] += grid[i][j]\n                }\n            }\n        }\n        valid := true\n        for _, s := range sum {\n            if s > len(rows)/2 {\n                valid = false\n                break\n            }\n        }\n        if valid {\n            return rows\n        }\n    }\n    return []int{}\n}"
}