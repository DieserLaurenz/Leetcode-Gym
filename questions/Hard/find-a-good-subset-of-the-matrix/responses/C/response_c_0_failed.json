{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 29576000,
    "question_id": "2826",
    "elapsed_time": 358,
    "compare_result": "0110000001100100000001100100000000100100001010100100000000110000100001000100011000110010000001000100000100100101111000000111110000100000110101000000001000100111000000000100001010010101010000000100100110110010100010000000010000000010100100000000101000001001000001011010100000001000000001010100010111000010000001100001100100000000000000000011000001101001101100000110100010100011000000000101010011010001000000000000000000110011000100101000100010000100000001000001000101000000100000000101000011001110110000000000110010001000000100000000000000000110001010000000100001010000010000100000000100000000100000100100100000100000010000000001010000000000001001100010000000000000000000000000000000101",
    "code_output": "[2]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708444832316,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 167,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1181097396",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* goodSubsetofBinaryMatrix(int** grid, int gridSize, int* gridColSize, int* returnSize){\n    // Early exit if gridSize is 1, any single row is a valid good subset\n    if (gridSize == 1) {\n        *returnSize = 1;\n        int* result = (int*)malloc(sizeof(int) * (*returnSize));\n        result[0] = 0;\n        return result;\n    }\n\n    // Initialize variables\n    int colSize = *gridColSize;\n    int* colSums = (int*)calloc(colSize, sizeof(int));\n    int* tempResult = (int*)malloc(sizeof(int) * gridSize);\n    int tempResultSize = 0;\n\n    // Calculate the sum of each column\n    for (int i = 0; i < gridSize; ++i) {\n        for (int j = 0; j < colSize; ++j) {\n            colSums[j] += grid[i][j];\n        }\n    }\n\n    // Check each row if it can be part of a good subset\n    for (int i = 0; i < gridSize; ++i) {\n        int good = 1;\n        for (int j = 0; j < colSize; ++j) {\n            // Calculate new column sum if this row is excluded\n            int newColSum = colSums[j] - grid[i][j];\n            // Check if excluding this row makes the column sum more than half of remaining rows\n            if (newColSum > (gridSize - 1) / 2) {\n                good = 0;\n                break;\n            }\n        }\n        // If row is good, add to result\n        if (good) {\n            tempResult[tempResultSize++] = i;\n        }\n    }\n\n    // Allocate exact size for final result\n    *returnSize = tempResultSize;\n    int* result = (int*)malloc(sizeof(int) * (*returnSize));\n    for (int i = 0; i < tempResultSize; ++i) {\n        result[i] = tempResult[i];\n    }\n\n    // Clean up\n    free(tempResult);\n    free(colSums);\n\n    // Return result\n    return result;\n}"
}