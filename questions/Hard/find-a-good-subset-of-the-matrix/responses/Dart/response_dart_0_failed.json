{
    "status_code": 14,
    "lang": "dart",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 151204000,
    "question_id": "2826",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,0,1,1],[0,0,0,1,1],[1,0,0,1,1],[0,1,0,0,0],[0,1,1,1,0],[1,1,0,0,1],[0,1,1,0,1],[0,0,0,1,0],[0,0,0,0,1],[0,0,1,0,0],[1,1,0,1,1],[0,0,1,1,0],[1,1,0,1,1],[0,0,1,0,1],[1,1,0,0,0],[0,0,1,1,0],[1,0,0,1,1],[1,1,1,1,1],[0,1,0,0,0],[1,0,0,1,0],[1,0,1,1,0],[1,0,1,1,1],[1,0,1,1,0],[0,1,1,1,1],[1,1,1,1,0],[1,0,1,1,1],[0,1,0,0,1],[1,0,1,1,0],[1,1,1,0,1]]",
    "expected_output": "[0,3]",
    "task_finish_time": 1708453819060,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 505,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1181250272",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> goodSubsetofBinaryMatrix(List<List<int>> grid) {\n    for (int len = 1; len <= grid.length; len++) {\n      for (int i = 0; i < (1 << grid.length); i++) {\n        if (_bitCount(i) == len) {\n          List<int> subset = [];\n          for (int j = 0; j < grid.length; j++) {\n            if ((i & (1 << j)) != 0) {\n              subset.add(j);\n            }\n          }\n          if (_isValidSubset(grid, subset)) {\n            return subset;\n          }\n        }\n      }\n    }\n    return [];\n  }\n\n  bool _isValidSubset(List<List<int>> grid, List<int> subset) {\n    int k = subset.length;\n    for (int col = 0; col < grid[0].length; col++) {\n      int sum = 0;\n      for (int row in subset) {\n        sum += grid[row][col];\n      }\n      if (sum > k ~/ 2) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  int _bitCount(int n) {\n    int count = 0;\n    while (n > 0) {\n      count += n & 1;\n      n >>= 1;\n    }\n    return count;\n  }\n}"
}