{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 23: Char 18: Error: For-in loops use 'in' rather than a colon.",
    "full_runtime_error": "Line 23: Char 18: Error: For-in loops use 'in' rather than a colon.\nTry replacing the colon with the keyword 'in'.\n      for (int i : subset) {\n                 ^",
    "status_runtime": "N/A",
    "memory": 143780000,
    "question_id": "2826",
    "elapsed_time": 550,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708453852177,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1181250805",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  List<int> goodSubsetofBinaryMatrix(List<List<int>> grid) {\n    int m = grid.length, n = grid[0].length;\n    List<int> ans = [];\n    for (int mask = 1; mask < (1 << m); mask++) {\n      List<int> subset = [];\n      for (int i = 0; i < m; i++) {\n        if ((mask & (1 << i)) != 0) {\n          subset.add(i);\n        }\n      }\n      if (_isValidSubset(grid, subset, n)) {\n        return subset;\n      }\n    }\n    return ans;\n  }\n\n  bool _isValidSubset(List<List<int>> grid, List<int> subset, int n) {\n    int k = subset.length;\n    for (int j = 0; j < n; j++) {\n      int sum = 0;\n      for (int i : subset) {\n        sum += grid[i][j];\n      }\n      if (sum > k / 2) return false;\n    }\n    return true;\n  }\n}"
}