{
    "status_code": 14,
    "lang": "javascript",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 599972000,
    "question_id": "2826",
    "elapsed_time": 4051,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,1,1,1],[1,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[0,1,1,1],[1,1,1,0],[1,1,1,1]]",
    "expected_output": "[]",
    "task_finish_time": 1708445222745,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 642,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1181103529",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[][]} grid\n * @return {number[]}\n */\nvar goodSubsetofBinaryMatrix = function(grid) {\n    const m = grid.length, n = grid[0].length;\n    for (let k = 1; k <= m; ++k) { // Length of subset\n        const subsets = [];\n        // Generate all combinations of rows of length k\n        const generateCombinations = (start, path) => {\n            if (path.length === k) {\n                subsets.push([...path]);\n                return;\n            }\n            for (let i = start; i <= m - (k - path.length); ++i) {\n                path.push(i);\n                generateCombinations(i + 1, path);\n                path.pop();\n            }\n        };\n        generateCombinations(0, []);\n\n        // Check each subset\n        for (const subset of subsets) {\n            let isValid = true;\n            for (let j = 0; j < n && isValid; ++j) { // Check each column\n                let sum = 0;\n                for (const rowIndex of subset) {\n                    sum += grid[rowIndex][j];\n                }\n                if (sum > Math.floor(k / 2)) isValid = false; // Subset is not good\n            }\n            if (isValid) return subset.map(i => i); // Return indices of a good subset\n        }\n    }\n    return []; // No good subset found\n};"
}