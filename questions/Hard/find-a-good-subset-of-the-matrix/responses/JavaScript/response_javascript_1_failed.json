{
    "status_code": 14,
    "lang": "javascript",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 60496000,
    "question_id": "2826",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708445280389,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1181104443",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[][]} grid\n * @return {number[]}\n */\nvar goodSubsetofBinaryMatrix = function(grid) {\n    let m = grid.length, n = grid[0].length;\n    let bestSubset = [];\n\n    // Convert grid to bitmasks for efficient column sum calculation\n    let bitmasks = new Array(m).fill(0);\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            bitmasks[i] |= grid[i][j] << j;\n        }\n    }\n\n    // Check all subsets\n    for (let mask = 1; mask < (1 << m); mask++) {\n        let subsetSum = new Array(n).fill(0);\n        let subsetSize = 0;\n        for (let i = 0; i < m; i++) {\n            if ((mask & (1 << i)) !== 0) {\n                subsetSize++;\n                for (let j = 0; j < n; j++) {\n                    if ((bitmasks[i] & (1 << j)) !== 0) {\n                        subsetSum[j]++;\n                    }\n                }\n            }\n        }\n        if (subsetSum.every(sum => sum <= Math.floor(subsetSize / 2))) {\n            let currentSubset = [];\n            for (let i = 0; i < m; i++) {\n                if ((mask & (1 << i)) !== 0) {\n                    currentSubset.push(i);\n                }\n            }\n            if (currentSubset.length > bestSubset.length) {\n                bestSubset = currentSubset;\n            }\n        }\n    }\n\n    return bestSubset;\n};"
}