{
    "status_code": 14,
    "lang": "php",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 19752000,
    "question_id": "2826",
    "elapsed_time": 5141,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708445655609,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181110525",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function goodSubsetofBinaryMatrix($grid) {\n        $rowCount = count($grid);\n        $colCount = count($grid[0]);\n        $maxSubset = [];\n\n        // For each row, compute a bitmask representing its columns.\n        $rowBitmasks = [];\n        foreach ($grid as $r => $row) {\n            $mask = 0;\n            foreach ($row as $c => $val) {\n                if ($val === 1) {\n                    $mask |= (1 << $c);\n                }\n            }\n            $rowBitmasks[$r] = $mask;\n        }\n\n        // Check all subsets of rows\n        for ($i = 1; $i < (1 << $rowCount); $i++) {\n            $colsSum = array_fill(0, $colCount, 0);\n            $subset = [];\n            for ($j = 0; $j < $rowCount; $j++) {\n                if (($i & (1 << $j)) > 0) {\n                    $subset[] = $j;\n                    // Update column sums for this subset\n                    for ($k = 0; $k < $colCount; $k++) {\n                        if (($rowBitmasks[$j] & (1 << $k)) > 0) {\n                            $colsSum[$k]++;\n                        }\n                    }\n                }\n            }\n            $isValid = true;\n            foreach ($colsSum as $sum) {\n                if ($sum > floor(count($subset) / 2)) {\n                    $isValid = false;\n                    break;\n                }\n            }\n            if ($isValid && count($subset) > count($maxSubset)) {\n                $maxSubset = $subset;\n            }\n        }\n\n        return $maxSubset;\n    }\n}"
}