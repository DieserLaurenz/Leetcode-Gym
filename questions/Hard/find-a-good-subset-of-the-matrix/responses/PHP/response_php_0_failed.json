{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27736000,
    "question_id": "2826",
    "elapsed_time": 5484,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[1,1,0,1],[0,0,1,0],[0,0,0,0],[0,1,1,0],[1,0,0,1],[0,1,1,1],[0,0,0,0],[0,1,0,0],[0,1,0,0],[0,0,1,1],[1,0,1,0],[1,1,1,0],[1,1,1,1],[0,0,1,0],[1,1,1,0],[1,0,0,1],[1,1,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0],[0,0,1,1],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,0],[0,0,1,1],[1,0,0,1],[0,1,0,1],[0,1,1,0],[1,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,1,0],[1,1,1,1],[0,0,1,0],[1,0,0,1],[0,0,0,0],[1,0,1,0],[0,0,0,1],[1,1,1,0],[1,0,1,0],[1,0,0,0],[0,0,1,1],[1,1,0,0],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,1],[0,1,0,1],[1,0,0,0],[1,1,0,0],[0,1,1,1],[0,1,0,0],[1,0,0,1],[1,0,0,0],[0,1,1,1],[0,1,0,1],[1,1,1,0],[1,1,1,1],[1,1,0,1],[0,0,0,1],[0,1,0,0],[1,0,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1],[0,1,1,1],[0,0,1,1],[0,0,0,1],[1,0,0,0],[0,0,0,0],[0,0,0,0],[1,0,0,1],[1,1,1,1],[0,0,1,1],[1,0,1,0],[0,1,0,0],[1,0,0,1],[0,1,0,0],[1,0,0,1],[0,0,0,1],[0,1,1,1],[0,0,0,0],[1,1,0,1],[1,1,0,1],[1,0,1,0],[0,0,1,1],[0,0,1,1],[0,0,0,1]]",
    "expected_output": "[2]",
    "task_finish_time": 1708445550328,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 569,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181108768",
    "input_formatted": "[[1,1,0,1],[0,0,1,0],[0,0,0,0],[0,1,1,0],[1,0,0,1],[0,1,1,1],[0,0,0,0],[0,1,0,0],[0,1,0,0],[0,0,1,1],[1,0,1,0],[1,1,1,0],[1,1,1,1],[0,0,1,0],[1,1,1,0],[1,0,0,1],[1,1,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0],[0,0,1,1],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,0],[0,0,1,1],[1,0,0,1],[0,1,0,1],[0,1,1,0],[1,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,1,0],[1,1,1,1],[0,0,1,0],[1,0,0,1],[0,0,0,0],[1,0,1,0],[0,0,0,1],[1,1,1,0],[1,0,1,0],[1,0,0,0],[0,0,1,1],[1,1,0,0],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,1],[0,1,0,1],[1,0,0,0],[1,1,0,0],[0,1,1,1],[0,1,0,0],[1,0,0,1],[1,0,0,0],[0,1,1,1],[0,1,0,1],[1,1,1,0],[1,1,1,1],[1,1,0,1],[0,0,0,1],[0,1,0,0],[1,0,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1],[0,1,1,1],[0,0,1,1],[0,0,0,1],[1,0,0,0],[0,0,0,0],[0,0,0,0],[1,0,0,1],[1,1,1,1],[0,0,1,1],[1,0,1,0],[0,1,0,0],[1,0,0,1],[0,1,0,0],[1,0,0,1],[0,0,0,1],[0,1,1,1],[0,0,0,0],[1,1,0,1],[1,1,0,1],[1,0,1,0],[0,0,1,1],[0,0,1,1],[0,0,0,1]]",
    "input": "[[1,1,0,1],[0,0,1,0],[0,0,0,0],[0,1,1,0],[1,0,0,1],[0,1,1,1],[0,0,0,0],[0,1,0,0],[0,1,0,0],[0,0,1,1],[1,0,1,0],[1,1,1,0],[1,1,1,1],[0,0,1,0],[1,1,1,0],[1,0,0,1],[1,1,0,0],[0,1,1,0],[0,0,1,0],[0,0,0,0],[0,0,1,1],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,0],[0,0,1,1],[1,0,0,1],[0,1,0,1],[0,1,1,0],[1,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,1,0],[1,1,1,1],[0,0,1,0],[1,0,0,1],[0,0,0,0],[1,0,1,0],[0,0,0,1],[1,1,1,0],[1,0,1,0],[1,0,0,0],[0,0,1,1],[1,1,0,0],[1,1,0,1],[1,0,0,0],[1,0,0,1],[1,0,0,1],[0,1,0,1],[1,0,0,0],[1,1,0,0],[0,1,1,1],[0,1,0,0],[1,0,0,1],[1,0,0,0],[0,1,1,1],[0,1,0,1],[1,1,1,0],[1,1,1,1],[1,1,0,1],[0,0,0,1],[0,1,0,0],[1,0,0,0],[1,1,0,1],[0,0,1,0],[0,1,0,1],[0,1,1,1],[0,0,1,1],[0,0,0,1],[1,0,0,0],[0,0,0,0],[0,0,0,0],[1,0,0,1],[1,1,1,1],[0,0,1,1],[1,0,1,0],[0,1,0,0],[1,0,0,1],[0,1,0,0],[1,0,0,1],[0,0,0,1],[0,1,1,1],[0,0,0,0],[1,1,0,1],[1,1,0,1],[1,0,1,0],[0,0,1,1],[0,0,1,1],[0,0,0,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function goodSubsetofBinaryMatrix($grid) {\n        $rowCount = count($grid);\n        if ($rowCount === 0) return [];\n        $colCount = count($grid[0]);\n        for ($i = 0; $i < (1 << $rowCount); $i++) {\n            $subset = [];\n            for ($j = 0; $j < $rowCount; $j++) {\n                if ($i & (1 << $j)) {\n                    $subset[] = $j;\n                }\n            }\n            if ($this->isGoodSubset($grid, $subset, $colCount)) {\n                return $subset;\n            }\n        }\n        return [];\n    }\n\n    private function isGoodSubset($grid, $subset, $colCount) {\n        $k = count($subset);\n        if ($k === 0) return false;\n        for ($i = 0; $i < $colCount; $i++) {\n            $colSum = 0;\n            foreach ($subset as $rowIndex) {\n                $colSum += $grid[$rowIndex][$i];\n            }\n            if ($colSum > floor($k / 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
}