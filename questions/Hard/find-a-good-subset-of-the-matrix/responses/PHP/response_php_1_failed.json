{
    "status_code": 14,
    "lang": "php",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 20004000,
    "question_id": "2826",
    "elapsed_time": 5057,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708445595113,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181109493",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer[]\n     */\n    function goodSubsetofBinaryMatrix($grid) {\n        $m = count($grid);\n        $n = count($grid[0]);\n        $bestSubset = [];\n\n        for ($mask = 0; $mask < (1 << $m); $mask++) {\n            $subset = [];\n            $sums = array_fill(0, $n, 0);\n            for ($i = 0; $i < $m; $i++) {\n                if (($mask & (1 << $i)) > 0) {\n                    $subset[] = $i;\n                    for ($j = 0; $j < $n; $j++) {\n                        $sums[$j] += $grid[$i][$j];\n                    }\n                }\n            }\n            \n            $isValid = true;\n            foreach ($sums as $sum) {\n                if ($sum > floor(count($subset) / 2)) {\n                    $isValid = false;\n                    break;\n                }\n            }\n\n            if ($isValid && count($subset) > count($bestSubset)) {\n                $bestSubset = $subset;\n            }\n        }\n\n        return $bestSubset;\n    }\n}"
}