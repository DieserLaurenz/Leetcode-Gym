{
    "status_code": 14,
    "lang": "kotlin",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 60536000,
    "question_id": "2826",
    "elapsed_time": 5056,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708453748273,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181249143",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun goodSubsetofBinaryMatrix(grid: Array<IntArray>): List<Int> {\n        // Initialize variables to store the number of rows and columns\n        val rows = grid.size\n        val cols = grid[0].size\n        val result = mutableListOf<Int>()\n\n        // Iterate through all possible combinations of rows\n        for (i in 1 until (1 shl rows)) {\n            val subset = mutableListOf<Int>()\n            val colSum = IntArray(cols) { 0 }\n\n            // Check each row to see if it is part of the current combination\n            for (row in 0 until rows) {\n                if ((i shr row) and 1 == 1) {\n                    subset.add(row)\n                    // Sum up the columns for the current combination of rows\n                    for (col in 0 until cols) {\n                        colSum[col] += grid[row][col]\n                    }\n                }\n            }\n\n            // Check if the current subset of rows is a good subset\n            var isGood = true\n            for (sum in colSum) {\n                if (sum > subset.size / 2) {\n                    isGood = false\n                    break\n                }\n            }\n\n            // If a good subset is found, prepare the result and break\n            if (isGood && subset.size > result.size) {\n                result.clear()\n                result.addAll(subset)\n            }\n        }\n\n        return result.sorted()\n    }\n}"
}