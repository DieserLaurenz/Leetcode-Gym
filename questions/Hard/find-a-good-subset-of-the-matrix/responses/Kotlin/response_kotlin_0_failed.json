{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66852000,
    "question_id": "2826",
    "elapsed_time": 5212,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "expected_output": "[5]",
    "task_finish_time": 1708453660797,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 622,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181247728",
    "input_formatted": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "input": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun goodSubsetofBinaryMatrix(grid: Array<IntArray>): List<Int> {\n        val m = grid.size\n        val n = grid[0].size\n\n        for (mask in 1 until (1 shl m)) {\n            val subset = mutableListOf<Int>()\n            val columnSums = IntArray(n)\n            var rowCount = 0\n\n            for (row in 0 until m) {\n                if (mask and (1 shl row) != 0) {\n                    rowCount++\n                    subset.add(row)\n                    for (col in 0 until n) {\n                        columnSums[col] += grid[row][col]\n                    }\n                }\n            }\n\n            var isValidSubset = true\n            for (sum in columnSums) {\n                if (sum > rowCount / 2) {\n                    isValidSubset = false\n                    break\n                }\n            }\n\n            if (isValidSubset) return subset\n        }\n\n        return emptyList()\n    }\n}"
}