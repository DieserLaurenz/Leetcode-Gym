{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 14524000,
    "question_id": "2826",
    "elapsed_time": 11011,
    "compare_result
    "code_output": "[0]",
    "std_output": "",
    "last_testcase": "[[1,1,1],[1,1,1]]",
    "expected_output": "[]",
    "task_finish_time": 1708881568052,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 454,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185971733",
    "input_formatted": "[[1,1,1],[1,1,1]]",
    "input": "[[1,1,1],[1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def goodSubsetofBinaryMatrix(self, grid):\n        m, n = len(grid), len(grid[0])\n        best_subset = []\n\n        for i in range(m):\n            subset = [i]\n            for j in range(m):\n                if j != i:\n                    valid = True\n                    for col in range(n):\n                        if sum(grid[k][col] for k in subset + [j]) > (len(subset) + 1) // 2:\n                            valid = False\n                            break\n                    if valid:\n                        subset.append(j)\n            if len(subset) > len(best_subset):\n                best_subset = subset\n                if len(best_subset) > m // 2:  # Early stopping condition\n                    break\n\n        return best_subset"
}