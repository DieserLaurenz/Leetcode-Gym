{
    "status_code": 14,
    "lang": "python",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16876000,
    "question_id": "2826",
    "elapsed_time": 11021,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,1,1,1],[1,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[0,1,1,1],[1,1,1,0],[1,1,1,1]]",
    "expected_output": "[]",
    "task_finish_time": 1708881524417,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 642,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185971115",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def goodSubsetofBinaryMatrix(self, grid):\n        from itertools import combinations\n        m, n = len(grid), len(grid[0])\n\n        # Function to check if subset is good\n        def is_good(subset):\n            for j in range(n):\n                if sum(grid[i][j] for i in subset) > len(subset) // 2:\n                    return False\n            return True\n\n        # Iterate from smallest to largest possible subset size\n        for size in range(1, m + 1):\n            for subset in combinations(range(m), size):\n                if is_good(subset):\n                    return list(subset)\n\n        return []"
}