{
    "status_code": 12,
    "lang": "python",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 978572000,
    "question_id": "2826",
    "elapsed_time": 403,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708881481487,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185970636",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def goodSubsetofBinaryMatrix(self, grid):\n        m, n = len(grid), len(grid[0])\n\n        # Check if a subset of rows is good.\n        def is_good(subset):\n            for j in range(n):\n                if sum(grid[i][j] for i in subset) > len(subset) // 2:\n                    return False\n            return True\n\n        # Try all possible subsets of rows.\n        for mask in range(1, 1 << m):\n            subset = [i for i in range(m) if mask & (1 << i)]\n            if is_good(subset):\n                return subset\n\n        return []"
}