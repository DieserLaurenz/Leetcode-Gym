{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45412000,
    "question_id": "2826",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "[0,1,0,1,0,1,0,1]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708444714445,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 215,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181095478",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {\n        int m = grid.length, n = grid[0].length;\n        List<Integer> result = new ArrayList<>();\n        for (int mask = 1; mask < (1 << m); mask++) {\n            List<Integer> subset = new ArrayList<>();\n            boolean isValid = true;\n            for (int col = 0; col < n; col++) {\n                int sum = 0;\n                for (int row = 0; row < m; row++) {\n                    if ((mask & (1 << row)) != 0) {\n                        sum += grid[row][col];\n                        subset.add(row);\n                    }\n                }\n                int subsetSize = Integer.bitCount(mask);\n                if (sum > subsetSize / 2) {\n                    isValid = false;\n                    break;\n                }\n            }\n            if (isValid) {\n                // If the current subset is good and either no result is found yet\n                // or the current subset is larger than the previous result, update the result.\n                if (result.isEmpty() || subset.size() > result.size()) {\n                    result = new ArrayList<>(subset);\n                }\n                // As we want just one good subset, we can return the first found subset\n                break;\n            }\n            subset.clear();\n        }\n        // To ensure the result contains unique indices, create a set and then convert back to list\n        return new ArrayList<>(new ArrayList<>(result));\n    }\n}"
}