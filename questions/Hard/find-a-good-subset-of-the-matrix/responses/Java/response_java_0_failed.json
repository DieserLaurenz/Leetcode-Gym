{
    "status_code": 14,
    "lang": "java",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 53740000,
    "question_id": "2826",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,1,1,1],[1,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[0,1,1,1],[1,1,1,0],[1,1,1,1]]",
    "expected_output": "[]",
    "task_finish_time": 1708444670719,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 642,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181094838",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {\n        List<Integer> result = new ArrayList<>();\n        int m = grid.length, n = grid[0].length;\n        \n        // Check each row individually to see if it can form a good subset by itself.\n        for (int i = 0; i < m; i++) {\n            boolean good = true;\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] > 0) { // Since k=1, no column sum should be greater than 0.\n                    good = false;\n                    break;\n                }\n            }\n            if (good) {\n                result.add(i); // Add current row as it forms a good subset by itself.\n                return result; // Return immediately as only one such subset is needed.\n            }\n        }\n        \n        // If no single row forms a good subset, check for combinations of rows.\n        for (int size = 2; size <= m; size++) { // Start from size 2 as single rows are already checked.\n            if (findSubset(grid, 0, new ArrayList<>(), size, result)) {\n                return result; // If a good subset is found, return it.\n            }\n        }\n        \n        return new ArrayList<>(); // Return empty list if no good subset is found.\n    }\n    \n    private boolean findSubset(int[][] grid, int start, List<Integer> current, int size, List<Integer> result) {\n        if (current.size() == size) {\n            if (isGoodSubset(grid, current)) {\n                result.addAll(current);\n                return true;\n            }\n            return false;\n        }\n        \n        for (int i = start; i <= grid.length - size + current.size(); i++) {\n            current.add(i);\n            if (findSubset(grid, i + 1, current, size, result)) {\n                return true;\n            }\n            current.remove(current.size() - 1);\n        }\n        \n        return false;\n    }\n    \n    private boolean isGoodSubset(int[][] grid, List<Integer> subset) {\n        int m = subset.size(), n = grid[0].length;\n        for (int j = 0; j < n; j++) {\n            int sum = 0;\n            for (int row : subset) {\n                sum += grid[row][j];\n            }\n            if (sum > m / 2) {\n                return false; // If any column sum exceeds half the size of the subset, it's not good.\n            }\n        }\n        return true;\n    }\n}"
}