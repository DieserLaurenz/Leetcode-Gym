{
    "status_code": 14,
    "lang": "java",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 45264000,
    "question_id": "2826",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708444757570,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181096136",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {\n        int m = grid.length, n = grid[0].length;\n        List<Integer> bestSubset = new ArrayList<>();\n\n        // Iterate over all possible subsets using bit manipulation\n        for (int mask = 1; mask < (1 << m); mask++) {\n            List<Integer> subset = new ArrayList<>();\n            boolean isGood = true;\n            for (int j = 0; j < n; j++) {\n                int colSum = 0;\n                for (int i = 0; i < m; i++) {\n                    if (((mask >> i) & 1) == 1) {\n                        colSum += grid[i][j];\n                    }\n                }\n                if (colSum > Integer.bitCount(mask) / 2) {\n                    isGood = false;\n                    break;\n                }\n            }\n            if (isGood) {\n                for (int i = 0; i < m; i++) {\n                    if (((mask >> i) & 1) == 1) {\n                        subset.add(i);\n                    }\n                }\n                // If this subset is better (larger) than the current best, replace it\n                if (subset.size() > bestSubset.size()) {\n                    bestSubset = subset;\n                }\n            }\n        }\n        return bestSubset;\n    }\n}"
}