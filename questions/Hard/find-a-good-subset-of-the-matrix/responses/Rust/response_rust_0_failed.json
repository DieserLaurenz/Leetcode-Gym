{
    "status_code": 14,
    "lang": "rust",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 1992000,
    "question_id": "2826",
    "elapsed_time": 2027,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708454471043,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1181259826",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn good_subsetof_binary_matrix(grid: Vec<Vec<i32>>) -> Vec<i32> {\n        let m = grid.len();\n        let n = grid[0].len();\n        let mut best_subset = Vec::new();\n        let mut best_count = 0;\n\n        for mask in 1..(1 << m) {\n            let mut col_sums = vec![0; n];\n            let mut row_count = 0;\n            for row in 0..m {\n                if mask & (1 << row) != 0 {\n                    row_count += 1;\n                    for col in 0..n {\n                        col_sums[col] += grid[row][col];\n                    }\n                }\n            }\n            if col_sums.iter().all(|&sum| sum * 2 <= row_count) && row_count > best_count {\n                best_count = row_count;\n                best_subset.clear();\n                for row in 0..m {\n                    if mask & (1 << row) != 0 {\n                        best_subset.push(row as i32);\n                    }\n                }\n            }\n        }\n\n        best_subset\n    }\n}"
}