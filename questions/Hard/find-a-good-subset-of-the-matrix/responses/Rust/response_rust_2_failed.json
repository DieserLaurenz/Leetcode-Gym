{
    "status_code": 14,
    "lang": "rust",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 2004000,
    "question_id": "2826",
    "elapsed_time": 2525,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708454550226,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1181260965",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn good_subsetof_binary_matrix(grid: Vec<Vec<i32>>) -> Vec<i32> {\n        let m = grid.len();\n        let n = grid[0].len();\n        let mut result = Vec::new();\n\n        'outer: for mask in 1..(1 << m) {\n            let mut sum = vec![0; n];\n            let mut rows = Vec::new();\n            for i in 0..m {\n                if mask & (1 << i) != 0 {\n                    rows.push(i as i32);\n                    for j in 0..n {\n                        sum[j] += grid[i][j];\n                    }\n                }\n            }\n            let k = rows.len();\n            for col_sum in sum {\n                if col_sum > k as i32 / 2 {\n                    continue 'outer;\n                }\n            }\n            if rows.len() > result.len() {\n                result = rows;\n            }\n        }\n\n        result.sort_unstable();\n        result\n    }\n}"
}