{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 109424000,
    "question_id": "2826",
    "elapsed_time": 6018,
    "compare_result
    "code_output": "[0,1,2]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708454976879,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 156,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181266963",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec good_subsetof_binary_matrix(grid :: [[integer]]) :: [integer]\n  def good_subsetof_binary_matrix(grid) do\n    0..length(grid) - 1\n    |> Enum.filter_map(fn i -> \n      subset = Enum.at(grid, i)\n      valid_subset?(grid, [i], subset)\n    end, &(&1))\n  end\n\n  defp valid_subset?(grid, indices, subset) do\n    col_sums = for col <- 0..length(List.first(grid)) - 1, do: Enum.sum(for row <- indices, do: Enum.at(Enum.at(grid, row), col))\n    all_valid = Enum.all?(col_sums, fn sum -> sum <= div(length(indices), 2) end)\n\n    if all_valid, do: indices, else: []\n  end\n\n  defp select_rows(grid, rows) do\n    Enum.map(rows, fn row_index -> Enum.at(grid, row_index) end)\n  end\nend"
}