{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 80952000,
    "question_id": "2826",
    "elapsed_time": 6028,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708454938493,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 472,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181266437",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec good_subsetof_binary_matrix(grid :: [[integer]]) :: [integer]\n  def good_subsetof_binary_matrix(grid) do\n    Enum.reduce(0..Enum.count(grid) - 1, [], fn i, acc ->\n      subset = for {row, index} <- Enum.with_index(grid), index in acc ++ [i], do: row\n      columns_sum = transpose(subset) |> Enum.map(&Enum.sum/1)\n      if Enum.all?(columns_sum, fn x -> x <= div(Enum.count(subset), 2) end), do: acc ++ [i], else: acc\n    end)\n  end\n\n  defp transpose(list) do\n    list |> Enum.zip() |> Enum.map(&Tuple.to_list/1)\n  end\nend"
}