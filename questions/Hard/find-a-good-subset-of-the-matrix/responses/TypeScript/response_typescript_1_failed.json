{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60640000,
    "question_id": "2826",
    "elapsed_time": 4028,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "expected_output": "[5]",
    "task_finish_time": 1708445433321,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 622,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1181106807",
    "input_formatted": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "input": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function goodSubsetofBinaryMatrix(grid: number[][]): number[] {\n    for (let bitmask = 1; bitmask < (1 << grid.length); bitmask++) {\n        let subset: number[] = [];\n        let sums = new Array(grid[0].length).fill(0);\n        for (let row = 0; row < grid.length; row++) {\n            if (bitmask & (1 << row)) {\n                subset.push(row);\n                for (let col = 0; col < grid[0].length; col++) {\n                    sums[col] += grid[row][col];\n                }\n            }\n        }\n        let isValid = true;\n        for (let sum of sums) {\n            if (sum * 2 > subset.length) {\n                isValid = false;\n                break;\n            }\n        }\n        if (isValid) {\n            return subset;\n        }\n    }\n    return [];\n}"
}