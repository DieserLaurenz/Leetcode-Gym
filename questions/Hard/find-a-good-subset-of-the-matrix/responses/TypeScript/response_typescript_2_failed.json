{
    "status_code": 14,
    "lang": "typescript",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 60896000,
    "question_id": "2826",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708445479530,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1181107582",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "function goodSubsetofBinaryMatrix(grid: number[][]): number[] {\n    let bestSubset: number[] = [];\n    for (let mask = 1; mask < (1 << grid.length); mask++) {\n        let subset: number[] = [], columnSums = new Array(grid[0].length).fill(0), isValid = true;\n        for (let row = 0; row < grid.length; row++) {\n            if ((mask & (1 << row)) !== 0) {\n                subset.push(row);\n                for (let col = 0; col < grid[0].length; col++) {\n                    columnSums[col] += grid[row][col];\n                }\n            }\n        }\n        for (let sum of columnSums) {\n            if (sum > Math.floor(subset.length / 2)) {\n                isValid = false;\n                break;\n            }\n        }\n        if (isValid && subset.length > bestSubset.length) {\n            bestSubset = subset;\n        }\n    }\n    return bestSubset;\n}"
}