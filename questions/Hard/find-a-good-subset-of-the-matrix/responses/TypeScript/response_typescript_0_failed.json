{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60712000,
    "question_id": "2826",
    "elapsed_time": 184,
    "compare_result": "0111001111111110010011101110111110101111111011111100011010111111111111001111011001111110000001010111000101101111111111010111110011101101110101011110011110100011110001011111111111111111110010010100111111111011111110111011111011011110101111011001111011111011011111111111101110011011111011010100111111101111010111101111111110111111011111100111011101101111101101111111101111110111001101001101111011011101111000111110001100111011000110111110101111111100101111110001001101111101111111111111000111111111110011011000111011111110111111111111111110111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101011111101111010000000000000010000000000000101",
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708445395188,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 508,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1181106241",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function goodSubsetofBinaryMatrix(grid: number[][]): number[] {\n    const m = grid.length;\n    const n = grid[0].length;\n\n    // Attempt to find a good subset starting from each row.\n    for (let startRow = 0; startRow < m; startRow++) {\n        let subset: number[] = [];\n        let columnSums = new Array(n).fill(0);\n\n        // Add rows to the subset if they keep the subset good.\n        for (let row = startRow; row < m; row++) {\n            let canAddRow = true;\n            for (let col = 0; col < n; col++) {\n                if (grid[row][col] === 1) {\n                    if (columnSums[col] * 2 >= subset.length) {\n                        canAddRow = false;\n                        break;\n                    }\n                }\n            }\n\n            if (canAddRow) {\n                subset.push(row);\n                for (let col = 0; col < n; col++) {\n                    columnSums[col] += grid[row][col];\n                }\n            }\n        }\n\n        // Check if the current subset is good.\n        let isGood = true;\n        for (let col = 0; col < n; col++) {\n            if (columnSums[col] * 2 > subset.length) {\n                isGood = false;\n                break;\n            }\n        }\n\n        if (isGood) {\n            return subset;\n        }\n    }\n\n    // If no good subset is found, return an empty array.\n    return [];\n};"
}