{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74996000,
    "question_id": "2826",
    "elapsed_time": 5095,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708454835258,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 116,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1181265049",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec good_subsetof_binary_matrix(Grid :: [[integer()]]) -> [integer()].\ngood_subsetof_binary_matrix(Grid) ->\n    {Indices, _} = lists:foldl(fun (Row, {Acc, _} = AccFull) ->\n                                   Indices = lists:seq(0, length(Row) - 1),\n                                   Sums = lists:map(fun(I) -> lists:sum([lists:nth(I + 1, R) || R <- Grid]) end, Indices),\n                                   K = length(Grid),\n                                   GoodIndices = lists:foldl(fun (Idx, GoodAcc) ->\n                                                                 ColSum = lists:nth(Idx + 1, Sums),\n                                                                 if\n                                                                     ColSum =< K div 2 -> [Idx | GoodAcc];\n                                                                     true -> GoodAcc\n                                                                 end\n                                                             end, [], Indices),\n                                   if\n                                       length(GoodIndices) == length(Grid) -> {lists:seq(0, length(Grid) - 1), true};\n                                       true -> AccFull\n                                   end\n                               end, {[], false}, Grid),\n    if\n        Indices =/= [] -> Indices;\n        true -> []\n    end."
}