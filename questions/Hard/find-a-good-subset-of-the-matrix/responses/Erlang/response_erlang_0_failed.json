{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68400000,
    "question_id": "2826",
    "elapsed_time": 5032,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708454798409,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 149,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1181264529",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec good_subsetof_binary_matrix(Grid :: [[integer()]]) -> [integer()].\ngood_subsetof_binary_matrix(Grid) ->\n    lists:foldl(fun(Row, Acc) -> \n                    case is_good_subset([Row|Acc], Grid) of\n                        true -> [Row|Acc];\n                        false -> Acc\n                    end\n                end, [], lists:seq(0, length(Grid) - 1)).\n\nis_good_subset(SubsetIndices, Grid) ->\n    Subset = [lists:nth(Index + 1, Grid) || Index <- SubsetIndices],\n    Transposed = transpose(Subset),\n    AllColumnsGood = lists:all(fun(Column) ->\n                                    Sum = lists:sum(Column),\n                                    Sum =< length(Column) div 2\n                                end, Transposed),\n    AllColumnsGood.\n\ntranspose([]) -> [];\ntranspose([[]|_]) -> [];\ntranspose(Matrix) ->\n    [lists:map(fun hd/1, Matrix) | transpose(lists:map(fun tl/1, Matrix))]."
}