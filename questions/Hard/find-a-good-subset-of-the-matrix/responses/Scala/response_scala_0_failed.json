{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3292000,
    "question_id": "2826",
    "elapsed_time": 11048,
    "compare_result
    "code_output": "[1,0]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708454312842,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 132,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181257416",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def goodSubsetofBinaryMatrix(grid: Array[Array[Int]]): List[Int] = {\n        val m = grid.length\n        val n = grid(0).length\n        val allRows = (0 until m).toList\n\n        def isValidSubset(rows: List[Int]): Boolean = {\n            (0 until n).forall { col =>\n                rows.map(grid(_)(col)).sum <= rows.length / 2\n            }\n        }\n\n        def findSubset(rows: List[Int], index: Int): List[Int] = {\n            if (index == m) {\n                if (isValidSubset(rows)) rows else Nil\n            } else {\n                val withCurrent = findSubset(index :: rows, index + 1)\n                if (withCurrent.nonEmpty) withCurrent\n                else findSubset(rows, index + 1)\n            }\n        }\n\n        findSubset(Nil, 0)\n    }\n}"
}