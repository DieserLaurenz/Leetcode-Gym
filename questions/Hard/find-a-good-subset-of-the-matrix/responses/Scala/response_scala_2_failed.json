{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 69536000,
    "question_id": "2826",
    "elapsed_time": 10374,
    "compare_result
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "expected_output": "[5]",
    "task_finish_time": 1708454388427,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 622,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181258501",
    "input_formatted": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "input": "[[1,1],[1,1],[1,1],[1,0],[1,1],[0,0],[1,0],[0,0],[1,1],[0,1],[1,1],[0,1],[0,0],[1,1],[1,0],[1,1],[0,1],[0,0],[1,0],[0,1],[0,1],[1,1],[1,0],[0,0],[1,1],[0,0],[0,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,0]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def goodSubsetofBinaryMatrix(grid: Array[Array[Int]]): List[Int] = {\n        val m = grid.length\n        val n = grid(0).length\n        \n        for (mask <- 1 until (1 << m)) {\n            val subset = (0 until m).filter(i => (mask & (1 << i)) != 0).toList\n            if (subset.forall(row => \n                (0 until n).forall(col => \n                    subset.map(grid(_)(col)).sum * 2 <= subset.length\n                )\n            )) return subset.sorted\n        }\n        \n        List()\n    }\n}"
}