{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16964000,
    "question_id": "2826",
    "elapsed_time": 5292,
    "compare_result
    "code_output": "[0]",
    "std_output": "",
    "last_testcase": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "expected_output": "[0,1]",
    "task_finish_time": 1708453544775,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 237,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181245803",
    "input_formatted": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "input": "[[0,1,1,0],[0,0,0,1],[1,1,1,1]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func goodSubsetofBinaryMatrix(_ grid: [[Int]]) -> [Int] {\n        let m = grid.count\n        let n = grid[0].count\n        var result: [Int] = []\n\n        // Check if single row is a good subset\n        for i in 0..<m {\n            if grid[i].reduce(0, +) <= n / 2 {\n                return [i]\n            }\n        }\n\n        // Check combinations of two rows\n        if m > 1 {\n            for i in 0..<(m - 1) {\n                for j in (i + 1)..<m {\n                    let sum = zip(grid[i], grid[j]).map(+)\n                    if sum.allSatisfy({ $0 <= 1 }) {\n                        return [i, j]\n                    }\n                }\n            }\n        }\n\n        // If no good subset found\n        return result\n    }\n}"
}