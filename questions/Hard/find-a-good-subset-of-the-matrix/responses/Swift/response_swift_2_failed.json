{
    "status_code": 14,
    "lang": "swift",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16904000,
    "question_id": "2826",
    "elapsed_time": 5195,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,1,1,1],[1,1,1,1],[1,0,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,0,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[0,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,0],[1,1,1,1],[0,1,1,1],[1,1,1,0],[1,1,1,1]]",
    "expected_output": "[]",
    "task_finish_time": 1708453590664,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 642,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181246533",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n    func goodSubsetofBinaryMatrix(_ grid: [[Int]]) -> [Int] {\n        let rowCount = grid.count\n        let colCount = grid[0].count\n        \n        // Helper function to check if a subset is good\n        func isGoodSubset(rows: [Int]) -> Bool {\n            let subsetLength = rows.count\n            for col in 0..<colCount {\n                let sum = rows.reduce(0) { $0 + grid[$1][col] }\n                if sum > subsetLength / 2 {\n                    return false\n                }\n            }\n            return true\n        }\n        \n        // Generate all possible subsets\n        for subsetSize in 1...rowCount {\n            var subset = Array(repeating: 0, count: subsetSize)\n            var i = 0\n            \n            // Initial subset of size `subsetSize`\n            while i < subsetSize { subset[i] = i; i += 1 }\n            \n            // Iterate through all combinations of subsets of size `subsetSize`\n            var hasMore = true\n            while hasMore {\n                if isGoodSubset(rows: subset) {\n                    return subset\n                }\n                \n                // Generate next subset in lexicographic order\n                i = subsetSize - 1\n                hasMore = false\n                while i >= 0 {\n                    if subset[i] != i + rowCount - subsetSize {\n                        hasMore = true\n                        break\n                    }\n                    i -= 1\n                }\n                \n                if hasMore {\n                    subset[i] += 1\n                    for j in i + 1..<subsetSize {\n                        subset[j] = subset[j - 1] + 1\n                    }\n                }\n            }\n        }\n        \n        // If no good subset is found\n        return []\n    }\n}"
}