{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16280000,
    "question_id": "2826",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,1],[0,1,1],[0,1,0],[1,1,0],[1,1,0],[0,1,0],[1,1,1],[0,1,1],[1,0,1],[0,1,0],[0,0,1],[0,0,0],[0,1,0],[0,0,0],[1,0,0],[1,1,1],[0,0,1],[0,0,0],[1,1,0],[0,1,1],[0,1,1],[1,1,0],[1,0,0],[1,0,1],[1,1,0],[0,0,0]]",
    "expected_output": "[11]",
    "task_finish_time": 1708881686647,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 503,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185973570",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:\n        m, n = len(grid), len(grid[0])\n        best_subset = []\n        \n        for mask in range(1, 1 << m):\n            subset = [row for row in range(m) if mask & (1 << row)]\n            col_sums = [0] * n\n            valid = True\n            \n            for row in subset:\n                for col in range(n):\n                    col_sums[col] += grid[row][col]\n            \n            for sum in col_sums:\n                if sum > len(subset) // 2:\n                    valid = False\n                    break\n            \n            if valid and (not best_subset or len(subset) > len(best_subset)):\n                best_subset = subset\n                \n        return best_subset"
}