{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16400000,
    "question_id": "2826",
    "elapsed_time": 11008,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,0,1,1],[0,0,0,1,1],[1,0,0,1,1],[0,1,0,0,0],[0,1,1,1,0],[1,1,0,0,1],[0,1,1,0,1],[0,0,0,1,0],[0,0,0,0,1],[0,0,1,0,0],[1,1,0,1,1],[0,0,1,1,0],[1,1,0,1,1],[0,0,1,0,1],[1,1,0,0,0],[0,0,1,1,0],[1,0,0,1,1],[1,1,1,1,1],[0,1,0,0,0],[1,0,0,1,0],[1,0,1,1,0],[1,0,1,1,1],[1,0,1,1,0],[0,1,1,1,1],[1,1,1,1,0],[1,0,1,1,1],[0,1,0,0,1],[1,0,1,1,0],[1,1,1,0,1]]",
    "expected_output": "[0,3]",
    "task_finish_time": 1708881720837,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 505,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185974089",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom itertools import combinations\n\nclass Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:\n        m, n = len(grid), len(grid[0])\n        for k in range(m, 0, -1):  # Try larger subsets first\n            for subset in combinations(range(m), k):\n                if all(sum(grid[r][c] for r in subset) <= k // 2 for c in range(n)):\n                    return list(subset)\n        return []"
}