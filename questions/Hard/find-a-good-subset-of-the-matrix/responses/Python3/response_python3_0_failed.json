{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16420000,
    "question_id": "2826",
    "elapsed_time": 11009,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[1,0,0,1,1],[0,0,0,1,1],[1,0,0,1,1],[0,1,0,0,0],[0,1,1,1,0],[1,1,0,0,1],[0,1,1,0,1],[0,0,0,1,0],[0,0,0,0,1],[0,0,1,0,0],[1,1,0,1,1],[0,0,1,1,0],[1,1,0,1,1],[0,0,1,0,1],[1,1,0,0,0],[0,0,1,1,0],[1,0,0,1,1],[1,1,1,1,1],[0,1,0,0,0],[1,0,0,1,0],[1,0,1,1,0],[1,0,1,1,1],[1,0,1,1,0],[0,1,1,1,1],[1,1,1,1,0],[1,0,1,1,1],[0,1,0,0,1],[1,0,1,1,0],[1,1,1,0,1]]",
    "expected_output": "[0,3]",
    "task_finish_time": 1708881644975,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 505,
    "total_testcases": 685,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185972937",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:\n        m, n = len(grid), len(grid[0])\n        \n        # Try all possible subsets of rows\n        for subset_size in range(1, m + 1):\n            for i in range(1 << m):\n                if bin(i).count('1') == subset_size:\n                    col_sums = [0] * n\n                    for row in range(m):\n                        if i & (1 << row):\n                            for col in range(n):\n                                col_sums[col] += grid[row][col]\n                    \n                    # Check if the current subset is good\n                    if all(sum <= subset_size // 2 for sum in col_sums):\n                        return [row for row in range(m) if i & (1 << row)]\n        return []"
}