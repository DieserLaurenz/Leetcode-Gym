{
    "acRate": 44.49454545454545,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2732",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Find a Good Subset of the Matrix",
    "titleSlug": "find-a-good-subset-of-the-matrix",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Bit Manipulation",
            "id": "VG9waWNUYWdOb2RlOjE5",
            "slug": "bit-manipulation"
        },
        {
            "name": "Matrix",
            "id": "VG9waWNUYWdOb2RlOjYxMDUz",
            "slug": "matrix"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> goodSubsetofBinaryMatrix(vector<vector<int>>& grid) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public List<Integer> goodSubsetofBinaryMatrix(int[][] grid) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def goodSubsetofBinaryMatrix(self, grid):         \"\"\"         :type grid: List[List[int]]         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def goodSubsetofBinaryMatrix(self, grid: List[List[int]]) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* goodSubsetofBinaryMatrix(int** grid, int gridSize, int* gridColSize, int* returnSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public IList<int> GoodSubsetofBinaryMatrix(int[][] grid) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} grid  * @return {number[]}  */ var goodSubsetofBinaryMatrix = function(grid) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function goodSubsetofBinaryMatrix(grid: number[][]): number[] {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $grid      * @return Integer[]      */     function goodSubsetofBinaryMatrix($grid) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func goodSubsetofBinaryMatrix(_ grid: [[Int]]) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun goodSubsetofBinaryMatrix(grid: Array<IntArray>): List<Int> {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> goodSubsetofBinaryMatrix(List<List<int>> grid) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func goodSubsetofBinaryMatrix(grid [][]int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} grid # @return {Integer[]} def good_subsetof_binary_matrix(grid)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def goodSubsetofBinaryMatrix(grid: Array[Array[Int]]): List[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn good_subsetof_binary_matrix(grid: Vec<Vec<i32>>) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (good-subsetof-binary-matrix grid)   (-> (listof (listof exact-integer?)) (listof exact-integer?))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec good_subsetof_binary_matrix(Grid :: [[integer()]]) -> [integer()]. good_subsetof_binary_matrix(Grid) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec good_subsetof_binary_matrix(grid :: [[integer]]) :: [integer]   def good_subsetof_binary_matrix(grid) do    end end"
        }
    ],
    "content": "You are given a 0-indexed m x n binary matrix grid. Let us call a non-empty subset of rows good if the sum of each column of the subset is at most half of the length of the subset. More formally, if the length of the chosen subset of rows is k, then the sum of each column should be at most floor(k / 2). Return an integer array that contains row indices of a good subset sorted in ascending order. If there are multiple good subsets, you can return any of them. If there are no good subsets, return an empty array. A subset of rows of the matrix grid is any matrix that can be obtained by deleting some (possibly none or all) rows from grid.  Example 1:  Input: grid = [[0,1,1,0],[0,0,0,1],[1,1,1,1]] Output: [0,1] Explanation: We can choose the 0th and 1st rows to create a good subset of rows. The length of the chosen subset is 2. - The sum of the 0thcolumn is 0 + 0 = 0, which is at most half of the length of the subset. - The sum of the 1stcolumn is 1 + 0 = 1, which is at most half of the length of the subset. - The sum of the 2ndcolumn is 1 + 0 = 1, which is at most half of the length of the subset. - The sum of the 3rdcolumn is 0 + 1 = 1, which is at most half of the length of the subset.  Example 2:  Input: grid = [[0]] Output: [0] Explanation: We can choose the 0th row to create a good subset of rows. The length of the chosen subset is 1. - The sum of the 0thcolumn is 0, which is at most half of the length of the subset.  Example 3:  Input: grid = [[1,1,1],[1,1,1]] Output: [] Explanation: It is impossible to choose any subset of rows to create a good subset.   Constraints:  m == grid.length n == grid[i].length 1 <= m <= 104 1 <= n <= 5 grid[i][j] is either 0 or 1.  "
}