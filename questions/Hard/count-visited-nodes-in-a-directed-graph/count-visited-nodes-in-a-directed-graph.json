{
    "acRate": 32.11965045933229,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2876",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Count Visited Nodes in a Directed Graph",
    "titleSlug": "count-visited-nodes-in-a-directed-graph",
    "topicTags": [
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "Graph",
            "id": "VG9waWNUYWdOb2RlOjI0",
            "slug": "graph"
        },
        {
            "name": "Memoization",
            "id": "VG9waWNUYWdOb2RlOjMz",
            "slug": "memoization"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> countVisitedNodes(vector<int>& edges) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] countVisitedNodes(List<Integer> edges) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def countVisitedNodes(self, edges):         \"\"\"         :type edges: List[int]         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def countVisitedNodes(self, edges: List[int]) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* countVisitedNodes(int* edges, int edgesSize, int* returnSize) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] CountVisitedNodes(IList<int> edges) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} edges  * @return {number[]}  */ var countVisitedNodes = function(edges) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function countVisitedNodes(edges: number[]): number[] {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $edges      * @return Integer[]      */     function countVisitedNodes($edges) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func countVisitedNodes(_ edges: [Int]) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun countVisitedNodes(edges: List<Int>): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> countVisitedNodes(List<int> edges) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func countVisitedNodes(edges []int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} edges # @return {Integer[]} def count_visited_nodes(edges)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def countVisitedNodes(edges: List[Int]): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn count_visited_nodes(edges: Vec<i32>) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (count-visited-nodes edges)   (-> (listof exact-integer?) (listof exact-integer?))   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec count_visited_nodes(Edges :: [integer()]) -> [integer()]. count_visited_nodes(Edges) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec count_visited_nodes(edges :: [integer]) :: [integer]   def count_visited_nodes(edges) do        end end"
        }
    ],
    "content": "There is a directed graph consisting of n nodes numbered from 0 to n - 1 and n directed edges. You are given a 0-indexed array edges where edges[i] indicates that there is an edge from node i to node edges[i]. Consider the following process on the graph:  You start from a node x and keep visiting other nodes through edges until you reach a node that you have already visited before on this same process.  Return an array answer where answer[i] is the number of different nodes that you will visit if you perform the process starting from node i.  Example 1:   Input: edges = [1,2,0,0] Output: [3,3,3,4] Explanation: We perform the process starting from each node in the following way: - Starting from node 0, we visit the nodes 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 3. - Starting from node 1, we visit the nodes 1 -> 2 -> 0 -> 1. The number of different nodes we visit is 3. - Starting from node 2, we visit the nodes 2 -> 0 -> 1 -> 2. The number of different nodes we visit is 3. - Starting from node 3, we visit the nodes 3 -> 0 -> 1 -> 2 -> 0. The number of different nodes we visit is 4.  Example 2:   Input: edges = [1,2,3,4,0] Output: [5,5,5,5,5] Explanation: Starting from any node we can visit every node in the graph in the process.   Constraints:  n == edges.length 2 <= n <= 105 0 <= edges[i] <= n - 1 edges[i] != i  "
}