{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5712000,
    "question_id": "3025",
    "elapsed_time": 30,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682223104,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 10,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1183872437",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n\nint minOperations(int* nums, int numsSize, int target) {\n    long long sum = 0;\n    int count[31] = {0};\n    for (int i = 0; i < numsSize; i++) {\n        sum += nums[i];\n        int bit = 0;\n        while ((1 << bit) < nums[i]) bit++;\n        count[bit]++;\n    }\n    if (sum < target) return -1;\n    int ops = 0;\n    for (int bit = 30; bit >= 0; bit--) {\n        if (target & (1 << bit)) {\n            if (count[bit] > 0) {\n                count[bit]--;\n            } else {\n                int nextBit = bit;\n                while (nextBit < 31 && count[nextBit] == 0) nextBit++;\n                if (nextBit == 31) return -1;\n                while (nextBit > bit) {\n                    count[nextBit]--;\n                    count[nextBit - 1] += 2;\n                    ops++;\n                    nextBit--;\n                }\n                count[bit]--;\n            }\n        }\n        if (bit > 0) {\n            count[bit - 1] += count[bit] * 2;\n            count[bit] = 0;\n        }\n    }\n    return ops;\n}"
}