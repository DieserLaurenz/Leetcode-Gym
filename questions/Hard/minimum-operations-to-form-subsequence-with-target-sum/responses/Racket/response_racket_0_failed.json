{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 125780000,
    "question_id": "3025",
    "elapsed_time": 5017,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708912043584,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1186273888",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (let loop ((nums (sort nums >)) (target target) (ops 0))\n    (cond\n      [(= target 0) ops]\n      [(or (null? nums) (< target 0)) -1]\n      [else\n       (let ((max-val (car nums)))\n         (if (>= max-val target)\n             (if (= max-val target) ops -1)\n             (loop (append (cdr nums) (list (/ max-val 2) (/ max-val 2))) target (+ ops 1))))])))"
}