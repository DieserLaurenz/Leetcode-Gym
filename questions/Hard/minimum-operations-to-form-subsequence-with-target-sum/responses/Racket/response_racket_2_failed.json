{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 100156000,
    "question_id": "3025",
    "elapsed_time": 5016,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708912112418,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1186274456",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (min-operations nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  (define (required-bits x)\n    (if (= x 0) 0\n        (+ 1 (required-bits (bitwise-and (sub1 x) x)))))\n  (letrec ((dfs (lambda (nums target ops)\n                  (cond [(= target 0) ops]\n                        [(or (null? nums) (< target (car nums))) +inf.0]\n                        [else (min (dfs (cdr nums) target ops)\n                                   (dfs (cdr nums) (- target (car nums)) (+ 1 ops)))])))\n           (solve (lambda (nums target)\n                    (let* ((sorted-nums (sort nums >))\n                           (max-possible (apply + sorted-nums))\n                           (min-ops (if (> max-possible target)\n                                        (dfs sorted-nums target 0)\n                                        +inf.0)))\n                      (if (= min-ops +inf.0) -1 min-ops)))))\n    (solve nums target)))"
}