{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 43604000,
    "question_id": "3025",
    "elapsed_time": 138,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,32,1,2]\n12",
    "expected_output": "2",
    "task_finish_time": 1708682399760,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 500,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1183874276",
    "input_formatted": "[1,32,1,2], 12",
    "input": "[1,32,1,2]\n12",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinOperations(IList<int> nums, int target) {\n        long sum = 0;\n        var freq = new Dictionary<int, int>();\n        foreach (var num in nums) {\n            sum += num;\n            int log = Log2(num);\n            if (!freq.ContainsKey(log)) {\n                freq[log] = 1;\n            } else {\n                freq[log]++;\n            }\n        }\n\n        if (sum < target) return -1;\n        if (sum == target) return 0;\n\n        int operations = 0;\n        for (int i = 30; i >= 0 && target > 0; --i) {\n            int pow2 = 1 << i;\n            if ((target & pow2) != 0) {\n                if (!freq.ContainsKey(i) || freq[i] == 0) {\n                    bool found = false;\n                    for (int j = i + 1; j <= 30; ++j) {\n                        if (freq.ContainsKey(j) && freq[j] > 0) {\n                            while (j > i && freq[j] > 0) {\n                                freq[j]--;\n                                operations++;\n                                if (!freq.ContainsKey(j - 1)) freq[j - 1] = 0;\n                                freq[j - 1] += 2;\n                                j--;\n                            }\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) return -1;\n                }\n                freq[i]--;\n                target -= pow2;\n            }\n            if (freq.ContainsKey(i) && freq[i] > 1) {\n                int toAdd = freq[i] / 2;\n                operations += toAdd;\n                if (!freq.ContainsKey(i - 1)) freq[i - 1] = 0;\n                freq[i - 1] += toAdd * 2;\n                freq[i] %= 2;\n            }\n        }\n        return operations;\n    }\n\n    private int Log2(int x) {\n        int result = 0;\n        while (x > 1) {\n            result++;\n            x >>= 1;\n        }\n        return result;\n    }\n}"
}