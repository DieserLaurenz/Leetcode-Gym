{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44120000,
    "question_id": "3025",
    "elapsed_time": 144,
    "compare_result": "1011000100010000100010010010000010010010000000000000000000100000000000000000000011000010000000000000000010000000000000000000001110000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000100000000000000000000000000000000000000000000010100110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100101000",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,32,1,2]\n12",
    "expected_output": "2",
    "task_finish_time": 1708682359088,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 32,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1183873881",
    "input_formatted": "[1,32,1,2], 12",
    "input": "[1,32,1,2]\n12",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinOperations(IList<int> nums, int target) {\n        long sum = 0;\n        var count = new Dictionary<int, int>();\n        foreach (var num in nums) {\n            sum += num;\n            int bit = Log2(num);\n            if (!count.ContainsKey(bit)) count[bit] = 0;\n            count[bit]++;\n        }\n        if (sum < target) return -1;\n        int ops = 0;\n        for (int i = 30; i >= 0; i--) {\n            if (((target >> i) & 1) != 0) {\n                if (!count.ContainsKey(i) || count[i] == 0) {\n                    int j = i - 1;\n                    while (j >= 0 && (!count.ContainsKey(j) || count[j] == 0)) j--;\n                    if (j < 0) return -1;\n                    while (j < i) {\n                        count[j] -= 2;\n                        if (!count.ContainsKey(j + 1)) count[j + 1] = 0;\n                        count[j + 1]++;\n                        ops++;\n                        j++;\n                    }\n                }\n                count[i]--;\n            }\n            if (count.ContainsKey(i) && count[i] > 1) {\n                if (!count.ContainsKey(i - 1)) count[i - 1] = 0;\n                count[i - 1] += 2 * (count[i] / 2);\n                ops += count[i] / 2;\n            }\n        }\n        return ops;\n    }\n    \n    private int Log2(int x) {\n        int res = 0;\n        while (x > 1) {\n            res++;\n            x >>= 1;\n        }\n        return res;\n    }\n}"
}