{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60352000,
    "question_id": "3025",
    "elapsed_time": 1363,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708912170213,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1186275009",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_operations(Nums :: [integer()], Target :: integer()) -> integer().\nmin_operations(Nums, Target) ->\n    Sorted = lists:sort(Nums),\n    {Result, _} = lists:foldl(fun(X, {Acc, T}) ->\n                                  if\n                                      T >= X ->\n                                          {Acc, T - X};\n                                      X > 1 ->\n                                          {Acc + 1, T + X div 2};\n                                      true ->\n                                          {Acc, T}\n                                  end\n                              end, {0, Target}, Sorted),\n    if\n        Result > 0 andalso Target == 0 ->\n            Result - 1;  % Subtract one because the last operation is not needed\n        Target == 0 ->\n            0;\n        true ->\n            -1\n    end."
}