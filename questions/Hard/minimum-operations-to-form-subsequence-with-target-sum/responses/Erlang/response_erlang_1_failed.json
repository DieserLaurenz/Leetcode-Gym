{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60368000,
    "question_id": "3025",
    "elapsed_time": 1416,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708912202519,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 361,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1186275286",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec min_operations(Nums :: [integer()], Target :: integer()) -> integer().\nmin_operations(Nums, Target) ->\n    {Sorted, _} = lists:foldl(fun(X, {Acc, Sum}) ->\n                                  if\n                                      X =< Target - Sum ->\n                                          {[X | Acc], Sum + X};\n                                      true ->\n                                          {Acc, Sum}\n                                  end\n                              end, {[], 0}, lists:reverse(lists:sort(Nums))),\n    find_min_operations(Sorted, Target, 0).\n\nfind_min_operations(_, 0, Ops) ->\n    Ops;\nfind_min_operations([], _, _) ->\n    -1;\nfind_min_operations([H | T], Target, Ops) when H > Target ->\n    find_min_operations(T, Target, Ops + 1);\nfind_min_operations([H | T], Target, Ops) ->\n    find_min_operations(T, Target - H, Ops)."
}