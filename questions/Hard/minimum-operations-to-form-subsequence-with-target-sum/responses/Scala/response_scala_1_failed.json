{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56096000,
    "question_id": "3025",
    "elapsed_time": 839,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683500642,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 38,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183885323",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minOperations(nums: List[Int], target: Int): Int = {\n        val freq = new Array[Int](31)\n        nums.foreach(num => freq((Math.log(num) / Math.log(2)).toInt) += 1)\n        var ops = 0\n        var sum = 0L\n        for (i <- 30 to 0 by -1) {\n            val current = 1 << i\n            if ((target & current) > 0) {\n                if (sum + current <= target) {\n                    if (freq(i) == 0) {\n                        var found = false\n                        for (j <- i + 1 to 30 if !found) {\n                            while (freq(j) > 0 && !found) {\n                                freq(j) -= 1\n                                ops += 1\n                                for (k <- j - 1 to i by -1) {\n                                    freq(k) += 2\n                                    ops += 1\n                                }\n                                if (freq(i) > 0) found = true\n                            }\n                        }\n                        if (!found) return -1\n                    }\n                    sum += current\n                    freq(i) -= 1\n                }\n            } else {\n                var extra = Math.min((target - sum) / current, freq(i).toLong)\n                sum += current * extra\n            }\n        }\n        if (sum == target) ops else -1\n    }\n}"
}