{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57380000,
    "question_id": "3025",
    "elapsed_time": 744,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,32,1,2]\n12",
    "expected_output": "2",
    "task_finish_time": 1708683542248,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 446,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183885767",
    "input_formatted": "[1,32,1,2], 12",
    "input": "[1,32,1,2]\n12",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minOperations(nums: List[Int], target: Int): Int = {\n        var sum = nums.sum\n        if (sum < target) return -1\n        if (sum == target) return 0\n\n        val count = Array.ofDim[Int](31)\n        nums.foreach(n => count((Math.log(n) / Math.log(2)).toInt) += 1)\n\n        var ops = 0\n        var currTarget = target\n\n        for (i <- 30 to 0 by -1) {\n            val value = 1 << i\n            while (count(i) > 0 && currTarget >= value) {\n                currTarget -= value\n                count(i) -= 1\n                sum -= value\n                if (currTarget <= sum) return ops\n            }\n            if (i > 0 && count(i) > 0) {\n                val neededOps = Math.min(count(i), (currTarget + value - 1) / value)\n                ops += neededOps\n                currTarget -= neededOps * value\n                sum -= neededOps * value\n                if (currTarget <= 0) return ops\n                count(i - 1) += 2 * neededOps\n            }\n        }\n        if (currTarget > 0) -1 else ops\n    }\n}"
}