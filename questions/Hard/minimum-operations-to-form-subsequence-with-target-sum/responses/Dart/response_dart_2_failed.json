{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 17: Char 45: Error: A value of type 'double' can't be assigned to a variable of type 'int'.",
    "full_runtime_error": "Line 17: Char 45: Error: A value of type 'double' can't be assigned to a variable of type 'int'.\n          sum = sum - nums[i] + nums[i] / 2 + nums[i] / 2;\n                                            ^",
    "status_runtime": "N/A",
    "memory": 146800000,
    "question_id": "3025",
    "elapsed_time": 373,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683169971,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1183881959",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minOperations(List<int> nums, int target) {\n    nums.sort((a, b) => b.compareTo(a)); // Sort in descending order\n    int operations = 0;\n\n    while (true) {\n      int sum = nums.fold(0, (prev, element) => prev + element);\n      if (sum == target) {\n        return operations;\n      } else if (sum < target) {\n        return -1;\n      }\n\n      bool operationPerformed = false;\n      for (int i = 0; i < nums.length; i++) {\n        if (nums[i] > 1 && sum - nums[i] + nums[i] / 2 + nums[i] / 2 >= target) {\n          sum = sum - nums[i] + nums[i] / 2 + nums[i] / 2;\n          nums.add(nums[i] ~/ 2);\n          nums.add(nums[i] ~/ 2);\n          nums.removeAt(i);\n          operations++;\n          operationPerformed = true;\n          break;\n        }\n      }\n\n      if (!operationPerformed) {\n        break;\n      }\n    }\n\n    // After operations, check if a subsequence can form the target\n    nums.sort((a, b) => b.compareTo(a)); // Sort in descending order again\n    int currentSum = 0;\n    for (int num in nums) {\n      if (currentSum + num <= target) {\n        currentSum += num;\n      }\n      if (currentSum == target) {\n        return operations;\n      }\n    }\n\n    return -1;\n  }\n}"
}