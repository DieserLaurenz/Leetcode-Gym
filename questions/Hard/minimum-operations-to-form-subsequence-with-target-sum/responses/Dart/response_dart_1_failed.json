{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 148124000,
    "question_id": "3025",
    "elapsed_time": 529,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683130813,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 53,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1183881529",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minOperations(List<int> nums, int target) {\n    Map<int, int> freq = {};\n    int sum = 0;\n    for (var num in nums) {\n      sum += num;\n      int bit = num;\n      while (bit > 0) {\n        freq[bit] = (freq[bit] ?? 0) + 1;\n        bit >>= 1;\n      }\n    }\n    if (sum < target) return -1;\n\n    int ops = 0;\n    while (target > 0 && freq.isNotEmpty) {\n      int maxBit = 1;\n      while (maxBit * 2 <= target) {\n        maxBit *= 2;\n      }\n      if (freq.containsKey(maxBit) && freq[maxBit]! > 0) {\n        target -= maxBit;\n        freq[maxBit] = freq[maxBit]! - 1;\n      } else {\n        return -1;\n      }\n      if (target == 0) break;\n      ops++;\n      for (int bit = maxBit; bit > 1; bit >>= 1) {\n        if (!freq.containsKey(bit) || freq[bit] == 0) {\n          freq[bit] = 2;\n          freq[bit >> 1] = (freq[bit >> 1] ?? 0) + 2;\n          break;\n        }\n      }\n    }\n    return target == 0 ? ops : -1;\n  }\n}"
}