{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 151936000,
    "question_id": "3025",
    "elapsed_time": 521,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683098883,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 296,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1183881210",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minOperations(List<int> nums, int target) {\n    Map<int, int> count = {};\n    int ops = 0;\n    int sum = 0;\n    for (int num in nums) {\n      count[num] = (count[num] ?? 0) + 1;\n      sum += num;\n    }\n    if (sum < target) return -1;\n    for (int i = 30; i >= 0; i--) {\n      int val = 1 << i;\n      while (target >= val && count[val] != null && count[val]! > 0) {\n        target -= val;\n        count[val] = count[val]! - 1;\n      }\n      if (target == 0) break;\n      if (i > 0) {\n        int needed = (target + val - 1) ~/ val;\n        int available = count[val] ?? 0;\n        int used = needed < available ? needed : available;\n        target -= used * val;\n        count[val] = available - used;\n        count[val >> 1] = (count[val >> 1] ?? 0) + used * 2;\n        ops += used;\n      }\n    }\n    return target == 0 ? ops : -1;\n  }\n}"
}