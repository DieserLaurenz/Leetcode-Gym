{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36936000,
    "question_id": "3025",
    "elapsed_time": 370,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683040463,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 295,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1183880604",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(nums: List<Int>, target: Int): Int {\n        var ops = 0\n        var currentSum = nums.sum()\n        val powerCount = IntArray(32)\n        nums.forEach { num ->\n            var power = 0\n            while ((1 shl power) < num) power++\n            powerCount[power]++\n        }\n        if (currentSum < target) return -1\n        for (i in 31 downTo 0) {\n            val value = 1 shl i\n            while (powerCount[i] > 0 && currentSum - value >= target) {\n                currentSum -= value\n                powerCount[i]--\n                ops++\n            }\n        }\n        if (currentSum == target) return ops\n        var extraOps = 0\n        for (i in 0 until 32) {\n            while (powerCount[i] > 0) {\n                val value = 1 shl i\n                if (currentSum + value <= target) {\n                    currentSum += value\n                    powerCount[i]--\n                    extraOps++\n                } else {\n                    break\n                }\n            }\n            if (currentSum == target) return ops + extraOps\n        }\n        return if (currentSum == target) ops else -1\n    }\n}"
}