{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37188000,
    "question_id": "3025",
    "elapsed_time": 319,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,32,1,2]\n12",
    "expected_output": "2",
    "task_finish_time": 1708682999928,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 297,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1183880198",
    "input_formatted": "[1,32,1,2], 12",
    "input": "[1,32,1,2]\n12",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(nums: List<Int>, target: Int): Int {\n        var total = 0\n        val count = mutableMapOf<Int, Int>()\n        for (num in nums) {\n            total += num\n            count[num] = count.getOrDefault(num, 0) + 1\n        }\n        if (total < target) return -1\n        if (total == target) return 0\n\n        var ops = 0\n        var remain = target\n        for (i in 30 downTo 0) {\n            val value = 1 shl i\n            if (remain >= value) {\n                val needed = remain / value\n                val available = count.getOrDefault(value, 0)\n                if (available >= needed) {\n                    return ops\n                } else {\n                    remain -= available * value\n                    ops += available\n                }\n            }\n            if (count.containsKey(value) && count[value]!! > 0) {\n                val half = value / 2\n                if (half > 0) {\n                    count[half] = count.getOrDefault(half, 0) + 2 * count[value]!!\n                    ops += count[value]!!\n                }\n            }\n        }\n        return if (remain > 0) -1 else ops\n    }\n}"
}