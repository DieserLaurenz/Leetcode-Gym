{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37852000,
    "question_id": "3025",
    "elapsed_time": 341,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682967447,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 24,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1183879855",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun minOperations(nums: List<Int>, target: Int): Int {\n        var sum = nums.sum()\n        val freq = IntArray(32)\n        for (num in nums) {\n            freq[31 - num.countLeadingZeroBits()]++\n        }\n        if (sum < target) return -1\n        var res = 0\n        var t = target\n        for (i in 31 downTo 0) {\n            if ((t shr i) and 1 == 1) {\n                if (freq[i] > 0) {\n                    freq[i]--\n                } else {\n                    var j = i - 1\n                    while (j >= 0 && freq[j] == 0) j--\n                    if (j < 0) return -1\n                    while (j < i) {\n                        freq[j] -= 2\n                        freq[j + 1]++\n                        res++\n                        j++\n                    }\n                    freq[i]--\n                }\n            }\n            if (freq[i] > 0) {\n                sum -= freq[i] * (1 shl i)\n                if (sum < t) return -1\n            }\n        }\n        return res\n    }\n}"
}