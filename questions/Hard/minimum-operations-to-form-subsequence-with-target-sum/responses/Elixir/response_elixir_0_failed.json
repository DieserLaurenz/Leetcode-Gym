{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 8: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 8: ** (ArgumentError) errors were found at the given arguments:\n  * 2nd argument: not a tuple\n    :erlang.element(2, 2)\n    solution.ex:8: Solution.min_operations/2\n    solution.ex:38: Driver.consume_test_cases/2\n    solution.ex:24: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 72904000,
    "question_id": "3025",
    "elapsed_time": 415,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708912310606,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1186276161",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec min_operations(nums :: [integer], target :: integer) :: integer\n  def min_operations(nums, target) do\n    nums = Enum.sort(nums, :desc)\n    {result, _} = Enum.reduce(nums, {0, target}, fn x, {ops, t} ->\n      if t == 0, do: {ops, t}, else: reduce_num(x, t, ops)\n    end)\n    if result > 0 and elem(result, 1) == 0, do: elem(result, 0), else: -1\n  end\n\n  defp reduce_num(x, t, ops) when x > t, do: {ops, t}\n  defp reduce_num(1, t, ops), do: {ops + 1, t - 1}\n  defp reduce_num(x, t, ops) do\n    if x <= t, do: {ops + 1, t - x}, else: split_num(x, t, ops)\n  end\n\n  defp split_num(x, t, ops) when x > 1 do\n    reduce_num(div(x, 2), t, ops + 1)\n  end\nend"
}