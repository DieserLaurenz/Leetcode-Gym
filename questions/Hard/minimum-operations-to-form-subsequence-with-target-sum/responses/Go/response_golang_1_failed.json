{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3208000,
    "question_id": "3025",
    "elapsed_time": 17,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683260811,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 38,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183882884",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(nums []int, target int) int {\n    sum := 0\n    maxPower := 0\n    for _, num := range nums {\n        sum += num\n        for x := num; x > 0; x /= 2 {\n            maxPower = max(maxPower, x)\n        }\n    }\n    if sum < target {\n        return -1\n    }\n\n    operations, currentSum := 0, 0\n    count := make(map[int]int)\n    for _, num := range nums {\n        count[num]++\n    }\n\n    for power := maxPower; power > 0 && currentSum != target; power /= 2 {\n        if currentSum+power <= target {\n            if count[power] > 0 {\n                currentSum += power\n                count[power]--\n            } else if power > 1 {\n                count[power] += 2\n                count[power/2] -= 2\n                operations++\n            }\n        }\n    }\n\n    if currentSum == target {\n        return operations\n    }\n    return -1\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}