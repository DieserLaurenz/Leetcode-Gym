{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3988000,
    "question_id": "3025",
    "elapsed_time": 19,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683228647,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183882573",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minOperations(nums []int, target int) int {\n    count := make(map[int]int)\n    for _, num := range nums {\n        count[num]++\n    }\n\n    operations := 0\n    for target > 0 {\n        if target%2 == 1 {\n            if count[1] > 0 {\n                count[1]--\n            } else {\n                return -1\n            }\n        }\n        target /= 2\n        nextCount := make(map[int]int)\n        for num, cnt := range count {\n            if num == 1 {\n                continue\n            }\n            if target >= num/2 {\n                nextCount[num/2] += 2 * cnt\n                operations += cnt\n            } else {\n                nextCount[num] = cnt\n            }\n        }\n        count = nextCount\n    }\n\n    return operations\n}"
}