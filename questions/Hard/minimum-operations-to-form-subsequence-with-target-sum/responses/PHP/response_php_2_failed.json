{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20488000,
    "question_id": "3025",
    "elapsed_time": 175,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682779734,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 295,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1183878014",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function minOperations($nums, $target) {\n        $count = 0;\n        $sum = 0;\n        $pow2 = array_fill(0, 31, 0);\n\n        foreach ($nums as $num) {\n            $sum += $num;\n            $pow2[(int)log($num, 2)]++;\n        }\n\n        if ($sum < $target) return -1;\n        if ($sum == $target) return 0;\n\n        for ($i = 30; $i >= 0 && $sum >= $target; $i--) {\n            if ($pow2[$i] == 0) continue;\n            $value = 1 << $i;\n            $maxRemove = min($pow2[$i], (int)(($sum - $target) / $value));\n            if ($maxRemove > 0) {\n                $sum -= $value * $maxRemove;\n                $count += $maxRemove;\n                $pow2[$i] -= $maxRemove;\n                $pow2[$i - 1] += 2 * $maxRemove;\n            }\n        }\n\n        return $sum == $target ? $count : -1;\n    }\n}"
}