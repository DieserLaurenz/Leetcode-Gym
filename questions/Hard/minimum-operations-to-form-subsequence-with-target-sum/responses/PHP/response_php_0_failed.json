{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20232000,
    "question_id": "3025",
    "elapsed_time": 53,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682710576,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1183877325",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function minOperations($nums, $target) {\n        $freq = array_fill(0, 31, 0);\n        foreach ($nums as $num) {\n            $freq[(int)log($num, 2)]++;\n        }\n        $operations = 0;\n        for ($i = 30; $i >= 0; $i--) {\n            if ($target >= (1 << $i)) {\n                $needed = (int)($target / (1 << $i));\n                $take = min($needed, $freq[$i]);\n                $target -= $take * (1 << $i);\n                $freq[$i] -= $take;\n                $freq[$i - 1] += $take * 2;\n                $operations += $take;\n            }\n        }\n        return $target == 0 ? $operations : -1;\n    }\n}"
}