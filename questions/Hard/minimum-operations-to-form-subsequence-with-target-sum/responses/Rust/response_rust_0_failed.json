{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2152000,
    "question_id": "3025",
    "elapsed_time": 36,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683597884,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 162,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1183886380",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, target: i32) -> i32 {\n        use std::collections::HashMap;\n\n        let mut power_count = HashMap::new();\n        for &num in &nums {\n            *power_count.entry(num).or_insert(0) += 1;\n        }\n\n        let mut target = target;\n        let mut operations = 0;\n\n        for power in (0..=30).rev() {\n            let value = 1 << power;\n            while target >= value && power_count.get(&value).unwrap_or(&0) > &0 {\n                target -= value;\n                *power_count.entry(value).or_insert(0) -= 1;\n                if value > 1 {\n                    *power_count.entry(value / 2).or_insert(0) += 2;\n                    operations += 1;\n                }\n            }\n        }\n\n        if target == 0 { operations } else { -1 }\n    }\n}"
}