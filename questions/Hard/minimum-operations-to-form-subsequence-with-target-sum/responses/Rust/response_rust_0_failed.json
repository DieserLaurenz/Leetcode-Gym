{
    "status_code": 14,
    "lang": "rust",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 2012000,
    "question_id": "3025",
    "elapsed_time": 2027,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708911913146,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1186272843",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, target: i32) -> i32 {\n        let mut freq = std::collections::HashMap::new();\n        for num in nums {\n            *freq.entry(num).or_insert(0) += 1;\n        }\n\n        let mut operations = 0;\n        let mut current_target = target;\n        \n        for i in (0..=30).rev() {\n            let power_of_two = 1 << i;\n            while current_target >= power_of_two {\n                if let Some(count) = freq.get_mut(&power_of_two) {\n                    if *count > 0 {\n                        current_target -= power_of_two;\n                        *count -= 1;\n                        continue;\n                    }\n                }\n                if power_of_two == 1 {\n                    return -1;\n                }\n                operations += 1;\n                let half = power_of_two / 2;\n                *freq.entry(half).or_insert(0) += 2;\n            }\n        }\n\n        if current_target == 0 { operations } else { -1 }\n    }\n}"
}