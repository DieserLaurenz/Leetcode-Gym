{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2140000,
    "question_id": "3025",
    "elapsed_time": 11,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708911986714,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 295,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1186273468",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, target: i32) -> i32 {\n        let mut total = nums.iter().sum::<i32>();\n        if total < target {\n            return -1;\n        }\n\n        let mut operations = 0;\n        let mut bits = vec![0; 32];\n        for &num in &nums {\n            bits[num.trailing_zeros() as usize] += 1;\n        }\n\n        let mut remain = target;\n        for i in (0..32).rev() {\n            if remain == 0 {\n                break;\n            }\n            let val = 1 << i;\n            if val <= remain {\n                let max_use = remain / val;\n                let use_count = max_use.min(bits[i]);\n                remain -= use_count * val;\n                bits[i] -= use_count;\n            }\n            if i > 0 && bits[i] > 0 {\n                let next_half = bits[i] * 2;\n                bits[i - 1] += next_half;\n                operations += bits[i];\n                bits[i] = 0;\n            }\n        }\n\n        if remain > 0 {\n            -1\n        } else {\n            operations\n        }\n    }\n}"
}