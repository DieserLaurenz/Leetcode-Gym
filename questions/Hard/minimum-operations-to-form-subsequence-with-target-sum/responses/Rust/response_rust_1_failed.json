{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2160000,
    "question_id": "3025",
    "elapsed_time": 10,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708911945663,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 130,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1186273125",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn min_operations(nums: Vec<i32>, target: i32) -> i32 {\n        let mut sum = 0;\n        let mut max_bit = 0;\n        let mut bit_count = vec![0; 31];\n\n        for &num in &nums {\n            sum += num;\n            for i in 0..31 {\n                if num == 1 << i {\n                    bit_count[i] += 1;\n                    max_bit = max_bit.max(i);\n                    break;\n                }\n            }\n        }\n\n        if sum < target {\n            return -1;\n        }\n\n        let mut ops = 0;\n        let mut curr_target = target;\n\n        for bit in (0..=max_bit).rev() {\n            let val = 1 << bit;\n            if curr_target >= val {\n                let needed = curr_target / val;\n                let take = needed.min(bit_count[bit]);\n                curr_target -= take * val;\n                ops += take;\n            }\n\n            if curr_target == 0 {\n                return ops;\n            }\n\n            bit_count[bit - 1] += bit_count[bit] * 2;\n        }\n\n        if curr_target > 0 {\n            -1\n        } else {\n            ops\n        }\n    }\n}"
}