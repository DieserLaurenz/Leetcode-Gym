{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16808000,
    "question_id": "3025",
    "elapsed_time": 76,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708911819550,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 137,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186272068",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import Counter\n\nclass Solution:\n    def minOperations(self, nums: List[int], target: int) -> int:\n        count = Counter(nums)\n        ops = 0\n        \n        while True:\n            if target in count and count[target] > 0:\n                return ops\n            if target % 2 == 1:\n                if 1 in count and count[1] > 0:\n                    count[1] -= 1\n                    target -= 1\n                else:\n                    return -1\n            else:\n                if target // 2 in count and count[target // 2] > 0:\n                    count[target // 2] -= 1\n                    count[target] += 1\n                    target //= 2\n                    ops += 1\n                elif 1 in count and count[1] > 0:\n                    needed_ones = target - 2 ** (target.bit_length() - 1)\n                    if count[1] >= needed_ones:\n                        return ops + 1\n                    return -1\n                else:\n                    return -1"
}