{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16600000,
    "question_id": "3025",
    "elapsed_time": 68,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708911789076,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 239,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186271836",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def minOperations(self, nums: List[int], target: int) -> int:\n        power_count = [0] * 31\n        for num in nums:\n            power_count[num.bit_length() - 1] += 1\n        \n        operations = 0\n        for i in range(30, -1, -1):\n            if target >= (1 << i):\n                needed = target >> i\n                if power_count[i] >= needed:\n                    return operations\n                target -= power_count[i] * (1 << i)\n                operations += power_count[i]\n                if i > 0:\n                    power_count[i-1] += power_count[i] * 2\n            if target == 0:\n                break\n                \n        return -1 if target > 0 else operations"
}