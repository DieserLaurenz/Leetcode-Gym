{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51568000,
    "question_id": "3025",
    "elapsed_time": 91,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682458776,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1183874838",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "var minOperations = function(nums, target) {\n    let sum = nums.reduce((acc, val) => acc + val, 0);\n    if (sum < target) return -1;\n    let count = Array(31).fill(0);\n    nums.forEach(num => {\n        count[Math.log2(num)]++;\n    });\n    let operations = 0, curTarget = target;\n    for (let i = 30; i >= 0; i--) {\n        let val = 1 << i;\n        if (curTarget >= val) {\n            let need = Math.min(count[i], Math.floor(curTarget / val));\n            curTarget -= need * val;\n            if (i > 0) count[i - 1] += 2 * need;\n            operations += need;\n        }\n        if (curTarget === 0) break;\n    }\n    return curTarget === 0 ? operations : -1;\n};"
}