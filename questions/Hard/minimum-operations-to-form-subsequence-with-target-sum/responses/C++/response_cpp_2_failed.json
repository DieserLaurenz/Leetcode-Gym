{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26716000,
    "question_id": "3025",
    "elapsed_time": 27,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,32,1,2]\n12",
    "expected_output": "2",
    "task_finish_time": 1708681998458,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 182,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1183870122",
    "input_formatted": "[1,32,1,2], 12",
    "input": "[1,32,1,2]\n12",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums, int target) {\n        unordered_map<int, int> freq;\n        long long totalSum = 0;\n        for (int num : nums) {\n            totalSum += num;\n            freq[num]++;\n        }\n\n        if (totalSum < target) {\n            return -1; // Impossible if total sum is less than target\n        }\n\n        int operations = 0;\n        while (true) {\n            if (freq.count(target)) {\n                return operations;\n            }\n\n            if (target % 2 == 0 && freq[target / 2] >= 2) {\n                return operations + 1;\n            }\n\n            if (target == 1) {\n                return -1; // Can't split 1 further to make a sum\n            }\n\n            if (target % 2 == 1) { // If target is odd\n                target--; // Subtract 1 and continue\n            } else { // If target is even\n                target /= 2; // Halve the target\n                operations++; // Increment operations as this is a valid split\n            }\n        }\n    }\n};"
}