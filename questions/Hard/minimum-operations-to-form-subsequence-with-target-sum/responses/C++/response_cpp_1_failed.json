{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27036000,
    "question_id": "3025",
    "elapsed_time": 38,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1]\n1",
    "expected_output": "0",
    "task_finish_time": 1708681958390,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1183869709",
    "input_formatted": "[1], 1",
    "input": "[1]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums, int target) {\n        unordered_map<int, int> count;\n        long long sum = 0;\n        for (int x : nums) {\n            count[x]++;\n            sum += x;\n        }\n        if (sum < target) return -1;\n        int ans = INT_MAX;\n        sort(nums.begin(), nums.end());\n        nums.erase(unique(nums.begin(), nums.end()), nums.end());\n        for (int x : nums) {\n            if (sum - x < target) continue;\n            int curTarget = target, ops = 0;\n            for (int y : nums) {\n                if (y >= curTarget) break;\n                while (count[y] > 0 && 2 * y <= curTarget) {\n                    ops++;\n                    count[y]--;\n                    count[2 * y]++;\n                    y *= 2;\n                }\n            }\n            if (curTarget <= sum) ans = min(ans, ops);\n            for (int y : nums) count[y] = 0;\n            for (int x : nums) count[x]++;\n            sum -= x;\n            count[x]--;\n        }\n        return ans == INT_MAX ? -1 : ans;\n    }\n};"
}