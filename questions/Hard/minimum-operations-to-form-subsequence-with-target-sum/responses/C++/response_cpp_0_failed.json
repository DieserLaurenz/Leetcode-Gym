{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 23364000,
    "question_id": "3025",
    "elapsed_time": 31,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708681917889,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 291,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1183869285",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums, int target) {\n        unordered_map<int, int> powerCount;\n        int sum = 0, operations = 0;\n\n        // Count the occurrences of each power of 2\n        for (int num : nums) {\n            powerCount[num]++;\n            sum += num;\n        }\n\n        if (sum < target) return -1; // Impossible to reach the target\n        \n        for (int power = 30; power >= 0; power--) {\n            int value = 1 << power;\n            while (powerCount[value] > 0 && sum - value >= target) {\n                sum -= value;\n                powerCount[value]--;\n                powerCount[value / 2] += 2;\n                operations++;\n            }\n        }\n        \n        return sum == target ? operations : -1;\n    }\n};"
}