{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53540000,
    "question_id": "3025",
    "elapsed_time": 112,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682618018,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 295,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1183876384",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minOperations(nums: number[], target: number): number {\n    const count = new Map<number, number>();\n    let operations = 0, currentSum = 0;\n\n    for (const num of nums) {\n        currentSum += num;\n        count.set(num, (count.get(num) || 0) + 1);\n    }\n\n    if (currentSum < target) return -1;\n    if (currentSum === target) return 0;\n\n    for (let bit = 30; bit >= 0; bit--) {\n        const val = 1 << bit;\n        while (count.get(val) > 0 && currentSum - val >= target) {\n            operations++;\n            currentSum -= val;\n            count.set(val, count.get(val) - 1);\n            const half = val / 2;\n            count.set(half, (count.get(half) || 0) + 2);\n        }\n    }\n\n    return currentSum === target ? operations : -1;\n}"
}