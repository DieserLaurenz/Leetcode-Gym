{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211796000,
    "question_id": "3025",
    "elapsed_time": 1070,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683386627,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1183884161",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef min_operations(nums, target)\n    sum = nums.sum\n    return -1 if sum < target\n\n    count = 0\n    nums.sort!.reverse!\n    nums.each_with_index do |num, index|\n        next if num > target\n        while num <= target && target > 0\n            target -= num\n            count += 1\n            break if target == 0\n        end\n        break if target == 0\n    end\n\n    ops = 0\n    while sum > target\n        doubled = false\n        nums.each_with_index do |num, i|\n            if num > 1 && (sum - num + num / 2) >= target\n                sum -= num - num / 2\n                nums[i] = num / 2\n                nums.push(num / 2)\n                ops += 1\n                doubled = true\n                break\n            end\n        end\n        break unless doubled\n    end\n\n    ops + count\nend"
}