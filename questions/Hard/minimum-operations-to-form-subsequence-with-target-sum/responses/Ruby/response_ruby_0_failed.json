{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212316000,
    "question_id": "3025",
    "elapsed_time": 229,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708683352182,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 300,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1183883801",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef min_operations(nums, target)\n    freq = Hash.new(0)\n    nums.each { |num| freq[num] += 1 }\n    operations = 0\n\n    while target > 0\n        largest = [target, nums.max].min\n        while largest > 0 and freq[largest] == 0\n            largest >>= 1\n        end\n        return -1 if largest == 0\n\n        if target >= largest\n            needed = target / largest\n            take = [needed, freq[largest]].min\n            target -= take * largest\n            freq[largest] -= take\n        end\n\n        if largest > 1 and freq[largest] > 0\n            freq[largest / 2] += freq[largest] * 2\n            operations += freq[largest]\n            freq[largest] = 0\n        end\n    end\n\n    operations\nend"
}