{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11648000,
    "question_id": "3025",
    "elapsed_time": 52,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708911679519,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186270929",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minOperations(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        power_count = [0] * 31\n        for num in nums:\n            power_count[num.bit_length() - 1] += 1\n        \n        operations = 0\n        for i in range(30, -1, -1):\n            if target >= (1 << i):\n                needed = (target >> i)\n                take = min(needed, power_count[i])\n                operations += take\n                target -= take * (1 << i)\n                power_count[i] -= take\n                if i > 0:\n                    power_count[i-1] += take * 2\n        return operations if target == 0 else -1"
}