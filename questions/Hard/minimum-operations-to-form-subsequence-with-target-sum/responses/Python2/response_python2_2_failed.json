{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11692000,
    "question_id": "3025",
    "elapsed_time": 462,
    "compare_result": "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000",
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708911737034,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186271415",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minOperations(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        from collections import Counter\n        \n        # Count the occurrence of each power of 2 in nums\n        power_count = Counter(nums)\n        operations = 0\n        \n        # Convert target into its binary representation and start from the highest power of 2\n        for power in range(30, -1, -1):\n            if not target:\n                break\n            power_of_two = 1 << power\n            \n            # Calculate how many times the current power of two fits into the target\n            while power_of_two <= target and power_count[power_of_two]:\n                operations += 1\n                target -= power_of_two\n                power_count[power_of_two] -= 1\n                \n                # When splitting the current power of two, add two halves to the counter\n                power_count[power_of_two // 2] += 2\n                \n        return operations if target == 0 else -1"
}