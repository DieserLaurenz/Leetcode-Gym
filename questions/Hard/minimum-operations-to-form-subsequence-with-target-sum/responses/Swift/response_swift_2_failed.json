{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16096000,
    "question_id": "3025",
    "elapsed_time": 45,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682905912,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1183879274",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minOperations(_ nums: [Int], _ target: Int) -> Int {\n        var ops = 0\n        var currentTarget = target\n        \n        // Count frequencies of the powers of 2\n        var frequency = [Int: Int]()\n        for num in nums {\n            frequency[num, default: 0] += 1\n        }\n        \n        let sortedKeys = frequency.keys.sorted(by: >)\n        \n        for key in sortedKeys {\n            let value = key\n            if currentTarget >= value {\n                let needed = min(currentTarget / value, frequency[value]!)\n                ops += needed\n                currentTarget -= value * needed\n                if currentTarget == 0 { break }\n            }\n        }\n        \n        return currentTarget == 0 ? ops : -1\n    }\n}"
}