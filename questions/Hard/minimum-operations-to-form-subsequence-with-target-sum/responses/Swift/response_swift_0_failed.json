{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15812000,
    "question_id": "3025",
    "elapsed_time": 72,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682839774,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 355,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1183878629",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func minOperations(_ nums: [Int], _ target: Int) -> Int {\n        var count = [Int: Int]()\n        var total = 0\n        for num in nums {\n            count[num, default: 0] += 1\n            total += num\n        }\n        if total < target { return -1 }\n        if total == target { return 0 }\n\n        var ops = 0\n        var needed = target\n        for power in stride(from: 30, through: 0, by: -1) {\n            let val = 1 << power\n            while needed >= val, let cnt = count[val], cnt > 0 {\n                needed -= val\n                count[val]! -= 1\n                if needed == 0 { return ops }\n                if val > 1 {\n                    let half = val >> 1\n                    count[half, default: 0] += 2\n                    ops += 1\n                }\n            }\n        }\n        return needed == 0 ? ops : -1\n    }\n}"
}