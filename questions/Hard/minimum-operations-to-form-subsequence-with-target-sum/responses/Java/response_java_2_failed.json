{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44764000,
    "display_runtime": "50",
    "question_id": "3025",
    "elapsed_time": 269,
    "compare_result": "1011010001000100110010000100010000000100010000100100010000010001000001001100000010010001001000010011000001000100000100110000000010100110000010001001001000100001011000100000100110010110001000010110001000011001100000100110000000100110000010011001001000100000010010001000001001100101100010000000100010010101001001100100100010000010001000000010001000000000001000100101100110000110001001000010011000001000100100100110010000100010010010001001001000100100001000100101100110010010001001000001100110010010001001011000100000011001100001010010011000011001100001100010010101100010000100000000000001000000000000000000000001000000000010001000000001001100000010000000000000101000000010000000000001100000000000000000010001001000000000000000000000000000000000000101001001",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,32,1,2]\n12",
    "expected_output": "2",
    "task_finish_time": 1708682121520,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 192,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1183871412",
    "input_formatted": "[1,32,1,2], 12",
    "input": "[1,32,1,2]\n12",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(List<Integer> nums, int target) {\n        long totalSum = 0;\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : nums) {\n            totalSum += num;\n            int bit = log2(num);\n            freq.put(bit, freq.getOrDefault(bit, 0) + 1);\n        }\n        if (totalSum < target) return -1;\n\n        int operations = 0;\n        for (int i = 30; i >= 0 && totalSum >= target && target > 0; i--) {\n            int bitValue = 1 << i;\n            while (target >= bitValue && freq.getOrDefault(i, 0) > 0) {\n                target -= bitValue;\n                freq.put(i, freq.get(i) - 1);\n                totalSum -= bitValue;\n                int half = bitValue >> 1;\n                if (half > 0) {\n                    int lowerBit = log2(half);\n                    freq.put(lowerBit, freq.getOrDefault(lowerBit, 0) + 2);\n                }\n                if (bitValue > 1) operations++;\n            }\n        }\n        return totalSum < target ? -1 : operations;\n    }\n\n    private int log2(int N) {\n        return (int)(Math.log(N) / Math.log(2));\n    }\n}"
}