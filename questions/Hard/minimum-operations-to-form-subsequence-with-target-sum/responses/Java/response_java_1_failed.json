{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44916000,
    "display_runtime": "15",
    "question_id": "3025",
    "elapsed_time": 187,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,8]\n7",
    "expected_output": "1",
    "task_finish_time": 1708682089828,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 309,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1183871110",
    "input_formatted": "[1,2,8], 7",
    "input": "[1,2,8]\n7",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(List<Integer> nums, int target) {\n        long sum = 0;\n        Map<Integer, Integer> count = new HashMap<>();\n        for (int num : nums) {\n            sum += num;\n            for (int i = num; i > 0; i >>= 1) {\n                count.put(i, count.getOrDefault(i, 0) + 1);\n            }\n        }\n        if (sum < target) return -1;\n        if (sum == target) return 0;\n\n        int operations = 0;\n        for (int i = 30; i >= 0; i--) {\n            int val = 1 << i;\n            if ((target & val) != 0) {\n                if (count.getOrDefault(val, 0) == 0) {\n                    return -1;\n                }\n                count.put(val, count.get(val) - 1);\n            }\n            int nextVal = val << 1;\n            int available = count.getOrDefault(val, 0);\n            count.put(nextVal, count.getOrDefault(nextVal, 0) + available / 2);\n            if (available % 2 != 0 && val != 1) {\n                operations += 1;\n            }\n        }\n        return operations;\n    }\n}"
}