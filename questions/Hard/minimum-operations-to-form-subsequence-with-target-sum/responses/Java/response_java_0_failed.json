{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41004000,
    "question_id": "3025",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[16,128,32]\n1",
    "expected_output": "4",
    "task_finish_time": 1708682058928,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 43,
    "total_testcases": 754,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1183870757",
    "input_formatted": "[16,128,32], 1",
    "input": "[16,128,32]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minOperations(List<Integer> nums, int target) {\n        long sum = 0;\n        int maxPow = 0;\n        for (int num : nums) {\n            sum += num;\n            maxPow = Math.max(maxPow, Integer.highestOneBit(num));\n        }\n        if (sum < target) return -1;\n        int operations = 0;\n        while (sum > target) {\n            if (maxPow <= target || !nums.contains(maxPow)) {\n                maxPow >>= 1;\n                continue;\n            }\n            nums.remove(Integer.valueOf(maxPow));\n            nums.add(maxPow >> 1);\n            nums.add(maxPow >> 1);\n            sum -= maxPow >> 1;\n            operations++;\n        }\n        return operations;\n    }\n}"
}