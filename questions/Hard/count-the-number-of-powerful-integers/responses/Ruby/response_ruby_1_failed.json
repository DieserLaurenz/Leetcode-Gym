{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211396000,
    "question_id": "3243",
    "elapsed_time": 133,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708424432625,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 38,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1180840557",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} start\n# @param {Integer} finish\n# @param {Integer} limit\n# @param {String} s\n# @return {Integer}\ndef number_of_powerful_int(start, finish, limit, s)\n  count = 0\n  prefix_limit = (\"#{limit}\" * s.length).to_i\n  s_val = s.to_i\n\n  return 0 if s_val > finish || s_val < start\n\n  (0..limit).each do |prefix|\n    num = prefix.to_s + s\n    next if prefix > 0 && num.to_i > finish\n    break if num.to_i > finish\n    count += 1 if num.to_i >= start && num.to_i <= finish && num.to_i.to_s.end_with?(s) && num.to_i <= prefix_limit\n  end\n  \n  count\nend"
}