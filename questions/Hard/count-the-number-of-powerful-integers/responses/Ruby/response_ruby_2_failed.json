{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 227196000,
    "question_id": "3243",
    "elapsed_time": 3185,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708424475944,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1180841024",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} start\n# @param {Integer} finish\n# @param {Integer} limit\n# @param {String} s\n# @return {Integer}\ndef number_of_powerful_int(start, finish, limit, s)\n  count = 0\n  len = s.length\n  base = s.to_i\n\n  (0..(finish.to_s.length - len)).each do |prefix_length|\n    next if prefix_length > 0 && \"1\" + \"0\" * (prefix_length - 1) + s > finish.to_s\n    (prefix_length == 0 ? [base] : (1..limit).to_a.repeated_permutation(prefix_length).map{|p| p.join.to_i}).each do |prefix|\n      num = prefix * (10 ** len) + base\n      count += 1 if num >= start && num <= finish\n    end\n  end\n\n  count\nend"
}