{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2064000,
    "question_id": "3243",
    "elapsed_time": 25,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "15\n215\n6\n\"10\"",
    "expected_output": "2",
    "task_finish_time": 1708424676855,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 213,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180843523",
    "input_formatted": "15, 215, 6, \"10\"",
    "input": "15\n215\n6\n\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn number_of_powerful_int(start: i64, finish: i64, limit: i32, s: String) -> i64 {\n        let mut count = 0;\n        let s_len = s.len() as i64;\n        let mut num = s.parse::<i64>().unwrap();\n        \n        // Ensure the suffix is within the start-finish range.\n        if num < start || num > finish {\n            return 0;\n        }\n        \n        count += 1; // Count the suffix itself if it's in range.\n        let mut prefix = 1;\n        \n        loop {\n            num = format!(\"{}{}\", prefix, s).parse::<i64>().unwrap();\n            if num > finish {\n                break;\n            }\n            if num >= start && num <= finish && prefix.to_string().chars().all(|c| c.to_digit(10).unwrap() <= limit as u32) {\n                count += 1;\n            }\n            prefix += 1;\n            if prefix.to_string().len() as i64 > s_len || prefix > 10_i64.pow(limit as u32) {\n                break;\n            }\n        }\n        \n        count\n    }\n}"
}