{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2108000,
    "question_id": "3243",
    "elapsed_time": 2016,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708424718764,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 84,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180844023",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn number_of_powerful_int(start: i64, finish: i64, limit: i32, s: String) -> i64 {\n        if limit == 0 {\n            return 0;\n        }\n\n        let s_int = s.parse::<i64>().unwrap();\n        let mut count = 0;\n        let mut base = 1;\n\n        while base < finish {\n            let current = base * 10_i64.pow(s.len() as u32) + s_int;\n            if current > finish {\n                break;\n            }\n            if current >= start && current <= finish {\n                let mut valid = true;\n                let mut temp = base;\n                while temp > 0 {\n                    if temp % 10 > limit as i64 {\n                        valid = false;\n                        break;\n                    }\n                    temp /= 10;\n                }\n                if valid {\n                    count += 1;\n                }\n            }\n            base += 1;\n        }\n\n        count\n    }\n}"
}