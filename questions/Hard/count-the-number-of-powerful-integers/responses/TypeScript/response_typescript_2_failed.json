{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58032000,
    "question_id": "3243",
    "elapsed_time": 4022,
    "compare_result": "01110000000000000000000010000000000111100000000000000001111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708423437719,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1180828646",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function numberOfPowerfulInt(start: number, finish: number, limit: number, s: string): number {\n    let count = 0;\n    // Determine the range for prefixes based on the length of s and the value of limit\n    let maxPrefix = '';\n    for (let i = 0; i < s.length; i++) {\n        maxPrefix += limit.toString();\n    }\n    const maxPrefixValue = parseInt(maxPrefix);\n\n    // Generate all possible numbers by prefixing s with numbers where each digit is <= limit\n    for (let prefix = 0; prefix <= maxPrefixValue; prefix++) {\n        let isValidPrefix = true;\n        // Check if all digits in prefix are <= limit\n        for (const digit of prefix.toString()) {\n            if (parseInt(digit) > limit) {\n                isValidPrefix = false;\n                break;\n            }\n        }\n        if (isValidPrefix) {\n            const num = parseInt(prefix + s);\n            if (num >= start && num <= finish) {\n                count++;\n            }\n        }\n    }\n\n    // Special case for no prefix (only if s by itself falls within the range and meets criteria)\n    const sAsNumber = parseInt(s);\n    if (sAsNumber >= start && sAsNumber <= finish && s.length > 1) {\n        count++; // Include s itself if it's within range and not counted yet\n    }\n\n    return count;\n}"
}