{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3024000,
    "question_id": "3243",
    "elapsed_time": 20,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708424253531,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 99,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180838394",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func numberOfPowerfulInt(start int64, finish int64, limit int, s string) int64 {\n    var count int64 = 0\n    suffixValue, _ := strconv.ParseInt(s, 10, 64)\n    if suffixValue < start || suffixValue > finish {\n        return 0\n    }\n\n    // Calculate the minimum and maximum values that can prepend the suffix\n    minPrepend, maxPrepend := \"\", \"\"\n    for i := 0; i < len(s); i++ {\n        minPrepend += \"0\"\n        maxPrepend += strconv.Itoa(limit)\n    }\n    minPrependValue, _ := strconv.ParseInt(minPrepend, 10, 64)\n    maxPrependValue, _ := strconv.ParseInt(maxPrepend, 10, 64)\n\n    for i := minPrependValue; i <= maxPrependValue; i++ {\n        valStr := strconv.FormatInt(i, 10) + s\n        val, _ := strconv.ParseInt(valStr, 10, 64)\n        if val >= start && val <= finish {\n            count++\n        }\n        if val > finish {\n            break\n        }\n    }\n\n    return count\n}"
}