{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2156000,
    "question_id": "3243",
    "elapsed_time": 3011,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708424296640,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 74,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180838867",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func numberOfPowerfulInt(start int64, finish int64, limit int, s string) int64 {\n    var count int64 = 0\n    suffix, _ := strconv.ParseInt(s, 10, 64)\n    if suffix > finish {\n        return 0\n    }\n    suffixLength := int64(len(s))\n    startPrefix := start / int64(math.Pow10(int(suffixLength)))\n    endPrefix := finish / int64(math.Pow10(int(suffixLength)))\n    for prefix := startPrefix; prefix <= endPrefix; prefix++ {\n        if prefix == 0 || checkPrefix(prefix, int64(limit)) {\n            powerfulInt := prefix*int64(math.Pow10(int(suffixLength))) + suffix\n            if powerfulInt >= start && powerfulInt <= finish {\n                count++\n            }\n        }\n    }\n    if startPrefix == 0 {\n        count-- // Exclude the suffix itself if counted twice\n    }\n    return count\n}\n\nfunc checkPrefix(prefix int64, limit int64) bool {\n    for prefix > 0 {\n        if prefix%10 > limit {\n            return false\n        }\n        prefix /= 10\n    }\n    return true\n}"
}