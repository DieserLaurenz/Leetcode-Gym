{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2584000,
    "question_id": "3243",
    "elapsed_time": 15,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708424337074,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 100,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180839416",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func numberOfPowerfulInt(start int64, finish int64, limit int, s string) int64 {\n    count := int64(0)\n    sInt, _ := strconv.ParseInt(s, 10, 64)\n    length := len(s)\n    multiplier := int64(math.Pow10(length))\n\n    // Check if s itself is within the range and conditions\n    if sInt >= start && sInt <= finish {\n        count++\n    }\n\n    for i := 1; i <= limit; i++ {\n        for j := 0; j < int(math.Pow(float64(limit+1), float64(j))); j++ {\n            prefix := int64(i)*int64(math.Pow(float64(limit+1), float64(j)))\n            number := prefix*multiplier + sInt\n            if number > finish {\n                break // Exit if the number exceeds the finish value\n            }\n            if number >= start && number <= finish {\n                count++\n            }\n        }\n    }\n\n    // Deduct cases where the prefix is not needed if s starts with a digit higher than limit\n    if int(s[0]-'0') > limit {\n        count--\n    }\n\n    return count\n}"
}