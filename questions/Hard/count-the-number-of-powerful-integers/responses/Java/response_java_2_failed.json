{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41600000,
    "question_id": "3243",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "20\n1159\n5\n\"20\"",
    "expected_output": "8",
    "task_finish_time": 1708414745397,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 97,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1180722190",
    "input_formatted": "20, 1159, 5, \"20\"",
    "input": "20\n1159\n5\n\"20\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public long numberOfPowerfulInt(long start, long finish, int limit, String s) {\n        long count = 0;\n        // Convert the suffix string to a number for easier comparison\n        long suffix = Long.parseLong(s);\n        long min = (long) Math.pow(10, s.length() - 1);\n        if (suffix < min) {\n            return 0; // Suffix does not meet the minimum value requirement\n        }\n\n        // Start from the minimum number that can be formed with the suffix\n        long current = suffix;\n        while (current <= finish) {\n            if (current >= start && isValid(current, limit)) {\n                count++;\n            }\n            // Calculate the next number with the suffix within the limit\n            long next = nextValid(current, limit, s);\n            if (next == current) {\n                break;\n            }\n            current = next;\n        }\n\n        return count;\n    }\n\n    private boolean isValid(long number, int limit) {\n        while (number > 0) {\n            if (number % 10 > limit) {\n                return false;\n            }\n            number /= 10;\n        }\n        return true;\n    }\n\n    private long nextValid(long current, int limit, String s) {\n        // Generate the next number by adding 1 to the prefix (before the suffix part)\n        long increment = (long) Math.pow(10, s.length());\n        long next = current + increment;\n        // Ensure the next number has all its digits within the limit\n        while (next % increment != Long.parseLong(s)) {\n            next += increment;\n        }\n        // Check each digit of the prefix to ensure it is within the limit\n        long prefix = next / increment;\n        while (prefix > 0) {\n            if (prefix % 10 > limit) {\n                return current; // If any digit exceeds the limit, stop and return the current number\n            }\n            prefix /= 10;\n        }\n        return next;\n    }\n}"
}