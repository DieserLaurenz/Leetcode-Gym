{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54908000,
    "question_id": "3243",
    "elapsed_time": 777,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708424618893,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1180842789",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def numberOfPowerfulInt(start: Long, finish: Long, limit: Int, s: String): Long = {\n        var count = 0L\n        val suffix = s.toLong\n        val maxPrefix = \"9\" * (s.length - 1)\n\n        (0 to maxPrefix.toInt).foreach { prefix =>\n            val num = (prefix.toString + s).toLong\n            if (num >= start && num <= finish && num.toString.forall(c => c.asDigit <= limit)) {\n                count += 1\n            }\n        }\n\n        // Check if the suffix itself is within the range and meets the criteria\n        if (suffix >= start && suffix <= finish && suffix.toString.forall(c => c.asDigit <= limit)) {\n            count += 1\n        }\n\n        // Deduct the cases where only the suffix itself was counted without a valid prefix\n        if (s.forall(c => c.asDigit <= limit) && s.toLong < start) {\n            count -= 1\n        }\n\n        count\n    }\n}"
}