{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56140000,
    "question_id": "3243",
    "elapsed_time": 1220,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708424544621,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 38,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1180841900",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def numberOfPowerfulInt(start: Long, finish: Long, limit: Int, s: String): Long = {\n        if (s.toLong > finish) return 0 // s is greater than finish, no powerful integer possible\n\n        val sLong = s.toLong\n        if (sLong < start) {\n            // Calculate the range of numbers that can be prefixed to s to stay within [start, finish]\n            var count = 0L\n            for (i <- 1 to s.length) {\n                val prefixLimit = Math.pow(10, i).toLong\n                for (j <- 0 until prefixLimit.toInt) {\n                    val num = (j.toString + s).toLong\n                    if (num >= start && num <= finish && j.toString.forall(c => c.asDigit <= limit)) {\n                        count += 1\n                    }\n                }\n            }\n            count\n        } else {\n            // s itself is within the range, check if it satisfies the condition\n            if (sLong >= start && sLong <= finish && s.forall(c => c.asDigit <= limit)) 1 else 0\n        }\n    }\n}"
}