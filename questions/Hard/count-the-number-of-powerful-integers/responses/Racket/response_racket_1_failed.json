{
    "status_code": 14,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 125832000,
    "question_id": "3243",
    "elapsed_time": 5050,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "1829505\n1255574165\n7\n\"11223\"",
    "expected_output": "5470",
    "task_finish_time": 1708424859033,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 227,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1180845590",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-powerful-int start finish limit s)\n  (-> exact-integer? exact-integer? exact-integer? string? exact-integer?)\n  (let ([count 0])\n    (for ([i (in-range start (add1 finish))])\n      (when (and (<= i finish)\n                 (string-suffix? (number->string i) s)\n                 (foldl (lambda (digit acc)\n                          (and acc (<= (char->integer digit) (+ (char->integer #\\0) limit))))\n                        #t\n                        (string->list (number->string i))))\n        (set! count (add1 count))))\n    count))"
}