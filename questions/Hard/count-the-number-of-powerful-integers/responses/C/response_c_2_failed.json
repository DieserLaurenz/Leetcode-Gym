{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5548000,
    "question_id": "3243",
    "elapsed_time": 13,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708422957227,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 40,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180822810",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nlong long numberOfPowerfulInt(long long start, long long finish, int limit, char* s) {\n    long long count = 0;\n    long long sInt = atoll(s);\n    int sLen = strlen(s);\n    long long pow10sLen = 1;\n    for (int i = 0; i < sLen; i++) pow10sLen *= 10;\n\n    // Generate all prefixes with digits up to 'limit'\n    long long prefix = 0;\n    while (1) {\n        long long num = prefix * pow10sLen + sInt;\n        if (num > finish) break; // Stop if the number exceeds the finish value\n        if (num >= start && num <= finish) count++; // Count if within the range\n\n        if (prefix == 0) prefix = 1; // Initial case\n        else {\n            long long temp = prefix;\n            int isValid = 1;\n            while (temp > 0) {\n                if (temp % 10 == limit) temp /= 10;\n                else {\n                    temp = temp / 10 * 10 + (temp % 10 + 1); // Increment the last non-limit digit\n                    while ((temp * pow10sLen + sInt) <= finish && temp % 10 <= limit) {\n                        if ((temp * pow10sLen + sInt) >= start) count++; // Count if within the range\n                        temp = temp * 10; // Append a lower digit\n                    }\n                    prefix = temp;\n                    isValid = 0;\n                    break;\n                }\n            }\n            if (isValid) break; // If all digits are 'limit', no further prefixes are valid\n        }\n    }\n    return count;\n}"
}