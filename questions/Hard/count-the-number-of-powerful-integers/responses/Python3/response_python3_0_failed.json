{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16408000,
    "question_id": "3243",
    "elapsed_time": 11010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "15398\n1424153842\n8\n\"780\"",
    "expected_output": "783791",
    "task_finish_time": 1708881054762,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 245,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185964352",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution:\n    def numberOfPowerfulInt(self, start: int, finish: int, limit: int, s: str) -> int:\n        count = 0\n        s_len = len(s)\n        s_val = int(s)\n        for i in range(10 ** (s_len - 1), 10 ** s_len):\n            if i % (10 ** s_len) == s_val:\n                for j in range(0, 10 ** (len(str(finish)) - s_len)):\n                    val = i + j * (10 ** s_len)\n                    if start <= val <= finish and all(int(digit) <= limit for digit in str(val)):\n                        count += 1\n                    if val > finish:\n                        break\n        return count"
}