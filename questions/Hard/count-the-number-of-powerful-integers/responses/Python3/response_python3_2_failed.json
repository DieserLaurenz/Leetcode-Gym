{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16444000,
    "question_id": "3243",
    "elapsed_time": 11009,
    "compare_result": "01110000000000000000000010000000000111100000000000000001111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708881156206,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185965759",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def numberOfPowerfulInt(self, start: int, finish: int, limit: int, s: str) -> int:\n        count = 0\n        # Generate numbers starting with the suffix and prepend with all combinations of allowed digits\n        suffix_len = len(s)\n        start_prefix = 0\n        end_prefix = 10 ** (len(str(finish)) - suffix_len) - 1\n        \n        if end_prefix < 0:  # If suffix is longer than the numbers in the range\n            return 0\n        \n        for prefix in range(start_prefix, end_prefix + 1):\n            num_str = str(prefix) + s  # Concatenate prefix and suffix to form the number\n            num = int(num_str)\n            if start <= num <= finish:\n                # Check if all digits are <= limit\n                if all(int(digit) <= limit for digit in num_str):\n                    count += 1\n        \n        # Special case handling for when there's no prefix (i.e., the suffix itself is the number)\n        if int(s) >= start and int(s) <= finish and len(s) == len(str(int(s))):  # Ensure 's' has no leading zeros\n            count += 1\n            \n        return count"
}