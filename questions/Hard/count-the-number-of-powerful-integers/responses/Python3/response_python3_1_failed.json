{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16388000,
    "question_id": "3243",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708881104529,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 35,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185965020",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def numberOfPowerfulInt(self, start: int, finish: int, limit: int, s: str) -> int:\n        count = 0\n        prefix = \"\"\n        max_prefix_len = len(str(finish)) - len(s)  # Maximum length of prefix\n        # Generate all possible prefixes\n        def dfs(prefix):\n            nonlocal count\n            if len(prefix) > max_prefix_len:\n                return\n            num = int(prefix + s) if prefix else int(s)\n            if start <= num <= finish:\n                count += 1\n            for next_digit in range(limit + 1):\n                dfs(prefix + str(next_digit))\n        \n        # Start DFS without a prefix for the case when s is a valid number by itself\n        dfs(\"\")\n        return count"
}