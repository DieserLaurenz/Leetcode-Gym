{
    "status_code": 14,
    "lang": "javascript",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 56144000,
    "question_id": "3243",
    "elapsed_time": 4016,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "1829505\n1255574165\n7\n\"11223\"",
    "expected_output": "5470",
    "task_finish_time": 1708423222870,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 227,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1180826027",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "var numberOfPowerfulInt = function(start, finish, limit, s) {\n    let count = 0;\n    const sNum = parseInt(s);\n    const minPossible = Math.max(start, sNum);\n    if(minPossible > finish) return 0;\n\n    // Generate all numbers starting with s within the limit\n    for (let num = minPossible; num <= finish; num += 1) {\n        let strNum = num.toString();\n        if (strNum.endsWith(s) && [...strNum].every(digit => parseInt(digit) <= limit)) {\n            count++;\n        }\n    }\n    return count;\n};"
}