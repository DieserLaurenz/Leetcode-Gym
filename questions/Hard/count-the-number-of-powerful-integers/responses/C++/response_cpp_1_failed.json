{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9024000,
    "question_id": "3243",
    "elapsed_time": 16,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "20\n1159\n5\n\"20\"",
    "expected_output": "8",
    "task_finish_time": 1708414518973,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 97,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180719303",
    "input_formatted": "20, 1159, 5, \"20\"",
    "input": "20\n1159\n5\n\"20\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <cmath>\n\nclass Solution {\npublic:\n    long long numberOfPowerfulInt(long long start, long long finish, int limit, std::string s) {\n        long long count = 0;\n        long long sInt = std::stoll(s);\n        long long sLength = s.length();\n        long long power = std::pow(10, sLength);\n        \n        // Check if sInt is within the start and finish range directly\n        if (sInt >= start && sInt <= finish) count++;\n\n        // Generate all powerful integers by prefixing s with digits <= limit\n        for (long long prefix = 1; prefix <= power; prefix *= 10) {\n            for (int digit = 1; digit <= limit; ++digit) {\n                long long num = digit * prefix * power + sInt;\n                if (num > finish) break; // No need to continue if num exceeds finish\n                if (num >= start && num <= finish) count++;\n            }\n        }\n\n        return count;\n    }\n};"
}