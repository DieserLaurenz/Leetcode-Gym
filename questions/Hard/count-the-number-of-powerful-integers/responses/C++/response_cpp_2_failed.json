{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8956000,
    "question_id": "3243",
    "elapsed_time": 47,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "1\n2000\n8\n\"1\"",
    "expected_output": "162",
    "task_finish_time": 1708414559865,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 233,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180719835",
    "input_formatted": "1, 2000, 8, \"1\"",
    "input": "1\n2000\n8\n\"1\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <cmath>\n\nclass Solution {\npublic:\n    long long numberOfPowerfulInt(long long start, long long finish, int limit, std::string s) {\n        long long count = 0;\n        long long sVal = std::stoll(s);\n        long long minLength = s.size();\n        long long sPower = std::pow(10, minLength);\n\n        for (long long prefix = 0; prefix < sPower; prefix++) {\n            long long num = prefix * sPower + sVal;\n            if (num > finish) break; // If number exceeds finish, no further valid numbers can be found.\n            if (num >= start && num <= finish && isValid(num, limit)) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\nprivate:\n    bool isValid(long long num, int limit) {\n        while (num > 0) {\n            if (num % 10 > limit) return false;\n            num /= 10;\n        }\n        return true;\n    }\n};"
}