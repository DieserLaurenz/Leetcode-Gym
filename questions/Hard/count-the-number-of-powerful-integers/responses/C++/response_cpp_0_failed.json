{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9008000,
    "question_id": "3243",
    "elapsed_time": 15,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "15\n215\n6\n\"10\"",
    "expected_output": "2",
    "task_finish_time": 1708414486072,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 47,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180718860",
    "input_formatted": "15, 215, 6, \"10\"",
    "input": "15\n215\n6\n\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <cmath>\n\nclass Solution {\npublic:\n    long long numberOfPowerfulInt(long long start, long long finish, int limit, std::string s) {\n        long long count = 0;\n        long long suffix = std::stoll(s);\n        if (suffix > finish) return 0; // Suffix is larger than finish, return 0\n\n        int sLength = s.length();\n        long long minVal = std::pow(10, sLength - 1);\n        if (suffix < minVal) return 0; // Suffix is not a valid number, return 0\n\n        // Calculate the minimum and maximum prefix values\n        long long minPrefix = start / minVal;\n        long long maxPrefix = finish / minVal;\n\n        // Adjust the range of start and finish to include the suffix\n        start = std::max(start, suffix);\n        finish = std::min(finish, suffix + minVal * (limit + 1) - 1);\n\n        // Loop through all possible prefixes\n        for (long long prefix = 0; prefix <= limit; ++prefix) {\n            long long current = prefix * minVal + suffix;\n            if (current >= start && current <= finish) {\n                ++count;\n            }\n        }\n\n        return count;\n    }\n};"
}