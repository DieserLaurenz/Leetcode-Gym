{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 697796000,
    "question_id": "3243",
    "elapsed_time": 2908,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708423868672,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1180833782",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func numberOfPowerfulInt(_ start: Int, _ finish: Int, _ limit: Int, _ s: String) -> Int {\n        var count = 0\n        let length = s.count\n        let sValue = Int(s)!\n\n        // Generate all possible prefixes including empty prefix (to cover the case where no prefix is needed)\n        var prefixes = [\"\"]\n        for _ in 1...length {\n            var newPrefixes = [String]()\n            for prefix in prefixes {\n                for digit in 0...limit {\n                    newPrefixes.append(\"\\(prefix)\\(digit)\")\n                }\n            }\n            prefixes = newPrefixes\n        }\n\n        // Check each generated number\n        for prefix in prefixes {\n            let candidateStr = \"\\(prefix)\\(s)\"\n            if let candidate = Int(candidateStr), candidate >= start, candidate <= finish {\n                // Increment count if candidate is within the range\n                count += 1\n            }\n        }\n\n        // Deduct the count by 1 if s as standalone is counted twice (once as part of prefixes and once alone)\n        if Int(s)! >= start && Int(s)! <= finish && prefixes.contains(s) {\n            count -= 1\n        }\n\n        return count\n    }\n}"
}