{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15760000,
    "question_id": "3243",
    "elapsed_time": 5190,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708423825473,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1180833192",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func numberOfPowerfulInt(_ start: Int, _ finish: Int, _ limit: Int, _ s: String) -> Int {\n        var count = 0\n        var current = Int(s)!\n\n        // Early return if s itself is not within the start-finish range\n        if current < start || current > finish {\n            return 0\n        }\n\n        while current <= finish {\n            if current >= start && current <= finish && allDigitsAreWithinLimit(String(current), limit) {\n                count += 1\n            }\n            let next = \"1\" + String(current)\n            guard let nextInt = Int(next) else { break }\n            if nextInt > finish { break }\n            current = nextInt\n        }\n\n        // Check for powerful integers with s as suffix and a prefix that satisfies the limit condition\n        var multiplier = 10\n        while true {\n            let base = s.count + 1\n            var prefix = 1\n            while prefix < multiplier {\n                let candidateStr = \"\\(prefix)\\(s)\"\n                guard let candidate = Int(candidateStr), candidate >= start, candidate <= finish else {\n                    prefix += 1\n                    continue\n                }\n                if allDigitsAreWithinLimit(candidateStr, limit) {\n                    count += 1\n                }\n                prefix += 1\n            }\n            if base + String(multiplier).count > String(finish).count { break }\n            multiplier *= 10\n        }\n\n        return count\n    }\n\n    private func allDigitsAreWithinLimit(_ str: String, _ limit: Int) -> Bool {\n        for digit in str {\n            if let digitInt = Int(String(digit)), digitInt > limit {\n                return false\n            }\n        }\n        return true\n    }\n}"
}