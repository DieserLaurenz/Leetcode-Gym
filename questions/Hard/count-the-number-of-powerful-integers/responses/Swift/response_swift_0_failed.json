{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16160000,
    "question_id": "3243",
    "elapsed_time": 5041,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "15\n215\n6\n\"10\"",
    "expected_output": "2",
    "task_finish_time": 1708423772969,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 217,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1180832571",
    "input_formatted": "15, 215, 6, \"10\"",
    "input": "15\n215\n6\n\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func numberOfPowerfulInt(_ start: Int, _ finish: Int, _ limit: Int, _ s: String) -> Int {\n        var count = 0\n        let sInt = Int(s)!\n        if sInt < start || sInt > finish {\n            return 0\n        }\n        \n        var prefix = 0\n        let sLength = s.count\n        let maxPrefixLength = String(finish).count - sLength\n        \n        while prefix < Int(pow(Double(10), Double(maxPrefixLength))) {\n            let numStr = \"\\(prefix)\\(s)\"\n            if let num = Int(numStr), num >= start && num <= finish {\n                var isValid = true\n                for digit in numStr {\n                    if let digitInt = Int(String(digit)), digitInt > limit {\n                        isValid = false\n                        break\n                    }\n                }\n                if isValid {\n                    count += 1\n                }\n            }\n            if prefix == 0 && maxPrefixLength == 0 {\n                break\n            }\n            prefix += 1\n        }\n        \n        return count\n    }\n}"
}