{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73188000,
    "question_id": "3243",
    "elapsed_time": 937,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708433621675,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 39,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180940163",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_powerful_int(start :: integer, finish :: integer, limit :: integer, s :: String.t) :: integer\n  def number_of_powerful_int(start, finish, limit, s) do\n    generate_candidates(limit, s, String.length(s), [])\n    |> Enum.filter(fn x -> x >= start and x <= finish end)\n    |> length()\n  end\n\n  defp generate_candidates(limit, s, len, acc) when len == 0 do\n    [String.to_integer(s) | acc]\n  end\n\n  defp generate_candidates(limit, s, len, acc) do\n    new_acc =\n      for prefix <- 0..limit, into: acc, do: String.to_integer(Integer.to_string(prefix) <> s)\n\n    generate_candidates(limit, s, len - 1, new_acc)\n  end\nend"
}