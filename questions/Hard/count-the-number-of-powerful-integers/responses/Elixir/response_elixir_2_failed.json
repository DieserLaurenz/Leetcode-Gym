{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72428000,
    "question_id": "3243",
    "elapsed_time": 582,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "20\n1159\n5\n\"20\"",
    "expected_output": "8",
    "task_finish_time": 1708433690310,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180940981",
    "input_formatted": "20, 1159, 5, \"20\"",
    "input": "20\n1159\n5\n\"20\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_powerful_int(start :: integer, finish :: integer, limit :: integer, s :: String.t) :: integer\n  def number_of_powerful_int(start, finish, limit, s) do\n    Enum.reduce(0..limit, 0, fn x, acc ->\n      acc + count_valid_numbers(x, start, finish, limit, s)\n    end)\n  end\n\n  defp count_valid_numbers(prefix, start, finish, limit, s) do\n    number = if prefix == 0, do: String.to_integer(s), else: String.to_integer(Integer.to_string(prefix) <> s)\n    if number >= start and number <= finish, do: 1, else: 0\n  end\nend"
}