{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 70560000,
    "question_id": "3243",
    "elapsed_time": 6013,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "1829505\n1255574165\n7\n\"11223\"",
    "expected_output": "5470",
    "task_finish_time": 1708433658538,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 227,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180940536",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_powerful_int(start :: integer, finish :: integer, limit :: integer, s :: String.t) :: integer\n  def number_of_powerful_int(start, finish, limit, s) do\n    (start..finish)\n    |> Enum.filter(fn x ->\n      String.ends_with?(Integer.to_string(x), s) and\n        all_digits_lte_limit?(Integer.to_string(x), limit)\n    end)\n    |> length()\n  end\n\n  defp all_digits_lte_limit?(number_str, limit) do\n    number_str\n    |> String.graphemes()\n    |> Enum.all?(fn digit -> String.to_integer(digit) <= limit end)\n  end\nend"
}