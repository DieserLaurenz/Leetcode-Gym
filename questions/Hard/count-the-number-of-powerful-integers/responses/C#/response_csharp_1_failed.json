{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39488000,
    "question_id": "3243",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708423093641,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 81,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180824461",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long NumberOfPowerfulInt(long start, long finish, int limit, string s) {\n        long count = 0;\n        long sValue = long.Parse(s);\n        long sLength = s.Length;\n        long minValue = start / (long)Math.Pow(10, sLength - 1) * (long)Math.Pow(10, sLength - 1);\n        if (minValue < start) minValue += (long)Math.Pow(10, sLength);\n\n        for (long i = minValue; i <= finish; i += (long)Math.Pow(10, sLength)) {\n            long num = i + sValue;\n            if (num > finish) break;\n            bool isValid = true;\n            while (num > 0) {\n                if (num % 10 > limit) {\n                    isValid = false;\n                    break;\n                }\n                num /= 10;\n            }\n            if (isValid) count++;\n        }\n        return count;\n    }\n}"
}