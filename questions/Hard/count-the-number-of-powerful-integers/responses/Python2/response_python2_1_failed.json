{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56752000,
    "question_id": "3243",
    "elapsed_time": 11011,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708880952489,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 47,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185962853",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def numberOfPowerfulInt(self, start, finish, limit, s):\n        count = 0\n        s_len = len(s)\n        start_prefix = start // (10 ** s_len)\n        end_prefix = finish // (10 ** s_len)\n\n        if start_prefix == end_prefix:\n            if start <= int(str(start_prefix) + s) <= finish:\n                count += 1\n        else:\n            if start <= int(str(start_prefix) + s) <= finish:\n                count += 1\n            if start <= int(str(end_prefix) + s) <= finish:\n                count += 1\n\n            for prefix in range(start_prefix + 1, end_prefix):\n                if all(int(digit) <= limit for digit in str(prefix)):\n                    count += 1\n\n            # Handle special case when s itself is a powerful integer\n            if int(s) >= start and int(s) <= finish and all(int(digit) <= limit for digit in s):\n                count += 1\n\n        # Check for numbers with s as suffix and prefix digits <= limit within the direct range\n        if len(s) == 1:\n            for i in range(max(1, start_prefix), min(end_prefix, limit) + 1):\n                num = int(str(i) + s)\n                if start <= num <= finish:\n                    count += 1\n\n        return count"
}