{
    "status_code": 15,
    "lang": "php",
    "run_success": false,
    "runtime_error": "Line 28: PHP Fatal error:  Uncaught ValueError: str_repeat(): Argument #2 ($times) must be greater than or equal to 0 in solution.php",
    "full_runtime_error": "Line 28: PHP Fatal error:  Uncaught ValueError: str_repeat(): Argument #2 ($times) must be greater than or equal to 0 in solution.php\nStack trace:\n#0 solution.php: str_repeat()\n#1 solution.php: Solution->numberOfPowerfulInt()\n#2 {main}",
    "status_runtime": "N/A",
    "memory": 20124000,
    "question_id": "3243",
    "elapsed_time": 77,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708423702097,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1180831809",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $start\n     * @param Integer $finish\n     * @param Integer $limit\n     * @param String $s\n     * @return Integer\n     */\n    function numberOfPowerfulInt($start, $finish, $limit, $s) {\n        $count = 0;\n        $sLen = strlen($s);\n        $sInt = intval($s);\n        $startSuffix = max($start, $sInt);\n        if ($startSuffix > $finish) return 0; // Early return if no number in the range can have s as suffix\n\n        // Find the range of numbers to prepend\n        $maxPrepend = $finish - $sInt;\n        $maxPrependStrLen = strlen((string)$maxPrepend);\n        $startLen = strlen((string)$start);\n\n        // Optimization: Only generate numbers that can fit within the range\n        $minLen = min($sLen + 1, $startLen);\n        $maxLen = strlen((string)$finish);\n\n        for ($len = $minLen; $len <= $maxLen; $len++) {\n            $prependLen = $len - $sLen;\n            $maxNum = (int)str_repeat($limit, $prependLen);\n\n            for ($num = 0; $num <= $maxNum; $num++) {\n                $candidate = (int)($num . $s);\n                if ($candidate >= $start && $candidate <= $finish) {\n                    $isValid = true;\n                    foreach (str_split((string)$num) as $digit) {\n                        if ((int)$digit > $limit) {\n                            $isValid = false;\n                            break;\n                        }\n                    }\n                    if ($isValid) $count++;\n                }\n            }\n        }\n\n        return $count;\n    }\n}"
}