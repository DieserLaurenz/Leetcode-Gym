{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39484000,
    "question_id": "3243",
    "elapsed_time": 5403,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "1\n6000\n4\n\"124\"",
    "expected_output": "5",
    "task_finish_time": 1708423942756,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 49,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180834699",
    "input_formatted": "1, 6000, 4, \"124\"",
    "input": "1\n6000\n4\n\"124\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun numberOfPowerfulInt(start: Long, finish: Long, limit: Int, s: String): Long {\n        val len = s.length\n        var count = 0L\n        var minValue = s.toLong()\n        if (minValue < start) minValue = start\n        if (minValue > finish) return 0\n\n        for (prefix in 0..limit) {\n            val current = \"$prefix$s\".toLong()\n            if (current in start..finish) count++\n        }\n\n        var prefix = 1\n        while (true) {\n            var isValid = true\n            val current = StringBuilder()\n            var temp = prefix\n            while (temp > 0) {\n                val digit = temp % 10\n                if (digit > limit) {\n                    isValid = false\n                    break\n                }\n                current.append(digit)\n                temp /= 10\n            }\n            if (!isValid) {\n                if (current.isEmpty() || current.toString().toLong() > finish.toString().substring(0, len).toLong()) break\n                prefix++\n                continue\n            }\n            current.reverse()\n            val num = (current.toString() + s).toLong()\n            if (num in start..finish) count++\n            else if (num > finish) break\n            prefix++\n        }\n\n        return count\n    }\n}"
}