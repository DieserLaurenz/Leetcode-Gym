{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38668000,
    "question_id": "3243",
    "elapsed_time": 5194,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "15\n215\n6\n\"10\"",
    "expected_output": "2",
    "task_finish_time": 1708424022402,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 96,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180835624",
    "input_formatted": "15, 215, 6, \"10\"",
    "input": "15\n215\n6\n\"10\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun numberOfPowerfulInt(start: Long, finish: Long, limit: Int, s: String): Long {\n        if (s.any { it > '0' + limit }) return 0 // Early return if any digit in s exceeds limit\n\n        var count = 0L\n        val startSuffix = s.toLong()\n        var prefix = 0L\n\n        while (true) {\n            val currentValue = \"$prefix$s\".toLong()\n            if (currentValue > finish) break\n            if (currentValue >= start) count++\n            \n            if (prefix == 0L && startSuffix >= start && startSuffix <= finish) { // Handle no prefix case separately\n                prefix = 1\n            } else {\n                var increment = 1L\n                while (prefix / increment > 0) {\n                    if ((prefix / increment) % 10 < limit) {\n                        prefix += increment\n                        break\n                    } else {\n                        prefix = (prefix / (increment * 10) + 1) * (increment * 10)\n                    }\n                    increment *= 10\n                }\n                if (increment > prefix) break // Overflow beyond limit handling\n            }\n        }\n\n        return count\n    }\n}"
}