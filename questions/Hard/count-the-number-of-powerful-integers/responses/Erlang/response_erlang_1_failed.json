{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60236000,
    "question_id": "3243",
    "elapsed_time": 1552,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "20\n1159\n5\n\"20\"",
    "expected_output": "8",
    "task_finish_time": 1708433499220,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 98,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180938704",
    "input_formatted": "20, 1159, 5, \"20\"",
    "input": "20\n1159\n5\n\"20\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_powerful_int(Start :: integer(), Finish :: integer(), Limit :: integer(), S :: unicode:unicode_binary()) -> integer().\nnumber_of_powerful_int(Start, Finish, Limit, S) ->\n    Suffix = binary_to_integer(S),\n    PrefixLimit = lists:foldl(fun(_, Acc) -> [X || X <- lists:seq(0, Limit), X =< Limit] ++ Acc end, [], lists:seq(1, length(integer_to_list(Finish)) - length(integer_to_list(Suffix)))),\n    PowerfulInts = [X * trunc(math:pow(10, length(integer_to_list(Suffix)))) + Suffix || X <- PrefixLimit, X * trunc(math:pow(10, length(integer_to_list(Suffix)))) + Suffix >= Start, X * trunc(math:pow(10, length(integer_to_list(Suffix)))) + Suffix =< Finish],\n    length(lists:usort(PowerfulInts))."
}