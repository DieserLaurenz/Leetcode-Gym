{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59476000,
    "question_id": "3243",
    "elapsed_time": 1566,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "20\n1159\n5\n\"20\"",
    "expected_output": "8",
    "task_finish_time": 1708433531647,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 101,
    "total_testcases": 932,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180939092",
    "input_formatted": "20, 1159, 5, \"20\"",
    "input": "20\n1159\n5\n\"20\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_powerful_int(Start :: integer(), Finish :: integer(), Limit :: integer(), S :: unicode:unicode_binary()) -> integer().\nnumber_of_powerful_int(Start, Finish, Limit, S) ->\n    Suffix = binary_to_integer(S),\n    GenerateNumbers = fun G(Num, Acc) when Num > Limit -> Acc;\n                          G(Num, Acc) ->\n                              NewNum = Num * trunc(math:pow(10, byte_size(S))) + Suffix,\n                              if \n                                  NewNum >= Start, NewNum =< Finish -> G(Num + 1, [NewNum | Acc]);\n                                  true -> G(Num + 1, Acc)\n                              end\n                      end,\n    FilteredNumbers = lists:foldl(fun(X, Acc) ->\n                                      Numbers = GenerateNumbers(X, []),\n                                      Acc ++ Numbers\n                                  end, [], [0|lists:seq(1, Limit)]),\n    length(lists:usort(FilteredNumbers))."
}