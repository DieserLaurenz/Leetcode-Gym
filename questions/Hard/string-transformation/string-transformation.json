{
    "acRate": 28.02254687679742,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2851",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "String Transformation",
    "titleSlug": "string-transformation",
    "topicTags": [
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "String",
            "id": "VG9waWNUYWdOb2RlOjEw",
            "slug": "string"
        },
        {
            "name": "Dynamic Programming",
            "id": "VG9waWNUYWdOb2RlOjEz",
            "slug": "dynamic-programming"
        },
        {
            "name": "String Matching",
            "id": "VG9waWNUYWdOb2RlOjYxMDUy",
            "slug": "string-matching"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int numberOfWays(string s, string t, long long k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int numberOfWays(String s, String t, long k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def numberOfWays(self, s, t, k):         \"\"\"         :type s: str         :type t: str         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def numberOfWays(self, s: str, t: str, k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int numberOfWays(char* s, char* t, long long k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int NumberOfWays(string s, string t, long k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {string} s  * @param {string} t  * @param {number} k  * @return {number}  */ var numberOfWays = function(s, t, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function numberOfWays(s: string, t: string, k: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param String $s      * @param String $t      * @param Integer $k      * @return Integer      */     function numberOfWays($s, $t, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func numberOfWays(_ s: String, _ t: String, _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun numberOfWays(s: String, t: String, k: Long): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int numberOfWays(String s, String t, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func numberOfWays(s string, t string, k int64) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {String} s # @param {String} t # @param {Integer} k # @return {Integer} def number_of_ways(s, t, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def numberOfWays(s: String, t: String, k: Long): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn number_of_ways(s: String, t: String, k: i64) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (number-of-ways s t k)   (-> string? string? exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec number_of_ways(S :: unicode:unicode_binary(), T :: unicode:unicode_binary(), K :: integer()) -> integer(). number_of_ways(S, T, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec number_of_ways(s :: String.t, t :: String.t, k :: integer) :: integer   def number_of_ways(s, t, k) do    end end"
        }
    ],
    "content": "You are given two strings s and t of equal length n. You can perform the following operation on the string s:  Remove a suffix of s of length l where 0 < l < n and append it at the start of s.  For example, let s = 'abcd' then in one operation you can remove the suffix 'cd' and append it in front of s making s = 'cdab'.  You are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations. Since the answer can be large, return it modulo 109 + 7.  Example 1:  Input: s = \"abcd\", t = \"cdab\", k = 2 Output: 2 Explanation:  First way: In first operation, choose suffix from index = 3, so resulting s = \"dabc\". In second operation, choose suffix from index = 3, so resulting s = \"cdab\".  Second way: In first operation, choose suffix from index = 1, so resulting s = \"bcda\". In second operation, choose suffix from index = 1, so resulting s = \"cdab\".  Example 2:  Input: s = \"ababab\", t = \"ababab\", k = 1 Output: 2 Explanation:  First way: Choose suffix from index = 2, so resulting s = \"ababab\".  Second way: Choose suffix from index = 4, so resulting s = \"ababab\".   Constraints:  2 <= s.length <= 5 * 105 1 <= k <= 1015 s.length == t.length s and t consist of only lowercase English alphabets.  "
}