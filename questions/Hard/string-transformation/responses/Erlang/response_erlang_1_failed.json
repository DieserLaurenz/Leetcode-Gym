{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 371360000,
    "question_id": "3024",
    "elapsed_time": 5003,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708986466566,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1187158519",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_ways(S :: unicode:unicode_binary(), T :: unicode:unicode_binary(), K :: integer()) -> integer().\nnumber_of_ways(S, T, K) ->\n    Mod = 1000000007,\n    {SList, TList} = {binary_to_list(S), binary_to_list(T)},\n    N = length(SList),\n    GCD = gcd(N, K),\n    Count = count_rotations(SList, TList, N, GCD, Mod),\n    (Count * pow(K div GCD, N div GCD, Mod)) rem Mod.\n\ncount_rotations(_, _, _, 0, _) -> 0;\ncount_rotations(SList, TList, N, GCD, Mod) ->\n    count_rotations_helper(SList, TList, N, 0, GCD, Mod, 0).\n\ncount_rotations_helper(_, _, _, GCD, GCD, _, Count) -> Count;\ncount_rotations_helper(SList, TList, N, Index, GCD, Mod, Count) ->\n    Rotated = rotate(SList, Index),\n    NewCount = if Rotated == TList -> (Count + 1) rem Mod; true -> Count end,\n    count_rotations_helper(SList, TList, N, Index + 1, GCD, Mod, NewCount).\n\nrotate(List, 0) -> List;\nrotate(List, N) ->\n    {Left, Right} = lists:split(length(List) - N, List),\n    Right ++ Left.\n\ngcd(A, 0) -> A;\ngcd(A, B) -> gcd(B, A rem B).\n\npow(_, 0, _) -> 1;\npow(Base, Exp, Mod) when Exp rem 2 == 0 ->\n    Half = pow(Base, Exp div 2, Mod),\n    (Half * Half) rem Mod;\npow(Base, Exp, Mod) ->\n    (Base * pow(Base, Exp - 1, Mod)) rem Mod."
}