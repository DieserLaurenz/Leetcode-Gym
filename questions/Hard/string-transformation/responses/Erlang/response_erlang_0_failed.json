{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 168376000,
    "question_id": "3024",
    "elapsed_time": 5127,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708986421377,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 54,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1187158204",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_ways(S :: unicode:unicode_binary(), T :: unicode:unicode_binary(), K :: integer()) -> integer().\nnumber_of_ways(S, T, K) ->\n    Mod = 1000000007,\n    N = byte_size(S),\n    S1 = binary_to_list(S),\n    T1 = binary_to_list(T),\n    Equal = if S == T -> 1; true -> 0 end,\n    rotate_count(S1, T1, N, 0, Equal, Mod, K).\n\nrotate_count(_, _, N, Count, Equal, Mod, K) when Count >= N ->\n    case K rem 2 of\n        0 -> (pow(2, K, Mod) - 2 + Equal) rem Mod;\n        1 -> 0\n    end;\nrotate_count(S, T, N, Count, Equal, Mod, K) ->\n    NewS = rotate(S, N, Count + 1),\n    NewEqual = if NewS == T -> 1; true -> 0 end,\n    rotate_count(S, T, N, Count + 1, Equal + NewEqual, Mod, K).\n\nrotate(List, N, Count) ->\n    {Left, Right} = lists:split(N - Count, List),\n    Right ++ Left.\n\npow(_, 0, _) -> 1;\npow(Base, Exp, Mod) when Exp rem 2 == 0 ->\n    Half = pow(Base, Exp div 2, Mod),\n    (Half * Half) rem Mod;\npow(Base, Exp, Mod) ->\n    (Base * pow(Base, Exp - 1, Mod)) rem Mod."
}