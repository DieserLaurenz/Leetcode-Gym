{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 172044000,
    "question_id": "3024",
    "elapsed_time": 4019,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708976247173,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 95,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1187062189",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int NumberOfWays(string s, string t, long k) {\n        const int MOD = 1000000007;\n        if (s == t) {\n            if (k % 3 == 0) return 1;\n            if (k % 3 == 1) return 0;\n            return (int)((2 * (k % 3)) % MOD);\n        }\n\n        if (k == 1) return 0;\n\n        int n = s.Length;\n        bool isEqualAfterOneOperation = false;\n        for (int i = 1; i < n; i++) {\n            if ((s.Substring(i) + s.Substring(0, i)).Equals(t)) {\n                isEqualAfterOneOperation = true;\n                break;\n            }\n        }\n\n        if (!isEqualAfterOneOperation) return 0;\n        if (k == 2) return 1;\n\n        long ways = 2; // Since s can become t in exactly 2 operations if isEqualAfterOneOperation is true\n        if (k > 2) {\n            if (k % 2 == 0) {\n                ways = 2 * (k - 1) % MOD;\n            } else {\n                ways = (2 * ((k - 1) / 2) % MOD) + 1;\n            }\n        }\n\n        return (int)(ways % MOD);\n    }\n}"
}