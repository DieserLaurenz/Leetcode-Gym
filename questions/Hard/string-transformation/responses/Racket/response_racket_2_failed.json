{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 100168000,
    "question_id": "3024",
    "elapsed_time": 236,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708986352487,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187157704",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-ways s t k)\n  (-> string? string? exact-integer? exact-integer?)\n  (define mod 1000000007)\n  (define (gcd a b)\n    (if (= b 0) a (gcd b (modulo a b))))\n  (define n (string-length s))\n  (define (s->t? si ti)\n    (and (= (gcd n si) (gcd n ti)) (= 1 (gcd n si))))\n  (define (ways si ti)\n    (if (s->t? si ti) 1 0))\n  (let loop ([i 1] [count 0])\n    (if (> i n)\n        (modulo (* count (if (= k 2) 1 (/ k 2))) mod)\n        (let* ([new-s (string-append (substring s i) (substring s 0 i))]\n               [new-count (if (string=? new-s t) (+ count (ways i (- n 1))) count)])\n          (loop (+ i 1) new-count)))))"
}