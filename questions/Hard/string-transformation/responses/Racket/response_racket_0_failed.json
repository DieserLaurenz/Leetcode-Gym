{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 100028000,
    "question_id": "3024",
    "elapsed_time": 291,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708986277483,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187157108",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-ways s t k)\n  (-> string? string? exact-integer? exact-integer?)\n  (let* ((mod 1000000007)\n         (n (string-length s))\n         (dp (make-vector (+ k 1) 0))\n         (equal-suffixes (make-vector (+ n 1) 0)))\n    (vector-set! dp 0 1)\n    (for ([i (in-range 1 (+ n 1))])\n      (when (string=? (substring s (- n i) n) (substring t 0 i))\n        (vector-set! equal-suffixes i 1)))\n    (for ([i (in-range 1 (+ k 1))])\n      (for ([j (in-range 1 n)])\n        (when (> (vector-ref equal-suffixes j) 0)\n          (vector-set! dp i (modulo (+ (vector-ref dp i) (vector-ref dp (- i 1))) mod)))))\n    (vector-ref dp k)))"
}