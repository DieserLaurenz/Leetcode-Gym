{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "application: not a procedure;",
    "full_runtime_error": "application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1000000007\n  context...:\n   solution.rkt:1:0: number-of-ways\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:25:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99972000,
    "question_id": "3024",
    "elapsed_time": 267,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708986317418,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187157435",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-ways s t k)\n  (-> string? string? exact-integer? exact-integer?)\n  (define mod 1000000007)\n  (define (mod-exp base exponent modulus)\n    (if (= exponent 0)\n        1\n        (let ((temp (mod-exp base (quotient exponent 2) modulus)))\n          (mod (* temp temp (if (odd? exponent) base 1)) modulus))))\n  (define (count-ways n k)\n    (if (= k 0)\n        (if (= n 0) 1 0)\n        (mod-exp n k mod)))\n  (if (string=? s t)\n      (count-ways (- (string-length s) 1) k)\n      (let loop ((i 1) (acc 0))\n        (if (> i (string-length s))\n            acc\n            (if (string=? (string-append (substring s i) (substring s 0 i)) t)\n                (loop (+ i 1) (mod (+ acc (count-ways (- (string-length s) 1) (- k 1))) mod))\n                (loop (+ i 1) acc))))))"
}