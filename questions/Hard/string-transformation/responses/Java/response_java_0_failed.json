{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52800000,
    "display_runtime": "1",
    "question_id": "3024",
    "elapsed_time": 235,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708975633696,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1187054891",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int numberOfWays(String s, String t, long k) {\n        int mod = 1000000007;\n        int n = s.length();\n        if (s.equals(t)) {\n            if (k % 2 == 0) return (int) ((k / 2 % mod) * ((n - 1) % mod) % mod + 1) % mod;\n            else return (int) ((k % mod) * ((n - 1) % mod) % mod) % mod;\n        } else {\n            if (k == 1) return 0;\n            if ((k - 2) % 2 == 0) return (int) (((k - 2) / 2 % mod) * ((n - 1) % mod) % mod + 1) % mod;\n            else return (int) (((k - 1) % mod) * ((n - 1) % mod) % mod) % mod;\n        }\n    }\n}"
}