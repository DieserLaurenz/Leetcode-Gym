{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 429928000,
    "question_id": "3024",
    "elapsed_time": 1679,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708986557840,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 37,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1187159224",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_ways(s :: String.t(), t :: String.t(), k :: integer()) :: integer()\n  def number_of_ways(s, t, k) do\n    n = String.length(s)\n    mod = 1_000_000_007\n\n    if s == t do\n      if rem(k, 2) == 0 do\n        rem((n - 1) * pow(n, k - 1, mod), mod)\n      else\n        rem(n * pow(n - 1, k - 1, mod), mod)\n      end\n    else\n      common_suffix_length = find_common_suffix_length(s, t)\n      if common_suffix_length > 0 and rem(k, 2) == 1 do\n        0\n      else\n        if rem(k, 2) == 0 do\n          rem(pow(n, k - 1, mod), mod)\n        else\n          0\n        end\n      end\n    end\n  end\n\n  defp find_common_suffix_length(s, t) do\n    s |> String.graphemes |> Enum.reverse\n    |> Enum.zip(String.graphemes(t) |> Enum.reverse)\n    |> Enum.take_while(fn {a, b} -> a == b end)\n    |> length()\n  end\n\n  defp pow(_, 0, _), do: 1\n  defp pow(base, exp, mod) when exp > 0 do\n    if rem(exp, 2) == 0 do\n      rem(pow(rem(base * base, mod), div(exp, 2), mod), mod)\n    else\n      rem(base * pow(base, exp - 1, mod), mod)\n    end\n  end\nend"
}