{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7864000,
    "question_id": "3024",
    "elapsed_time": 11,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708975523358,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1187053543",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfWays(string s, string t, long long k) {\n        const int MOD = 1e9 + 7;\n        int n = s.length();\n        vector<vector<long long>> dp(k + 1, vector<long long>(n));\n        if (s == t && k == 1) return n; // Special case for k = 1\n\n        // Precompute powers of n modulo MOD for all k\n        vector<long long> powers(k + 1, 1);\n        for (int i = 1; i <= k; ++i)\n            powers[i] = powers[i - 1] * n % MOD;\n\n        for (int i = 0; i < n; ++i) {\n            if (s[i] == t[0]) dp[1][i] = 1; // Base case for k = 1\n        }\n\n        for (int i = 2; i <= k; ++i) {\n            long long sum = 0;\n            for (int j = 0; j < n; ++j) {\n                sum = (sum + dp[i - 1][j]) % MOD;\n                dp[i][j] = sum;\n                if (s[(j + 1) % n] == t[i - 1]) dp[i][(j + 1) % n] = (dp[i][(j + 1) % n] + dp[i - 1][j]) % MOD;\n            }\n        }\n\n        long long ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (t.back() == s[i])\n                ans = (ans + dp[k][i]) % MOD;\n        }\n\n        // Multiply by n^(k-1) for all rotations and modulo MOD\n        return ans * powers[k - 1] % MOD;\n    }\n};"
}