{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 319472000,
    "question_id": "3024",
    "elapsed_time": 3021,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708985925048,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 71,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1187154338",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} s\n# @param {String} t\n# @param {Integer} k\n# @return {Integer}\ndef number_of_ways(s, t, k)\n  mod = 10**9 + 7\n  n = s.length\n  return 1 if k == 1 && s == t\n  return 0 if s == t && k.odd?\n  return 2 if s == t && k == 2\n  return (k * n) % mod if s == t\n\n  s_rotations = (1..n).count { |i| s[i..-1] + s[0...i] == t }\n  return s_rotations if k == 1\n  \n  if k.even?\n    return s == t ? 2 : 0\n  else\n    rotations = (1..n).count { |i| s[i..-1] + s[0...i] == t }\n    (rotations * (k - 1) + 2) % mod\n  end\nend"
}