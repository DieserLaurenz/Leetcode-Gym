{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34252000,
    "question_id": "3024",
    "elapsed_time": 74,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708975775271,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 79,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1187056633",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def numberOfWays(self, s, t, k):\n        mod = 10**9 + 7\n        n = len(s)\n        if s == t:\n            return (k * (n - 1)) % mod if k % 2 == 0 else 2 % mod\n        if k == 1:\n            return 0\n        if s[::-1] == t:\n            if k % 2 == 1:\n                return 0\n            else:\n                return (k - 1) * (n - 1) % mod\n        prefix = 0\n        for i in range(n):\n            if s[i] != t[i]:\n                break\n            prefix += 1\n        suffix = 0\n        for i in range(n):\n            if s[n - 1 - i] != t[n - 1 - i]:\n                break\n            suffix += 1\n        if prefix + suffix >= n:\n            return (k - 2) * (n - 1) % mod if k > 2 else 0\n        return 0"
}