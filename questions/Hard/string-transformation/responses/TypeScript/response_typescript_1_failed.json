{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60600000,
    "question_id": "3024",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "17",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"cdab\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708984851037,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 726,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1187145771",
    "input_formatted": "\"abcd\", \"cdab\", 2",
    "input": "\"abcd\"\n\"cdab\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function numberOfWays(s: string, t: string, k: number): number {\n    const MOD = 1e9 + 7;\n    let same = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === t[i]) same++;\n    }\n    let result = 0;\n    for (let i = 0; i <= k; i++) {\n        for (let j = 0; j <= i; j++) {\n            if ((j + same) % 2 === i % 2 && j + same <= i) {\n                let temp = 1;\n                for (let l = 1; l <= i; l++) {\n                    temp = (temp * (s.length - l + 1)) % MOD;\n                    temp = (temp * modInverse(l, MOD)) % MOD;\n                }\n                result = (result + temp) % MOD;\n            }\n        }\n    }\n    return result;\n}\n\nfunction modInverse(a: number, mod: number): number {\n    let m0 = mod;\n    let y = 0, x = 1;\n    if (mod === 1) return 0;\n    while (a > 1) {\n        let q = Math.floor(a / mod);\n        let t = mod;\n        mod = a % mod;\n        a = t;\n        t = y;\n        y = x - q * y;\n        x = t;\n    }\n    if (x < 0) x += m0;\n    return x;\n}"
}