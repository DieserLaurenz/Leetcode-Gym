{
    "status_code": 14,
    "lang": "erlang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 124668000,
    "question_id": "2849",
    "elapsed_time": 5183,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[530,23,252,76,509,15,101,156,428,493,193,204,253,393,177,249,392,530,149,424,432,424,296,178,96,194,181,321,443,504,247,314,148,131,67,248,470,202,221,39,381,74,323,480,325,279,476,382,172,125,68,259,122,80,55,10,255,426,313,73,252,448,52,443,54,33,85,315,325,182,512,436,379,52,350,86,156,385,371,217,97,168,411,247,36,112,223,352,99,40,256,69,26,287,345,308,348,352,55,432,85,278,273,272,405,57,289,35,84,266,235,363,529,521,207,149,447,99,13,317,45,193,29,156,58,280,493,382,477,318,199,54,73,129,528,485,170,321,13,33,18,384,97,207,411,521,17,97,438,409,432,39,309,467,250,33,77,144,92,498,161,278,321,290,123,239,418,47,273,427,345,233,407,345,228,420,25,248,432,510,436,238,116,95,9,69,114,86,468,295,374,394,227,118,411,225,425,116,398,108,3,375,486,110,298,450,199,305,172,432,21,164,420,197,270,182,99,412,342,98,48,373,265,25,33,17,326,121,372,94,218,451,103,276,32,175,394,338,137,112,441,382,408,331,24,283,130,257,350,211,156,120,194,9,59,381,465,175,287,250,204,474,313,160,217,49,424,192,79,422,198,98,442,475,504,151,397,502,456,111,21,529,237,292,19,320,203,482,276,60,470,228,520,294,280,358,518,24,467,312,17,519,253,300,146,55,332,155,39,314,324,318,388,465,128,330,411,57,209,153,136,463,98,125,26,35,162,241,150,484,236,169,317,98,520,309,514,366,380,136,415,292,108,67,15,383,505,79,17,155,386,365,130,288,257,353,175,425,525,422,308,162,518,186,530,233,233,429,42,342,135,38,459,420,291,438,153,48,370,457,527,380,327,139,180,299,181,42,463,19,170,98,369,177,10,32,76,97,35,428,276,64,370,314,65,2,318,305,488,493,253,42,236,127,275,93,460,17,237,44,135,480,337,456,273,77,246,322,50,278,326,443,135,415,51,357,81,96,201,392,519,185,315,212,467,74,331,183,150,459,360,180,31,231,493,316,153,332,318,316,280,195,340,408,414,133,393,232,126,453,201,155,476,348,105,410,187,124,6,20,157,528,386,329,301,373,221,307,241,224,44,355,172,196,253,457,337,193,109,184,34,112,498,104,412,470,78,434,257,158,498,368,199,16,414,475,131,78,95,308,48,62,365,203,304,233,27,314,115,318]",
    "expected_output": "12557113",
    "task_finish_time": 1709017455876,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1298,
    "total_testcases": 1303,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1187474437",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "-spec sum_imbalance_numbers(Nums :: [integer()]) -> integer().\nsum_imbalance_numbers(Nums) ->\n    lists:sum([imbalance_count(Nums, Start, Length) || Start <- lists:seq(1, length(Nums)), Length <- lists:seq(1, length(Nums) - Start + 1)]).\n\nimbalance_count(Nums, Start, Length) ->\n    SubArray = lists:sublist(Nums, Start, Length),\n    Sorted = lists:usort(SubArray),\n    Imbalance = count_imbalance(Sorted),\n    Imbalance.\n\ncount_imbalance([First, Second|Rest]) ->\n    if Second - First > 1 -> 1; true -> 0 end + count_imbalance([Second|Rest]);\ncount_imbalance(_) ->\n    0."
}