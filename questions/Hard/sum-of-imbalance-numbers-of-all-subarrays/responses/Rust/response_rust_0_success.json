{
    "status_code": 10,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "1156 ms",
    "memory": 2216000,
    "question_id": "2849",
    "elapsed_time": 1244,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1709017235220,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1303,
    "total_testcases": 1303,
    "runtime_percentile": 50.0,
    "status_memory": "2.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "Rust",
    "submission_id": "1187471607",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn sum_imbalance_numbers(nums: Vec<i32>) -> i32 {\n        let mut result = 0;\n        let n = nums.len();\n        for i in 0..n {\n            let mut min = nums[i];\n            let mut max = nums[i];\n            let mut freq = vec![0; n + 1];\n            freq[nums[i] as usize] += 1;\n            for j in i + 1..n {\n                min = min.min(nums[j]);\n                max = max.max(nums[j]);\n                freq[nums[j] as usize] += 1;\n                let mut imbalance = 0;\n                let mut prev = -1;\n                for k in (min as usize)..=(max as usize) {\n                    if freq[k] > 0 && prev >= 0 && k as i32 - prev > 1 {\n                        imbalance += 1;\n                    }\n                    if freq[k] > 0 {\n                        prev = k as i32;\n                    }\n                }\n                result += imbalance;\n            }\n        }\n        result\n    }\n}"
}