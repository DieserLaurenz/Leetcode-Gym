{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 644328000,
    "question_id": "2849",
    "elapsed_time": 5037,
    "compare_result": "0011111110111000110111011000111011110011100000000011001110011100000000000100000000000000000000000011001110000000101100111001110000000011100111001100100000000000000000000000000100110011100111000000001110011100110100000001110011000000000000000000000000100000000000111001110011000000000111001110100000100010000000000000001000000000001010000101000000000000000000001010000101000000000001000000000000000100010000010110100000100010000000000000000001000000000000000000000000100010000000000000110000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000010000000000000010000000000000000000000001001000001000110000010010010000000000001000000000000000010000000000000001001000011000000000000000000000000000000000000000000000000000001000001000000000000001000001000000000000000000000000000000000000000000000000000001100001001000000000000000100000000000000001000000000000100100100000110001000001001000000000000000000000000100000000000000100000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000110000000000000100010000000000000000000000001000000000000000000100010000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[2,3,1,4]",
    "expected_output": "3",
    "task_finish_time": 1709017297834,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 170,
    "total_testcases": 1303,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187472412",
    "input_formatted": "[2,3,1,4]",
    "input": "[2,3,1,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (sum-imbalance-numbers nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (imbalance sarr)\n    (let loop ([i 0] [count 0])\n      (if (< i (- (length sarr) 1))\n          (if (> (- (list-ref sarr (+ i 1)) (list-ref sarr i)) 1)\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))\n          count)))\n  \n  (define (subarrays lst)\n    (let loop ([i 0] [acc '()])\n      (if (< i (length lst))\n          (loop (+ i 1) (append acc (subarrays-starting-at lst i)))\n          acc)))\n  \n  (define (subarrays-starting-at lst start)\n    (let loop ([j (+ start 1)] [acc (list (list (list-ref lst start)))])\n      (if (<= j (length lst))\n          (loop (+ j 1) (cons (take lst j) acc))\n          acc)))\n  \n  (define (sum-imbalance lst)\n    (foldl (lambda (sarr acc) (+ acc (imbalance (sort sarr <)))) 0 (subarrays lst)))\n  \n  (sum-imbalance nums))"
}