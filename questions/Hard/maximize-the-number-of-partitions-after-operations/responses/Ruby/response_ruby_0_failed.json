{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 213516000,
    "question_id": "3233",
    "elapsed_time": 3178,
    "compare_result": "0111111111111110111111111111011111101111111111111111011111101101011011111111111111111111110101111011111010111101111111101111101001111111111111101111111101111110111001111101011011111100111011011111111111111111111011111111111111111111111111111111111111111010100111111000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708536128274,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 229,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1182214015",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_partitions_after_operations(s, k)\n    return 1 if k >= s.chars.uniq.length\n    max_partitions = 0\n    ('a'..'z').each do |char|\n        modified_s = s.dup\n        (0...s.length).each do |i|\n            original_char = modified_s[i]\n            modified_s[i] = char\n            max_partitions = [max_partitions, partitions(modified_s.dup, k)].max\n            modified_s[i] = original_char\n        end\n    end\n    max_partitions\nend\n\ndef partitions(s, k)\n    count = 0\n    while !s.empty?\n        prefix = longest_prefix_with_k_distinct_chars(s, k)\n        s = s[prefix.length..-1]\n        count += 1\n    end\n    count\nend\n\ndef longest_prefix_with_k_distinct_chars(s, k)\n    distinct_chars = {}\n    prefix_length = 0\n    s.chars.each_with_index do |char, index|\n        distinct_chars[char] = true\n        if distinct_chars.keys.length > k\n            break\n        end\n        prefix_length = index + 1\n    end\n    s[0...prefix_length]\nend"
}