{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212052000,
    "question_id": "3233",
    "elapsed_time": 3097,
    "compare_result": "0111111111111110111111111111011111101111111111111111011111101001011011101111011111110011110101101011101010111101011111101111101001111111101101101111110101101100111000111101010011111100010001001111111111111111111011111111111101111111111111111111111111111111100111111100000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708536216376,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 212,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1182215512",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef max_partitions_after_operations(s, k)\n    max_partitions = 0\n    s_size = s.size\n    distinct_chars = s.chars.uniq\n    return s_size if k == 1\n    return 1 if distinct_chars.size <= k\n\n    # Change each character in s and try to find max partitions\n    (0...s_size).each do |i|\n        original_char = s[i]\n        distinct_chars.each do |char|\n            next if char == original_char\n            s[i] = char\n            max_partitions = [max_partitions, find_partitions(s, k)].max\n        end\n        s[i] = original_char # Revert back to original character\n    end\n\n    # Check without any change\n    max_partitions = [max_partitions, find_partitions(s, k)].max\n\n    max_partitions\nend\n\ndef find_partitions(s, k)\n    partitions = 0\n    while !s.empty?\n        prefix_length = 1\n        distinct_count = 1\n        last_char = s[0]\n        char_map = {last_char => true}\n\n        while prefix_length < s.length && (char_map.size < k || char_map.include?(s[prefix_length]))\n            unless char_map.include?(s[prefix_length])\n                distinct_count += 1\n                break if distinct_count > k\n                char_map[s[prefix_length]] = true\n            end\n            prefix_length += 1\n        end\n\n        s = s[prefix_length..-1]\n        partitions += 1\n    end\n    partitions\nend"
}