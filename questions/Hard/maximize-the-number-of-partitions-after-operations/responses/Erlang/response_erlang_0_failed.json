{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 95940000,
    "question_id": "3233",
    "elapsed_time": 5263,
    "compare_result": "0011111011011010000100000010000000101000100000010001010000000100000000000000100000001100000000000000010000000000100000000000000000000000000010000000000000010010000001000000001000000000101000010000000010000000000000000000000000000000000001000000000000100101000001111000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708536961000,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 41,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182228168",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_partitions_after_operations(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nmax_partitions_after_operations(S, K) ->\n    MaxPartitions = fun(MaxPartitions, S, K, Change) ->\n        case Change of\n            true ->\n                lists:max([MaxPartitions(MaxPartitions, lists:sublist(S, 1, Pos - 1) ++ [C] ++ lists:nthtail(Pos, S), K, false) || Pos <- lists:seq(1, length(S)), C <- lists:seq($a, $z)]);\n            false ->\n                Partitions = length(lists:takewhile(fun(C) -> length(lists:usort(C)) =< K end, lists:map(fun(I) -> lists:sublist(S, 1, I) end, lists:seq(1, length(S))))),\n                if\n                    Partitions == length(S) -> Partitions;\n                    true -> 1 + MaxPartitions(MaxPartitions, lists:nthtail(Partitions, S), K, false)\n                end\n        end\n    end,\n    MaxPartitions(MaxPartitions, unicode:characters_to_list(S), K, true)."
}