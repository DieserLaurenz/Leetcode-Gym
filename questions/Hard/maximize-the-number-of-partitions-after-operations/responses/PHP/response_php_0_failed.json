{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20216000,
    "question_id": "3233",
    "elapsed_time": 5165,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708526585547,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1182066003",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxPartitionsAfterOperations($s, $k) {\n        $n = strlen($s);\n        $maxPartitions = 0;\n        \n        for ($i = -1; $i < $n; $i++) {\n            if ($i != -1) {\n                $originalChar = $s[$i];\n                for ($char = 'a'; $char <= 'z'; $char++) {\n                    $s[$i] = $char;\n                    $maxPartitions = max($maxPartitions, $this->calculatePartitions($s, $k));\n                }\n                $s[$i] = $originalChar; // Restore the original character\n            } else {\n                $maxPartitions = max($maxPartitions, $this->calculatePartitions($s, $k));\n            }\n        }\n        \n        return $maxPartitions;\n    }\n\n    private function calculatePartitions($s, $k) {\n        $partitions = 0;\n        $len = strlen($s);\n        while ($len > 0) {\n            $distinctChars = [];\n            $j = 0;\n            while ($j < $len && count($distinctChars) <= $k) {\n                $distinctChars[$s[$j]] = true;\n                if (count($distinctChars) > $k) {\n                    break;\n                }\n                $j++;\n            }\n            $s = substr($s, $j);\n            $len -= $j;\n            $partitions++;\n        }\n        return $partitions - 1;\n    }\n}"
}