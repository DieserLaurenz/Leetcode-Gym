{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3296000,
    "question_id": "3233",
    "elapsed_time": 11036,
    "compare_result": "0111111111111111111111111111101111101111111111111111111110011000010011101101001010110011110000100001101010111001010011001111101001101111101100100110110101001000110000101101010001110000010001000010100010100001100000100000110000001010011000100100110000100111110111111000000000000",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708536467971,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 147,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182219645",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxPartitionsAfterOperations(s: String, k: Int): Int = {\n        if (k >= 26) return 1 // If k is large enough to contain all characters, no need to split.\n\n        def partitions(s: String): Int = {\n            var distinct = 0\n            var count = Array.fill(26)(0)\n            var i = 0\n            s.indices.foreach { j =>\n                if (count(s(j) - 'a') == 0) distinct += 1\n                count(s(j) - 'a') += 1\n                if (distinct > k) {\n                    while (distinct > k) {\n                        count(s(i) - 'a') -= 1\n                        if (count(s(i) - 'a') == 0) distinct -= 1\n                        i += 1\n                    }\n                }\n            }\n            i + 1\n        }\n\n        var maxPartitions = partitions(s)\n        for (i <- s.indices) {\n            for (c <- 'a' to 'z') {\n                if (s(i) != c) {\n                    val modified = s.substring(0, i) + c + s.substring(i + 1)\n                    maxPartitions = maxPartitions max partitions(modified)\n                }\n            }\n        }\n        maxPartitions\n    }\n}"
}