{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66976000,
    "question_id": "3233",
    "elapsed_time": 10540,
    "compare_result": "0111111111111110111111111111011111001111111111111110011110001101010011101101101110111111110101100001111010111101111111101111101001111111111110101110110101101100111001101101011001111000110011011111111111111011111011111111111111111011111111110111111111111010100111111110111000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708536522851,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 210,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182220550",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxPartitionsAfterOperations(s: String, k: Int): Int = {\n        def maxPartitions(s: String): Int = {\n            var max = 0\n            for (i <- -1 until s.length) {\n                val modifiedS = if (i == -1) s else s.updated(i, 'a')\n                var partitions = 0\n                var index = 0\n                while (index < modifiedS.length) {\n                    var distinctChars = Set[Char]()\n                    var lastIndex = index\n                    while (lastIndex < modifiedS.length && (distinctChars.size < k || distinctChars.contains(modifiedS(lastIndex)))) {\n                        distinctChars += modifiedS(lastIndex)\n                        lastIndex += 1\n                    }\n                    partitions += 1\n                    index = lastIndex\n                }\n                max = Math.max(max, partitions)\n            }\n            max\n        }\n\n        val distinctCount = s.distinct.length\n        if (k >= distinctCount) return 1\n        maxPartitions(s)\n    }\n}"
}