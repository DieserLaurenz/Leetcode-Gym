{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2156000,
    "question_id": "3233",
    "elapsed_time": 11,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708536720329,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182224231",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_partitions_after_operations(s: String, k: i32) -> i32 {\n        let n = s.len();\n        let s = s.as_bytes();\n        let k = k as usize;\n        let mut ans = 0;\n\n        // Function to calculate partitions with no changes\n        let mut calc_partitions = |change: Option<usize>| -> i32 {\n            let mut count = vec![0; 26];\n            let (mut i, mut distinct, mut partitions) = (0, 0, 0);\n            for j in 0..n {\n                if let Some(idx) = change {\n                    if j == idx {\n                        continue; // Skip the changed character\n                    }\n                }\n                let c = (s[j] - b'a') as usize;\n                if count[c] == 0 {\n                    distinct += 1;\n                }\n                count[c] += 1;\n                while distinct > k {\n                    let c = (s[i] - b'a') as usize;\n                    count[c] -= 1;\n                    if count[c] == 0 {\n                        distinct -= 1;\n                    }\n                    i += 1;\n                }\n                if i == j || s[i] != s[j] {\n                    partitions += 1;\n                    i = j + 1; // Start a new partition\n                }\n            }\n            partitions\n        };\n\n        // Try changing each character and calculate partitions\n        for i in 0..n {\n            ans = ans.max(calc_partitions(Some(i)));\n        }\n        // Calculate partitions without any change\n        ans = ans.max(calc_partitions(None));\n\n        ans\n    }\n}"
}