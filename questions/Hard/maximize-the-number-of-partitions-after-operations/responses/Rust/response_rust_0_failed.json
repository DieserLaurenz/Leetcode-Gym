{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2324000,
    "question_id": "3233",
    "elapsed_time": 213,
    "compare_result": "0011111011011010000100000010000000101000100000010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100101000001111000001000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708536646447,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182222921",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_partitions_after_operations(s: String, k: i32) -> i32 {\n        let mut result = 0;\n        let mut freq = vec![0; 26];\n        let mut l = 0;\n        let mut distinct = 0;\n        \n        let s: Vec<char> = s.chars().collect();\n        let n = s.len();\n        let mut max_len = vec![0; n + 1];\n        \n        for r in 0..n {\n            let idx = (s[r] as u8 - b'a') as usize;\n            if freq[idx] == 0 {\n                distinct += 1;\n            }\n            freq[idx] += 1;\n            \n            while distinct > k {\n                let l_idx = (s[l] as u8 - b'a') as usize;\n                freq[l_idx] -= 1;\n                if freq[l_idx] == 0 {\n                    distinct -= 1;\n                }\n                l += 1;\n            }\n            max_len[r + 1] = l;\n        }\n        \n        let mut dp = vec![0; n + 1];\n        for i in 1..=n {\n            dp[i] = dp[i - 1] + 1;\n            for j in (1..i).rev() {\n                if max_len[i] <= j - 1 {\n                    dp[i] = dp[i].max(dp[j - 1] + 1);\n                }\n            }\n        }\n        dp[n]\n    }\n}"
}