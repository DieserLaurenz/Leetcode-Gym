{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5328000,
    "question_id": "3233",
    "elapsed_time": 3010,
    "compare_result": "0101111100100100011011111101001111000111011101101110001110001000010011101101001010110011110000100001101010111001010011001111101001101111101100100110110101001000110000101101010001110000010001000010100000100001100000100000110000001010011000100100110000000010100111111000000000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708525955319,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 122,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1182057437",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n\nint maxPartition(char *s, int k, int change) {\n    int n = strlen(s);\n    int freq[26] = {0}, distinct = 0, start = 0, partitions = 0;\n    for (int end = 0; end < n; ++end) {\n        if (++freq[s[end] - 'a'] == 1) {\n            ++distinct;\n        }\n        while (distinct > k) {\n            if (--freq[s[start++] - 'a'] == 0) {\n                --distinct;\n            }\n        }\n        if (end - start + 1 == n || (change && distinct == k)) {\n            ++partitions;\n            memset(freq, 0, sizeof(freq));\n            distinct = 0;\n            start = end + 1;\n            if (change) --change;\n        }\n    }\n    return partitions;\n}\n\nint maxPartitionsAfterOperations(char* s, int k) {\n    int maxPartitions = maxPartition(s, k, 0); // Without change\n    for (int i = 0; s[i]; ++i) {\n        char original = s[i];\n        for (char c = 'a'; c <= 'z'; ++c) {\n            if (c != original) {\n                s[i] = c;\n                int partitionsWithChange = maxPartition(s, k, 1);\n                if (partitionsWithChange > maxPartitions) {\n                    maxPartitions = partitionsWithChange;\n                }\n            }\n        }\n        s[i] = original; // Restore original character\n    }\n    return maxPartitions;\n}"
}