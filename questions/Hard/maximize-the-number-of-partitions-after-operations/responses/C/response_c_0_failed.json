{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5636000,
    "question_id": "3233",
    "elapsed_time": 3012,
    "compare_result": "0011111011011010000100000010000000101000100000010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100101000001111000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708525887852,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 26,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1182056552",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n#include <limits.h>\n\nint maxPartitionsAfterOperations(char* s, int k) {\n    int n = strlen(s), result = 0, maxPartitions = 0;\n    for (int i = 0; i < n; ++i) {\n        int freq[26] = {0}, distinct = 0, modify = 0, partitions = 0;\n        for (int j = i; j < n; ++j) {\n            if (freq[s[j] - 'a'] == 0) ++distinct;\n            ++freq[s[j] - 'a'];\n            while (distinct > k) {\n                --freq[s[modify++] - 'a'];\n                if (freq[s[modify - 1] - 'a'] == 0) --distinct;\n            }\n            partitions = modify - i + 1;\n            for (int l = 0; l < 26; ++l) {\n                if (freq[l] > 0) {\n                    int tempFreq[26];\n                    memcpy(tempFreq, freq, sizeof(freq));\n                    --tempFreq[l];\n                    int tempDistinct = distinct - (tempFreq[l] == 0);\n                    int tempModify = modify, tempJ = j + 1;\n                    while (tempJ < n && tempDistinct < k) {\n                        if (tempFreq[s[tempJ] - 'a'] == 0) ++tempDistinct;\n                        ++tempFreq[s[tempJ++] - 'a'];\n                    }\n                    partitions = partitions > tempJ - i ? partitions : tempJ - i;\n                }\n            }\n            maxPartitions = maxPartitions > partitions ? maxPartitions : partitions;\n        }\n        result = result > maxPartitions ? result : maxPartitions;\n    }\n    return result;\n}"
}