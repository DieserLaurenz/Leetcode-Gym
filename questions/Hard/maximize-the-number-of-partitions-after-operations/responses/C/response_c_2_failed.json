{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5268000,
    "question_id": "3233",
    "elapsed_time": 3047,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111011111111111111011111110011111111111111101111111111011111111111111111111111101101111111110111101101111110111111110111111111010101101111111111111111111111111111111101111111111111111111111111111111111111111111111000000",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "\"baacccb\"\n1",
    "expected_output": "6",
    "task_finish_time": 1708526005385,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 253,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1182058163",
    "input_formatted": "\"baacccb\", 1",
    "input": "\"baacccb\"\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint countPartitions(char *s, int k) {\n    int freq[26] = {0}, count = 0, distinct = 0;\n    for (int i = 0; s[i] != '\\0'; i++) {\n        if (freq[s[i] - 'a'] == 0) distinct++;\n        freq[s[i] - 'a']++;\n        \n        if (distinct > k) {\n            count++;\n            memset(freq, 0, sizeof(freq));\n            distinct = 1;\n            freq[s[i] - 'a'] = 1;\n        }\n    }\n    return count + 1; // Last partition\n}\n\nint maxPartitionsAfterOperations(char* s, int k) {\n    if (k == 1) return strlen(s); // Edge case for k=1\n    \n    int maxPartitions = countPartitions(s, k);\n    for (int i = 0; s[i] != '\\0'; i++) {\n        char original = s[i];\n        for (char c = 'a'; c <= 'z'; c++) {\n            if (c != original) {\n                s[i] = c;\n                int partitions = countPartitions(s, k);\n                maxPartitions = max(maxPartitions, partitions);\n                s[i] = original; // Restore original character\n            }\n        }\n    }\n    return maxPartitions;\n}"
}