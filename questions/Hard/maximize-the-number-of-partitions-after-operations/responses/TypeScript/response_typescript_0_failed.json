{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56468000,
    "question_id": "3233",
    "elapsed_time": 3021,
    "compare_result": "0001111011011001000100000010000000001000100000000000010000100010001000000000000000000000000001000010000101000000000000100000010110000000000000010000000010000001000110000010100100000011000100100000000000000000000000000000000000000000000000000000000000000010000001111000001100000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708526428165,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 44,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182063935",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maxPartitionsAfterOperations(s: string, k: number): number {\n    let maxPartitions = 0;\n    for (let i = -1; i < s.length; i++) {\n        let partitions = 0, distinct = 0, lastIndex = new Array(26).fill(-1);\n        let freq = new Array(26).fill(0);\n        for (let j = 0, start = 0; j < s.length; j++) {\n            if (j == i) continue;\n            let index = s.charCodeAt(j) - 97;\n            if (freq[index] == 0) distinct++;\n            freq[index]++;\n            while (distinct > k) {\n                freq[s.charCodeAt(start) - 97]--;\n                if (freq[s.charCodeAt(start++) - 97] == 0) distinct--;\n            }\n            if (lastIndex[index] < start) partitions++;\n            lastIndex[index] = j;\n        }\n        maxPartitions = Math.max(maxPartitions, partitions);\n    }\n    return maxPartitions;\n}"
}