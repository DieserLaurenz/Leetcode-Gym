{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 518948000,
    "question_id": "3233",
    "elapsed_time": 749,
    "compare_result": "0111111111111110011111000110000100001111111101111110010010101100011010100101101010110011110000010010001010111001010001001100001001001110000100100110011101010000110001101101010011000000010001000000000010000000000000000000000000000000000000000000110000100101100111111000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708526471016,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 107,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182064543",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maxPartitionsAfterOperations(s: string, k: number): number {\n    const n = s.length;\n    const change = new Array(n + 2).fill(0).map(() => new Array(n + 2).fill(0));\n    const dp = new Array(n + 1).fill(0);\n\n    for (let len = 1; len <= n; ++len) {\n        for (let i = 0; i + len <= n; ++i) {\n            const j = i + len;\n            change[i][j] = change[i][j - 1] | (1 << (s.charCodeAt(j - 1) - 'a'.charCodeAt(0)));\n        }\n    }\n\n    for (let i = 1; i <= n; ++i) {\n        dp[i] = dp[i - 1] + 1;\n        let mask = 0;\n        for (let j = i; j >= 1; --j) {\n            mask |= 1 << (s.charCodeAt(j - 1) - 'a'.charCodeAt(0));\n            if (mask >> k !== 0) break;\n            dp[i] = Math.min(dp[i], dp[j - 1] + 1);\n            for (let c = 0; c < k; ++c) {\n                if ((mask >> c) & 1) continue;\n                if ((change[j - 1][i] >> c) & 1) dp[i] = Math.min(dp[i], dp[j - 1] + 1);\n            }\n        }\n    }\n    return dp[n];\n}"
}