{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 33524000,
    "question_id": "3233",
    "elapsed_time": 5266,
    "compare_result": "0101111111111100111111111111011111001111111111101110011110001000010011101101001010110011110100100001101010111001010111001111101001111111101100101110110101001100110000101101010001111000010001001111111101111011111010111111110001111011111110110111111001011010100111111110110000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708535276239,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1182199133",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxPartitionsAfterOperations(_ s: String, _ k: Int) -> Int {\n        var ans = 0\n        let n = s.count\n        let s = Array(s)\n        var freq = Array(repeating: 0, count: 26)\n        \n        for i in 0..<n {\n            var maxLen = 0\n            var unique = 0\n            freq = Array(repeating: 0, count: 26)\n            for j in i..<n {\n                let c = Int(s[j].asciiValue! - Character(\"a\").asciiValue!)\n                if freq[c] == 0 { unique += 1 }\n                freq[c] += 1\n                if unique > k { break }\n                maxLen = max(maxLen, j - i + 1)\n            }\n            var next = Array(repeating: 0, count: 26)\n            if i > 0 { next = freq }\n            for j in (i..<n).reversed() {\n                let c = Int(s[j].asciiValue! - Character(\"a\").asciiValue!)\n                if next[c] > 0 { unique -= 1 }\n                next[c] = 0\n                if unique <= k { maxLen = max(maxLen, j - i + 1) }\n            }\n            ans = max(ans, 1 + (i + maxLen < n ? maxPartitionsAfterOperations(String(s[(i + maxLen)...]), k) : 0))\n        }\n        return ans\n    }\n}"
}