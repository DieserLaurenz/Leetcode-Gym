{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16016000,
    "question_id": "3233",
    "elapsed_time": 42,
    "compare_result": "0101111111111100111111111111011111001111111111101110011110001000010011101101001010110011110100100001101010111001010111001111101001111111101100101110110101001100110000101101010001111000010001001111111101111011111010111111110001111011111110110111111001011010100111111110111001011",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708535228233,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 180,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1182198371",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxPartitionsAfterOperations(_ s: String, _ k: Int) -> Int {\n        let sArray = Array(s)\n        var result = 0\n        \n        func getMaxPartitions(_ index: Int, _ changeUsed: Bool) -> Int {\n            var count = 0\n            var i = index\n            while i < sArray.count {\n                var distinctChars = Set<Character>()\n                var j = i\n                while j < sArray.count && (distinctChars.count < k || distinctChars.contains(sArray[j])) {\n                    distinctChars.insert(sArray[j])\n                    j += 1\n                }\n                if j == sArray.count || distinctChars.count == k {\n                    count += 1\n                    i = j\n                } else if !changeUsed {\n                    // Try changing the next character\n                    let nextCount = getMaxPartitions(j, true)\n                    if nextCount + 1 > count {\n                        count = nextCount + 1\n                    }\n                    break\n                } else {\n                    break\n                }\n            }\n            return count\n        }\n        \n        result = getMaxPartitions(0, false)\n        return result\n    }\n}"
}