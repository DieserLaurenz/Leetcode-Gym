{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64324000,
    "question_id": "3233",
    "elapsed_time": 4034,
    "compare_result": "0001111011011000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111000000000000",
    "code_output": "NaN",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708526319275,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 13,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1182062477",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "var maxPartitionsAfterOperations = function(s, k) {\n    let result = 0, changes = new Array(s.length + 1).fill(0).map(() => new Array(26).fill(0));\n    for (let i = s.length - 1; i >= 0; i--) {\n        for (let j = 0; j < 26; j++) {\n            changes[i][j] = changes[i + 1][j];\n        }\n        changes[i][s.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n    }\n\n    const dp = new Array(s.length + 1).fill(0);\n    for (let i = s.length - 1; i >= 0; i--) {\n        dp[i] = dp[i + 1] + 1;\n        let distinct = 0, maxFreq = 0;\n        const freq = new Array(26).fill(0);\n        for (let j = i; j < s.length; j++) {\n            const c = s.charCodeAt(j) - 'a'.charCodeAt(0);\n            if (freq[c] == 0) distinct++;\n            freq[c]++;\n            maxFreq = Math.max(maxFreq, freq[c]);\n            if (distinct > k) break;\n            let extraChange = (j - i + 1) - maxFreq;\n            for (let l = 0; l < 26; l++) {\n                extraChange = Math.min(extraChange, (j - i + 1) - (freq[l] + changes[j + 1][l]));\n            }\n            dp[i] = Math.max(dp[i], 1 + (j + 1 + extraChange < s.length ? dp[j + 1 + extraChange] : 0));\n        }\n    }\n    result = dp[0];\n    return result;\n};"
}