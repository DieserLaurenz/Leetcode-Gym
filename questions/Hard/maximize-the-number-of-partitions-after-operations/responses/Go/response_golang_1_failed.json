{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2180000,
    "question_id": "3233",
    "elapsed_time": 3008,
    "compare_result": "0111111111111111111111111111101111101111111111111111111110111001010011101101001010110011110000101011101010111011010011001111101001101111101100100110110101001000110100111101010001110000010001000010100010100001100000100000110000001010011000100100110000100111111111111000001000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708535789535,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 156,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1182208236",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxPartitionsAfterOperations(s string, k int) int {\n    if k == 1 {\n        return len(s)\n    }\n\n    changeAndCount := func(s string, pos int, to byte) int {\n        distinctChars := make([]int, 26)\n        left, right, total, maxCount, partitions := 0, 0, 0, 0, 0\n\n        for right < len(s) {\n            if right == pos {\n                distinctChars[to-'a']++\n                if distinctChars[to-'a'] == 1 {\n                    total++\n                }\n                maxCount = max(maxCount, distinctChars[to-'a'])\n            } else {\n                distinctChars[s[right]-'a']++\n                if distinctChars[s[right]-'a'] == 1 {\n                    total++\n                }\n                maxCount = max(maxCount, distinctChars[s[right]-'a'])\n            }\n\n            for total-maxCount > k-1 {\n                if left == pos {\n                    distinctChars[to-'a']--\n                    if distinctChars[to-'a'] == 0 {\n                        total--\n                    }\n                } else {\n                    distinctChars[s[left]-'a']--\n                    if distinctChars[s[left]-'a'] == 0 {\n                        total--\n                    }\n                }\n                left++\n                maxCount = 0\n                for _, count := range distinctChars {\n                    maxCount = max(maxCount, count)\n                }\n            }\n\n            partitions = max(partitions, right-left+1)\n            right++\n        }\n        return (len(s)-partitions+1)\n    }\n\n    maxPartitions := 1\n    for i := 0; i < len(s); i++ {\n        for c := 'a'; c <= 'z'; c++ {\n            maxPartitions = max(maxPartitions, changeAndCount(s, i, byte(c)))\n        }\n    }\n\n    return maxPartitions\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}