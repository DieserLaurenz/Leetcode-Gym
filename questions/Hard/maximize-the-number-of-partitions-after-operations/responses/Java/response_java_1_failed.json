{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45404000,
    "display_runtime": "3270",
    "question_id": "3233",
    "elapsed_time": 3685,
    "compare_result": "0101111111111100111111111111011111001111111111101110011110001000010011101101001010110011110100100001101010111001010111001111101001111111101100101110110101001100110000101101010001111000010001001111111101111011111010111111110001111011111110110111111001011010100111111110111001011",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708525763596,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 180,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1182054828",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxPartitionsAfterOperations(String s, int k) {\n        int result = 0, n = s.length();\n        for (int changeIndex = -1; changeIndex < n; changeIndex++) {\n            int partitions = 0, i = 0;\n            while (i < n) {\n                int distinct = 0, maxFreq = 0;\n                int[] freq = new int[26];\n                int j = i;\n                while (j < n && (distinct < k || freq[s.charAt(j) - 'a'] > 0 || j == changeIndex)) {\n                    if (freq[s.charAt(j) - 'a'] == 0 && j != changeIndex) distinct++;\n                    freq[s.charAt(j) - 'a']++;\n                    maxFreq = Math.max(maxFreq, freq[s.charAt(j) - 'a']);\n                    if (distinct > k && j == changeIndex) distinct--;\n                    j++;\n                }\n                partitions++;\n                i = j;\n            }\n            result = Math.max(result, partitions);\n        }\n        return result;\n    }\n}"
}