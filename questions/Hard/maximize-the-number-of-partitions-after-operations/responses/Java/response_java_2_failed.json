{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 42508000,
    "display_runtime": "11",
    "question_id": "3233",
    "elapsed_time": 449,
    "compare_result": "1011111011011010000100000010000000101000100000010001110000100001100000000010010000000000000000000000000000000100000100000000010000010000000000001000000000100000000000000000000000001000000000000101000111000110001001001010001001100001000000010000000011100111010001111010001100100",
    "code_output": "4",
    "std_output": "",
    "last_testcase": "\"aabaab\"\n3",
    "expected_output": "1",
    "task_finish_time": 1708525803190,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 63,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1182055407",
    "input_formatted": "\"aabaab\", 3",
    "input": "\"aabaab\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxPartitionsAfterOperations(String s, int k) {\n        if (k == 1) {\n            return s.length();\n        }\n        int ans = 1;\n        for (char c = 'a'; c <= 'z'; c++) {\n            int[] count = new int[26];\n            int i = 0, distinct = 0, max = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) == c) {\n                    while (i <= j) {\n                        if (--count[s.charAt(i) - 'a'] == 0) {\n                            distinct--;\n                        }\n                        i++;\n                    }\n                }\n                count[s.charAt(j) - 'a']++;\n                if (count[s.charAt(j) - 'a'] == 1) {\n                    distinct++;\n                }\n                while (distinct > k) {\n                    if (--count[s.charAt(i) - 'a'] == 0) {\n                        distinct--;\n                    }\n                    i++;\n                }\n                max = Math.max(max, j - i + 1);\n            }\n            int partitions = 1;\n            for (int j = max; j < s.length(); j++) {\n                if (s.charAt(j) != s.charAt(j - max)) {\n                    partitions++;\n                    j += max - 1;\n                }\n            }\n            ans = Math.max(ans, partitions);\n        }\n        return ans;\n    }\n}"
}