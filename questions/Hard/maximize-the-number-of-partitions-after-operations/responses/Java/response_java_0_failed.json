{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45096000,
    "display_runtime": "437",
    "question_id": "3233",
    "elapsed_time": 611,
    "compare_result": "0001111011011001000100000000000000000000000000000000000001100011001000000000000000000000000001001010000101000000000000000000010110000000000000010000000010000001000110000010100100000011000100100000000000000000000000000000000000000000000000000000000000000010000001111000000100000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708525720391,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 41,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1182054306",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int maxPartitionsAfterOperations(String s, int k) {\n        int n = s.length();\n        int[] prefixDistinctCount = new int[n + 1];\n        int[] lastPosition = new int[26];\n        int result = 0;\n\n        for (int i = 0; i < n; i++) {\n            prefixDistinctCount[i + 1] = prefixDistinctCount[i];\n            if (lastPosition[s.charAt(i) - 'a'] == 0) {\n                prefixDistinctCount[i + 1]++;\n            }\n            lastPosition[s.charAt(i) - 'a'] = i + 1;\n        }\n\n        for (int i = 0; i < n; i++) {\n            int distinct = 0, maxPartition = 0;\n            int[] count = new int[26];\n            for (int j = i; j < n; j++) {\n                if (count[s.charAt(j) - 'a'] == 0) distinct++;\n                count[s.charAt(j) - 'a']++;\n                if (distinct > k) {\n                    distinct--;\n                    while (--count[s.charAt(i++) - 'a'] > 0);\n                }\n                maxPartition = Math.max(maxPartition, 1 + (j + 1 < n ? prefixDistinctCount[n] - prefixDistinctCount[j + 1] : 0));\n            }\n            result = Math.max(result, maxPartition);\n        }\n\n        return result;\n    }\n}"
}