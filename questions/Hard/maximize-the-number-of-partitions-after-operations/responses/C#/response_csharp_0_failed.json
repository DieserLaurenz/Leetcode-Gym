{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 40000000,
    "question_id": "3233",
    "elapsed_time": 4011,
    "compare_result": "0011111011011010000100000010000000101000100000010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100101000001111000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708526091332,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 26,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182059377",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxPartitionsAfterOperations(string s, int k) {\n        int n = s.Length;\n        int result = 0;\n\n        for (char c = 'a'; c <= 'z'; c++) {\n            int[] freq = new int[26];\n            int distinct = 0, left = 0, maxPartitions = 0;\n\n            for (int right = 0; right < n; right++) {\n                if (freq[s[right] - 'a']++ == 0) distinct++;\n                \n                while (distinct > k) {\n                    if (--freq[s[left] - 'a'] == 0) distinct--;\n                    left++;\n                }\n\n                maxPartitions = Math.Max(maxPartitions, right - left + 1);\n            }\n\n            // Check for every position if changing it to 'c' increases the number of partitions\n            for (int i = 0; i < n; i++) {\n                if (s[i] != c) {\n                    distinct = 0; left = 0;\n                    int partitions = 1; // Changing one character guarantees at least one partition\n\n                    for (int right = 0; right < n; right++) {\n                        if (right == i) continue; // Skip the changed character\n\n                        if (freq[s[right] - 'a']++ == 0) distinct++;\n                        \n                        while (distinct > k) {\n                            if (--freq[s[left] - 'a'] == 0) distinct--;\n                            left++;\n                        }\n\n                        partitions = Math.Max(partitions, right - left + 1);\n                    }\n\n                    maxPartitions = Math.Max(maxPartitions, partitions);\n                }\n            }\n\n            result = Math.Max(result, maxPartitions);\n        }\n\n        return result;\n    }\n}"
}