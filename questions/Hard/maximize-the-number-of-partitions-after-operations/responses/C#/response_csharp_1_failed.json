{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 120408000,
    "question_id": "3233",
    "elapsed_time": 4021,
    "compare_result": "0101111111111100111111111111011111001111111111101110011110001000010011101101001010110011110100100001101010111001010111001111101001111111101100101110110101001100110000101101010001111000010001001111111101111011111010111111110001111011111110110111111001011010100111111110110000000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708526134714,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182059980",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxPartitionsAfterOperations(string s, int k) {\n        int maxPartitions = 0;\n\n        for (int changeIndex = -1; changeIndex < s.Length; changeIndex++) {\n            int partitions = 0, i = 0;\n\n            while (i < s.Length) {\n                int distinctCount = 0, j = i;\n                var seen = new HashSet<char>();\n\n                while (j < s.Length && (seen.Count < k || seen.Contains(s[j]) || j == changeIndex)) {\n                    if (!seen.Contains(s[j]) && j != changeIndex) {\n                        if (seen.Count == k) break;\n                        seen.Add(s[j]);\n                    }\n                    j++;\n                }\n\n                i = j;\n                partitions++;\n            }\n\n            maxPartitions = Math.Max(maxPartitions, partitions);\n        }\n\n        return maxPartitions;\n    }\n}"
}