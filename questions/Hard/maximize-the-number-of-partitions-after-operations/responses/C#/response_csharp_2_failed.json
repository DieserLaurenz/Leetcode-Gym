{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45140000,
    "question_id": "3233",
    "elapsed_time": 1125,
    "compare_result": "0000000011011000100000000000010000000000000010000000000000000000000000000000000000000000000100000100000000000010000000000000000000000000000000000000000000000100000000000000000000000000000000000000001100011000010010000101000000000000100100000011000000001100000000000000010000001",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708526174999,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 27,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182060535",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxPartitionsAfterOperations(string s, int k) {\n        int maxPartitions = 1; // Initialize maxPartitions with a minimum of 1 partition\n        for (int changeIndex = -1; changeIndex < s.Length; changeIndex++) {\n            int partitions = 0;\n            int[] count = new int[26];\n            int distinct = 0, left = 0;\n            for (int right = 0; right < s.Length; right++) {\n                if (right == changeIndex) continue; // Skip the character to change\n\n                if (++count[s[right] - 'a'] == 1) distinct++; // New distinct character\n\n                while (distinct > k) {\n                    if (--count[s[left++] - 'a'] == 0) distinct--; // Remove characters until distinct characters are within limit\n                }\n\n                if (left == 0 || s[left - 1] != s[right] || right == changeIndex - 1) { // Check for partition condition\n                    partitions = Math.Max(partitions, 1 + (right - left + 1 > 0 ? 1 : 0));\n                }\n            }\n\n            // Check if changing a character could lead to an additional partition\n            if (changeIndex != -1 && distinct + 1 <= k) partitions++;\n\n            maxPartitions = Math.Max(maxPartitions, partitions);\n        }\n\n        return maxPartitions;\n    }\n}"
}