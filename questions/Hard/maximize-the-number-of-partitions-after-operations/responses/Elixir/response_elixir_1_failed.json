{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 28: ** (Protocol.UndefinedError) protocol Enumerable not implemented for \"ca\" of type BitString",
    "full_runtime_error": "Line 28: ** (Protocol.UndefinedError) protocol Enumerable not implemented for \"ca\" of type BitString\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3\n    (elixir 1.15.7) lib/enum.ex:4387: Enum.split_while/2\n    solution.ex:28: Solution.count_partitions/4\n    (elixir 1.15.7) lib/enum.ex:4356: Enum.map_range/4\n    (elixir 1.15.7) lib/enum.ex:4356: Enum.map/2\n    (elixir 1.15.7) lib/enum.ex:1260: anonymous fn/3 in Enum.flat_map/2\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73224000,
    "question_id": "3233",
    "elapsed_time": 355,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708537158996,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182231791",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_partitions_after_operations(s :: String.t(), k :: integer()) :: integer()\n  def max_partitions_after_operations(s, k) do\n    if k >= 26, do: 1, else: max_partitions_with_change(s, k)\n  end\n\n  defp max_partitions_with_change(s, k) do\n    0..String.length(s) - 1\n    |> Enum.flat_map(fn i -> Enum.map(?a..?z, fn c -> count_partitions(change_char(s, i, c), k) end) end)\n    |> Enum.max()\n  end\n\n  defp change_char(s, index, char) do\n    String.slice(s, 0, index) <> <<char>> <> String.slice(s, index + 1..-1)\n  end\n\n  defp count_partitions(s, k) do\n    count_partitions(s, k, 0, %{})\n  end\n\n  defp count_partitions(\"\", _k, count, _), do: count\n\n  defp count_partitions(s, k, count, chars) when map_size(chars) <= k do\n    if String.length(s) == 0, do: count, else: count_partitions(String.slice(s, 1..-1), k, count + 1, update_chars(chars, String.at(s, 0)))\n  end\n\n  defp count_partitions(s, k, count, chars) do\n    {prefix, _} = Enum.split_while(s, fn c -> Map.has_key?(chars, c) or map_size(chars) < k end)\n    count_partitions(String.slice(s, length(prefix)..-1), k, count + 1, %{})\n  end\n\n  defp update_chars(chars, char) do\n    Map.update(chars, char, 1, &(&1 + 1))\n  end\nend"
}