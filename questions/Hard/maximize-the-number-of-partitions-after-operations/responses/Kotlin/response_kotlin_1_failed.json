{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38704000,
    "question_id": "3233",
    "elapsed_time": 5206,
    "compare_result": "0001111011011001000100000010100000011000100000000000110001110001001100010010010100000000000011011110000000000110001000010000000000000000000001000000000000100000001000010000000010000100000000000000000000000100000101000000001100000100000001001000000110000010011001111001001000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708535466285,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 62,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182202463",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxPartitionsAfterOperations(s: String, k: Int): Int {\n        val n = s.length\n        val prefixCounts = Array(n + 1) { IntArray(26) }\n        for (i in 1..n) {\n            prefixCounts[i] = prefixCounts[i - 1].clone()\n            prefixCounts[i][s[i - 1] - 'a']++\n        }\n\n        fun countDistinctChars(l: Int, r: Int): Int {\n            var count = 0\n            for (i in 0 until 26) {\n                if (prefixCounts[r + 1][i] > prefixCounts[l][i]) count++\n            }\n            return count\n        }\n\n        fun canPartition(start: Int, end: Int): Boolean {\n            return countDistinctChars(start, end) <= k\n        }\n\n        val dp = IntArray(n + 1) { Int.MAX_VALUE }\n        dp[0] = 0\n        for (i in 1..n) {\n            for (j in 0 until i) {\n                if (canPartition(j, i - 1)) {\n                    dp[i] = minOf(dp[i], dp[j] + 1)\n                }\n            }\n        }\n\n        var maxPartitions = dp[n]\n\n        for (i in 0 until n) {\n            val originalChar = s[i]\n            for (c in 'a'..'z') {\n                if (originalChar == c) continue\n                var left = i\n                while (left > 0 && countDistinctChars(left - 1, i) == 1) left--\n                var right = i\n                while (right < n - 1 && countDistinctChars(i, right + 1) == 1) right++\n                maxPartitions = maxOf(maxPartitions, dp[left] + 1 + dp[n] - dp[right + 1])\n            }\n        }\n\n        return maxPartitions\n    }\n}"
}