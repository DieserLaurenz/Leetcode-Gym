{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38096000,
    "question_id": "3233",
    "elapsed_time": 323,
    "compare_result": "0101111111111100111111111111011111001111111111101110011110001000010011101101001010110011110100100001101010111001010011001111101001101111101100100110110101001100110000101101010001111000010001000111101100111001111010100101110000001010111100100111111000001010100111111000011001011",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708535509313,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 159,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182203292",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxPartitionsAfterOperations(s: String, k: Int): Int {\n        val n = s.length\n        val freq = Array(26) { IntArray(n + 1) }\n        for (i in 0 until n) {\n            for (j in 0 until 26) {\n                freq[j][i + 1] = freq[j][i]\n            }\n            freq[s[i] - 'a'][i + 1]++\n        }\n\n        fun check(mid: Int): Boolean {\n            for (i in 0 until n) {\n                if (i + mid > n) break\n                var diff = 0\n                for (j in 0 until 26) {\n                    if (freq[j][i + mid] - freq[j][i] > 0) diff++\n                }\n                if (diff <= k) return true\n            }\n            return false\n        }\n\n        var left = 1\n        var right = n\n        while (left < right) {\n            val mid = (left + right + 1) / 2\n            if (check(mid)) left = mid\n            else right = mid - 1\n        }\n        return n / left + if (n % left > 0) 1 else 0\n    }\n}"
}