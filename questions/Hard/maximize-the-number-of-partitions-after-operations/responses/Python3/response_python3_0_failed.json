{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16448000,
    "question_id": "3233",
    "elapsed_time": 11010,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111011111111111111011111110011111111111111101111111111011111111111111111111111101101111111110111101101111110111111110111111111010101101111111111111111111111111111111101111111111111111111111111111111111111111111111000000",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "\"baacccb\"\n1",
    "expected_output": "6",
    "task_finish_time": 1708891662705,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 253,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186102277",
    "input_formatted": "\"baacccb\", 1",
    "input": "\"baacccb\"\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def maxPartitionsAfterOperations(self, s: str, k: int) -> int:\n        def partitions(s, k):\n            distinct, i, count = 0, 0, 0\n            seen = set()\n            while i < len(s):\n                if s[i] not in seen:\n                    if distinct < k:\n                        distinct += 1\n                        seen.add(s[i])\n                    else:\n                        count += 1\n                        distinct = 1\n                        seen = {s[i]}\n                i += 1\n            return count + 1 if s else 0\n\n        if k == 1:  # Special case, changing a character doesn't help\n            return len(s)\n\n        max_partitions = partitions(s, k)\n        for i in range(len(s)):\n            for c in \"abcdefghijklmnopqrstuvwxyz\":\n                if c != s[i]:\n                    new_s = s[:i] + c + s[i+1:]\n                    max_partitions = max(max_partitions, partitions(new_s, k))\n        return max_partitions"
}