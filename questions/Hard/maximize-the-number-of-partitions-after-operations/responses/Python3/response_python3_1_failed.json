{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16348000,
    "question_id": "3233",
    "elapsed_time": 11015,
    "compare_result": "0111111111111111111111111111111111111111111111111111111111111101111111101101111110110011111111101111111111111011010111011111111111111111101110111110110111001101111110101111110101111011010101101111101111111011111110100111111001101011111110110111111000101111111111111000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708891704433,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 222,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186102727",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def maxPartitionsAfterOperations(self, s: str, k: int) -> int:\n        from collections import Counter\n\n        def max_prefix_with_k_distinct(s, k):\n            count = Counter()\n            distinct = 0\n            max_len = 0\n            j = 0\n            for i in range(len(s)):\n                if count[s[i]] == 0:\n                    distinct += 1\n                count[s[i]] += 1\n                while distinct > k:\n                    count[s[j]] -= 1\n                    if count[s[j]] == 0:\n                        distinct -= 1\n                    j += 1\n                max_len = max(max_len, i - j + 1)\n            return max_len\n\n        max_partitions = 0\n        for i in range(len(s)):\n            for c in set(list(s) + ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']):\n                temp_s = s[:i] + c + s[i + 1:]\n                partitions = 0\n                while temp_s:\n                    max_len = max_prefix_with_k_distinct(temp_s, k)\n                    temp_s = temp_s[max_len:]\n                    partitions += 1\n                max_partitions = max(max_partitions, partitions)\n        return max_partitions"
}