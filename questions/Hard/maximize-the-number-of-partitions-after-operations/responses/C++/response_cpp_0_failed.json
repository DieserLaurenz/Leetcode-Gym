{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 496308000,
    "question_id": "3233",
    "elapsed_time": 4041,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708525544739,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1182051640",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxPartitionsAfterOperations(string s, int k) {\n        int n = s.length();\n        vector<int> partitions(n + 1, 0);\n        \n        for (int i = n - 1; i >= 0; --i) {\n            unordered_map<char, int> count;\n            int distinct = 0, maxPart = 0;\n            for (int j = i; j < n; ++j) {\n                if (++count[s[j]] == 1) ++distinct;\n                while (distinct > k) {\n                    if (--count[s[i]] == 0) --distinct;\n                    ++i;\n                }\n                maxPart = max(maxPart, 1 + partitions[j + 1]);\n            }\n            partitions[i] = maxPart;\n        }\n        \n        int result = partitions[0];\n        for (int i = 0; i < n; ++i) {\n            unordered_map<char, int> count;\n            int distinct = 0;\n            for (int j = i; j < n; ++j) {\n                if (++count[s[j]] == 1) ++distinct;\n                if (distinct > k) break;\n                if (j < n - 1) {\n                    result = max(result, 1 + partitions[j + 2]);\n                } else {\n                    result = max(result, 1);\n                }\n            }\n        }\n        \n        return result;\n    }\n};"
}