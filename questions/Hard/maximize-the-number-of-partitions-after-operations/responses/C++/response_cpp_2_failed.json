{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 232156000,
    "question_id": "3233",
    "elapsed_time": 4026,
    "compare_result": "0011111011011010000100000010000000101000100000010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100101000001111000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708525648547,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 26,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1182053131",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxPartitionsAfterOperations(string s, int k) {\n        const int n = s.size();\n        vector<int> prefix(n + 1, 0); // Number of partitions without change\n        for (int i = 0; i < n; ++i) {\n            unordered_map<char, int> count;\n            int distinct = 0;\n            for (int j = i; j < n; ++j) {\n                if (count[s[j]]++ == 0) ++distinct;\n                if (distinct > k) break;\n                prefix[j + 1] = max(prefix[j + 1], prefix[i] + 1);\n            }\n        }\n\n        int result = prefix[n];\n        for (int i = 0; i < n; ++i) { // Trying to change each character\n            for (char c = 'a'; c <= 'z'; ++c) {\n                if (s[i] == c) continue; // Skip if the character is the same\n                int last_partition = 0, partitions = 0;\n                unordered_map<char, int> count;\n                int distinct = 0;\n                for (int j = 0; j < n; ++j) {\n                    if (j == i) continue; // Skip the changed character\n                    if (count[s[j]]++ == 0) ++distinct;\n                    while (distinct > k) {\n                        if (--count[s[last_partition]] == 0) --distinct;\n                        ++last_partition;\n                    }\n                    partitions = max(partitions, prefix[last_partition] + 1 + prefix[n] - prefix[j + 1]);\n                }\n                result = max(result, partitions);\n            }\n        }\n        return result;\n    }\n};"
}