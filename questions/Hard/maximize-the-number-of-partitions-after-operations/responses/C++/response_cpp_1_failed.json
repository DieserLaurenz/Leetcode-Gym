{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 974964000,
    "question_id": "3233",
    "elapsed_time": 4073,
    "compare_result": "0011111011011010000100000010000000101000100000010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000100101000001111000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708525595357,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 26,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1182052376",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxPartitionsAfterOperations(string s, int k) {\n        int n = s.length();\n        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n        for (int i = n - 1; i >= 0; --i) {\n            unordered_map<char, int> freq;\n            int distinct = 0;\n            for (int j = i; j < n; ++j) {\n                if (freq[s[j]]++ == 0) distinct++;\n                if (distinct <= k) dp[i][j] = 1;\n                else break;\n            }\n        }\n        \n        for (int len = 2; len <= n; ++len) {\n            for (int i = 0; i <= n - len; ++i) {\n                int j = i + len - 1;\n                dp[i][j] = max(dp[i][j], dp[i + 1][j]);\n                for (int k = i; k < j; ++k) {\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j]);\n                }\n            }\n        }\n        \n        int maxPartitions = dp[0][n - 1];\n        for (int i = 0; i < n; ++i) {\n            string modified = s;\n            for (char c = 'a'; c <= 'z'; ++c) {\n                modified[i] = c;\n                int partitions = 0, last = 0;\n                unordered_map<char, int> freq;\n                int distinct = 0;\n                for (int j = 0; j <= n; ++j) {\n                    if (j == n || (distinct == k && !freq[modified[j]])) {\n                        partitions++;\n                        freq.clear();\n                        distinct = 0;\n                        last = j;\n                    }\n                    if (j < n) {\n                        if (freq[modified[j]]++ == 0) distinct++;\n                    }\n                }\n                maxPartitions = max(maxPartitions, partitions);\n            }\n        }\n        \n        return maxPartitions;\n    }\n};"
}