{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126740000,
    "question_id": "3233",
    "elapsed_time": 5016,
    "compare_result": "0001111011011010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000101000001111000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"accca\"\n2",
    "expected_output": "3",
    "task_finish_time": 1708536882247,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 17,
    "total_testcases": 277,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1182226869",
    "input_formatted": "\"accca\", 2",
    "input": "\"accca\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (max-partitions-after-operations s k)\n  (-> string? exact-integer? exact-integer?)\n  \n  (define (max-partitions s k)\n    (define (count-distinct-chars s)\n      (length (remove-duplicates (string->list s))))\n    (define (partitions s k)\n      (if (string=? s \"\")\n          0\n          (let loop ((i 1) (max-part 0))\n            (if (> i (string-length s))\n                max-part\n                (let ((prefix (substring s 0 i)))\n                  (if (<= (count-distinct-chars prefix) k)\n                      (loop (+ i 1) (+ 1 max-part))\n                      max-part))))))\n    (define (try-change s k)\n      (let loop ((i 0) (max-part (partitions s k)))\n        (if (= i (string-length s))\n            max-part\n            (let ((new-s (string-copy s)))\n              (for/list ((c (in-range 97 (+ 97 26)))) ; Loop over a-z\n                (string-set! new-s i (integer->char c))\n                (set! max-part (max max-part (partitions new-s k))))\n              (loop (+ i 1) max-part)))))\n    (try-change s k))\n  \n  (max-partitions s k))"
}