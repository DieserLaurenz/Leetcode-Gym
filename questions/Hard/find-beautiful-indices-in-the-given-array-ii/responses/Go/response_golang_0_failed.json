{
    "status_code": 20,
    "lang": "golang",
    "run_success": false,
    "compile_error": "Line 3: Char 5: alen declared and not used (solution.go)",
    "full_compile_error": "Line 3: Char 5: alen declared and not used (solution.go)\nLine 3: Char 11: blen declared and not used (solution.go)",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3303",
    "task_finish_time": 1708465040717,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181378073",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "func beautifulIndices(s string, a string, b string, k int) []int {\n    var beautiful []int\n    alen, blen := len(a), len(b)\n\n    // Function to find all indices of substring in s\n    findIndices := func(sub string) []int {\n        var indices []int\n        for i := 0; i <= len(s)-len(sub); i++ {\n            if s[i:i+len(sub)] == sub {\n                indices = append(indices, i)\n            }\n        }\n        return indices\n    }\n\n    aIndices := findIndices(a)\n    bIndices := findIndices(b)\n\n    for _, ai := range aIndices {\n        for _, bi := range bIndices {\n            if abs(ai-bi) <= k {\n                beautiful = appendIfUnique(beautiful, ai)\n                break\n            }\n        }\n    }\n\n    return beautiful\n}\n\n// Helper function to append value if it's not already in the slice\nfunc appendIfUnique(slice []int, value int) []int {\n    for _, v := range slice {\n        if v == value {\n            return slice\n        }\n    }\n    return append(slice, value)\n}\n\n// Helper function to calculate absolute value\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}"
}