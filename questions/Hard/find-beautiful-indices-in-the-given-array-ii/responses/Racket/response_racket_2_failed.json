{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 129960000,
    "question_id": "3303",
    "elapsed_time": 5019,
    "compare_result": "010011111111011111111110111111111111111110111111111111111111111111111111011111111111111111111111110111111011111111111111111111111111111111111111011010011011111111110111111111111111111111110111111011111111111111111111000000000000000000000",
    "code_output": "[16]",
    "std_output": "",
    "last_testcase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "expected_output": "[16,33]",
    "task_finish_time": 1708473665104,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 199,
    "total_testcases": 237,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1181445601",
    "input_formatted": "\"isawsquirrelnearmysquirrelhouseohmy\", \"my\", \"squirrel\", 15",
    "input": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (beautiful-indices s a b k)\n  (-> string? string? string? exact-integer? (listof exact-integer?))\n  (letrec ([len-s (string-length s)]\n           [len-a (string-length a)]\n           [len-b (string-length b)]\n           [find-substrings (lambda (str sub len-sub)\n                              (let loop ([i 0] [result '()])\n                                (if (< i (- (string-length str) len-sub))\n                                    (loop (+ i 1) (if (string=? sub (substring str i (+ i len-sub)))\n                                                      (cons i result)\n                                                      result))\n                                    (reverse result))))]\n           [is-beautiful (lambda (i)\n                           (let ([start (max 0 (- i k))]\n                                 [end (min (- len-s len-b) (+ i k len-a -1))])\n                             (let check ([j start])\n                               (if (> j end) #f\n                                   (if (and (<= j (- len-s len-b)) (string=? b (substring s j (+ j len-b))))\n                                       #t\n                                       (check (+ j 1)))))))])\n    (filter is-beautiful (find-substrings s a len-a))))"
}