{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 31: IndexError: string index out of range",
    "full_runtime_error": "IndexError: string index out of range\n    if word[i] == text[m + i]:\nLine 31 in kmp_search (Solution.py)\n    a_occurrences = list(kmp_search(s, a))\nLine 42 in beautifulIndices (Solution.py)\n    ret = Solution().beautifulIndices(param_1, param_2, param_3, param_4)\nLine 86 in _driver (Solution.py)\n    _driver()\nLine 96 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11536000,
    "question_id": "3303",
    "elapsed_time": 32,
    "compare_result": "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcd\"\n\"a\"\n\"a\"\n4",
    "expected_output": "[0]",
    "task_finish_time": 1708881816246,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 237,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185975711",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def beautifulIndices(self, s, a, b, k):\n        \"\"\"\n        :type s: str\n        :type a: str\n        :type b: str\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        from collections import deque\n        \n        def kmp_table(word):\n            table = [0] * len(word)\n            pos, cnd = 1, 0\n            while pos < len(word):\n                if word[pos] == word[cnd]:\n                    cnd += 1\n                    table[pos] = cnd\n                    pos += 1\n                elif cnd > 0:\n                    cnd = table[cnd - 1]\n                else:\n                    table[pos] = 0\n                    pos += 1\n            return table\n        \n        def kmp_search(text, word):\n            table = kmp_table(word)\n            m, i = 0, 0\n            while m + i < len(text):\n                if word[i] == text[m + i]:\n                    if i == len(word) - 1:\n                        yield m\n                        m = m + i - table[i]\n                        if i > 0: i = table[i - 1]\n                    i += 1\n                else:\n                    m = m + i - table[i]\n                    if i > 0: i = table[i - 1]\n                    else: m += 1\n        \n        a_occurrences = list(kmp_search(s, a))\n        b_occurrences = deque(sorted(list(kmp_search(s, b))))\n        result = []\n        \n        for i in a_occurrences:\n            while b_occurrences and b_occurrences[0] < i - k:\n                b_occurrences.popleft()\n            if b_occurrences and (b_occurrences[0] <= i + k or (b_occurrences and b_occurrences[-1] >= i - k and b_occurrences[-1] <= i + k)):\n                result.append(i)\n                \n        return result"
}