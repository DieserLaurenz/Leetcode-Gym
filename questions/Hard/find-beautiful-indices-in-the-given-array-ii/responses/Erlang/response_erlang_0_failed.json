{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 6: exception error: function_clause",
    "full_runtime_error": "Line 6: exception error: function_clause\n[{lists,seq,[0,-3],[{file,\"lists.erl\"},{line,280}]},\n {solution,beautiful_indices,4,[{file,\"solution.erl\"},{line,6}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,33}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,15}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,50}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65952000,
    "question_id": "3303",
    "elapsed_time": 1461,
    "compare_result": "111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"dc\"\n\"dreec\"\n\"dc\"\n2",
    "expected_output": "[]",
    "task_finish_time": 1708473725126,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 237,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1181446058",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec beautiful_indices(S :: unicode:unicode_binary(), A :: unicode:unicode_binary(), B :: unicode:unicode_binary(), K :: integer()) -> [integer()].\nbeautiful_indices(S, A, B, K) ->\n    SList = binary_to_list(S),\n    AList = binary_to_list(A),\n    BList = binary_to_list(B),\n    ASizes = lists:seq(0, length(SList) - length(AList)),\n    BSizes = lists:seq(0, length(SList) - length(BList)),\n    AIndices = [I || I <- ASizes, lists:sublist(SList, I+1, length(AList)) == AList],\n    BIndices = [J || J <- BSizes, lists:sublist(SList, J+1, length(BList)) == BList],\n    FilteredIndices = [AI || AI <- AIndices, lists:any(fun(BI) -> abs(AI - BI) =< K end, BIndices)],\n    lists:sort(FilteredIndices)."
}