{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 975236000,
    "question_id": "3303",
    "elapsed_time": 4066,
    "compare_result": "111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011011111111111111111111111111111111111111111111111111111111111111000000000000000000000",
    "code_output": "[0]",
    "std_output": "",
    "last_testcase": "\"lrtsi\"\n\"lrts\"\n\"i\"\n3",
    "expected_output": "[]",
    "task_finish_time": 1708455158216,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 213,
    "total_testcases": 237,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1181269428",
    "input_formatted": "\"lrtsi\", \"lrts\", \"i\", 3",
    "input": "\"lrtsi\"\n\"lrts\"\n\"i\"\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> beautifulIndices(string s, string a, string b, int k) {\n        vector<int> result;\n        int sLen = s.length(), aLen = a.length(), bLen = b.length();\n\n        // Precompute all occurrences of b in s\n        vector<int> bPositions;\n        for (int i = 0; i <= sLen - bLen; i++) {\n            if (s.substr(i, bLen) == b) bPositions.push_back(i);\n        }\n\n        for (int i = 0; i <= sLen - aLen; i++) {\n            if (s.substr(i, aLen) == a) {\n                // Check if there exists a b within distance k of a\n                bool found = false;\n                for (int j : bPositions) {\n                    if (abs(i - j) <= k || abs((i + aLen - 1) - j) <= k) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (found) {\n                    result.push_back(i);\n                }\n            }\n        }\n\n        return result;\n    }\n};"
}