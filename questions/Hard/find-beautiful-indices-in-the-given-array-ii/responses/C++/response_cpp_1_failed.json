{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 323856000,
    "question_id": "3303",
    "elapsed_time": 4020,
    "compare_result": "011111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111011111011011111111110111111101111111111111110111111111111111011110111100000000000000000000000",
    "code_output": "[16]",
    "std_output": "",
    "last_testcase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "expected_output": "[16,33]",
    "task_finish_time": 1708455122609,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 203,
    "total_testcases": 237,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1181268944",
    "input_formatted": "\"isawsquirrelnearmysquirrelhouseohmy\", \"my\", \"squirrel\", 15",
    "input": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> beautifulIndices(string s, string a, string b, int k) {\n        vector<int> result;\n        int n = s.size(), aLen = a.size(), bLen = b.size();\n        \n        // Precompute whether b is found within distance k of each position\n        vector<bool> hasBWithinK(n, false);\n        for (int i = 0; i < n; ++i) {\n            for (int j = max(i - k, 0); j <= min(i + k, n - bLen); ++j) {\n                if (s.substr(j, bLen) == b) {\n                    hasBWithinK[i] = true;\n                    break;\n                }\n            }\n        }\n        \n        // Check for each position if a is found and b is within distance k\n        for (int i = 0; i <= n - aLen; ++i) {\n            if (s.substr(i, aLen) == a) {\n                // Check if any position within k distance from i has b\n                if (i + aLen - 1 < n && hasBWithinK[i + aLen - 1]) {\n                    result.push_back(i);\n                }\n            }\n        }\n        \n        return result;\n    }\n};"
}