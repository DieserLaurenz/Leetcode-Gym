{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 52052000,
    "question_id": "3303",
    "elapsed_time": 4018,
    "compare_result": "111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111011111111111111111111111111111111111100111100000000",
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "\"ithhi\"\n\"t\"\n\"hhi\"\n1",
    "expected_output": "[1]",
    "task_finish_time": 1708455263776,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 224,
    "total_testcases": 237,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181270848",
    "input_formatted": "\"ithhi\", \"t\", \"hhi\", 1",
    "input": "\"ithhi\"\n\"t\"\n\"hhi\"\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = s.length(), alen = a.length(), blen = b.length();\n        \n        // Precompute if substring equals to b starting from each index\n        boolean[] bStarts = new boolean[n];\n        for (int i = 0; i <= n - blen; i++) {\n            bStarts[i] = s.substring(i, i + blen).equals(b);\n        }\n        \n        for (int i = 0; i <= n - alen; i++) {\n            if (s.substring(i, i + alen).equals(a)) {\n                // Find if there's a matching b within range [i-k, i+k]\n                int start = Math.max(0, i - k);\n                int end = Math.min(n - blen, i + k - blen + 1);\n                for (int j = start; j <= end; j++) {\n                    if (bStarts[j]) {\n                        result.add(i);\n                        break; // Found a match, no need to check further\n                    }\n                }\n            }\n        }\n        \n        return result;\n    }\n}"
}