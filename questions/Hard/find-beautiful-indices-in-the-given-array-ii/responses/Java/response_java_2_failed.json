{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51972000,
    "question_id": "3303",
    "elapsed_time": 4009,
    "compare_result": "011011010101001100111100111110101111111000110010010101101100110110000111011111011000110011111011010100000001111100111111111001001111110111110110011000000001110110110011110101100000101101100010111011001110000000000110110000000000000000000",
    "code_output": "[]",
    "std_output": "",
    "last_testcase": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "expected_output": "[16,33]",
    "task_finish_time": 1708455307248,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 122,
    "total_testcases": 237,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181271426",
    "input_formatted": "\"isawsquirrelnearmysquirrelhouseohmy\", \"my\", \"squirrel\", 15",
    "input": "\"isawsquirrelnearmysquirrelhouseohmy\"\n\"my\"\n\"squirrel\"\n15",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> beautifulIndices(String s, String a, String b, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = s.length();\n        int[] nextB = new int[n];\n        int lastB = Integer.MAX_VALUE / 2; // Use a large value to avoid overflow\n        \n        // Precompute the nearest occurrence of b to the right of each position\n        for (int i = n - 1; i >= 0; i--) {\n            if (s.startsWith(b, i)) lastB = i;\n            nextB[i] = lastB;\n        }\n        \n        for (int i = 0; i <= n - a.length(); i++) {\n            if (s.startsWith(a, i)) {\n                // Check if there's a b within k distance before or after the current index\n                if (i <= lastB && (nextB[i] - i <= k || i - (nextB[i] + b.length() - 1) <= k)) {\n                    result.add(i);\n                }\n            }\n        }\n        \n        return result;\n    }\n}"
}