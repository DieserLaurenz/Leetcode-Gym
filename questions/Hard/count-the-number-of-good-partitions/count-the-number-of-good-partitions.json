{
    "acRate": 48.69685323084314,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2963",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Count the Number of Good Partitions",
    "titleSlug": "count-the-number-of-good-partitions",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Combinatorics",
            "id": "VG9waWNUYWdOb2RlOjYxMDU2",
            "slug": "combinatorics"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     int numberOfGoodPartitions(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int numberOfGoodPartitions(int[] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def numberOfGoodPartitions(self, nums):         \"\"\"         :type nums: List[int]         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def numberOfGoodPartitions(self, nums: List[int]) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "int numberOfGoodPartitions(int* nums, int numsSize) {      }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int NumberOfGoodPartitions(int[] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {number}  */ var numberOfGoodPartitions = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function numberOfGoodPartitions(nums: number[]): number {      };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Integer      */     function numberOfGoodPartitions($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func numberOfGoodPartitions(_ nums: [Int]) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun numberOfGoodPartitions(nums: IntArray): Int {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int numberOfGoodPartitions(List<int> nums) {        } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func numberOfGoodPartitions(nums []int) int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Integer} def number_of_good_partitions(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def numberOfGoodPartitions(nums: Array[Int]): Int = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn number_of_good_partitions(nums: Vec<i32>) -> i32 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (number-of-good-partitions nums)   (-> (listof exact-integer?) exact-integer?)   )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec number_of_good_partitions(Nums :: [integer()]) -> integer(). number_of_good_partitions(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec number_of_good_partitions(nums :: [integer]) :: integer   def number_of_good_partitions(nums) do        end end"
        }
    ],
    "content": "You are given a 0-indexed array nums consisting of positive integers. A partition of an array into one or more contiguous subarrays is called good if no two subarrays contain the same number. Return the total number of good partitions of nums. Since the answer may be large, return it modulo 109 + 7.  Example 1:  Input: nums = [1,2,3,4] Output: 8 Explanation: The 8 possible good partitions are: ([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]), and ([1,2,3,4]).  Example 2:  Input: nums = [1,1,1,1] Output: 1 Explanation: The only possible good partition is: ([1,1,1,1]).  Example 3:  Input: nums = [1,2,1,3] Output: 2 Explanation: The 2 possible good partitions are: ([1,2,1], [3]) and ([1,2,1,3]).   Constraints:  1 <= nums.length <= 105 1 <= nums[i] <= 109  "
}