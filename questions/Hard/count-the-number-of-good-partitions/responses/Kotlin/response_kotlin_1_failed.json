{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74528000,
    "question_id": "3212",
    "elapsed_time": 840,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382642862,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180351434",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun numberOfGoodPartitions(nums: IntArray): Int {\n        val mod = 1000000007\n        val n = nums.size\n        val dp = LongArray(n + 1) { 0 }\n        dp[0] = 1\n        val last = mutableMapOf<Int, Int>()\n\n        for (i in 1..n) {\n            dp[i] = (dp[i - 1] * 2) % mod\n            if (last.containsKey(nums[i - 1])) {\n                dp[i] = (dp[i] - dp[last[nums[i - 1]]!!] + mod) % mod\n            }\n            last[nums[i - 1]] = i - 1\n        }\n\n        return ((dp[n] - 1) % mod).toInt()\n    }\n}"
}