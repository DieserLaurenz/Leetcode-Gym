{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65772000,
    "question_id": "3212",
    "elapsed_time": 756,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382679153,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180351759",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun numberOfGoodPartitions(nums: IntArray): Int {\n        val mod = 1000000007\n        val lastPosition = mutableMapOf<Int, Int>()\n        val dp = LongArray(nums.size + 1)\n        dp[0] = 1 // Base case\n\n        for (i in 1..nums.size) {\n            dp[i] = (dp[i - 1] * 2) % mod\n            if (lastPosition.containsKey(nums[i - 1])) {\n                // Subtract the contribution of the partition that ends where the same number was last seen\n                dp[i] = (dp[i] - dp[lastPosition[nums[i - 1]]!!] + mod) % mod\n            }\n            lastPosition[nums[i - 1]] = i - 1\n        }\n\n        return dp[nums.size].toInt()\n    }\n}"
}