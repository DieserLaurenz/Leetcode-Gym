{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68204000,
    "question_id": "3212",
    "elapsed_time": 706,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382600568,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180351056",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun numberOfGoodPartitions(nums: IntArray): Int {\n        val mod = 1000000007\n        val lastIndex = mutableMapOf<Int, Int>()\n        val dp = IntArray(nums.size + 1) { 0 }\n        dp[0] = 1  // Base case: empty array has 1 good partition\n\n        for (i in nums.indices) {\n            dp[i + 1] = dp[i] * 2 % mod  // Every element can either start a new subarray or join the previous one\n            if (nums[i] in lastIndex) {\n                // If the number was seen before, we subtract the partitions that include this number in two different subarrays\n                dp[i + 1] = (dp[i + 1] - dp[lastIndex[nums[i]]!!] + mod) % mod\n            }\n            lastIndex[nums[i]] = i  // Update the last index where this number was seen\n        }\n\n        return dp[nums.size]\n    }\n}"
}