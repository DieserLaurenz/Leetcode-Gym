{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7512000,
    "question_id": "3212",
    "elapsed_time": 49,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708383224016,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180356426",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn number_of_good_partitions(nums: Vec<i32>) -> i32 {\n        use std::collections::HashMap;\n        let mod_val = 1_000_000_007;\n        let n = nums.len();\n        let mut last_pos = HashMap::new();\n        let mut dp = vec![0; n + 1];\n        dp[0] = 1; // base case\n\n        for i in 1..=n {\n            dp[i] = (2 * dp[i - 1]) % mod_val;\n            if let Some(&last) = last_pos.get(&nums[i - 1]) {\n                dp[i] = (dp[i] + mod_val - dp[last]) % mod_val;\n            }\n            last_pos.insert(nums[i - 1], i - 1);\n        }\n\n        dp[n]\n    }\n}"
}