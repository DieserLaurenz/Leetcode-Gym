{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7364000,
    "question_id": "3212",
    "elapsed_time": 50,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708383290419,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180356998",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn number_of_good_partitions(nums: Vec<i32>) -> i32 {\n        let modulo = 1_000_000_007;\n        let mut last_seen = std::collections::HashMap::new();\n        let mut dp = vec![0; nums.len() + 1];\n        dp[0] = 1; // Initial partition\n\n        for i in 0..nums.len() {\n            dp[i + 1] = dp[i] * 2 % modulo;\n            if let Some(&j) = last_seen.get(&nums[i]) {\n                dp[i + 1] = (dp[i + 1] - dp[j] + modulo) % modulo;\n            }\n            last_seen.insert(nums[i], i);\n        }\n\n        dp[nums.len()] % modulo\n    }\n}"
}