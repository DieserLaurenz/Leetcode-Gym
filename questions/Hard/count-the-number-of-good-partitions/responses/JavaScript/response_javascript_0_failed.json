{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71360000,
    "question_id": "3212",
    "elapsed_time": 214,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382098786,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1180346463",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar numberOfGoodPartitions = function(nums) {\n    const mod = 1e9 + 7;\n    const lastIndex = {};\n    let dp = new Array(nums.length + 1).fill(0);\n    dp[0] = 1; // Base case: 1 way to partition empty array\n\n    for (let i = 1; i <= nums.length; i++) {\n        dp[i] = (2 * dp[i - 1]) % mod;\n        const num = nums[i - 1];\n        if (lastIndex.hasOwnProperty(num)) {\n            dp[i] = (dp[i] - dp[lastIndex[num] - 1] + mod) % mod;\n        }\n        lastIndex[num] = i;\n    }\n\n    return dp[nums.length];\n};"
}