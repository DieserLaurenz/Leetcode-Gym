{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 29332000,
    "question_id": "3212",
    "elapsed_time": 891,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708870728262,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185830711",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def numberOfGoodPartitions(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        MOD = 10**9 + 7\n        dp = [0] * (len(nums) + 1)\n        last_seen = {}\n        dp[0] = 1  # Base case: one way to partition an empty array\n\n        for i in range(1, len(nums) + 1):\n            dp[i] = dp[i - 1] * 2 % MOD\n            if nums[i - 1] in last_seen:\n                dp[i] -= dp[last_seen[nums[i - 1]] - 1]\n                dp[i] %= MOD\n            last_seen[nums[i - 1]] = i\n\n        return (dp[len(nums)] - 1) % MOD"
}