{
    "status_code": 12,
    "lang": "c",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 975436000,
    "question_id": "3212",
    "elapsed_time": 867,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708381712226,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180342960",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\nint numberOfGoodPartitions(int* nums, int numsSize) {\n    const int MOD = 1000000007;\n    int* dp = (int*)malloc((numsSize + 1) * sizeof(int));\n    int* last = (int*)malloc((1000000000 + 1) * sizeof(int));\n    for (int i = 0; i <= 1000000000; i++) last[i] = -1;\n    \n    dp[numsSize] = 1; // Base case: There's 1 way to partition the empty array.\n    for (int i = numsSize - 1; i >= 0; i--) {\n        dp[i] = (2 * dp[i + 1]) % MOD;\n        if (last[nums[i]] != -1) {\n            dp[i] = (dp[i] - dp[last[nums[i]] + 1] + MOD) % MOD;\n        }\n        last[nums[i]] = i;\n    }\n    \n    free(last);\n    int result = dp[0];\n    free(dp);\n    return result;\n}"
}