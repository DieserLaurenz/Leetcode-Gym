{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 975656000,
    "question_id": "3212",
    "elapsed_time": 1035,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708381753238,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180343341",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\nint numberOfGoodPartitions(int* nums, int numsSize) {\n    int* dp = (int*)malloc(sizeof(int) * (numsSize + 1));\n    int* lastSeen = (int*)malloc(sizeof(int) * (numsSize + 1));\n    int maxNum = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] > maxNum) maxNum = nums[i];\n    }\n    int* last = (int*)malloc(sizeof(int) * (maxNum + 1));\n    for (int i = 0; i <= maxNum; i++) last[i] = -1;\n\n    dp[numsSize] = 1; // Base case\n    for (int i = numsSize - 1; i >= 0; i--) {\n        dp[i] = (2 * dp[i + 1]) % MOD;\n        if (last[nums[i]] != -1) {\n            dp[i] = (dp[i] - dp[last[nums[i]] + 1] + MOD) % MOD;\n        }\n        last[nums[i]] = i;\n    }\n\n    int result = dp[0];\n    free(dp);\n    free(last);\n    free(lastSeen);\n    return result;\n}"
}