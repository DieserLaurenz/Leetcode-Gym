{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 142256000,
    "question_id": "3212",
    "elapsed_time": 256,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708373183955,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180253691",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfGoodPartitions(vector<int>& nums) {\n        const int mod = 1e9 + 7;\n        int n = nums.size();\n        vector<int> dp(n + 1, 0);\n        unordered_map<int, int> lastPosition;\n        dp[0] = 1; // base case: empty array has 1 good partition\n        \n        for (int i = 1; i <= n; ++i) {\n            dp[i] = (2 * dp[i - 1]) % mod; // initially double the previous count\n            if (lastPosition.count(nums[i - 1])) {\n                // if the current number has appeared before, subtract the partitions count\n                // right before the previous appearance to avoid counting invalid partitions\n                int lastPos = lastPosition[nums[i - 1]];\n                dp[i] = (dp[i] - dp[lastPos - 1] + mod) % mod; // add mod to avoid negative result\n            }\n            lastPosition[nums[i - 1]] = i; // update last position of nums[i - 1]\n        }\n        \n        return dp[n];\n    }\n};"
}