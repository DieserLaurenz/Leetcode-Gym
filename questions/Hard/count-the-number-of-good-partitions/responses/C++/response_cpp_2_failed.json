{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 141968000,
    "question_id": "3212",
    "elapsed_time": 274,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708373249688,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180254439",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfGoodPartitions(vector<int>& nums) {\n        const int MOD = 1e9 + 7;\n        vector<int> dp(nums.size() + 1);\n        unordered_map<int, int> last;\n        dp[0] = 1; // Base case: one way to partition an empty array\n\n        for (int i = 1; i <= nums.size(); ++i) {\n            dp[i] = (2 * dp[i - 1]) % MOD; // Each number can be part of a new subarray or join the previous one\n            if (last.find(nums[i - 1]) != last.end()) {\n                // Subtract the patterns counted twice\n                dp[i] = (dp[i] - dp[last[nums[i - 1]]] + MOD) % MOD;\n            }\n            last[nums[i - 1]] = i - 1; // Update the last occurrence of nums[i-1]\n        }\n\n        return dp[nums.size()];\n    }\n};"
}