{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 145896000,
    "question_id": "3212",
    "elapsed_time": 288,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708373216800,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 51,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180254064",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfGoodPartitions(vector<int>& nums) {\n        const int mod = 1e9 + 7;\n        int n = nums.size();\n        vector<long long> dp(n + 1, 0);\n        unordered_map<int, int> lastIndex;\n        dp[0] = 1; // base case: empty array has 1 good partition\n        \n        for (int i = 1; i <= n; ++i) {\n            dp[i] = dp[i - 1]; // start with the number of partitions ending at the previous element\n            if (lastIndex.find(nums[i - 1]) != lastIndex.end()) {\n                if (lastIndex[nums[i - 1]] > 0) // ensure there's a previous occurrence\n                    dp[i] = (dp[i] - dp[lastIndex[nums[i - 1]] - 1] + mod) % mod;\n            } else {\n                dp[i] = (2 * dp[i - 1]) % mod; // if it's the first occurrence, double the possibilities\n            }\n            lastIndex[nums[i - 1]] = i; // update the last index of this number\n        }\n\n        return (int)dp[n];\n    }\n};"
}