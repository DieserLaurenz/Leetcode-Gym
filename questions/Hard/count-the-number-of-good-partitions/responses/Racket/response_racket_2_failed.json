{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 129352000,
    "question_id": "3212",
    "elapsed_time": 5063,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708392011745,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1180437811",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-good-partitions nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (let ([mod 1000000007]\n        [dp (make-vector (add1 (length nums)) 0)])\n    (vector-set! dp 0 1)\n    (for ([i (in-range (length nums))])\n      (let* ([num (list-ref nums i)]\n             [prev 0])\n        (for ([j (in-range 0 i)])\n          (when (not (equal? (list-ref nums j) num))\n            (set! prev (modulo (+ prev (vector-ref dp j)) mod))))\n        (vector-set! dp (add1 i) (modulo (+ prev 1) mod))))\n    (modulo (vector-ref dp (length nums)) mod)))"
}