{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 129672000,
    "question_id": "3212",
    "elapsed_time": 5022,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708391942855,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1180437178",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-good-partitions nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (let loop ([i (length nums)] [dp (make-vector (+ 1 (length nums)) 0)] [last-pos (make-hash)] [mod 1000000007])\n    (vector-set! dp 0 1)\n    (for ([j (in-range 1 (+ 1 (length nums)))])\n      (let* ([num (list-ref nums (- j 1))]\n             [prev-pos (hash-ref last-pos num #f)]\n             [add-val (if prev-pos (vector-ref dp prev-pos) 0)])\n        (hash-set! last-pos num j)\n        (vector-set! dp j (modulo (+ (vector-ref dp (- j 1)) add-val) mod))))\n    (vector-ref dp (length nums))))"
}