{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 30996000,
    "question_id": "3212",
    "elapsed_time": 329,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382387685,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1180349073",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numberOfGoodPartitions($nums) {\n        $mod = 1000000007;\n        $n = count($nums);\n        $dp = array_fill(0, $n + 1, 0);\n        $dp[0] = 1;\n        $last = [];\n\n        for ($i = 0; $i < $n; $i++) {\n            $dp[$i + 1] = $dp[$i];\n            if (isset($last[$nums[$i]])) {\n                $dp[$i + 1] = ($dp[$i + 1] - $dp[$last[$nums[$i]] - 1] + $mod) % $mod;\n            }\n            $last[$nums[$i]] = $i + 1;\n        }\n\n        return ($dp[$n] + $mod) % $mod;\n    }\n}"
}