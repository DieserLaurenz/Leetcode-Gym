{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 29664000,
    "question_id": "3212",
    "elapsed_time": 362,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382420030,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1180349391",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function numberOfGoodPartitions($nums) {\n        $mod = 1000000007;\n        $dp = [1]; // dp[0] = 1, base case\n        $lastIndex = [];\n        $n = count($nums);\n\n        for ($i = 0; $i < $n; $i++) {\n            $num = $nums[$i];\n            $dp[$i + 1] = $dp[$i] * 2 % $mod; // Initially double the previous value\n            if (array_key_exists($num, $lastIndex)) {\n                // Subtract the patterns counted before the last occurrence of the same number\n                $dp[$i + 1] -= $dp[$lastIndex[$num]];\n            }\n            $dp[$i + 1] = ($dp[$i + 1] + $mod) % $mod; // Ensure positive modulo\n            $lastIndex[$num] = $i; // Update last index of the current number\n        }\n\n        return $dp[$n];\n    }\n}"
}