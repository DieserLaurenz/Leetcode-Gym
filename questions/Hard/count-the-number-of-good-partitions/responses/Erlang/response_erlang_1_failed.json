{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 160236000,
    "question_id": "3212",
    "elapsed_time": 2631,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708392114628,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180438791",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_good_partitions(Nums :: [integer()]) -> integer().\nnumber_of_good_partitions(Nums) ->\n    Mod = 1000000007,\n    Len = length(Nums),\n    Dp = lists:foldl(\n        fun(X, Acc) ->\n            maps:update_with(X,\n                             fun(Idx) -> \n                                 (lists:foldl(fun(I, Sum) -> (Sum + maps:get(I, Acc, 0)) rem Mod end, 0, lists:seq(0, Idx-1))) rem Mod \n                             end,\n                             1, Acc)\n        end,\n        #{0 => 1},\n        lists:zip(Nums, lists:seq(1, Len))),\n    maps:get(Len, Dp, 0)."
}