{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 153336000,
    "question_id": "3212",
    "elapsed_time": 2091,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708392078171,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 32,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180438471",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_good_partitions(Nums :: [integer()]) -> integer().\nnumber_of_good_partitions(Nums) ->\n    Mod = 1000000007,\n    {Count, _} = lists:foldl(\n        fun(X, {Acc, Seen}) ->\n            case maps:is_key(X, Seen) of\n                false -> {Acc, maps:put(X, true, Seen)};\n                true -> {Acc * 2 rem Mod, maps:from_list([{X, true}])}\n            end\n        end,\n        {1, maps:new()},\n        Nums\n    ),\n    Count."
}