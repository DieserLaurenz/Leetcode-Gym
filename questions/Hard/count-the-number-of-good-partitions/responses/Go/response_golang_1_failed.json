{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15504000,
    "question_id": "3212",
    "elapsed_time": 216,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382886293,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180353553",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func numberOfGoodPartitions(nums []int) int {\n    mod := 1000000007\n    lastPos := make(map[int]int)\n    dp := make([]int, len(nums)+1)\n    dp[0] = 1\n    for i := 1; i <= len(nums); i++ {\n        dp[i] = (2 * dp[i-1]) % mod\n        if pos, exists := lastPos[nums[i-1]]; exists {\n            dp[i] = (dp[i] - dp[pos-1] + mod) % mod\n        }\n        lastPos[nums[i-1]] = i\n    }\n    return (dp[len(nums)] - 1 + mod) % mod\n}"
}