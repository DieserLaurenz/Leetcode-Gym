{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 149016000,
    "question_id": "3212",
    "elapsed_time": 6015,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708392223021,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180439794",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  def number_of_good_partitions(nums) do\n    nums\n    |> Enum.reduce({Map.new(), 1}, fn x, {last_pos, acc} ->\n      new_acc = case Map.fetch(last_pos, x) do\n        :error -> acc * 2\n        {:ok, pos} -> acc - Enum.reduce(Enum.take(nums, pos), 0, fn y, acc_inner ->\n          if Map.get(last_pos, y) == pos, do: acc_inner + 1, else: acc_inner\n        end)\n      end\n      {Map.put(last_pos, x, Enum.find_index(nums, fn y -> y == x end)), new_acc}\n    end)\n    |> Tuple.to_list()\n    |> List.last()\n    |> rem(1_000_000_007)\n  end\nend"
}