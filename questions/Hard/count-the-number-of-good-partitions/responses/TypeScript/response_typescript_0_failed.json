{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 84608000,
    "question_id": "3212",
    "elapsed_time": 161,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382238669,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1180347728",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function numberOfGoodPartitions(nums: number[]): number {\n    const mod = 1e9 + 7;\n    const lastIndex = new Map<number, number>();\n    let dp = Array(nums.length + 1).fill(0);\n    dp[0] = 1; // Base case: empty array has 1 good partition\n\n    for (let i = 0; i < nums.length; i++) {\n        dp[i + 1] = (2 * dp[i]) % mod;\n        if (lastIndex.has(nums[i])) {\n            const j = lastIndex.get(nums[i]);\n            dp[i + 1] = (dp[i + 1] - dp[j] + mod) % mod;\n        }\n        lastIndex.set(nums[i], i);\n    }\n\n    return dp[nums.length];\n}"
}