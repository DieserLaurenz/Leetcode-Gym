{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44512000,
    "question_id": "3212",
    "elapsed_time": 123,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708381607176,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1180341999",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int numberOfGoodPartitions(int[] nums) {\n        final int MOD = 1000000007;\n        int[] dp = new int[nums.length + 1];\n        dp[0] = 1; // Base case: no numbers means only one way to partition\n        int[] lastPosition = new int[1000001];\n        for (int i = 0; i < nums.length; i++) {\n            dp[i + 1] = (2 * dp[i]) % MOD; // Each element can either start a new subarray or be part of the previous\n            if (lastPosition[nums[i]] != 0) {\n                dp[i + 1] = (dp[i + 1] - dp[lastPosition[nums[i]] - 1] + MOD) % MOD; // Remove invalid partitions\n            }\n            lastPosition[nums[i]] = i + 1; // Update the last position of the current element\n        }\n        return (dp[nums.length] - 1 + MOD) % MOD; // Subtract the partition that includes the whole array\n    }\n}"
}