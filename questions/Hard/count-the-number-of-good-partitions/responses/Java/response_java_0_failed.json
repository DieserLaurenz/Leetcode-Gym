{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44376000,
    "question_id": "3212",
    "elapsed_time": 120,
    "compare_result": "000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708381557483,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1180341571",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int numberOfGoodPartitions(int[] nums) {\n        final int MOD = 1000000007;\n        int n = nums.length;\n        int[] last = new int[1000001], dp = new int[n + 1];\n        dp[0] = 1; // Base case: empty array has one good partition\n\n        for (int i = 1; i <= n; i++) {\n            dp[i] = (2 * dp[i - 1]) % MOD; // Initially, double the previous state's partitions\n            if (last[nums[i - 1]] > 0) { // If current number has appeared before, subtract invalid partitions\n                dp[i] = (dp[i] - dp[last[nums[i - 1]] - 1] + MOD) % MOD;\n            }\n            last[nums[i - 1]] = i; // Update last occurrence of nums[i-1]\n        }\n\n        return (dp[n] - 1 + MOD) % MOD; // Subtract 1 to exclude the partition of the entire array as a single block\n    }\n}"
}