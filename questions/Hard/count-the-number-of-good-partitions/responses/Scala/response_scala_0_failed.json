{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74332000,
    "question_id": "3212",
    "elapsed_time": 1081,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708383096891,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1180355363",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def numberOfGoodPartitions(nums: Array[Int]): Int = {\n        val mod = 1000000007\n        val lastIndex = scala.collection.mutable.Map[Int, Int]()\n        var dp = Array.fill(nums.length + 1)(0)\n        dp(0) = 1\n        \n        for (i <- nums.indices) {\n            dp(i + 1) = dp(i) * 2 % mod\n            if (lastIndex.contains(nums(i))) {\n                dp(i + 1) = (dp(i + 1) - dp(lastIndex(nums(i))) + mod) % mod\n            }\n            lastIndex(nums(i)) = i\n        }\n        \n        dp(nums.length) % mod\n    }\n}"
}