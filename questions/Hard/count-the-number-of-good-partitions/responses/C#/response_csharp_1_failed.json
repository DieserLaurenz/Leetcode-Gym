{
    "status_code": 15,
    "lang": "csharp",
    "run_success": false,
    "runtime_error": "Unhandled exception. System.IndexOutOfRangeException: Index was outside the bounds of the array.",
    "full_runtime_error": "Unhandled exception. System.IndexOutOfRangeException: Index was outside the bounds of the array.\nAt Solution.NumberOfGoodPartitions(Int32[] nums)\nAt __DriverSolution__.__Helper__(Int32[] param_1)\nAt __Driver__.Main(String[] args)",
    "status_runtime": "N/A",
    "memory": 44156000,
    "question_id": "3212",
    "elapsed_time": 203,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382008663,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180345652",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int NumberOfGoodPartitions(int[] nums) {\n        const int MOD = 1000000007;\n        int n = nums.Length;\n        Dictionary<int, int> lastPosition = new Dictionary<int, int>();\n        long[] dp = new long[n + 1];\n        dp[0] = 1; // Base case: for the empty prefix\n\n        for (int i = 0; i < n; i++) {\n            dp[i + 1] = dp[i]; // Initially, assume current element does not create new partitions\n            int lastPos = -1;\n            if (lastPosition.ContainsKey(nums[i])) {\n                lastPos = lastPosition[nums[i]];\n            }\n            // Calculate the number of good partitions ending at the current element\n            for (int j = i; j > lastPos; j--) {\n                dp[i + 1] = (dp[i + 1] + dp[j - 1]) % MOD;\n            }\n            lastPosition[nums[i]] = i; // Update the last position for the current element\n        }\n\n        return (int)dp[n];\n    }\n}"
}