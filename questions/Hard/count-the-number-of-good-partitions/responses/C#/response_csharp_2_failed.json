{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 84704000,
    "question_id": "3212",
    "elapsed_time": 495,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382041798,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180345947",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int NumberOfGoodPartitions(int[] nums) {\n        const int MOD = 1000000007;\n        int n = nums.Length;\n        Dictionary<int, int> lastPos = new Dictionary<int, int>();\n        int[] dp = new int[n + 1];\n        dp[0] = 1; // Base case: only 1 way to partition empty array\n\n        for (int i = 1; i <= n; i++) {\n            dp[i] = (2 * dp[i - 1]) % MOD; // Each new number can either start a new subarray or be part of the previous one\n            if (lastPos.ContainsKey(nums[i - 1])) {\n                int j = lastPos[nums[i - 1]];\n                dp[i] = (dp[i] - dp[j - 1] + MOD) % MOD; // Subtract the invalid partitions caused by repeating a number\n            }\n            lastPos[nums[i - 1]] = i; // Update the last position of the current number\n        }\n\n        return dp[n];\n    }\n}"
}