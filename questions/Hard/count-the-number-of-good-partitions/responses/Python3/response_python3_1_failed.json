{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38744000,
    "question_id": "3212",
    "elapsed_time": 817,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708871052454,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185834680",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def numberOfGoodPartitions(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        dp = [1] * (len(nums) + 1)\n        last_seen = {}\n\n        for i in range(1, len(nums) + 1):\n            dp[i] = (2 * dp[i - 1]) % mod\n            if nums[i - 1] in last_seen:\n                dp[i] = (dp[i] - dp[last_seen[nums[i - 1]]] + mod) % mod\n            last_seen[nums[i - 1]] = i - 1\n\n        return dp[len(nums)] % mod"
}