{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 11: Char 46: Error: A value of type 'int?' can't be assigned to a variable of type 'int' because 'int?' is nullable and 'int' isn't.",
    "full_runtime_error": "Line 11: Char 46: Error: A value of type 'int?' can't be assigned to a variable of type 'int' because 'int?' is nullable and 'int' isn't.\n        dp[i + 1] = (dp[i + 1] - dp[lastIndex[nums[i]]] + mod) % mod; // Subtract partitions that are not good\n                                             ^",
    "status_runtime": "N/A",
    "memory": 145668000,
    "question_id": "3212",
    "elapsed_time": 634,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382737011,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180352292",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int numberOfGoodPartitions(List<int> nums) {\n    const int mod = 1000000007;\n    Map<int, int> lastIndex = {};\n    List<int> dp = List.filled(nums.length + 1, 0);\n    dp[0] = 1; // Base case: empty array has 1 good partition\n\n    for (int i = 0; i < nums.length; i++) {\n      dp[i + 1] = dp[i] * 2 % mod; // Each element can either start a new subarray or join the previous one\n      if (lastIndex.containsKey(nums[i])) {\n        dp[i + 1] = (dp[i + 1] - dp[lastIndex[nums[i]]] + mod) % mod; // Subtract partitions that are not good\n      }\n      lastIndex[nums[i]] = i; // Update the last index of the current element\n    }\n\n    return dp[nums.length];\n  }\n}"
}