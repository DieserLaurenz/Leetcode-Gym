{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 203132000,
    "question_id": "3212",
    "elapsed_time": 558,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "8",
    "task_finish_time": 1708382804165,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 813,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180352854",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int numberOfGoodPartitions(List<int> nums) {\n    const int mod = 1000000007;\n    Map<int, int> lastIndex = {};\n    List<int> dp = List.filled(nums.length + 1, 0);\n    dp[0] = 1; // Base case: empty array has 1 good partition\n\n    for (int i = 0; i < nums.length; i++) {\n      dp[i + 1] = dp[i]; // Initialize dp[i+1] with dp[i] value\n      if (!lastIndex.containsKey(nums[i])) {\n        // If the number hasn't appeared before, it doesn't affect the partition count negatively\n        for (int j = i; j >= 0; j--) {\n          dp[i + 1] = (dp[i + 1] + dp[j]) % mod;\n          if (nums[j] == nums[i]) break; // Stop when the first occurrence of nums[i] is found\n        }\n      }\n      lastIndex[nums[i]] = i; // Update the last index of the current element\n    }\n\n    return dp[nums.length] % mod;\n  }\n}"
}