{
    "status_code": 14,
    "lang": "python3",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16476000,
    "question_id": "2757",
    "elapsed_time": 11013,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708870013868,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185821911",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n        MOD = 10**9 + 7\n\n        def dfs(pos, tight, less, s, dp, digits):\n            if pos == len(digits): return min_sum <= s <= max_sum\n            if not tight and not less and dp[pos][s] != -1: return dp[pos][s]\n            ans = 0\n            up = digits[pos] if tight else 9\n            for i in range(up + 1):\n                ans += dfs(pos + 1, tight and i == up, less or i > 0, s + (i if less or i > 0 else 0), dp, digits)\n                ans %= MOD\n            if not tight and not less: dp[pos][s] = ans\n            return ans\n\n        def solve(x):\n            digits = [int(d) for d in x]\n            dp = [[-1 for _ in range(max_sum + 1)] for _ in range(len(x) + 1)]\n            return dfs(0, True, False, 0, dp, digits)\n\n        return (solve(num2) - solve(str(int(num1) - 1))) % MOD"
}