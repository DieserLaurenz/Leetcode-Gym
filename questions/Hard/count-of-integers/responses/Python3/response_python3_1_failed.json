{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17852000,
    "question_id": "2757",
    "elapsed_time": 298,
    "compare_result
    "code_output": "32",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708869968914,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 255,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185821513",
    "input_formatted": "\"1\", \"12\", 1, 8",
    "input": "\"1\"\n\"12\"\n1\n8",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n        MOD = 10**9 + 7\n        memo = {}\n\n        def dp(i, tight, total):\n            if i == len(num2): return min_sum <= total <= max_sum\n            if not tight and (i, total) in memo: return memo[(i, total)]\n            limit = int(num2[i]) if tight else 9\n            res = 0\n            for digit in range(0, limit + 1):\n                new_tight = tight and (digit == int(num2[i]))\n                res += dp(i + 1, new_tight, total + digit)\n            if not tight: memo[(i, total)] = res\n            return res % MOD\n\n        def count_less_than(x):\n            str_x = str(x)\n            res = 0\n            for i in range(1, len(str_x)):\n                for j in range(1, 10):\n                    res += dp(1, i == len(str_x) - 1 and j == int(str_x[0]), j)\n            total = 0\n            for i, c in enumerate(str_x):\n                for digit in range(0, int(c) + (i == len(str_x) - 1)):\n                    if i == 0 and digit == 0: continue\n                    res += dp(i + 1, digit == int(c), total + digit)\n                total += int(c)\n            if min_sum <= total <= max_sum: res += 1\n            return res % MOD\n\n        return (count_less_than(int(num2) + 1) - count_less_than(int(num1))) % MOD"
}