{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57088000,
    "question_id": "2757",
    "elapsed_time": 205,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708328267488,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 354,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1179622807",
    "input_formatted": "\"1\", \"12\", 1, 8",
    "input": "\"1\"\n\"12\"\n1\n8",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    private const int MOD = 1000000007;\n    \n    private int SumOfDigits(string s) {\n        int sum = 0;\n        foreach (var c in s) sum += c - '0';\n        return sum;\n    }\n    \n    private int CountLessThanOrEqual(string num, int maxSum) {\n        int n = num.Length;\n        int[,,] dp = new int[n + 1, maxSum + 1, 2];\n        dp[0, 0, 1] = 1;\n        \n        for (int i = 0; i < n; i++) {\n            int digit = num[i] - '0';\n            for (int sum = 0; sum <= maxSum; sum++) {\n                for (int k = 0; k < 10; k++) {\n                    if (sum + k <= maxSum) {\n                        dp[i + 1, sum + k, 0] = (dp[i + 1, sum + k, 0] + dp[i, sum, 0]) % MOD;\n                        if (k < digit) {\n                            dp[i + 1, sum + k, 0] = (dp[i + 1, sum + k, 0] + dp[i, sum, 1]) % MOD;\n                        } else if (k == digit) {\n                            dp[i + 1, sum + k, 1] = (dp[i + 1, sum + k, 1] + dp[i, sum, 1]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n        \n        int result = 0;\n        for (int sum = 0; sum <= maxSum; sum++) {\n            result = (result + dp[n, sum, 0] + dp[n, sum, 1]) % MOD;\n        }\n        return result;\n    }\n    \n    public int Count(string num1, string num2, int minSum, int maxSum) {\n        int lessThanNum1 = CountLessThanOrEqual(num1, maxSum) - CountLessThanOrEqual(num1, minSum - 1);\n        int lessThanNum2 = CountLessThanOrEqual(num2, maxSum) - CountLessThanOrEqual(num2, minSum - 1);\n        return (lessThanNum2 - lessThanNum1 + MOD) % MOD;\n    }\n}"
}