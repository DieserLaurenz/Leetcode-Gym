{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44856000,
    "question_id": "2757",
    "elapsed_time": 150,
    "compare_result
    "code_output": "53",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708328226984,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1179622298",
    "input_formatted": "\"1\", \"12\", 1, 8",
    "input": "\"1\"\n\"12\"\n1\n8",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    private const int Mod = 1000000007;\n\n    public int Count(string num1, string num2, int min_sum, int max_sum) {\n        return (CountUpTo(num2, max_sum) - CountUpTo(num1, min_sum - 1) + Mod) % Mod;\n    }\n\n    private int CountUpTo(string num, int maxSum) {\n        int[,] dp = new int[num.Length + 1, maxSum + 1];\n        dp[0,0] = 1;\n\n        for (int i = 0; i < num.Length; i++) {\n            for (int j = 0; j <= maxSum; j++) {\n                for (int d = 0; d < 10; d++) {\n                    if (j + d <= maxSum) {\n                        dp[i + 1, j + d] += dp[i, j];\n                        dp[i + 1, j + d] %= Mod;\n                    }\n                }\n            }\n        }\n\n        int sum = 0;\n        for (int i = 1; i <= num.Length; i++) {\n            for (int j = 0; j < num[i - 1] - '0'; j++) {\n                if (i == 1 || num[i - 2] != '0' || j > 0) {\n                    for (int k = 0; k <= maxSum; k++) {\n                        sum = (sum + dp[i - 1, k]) % Mod;\n                    }\n                }\n            }\n\n            int currentSum = 0;\n            for (int j = 0; j < i - 1; j++) {\n                currentSum += num[j] - '0';\n            }\n\n            for (int j = currentSum; j + (num[i - 1] - '0') <= maxSum; j++) {\n                sum = (sum + dp[i, j]) % Mod;\n            }\n        }\n\n        return sum;\n    }\n}"
}