{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45076000,
    "question_id": "2757",
    "elapsed_time": 141,
    "compare_result
    "code_output": "804701905",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708328307759,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1179623327",
    "input_formatted": "\"4179205230\", \"7748704426\", 8, 46",
    "input": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    private const int MOD = 1000000007;\n\n    public int Count(string num1, string num2, int min_sum, int max_sum) {\n        return (GetCount(num2, max_sum) - GetCount(num1, min_sum - 1) + MOD) % MOD;\n    }\n\n    private int GetCount(string num, int sum) {\n        int[][] dp = new int[num.Length + 1][];\n        for (int i = 0; i <= num.Length; i++) {\n            dp[i] = new int[sum + 1];\n            for (int j = 0; j <= sum; j++) {\n                dp[i][j] = -1;\n            }\n        }\n\n        return Count(num, 0, 0, sum, dp, true);\n    }\n\n    private int Count(string num, int pos, int currentSum, int maxSum, int[][] dp, bool limit) {\n        if (pos == num.Length) {\n            return currentSum <= maxSum ? 1 : 0;\n        }\n        if (!limit && dp[pos][currentSum] != -1) {\n            return dp[pos][currentSum];\n        }\n\n        int maxDigit = limit ? num[pos] - '0' : 9;\n        int count = 0;\n        for (int digit = 0; digit <= maxDigit; digit++) {\n            if (currentSum + digit <= maxSum) {\n                count = (count + Count(num, pos + 1, currentSum + digit, maxSum, dp, limit && digit == maxDigit)) % MOD;\n            }\n        }\n\n        if (!limit) {\n            dp[pos][currentSum] = count;\n        }\n\n        return count;\n    }\n}"
}