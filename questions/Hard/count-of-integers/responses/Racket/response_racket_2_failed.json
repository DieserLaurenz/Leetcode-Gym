{
    "status_code": 12,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 975384000,
    "question_id": "2757",
    "elapsed_time": 1450,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708330233151,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1179647539",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (count num1 num2 min_sum max_sum)\n  (-> string? string? exact-integer? exact-integer? exact-integer?)\n  \n  (define mod 1000000007)\n  \n  (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10) (sum-digits (quotient n 10)))))\n  \n  (define (valid-sum? n)\n    (let ((sum (sum-digits n)))\n      (and (>= sum min_sum) (<= sum max_sum))))\n  \n  (define (iterate n1 n2)\n    (if (> n1 n2)\n        0\n        (let ((next (iterate (+ n1 1) n2)))\n          (if (valid-sum? n1)\n              (modulo (+ 1 next) mod)\n              next))))\n  \n  (let* ((start (string->number num1))\n         (end (string->number num2))\n         (result (iterate start end)))\n    result))"
}