{
    "status_code": 14,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 101020000,
    "question_id": "2757",
    "elapsed_time": 5016,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708330150043,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1179646391",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (count num1 num2 min_sum max_sum)\n  (-> string? string? exact-integer? exact-integer? exact-integer?)\n  \n  (define (digit-sum n)\n    (if (= n 0)\n        0\n        (+ (modulo n 10) (digit-sum (quotient n 10)))))\n\n  (define (count-good-integers start end count)\n    (if (> start end)\n        count\n        (let ((sum (digit-sum start)))\n          (if (and (>= sum min_sum) (<= sum max_sum))\n              (count-good-integers (+ start 1) end (modulo (+ count 1) 1000000007))\n              (count-good-integers (+ start 1) end count)))))\n\n  (count-good-integers (string->number num1) (string->number num2) 0))"
}