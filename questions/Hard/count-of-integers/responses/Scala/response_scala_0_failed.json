{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 6: java.lang.IllegalArgumentException: More than Int.MaxValue elements. (at countGoodIntegers$1)",
    "full_runtime_error": "java.lang.IllegalArgumentException: More than Int.MaxValue elements.\nLine 324: scala.collection.immutable.NumericRange$.check$1 (NumericRange.scala)\nLine 334: scala.collection.immutable.NumericRange$.count (NumericRange.scala)\nLine 75: scala.collection.immutable.NumericRange.length$lzycompute (NumericRange.scala)\nLine 75: scala.collection.immutable.NumericRange.length (NumericRange.scala)\nLine 83: scala.collection.immutable.NumericRange.last (NumericRange.scala)\nLine 421: scala.collection.immutable.NumericRange$NumericRangeIterator.<init> (NumericRange.scala)\nLine 55: scala.collection.immutable.NumericRange.iterator (NumericRange.scala)\nLine 604: scala.collection.IterableOnceOps.count (IterableOnce.scala)\nLine 602: scala.collection.IterableOnceOps.count$ (IterableOnce.scala)\nLine 926: scala.collection.AbstractIterable.count (Iterable.scala)\nLine 6: Solution$.countGoodIntegers$1 (solution.scala)\nLine 14: Solution$.count (solution.scala)\nLine 20: Main$.__helper__ (solution.scala)\nLine 40: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 54116000,
    "question_id": "2757",
    "elapsed_time": 565,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708329826197,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1179642495",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def count(num1: String, num2: String, min_sum: Int, max_sum: Int): Int = {\n        def digitSum(n: BigInt): Int = n.toString.map(_.asDigit).sum\n\n        def countGoodIntegers(start: BigInt, end: BigInt): Int = {\n            (start to end).count(x => {\n                val sum = digitSum(x)\n                sum >= min_sum && sum <= max_sum\n            })\n        }\n\n        val start = BigInt(num1)\n        val end = BigInt(num2)\n        countGoodIntegers(start, end).toInt % (1e9.toInt + 7)\n    }\n}"
}