{
    "status_code": 14,
    "lang": "scala",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 3308000,
    "question_id": "2757",
    "elapsed_time": 11017,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708329876415,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1179643003",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "object Solution {\n  val Mod: Int = 1e9.toInt + 7\n\n  def count(num1: String, num2: String, min_sum: Int, max_sum: Int): Int = {\n    def digitSum(n: BigInt): Int = n.toString.map(_.asDigit).sum\n\n    def dfs(n: String, idx: Int, tight: Boolean, less: Boolean, sum: Int): BigInt = {\n      if (idx == n.length) {\n        if (sum >= min_sum && sum <= max_sum) 1 else 0\n      } else {\n        val limit = if (tight) n(idx) - '0' else 9\n        (0 to limit).foldLeft(BigInt(0)) { (acc, digit) =>\n          acc + dfs(n, idx + 1, tight && digit == limit, less || digit < limit, sum + digit)\n        }\n      }\n    }\n\n    def solve(n: String): BigInt = {\n      dfs(n, 0, tight = true, less = false, 0)\n    }\n\n    val res = solve(num2) - solve((BigInt(num1) - 1).toString())\n    (res % Mod).toInt\n  }\n}"
}