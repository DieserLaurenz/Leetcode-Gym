{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56344000,
    "question_id": "2757",
    "elapsed_time": 636,
    "compare_result
    "code_output": "142379381",
    "std_output": "",
    "last_testcase": "\"4859473643\"\n\"30159981595\"\n58\n59",
    "expected_output": "972251498",
    "task_finish_time": 1708329924497,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 593,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1179643711",
    "input_formatted": "\"4859473643\", \"30159981595\", 58, 59",
    "input": "\"4859473643\"\n\"30159981595\"\n58\n59",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n  val mod: Int = 1e9.toInt + 7\n\n  def count(num1: String, num2: String, min_sum: Int, max_sum: Int): Int = {\n    val dp = Array.ofDim[Int](num2.length + 1, max_sum + 1, 2)\n    for(i <- dp.indices) {\n      for(j <- dp(i).indices) {\n        java.util.Arrays.fill(dp(i)(j), -1)\n      }\n    }\n\n    def digitSum(x: Int): Int = if (x == 0) 0 else x % 10 + digitSum(x / 10)\n\n    def dfs(pos: Int, sum: Int, limit: Boolean, isZero: Boolean, num: String): Int = {\n      if (sum > max_sum) return 0\n      if (pos == num.length) {\n        if (sum >= min_sum && sum <= max_sum) return 1\n        else return 0\n      }\n      if (!limit && !isZero && dp(pos)(sum)(1) != -1) return dp(pos)(sum)(1)\n      val up = if (limit) num(pos) - '0' else 9\n      var ans = 0\n      for (d <- 0 to up) {\n        ans = (ans + dfs(pos + 1, if (isZero && d == 0) 0 else sum + d, limit && d == up, isZero && d == 0, num)) % mod\n      }\n      if (!limit && !isZero) dp(pos)(sum)(1) = ans\n      ans\n    }\n\n    def solve(num: String): Int = dfs(0, 0, limit = true, isZero = true, num)\n\n    val a = solve(num2)\n    val b = solve((BigInt(num1) - 1).toString)\n    (a - b + mod) % mod\n  }\n}"
}