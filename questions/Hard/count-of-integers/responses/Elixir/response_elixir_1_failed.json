{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 70388000,
    "question_id": "2757",
    "elapsed_time": 6020,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708351342204,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1179909787",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count(num1 :: String.t, num2 :: String.t, min_sum :: integer, max_sum :: integer) :: integer\n  def count(num1, num2, min_sum, max_sum) do\n    start = String.to_integer(num1)\n    finish = String.to_integer(num2)\n    modulo = 1_000_000_007\n\n    Enum.reduce(start..finish, 0, fn x, acc ->\n      if digit_sum(x) in min_sum..max_sum, do: rem(acc + 1, modulo), else: acc\n    end)\n  end\n\n  defp digit_sum(n), do: Integer.digits(n) |> Enum.sum()\nend"
}