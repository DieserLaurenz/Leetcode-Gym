{
    "status_code": 12,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 986200000,
    "question_id": "2757",
    "elapsed_time": 952,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708351304036,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1179909296",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count(num1 :: String.t, num2 :: String.t, min_sum :: integer, max_sum :: integer) :: integer\n  def count(num1, num2, min_sum, max_sum) do\n    num1\n    |> String.to_integer()\n    |> upto(String.to_integer(num2))\n    |> Enum.filter(fn x -> \n      digit_sum = Integer.digits(x) |> Enum.sum()\n      digit_sum >= min_sum and digit_sum <= max_sum\n    end)\n    |> length()\n    |> rem(1_000_000_007)\n  end\n\n  defp upto(from, to) when from > to, do: []\n  defp upto(from, to), do: [from | upto(from + 1, to)]\nend"
}