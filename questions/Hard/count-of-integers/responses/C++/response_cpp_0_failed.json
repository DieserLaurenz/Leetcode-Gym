{
    "status_code": 15,
    "lang": "cpp",
    "run_success": false,
    "runtime_error": "AddressSanitizer: SEGV on unknown address 0x7fff53ff01b0 (pc 0x564378bbd155 bp 0x7fff53fcf3b0 sp 0x7fff53fcf350 T0)",
    "full_runtime_error": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==23==ERROR: AddressSanitizer: SEGV on unknown address 0x7fff53ff01b0 (pc 0x564378bbd155 bp 0x7fff53fcf3b0 sp 0x7fff53fcf350 T0)\n==23==The signal is caused by a READ memory access.\n    #24 0x7f458b30dd8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\n    #25 0x7f458b30de3f  (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\nAddressSanitizer can not provide additional info.\n==23==ABORTING",
    "status_runtime": "N/A",
    "memory": 8248000,
    "question_id": "2757",
    "elapsed_time": 14,
    "compare_result": "111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1012640017461217236611\"\n\"9234552128261772272769\"\n67\n148",
    "expected_output": "683479047",
    "task_finish_time": 1708319557951,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179494693",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\n    static const int MOD = 1e9 + 7;\n    \n    int dp[20][2][2][400];\n\n    int digitSum(int idx, int tightNum1, int tightNum2, int sum, const string &num1, const string &num2, int min_sum, int max_sum) {\n        if (sum > max_sum) return 0; // Early termination if sum exceeds max_sum\n        if (idx == num1.size()) { // Base case: all digits processed\n            return sum >= min_sum && sum <= max_sum;\n        }\n        if (dp[idx][tightNum1][tightNum2][sum] != -1) return dp[idx][tightNum1][tightNum2][sum]; // Memoization\n        \n        int limit1 = tightNum1 ? num1[idx] - '0' : 0;\n        int limit2 = tightNum2 ? num2[idx] - '0' : 9;\n        int count = 0;\n        \n        for (int d = limit1; d <= limit2; ++d) {\n            count = (count + digitSum(idx + 1, tightNum1 && d == limit1, tightNum2 && d == limit2, sum + d, num1, num2, min_sum, max_sum)) % MOD;\n        }\n\n        return dp[idx][tightNum1][tightNum2][sum] = count;\n    }\n    \npublic:\n    int count(string num1, string num2, int min_sum, int max_sum) {\n        while (num1.size() < num2.size()) num1 = \"0\" + num1; // Padding num1 to match the length of num2\n        \n        memset(dp, -1, sizeof(dp)); // Initializing dp array with -1\n        \n        return digitSum(0, 1, 1, 0, num1, num2, min_sum, max_sum);\n    }\n};"
}