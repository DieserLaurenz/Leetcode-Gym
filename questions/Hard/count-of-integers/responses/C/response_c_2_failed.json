{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5700000,
    "question_id": "2757",
    "elapsed_time": 10,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708328147671,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1179621340",
    "input_formatted": "\"1\", \"12\", 1, 8",
    "input": "\"1\"\n\"12\"\n1\n8",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\nint dp[20][2][2][200];\n\n// Helper function to convert a character to integer\nint charToInt(char c) {\n    return c - '0';\n}\n\n// Recursive function to calculate the count\nint solve(char* num, int n, int tight, int less, int sum, int min_sum, int max_sum) {\n    if (n == 0) return sum >= min_sum && sum <= max_sum; // Base case\n    if (dp[n][tight][less][sum] != -1) return dp[n][tight][less][sum]; // Return memoized result\n\n    int limit = tight ? charToInt(num[strlen(num) - n]) : 9;\n    int res = 0;\n\n    for (int i = (less ? 0 : charToInt(num[strlen(num) - n])), end = tight ? limit : 9; i <= end; i++) {\n        res = (res + solve(num, n - 1, tight && (i == end), less || i > charToInt(num[strlen(num) - n]), sum + i, min_sum, max_sum)) % MOD;\n    }\n\n    return dp[n][tight][less][sum] = res;\n}\n\nint count(char * num1, char * num2, int min_sum, int max_sum){\n    memset(dp, -1, sizeof(dp)); // Reset dp array\n\n    // Convert num1 and num2 to long long for comparison\n    long long n1 = atoll(num1), n2 = atoll(num2);\n\n    // Prepare for leading zero adjustment if necessary\n    char *num1WithLeadingZero = (char*)malloc(strlen(num1) + 2);\n    sprintf(num1WithLeadingZero, \"0%s\", num1);\n\n    // Solve for num2\n    int countForNum2 = solve(num2, strlen(num2), 1, 0, 0, min_sum, max_sum);\n\n    // Solve for num1 with leading zero to include num1 in the count if it's within range\n    int countForNum1 = solve(num1WithLeadingZero, strlen(num1WithLeadingZero), 1, 0, 0, min_sum, max_sum);\n\n    // Free the allocated memory\n    free(num1WithLeadingZero);\n\n    // Calculate the final answer\n    int answer = (countForNum2 - countForNum1 + MOD) % MOD;\n\n    // If num1 itself is within the range, include it in the count\n    if (n1 >= n2) {\n        int sumOfDigits = 0;\n        for (int i = 0; num1[i]; i++) sumOfDigits += charToInt(num1[i]);\n        if (sumOfDigits >= min_sum && sumOfDigits <= max_sum) answer = (answer + 1) % MOD;\n    }\n\n    return answer;\n}"
}