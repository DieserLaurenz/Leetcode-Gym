{
    "status_code": 14,
    "lang": "c",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 5132000,
    "question_id": "2757",
    "elapsed_time": 3010,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708328042422,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1179619979",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\nint digitSum(int n) {\n    int sum = 0;\n    while (n > 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n\nint countGoodIntegersInRange(char *lower, char *upper, int minSum, int maxSum) {\n    long long lowerNum = atoll(lower);\n    long long upperNum = atoll(upper);\n    int count = 0;\n    for (long long i = lowerNum; i <= upperNum; ++i) {\n        int sum = digitSum(i);\n        if (sum >= minSum && sum <= maxSum) {\n            count = (count + 1) % MOD;\n        }\n    }\n    return count;\n}\n\nint count(char * num1, char * num2, int min_sum, int max_sum){\n    return countGoodIntegersInRange(num1, num2, min_sum, max_sum);\n}"
}