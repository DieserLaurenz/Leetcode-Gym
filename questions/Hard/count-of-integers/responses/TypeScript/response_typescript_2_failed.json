{
    "status_code": 15,
    "lang": "typescript",
    "run_success": false,
    "runtime_error": "",
    "full_runtime_error": "        if (!tight && dp[index][sum][tight] != -1) return dp[index][sum][tight];\n                                    ^\nTypeError: Cannot read properties of undefined (reading '0')\n    Line 6: Char 37 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)\n    Line 10: Char 20 in solution.ts (dfs)",
    "status_runtime": "N/A",
    "memory": 53352000,
    "question_id": "2757",
    "elapsed_time": 139,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708328597323,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1179627001",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "function count(num1: string, num2: string, min_sum: number, max_sum: number): number {\n    const MOD = 1e9 + 7;\n\n    function dfs(index: number, tight: number, sum: number, num: string, dp: number[][][]): number {\n        if (index == num.length) return sum >= min_sum && sum <= max_sum ? 1 : 0;\n        if (!tight && dp[index][sum][tight] != -1) return dp[index][sum][tight];\n        let ans = 0;\n        let limit = tight ? parseInt(num[index]) : 9;\n        for (let digit = 0; digit <= limit; digit++) {\n            ans += dfs(index + 1, tight && digit == limit ? 1 : 0, sum + digit, num, dp);\n            ans %= MOD;\n        }\n        if (!tight) dp[index][sum][tight] = ans;\n        return ans;\n    }\n\n    function solve(num: string): number {\n        let dp: number[][][] = Array.from({ length: num.length }, () => \n                                         Array.from({ length: max_sum + 1 }, () => \n                                                    Array(2).fill(-1)));\n        return dfs(0, 1, 0, num, dp);\n    }\n\n    let num2Ans = solve(num2);\n    let num1Minus1 = (BigInt(num1) - BigInt(1)).toString();\n    let num1Ans = num1Minus1 == \"0\" ? 0 : solve(num1Minus1);\n    return (num2Ans - num1Ans + MOD) % MOD;\n}"
}