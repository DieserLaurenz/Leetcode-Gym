{
    "status_code": 14,
    "lang": "typescript",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 81984000,
    "question_id": "2757",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708328499113,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1179625710",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "function count(num1: string, num2: string, min_sum: number, max_sum: number): number {\n    const MOD = 1e9 + 7;\n\n    function digitSum(n: string): number {\n        let sum = 0;\n        for (let char of n) {\n            sum += parseInt(char);\n        }\n        return sum;\n    }\n\n    function countGoodIntegers(start: number, end: number): number {\n        let count = 0;\n        for (let i = start; i <= end; i++) {\n            const sum = digitSum(i.toString());\n            if (sum >= min_sum && sum <= max_sum) {\n                count = (count + 1) % MOD;\n            }\n        }\n        return count;\n    }\n\n    const start = parseInt(num1);\n    const end = parseInt(num2);\n    return countGoodIntegers(start, end);\n}"
}