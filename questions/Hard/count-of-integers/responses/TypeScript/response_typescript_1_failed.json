{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56716000,
    "question_id": "2757",
    "elapsed_time": 329,
    "compare_result
    "code_output": "36",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708328555693,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1179626491",
    "input_formatted": "\"1\", \"12\", 1, 8",
    "input": "\"1\"\n\"12\"\n1\n8",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function count(num1: string, num2: string, min_sum: number, max_sum: number): number {\n  const MOD = 1e9 + 7;\n  \n  function digitSum(x: number): number {\n    let sum = 0;\n    while (x > 0) {\n      sum += x % 10;\n      x = Math.floor(x / 10);\n    }\n    return sum;\n  }\n\n  function countInRange(limit: string): number {\n    const dp: number[][][] = Array.from({ length: limit.length + 1 }, () =>\n      Array.from({ length: 2 }, () => Array(max_sum + 1).fill(0))\n    );\n\n    dp[0][0][0] = 1; // Initial condition\n\n    for (let i = 0; i < limit.length; i++) {\n      const digit = parseInt(limit[i]);\n\n      for (let tight = 0; tight <= 1; tight++) {\n        for (let sum = 0; sum <= max_sum; sum++) {\n          const maxDigit = tight === 1 ? digit : 9;\n\n          for (let d = 0; d <= maxDigit; d++) {\n            const newSum = sum + d;\n            if (newSum <= max_sum) {\n              dp[i + 1][tight && d === maxDigit ? 1 : 0][newSum] += dp[i][tight][sum];\n              dp[i + 1][tight && d === maxDigit ? 1 : 0][newSum] %= MOD;\n            }\n          }\n        }\n      }\n    }\n\n    let total = 0;\n    for (let sum = min_sum; sum <= max_sum; sum++) {\n      total += dp[limit.length][0][sum] + dp[limit.length][1][sum];\n      total %= MOD;\n    }\n\n    return total;\n  }\n\n  const low = BigInt(num1) - BigInt(1);\n  const high = BigInt(num2);\n\n  const totalHigh = countInRange(high.toString());\n  const totalLow = countInRange(low.toString());\n\n  return (totalHigh - totalLow + MOD) % MOD;\n}"
}