{
    "status_code": 14,
    "lang": "rust",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 2028000,
    "question_id": "2757",
    "elapsed_time": 2032,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708330021247,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1179644855",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count(num1: String, num2: String, min_sum: i32, max_sum: i32) -> i32 {\n        const MOD: i64 = 1_000_000_007;\n        let (mut dp, mut next_dp) = (vec![0; 401], vec![0; 401]);\n\n        let sum_digits = |mut x: i64| -> i32 {\n            let mut sum = 0;\n            while x > 0 {\n                sum += (x % 10) as i32;\n                x /= 10;\n            }\n            sum\n        };\n\n        let mut total = 0;\n\n        for x in num1.parse::<i64>().unwrap()..=num2.parse::<i64>().unwrap() {\n            let sum = sum_digits(x);\n            if sum >= min_sum && sum <= max_sum {\n                dp[sum as usize] += 1;\n                dp[sum as usize] %= MOD;\n                total += 1;\n                total %= MOD;\n            }\n        }\n\n        for sum in min_sum..=max_sum {\n            for x in 0..10 {\n                let new_sum = sum + x;\n                if new_sum <= max_sum {\n                    next_dp[new_sum as usize] += dp[sum as usize];\n                    next_dp[new_sum as usize] %= MOD;\n                }\n            }\n        }\n\n        total as i32\n    }\n}"
}