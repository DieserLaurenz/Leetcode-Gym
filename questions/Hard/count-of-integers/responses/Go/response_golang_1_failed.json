{
    "status_code": 15,
    "lang": "golang",
    "run_success": false,
    "runtime_error": "Line 26: panic: runtime error: index out of range [47] with length 47",
    "full_runtime_error": "panic: runtime error: index out of range [47] with length 47\nmain.count.func1(0x9?, 0x0?, 0x2e?, {0xc00009c140?, 0xa?})\nsolution.go, line 26\nmain.count.func1(0x8, 0x0, 0x26, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count.func1(0x7, 0x0, 0x1d, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count.func1(0x6, 0x0, 0x14, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count.func1(0x5, 0x0, 0xb, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count.func1(0x4, 0x0, 0x2, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count.func1(0x3, 0x0, 0x0, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count.func1(0x2, 0x0, 0x0, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count.func1(0x1, 0x0, 0x0, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count.func1(0x0, 0x1, 0x0, {0xc00009c140, 0xa})\nsolution.go, line 39\nmain.count({0xc00009c110, 0xa}, {0xc00009c140, 0xa}, 0x8, 0x2e)\nsolution.go, line 65\nmain.__helper__(...)\nsolution.go, line 71\nmain.main()\nsolution.go, line 132",
    "status_runtime": "N/A",
    "memory": 2084000,
    "question_id": "2757",
    "elapsed_time": 12,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708329510464,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1179638578",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "package main\n\nimport \"strconv\"\n\nfunc count(num1 string, num2 string, min_sum int, max_sum int) int {\n const mod = 1e9 + 7\n dp := make([][][]int, len(num2)+1)\n for i := range dp {\n  dp[i] = make([][]int, 2)\n  for j := range dp[i] {\n   dp[i][j] = make([]int, max_sum+1)\n   for k := range dp[i][j] {\n    dp[i][j][k] = -1\n   }\n  }\n }\n\n var dfs func(pos, tight, sum int, limit string) int\n dfs = func(pos, tight, sum int, limit string) int {\n  if pos == len(limit) {\n   if sum >= min_sum && sum <= max_sum {\n    return 1\n   }\n   return 0\n  }\n  if tight == 0 && dp[pos][tight][sum] != -1 {\n   return dp[pos][tight][sum]\n  }\n  up := 9\n  if tight == 1 {\n   up, _ = strconv.Atoi(string(limit[pos]))\n  }\n  ans := 0\n  for i := 0; i <= up; i++ {\n   newTight := tight\n   if i < up {\n    newTight = 0\n   }\n   ans += dfs(pos+1, newTight, sum+i, limit)\n   ans %= mod\n  }\n  if tight == 0 {\n   dp[pos][tight][sum] = ans\n  }\n  return ans\n }\n\n subtractOne := func(s string) string {\n  b := []byte(s)\n  for i := len(b) - 1; i >= 0; i-- {\n   if b[i] == '0' {\n    b[i] = '9'\n   } else {\n    b[i]--\n    break\n   }\n  }\n  if b[0] == '0' {\n   b = b[1:]\n  }\n  return string(b)\n }\n\n num1 = subtractOne(num1)\n return (dfs(0, 1, 0, num2) - dfs(0, 1, 0, num1) + mod) % mod\n}"
}