{
    "status_code": 10,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "261 ms",
    "memory": 38120000,
    "question_id": "2757",
    "elapsed_time": 306,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708329193501,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 615,
    "total_testcases": 615,
    "runtime_percentile": 100,
    "status_memory": "38.1 MB",
    "memory_percentile": 100,
    "pretty_lang": "Kotlin",
    "submission_id": "1179634609",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution {\n    private val mod = 1000000007\n\n    fun count(num1: String, num2: String, minSum: Int, maxSum: Int): Int {\n        fun dfs(idx: Int, tight: Int, sum: Int, dp: Array<Array<IntArray>>, digits: List<Int>): Int {\n            if (idx == -1) return if (sum in minSum..maxSum) 1 else 0\n            if (sum > maxSum) return 0\n            if (tight != -1 && dp[idx][tight][sum] != -1) return dp[idx][tight][sum]\n\n            val up = if (tight == 1) digits[idx] else 9\n            var ans = 0\n            for (d in 0..up) {\n                ans = (ans + dfs(idx - 1, if (tight == 1 && d == up) 1 else 0, sum + d, dp, digits)) % mod\n            }\n            if (tight != -1) dp[idx][tight][sum] = ans\n            return ans\n        }\n\n        fun solve(num: String): Int {\n            val digits = num.map { it - '0' }.reversed()\n            val n = digits.size\n            val dp = Array(n) { Array(2) { IntArray(maxSum + 1) { -1 } } }\n            return dfs(n - 1, 1, 0, dp, digits)\n        }\n\n        val num1Int = num1.toBigInteger() - BigInteger.ONE\n        val ans1 = solve(num1Int.toString())\n        val ans2 = solve(num2)\n        val ans = (ans2 - ans1 + mod) % mod\n        return ans.toInt()\n    }\n}"
}