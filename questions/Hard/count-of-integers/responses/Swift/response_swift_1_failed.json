{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15476000,
    "question_id": "2757",
    "elapsed_time": 5170,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708328986029,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179632043",
    "input_formatted": "\"1\", \"12\", 1, 8",
    "input": "\"1\"\n\"12\"\n1\n8",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func count(_ num1: String, _ num2: String, _ min_sum: Int, _ max_sum: Int) -> Int {\n        let mod = 1_000_000_007\n\n        func digitSum(_ x: Int) -> Int {\n            var sum = 0, x = x\n            while x > 0 {\n                sum += x % 10\n                x /= 10\n            }\n            return sum\n        }\n\n        func countGood(_ num: String) -> Int {\n            let n = Int(num)!\n            var count = 0\n            for i in 1...n {\n                let sum = digitSum(i)\n                if sum >= min_sum && sum <= max_sum {\n                    count = (count + 1) % mod\n                }\n            }\n            return count\n        }\n\n        let count1 = countGood(num1)\n        let count2 = countGood(num2)\n        let total = (count2 - count1 + mod) % mod\n        var adjustment = 0\n        for i in stride(from: Int(num1)! - 1, through: 0, by: -1) {\n            let sum = digitSum(i)\n            if sum >= min_sum && sum <= max_sum {\n                adjustment = (adjustment + 1) % mod\n            }\n        }\n        return (total + adjustment) % mod\n    }\n}"
}