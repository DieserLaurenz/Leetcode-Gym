{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18688000,
    "question_id": "2757",
    "elapsed_time": 688,
    "compare_result
    "code_output": "883045975",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708328941815,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179631523",
    "input_formatted": "\"4179205230\", \"7748704426\", 8, 46",
    "input": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    private let mod = 1000000007\n\n    func count(_ num1: String, _ num2: String, _ min_sum: Int, _ max_sum: Int) -> Int {\n        func countLessOrEqual(_ num: String, _ sum: Int) -> Int {\n            var dp = Array(repeating: Array(repeating: -1, count: sum + 1), count: num.count + 1)\n            func dfs(_ pos: Int, _ tight: Bool, _ currentSum: Int) -> Int {\n                if currentSum > sum { return 0 }\n                if pos == num.count { return 1 }\n                if !tight && dp[pos][currentSum] != -1 { return dp[pos][currentSum] }\n                let limit = tight ? Int(String(num[num.index(num.startIndex, offsetBy: pos)]))! : 9\n                var res = 0\n                for digit in 0...limit {\n                    res += dfs(pos + 1, tight && digit == limit, currentSum + digit)\n                    res %= mod\n                }\n                if !tight { dp[pos][currentSum] = res }\n                return res\n            }\n            return dfs(0, true, 0)\n        }\n        \n        func digitSum(_ n: String) -> Int {\n            n.reduce(0) { $0 + Int(String($1))! }\n        }\n        \n        let start = max(0, min_sum - digitSum(num1))\n        let end = max_sum - digitSum(num1) + 1\n        let totalLessThanNum2 = countLessOrEqual(num2, max_sum)\n        let totalLessThanNum1 = countLessOrEqual(String(Int(num1)! - 1), max_sum)\n        return (totalLessThanNum2 - totalLessThanNum1 + mod) % mod\n    }\n}"
}