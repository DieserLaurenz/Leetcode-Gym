{
    "status_code": 12,
    "lang": "erlang",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 983508000,
    "question_id": "2757",
    "elapsed_time": 1001,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708351205582,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1179907898",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "-spec count(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary(), Min_sum :: integer(), Max_sum :: integer()) -> integer().\ncount(Num1, Num2, Min_sum, Max_sum) ->\n    N1 = binary_to_integer(Num1),\n    N2 = binary_to_integer(Num2),\n    count_good_ints(N1, N2, Min_sum, Max_sum, 0).\n\ncount_good_ints(N1, N2, Min_sum, Max_sum, Acc) when N1 > N2 ->\n    Acc;\ncount_good_ints(N, N2, Min_sum, Max_sum, Acc) ->\n    Sum = digit_sum(N),\n    if\n        Min_sum =< Sum, Sum =< Max_sum ->\n            count_good_ints(N + 1, N2, Min_sum, Max_sum, Acc + 1);\n        true ->\n            count_good_ints(N + 1, N2, Min_sum, Max_sum, Acc)\n    end rem 1000000007.\n\ndigit_sum(0) -> 0;\ndigit_sum(X) -> X rem 10 + digit_sum(X div 10)."
}