{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 212752000,
    "question_id": "2757",
    "elapsed_time": 1279,
    "compare_result
    "code_output": "86569494",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708329752545,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 208,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1179641608",
    "input_formatted": "\"4179205230\", \"7748704426\", 8, 46",
    "input": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} num1\n# @param {String} num2\n# @param {Integer} min_sum\n# @param {Integer} max_sum\n# @return {Integer}\ndef count(num1, num2, min_sum, max_sum)\n  mod = 10**9 + 7\n\n  def digit_sum_dp(dp, num, max_sum)\n    n = num.size\n    sum = 0\n    count = 0\n\n    (0...n).each do |i|\n      digit = num[i].to_i\n\n      (0...digit).each do |d|\n        (0..max_sum).each do |s|\n          count += dp[n-i-1][s] if s + d <= max_sum\n        end\n      end\n\n      sum += digit\n      break if sum > max_sum\n    end\n\n    count += 1 if sum <= max_sum && sum >= 0\n    count\n  end\n\n  def prepare_dp(max_len, max_sum)\n    dp = Array.new(max_len+1) { Array.new(max_sum+1, 0) }\n    dp[0][0] = 1\n\n    (1..max_len).each do |i|\n      (0..max_sum).each do |j|\n        (0..9).each do |d|\n          dp[i][j] += dp[i-1][j-d] if j-d >= 0\n        end\n      end\n    end\n\n    dp\n  end\n\n  max_len = [num1.size, num2.size].max\n  dp = prepare_dp(max_len, max_sum)\n\n  count2 = digit_sum_dp(dp, num2, max_sum)\n  count1 = digit_sum_dp(dp, (num1.to_i - 1).to_s, max_sum)\n\n  (count2 - count1) % mod\nend"
}