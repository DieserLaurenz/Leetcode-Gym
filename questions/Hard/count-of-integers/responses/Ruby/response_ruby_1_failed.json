{
    "status_code": 15,
    "lang": "ruby",
    "run_success": false,
    "runtime_error": "Line 11: no implicit conversion of true into Integer (TypeError) in solution.rb (dfs)",
    "full_runtime_error": "Line 11: no implicit conversion of true into Integer (TypeError) in solution.rb (dfs)\n        return dp[pos][tight][sum] if !dp[pos][tight][sum].nil? && !tight\n                                               ^^^^^\nLine 25 in solution.rb (solve)\nLine 30 in solution.rb (count)\nLine 39 in solution.rb (__driver_helper__)\nLine 58 in solution.rb (block in _driver)\nLine 49 in solution.rb (each)\nLine 49 in solution.rb (each_slice)\nLine 49 in solution.rb (_driver)\nLine 70 in solution.rb (<main>)",
    "status_runtime": "N/A",
    "memory": 211264000,
    "question_id": "2757",
    "elapsed_time": 265,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708329711548,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1179641122",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "# @param {String} num1\n# @param {String} num2\n# @param {Integer} min_sum\n# @param {Integer} max_sum\n# @return {Integer}\ndef count(num1, num2, min_sum, max_sum)\n    mod = 10**9 + 7\n\n    def dfs(limits, pos, tight, sum, dp)\n        return 1 if pos == limits.size\n        return dp[pos][tight][sum] if !dp[pos][tight][sum].nil? && !tight\n\n        limit = tight ? limits[pos] : 9\n        res = 0\n        (0..limit).each do |digit|\n            next_tight = tight && digit == limit\n            res += dfs(limits, pos + 1, next_tight, sum + digit, dp) if sum + digit <= max_sum\n        end\n        dp[pos][tight][sum] = res unless tight\n        res\n    end\n\n    def solve(num, min_sum, dp)\n        limits = num.to_s.chars.map(&:to_i)\n        dfs(limits, 0, true, 0, dp) - 1\n    end\n\n    dp1 = Array.new(num1.size) { Array.new(2) { Array.new(max_sum + 1, nil) } }\n    dp2 = Array.new(num2.size) { Array.new(2) { Array.new(max_sum + 1, nil) } }\n    total = solve(num2, min_sum, dp2)\n    total -= solve(num1, min_sum, dp1) unless num1.to_i == 0\n\n    (total % mod + mod) % mod\nend"
}