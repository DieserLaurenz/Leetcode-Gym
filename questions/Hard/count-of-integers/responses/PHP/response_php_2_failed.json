{
    "status_code": 14,
    "lang": "php",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 19892000,
    "question_id": "2757",
    "elapsed_time": 5277,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708328872837,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1179630554",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * Calculates the sum of digits of a given number represented as a string.\n     *\n     * @param String $num The number as a string.\n     * @return Integer The sum of digits.\n     */\n    private function digitSum($num) {\n        $sum = 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n            $sum += $num[$i];\n        }\n        return $sum;\n    }\n\n    /**\n     * Checks if the digit sum of a number within the given range matches the criteria.\n     *\n     * @param String $num1 Starting number as a string.\n     * @param String $num2 Ending number as a string.\n     * @param Integer $min_sum Minimum sum of digits.\n     * @param Integer $max_sum Maximum sum of digits.\n     * @return Integer The count of numbers meeting the criteria.\n     */\n    function count($num1, $num2, $min_sum, $max_sum) {\n        $MOD = 1000000007;\n\n        $count = 0;\n        $start = max(1, intval($num1));\n        $end = intval($num2);\n\n        // Precompute digit sums for possible sums to optimize the loop\n        $digitSums = [];\n        for ($i = 0; $i <= 400; $i++) {\n            $digitSums[$i] = $this->digitSum((string)$i);\n        }\n\n        for ($i = $start; $i <= $end; $i++) {\n            $sum = 0;\n            $temp = $i;\n            while ($temp > 0) {\n                $sum += $temp % 10;\n                $temp = intdiv($temp, 10);\n            }\n\n            if ($sum >= $min_sum && $sum <= $max_sum) {\n                $count = ($count + 1) % $MOD;\n            }\n        }\n\n        return $count;\n    }\n}"
}