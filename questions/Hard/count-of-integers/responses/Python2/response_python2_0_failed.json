{
    "status_code": 15,
    "lang": "python",
    "run_success": false,
    "runtime_error": "Line 10: MemoryError",
    "full_runtime_error": "MemoryError\n    for num in range(1, upper_bound + 1):\nLine 10 in count_good_numbers (Solution.py)\n    total_count = count_good_numbers(num2) - count_good_numbers(num1 - 1)\nLine 17 in count (Solution.py)\n    ret = Solution().count(param_1, param_2, param_3, param_4)\nLine 52 in _driver (Solution.py)\n    _driver()\nLine 62 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 11700000,
    "question_id": "2757",
    "elapsed_time": 63,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708869841338,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185820077",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def count(self, num1, num2, min_sum, max_sum):\n        MOD = 10**9 + 7\n\n        def digit_sum(n):\n            return sum(int(digit) for digit in str(n))\n\n        def count_good_numbers(upper_bound):\n            count = 0\n            for num in range(1, upper_bound + 1):\n                if min_sum <= digit_sum(num) <= max_sum:\n                    count += 1\n            return count\n\n        num1 = int(num1)\n        num2 = int(num2)\n        total_count = count_good_numbers(num2) - count_good_numbers(num1 - 1)\n        return total_count % MOD"
}