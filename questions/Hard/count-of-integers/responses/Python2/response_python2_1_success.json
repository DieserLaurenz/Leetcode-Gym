{
    "status_code": 10,
    "lang": "python",
    "run_success": true,
    "status_runtime": "419 ms",
    "memory": 12328000,
    "question_id": "2757",
    "elapsed_time": 451,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708869873998,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 615,
    "total_testcases": 615,
    "runtime_percentile": 100,
    "status_memory": "12.3 MB",
    "memory_percentile": 75.0,
    "pretty_lang": "Python",
    "submission_id": "1185820449",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def count(self, num1, num2, min_sum, max_sum):\n        MOD = 10**9 + 7\n\n        def dp(x, tight, sum_so_far, memo):\n            if x == len(str_num): return min_sum <= sum_so_far <= max_sum\n            if not tight and (x, sum_so_far) in memo: return memo[(x, sum_so_far)]\n            end = int(str_num[x]) if tight else 9\n            total = 0\n            for digit in range(end + 1):\n                total += dp(x + 1, tight and digit == end, sum_so_far + digit, memo)\n            if not tight: memo[(x, sum_so_far)] = total\n            return total\n\n        def count_up_to(num):\n            global str_num\n            str_num = str(num)\n            memo = {}\n            return dp(0, True, 0, memo)\n\n        num1, num2 = int(num1), int(num2)\n        return (count_up_to(num2) - count_up_to(num1 - 1)) % MOD"
}