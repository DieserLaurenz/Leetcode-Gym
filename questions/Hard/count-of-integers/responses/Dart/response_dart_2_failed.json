{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 14: Exhausted heap space, trying to allocate 61989635440 bytes.",
    "full_runtime_error": "Line 14: Exhausted heap space, trying to allocate 61989635440 bytes.\nOut of Memory\n#0      new _List (dart:core-patch/array.dart)\n#1      new _List.filled (dart:core-patch/array.dart:97:20)\n#2      Solution._preparePrefixSum (file:///solution.dart:14:32)\n#3      Solution.count (file:///solution.dart:24:27)\n#4      main (file:///solution.dart:84:30)\n#5      _FutureListener.handleValue (dart:async/future_impl.dart:162:18)\n#6      Future._propagateToListeners.handleValueCallback (dart:async/future_impl.dart:846:45)\n#7      Future._propagateToListeners (dart:async/future_impl.dart:875:13)\n#8      Future._complete (dart:async/future_impl.dart:638:7)\n#9      _StreamIterator._onData (dart:async/stream_impl.dart:1034:20)\n#10     _RootZone.runUnaryGuarded (dart:async/zone.dart:1594:10)\n#11     _BufferingStreamSubscription._sendData (dart:async/stream_impl.dart:339:11)\n#12     _BufferingStreamSubscription._add (dart:async/stream_impl.dart:271:7)\n#13     _SinkTransformerStreamSubscription._add (dart:async/stream_transformers.dart:63:11)\n#14     _EventSinkWrapper.add (dart:async/stream_transformers.dart:13:11)\n#15     _StringAdapterSink.add (dart:convert/string_conversion.dart:228:11)\n#16     _LineSplitterSink._addLines (dart:convert/line_splitter.dart:164:13)\n#17     _LineSplitterSink.addSlice (dart:convert/line_splitter.dart:131:7)\n#18     StringConversionSink.add (dart:convert/string_conversion.dart:39:5)\n#19     _SinkTransformerStreamSubscription._handleData (dart:async/stream_transformers.dart:111:24)\n#20     _RootZone.runUnaryGuarded (dart:async/zone.dart:1594:10)\n#21     _BufferingStreamSubscription._sendData (dart:async/stream_impl.dart:339:11)\n#22     _BufferingStreamSubscription._add (dart:async/stream_impl.dart:271:7)\n#23     _SinkTransformerStreamSubscription._add (dart:async/stream_transformers.dart:63:11)\n#24     _EventSinkWrapper.add (dart:async/stream_transformers.dart:13:11)\n#25     _StringAdapterSink.add (dart:convert/string_conversion.dart:228:11)\n#26     _StringAdapterSink.addSlice (dart:convert/string_conversion.dart:233:7)\n#27     _Utf8ConversionSink.addSlice (dart:convert/string_conversion.dart:307:20)\n#28     _Utf8ConversionSink.add (dart:convert/string_conversion.dart:300:5)\n#29     _ConverterStreamEventSink.add (dart:convert/chunked_conversion.dart:69:18)\n#30     _SinkTransformerStreamSubscription._handleData (dart:async/stream_transformers.dart:111:24)\n#31     _RootZone.runUnaryGuarded (dart:async/zone.dart:1594:10)\n#32     _BufferingStreamSubscription._sendData (dart:async/stream_impl.dart:339:11)\n#33     _BufferingStreamSubscription._add (dart:async/stream_impl.dart:271:7)\n#34     _SyncStreamControllerDispatch._sendData (dart:async/stream_controller.dart:784:19)\n#35     _StreamController._add (dart:async/stream_controller.dart:658:7)\n#36     _StreamController.add (dart:async/stream_controller.dart:606:5)\n#37     _FileStream._readBlock.<anonymous closure> (dart:io/file_impl.dart:125:21)\n#38     _FutureListener.handleValue (dart:async/future_impl.dart:162:18)\n#39     Future._propagateToListeners.handleValueCallback (dart:async/future_impl.dart:846:45)\n#40     Future._propagateToListeners (dart:async/future_impl.dart:875:13)\n#41     Future._completeWithValue (dart:async/future_impl.dart:647:5)\n#42     Future._asyncCompleteWithValue.<anonymous closure> (dart:async/future_impl.dart:721:7)\n#43     _microtaskLoop (dart:async/schedule_microtask.dart:40:21)\n#44     _startMicrotaskLoop (dart:async/schedule_microtask.dart:49:5)\n#45     _runPendingImmediateCallback (dart:isolate-patch/isolate_patch.dart:118:13)\n#46     _RawReceivePort._handleMessage (dart:isolate-patch/isolate_patch.dart:185:5)",
    "status_runtime": "N/A",
    "memory": 147256000,
    "question_id": "2757",
    "elapsed_time": 489,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"4179205230\"\n\"7748704426\"\n8\n46",
    "expected_output": "883045899",
    "task_finish_time": 1708329364494,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1179636792",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  static final int mod = 1000000007;\n\n  int _digitSum(int n) {\n    int sum = 0;\n    while (n > 0) {\n      sum += n % 10;\n      n ~/= 10;\n    }\n    return sum;\n  }\n\n  List<int> _preparePrefixSum(int n) {\n    List<int> prefixSum = List.filled(n + 1, 0);\n    for (int i = 1; i <= n; i++) {\n      prefixSum[i] = (prefixSum[i - 1] + _digitSum(i)) % mod;\n    }\n    return prefixSum;\n  }\n\n  int count(String num1, String num2, int minSum, int maxSum) {\n    int n2 = int.parse(num2);\n    int n1 = int.parse(num1) - 1; // Inclusive for num2, exclusive for num1\n    List<int> prefixSum = _preparePrefixSum(n2);\n    int totalForNum2 = 0, totalForNum1 = 0;\n\n    for (int i = 0; i <= n2; i++) {\n      if (_digitSum(i) >= minSum && _digitSum(i) <= maxSum) {\n        totalForNum2 = (totalForNum2 + 1) % mod;\n      }\n    }\n\n    for (int i = 0; i <= n1; i++) {\n      if (_digitSum(i) >= minSum && _digitSum(i) <= maxSum) {\n        totalForNum1 = (totalForNum1 + 1) % mod;\n      }\n    }\n\n    return (totalForNum2 - totalForNum1 + mod) % mod;\n  }\n}"
}