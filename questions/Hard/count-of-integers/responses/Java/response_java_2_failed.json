{
    "status_code": 15,
    "lang": "java",
    "run_success": false,
    "runtime_error": "Line 15: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 401",
    "full_runtime_error": "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 401\n  at line 15, Solution.count\n  at line 19, Solution.count\n  at line 42, Solution.count\n  at line 54, __DriverSolution__.__helper__\n  at line 93, __Driver__.main",
    "status_runtime": "N/A",
    "memory": 41076000,
    "question_id": "2757",
    "elapsed_time": 158,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708319754622,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1179497653",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    static final int MOD = 1000000007;\n    static final int MAX_DIGIT_SUM = 400; // maximum possible sum of digits as per the constraints\n\n    // Helper method to compute the sum of digits of a number represented as a string\n    private int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) sum += (c - '0');\n        return sum;\n    }\n\n    // Dynamic programming method to count numbers with sum of digits in a given range\n    private int count(String num, int N, int S, int[][] dp) {\n        if (N == 0) return S == 0 ? 1 : 0;\n        if (dp[N][S] != -1) return dp[N][S];\n        int limit = N == num.length() ? num.charAt(num.length() - N) - '0' : 9;\n        int ans = 0;\n        for (int d = 0; d <= limit; d++) {\n            ans = (ans + count(num, N - 1, S - d, dp)) % MOD;\n        }\n        if (N < num.length()) {\n            for (int d = limit + 1; d <= 9; d++) {\n                ans = (ans + count(num, N - 1, S - d, dp)) % MOD;\n            }\n        }\n        dp[N][S] = ans;\n        return ans;\n    }\n\n    // Main method to find the count of good numbers within the given constraints\n    public int count(String num1, String num2, int min_sum, int max_sum) {\n        int len = num2.length();\n        int total = 0;\n        int[][] dpLower = new int[len + 1][MAX_DIGIT_SUM + 1];\n        int[][] dpUpper = new int[len + 1][MAX_DIGIT_SUM + 1];\n        for (int i = 0; i <= len; i++) {\n            for (int j = 0; j <= MAX_DIGIT_SUM; j++) {\n                dpLower[i][j] = dpUpper[i][j] = -1;\n            }\n        }\n        for (int sum = min_sum; sum <= max_sum; sum++) {\n            total = (total + count(num2, len, sum, dpUpper) - count(num1, len, sum, dpLower) + MOD) % MOD;\n            if (digitSum(num1) == sum) total = (total + 1) % MOD; // If num1 itself is a good number, add it back\n        }\n        return total;\n    }\n}"
}