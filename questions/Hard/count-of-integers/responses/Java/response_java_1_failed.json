{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 41040000,
    "question_id": "2757",
    "elapsed_time": 196,
    "compare_result
    "code_output": "877",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708319705571,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1179496901",
    "input_formatted": "\"1\", \"12\", 1, 8",
    "input": "\"1\"\n\"12\"\n1\n8",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    private static final int MOD = 1000000007;\n\n    private int sumOfDigits(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) sum += c - '0';\n        return sum;\n    }\n\n    private int dfs(char[] num, int n, int pos, boolean limit, int sum, int[][] dp) {\n        if (pos == n) return sum;\n        if (!limit && dp[pos][sum] != -1) return dp[pos][sum];\n        int up = limit ? num[pos] - '0' : 9;\n        int ans = 0;\n        for (int i = 0; i <= up; i++) {\n            ans += dfs(num, n, pos + 1, limit && i == up, (sum + i) % MOD, dp);\n            ans %= MOD;\n        }\n        if (!limit) dp[pos][sum] = ans;\n        return ans;\n    }\n\n    private int countGood(String num, int minSum, int maxSum) {\n        char[] digits = num.toCharArray();\n        int n = digits.length;\n        int[][] dp = new int[n][maxSum + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= maxSum; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        int total = 0;\n        for (int i = minSum; i <= maxSum; i++) {\n            total = (total + dfs(digits, n, 0, true, i, dp)) % MOD;\n        }\n        return total;\n    }\n\n    public int count(String num1, String num2, int min_sum, int max_sum) {\n        int from = Integer.parseInt(num1);\n        int to = Integer.parseInt(num2);\n        int countTo = countGood(num2, min_sum, max_sum);\n        int countFromMinusOne = from == 1 ? 0 : countGood(String.valueOf(from - 1), min_sum, max_sum);\n        int result = (countTo - countFromMinusOne + MOD) % MOD;\n        if (sumOfDigits(num1) >= min_sum && sumOfDigits(num1) <= max_sum) result = (result + 1) % MOD;\n        return result;\n    }\n}"
}