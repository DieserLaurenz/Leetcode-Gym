{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45208000,
    "display_runtime": "14",
    "question_id": "2757",
    "elapsed_time": 208,
    "compare_result
    "code_output": "44",
    "std_output": "",
    "last_testcase": "\"1\"\n\"12\"\n1\n8",
    "expected_output": "11",
    "task_finish_time": 1708319664827,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 615,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1179496286",
    "input_formatted": "\"1\", \"12\", 1, 8",
    "input": "\"1\"\n\"12\"\n1\n8",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    private static final int MOD = 1000000007;\n\n    public int count(String num1, String num2, int min_sum, int max_sum) {\n        return (findCount(num2, max_sum) - findCount(num1, min_sum - 1) + MOD) % MOD;\n    }\n\n    private int findCount(String num, int limit) {\n        int[][][] dp = new int[num.length()][2][limit + 1];\n        for (int i = 0; i < num.length(); i++) {\n            for (int j = 0; j < 2; j++) {\n                for (int k = 0; k <= limit; k++) {\n                    dp[i][j][k] = -1;\n                }\n            }\n        }\n        return dfs(num, 0, 0, 0, limit, dp);\n    }\n\n    private int dfs(String num, int pos, int tight, int sum, int limit, int[][][] dp) {\n        if (sum > limit) return 0;\n        if (pos == num.length()) return 1;\n        if (dp[pos][tight][sum] != -1) return dp[pos][tight][sum];\n        int res = 0;\n        int end = tight == 1 ? num.charAt(pos) - '0' : 9;\n        for (int i = 0; i <= end; i++) {\n            res = (res + dfs(num, pos + 1, tight == 1 && i == end ? 1 : 0, sum + i, limit, dp)) % MOD;\n        }\n        dp[pos][tight][sum] = res;\n        return res;\n    }\n}"
}