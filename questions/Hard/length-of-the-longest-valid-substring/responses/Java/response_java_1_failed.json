{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45384000,
    "question_id": "2884",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"leetcode\"\n[\"de\",\"le\",\"e\"]",
    "expected_output": "4",
    "task_finish_time": 1708514991789,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 457,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181924174",
    "input_formatted": "\"leetcode\", [\"de\",\"le\",\"e\"]",
    "input": "\"leetcode\"\n[\"de\",\"le\",\"e\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public int longestValidSubstring(String word, List<String> forbidden) {\n        int n = word.length();\n        int maxLen = 0;\n        int start = 0;\n        \n        while (start < n) {\n            boolean invalidFound = false;\n            int end = n;\n            \n            while (start < end) {\n                String sub = word.substring(start, end);\n                for (String forb : forbidden) {\n                    if (sub.contains(forb)) {\n                        end -= forb.length();\n                        invalidFound = true;\n                        break;\n                    }\n                }\n                if (!invalidFound) {\n                    maxLen = Math.max(maxLen, sub.length());\n                    break;\n                }\n                invalidFound = false;\n            }\n            start++;\n        }\n        return maxLen;\n    }\n}"
}