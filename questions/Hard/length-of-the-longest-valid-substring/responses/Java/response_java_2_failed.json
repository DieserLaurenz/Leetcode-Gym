{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 46996000,
    "question_id": "2884",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708515027554,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 453,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181924563",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.List;\n\nclass Solution {\n    public int longestValidSubstring(String word, List<String> forbidden) {\n        int maxLen = 0;\n        int[] dp = new int[word.length() + 1];\n\n        for (int i = 1; i <= word.length(); i++) {\n            dp[i] = dp[i - 1] + 1;\n            for (String forb : forbidden) {\n                if (i >= forb.length() && word.substring(i - forb.length(), i).equals(forb)) {\n                    dp[i] = 0;\n                }\n            }\n            maxLen = Math.max(maxLen, dp[i]);\n        }\n\n        // Calculate maximum length considering splits\n        int tempMax = 0;\n        for (int i = 1; i <= word.length(); i++) {\n            tempMax = Math.max(tempMax, dp[i]);\n            if (dp[i] == 0) tempMax = 0; // Reset on invalid substring\n            maxLen = Math.max(maxLen, tempMax);\n        }\n\n        return maxLen;\n    }\n}"
}