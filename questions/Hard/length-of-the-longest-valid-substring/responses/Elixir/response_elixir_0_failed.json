{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (Protocol.UndefinedError) protocol Enumerable not implemented for \"cbaaaabc\" of type BitString",
    "full_runtime_error": "Line 5: ** (Protocol.UndefinedError) protocol Enumerable not implemented for \"cbaaaabc\" of type BitString\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3\n    (elixir 1.15.7) lib/enum.ex:4387: Enum.reduce/3\n    solution.ex:5: Solution.longest_valid_substring/2\n    solution.ex:32: Driver.consume_test_cases/2\n    solution.ex:18: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 75684000,
    "question_id": "2884",
    "elapsed_time": 488,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708525257182,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182047502",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec longest_valid_substring(word :: String.t, forbidden :: [String.t]) :: integer\n  def longest_valid_substring(word, forbidden) do\n    word\n    |> Enum.reduce({0, 0}, fn char, {max_len, current_len} ->\n      new_word = word |> String.slice(-current_len-1..-1) |> Kernel.<>(<<char::utf8>>)\n      cond do\n        Enum.any?(forbidden, &String.contains?(new_word, &1)) -> {max_len, 0}\n        true -> {max(max_len, current_len + 1), current_len + 1}\n      end\n    end)\n    |> elem(0)\n  end\nend"
}