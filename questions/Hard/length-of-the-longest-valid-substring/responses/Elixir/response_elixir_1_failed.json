{
    "status_code": 14,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 81440000,
    "question_id": "2884",
    "elapsed_time": 6025,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"aacaabcacbababccbabacaabacbbcabacabbccbccbcbacacabaccbcbacccacaacaababcbacbbbcccbbbbacbcccbccaacbabcbcabccbbcaababbabcacbaccbcaaacaaabbcbccaccacbbabbabbacbbcccbcbcbbaaabaaacacacccacccacbbccbbbccaacbaacacbbaacbcbacaaabbaabccbbabacabcbcccaabcbaaccbccacbcacbcbaccacbabbcacabbcbbcaaacaccbbabaacabccababbcabbbacccccacbcaabababbabaaaccaabcaabcacbbaaccbbbcbcbbabbcabcaacccaaabaaccabacbcbacbacccaabcbacbbbbbacccabbcccbcaabaccabbbacaabbccacaababbccbcabbabbbacacbccbbbbcabbbabacacabbcabbaabccccacaacbccbbabccabcbaccababcbacbaabbcacccabbcccacbbcacbaabaabbbbaacbcacbcacbcaccacccbbaaacbcacabacbccbbbbcbbaacacaaabcbbcbacacbabbabccbaabbabbbacbaabaabaabbcabcaaacaabbcbabccababacacaabbbaccbabaaacabcaabacccccbbcbbabbcbaaccacbbbccaabb\"\n[\"acaabaca\",\"accabccc\",\"bcacabacbc\",\"acbccbb\",\"ccaabcaab\",\"acbcaccacc\",\"acaaaaa\",\"cacabacb\",\"bcbcbbab\",\"caabbababb\",\"ccacccbb\",\"cababcbac\",\"abcccac\",\"baccccbcbb\",\"acbbaac\",\"abaacabcc\",\"caccbbab\",\"aacaababc\",\"babbbbcbc\",\"aacbccabab\",\"abaabbbbaa\",\"bbacacaa\",\"baaabcbca\",\"babbbaca\",\"cccccacbca\",\"bccbaaaa\",\"bbacaabbc\",\"cbcbcbb\",\"caaabbaab\",\"accaabcaa\",\"baaabab\",\"accccbaa\",\"caaacaabb\",\"cbbaacb\",\"babbcba\",\"abbcbcc\",\"ccaaabaa\",\"cbaababb\",\"cabbaabc\",\"bcabbaab\",\"bbabccbaab\",\"cccabbc\",\"abaaacabc\",\"bcbacbacc\",\"caabcba\",\"baabbcabc\",\"acbcaab\",\"cacaaba\",\"bbaacac\",\"cbcbbbbcb\",\"bccaacb\",\"acbccbbb\",\"bbcaaac\",\"acbaabb\",\"caabcabcbb\",\"abccccaca\",\"aabbaabc\",\"bcabbbac\",\"abcbaac\",\"bbccabcaab\",\"abcabbcbb\",\"baccbcaa\",\"abaabcbc\",\"cbccbba\",\"cbcbcabab\",\"cccaabcbaa\",\"abbcacacba\",\"baccaab\",\"baccaacc\",\"cbacabaabc\",\"ccacaab\",\"accbaaabbc\",\"bcacbab\",\"cccaaaa\",\"bccbbcb\",\"aaccacac\",\"cbcaaab\",\"bbcacbaa\",\"acaabacaa\",\"aabcbacbb\",\"cbabaaa\",\"abbcbabc\",\"abcbacb\",\"bbaabcbccb\",\"baccbcbacc\",\"bacbacc\",\"aabbaca\",\"bbacbcb\",\"bbacbaaba\",\"cabbabbba\",\"caabccbca\",\"cacbbccb\",\"caabacbbca\",\"bccbbabab\",\"abacabcb\",\"cbbaacaca\",\"bcaacbcabb\",\"acbbacc\",\"ccaacbab\",\"ccabbccc\"]",
    "expected_output": "41",
    "task_finish_time": 1708525304195,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 680,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182048104",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec longest_valid_substring(word :: String.t, forbidden :: [String.t]) :: integer\n  def longest_valid_substring(word, forbidden) do\n    0..String.length(word) - 1\n    |> Enum.reduce({0, 0}, fn _, acc ->\n      {global_max, current_max} = acc\n      new_max = find_max_valid_substring_length(word, forbidden, current_max)\n      if new_max > global_max, do: {new_max, new_max}, else: acc\n    end)\n    |> elem(0)\n  end\n\n  defp find_max_valid_substring_length(word, forbidden, current_max) do\n    0..String.length(word)-1\n    |> Enum.reduce_while({0, 0}, fn index, {max_len, start_index} ->\n      substring = String.slice(word, start_index, index - start_index + 1)\n      if Enum.any?(forbidden, &String.contains?(substring, &1)) do\n        {:cont, {max_len, start_index + 1}}\n      else\n        new_max = max(max_len, String.length(substring))\n        {:cont, {new_max, start_index}}\n      end\n    end)\n    |> elem(0)\n    |> max(current_max)\n  end\nend"
}