{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5360000,
    "question_id": "2884",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708515134663,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 342,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1181925721",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n\nint longestValidSubstring(char * word, char ** forbidden, int forbiddenSize) {\n    int wordLen = strlen(word);\n    int maxLen = 0;\n\n    for (int start = 0; start < wordLen; ++start) {\n        for (int end = start; end < wordLen; ++end) {\n            int len = end - start + 1;\n            int isValid = 1;\n\n            for (int f = 0; f < forbiddenSize; ++f) {\n                if (strstr(word + start, forbidden[f]) == word + start && strlen(forbidden[f]) <= len) {\n                    isValid = 0;\n                    break;\n                }\n            }\n\n            if (isValid) {\n                int currentLen = end - start + 1;\n                if (currentLen > maxLen) {\n                    maxLen = currentLen;\n                }\n            }\n        }\n    }\n    \n    return maxLen;\n}"
}