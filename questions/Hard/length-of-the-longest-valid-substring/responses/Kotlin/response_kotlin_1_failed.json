{
    "status_code": 14,
    "lang": "kotlin",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 38312000,
    "question_id": "2884",
    "elapsed_time": 5003,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"cbcaccaccccacabcbbbcbcbbcacacbabacbcacbaaaccacccacccccccabcbacbcbcacbbaaababcaaacbaaccbcccabccababcbbccaaabccbbbacbaacbccabaabbcccbbcbcccabaccabbabccccaacabacbcacbccbcabbcbabccbbbbabbbbaacababbbbbcaaabbabcbbaccbbacaaaccccabaabbbabaabacccccacabcbbcaacaacbacaaacabcbabcbbbcbbaacbbbabcaccbbcbcccabbcbbabccacabbaaabcacacacbccacacacabcabbbbabaaacaccbcbaacccbaccbbbbbbcbbbbaacccabcabbcbbacccabacbbaacbaacbabaccbacaabacaabbbcbccbbaaccababcabcbccccbaacabcbbaabccabbbaacabcaccbccbcacbbcbbacaacaaacacbbaccbbbbcabbcbbaacbccacbacaccbbaacaccbcaaabaacbbccbbccacbcaaccbbbccbabaabbcbccbcbbbbbbbaaccaabbbbacabbbccccbcaccaacbbabbaacbccaaacaacacbccbcabacbbaabacaaccbacabccabccababbcacbbbccbacabcbacabacbbabbbbbcabbaacbbbabbcacbabcbbabccacaaaabaaaabbcbbccaaaaabcbbccaccaacbbcbabbbaccbcbbabcccbacabccbbbcbcbababbbcabbbcacacaacbacaabacaccbaaccccccbbabbbccbbbaacbaaacbccaccaabaaaaaaabbbcbcbabbacbaabbbbcabcacacacbaab\"\n[\"cbcbcac\",\"cacacac\",\"cacabbbbbc\",\"abbcbccbc\",\"aaacaac\",\"ccbabaca\",\"aaacbbcca\",\"baacbbbab\",\"cccbaca\",\"ababbcb\",\"aabcbab\",\"bbabbaba\",\"aaacacc\",\"aabaaaa\",\"accabbabc\",\"acabbbabb\",\"bbbaacbaa\",\"aabbbcccbb\",\"bccaccaac\",\"cbaacabcbb\",\"baacaccaac\",\"ccaacbbabb\",\"accabaabb\",\"aaccaba\",\"bbbcccab\",\"ccccbaa\",\"bbabbaab\",\"bacbaabb\",\"bbcbcbab\",\"babcacca\",\"bbbaccbcbb\",\"caacbccb\",\"cbccbcbbb\",\"aacacbbac\",\"baacbcc\",\"bacaabbb\",\"babacbcc\",\"cccaaccb\",\"abccccb\",\"bacabcbac\",\"bccbcabacb\",\"bbbcbbccac\",\"aaabaaaabb\",\"cbcabbcab\",\"acbacaaacc\",\"bccacccbc\",\"acbccbcbc\",\"bcbabbbcc\",\"caacaaacac\",\"acaaccba\",\"ababcbbcca\",\"cbbabccaca\",\"cccbccaba\",\"bbabbbb\",\"bbccccbcac\",\"acacbacba\",\"aacbabbac\",\"cbcacca\",\"bbbabaab\",\"baaabcb\",\"bccacaaaa\",\"babccccaac\",\"cbccbcbbb\",\"ccccbcacc\",\"bbcccabc\",\"baacbbb\",\"bbbabbc\",\"cbbabbbbac\",\"bbccaaaaab\",\"abccabbb\",\"bbbcbcbabb\",\"bbbacaa\",\"bcbbabbc\",\"baaccacac\",\"bcbabbaa\",\"baccbca\",\"baabcbcaab\",\"acbcacb\",\"acbbaacc\",\"abbcacab\",\"accbabac\",\"cabcbbcaac\",\"aabbbcacc\",\"aacccbcbb\",\"ccaccccaab\",\"ccbaaccccb\",\"ccbcabac\",\"cbaccccaa\",\"ccaabbaccc\",\"acbcaaa\",\"cbccacaca\",\"bbcbabbbac\",\"cbbccaaa\",\"cbaabacc\",\"cccabbc\",\"aababab\",\"babbbbaaca\",\"cacbbbc\",\"bccbbcaaba\",\"cabcbcab\"]",
    "expected_output": "78",
    "task_finish_time": 1708516427422,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 688,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181938586",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun longestValidSubstring(word: String, forbidden: List<String>): Int {\n        var maxLength = 0\n        for (start in word.indices) {\n            for (end in start until word.length) {\n                val substring = word.substring(start, end + 1)\n                var isValid = true\n                for (f in forbidden) {\n                    if (substring.contains(f)) {\n                        isValid = false\n                        break\n                    }\n                }\n                if (isValid) maxLength = maxOf(maxLength, substring.length)\n            }\n        }\n        return maxLength\n    }\n}"
}