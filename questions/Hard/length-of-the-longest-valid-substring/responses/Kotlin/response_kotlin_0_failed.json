{
    "status_code": 15,
    "lang": "kotlin",
    "run_success": false,
    "runtime_error": "Line 10: Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 9",
    "full_runtime_error": "Line 10: Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 9",
    "status_runtime": "N/A",
    "memory": 29124000,
    "question_id": "2884",
    "elapsed_time": 226,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708516389249,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181938244",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun longestValidSubstring(word: String, forbidden: List<String>): Int {\n        var maxLength = 0\n        var start = 0\n\n        while (start < word.length) {\n            var valid = true\n            var end = start\n            while (end <= word.length && valid) {\n                val currentSubstring = word.substring(start..end)\n                for (f in forbidden) {\n                    if (currentSubstring.contains(f)) {\n                        valid = false\n                        break\n                    }\n                }\n                if (valid) maxLength = maxOf(maxLength, currentSubstring.length)\n                end++\n            }\n            start++\n        }\n\n        return maxLength\n    }\n}"
}