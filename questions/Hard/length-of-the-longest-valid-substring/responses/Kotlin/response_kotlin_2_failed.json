{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 61400000,
    "question_id": "2884",
    "elapsed_time": 5245,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708516464500,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 468,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181938978",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun longestValidSubstring(word: String, forbidden: List<String>): Int {\n        val n = word.length\n        var maxLength = 0\n        var l = 0\n        var r = 0\n\n        while (r < n) {\n            var isValid = true\n            for (f in forbidden) {\n                if (word.substring(maxOf(0, r - f.length + 1)..r).contains(f)) {\n                    isValid = false\n                    break\n                }\n            }\n            if (isValid) {\n                maxLength = maxOf(maxLength, r - l + 1)\n                r++\n            } else {\n                l++\n                if (l > r) r = l\n            }\n        }\n\n        return maxLength\n    }\n}"
}