{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20840000,
    "question_id": "2884",
    "elapsed_time": 11008,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708891408018,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 461,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186099597",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def longestValidSubstring(self, word: str, forbidden: List[str]) -> int:\n        n = len(word)\n        max_len = 0\n        dp = [0] * (n + 1)  # dp[i] stores the length of the longest valid substring ending at i-1\n\n        for i in range(1, n + 1):\n            valid = True\n            for f in forbidden:\n                if word[i-len(f):i].endswith(f):\n                    valid = False\n                    break\n            if valid:\n                dp[i] = dp[i-1] + 1\n                max_len = max(max_len, dp[i])\n            else:\n                dp[i] = 0\n\n        return max_len"
}