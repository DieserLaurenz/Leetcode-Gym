{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2476000,
    "question_id": "2884",
    "elapsed_time": 2081,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708524915353,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 444,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182042681",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn longest_valid_substring(word: String, forbidden: Vec<String>) -> i32 {\n        let mut max_len = 0;\n        let word_chars: Vec<char> = word.chars().collect();\n        let mut dp = vec![0; word.len() + 1];\n\n        for i in 1..=word.len() {\n            let mut valid = true;\n            dp[i] = dp[i - 1] + 1;\n            for f in &forbidden {\n                let f_chars: Vec<char> = f.chars().collect();\n                if f_chars.len() <= i {\n                    let start = i - f_chars.len();\n                    if word_chars[start..i] == f_chars[..] {\n                        valid = false;\n                        dp[i] = 0;\n                        break;\n                    }\n                }\n            }\n            if valid {\n                max_len = max_len.max(dp[i]);\n            }\n        }\n\n        max_len\n    }\n}"
}