{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6912000,
    "question_id": "2884",
    "elapsed_time": 3009,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708516767464,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 454,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181942349",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func longestValidSubstring(word string, forbidden []string) int {\n    n := len(word)\n    dp := make([]int, n+1)\n    forbiddenMap := make(map[string]bool)\n    for _, f := range forbidden {\n        forbiddenMap[f] = true\n    }\n\n    longest := 0\n\n    for i := 0; i < n; i++ {\n        dp[i+1] = dp[i] + 1\n        for f := range forbiddenMap {\n            fl := len(f)\n            if i+1 >= fl && word[i+1-fl:i+1] == f {\n                dp[i+1] = 0\n                break\n            }\n        }\n        longest = max(longest, dp[i+1])\n    }\n\n    return longest\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}