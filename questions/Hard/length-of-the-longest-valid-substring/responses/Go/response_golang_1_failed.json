{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4260000,
    "question_id": "2884",
    "elapsed_time": 3010,
    "compare_result": "0011111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000100000000000000000001000000000000000000001000000100000000000000000000000000000100000000000100000000000000000000000000000100000000000000100100000001000000100000000000000000000000000000000000000100000000000000000000010000000100000000001000000000000000000000000000000000000000000000000000000000000000010000000000001000000000000100000000100110000010000000000000100000000000000000011010000000000000000000000000000000010000100000000000000000000100000000000000010000000000100000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708516732421,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 110,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181941906",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func longestValidSubstring(word string, forbidden []string) int {\n    n := len(word)\n    maxLen := 0\n    for _, f := range forbidden {\n        startPos := 0\n        for {\n            index := strings.Index(word[startPos:], f)\n            if index == -1 {\n                maxLen = max(maxLen, n-startPos)\n                break\n            }\n            maxLen = max(maxLen, index)\n            startPos += index + 1\n        }\n    }\n    // Check for substrings not ending with a forbidden string\n    forbiddenCheck := make(map[string]bool)\n    for _, f := range forbidden {\n        forbiddenCheck[f] = true\n    }\n    validLen := 0\n    for i := 0; i < n; i++ {\n        valid := true\n        for j := i; j < n && valid; j++ {\n            if forbiddenCheck[word[i:j+1]] {\n                valid = false\n                break\n            }\n            validLen = max(validLen, j-i+1)\n        }\n        maxLen = max(maxLen, validLen)\n    }\n    return maxLen\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}