{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60308000,
    "question_id": "2884",
    "elapsed_time": 10628,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708524734660,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 454,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182039986",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def longestValidSubstring(word: String, forbidden: List[String]): Int = {\n        val n = word.length\n        val dp = Array.fill(n + 1)(0)\n        var maxLength = 0\n\n        for (i <- 1 to n) {\n            dp(i) = dp(i - 1) + 1\n            for (f <- forbidden) {\n                if (i >= f.length && word.substring(i - f.length, i) == f) {\n                    dp(i) = 0 // Reset because a forbidden substring is found\n                }\n            }\n            maxLength = maxLength max dp(i)\n        }\n\n        maxLength\n    }\n}"
}