{
    "status_code": 14,
    "lang": "swift",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 16684000,
    "question_id": "2884",
    "elapsed_time": 5058,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"cbabcbcaaaccbbbcbbcbacacaabccaabacbaacbacbaabccbcccbbcabaacccaabcccbbbabbbaaaacbabaccbbbabbabaaaaaacabaabaacbaccccaccbbaccbaabbbabccaccaabcccbaccbcbbbbcbbbbcbcabcbaabacacaaababaccbabaaaaabcbcbcacaaacabbccabcbbaacabacabccbabbbabbacbcacbcbcbacccabbaaaabcaaacbbaabaabbcaacabaabbbcaabcbcaaabaaaccbbaabbbbbbbcacabccbbcbbbcacbccacbabaaacccacbacbbbcbaabacaccaaaabacccbcbcabaaaccbbcbbbbaacbcbbcbaccbbccacbbcbacaacbcbbbacbccabcabbacabbbcacbbccbabcbabbbbbababbcacccccbababccbacbcaccbabbcaacabaacbbbacccbccbaaababaaccaacaccbaabcbccbaaabaabccacbbbcbccbbcabaa\"\n[\"aaaabcb\",\"cbaccccac\",\"acbbbab\",\"bbbcabaca\",\"bccbabcb\",\"cbacbca\",\"ccccaccbb\",\"cbabbcaaca\",\"acabccb\",\"bacccccbba\",\"aaaaacabaa\",\"cbbbbcbc\",\"aaaccbba\",\"cbbbbcbabc\",\"caccbbcca\",\"abbccacacb\",\"bbcbcbcbba\",\"abaabbcaac\",\"cbbcabaac\",\"abaaaccbb\",\"aacbbbccac\",\"bcbcabcab\",\"bcabbaca\",\"ccbbbbbbbc\",\"aaabbcabcc\",\"bbababbca\",\"baaccacaaa\",\"abaccbcc\",\"aacaccb\",\"aaaaacabaa\",\"aaabaaaccb\",\"abacaca\",\"aabcccbaca\",\"aacabac\",\"baacbcbb\",\"cbaabccb\",\"bbaabbbb\",\"abcbcaaac\",\"babacbaac\",\"bbcbaabaca\",\"caabcca\",\"babaaaaaa\",\"abbacabbbc\",\"ccabcabcab\",\"babbbbbaba\",\"acaacbcbbb\",\"aaabaaa\",\"cbbbcbbcb\",\"bbcbccbbca\",\"abccccb\",\"cbcabcba\",\"bcccbbcaba\",\"bbccacb\",\"cabbbba\",\"acaacbc\",\"aaaacabaab\",\"bccabcab\",\"babcbaaa\",\"aabcaacccb\",\"aaabaaccb\",\"baaaccbb\",\"aabcccac\",\"cbcaaba\",\"ccbbcbb\",\"bcbccbb\",\"bcaabcbca\",\"cbbccacbbc\",\"bbaaaab\",\"bccabcbba\",\"aabacbc\",\"baacaba\",\"bccccaab\",\"cabcaabab\",\"bccabcab\",\"bcbbccc\",\"baacaba\",\"abccaaba\",\"cccaaaab\",\"ccbcbabac\",\"babaaccaa\",\"babbabaa\",\"cbbbcabc\",\"bcbccbbcab\",\"bbabcacb\",\"accaaabcbb\",\"cabacabcc\",\"cbcacbba\",\"cacaaab\",\"bcbacaacba\",\"aaabbccaba\",\"bbacaca\",\"bccbacbcac\",\"bacccca\",\"aabcbabb\",\"babacbbc\",\"bcccbbcbb\",\"abccabb\",\"cbbbbcb\",\"aabbbab\",\"cccabbacc\"]",
    "expected_output": "43",
    "task_finish_time": 1708516329358,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 684,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181937590",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "class Solution {\n    func longestValidSubstring(_ word: String, _ forbidden: [String]) -> Int {\n        let n = word.count\n        var maxLen = 0\n        let wordArray = Array(word)\n        var start = 0\n        \n        while start < n {\n            var end = start\n            var valid = true\n            while end < n && valid {\n                let currentSubstring = String(wordArray[start...end])\n                for f in forbidden {\n                    if currentSubstring.contains(f) {\n                        valid = false\n                        break\n                    }\n                }\n                if valid {\n                    maxLen = max(maxLen, end - start + 1)\n                }\n                end += 1\n            }\n            start += 1\n        }\n        \n        return maxLen\n    }\n}"
}