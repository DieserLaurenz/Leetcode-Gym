{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 314988000,
    "question_id": "2884",
    "elapsed_time": 1293,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708516115248,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 182,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181935307",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $word\n     * @param String[] $forbidden\n     * @return Integer\n     */\n    function longestValidSubstring($word, $forbidden) {\n        $n = strlen($word);\n        $maxLength = 0;\n        \n        // Preprocess forbidden strings to create a trie\n        $trie = [];\n        foreach ($forbidden as $f) {\n            $node = &$trie;\n            for ($i = 0; $i < strlen($f); $i++) {\n                if (!isset($node[$f[$i]])) {\n                    $node[$f[$i]] = [];\n                }\n                $node = &$node[$f[$i]];\n            }\n            $node['end'] = true; // Mark the end of a forbidden string\n        }\n        \n        for ($i = 0; $i < $n; $i++) {\n            $node = $trie;\n            for ($j = $i; $j < $n; $j++) {\n                if (isset($node[$word[$j]])) {\n                    $node = $node[$word[$j]];\n                    if (isset($node['end'])) {\n                        // Found a forbidden substring, break out of the loop\n                        break;\n                    }\n                } else {\n                    // No more matching in trie, safe to continue\n                    $maxLength = max($maxLength, $j - $i + 1);\n                    break;\n                }\n                if ($j == $n - 1) {\n                    // Reached the end of $word without finding a forbidden substring\n                    $maxLength = max($maxLength, $j - $i + 1);\n                }\n            }\n        }\n\n        return $maxLength;\n    }\n}"
}