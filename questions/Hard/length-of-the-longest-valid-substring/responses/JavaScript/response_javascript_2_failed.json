{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64652000,
    "question_id": "2884",
    "elapsed_time": 4023,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"leetcode\"\n[\"de\",\"le\",\"e\"]",
    "expected_output": "4",
    "task_finish_time": 1708515479594,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 425,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1181929164",
    "input_formatted": "\"leetcode\", [\"de\",\"le\",\"e\"]",
    "input": "\"leetcode\"\n[\"de\",\"le\",\"e\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} word\n * @param {string[]} forbidden\n * @return {number}\n */\nvar longestValidSubstring = function(word, forbidden) {\n    let maxLen = 0;\n    let dp = new Array(word.length + 1).fill(0);\n\n    for (let i = 1; i <= word.length; i++) {\n        dp[i] = dp[i - 1] + 1;\n        for (let j = 0; j < forbidden.length; j++) {\n            if (word.substring(i - forbidden[j].length, i) === forbidden[j]) {\n                dp[i] = Math.min(dp[i], i - forbidden[j].length - dp[i - forbidden[j].length]);\n            }\n        }\n        maxLen = Math.max(maxLen, dp[i]);\n    }\n\n    return maxLen;\n};"
}