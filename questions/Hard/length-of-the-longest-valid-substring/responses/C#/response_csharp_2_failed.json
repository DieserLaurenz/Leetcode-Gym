{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 132104000,
    "question_id": "2884",
    "elapsed_time": 4015,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708515330657,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 467,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1181927674",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int LongestValidSubstring(string word, IList<string> forbidden) {\n        int n = word.Length;\n        int[] dp = new int[n + 1];\n        int maxLen = 0;\n\n        for (int i = 0; i < n; i++) {\n            dp[i + 1] = dp[i] + 1; // Assume the current character extends the valid substring\n            foreach (string f in forbidden) {\n                if (i + 1 >= f.Length && word.Substring(i + 1 - f.Length, f.Length) == f) {\n                    dp[i + 1] = 0; // Reset if a forbidden substring ends at this position\n                    break;\n                }\n            }\n            for (int j = i + 1 - dp[i + 1]; j <= i; j++) {\n                bool isValid = true;\n                foreach (string f in forbidden) {\n                    if (j + f.Length <= i + 1 && word.Substring(j, f.Length) == f) {\n                        isValid = false;\n                        break;\n                    }\n                }\n                if (!isValid) {\n                    dp[i + 1] = i - j;\n                    break;\n                }\n            }\n            maxLen = Math.Max(maxLen, dp[i + 1]);\n        }\n\n        return maxLen;\n    }\n}"
}