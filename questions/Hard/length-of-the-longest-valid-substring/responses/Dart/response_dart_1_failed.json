{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 198252000,
    "question_id": "2884",
    "elapsed_time": 5034,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "expected_output": "4",
    "task_finish_time": 1708516587548,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 135,
    "total_testcases": 763,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1181940307",
    "input_formatted": "\"cbaaaabc\", [\"aaa\",\"cb\"]",
    "input": "\"cbaaaabc\"\n[\"aaa\",\"cb\"]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int longestValidSubstring(String word, List<String> forbidden) {\n    int start = 0, maxLen = 0;\n    Map<String, List<int>> forbiddenIndexes = {};\n\n    for (var forbid in forbidden) {\n      forbiddenIndexes[forbid] = [];\n      int pos = word.indexOf(forbid);\n      while (pos != -1) {\n        forbiddenIndexes[forbid]!.add(pos);\n        pos = word.indexOf(forbid, pos + 1);\n      }\n    }\n\n    List<int> breaks = [];\n    for (var indexes in forbiddenIndexes.values) {\n      breaks.addAll(indexes);\n    }\n    breaks.sort();\n\n    if (breaks.isEmpty) return word.length;\n\n    for (int i = 0; i < breaks.length; i++) {\n      int end = breaks[i];\n      for (var forbid in forbidden) {\n        if (end + forbid.length <= word.length && word.substring(end, end + forbid.length) == forbid) {\n          maxLen = max(maxLen, end - start);\n          start = end + forbid.length;\n          break;\n        }\n      }\n    }\n\n    return max(maxLen, word.length - start);\n  }\n\n  int max(int a, int b) => a > b ? a : b;\n}"
}