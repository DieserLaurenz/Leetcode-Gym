{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74520000,
    "question_id": "3153",
    "elapsed_time": 550,
    "compare_result
    "code_output": "100",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708246978494,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 8,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1178714018",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxSum(IList<int> nums, int k) {\n        long mod = 1000000007;\n        long[] squares = new long[nums.Count];\n        for (int i = 0; i < nums.Count; i++) {\n            squares[i] = ((long)nums[i] * (long)nums[i]) % mod;\n        }\n        Array.Sort(squares);\n        long result = 0;\n        for (int i = nums.Count - 1; i >= nums.Count - k; i--) {\n            result = (result + squares[i]) % mod;\n        }\n        return (int)result;\n    }\n}"
}