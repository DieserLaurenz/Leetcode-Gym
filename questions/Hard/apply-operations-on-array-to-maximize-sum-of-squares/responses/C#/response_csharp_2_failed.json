{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 90588000,
    "question_id": "3153",
    "elapsed_time": 783,
    "compare_result
    "code_output": "100",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247036640,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 8,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1178714575",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Solution {\n    public int MaxSum(IList<int> nums, int k) {\n        const int MOD = 1000000007;\n        long maxSum = 0;\n        PriorityQueue<long, long> pq = new PriorityQueue<long, long>(Comparer<long>.Create((a, b) => b.CompareTo(a)));\n        foreach (int num in nums) {\n            pq.Enqueue((long)num * num, (long)num * num);\n        }\n        for (int i = 0; i < k; i++) {\n            maxSum = (maxSum + pq.Dequeue()) % MOD;\n        }\n        return (int)maxSum;\n    }\n}"
}