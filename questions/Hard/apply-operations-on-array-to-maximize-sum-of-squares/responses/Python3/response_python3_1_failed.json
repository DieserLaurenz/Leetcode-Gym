{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 82376000,
    "question_id": "3153",
    "elapsed_time": 2049,
    "compare_result
    "code_output": "80",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708860034057,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185711402",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxSum(self, nums: List[int], k: int) -> int:\n        MOD = 10**9 + 7\n        # Bit count of each number\n        bit_count = [0] * 32\n        for num in nums:\n            for i in range(32):\n                if num & (1 << i):\n                    bit_count[i] += 1\n\n        # Reconstruct the maximum numbers\n        max_nums = []\n        for i in range(32):\n            while bit_count[i] > 0:\n                max_nums.append(1 << i)\n                bit_count[i] -= 1\n\n        # Sort to get the k largest values\n        max_nums.sort(reverse=True)\n        return sum(x ** 2 for x in max_nums[:k]) % MOD"
}