{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19932000,
    "question_id": "3153",
    "elapsed_time": 520,
    "compare_result
    "code_output": "441",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247434256,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 96,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1178718605",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxSum(_ nums: [Int], _ k: Int) -> Int {\n        let mod = 1_000_000_007\n        var freq = Array(repeating: 0, count: 32)\n        \n        for num in nums {\n            for i in 0..<32 {\n                if num & (1 << i) != 0 {\n                    freq[i] += 1\n                }\n            }\n        }\n        \n        var result = 0\n        for i in 0..<32 {\n            result += min(freq[i], k) * (1 << i)\n            result %= mod\n        }\n        \n        return (result * result) % mod\n    }\n}"
}