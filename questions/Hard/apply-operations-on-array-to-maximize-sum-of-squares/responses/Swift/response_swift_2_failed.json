{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 17460000,
    "question_id": "3153",
    "elapsed_time": 311,
    "compare_result": "010100000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000001000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "100",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247484039,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 7,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1178719094",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxSum(_ nums: [Int], _ k: Int) -> Int {\n        let mod = 1_000_000_007\n        var maxElement = nums.max()!\n        var bucket = [Int](repeating: 0, count: maxElement + 1)\n        for num in nums {\n            bucket[num] += 1\n        }\n        \n        var result = [Int]()\n        for i in stride(from: maxElement, through: 0, by: -1) where bucket[i] > 0 {\n            for _ in 0..<bucket[i] {\n                result.append(i)\n                if result.count == k { break }\n            }\n            if result.count == k { break }\n        }\n        \n        return result.reduce(0) { ($0 + $1 * $1) % mod }\n    }\n}"
}