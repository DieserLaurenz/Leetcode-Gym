{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 223448000,
    "question_id": "3153",
    "elapsed_time": 1757,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247938032,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1178723654",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer}\ndef max_sum(nums, k)\n  max_value = nums.max\n  bits = Array.new(31, 0)\n  \n  nums.each do |num|\n    31.times do |i|\n      bits[i] += 1 if num & (1 << i) != 0\n    end\n  end\n\n  result = 0\n  mod = 10**9 + 7\n  \n  31.times do |i|\n    if bits[i] >= k\n      result += (1 << i) * k\n      result %= mod\n    else\n      result += (1 << i) * bits[i]\n      result %= mod\n      k -= bits[i]\n    end\n  end\n  \n  result\nend"
}