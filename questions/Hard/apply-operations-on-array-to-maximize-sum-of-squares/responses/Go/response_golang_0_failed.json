{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9712000,
    "question_id": "3153",
    "elapsed_time": 297,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247760888,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1178721888",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxSum(nums []int, k int) int {\n    const mod int = 1e9 + 7\n    maxVal := 0\n    for _, num := range nums {\n        maxVal |= num\n    }\n    result, count := 0, 0\n    for bit := 30; bit >= 0 && count < k; bit-- {\n        bitCount := 0\n        for _, num := range nums {\n            if num&(1<<bit) != 0 {\n                bitCount++\n            }\n        }\n        if bitCount >= k {\n            result += ((1 << bit) * k) % mod\n            count = k\n        } else {\n            result += ((1 << bit) * bitCount) % mod\n            count += bitCount\n        }\n        result %= mod\n    }\n    return result\n}"
}