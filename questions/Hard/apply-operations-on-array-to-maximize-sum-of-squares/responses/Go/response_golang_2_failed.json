{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9628000,
    "question_id": "3153",
    "elapsed_time": 177,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247818669,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1178722479",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxSum(nums []int, k int) int {\n    const mod = 1e9 + 7\n    // Using a bitwise OR operation on all elements to get the maximum possible value after any number of operations\n    maxNum := 0\n    for _, num := range nums {\n        maxNum |= num\n    }\n\n    // Initialize a slice to store the counts of each bit's appearance in the nums\n    bitCounts := make([]int, 31)\n    for _, num := range nums {\n        for i := 0; i < 31; i++ {\n            if (num>>i)&1 == 1 {\n                bitCounts[i]++\n            }\n        }\n    }\n\n    // Sort the bitCounts in descending order to pick the k most significant bits\n    sort.Slice(bitCounts, func(i, j int) bool {\n        return bitCounts[i] > bitCounts[j]\n    })\n\n    // Calculate the sum of squares of the top k bits\n    result := 0\n    for i := 0; i < k; i++ {\n        if i < len(bitCounts) {\n            result = (result + powMod(2, bitCounts[i], mod)) % mod\n        }\n    }\n\n    return result\n}\n\n// powMod calculates (base^exp) % mod efficiently\nfunc powMod(base, exp, mod int) int {\n    res := 1\n    base %= mod\n    for exp > 0 {\n        if exp&1 == 1 {\n            res = (res * base) % mod\n        }\n        base = (base * base) % mod\n        exp >>= 1\n    }\n    return res\n}"
}