{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71584000,
    "question_id": "3153",
    "elapsed_time": 1948,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "45",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708248023857,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1178724508",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n  def maxSum(nums: List[Int], k: Int): Int = {\n    val mod = (1e9 + 7).toInt\n    val maxVal = nums.max\n    val freq = new Array[Int](maxVal + 1)\n\n    nums.foreach(num => freq(num) += 1)\n\n    val pq = scala.collection.mutable.PriorityQueue[(Int, Int)]()(Ordering.by[(Int, Int), Int](_._1))\n    freq.zipWithIndex.filter(_._1 > 0).foreach{ case (count, value) => pq.enqueue((value, count)) }\n\n    var operations = k\n    while (operations > 0 && pq.nonEmpty) {\n      val (value, count) = pq.dequeue()\n      if (count <= operations) {\n        operations -= count\n        if (value != 0) pq.enqueue((value & (value - 1), count))\n      } else {\n        pq.enqueue((value, operations))\n        operations = 0\n      }\n    }\n\n    var result: Long = 0\n    while (pq.nonEmpty) {\n      val (value, count) = pq.dequeue()\n      result = (result + count.toLong * value * value) % mod\n    }\n\n    result.toInt\n  }\n}"
}