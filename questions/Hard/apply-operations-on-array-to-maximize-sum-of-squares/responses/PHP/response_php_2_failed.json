{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 31148000,
    "question_id": "3153",
    "elapsed_time": 475,
    "compare_result
    "code_output": "100",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247375195,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 8,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1178717984",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSum($nums, $k) {\n        $mod = 1000000007;\n\n        // Maximize the elements by always performing AND operation with itself which does not change the element\n        // Since AND operation does not increase the value of an element, the original elements are already maximized\n        // Therefore, we just need to select the k largest elements and calculate the sum of their squares\n\n        // Sort the array in non-increasing order to get the k largest elements easily\n        rsort($nums);\n\n        // Calculate the sum of squares of the k largest elements\n        $sum = 0;\n        for ($i = 0; $i < $k; $i++) {\n            $sum = ($sum + ((int)pow($nums[$i], 2) % $mod)) % $mod;\n        }\n\n        return $sum;\n    }\n}"
}