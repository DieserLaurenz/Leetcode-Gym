{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27952000,
    "question_id": "3153",
    "elapsed_time": 611,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247309222,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1178717296",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer\n     */\n    function maxSum($nums, $k) {\n        $mod = 1000000007;\n        $maxVal = max($nums);\n        $bitCount = array_fill(0, 31, 0);\n\n        foreach ($nums as $num) {\n            for ($i = 0; $i < 31; $i++) {\n                if (($num >> $i) & 1) {\n                    $bitCount[$i]++;\n                }\n            }\n        }\n\n        $result = 0;\n        for ($i = 30; $i >= 0; $i--) {\n            if ($bitCount[$i] >= $k) {\n                $result += pow(2, $i) * $k;\n                $result %= $mod;\n                break;\n            } else {\n                if ($bitCount[$i] > 0) {\n                    $result += pow(2, $i) * $bitCount[$i];\n                    $k -= $bitCount[$i];\n                }\n                $result %= $mod;\n            }\n        }\n\n        return $result;\n    }\n}"
}