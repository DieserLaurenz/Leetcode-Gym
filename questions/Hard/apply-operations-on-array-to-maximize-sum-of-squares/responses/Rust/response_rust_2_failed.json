{
    "status_code": 15,
    "lang": "rust",
    "run_success": false,
    "runtime_error": "",
    "full_runtime_error": "",
    "status_runtime": "N/A",
    "memory": 2080000,
    "question_id": "3153",
    "elapsed_time": 10,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708248188407,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1178726216",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_sum(nums: Vec<i32>, k: i32) -> i32 {\n        let mod_val = 1_000_000_007;\n        let mut max_value = *nums.iter().max().unwrap();\n        let mut bit_counts = vec![0; 31];\n\n        // Count the number of elements with each bit set\n        for num in &nums {\n            for i in 0..31 {\n                if (num & (1 << i)) != 0 {\n                    bit_counts[i] += 1;\n                }\n            }\n        }\n\n        let mut dp = vec![vec![0; k as usize + 1]; 31];\n        dp[0][0] = 1;\n        for i in 0..31 {\n            for j in 0..=k as usize {\n                dp[i + 1][j] = dp[i][j]; // not using the i-th bit\n                if bit_counts[i] > 0 && j >= 1 {\n                    dp[i + 1][j] = (dp[i + 1][j] + dp[i][j - 1] * bit_counts[i] as i64) % mod_val;\n                }\n            }\n        }\n\n        let mut result = 0;\n        for i in 0..31 {\n            if bit_counts[i] > 0 {\n                let mut temp = 0;\n                for j in 1..=k as usize {\n                    temp = (temp + dp[i][j - 1] * bit_counts[i] as i64) % mod_val;\n                }\n                result = (result + ((1 << i) * temp) % mod_val) % mod_val;\n            }\n        }\n\n        result as i32\n    }\n}"
}