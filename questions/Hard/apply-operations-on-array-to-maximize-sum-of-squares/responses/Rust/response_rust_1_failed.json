{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3800000,
    "question_id": "3153",
    "elapsed_time": 70,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "21",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708248140314,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1178725736",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_sum(nums: Vec<i32>, k: i32) -> i32 {\n        let mod_val = 1_000_000_007;\n        let mut freq = vec![0; 32];\n        for &num in &nums {\n            for i in 0..32 {\n                if num & (1 << i) != 0 {\n                    freq[i] += 1;\n                }\n            }\n        }\n        let mut result = 0;\n        for i in (0..32).rev() {\n            let take = k.min(freq[i]);\n            result = (result + ((1 << i) * take) % mod_val) % mod_val;\n        }\n        result\n    }\n}"
}