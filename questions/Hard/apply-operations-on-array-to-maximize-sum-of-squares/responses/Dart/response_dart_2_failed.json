{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 171476000,
    "question_id": "3153",
    "elapsed_time": 678,
    "compare_result": "001111100100000110000110000010001100001111110001010011011000001000101001000010010000001000000100100000010110000000000011001001000101000010001001101000110000010000011001100001010001000001010111010000000000110100001100100000000111010000000001001000000100001001000000001001000000000000011001111010000000110100110010000000100110100000011001100000000011111000000010010010001100011011011101000000000101010100000000010010011100001000001000110001000000111100011010001100100101000101101000010010100010010000000001100001000000000100001001110000000101100000000000000001010001001100000000010000100000000101000001000001110100101010000100001001000100100100000000000011101000000111110010000010001001111001111001000001011000001110010111101011001011010100001010001000110001100001110111111100001110001011001101011100011100101010111111010101010110010010011001101100010101101111001001101100001000001110111010100011110000000101110000001111",
    "code_output": "450",
    "std_output": "",
    "last_testcase": "[2,6,5,8]\n2",
    "expected_output": "261",
    "task_finish_time": 1708247710878,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 318,
    "total_testcases": 918,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1178721334",
    "input_formatted": "[2,6,5,8], 2",
    "input": "[2,6,5,8]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maxSum(List<int> nums, int k) {\n    const int mod = 1000000007;\n    // Apply the operation to maximize the bitwise OR for all elements\n    int orResult = nums.reduce((result, element) => result | element);\n    // Calculate the sum of squares of the top k OR results\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n      sum = (sum + ((orResult % mod) * (orResult % mod)) % mod) % mod;\n    }\n    return sum;\n  }\n}"
}