{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51460000,
    "question_id": "3091",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "999999997",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708352023213,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 10,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1179919817",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    private const int MOD = 1000000007;\n\n    public int CountSubMultisets(IList<int> nums, int l, int r) {\n        long[] dp = new long[20001];\n        dp[0] = 1;\n        foreach (int num in nums) {\n            for (int i = 20000; i >= num; i--) {\n                dp[i] = (dp[i] + dp[i - num]) % MOD;\n            }\n        }\n\n        long result = 0;\n        for (int i = l; i <= r; i++) {\n            result = (result + dp[i]) % MOD;\n        }\n\n        // Subtract the count of subsets with sum < l to get the correct count\n        for (int i = 0; i < l; i++) {\n            result = (MOD + result - dp[i]) % MOD;\n        }\n\n        return (int)result;\n    }\n}"
}