{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6428000,
    "question_id": "3091",
    "elapsed_time": 3010,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[0,0,1,2,3]\n2\n3",
    "expected_output": "9",
    "task_finish_time": 1708360852091,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 516,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180057259",
    "input_formatted": "[0,0,1,2,3], 2, 3",
    "input": "[0,0,1,2,3]\n2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func countSubMultisets(nums []int, l int, r int) int {\n    const mod = 1e9 + 7\n    maxNum := 0\n    for _, num := range nums {\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    sum := make([]int, maxNum+1)\n    for _, num := range nums {\n        sum[num]++\n    }\n    dp := make([]int, r+1)\n    dp[0] = 1\n    for i := 1; i <= maxNum; i++ {\n        if sum[i] == 0 {\n            continue\n        }\n        for j := r; j >= 0; j-- {\n            for k := 1; k <= sum[i] && k*i <= j; k++ {\n                dp[j] = (dp[j] + dp[j-k*i]) % mod\n            }\n        }\n    }\n    ans := 0\n    for i := l; i <= r; i++ {\n        ans = (ans + dp[i]) % mod\n    }\n    return ans\n}"
}