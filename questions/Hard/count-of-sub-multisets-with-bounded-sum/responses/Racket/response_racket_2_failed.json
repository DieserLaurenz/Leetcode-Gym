{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 975276000,
    "question_id": "3091",
    "elapsed_time": 4176,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708361474756,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 35,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1180068055",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (count-sub-multisets nums l r)\n  (-> (listof exact-integer?) exact-integer? exact-integer? exact-integer?)\n  (define mod 1000000007)\n  (define (prefix-sums arr)\n    (for/fold ([ps (list 0)]) ([x (in-list arr)])\n      (cons (modulo (+ x (car ps)) mod) ps)))\n  (define (count-in-range ps l r)\n    (let ([count (for/fold ([cnt 0]) ([x (in-list ps)])\n                   (if (and (>= x l) (<= x r)) (modulo (+ cnt 1) mod) cnt))])\n      count))\n  (define (subsets-sums nums)\n    (if (null? nums) (list 0)\n        (let* ([x (car nums)]\n               [xs (subsets-sums (cdr nums))]\n               [xs-doubled (map (lambda (s) (modulo (+ s x) mod)) xs)])\n          (append xs xs-doubled))))\n  (count-in-range (prefix-sums (subsets-sums nums)) l r))"
}