{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12800000,
    "question_id": "3091",
    "elapsed_time": 11010,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[0,0,1,2,3]\n2\n3",
    "expected_output": "9",
    "task_finish_time": 1708870113765,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 530,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185823107",
    "input_formatted": "[0,0,1,2,3], 2, 3",
    "input": "[0,0,1,2,3]\n2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def countSubMultisets(self, nums, l, r):\n        from collections import Counter\n        mod = 10**9 + 7\n        freq = Counter(nums)\n        dp = [0] * (sum(nums) + 1)\n        dp[0] = 1\n\n        for num, count in freq.items():\n            for v in range(sum(nums), num-1, -1):\n                for k in range(1, count+1):\n                    if v - num*k >= 0:\n                        dp[v] = (dp[v] + dp[v - num*k]) % mod\n                    else:\n                        break\n        \n        return sum(dp[l:r+1]) % mod"
}