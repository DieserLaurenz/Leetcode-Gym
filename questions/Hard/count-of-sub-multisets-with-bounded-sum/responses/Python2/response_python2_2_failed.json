{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11572000,
    "question_id": "3091",
    "elapsed_time": 69,
    "compare_result
    "code_output": "999999997",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708870145253,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185823619",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def countSubMultisets(self, nums, l, r):\n        from collections import Counter\n        mod = 10**9 + 7\n        dp = [0] * (r + 1)\n        dp[0] = 1  # Base case: empty subset always has sum 0\n\n        for num in nums:\n            for i in range(r, num - 1, -1):\n                dp[i] = (dp[i] + dp[i - num]) % mod\n\n        # Count the number of subsets with sum in the range [0, l-1] to subtract from the total\n        dp_less_than_l = [0] * (l)\n        dp_less_than_l[0] = 1  # Base case\n\n        for num in nums:\n            for i in range(l - 1, num - 1, -1):\n                dp_less_than_l[i] = (dp_less_than_l[i] + dp_less_than_l[i - num]) % mod\n\n        return (sum(dp[l:]) - sum(dp_less_than_l[:l]) + mod) % mod"
}