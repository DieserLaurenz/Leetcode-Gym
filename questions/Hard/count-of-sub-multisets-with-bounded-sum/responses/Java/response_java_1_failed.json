{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44988000,
    "question_id": "3091",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[0,0,1,2,3]\n2\n3",
    "expected_output": "9",
    "task_finish_time": 1708351652997,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 531,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1179914441",
    "input_formatted": "[0,0,1,2,3], 2, 3",
    "input": "[0,0,1,2,3]\n2\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Solution {\n    private static final int MOD = 1000000007;\n\n    public int countSubMultisets(List<Integer> nums, int l, int r) {\n        Map<Integer, Integer> freq = new HashMap<>();\n        for (int num : nums) {\n            freq.put(num, freq.getOrDefault(num, 0) + 1);\n        }\n\n        int[] dp = new int[r + 1];\n        dp[0] = 1; // empty subset\n\n        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {\n            int num = entry.getKey(), count = entry.getValue();\n            for (int i = r; i >= num; i--) {\n                for (int j = 1; j <= count && i - j * num >= 0; j++) {\n                    dp[i] = (dp[i] + dp[i - j * num]) % MOD;\n                }\n            }\n        }\n\n        int result = 0;\n        for (int i = l; i <= r; i++) {\n            result = (result + dp[i]) % MOD;\n        }\n        return result;\n    }\n}"
}