{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 146660000,
    "question_id": "3091",
    "elapsed_time": 4014,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708351478923,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 94,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179911867",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int countSubMultisets(vector<int>& nums, int l, int r) {\n        const int MOD = 1e9 + 7;\n        vector<long long> dp(20001, 0);\n        dp[0] = 1; // Empty set\n\n        for (int num : nums) {\n            for (int i = 20000; i >= num; --i) {\n                dp[i] = (dp[i] + dp[i - num]) % MOD;\n            }\n        }\n\n        // Prefix sums for O(1) range queries\n        for (int i = 1; i <= 20000; ++i) {\n            dp[i] = (dp[i] + dp[i - 1]) % MOD;\n        }\n\n        // Adjusting for the range [l, r]\n        long long total = dp[r] - (l > 0 ? dp[l - 1] : 0);\n        if (total < 0) total += MOD;\n        return total % MOD;\n    }\n};"
}