{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36460000,
    "question_id": "3091",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708351435395,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 94,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1179911210",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int countSubMultisets(vector<int>& nums, int l, int r) {\n        const int mod = 1e9 + 7;\n        vector<int> dp(r + 1, 0);\n        dp[0] = 1; // Base case: there's always one way to form a sum of 0 (empty set)\n        for (int num : nums) {\n            for (int i = r; i >= num; --i) {\n                dp[i] = (dp[i] + dp[i - num]) % mod;\n            }\n        }\n        int sum = 0;\n        for (int i = l; i <= r; ++i) {\n            sum = (sum + dp[i]) % mod;\n        }\n        return sum;\n    }\n};"
}