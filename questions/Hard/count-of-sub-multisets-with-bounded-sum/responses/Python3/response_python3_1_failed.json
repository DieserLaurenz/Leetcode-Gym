{
    "status_code": 15,
    "lang": "python3",
    "run_success": false,
    "runtime_error": "Line 11: ZeroDivisionError: integer division or modulo by zero",
    "full_runtime_error": "ZeroDivisionError: integer division or modulo by zero\n                                 ~~~~~~~~^^~~~~\n    for k in range(1, min(freq, (sum_val // num)) + 1):\nLine 11 in countSubMultisets (Solution.py)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ret = Solution().countSubMultisets(param_1, param_2, param_3)\nLine 43 in _driver (Solution.py)\n    _driver()\nLine 54 in <module> (Solution.py)",
    "status_runtime": "N/A",
    "memory": 16736000,
    "question_id": "3091",
    "elapsed_time": 52,
    "compare_result": "1110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[0,0,1,2,3]\n2\n3",
    "expected_output": "9",
    "task_finish_time": 1708870246772,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185824710",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import Counter\n\nclass Solution:\n    def countSubMultisets(self, nums: List[int], l: int, r: int) -> int:\n        MOD = 10**9 + 7\n        dp = [0] * (r + 1)\n        dp[0] = 1  # Base case: empty subset always sums to 0\n        for num, freq in Counter(nums).items():\n            for sum_val in range(r, num - 1, -1):\n                for k in range(1, min(freq, (sum_val // num)) + 1):\n                    dp[sum_val] = (dp[sum_val] + dp[sum_val - num * k]) % MOD\n\n        return (sum(dp[l:]) - (1 if l == 0 else 0)) % MOD"
}