{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15776000,
    "question_id": "3091",
    "elapsed_time": 5095,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708352839053,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 94,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179932090",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func countSubMultisets(_ nums: [Int], _ l: Int, _ r: Int) -> Int {\n        let mod = 1000000007\n        var sum = nums.reduce(0, +)\n        var dp = Array(repeating: 0, count: sum + 1)\n        dp[0] = 1\n        \n        for num in nums {\n            for i in stride(from: sum, through: num, by: -1) {\n                dp[i] = (dp[i] + dp[i - num]) % mod\n            }\n        }\n        \n        var result = 0\n        for i in l...r where i <= sum {\n            result = (result + dp[i]) % mod\n        }\n        \n        return result\n    }\n}"
}