{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18888000,
    "question_id": "3091",
    "elapsed_time": 639,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708352873446,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1179932687",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func countSubMultisets(_ nums: [Int], _ l: Int, _ r: Int) -> Int {\n        let mod = 1_000_000_007\n        let maxSum = nums.reduce(0, +)\n        var dp = Array(repeating: 0, count: maxSum + 1)\n        dp[0] = 1\n\n        for num in nums {\n            for j in stride(from: maxSum, through: num, by: -1) {\n                dp[j] = (dp[j] + dp[j - num]) % mod\n            }\n        }\n\n        var prefixSums = Array(repeating: 0, count: maxSum + 2)\n        for i in 1...maxSum {\n            prefixSums[i + 1] = (prefixSums[i] + dp[i]) % mod\n        }\n\n        func countInRange(_ x: Int) -> Int {\n            return x >= 0 ? prefixSums[x + 1] : 0\n        }\n\n        return (countInRange(r) - countInRange(l - 1) + mod) % mod\n    }\n}"
}