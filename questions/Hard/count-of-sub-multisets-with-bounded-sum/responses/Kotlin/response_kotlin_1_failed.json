{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 281152000,
    "question_id": "3091",
    "elapsed_time": 869,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708353097104,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 85,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1179936022",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun countSubMultisets(nums: List<Int>, l: Int, r: Int): Int {\n        val mod = 1_000_000_007\n        val sum = nums.sum()\n        val dp = Array(nums.size + 1) { LongArray(sum + 1) }\n        dp[0][0] = 1L\n        for (i in 1..nums.size) {\n            val num = nums[i - 1]\n            for (j in 0..sum) {\n                dp[i][j] = dp[i - 1][j]\n                if (j >= num) dp[i][j] = (dp[i][j] + dp[i - 1][j - num]) % mod\n            }\n        }\n        var count = 0L\n        for (s in l..r) {\n            for (i in 1..nums.size) {\n                count = (count + dp[i][s]) % mod\n            }\n        }\n        return count.toInt()\n    }\n}"
}