{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 13: exception error: badarg",
    "full_runtime_error": "Line 13: exception error: badarg\n[{erlang,element,\n         [1,[1,0,0,0,0,0,0,0,0,0]],\n         [{error_info,#{module => erl_erts_errors}}]},\n {solution,'-update_dp/3-fun-0-',4,[{file,\"solution.erl\"},{line,13}]},\n {lists,map_1,2,[{file,\"lists.erl\"},{line,1564}]},\n {lists,map,2,[{file,\"lists.erl\"},{line,1559}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,count_sub_multisets,3,[{file,\"solution.erl\"},{line,6}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,43}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,27}]}]",
    "status_runtime": "N/A",
    "memory": 59948000,
    "question_id": "3091",
    "elapsed_time": 1479,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708361594192,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180070349",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec count_sub_multisets(Nums :: [integer()], L :: integer(), R :: integer()) -> integer().\ncount_sub_multisets(Nums, L, R) ->\n    Mod = 1000000007,\n    MaxSum = lists:sum(Nums),\n    InitDp = lists:duplicate(MaxSum + 1, 0),\n    lists:foldl(fun(X, Dp) -> update_dp(X, Dp, Mod) end, [1|InitDp], Nums),\n    SumRange = calculate_sum_range(L, R, Mod),\n\n    SumRange.\n\nupdate_dp(Num, Dp, Mod) ->\n    lists:map(fun({Idx, Val}) ->\n                  NewVal = if Idx >= Num -> (element(Idx - Num + 1, Dp) + Val) rem Mod;\n                             true -> Val\n                           end,\n                  {Idx, NewVal}\n              end, lists:zip(lists:seq(0, length(Dp) - 1), Dp)).\n\ncalculate_sum_range(L, R, Mod) ->\n    DP = update_dp(0, lists:duplicate(R + 1, 0), Mod), % Placeholder for the correct DP update logic\n    lists:foldl(fun(Idx, Acc) when Idx >= L andalso Idx =< R -> (element(Idx + 1, DP) + Acc) rem Mod;\n                   (_, Acc) -> Acc\n                end, 0, lists:seq(0, R))."
}