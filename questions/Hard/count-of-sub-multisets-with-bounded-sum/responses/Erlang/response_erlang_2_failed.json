{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 12: exception error: badarg",
    "full_runtime_error": "Line 12: exception error: badarg\n[{erlang,element,[1,[1,0,0,0]],[{error_info,#{module => erl_erts_errors}}]},\n {solution,'-dp_update/4-fun-0-',4,[{file,\"solution.erl\"},{line,12}]},\n {lists,map_1,2,[{file,\"lists.erl\"},{line,1564}]},\n {lists,map,2,[{file,\"lists.erl\"},{line,1559}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,count_sub_multisets,3,[{file,\"solution.erl\"},{line,6}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,35}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,19}]}]",
    "status_runtime": "N/A",
    "memory": 60040000,
    "question_id": "3091",
    "elapsed_time": 1316,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708361636032,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180071117",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec count_sub_multisets(Nums :: [integer()], L :: integer(), R :: integer()) -> integer().\ncount_sub_multisets(Nums, L, R) ->\n    Mod = 1000000007,\n    Sums = lists:usort(Nums),\n    Max = lists:last(Sums),\n    DP = lists:foldl(fun(X, Acc) -> dp_update(X, Acc, Max, Mod) end, [1 | lists:duplicate(Max, 0)], Sums),\n    Sum = lists:foldl(fun(X, Acc) -> if X >= L, X =< R -> (element(X+1, DP) + Acc) rem Mod; true -> Acc end end, 0, lists:seq(0, Max)),\n    Sum.\n\ndp_update(Num, DP, Max, Mod) ->\n    lists:map(fun({I, Val}) ->\n        if I >= Num -> {I, (element(I - Num + 1, DP) + Val) rem Mod};\n        true -> {I, Val}\n        end\n    end, lists:zip(lists:seq(0, Max), DP))."
}