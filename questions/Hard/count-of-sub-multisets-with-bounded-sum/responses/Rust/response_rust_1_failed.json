{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2300000,
    "question_id": "3091",
    "elapsed_time": 2147,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708361296207,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180064988",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn count_sub_multisets(nums: Vec<i32>, l: i32, r: i32) -> i32 {\n        const MOD: i32 = 1_000_000_007;\n        let max_sum: usize = nums.iter().sum::<i32>() as usize;\n        let mut dp = vec![vec![0; max_sum + 1]; 2];\n        dp[0][0] = 1;\n        \n        for &num in &nums {\n            let (cur, prev) = if dp[0][0] == 1 { (1, 0) } else { (0, 1) };\n            for j in 0..=max_sum {\n                dp[cur][j] = dp[prev][j];\n                if j as i32 >= num {\n                    dp[cur][j] += dp[prev][j - num as usize];\n                    dp[cur][j] %= MOD;\n                }\n            }\n            dp[0][0] = 1;\n        }\n        \n        let mut result = 0;\n        for sum in l..=r {\n            result = (result + dp[dp[0][0] as usize][sum as usize]) % MOD;\n        }\n        result\n    }\n}"
}