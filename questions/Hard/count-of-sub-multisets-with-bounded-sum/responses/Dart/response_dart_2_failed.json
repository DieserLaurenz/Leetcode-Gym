{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 667148000,
    "question_id": "3091",
    "elapsed_time": 5055,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708360727830,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 68,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180055092",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int countSubMultisets(List<int> nums, int l, int r) {\n    const int mod = 1000000007;\n    int maxElement = 20001; // Given constraint +1 for 0-based indexing\n    List<int> freq = List.filled(maxElement, 0);\n    for (int num in nums) {\n      freq[num]++;\n    }\n\n    List<List<int>> dp = List.generate(nums.length + 1, (_) => List.filled(maxElement, 0));\n    dp[0][0] = 1; // Base case: there's one way to make sum 0 with 0 elements\n\n    for (int i = 1; i <= nums.length; i++) {\n      dp[i][0] = (dp[i - 1][0] * 2) % mod; // Empty set and every element can be included or not\n      for (int sum = 1; sum < maxElement; sum++) {\n        dp[i][sum] = dp[i - 1][sum]; // Exclude current element\n        if (sum - nums[i - 1] >= 0) {\n          dp[i][sum] = (dp[i][sum] + dp[i - 1][sum - nums[i - 1]]) % mod; // Include current element\n        }\n      }\n    }\n\n    int result = 0;\n    for (int sum = l; sum <= r; sum++) {\n      result = (result + dp[nums.length][sum]) % mod;\n    }\n    return result;\n  }\n}"
}