{
    "status_code": 12,
    "lang": "elixir",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 985960000,
    "question_id": "3091",
    "elapsed_time": 1587,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[10,7,2,1,1,16,2,8,0,8,4,12,2,0,6,5,9,1,2,15,1,0,11,1,5,24,3,10,31,3]\n107\n109",
    "expected_output": "398180",
    "task_finish_time": 1708361703750,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 506,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180072345",
    "status_msg": "Memory Limit Exceeded",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec count_sub_multisets(nums :: [integer], l :: integer, r :: integer) :: integer\n  def count_sub_multisets(nums, l, r) do\n    nums\n    |> Enum.reduce(%{}, fn x, acc -> Map.update(acc, x, 1, &(&1 + 1)) end)\n    |> Enum.map(fn {k, v} -> Enum.map(0..v, fn i -> k * i end) end)\n    |> cartesian_product()\n    |> Enum.map(&Enum.sum/1)\n    |> Enum.filter(&(l <= &1 and &1 <= r))\n    |> length()\n    |> rem(1_000_000_007)\n  end\n\n  defp cartesian_product(lists) do\n    lists\n    |> Enum.reduce([[]], fn list, acc ->\n      for x <- list, y <- acc, do: [x | y]\n    end)\n  end\nend"
}