{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60268000,
    "question_id": "3091",
    "elapsed_time": 7022,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708361194136,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 94,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1180063150",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n  def countSubMultisets(nums: List[Int], l: Int, r: Int): Int = {\n    val mod = 1000000007\n    val maxSum = nums.sum\n    val dp = Array.fill(maxSum + 1)(0)\n    dp(0) = 1\n\n    for (num <- nums) {\n      for (j <- maxSum to num by -1) {\n        dp(j) = (dp(j) + dp(j - num)) % mod\n      }\n    }\n\n    var result = 0\n    for (i <- l to r) {\n      result = (result + dp(i)) % mod\n    }\n\n    // Adjust for overcounting the zero sum if it's within [l, r]\n    if (l == 0) result = (result - 1 + mod) % mod\n\n    result\n  }\n}"
}