{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59256000,
    "question_id": "3091",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708352186056,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 3,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1179922247",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar countSubMultisets = function(nums, l, r) {\n    const MOD = 1e9 + 7;\n    const maxSum = nums.reduce((a, b) => a + b, 0);\n    const dpPrev = new Array(maxSum + 1).fill(0);\n    const dpCurr = new Array(maxSum + 1).fill(0);\n    dpPrev[0] = 1;\n\n    for (const num of nums) {\n        for (let sum = 0; sum <= maxSum; sum++) {\n            dpCurr[sum] = dpPrev[sum];\n            if (sum >= num) {\n                dpCurr[sum] += dpPrev[sum - num];\n                dpCurr[sum] %= MOD;\n            }\n        }\n        [dpPrev, dpCurr].forEach(arr => dpCurr.fill(0));\n    }\n\n    let count = 0;\n    for (let sum = l; sum <= r; sum++) {\n        count = (count + dpPrev[sum]) % MOD;\n    }\n    return count;\n};"
}