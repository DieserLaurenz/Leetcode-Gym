{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55500000,
    "question_id": "3091",
    "elapsed_time": 4013,
    "compare_result": "0000001001000100000000010000000001101100010010110001000001000000101000100000010001000001000000100001000000000000100000000000000000110000000000000000000000000000000100010000000000000000000000110010000000000000000100000001000010010100010000010000000100101001000001100110100000000100000101000000000100110010000000100010000000000000001100101000010101010100000010000100100000000001000101110000100100000000000001100000000101000000000000000010000001000100000101011000000010001010100001000000000100000001000000010000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,2,3]\n6\n6",
    "expected_output": "1",
    "task_finish_time": 1708352091951,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 94,
    "total_testcases": 643,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1179920823",
    "input_formatted": "[1,2,2,3], 6, 6",
    "input": "[1,2,2,3]\n6\n6",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @param {number} l\n * @param {number} r\n * @return {number}\n */\nvar countSubMultisets = function(nums, l, r) {\n    const MOD = 1e9 + 7;\n    let maxSum = nums.reduce((acc, val) => acc + val, 0);\n    let dp = Array(maxSum + 1).fill(0);\n    dp[0] = 1;\n    for (let num of nums) {\n        for (let i = maxSum; i >= num; i--) {\n            dp[i] = (dp[i] + dp[i - num]) % MOD;\n        }\n    }\n    let total = 0;\n    for (let i = l; i <= r; i++) {\n        total = (total + dp[i]) % MOD;\n    }\n    return total;\n};"
}