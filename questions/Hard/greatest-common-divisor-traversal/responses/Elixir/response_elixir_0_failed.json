{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0",
    "full_runtime_error": "Line 6: ** (ArgumentError) the Access module does not support accessing lists by index, got: 0\nAccessing a list by index is typically discouraged in Elixir, instead we prefer to use the Enum module to manipulate lists as a whole. If you really must access a list element by index, you can Enum.at/1 or the functions in the List module\n    (elixir 1.15.7) lib/access.ex:334: Access.get/3\n    solution.ex:6: anonymous fn/4 in Solution.can_traverse_all_pairs/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    solution.ex:4: Solution.can_traverse_all_pairs/1\n    solution.ex:69: Driver.consume_test_cases/2\n    solution.ex:57: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 76112000,
    "question_id": "2827",
    "elapsed_time": 697,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "true",
    "task_finish_time": 1708514653493,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 925,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181920651",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec can_traverse_all_pairs(nums :: [integer]) :: boolean\n  def can_traverse_all_pairs(nums) do\n    graph = Enum.reduce(0..length(nums)-1, %{}, fn i, acc ->\n      Enum.reduce(0..length(nums)-1, acc, fn j, acc2 ->\n        if gcd(nums[i], nums[j]) > 1, do: Map.update(acc2, i, [j], &[j | &1]), else: acc2\n      end)\n    end)\n\n    connected_components = tarjan(graph)\n\n    Enum.all?(connected_components, fn component ->\n      length(component) == length(nums)\n    end)\n  end\n\n  defp gcd(a, 0), do: a\n  defp gcd(a, b), do: gcd(b, rem(a, b))\n\n  defp tarjan(graph) do\n    {_, _, sccs} = Enum.reduce(graph, {0, %{}, []}, fn {node, _}, {index, indices, sccs} ->\n      if Map.has_key?(indices, node), do: {index, indices, sccs}, else: tarjan_visit(node, graph, index, indices, %{}, [], sccs)\n    end)\n    sccs\n  end\n\n  defp tarjan_visit(v, graph, index, indices, lowlinks, stack, sccs) do\n    indices = Map.put(indices, v, index)\n    lowlinks = Map.put(lowlinks, v, index)\n    stack = [v | stack]\n    index = index + 1\n\n    neighbors = Map.get(graph, v, [])\n    {index, indices, lowlinks, stack} = Enum.reduce(neighbors, {index, indices, lowlinks, stack}, fn w, {index, indices, lowlinks, stack} ->\n      if not Map.has_key?(indices, w) do\n        {index, indices, lowlinks, stack} = tarjan_visit(w, graph, index, indices, lowlinks, stack, sccs)\n        lowlinks = Map.put(lowlinks, v, min(Map.get(lowlinks, v), Map.get(lowlinks, w)))\n        {index, indices, lowlinks, stack}\n      else\n        if Enum.member?(stack, w), do: lowlinks = Map.put(lowlinks, v, min(Map.get(lowlinks, v), indices[w]))\n        {index, indices, lowlinks, stack}\n      end\n    end)\n\n    if indices[v] == lowlinks[v] do\n      {component, rest_stack} = Enum.split_while(stack, &(&1 != v))\n      sccs = [Enum.reverse([v | component]) | sccs]\n      stack = rest_stack\n    end\n\n    {index, indices, lowlinks, stack, sccs}\n  end\nend"
}