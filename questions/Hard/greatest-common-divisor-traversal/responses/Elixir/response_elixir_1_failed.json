{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 6: ** (Protocol.UndefinedError) protocol Enumerable not implemented for {0, 2} of type Tuple",
    "full_runtime_error": "Line 6: ** (Protocol.UndefinedError) protocol Enumerable not implemented for {0, 2} of type Tuple\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:166: Enumerable.reduce/3\n    (elixir 1.15.7) lib/enum.ex:4387: Enum.reverse/1\n    (elixir 1.15.7) lib/enum.ex:1409: Enum.group_by/3\n    solution.ex:6: anonymous fn/4 in Solution.can_traverse_all_pairs/1\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce_range/5\n    (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 76784000,
    "question_id": "2827",
    "elapsed_time": 394,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "true",
    "task_finish_time": 1708514692993,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 925,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181921036",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec can_traverse_all_pairs(nums :: [integer]) :: boolean\n  def can_traverse_all_pairs(nums) do\n    len = length(nums)\n    graph = for i <- 0..len-1, j <- 0..len-1, i != j, gcd(nums |> Enum.at(i), nums |> Enum.at(j)) > 1, do: {i, j}\n    |> Enum.group_by(&elem(&1, 0), &elem(&1, 1))\n    |> Map.new()\n\n    all_nodes = 0..len-1 |> Enum.into(MapSet.new())\n    visited = MapSet.new()\n    Enum.all?(all_nodes, fn node ->\n      reachable = traverse(graph, node, MapSet.new())\n      MapSet.equal?(reachable, all_nodes)\n    end)\n  end\n\n  defp gcd(a, 0), do: a\n  defp gcd(a, b), do: gcd(b, rem(a, b))\n\n  defp traverse(graph, start, visited) do\n    if MapSet.member?(visited, start) do\n      visited\n    else\n      neighbors = Map.get(graph, start, [])\n      Enum.reduce(neighbors, MapSet.put(visited, start), fn neighbor, acc ->\n        traverse(graph, neighbor, acc)\n      end)\n    end\n  end\nend"
}