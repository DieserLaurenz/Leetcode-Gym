{
    "status_code": 15,
    "lang": "kotlin",
    "run_success": false,
    "runtime_error": "Line 8: Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 3",
    "full_runtime_error": "Line 8: Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 3",
    "status_runtime": "N/A",
    "memory": 41084000,
    "question_id": "2827",
    "elapsed_time": 119,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "true",
    "task_finish_time": 1708505674961,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 925,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181818338",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun canTraverseAllPairs(nums: IntArray): Boolean {\n        val n = nums.size\n        val parent = IntArray(n) { it }\n        val size = IntArray(n) { 1 }\n\n        fun find(x: Int): Int {\n            if (parent[x] != x) parent[x] = find(parent[x])\n            return parent[x]\n        }\n\n        fun union(x: Int, y: Int) {\n            var rootX = find(x)\n            var rootY = find(y)\n            if (rootX != rootY) {\n                if (size[rootX] < size[rootY]) {\n                    val temp = rootX\n                    rootX = rootY\n                    rootY = temp\n                }\n                parent[rootY] = rootX\n                size[rootX] += size[rootY]\n            }\n        }\n\n        val primes = Array<MutableList<Int>>(100001) { mutableListOf() }\n        for (i in 2..100000) {\n            if (primes[i].isEmpty()) {\n                for (j in i..100000 step i) {\n                    primes[j].add(i)\n                }\n            }\n        }\n\n        for (i in 0 until n) {\n            for (prime in primes[nums[i]]) {\n                if (primes[prime].isNotEmpty()) {\n                    union(i, primes[prime][0])\n                }\n                primes[prime][0] = i\n            }\n        }\n\n        val root = find(0)\n        for (i in 1 until n) {\n            if (find(i) != root) return false\n        }\n\n        return true\n    }\n}"
}