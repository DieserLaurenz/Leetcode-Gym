{
    "status_code": 10,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "474 ms",
    "memory": 72424000,
    "question_id": "2827",
    "elapsed_time": 599,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708505074669,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 925,
    "total_testcases": 925,
    "runtime_percentile": 25.0,
    "status_memory": "72.4 MB",
    "memory_percentile": 25.0,
    "pretty_lang": "JavaScript",
    "submission_id": "1181811131",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canTraverseAllPairs = function(nums) {\n    const n = nums.length;\n    const parent = Array.from({length: n}, (_, i) => i);\n    const size = Array.from({length: n}, () => 1);\n    \n    const find = (x) => {\n        if (parent[x] !== x) parent[x] = find(parent[x]);\n        return parent[x];\n    };\n    \n    const union = (x, y) => {\n        let rootX = find(x);\n        let rootY = find(y);\n        if (rootX !== rootY) {\n            if (size[rootX] < size[rootY]) [rootX, rootY] = [rootY, rootX];\n            parent[rootY] = rootX;\n            size[rootX] += size[rootY];\n        }\n    };\n    \n    const primes = {};\n    const getPrimes = (x) => {\n        const factors = [];\n        for (let i = 2; i * i <= x; ++i) {\n            if (x % i === 0) {\n                factors.push(i);\n                while (x % i === 0) x /= i;\n            }\n        }\n        if (x > 1) factors.push(x);\n        return factors;\n    };\n    \n    nums.forEach((num, i) => {\n        getPrimes(num).forEach(prime => {\n            if (primes[prime] !== undefined) {\n                union(i, primes[prime]);\n            }\n            primes[prime] = i;\n        });\n    });\n    \n    const root = find(0);\n    for (let i = 1; i < n; i++) {\n        if (find(i) !== root) return false;\n    }\n    \n    return true;\n};"
}