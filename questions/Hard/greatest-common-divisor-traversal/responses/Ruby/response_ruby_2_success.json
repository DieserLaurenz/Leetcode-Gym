{
    "status_code": 10,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "577 ms",
    "memory": 233528000,
    "question_id": "2827",
    "elapsed_time": 758,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708506284969,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 925,
    "total_testcases": 925,
    "runtime_percentile": 100,
    "status_memory": "233.5 MB",
    "memory_percentile": 100,
    "pretty_lang": "Ruby",
    "submission_id": "1181825717",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Boolean}\ndef can_traverse_all_pairs(nums)\n    n = nums.length\n    parent = Array.new(n) { |i| i }\n\n    def find(parent, x)\n        return x if parent[x] == x\n        parent[x] = find(parent, parent[x])\n        parent[x]\n    end\n\n    def union(parent, x, y)\n        px = find(parent, x)\n        py = find(parent, y)\n        parent[px] = py if px != py\n    end\n\n    # Sieve of Eratosthenes to find all primes up to the max number in nums\n    max_num = nums.max\n    primes = Array.new(max_num + 1) { |i| i }\n    (2..Math.sqrt(max_num)).each do |i|\n        if primes[i] == i\n            (i*i).step(max_num, i) do |j|\n                primes[j] = i if primes[j] == j\n            end\n        end\n    end\n\n    # Map each prime to a unique index in nums\n    prime_to_index = {}\n    nums.each_with_index do |num, i|\n        # Factorize the number and union its prime factors\n        while num > 1\n            prime_factor = primes[num]\n            if prime_to_index[prime_factor]\n                union(parent, i, prime_to_index[prime_factor])\n            else\n                prime_to_index[prime_factor] = i\n            end\n            num /= prime_factor while num % prime_factor == 0\n        end\n    end\n\n    # Check if all elements are connected\n    root = find(parent, 0)\n    (1...n).all? { |i| find(parent, i) == root }\nend"
}