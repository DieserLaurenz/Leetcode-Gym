{
    "status_code": 15,
    "lang": "php",
    "run_success": false,
    "runtime_error": "Line 11: PHP Parse error:  syntax error, unexpected token \"use\", expecting \"{\" in solution.php",
    "full_runtime_error": "Line 11: PHP Parse error:  syntax error, unexpected token \"use\", expecting \"{\" in solution.php",
    "status_runtime": "N/A",
    "memory": 20012000,
    "question_id": "2827",
    "elapsed_time": 24,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "true",
    "task_finish_time": 1708505361460,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 925,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181814485",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canTraverseAllPairs($nums) {\n        $n = count($nums);\n        $parent = range(0, max($nums));\n        \n        function find($x) use (&$parent) {\n            while ($x != $parent[$x]) {\n                $parent[$x] = $parent[$parent[$x]];\n                $x = $parent[$x];\n            }\n            return $x;\n        }\n\n        function union($x, $y) use (&$parent, &$find) {\n            $rootX = $find($x);\n            $rootY = $find($y);\n            if ($rootX != $rootY) {\n                $parent[$rootX] = $rootY;\n            }\n        }\n\n        for ($i = 2; $i <= max($nums); $i++) {\n            $first = true;\n            $prev = null;\n            for ($j = $i; $j <= max($nums); $j += $i) {\n                if (isset($nums[$j])) {\n                    if ($first) {\n                        $prev = $j;\n                        $first = false;\n                    } else {\n                        union($prev, $j);\n                        $prev = $j;\n                    }\n                }\n            }\n        }\n\n        $groups = [];\n        foreach ($nums as $num) {\n            $groups[$find($num)] = 1;\n        }\n\n        return count($groups) === 1;\n    }\n}"
}