{
    "status_code": 15,
    "lang": "php",
    "run_success": false,
    "runtime_error": "Line 11: PHP Parse error:  syntax error, unexpected token \"use\", expecting \"{\" in solution.php",
    "full_runtime_error": "Line 11: PHP Parse error:  syntax error, unexpected token \"use\", expecting \"{\" in solution.php",
    "status_runtime": "N/A",
    "memory": 19732000,
    "question_id": "2827",
    "elapsed_time": 170,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[2,3,6]",
    "expected_output": "true",
    "task_finish_time": 1708505273987,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 925,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181813466",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Boolean\n     */\n    function canTraverseAllPairs($nums) {\n        $n = count($nums);\n        $parent = range(0, $n - 1);\n\n        function find($x) use (&$parent) {\n            return $x == $parent[$x] ? $x : $parent[$x] = find($parent[$x]);\n        }\n\n        function union($x, $y) use (&$parent) {\n            $parent[find($x)] = find($y);\n        }\n\n        function gcd($a, $b) {\n            return $b ? gcd($b, $a % $b) : $a;\n        }\n\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = $i + 1; $j < $n; $j++) {\n                if (gcd($nums[$i], $nums[$j]) > 1) {\n                    union($i, $j);\n                }\n            }\n        }\n\n        $root = find(0);\n        for ($i = 1; $i < $n; $i++) {\n            if (find($i) != $root) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
}