{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 87632000,
    "question_id": "2827",
    "elapsed_time": 1933,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[1,1]",
    "expected_output": "false",
    "task_finish_time": 1708506406331,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 923,
    "total_testcases": 925,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181827151",
    "input_formatted": "[1,1]",
    "input": "[1,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def canTraverseAllPairs(nums: Array[Int]): Boolean = {\n        val maxVal = 100000\n        val parent = Array.tabulate(maxVal + 1)(identity)\n\n        def find(x: Int): Int = if (parent(x) == x) x else {\n            parent(x) = find(parent(x))\n            parent(x)\n        }\n\n        def union(x: Int, y: Int): Unit = {\n            val rootX = find(x)\n            val rootY = find(y)\n            if (rootX != rootY) {\n                parent(rootX) = rootY\n            }\n        }\n\n        for (num <- nums.distinct) {\n            for (factor <- 2 to math.sqrt(num).toInt if num % factor == 0) {\n                union(num, factor)\n                union(num, num / factor)\n            }\n        }\n\n        val root = find(nums(0))\n        nums.forall(num => find(num) == root || find(find(num)) == root)\n    }\n}"
}