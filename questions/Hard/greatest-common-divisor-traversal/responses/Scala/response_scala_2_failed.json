{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 81976000,
    "question_id": "2827",
    "elapsed_time": 3064,
    "compare_result
    "code_output": "true",
    "std_output": "",
    "last_testcase": "[42,40,45,42,50,33,30,45,33,45,30,36,44,1,21,10,40,42,42]",
    "expected_output": "false",
    "task_finish_time": 1708506450521,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 920,
    "total_testcases": 925,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181827636",
    "input_formatted": "[42,40,45,42,50,33,30,45,33,45,30,36,44,1,21,10,40,42,42]",
    "input": "[42,40,45,42,50,33,30,45,33,45,30,36,44,1,21,10,40,42,42]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def canTraverseAllPairs(nums: Array[Int]): Boolean = {\n        val maxVal = 100000\n        val parent = Array.tabulate(maxVal + 1)(identity)\n        val primeParent = Array.fill(maxVal + 1)(-1)\n\n        def find(x: Int): Int = if (parent(x) == x) x else {\n            parent(x) = find(parent(x))\n            parent(x)\n        }\n\n        def union(x: Int, y: Int): Unit = {\n            val rootX = find(x)\n            val rootY = find(y)\n            if (rootX != rootY) {\n                parent(rootX) = rootY\n            }\n        }\n\n        nums.foreach { num =>\n            var x = num\n            for (i <- 2 to math.sqrt(num).toInt if x % i == 0) {\n                if (primeParent(i) == -1) primeParent(i) = num\n                else union(primeParent(i), num)\n                while (x % i == 0) x /= i\n            }\n            if (x > 1) { // x is a prime number greater than sqrt(num)\n                if (primeParent(x) == -1) primeParent(x) = num\n                else union(primeParent(x), num)\n            }\n        }\n\n        val groups = nums.map(find).toSet\n        groups.size == 1 || (groups.size == 2 && groups.contains(find(1)))\n    }\n}"
}