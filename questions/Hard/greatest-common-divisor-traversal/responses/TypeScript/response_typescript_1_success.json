{
    "status_code": 10,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "365 ms",
    "memory": 69216000,
    "question_id": "2827",
    "elapsed_time": 432,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708505198811,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 925,
    "total_testcases": 925,
    "runtime_percentile": 100,
    "status_memory": "69.2 MB",
    "memory_percentile": 100,
    "pretty_lang": "TypeScript",
    "submission_id": "1181812556",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "function gcd(a: number, b: number): number {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n}\n\nfunction canTraverseAllPairs(nums: number[]): boolean {\n    const n = nums.length;\n    const parent = new Array(n).fill(0).map((_, index) => index);\n\n    function find(x: number): number {\n        if (parent[x] !== x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n\n    function union(x: number, y: number): void {\n        const rootX = find(x);\n        const rootY = find(y);\n        if (rootX !== rootY) {\n            parent[rootX] = rootY;\n        }\n    }\n\n    const primes = new Map<number, number>();\n    for (let i = 0; i < n; i++) {\n        let num = nums[i];\n        for (let j = 2; j * j <= num; j++) {\n            if (num % j === 0) {\n                if (!primes.has(j)) primes.set(j, i);\n                else union(i, primes.get(j)!);\n                while (num % j === 0) num /= j;\n            }\n        }\n        if (num > 1) {\n            if (!primes.has(num)) primes.set(num, i);\n            else union(i, primes.get(num)!);\n        }\n    }\n\n    const root = find(0);\n    for (let i = 1; i < n; i++) {\n        if (find(i) !== root) return false;\n    }\n    return true;\n}"
}