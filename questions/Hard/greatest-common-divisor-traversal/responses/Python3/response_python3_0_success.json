{
    "status_code": 10,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "5157 ms",
    "memory": 35768000,
    "question_id": "2827",
    "elapsed_time": 5205,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708891155041,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 925,
    "total_testcases": 925,
    "runtime_percentile": 34.375,
    "status_memory": "35.8 MB",
    "memory_percentile": 18.75,
    "pretty_lang": "Python3",
    "submission_id": "1186096957",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom math import gcd\nfrom collections import defaultdict\n\nclass Solution:\n    def canTraverseAllPairs(self, nums: List[int]) -> bool:\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                parent[rootX] = rootY\n        \n        n = len(nums)\n        parent = list(range(n))\n        \n        primes = defaultdict(list)\n        for i, num in enumerate(nums):\n            d = 2\n            while d * d <= num:\n                if num % d == 0:\n                    primes[d].append(i)\n                    while num % d == 0:\n                        num //= d\n                d += 1\n            if num > 1:\n                primes[num].append(i)\n        \n        for _, indices in primes.items():\n            for i in range(1, len(indices)):\n                union(indices[i], indices[i-1])\n        \n        root = find(0)\n        for i in range(1, n):\n            if find(i) != root:\n                return False\n        return True"
}