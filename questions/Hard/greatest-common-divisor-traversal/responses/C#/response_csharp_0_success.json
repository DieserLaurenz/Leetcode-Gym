{
    "status_code": 10,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "498 ms",
    "memory": 84564000,
    "question_id": "2827",
    "elapsed_time": 652,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "",
    "expected_output": "",
    "task_finish_time": 1708504963721,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 925,
    "total_testcases": 925,
    "runtime_percentile": 88.8889,
    "status_memory": "84.6 MB",
    "memory_percentile": 11.111200000000018,
    "pretty_lang": "C#",
    "submission_id": "1181809858",
    "status_msg": "Accepted",
    "state": "SUCCESS",
    "code": "using System;\nusing System.Collections.Generic;\n\npublic class Solution {\n    public bool CanTraverseAllPairs(int[] nums) {\n        int n = nums.Length;\n        var parent = new int[n];\n        for (int i = 0; i < n; i++) parent[i] = i;\n\n        Func<int, int> find = null;\n        find = x => {\n            if (parent[x] != x) parent[x] = find(parent[x]);\n            return parent[x];\n        };\n\n        Action<int, int> union = (x, y) => {\n            int px = find(x);\n            int py = find(y);\n            if (px != py) parent[px] = py;\n        };\n\n        var primes = new Dictionary<int, List<int>>();\n        for (int i = 0; i < n; i++) {\n            int num = nums[i];\n            for (int factor = 2; factor * factor <= num; factor++) {\n                if (num % factor == 0) {\n                    if (!primes.ContainsKey(factor)) primes[factor] = new List<int>();\n                    primes[factor].Add(i);\n                    while (num % factor == 0) num /= factor;\n                }\n            }\n            if (num > 1) {\n                if (!primes.ContainsKey(num)) primes[num] = new List<int>();\n                primes[num].Add(i);\n            }\n        }\n\n        foreach (var list in primes.Values) {\n            for (int i = 1; i < list.Count; i++) {\n                union(list[0], list[i]);\n            }\n        }\n\n        int root = find(0);\n        for (int i = 1; i < n; i++) {\n            if (find(i) != root) return false;\n        }\n        return true;\n    }\n}"
}