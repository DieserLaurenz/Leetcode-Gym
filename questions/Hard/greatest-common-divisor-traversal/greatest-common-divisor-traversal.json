{
    "acRate": 22.835700136707306,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2709",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Greatest Common Divisor Traversal",
    "titleSlug": "greatest-common-divisor-traversal",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Math",
            "id": "VG9waWNUYWdOb2RlOjg=",
            "slug": "math"
        },
        {
            "name": "Union Find",
            "id": "VG9waWNUYWdOb2RlOjIz",
            "slug": "union-find"
        },
        {
            "name": "Number Theory",
            "id": "VG9waWNUYWdOb2RlOjYxMDY3",
            "slug": "number-theory"
        }
    ],
    "hasSolution": true,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     bool canTraverseAllPairs(vector<int>& nums) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public boolean canTraverseAllPairs(int[] nums) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def canTraverseAllPairs(self, nums):         \"\"\"         :type nums: List[int]         :rtype: bool         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def canTraverseAllPairs(self, nums: List[int]) -> bool:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "bool canTraverseAllPairs(int* nums, int numsSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public bool CanTraverseAllPairs(int[] nums) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[]} nums  * @return {boolean}  */ var canTraverseAllPairs = function(nums) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function canTraverseAllPairs(nums: number[]): boolean {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[] $nums      * @return Boolean      */     function canTraverseAllPairs($nums) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func canTraverseAllPairs(_ nums: [Int]) -> Bool {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun canTraverseAllPairs(nums: IntArray): Boolean {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   bool canTraverseAllPairs(List<int> nums) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func canTraverseAllPairs(nums []int) bool {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums # @return {Boolean} def can_traverse_all_pairs(nums)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def canTraverseAllPairs(nums: Array[Int]): Boolean = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn can_traverse_all_pairs(nums: Vec<i32>) -> bool {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (can-traverse-all-pairs nums)   (-> (listof exact-integer?) boolean?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec can_traverse_all_pairs(Nums :: [integer()]) -> boolean(). can_traverse_all_pairs(Nums) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec can_traverse_all_pairs(nums :: [integer]) :: boolean   def can_traverse_all_pairs(nums) do    end end"
        }
    ],
    "content": "You are given a 0-indexed integer array nums, and you are allowed to traverse between its indices. You can traverse between index i and index j, i != j, if and only if gcd(nums[i], nums[j]) > 1, where gcd is the greatest common divisor. Your task is to determine if for every pair of indices i and j in nums, where i < j, there exists a sequence of traversals that can take us from i to j. Return true if it is possible to traverse between all such pairs of indices, or false otherwise.  Example 1:  Input: nums = [2,3,6] Output: true Explanation: In this example, there are 3 possible pairs of indices: (0, 1), (0, 2), and (1, 2). To go from index 0 to index 1, we can use the sequence of traversals 0 -> 2 -> 1, where we move from index 0 to index 2 because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1, and then move from index 2 to index 1 because gcd(nums[2], nums[1]) = gcd(6, 3) = 3 > 1. To go from index 0 to index 2, we can just go directly because gcd(nums[0], nums[2]) = gcd(2, 6) = 2 > 1. Likewise, to go from index 1 to index 2, we can just go directly because gcd(nums[1], nums[2]) = gcd(3, 6) = 3 > 1.  Example 2:  Input: nums = [3,9,5] Output: false Explanation: No sequence of traversals can take us from index 0 to index 2 in this example. So, we return false.  Example 3:  Input: nums = [4,3,12,8] Output: true Explanation: There are 6 possible pairs of indices to traverse between: (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). A valid sequence of traversals exists for each pair, so we return true.   Constraints:  1 <= nums.length <= 105 1 <= nums[i] <= 105  "
}