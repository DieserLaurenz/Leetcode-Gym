{
    "acRate": 15.92764777122319,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2612",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Minimum Reverse Operations",
    "titleSlug": "minimum-reverse-operations",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Breadth-First Search",
            "id": "VG9waWNUYWdOb2RlOjIy",
            "slug": "breadth-first-search"
        },
        {
            "name": "Ordered Set",
            "id": "VG9waWNUYWdOb2RlOjYxMDcw",
            "slug": "ordered-set"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     vector<int> minReverseOperations(int n, int p, vector<int>& banned, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public int[] minReverseOperations(int n, int p, int[] banned, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def minReverseOperations(self, n, p, banned, k):         \"\"\"         :type n: int         :type p: int         :type banned: List[int]         :type k: int         :rtype: List[int]         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def minReverseOperations(self, n: int, p: int, banned: List[int], k: int) -> List[int]:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**  * Note: The returned array must be malloced, assume caller calls free().  */ int* minReverseOperations(int n, int p, int* banned, int bannedSize, int k, int* returnSize){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public int[] MinReverseOperations(int n, int p, int[] banned, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number} n  * @param {number} p  * @param {number[]} banned  * @param {number} k  * @return {number[]}  */ var minReverseOperations = function(n, p, banned, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function minReverseOperations(n: number, p: number, banned: number[], k: number): number[] {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer $n      * @param Integer $p      * @param Integer[] $banned      * @param Integer $k      * @return Integer[]      */     function minReverseOperations($n, $p, $banned, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func minReverseOperations(_ n: Int, _ p: Int, _ banned: [Int], _ k: Int) -> [Int] {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun minReverseOperations(n: Int, p: Int, banned: IntArray, k: Int): IntArray {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   List<int> minReverseOperations(int n, int p, List<int> banned, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func minReverseOperations(n int, p int, banned []int, k int) []int {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer} n # @param {Integer} p # @param {Integer[]} banned # @param {Integer} k # @return {Integer[]} def min_reverse_operations(n, p, banned, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def minReverseOperations(n: Int, p: Int, banned: Array[Int], k: Int): Array[Int] = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn min_reverse_operations(n: i32, p: i32, banned: Vec<i32>, k: i32) -> Vec<i32> {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (min-reverse-operations n p banned k)   (-> exact-integer? exact-integer? (listof exact-integer?) exact-integer? (listof exact-integer?))    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec min_reverse_operations(N :: integer(), P :: integer(), Banned :: [integer()], K :: integer()) -> [integer()]. min_reverse_operations(N, P, Banned, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec min_reverse_operations(n :: integer, p :: integer, banned :: [integer], k :: integer) :: [integer]   def min_reverse_operations(n, p, banned, k) do    end end"
        }
    ],
    "content": "You are given an integer n and an integer p in the range [0, n - 1]. Representing a 0-indexed array arrof length n where all positions are set to 0's, except position p which is set to 1. You are also given an integer array banned containing some positions from the array. For the ith position in banned, arr[banned[i]] = 0, and banned[i] != p. You can perform multiple operations on arr. In an operation, you can choose a subarray with size k and reverse the subarray. However, the 1 in arr should never go to any of the positions in banned. In other words, after each operation arr[banned[i]] remains 0. Return an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible.  A subarray is a contiguous non-empty sequence of elements within an array. The values of ans[i] are independent for all i's. The reverse of an array is an array containing the values in reverse order.   Example 1:  Input: n = 4, p = 0, banned = [1,2], k = 4 Output: [0,-1,-1,1] Explanation: In this case k = 4 so there is only one possible reverse operation we can perform, which is reversing the whole array. Initially, 1 is placed at position 0 so the amount of operations we need for position 0 is 0. We can never place a 1 on the banned positions, so the answer for positions 1 and 2 is -1. Finally, with one reverse operation we can bring the 1 to index 3, so the answer for position 3 is 1.   Example 2:  Input: n = 5, p = 0, banned = [2,4], k = 3 Output: [0,-1,-1,-1,-1] Explanation: In this case the 1 is initially at position 0, so the answer for that position is 0. We can perform reverse operations of size 3. The 1 is currently located at position 0, so we need to reverse the subarray [0, 2] for it to leave that position, but reversing that subarray makes position 2 have a 1, which shouldn't happen. So, we can't move the 1 from position 0, making the result for all the other positions -1.   Example 3:  Input: n = 4, p = 2, banned = [0,1,3], k = 1 Output: [-1,-1,0,-1] Explanation: In this case we can only perform reverse operations of size 1.So the 1 never changes its position.   Constraints:  1 <= n <= 105 0 <= p <= n - 1 0 <= banned.length <= n - 1 0 <= banned[i] <= n - 1 1 <= k <= n banned[i] != p all values in bannedare unique  "
}