{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 17: Char 22: Error: The getter 'Math' isn't defined for the class 'Solution'.",
    "full_runtime_error": "Line 17: Char 22: Error: The getter 'Math' isn't defined for the class 'Solution'.\nTry correcting the name to the name of an existing getter, or defining a getter or field named 'Math'.\n          dp[i][j] = Math.min(dp[i][j], dp[i - 1][l] + cost[l][j - 1]);\n                     ^^^^",
    "status_runtime": "N/A",
    "memory": 147376000,
    "question_id": "2879",
    "elapsed_time": 469,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660258671,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1183626564",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int minimumChanges(String s, int k) {\n    int n = s.length;\n    List<List<int>> dp = List.generate(k + 1, (_) => List.generate(n + 1, (_) => 1 << 20));\n    List<List<int>> cost = List.generate(n, (_) => List.generate(n, (_) => 0));\n\n    for (int len = 2; len <= n; ++len) {\n      for (int i = 0, j = len - 1; j < n; ++i, ++j) {\n        cost[i][j] = cost[i + 1][j - 1] + (s[i] != s[j] ? 1 : 0);\n      }\n    }\n\n    dp[0][0] = 0;\n    for (int i = 1; i <= k; ++i) {\n      for (int j = 1; j <= n; ++j) {\n        for (int l = i - 1; l < j; ++l) {\n          dp[i][j] = Math.min(dp[i][j], dp[i - 1][l] + cost[l][j - 1]);\n        }\n      }\n    }\n\n    return dp[k][n];\n  }\n}"
}