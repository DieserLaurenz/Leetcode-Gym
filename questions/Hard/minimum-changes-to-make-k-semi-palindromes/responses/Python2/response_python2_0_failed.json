{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11540000,
    "question_id": "2879",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "-1",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708902882823,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186200473",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumChanges(self, s, k):\n        n = len(s)\n        \n        def cost(l, r):\n            counts = [0] * 26\n            for i in range(l, r + 1):\n                counts[ord(s[i]) - ord('a')] += 1\n            return (r - l + 1) // 2 - max(counts)\n        \n        def dp(i, k):\n            if k == 1:\n                return cost(0, i)\n            if memo[i][k] != -1:\n                return memo[i][k]\n            min_cost = float('inf')\n            for j in range(k - 1, i):\n                min_cost = min(min_cost, dp(j, k - 1) + cost(j + 1, i))\n            memo[i][k] = min_cost\n            return min_cost\n        \n        memo = [[-1] * (k + 1) for _ in range(n)]\n        return dp(n - 1, k)"
}