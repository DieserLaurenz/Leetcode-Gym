{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11592000,
    "question_id": "2879",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708902926052,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186200814",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def minimumChanges(self, s, k):\n        n = len(s)\n        dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n        dp[0][0] = 0\n\n        for i in range(1, n + 1):\n            for j in range(1, min(k, i) + 1):\n                if j == 1:\n                    dp[i][j] = min(dp[i][j], self.semiPalindromeCost(s[:i]))\n                for l in range(i):\n                    dp[i][j] = min(dp[i][j], dp[l][j - 1] + self.semiPalindromeCost(s[l:i]))\n\n        return dp[n][k]\n\n    def semiPalindromeCost(self, s):\n        cost = 0\n        l = len(s)\n        for d in range(1, l):\n            if l % d == 0:\n                for i in range(d):\n                    count = [0] * 26\n                    for j in range(i, l, d):\n                        count[ord(s[j]) - ord('a')] += 1\n                    cost += sum(count) - max(count)\n                return cost // (l // d)\n        return float('inf')"
}