{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16692000,
    "question_id": "2879",
    "elapsed_time": 11010,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708903073279,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186201909",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n        def semi_palindrome_cost(s):\n            # Function to calculate cost to convert s to a semi-palindrome\n            n = len(s)\n            if n < 2: return 0  # A single character is already a semi-palindrome\n            cost = 0\n            for i in range(n // 2):\n                if s[i] != s[n - i - 1]:\n                    cost += 1\n            return cost\n\n        n = len(s)\n        if k == 1: return semi_palindrome_cost(s)\n\n        # dp[i][j] represents the minimum change to make the first i characters into j semi-palindromes\n        dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n        dp[0][0] = 0  # Base case\n\n        for i in range(1, n + 1):\n            for j in range(1, min(i, k) + 1):\n                if j == 1:\n                    dp[i][j] = semi_palindrome_cost(s[:i])\n                else:\n                    for x in range(j - 1, i):\n                        dp[i][j] = min(dp[i][j], dp[x][j - 1] + semi_palindrome_cost(s[x:i]))\n\n        return dp[n][k]"
}