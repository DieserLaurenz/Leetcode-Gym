{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2376000,
    "question_id": "2879",
    "elapsed_time": 31,
    "compare_result
    "code_output": "-2147483648",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660828668,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1183632799",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_changes(s: String, k: i32) -> i32 {\n        let n = s.len();\n        let k = k as usize;\n        let s: Vec<char> = s.chars().collect();\n        let mut dp = vec![vec![i32::MAX; k + 1]; n + 1];\n        let mut cost = vec![vec![0; n]; n];\n\n        for length in 1..=n {\n            for start in 0..=n - length {\n                let end = start + length - 1;\n                if length == 1 || length == 2 {\n                    cost[start][end] = if s[start] == s[end] { 0 } else { 1 };\n                } else {\n                    cost[start][end] = cost[start + 1][end - 1] + if s[start] == s[end] { 0 } else { 1 };\n                }\n            }\n        }\n\n        dp[0][0] = 0;\n        for i in 1..=n {\n            for j in 1..=k.min(i) {\n                for l in j - 1..i {\n                    dp[i][j] = dp[i][j].min(dp[l][j - 1] + cost[l][i - 1]);\n                }\n            }\n        }\n\n        dp[n][k]\n    }\n}"
}