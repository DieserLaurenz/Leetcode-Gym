{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2380000,
    "question_id": "2879",
    "elapsed_time": 34,
    "compare_result
    "code_output": "-2147483648",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660903215,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1183633557",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn minimum_changes(s: String, k: i32) -> i32 {\n        let n = s.len();\n        let s: Vec<_> = s.chars().collect();\n        let k = k as usize;\n        \n        // Function to calculate the cost to make a substring a semi-palindrome\n        let mut cost = vec![vec![0; n]; n];\n        for i in 0..n {\n            for j in i..n {\n                let mut changes = 0;\n                let (mut left, mut right) = (i, j);\n                while left < right {\n                    if s[left] != s[right] {\n                        changes += 1;\n                    }\n                    left += 1;\n                    right -= 1;\n                }\n                cost[i][j] = changes;\n            }\n        }\n\n        // dp[i][j] represents the minimum changes needed for the first i characters to form j semi-palindromes\n        let mut dp = vec![vec![i32::MAX; k + 1]; n + 1];\n        dp[0][0] = 0;\n        for i in 1..=n {\n            for j in 1..=k.min(i) {\n                for m in j-1..i {\n                    dp[i][j] = dp[i][j].min(dp[m][j-1] + cost[m][i-1]);\n                }\n            }\n        }\n\n        dp[n][k]\n    }\n}"
}