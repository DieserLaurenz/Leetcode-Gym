{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 9: java.lang.StringIndexOutOfBoundsException: String index out of range: 5 (at $anonfun$minimumChanges$2)",
    "full_runtime_error": "java.lang.StringIndexOutOfBoundsException: String index out of range: 5\nLine 658: java.lang.String.charAt (String.java)\nLine 185: scala.collection.StringOps$.apply$extension (StringOps.scala)\nLine 9: Solution$.$anonfun$minimumChanges$2 (solution.scala)\nLine 17: scala.runtime.java8.JFunction2$mcIII$sp.apply (JFunction2$mcIII$sp.scala)\nLine 646: scala.collection.IterableOnceOps.foldLeft (IterableOnce.scala)\nLine 642: scala.collection.IterableOnceOps.foldLeft$ (IterableOnce.scala)\nLine 926: scala.collection.AbstractIterable.foldLeft (Iterable.scala)\nLine 9: Solution$.cost$1 (solution.scala)\nLine 17: Solution$.$anonfun$minimumChanges$5 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 15: Solution$.$anonfun$minimumChanges$4 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 14: Solution$.$anonfun$minimumChanges$3 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 13: Solution$.minimumChanges (solution.scala)\nLine 26: Main$.__helper__ (solution.scala)\nLine 42: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 54224000,
    "question_id": "2879",
    "elapsed_time": 479,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660723889,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183631638",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n  def minimumChanges(s: String, k: Int): Int = {\n    val n = s.length\n    val inf = 1000 * 1000 * 1000\n    val dp = Array.fill(n + 1, k + 1)(inf)\n    dp(0)(0) = 0\n\n    def cost(l: Int, r: Int): Int = {\n      (l until (l + r) / 2).foldLeft(0)((acc, i) => acc + (if (s(i) != s(r - i + l)) 1 else 0))\n    }\n\n    for {\n      i <- 1 to n\n      j <- 1 to k.min(i)\n      l <- 1 to i / j\n    } {\n      dp(i)(j) = dp(i)(j).min(dp(i - l)(j - 1) + cost(i - l, i))\n    }\n\n    dp(n)(k)\n  }\n}"
}