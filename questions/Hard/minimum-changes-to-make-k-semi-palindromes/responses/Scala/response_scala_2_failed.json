{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57032000,
    "question_id": "2879",
    "elapsed_time": 5495,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708660754998,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183631970",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def minimumChanges(s: String, k: Int): Int = {\n        val n = s.length\n        val dp = Array.fill(n + 1, k + 1)(Int.MaxValue / 2)\n        dp(0)(0) = 0\n\n        for {\n            i <- 1 to n\n            j <- 1 to k.min(i)\n            x <- 1 to i\n        } {\n            val substr = s.substring(i - x, i)\n            val changes = (0 until substr.length / 2).count(l => substr(l) != substr(substr.length - l - 1))\n            if (i >= x && j > 0 && dp(i - x)(j - 1) != Int.MaxValue / 2) {\n                dp(i)(j) = dp(i)(j) min (dp(i - x)(j - 1) + changes)\n            }\n        }\n\n        dp(n)(k)\n    }\n}"
}