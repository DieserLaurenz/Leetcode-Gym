{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 72784000,
    "question_id": "2879",
    "elapsed_time": 1851,
    "compare_result
    "code_output": "1000",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660686399,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1183631182",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n  def minimumChanges(s: String, k: Int): Int = {\n    val n = s.length\n    val dp = Array.ofDim[Int](n + 1, k + 1, n / 2 + 1)\n    for (i <- 0 to n; j <- 0 to k; l <- 0 to n / 2) dp(i)(j)(l) = 1000\n    dp(0)(0)(0) = 0\n\n    for (i <- 1 to n; j <- 1 to k; l <- 1 to (i min n / 2)) {\n      val half = l min (i - l)\n      var changes = 0\n      for (m <- 1 to half) {\n        if (s(i - m) != s(i - l - m)) changes += 1\n        dp(i)(j)(l) = dp(i)(j)(l) min (dp(i - l)(j - 1)(l) + changes)\n      }\n      dp(i)(j)(0) = dp(i)(j)(0) min dp(i)(j)(l)\n    }\n\n    (0 to n / 2).map(l => dp(n)(k)(l)).min\n  }\n}"
}