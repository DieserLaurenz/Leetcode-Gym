{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 8: exception error: function_clause",
    "full_runtime_error": "Line 8: exception error: function_clause\n[{solution,solve,\n              [\"abcac\",1,0,\n               [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1]]],\n              [{file,\"solution.erl\"},{line,8}]},\n {solution,'-solve/4-fun-0-',6,[{file,\"solution.erl\"},{line,14}]},\n {lists,foldl,3,[{file,\"lists.erl\"},{line,1594}]},\n {solution,solve,4,[{file,\"solution.erl\"},{line,12}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,53}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,39}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,70}]},\n {init,start_em,1,[]}]",
    "status_runtime": "N/A",
    "memory": 59612000,
    "question_id": "2879",
    "elapsed_time": 1301,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708661171738,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1183636204",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec minimum_changes(S :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_changes(S, K) ->\n    Str = unicode:characters_to_list(S),\n    Len = length(Str),\n    DP = lists:duplicate(K + 1, lists:duplicate(Len + 1, -1)),\n    solve(Str, K, Len, DP).\n\nsolve(_Str, 0, 0, _DP) -> 0;\nsolve(Str, K, L, DP) when K > 0, L > 0 ->\n    case lists:nth(L, lists:nth(K, DP)) of\n        -1 ->\n            Min = lists:foldl(fun(I, Acc) ->\n                                  Changes = changes_required(lists:sublist(Str, I, L - I + 1)),\n                                  MinSoFar = solve(Str, K - 1, I - 1, DP),\n                                  min(Acc, Changes + MinSoFar)\n                              end, infinity, lists:seq(1, L)),\n            Update = lists:update_nth(K, lists:update_nth(L, lists:nth(K, DP), Min), DP),\n            Min;\n        Min -> Min\n    end.\n\nchanges_required(Str) ->\n    Len = length(Str),\n    lists:foldl(fun(I, Acc) ->\n                    if\n                        I > Len div 2 -> Acc;\n                        true -> Acc + case lists:nth(I, Str) == lists:nth(Len - I + 1, Str) of\n                                          true -> 0;\n                                          false -> 1\n                                      end\n                    end\n                end, 0, lists:seq(1, Len div 2)).\n\nmin(A, B) when A < B -> A;\nmin(_, B) -> B."
}