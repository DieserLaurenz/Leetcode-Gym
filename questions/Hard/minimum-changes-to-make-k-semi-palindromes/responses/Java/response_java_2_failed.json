{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 45440000,
    "question_id": "2879",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650216575,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 136,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1183542069",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int minimumChanges(String s, int k) {\n        int n = s.length();\n        int[][] dp = new int[k + 1][n + 1];\n        for (int i = 0; i <= k; i++) {\n            for (int j = 0; j <= n; j++) {\n                dp[i][j] = Integer.MAX_VALUE / 2;\n            }\n        }\n        dp[0][0] = 0;\n\n        for (int i = 1; i <= k; i++) {\n            for (int j = 1; j <= n; j++) {\n                for (int l = 1; l <= j; l++) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j - l] + minChanges(s.substring(j - l, j)));\n                }\n            }\n        }\n\n        return dp[k][n];\n    }\n\n    private int minChanges(String s) {\n        int n = s.length();\n        int res = n / 2;\n        for (int d = 1; d <= n / 2; d++) {\n            if (n % d == 0) {\n                int changes = 0;\n                for (int i = 0; i < d; i++) {\n                    int[] count = new int[26];\n                    int maxFreq = 0;\n                    for (int j = i; j < n; j += d) {\n                        maxFreq = Math.max(maxFreq, ++count[s.charAt(j) - 'a']);\n                    }\n                    changes += (n / d) - maxFreq;\n                }\n                res = Math.min(res, changes);\n            }\n        }\n        return res;\n    }\n}"
}