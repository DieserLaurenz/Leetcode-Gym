{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57284000,
    "question_id": "2879",
    "elapsed_time": 187,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650728928,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1183545920",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumChanges(s: string, k: number): number {\n    const n = s.length;\n    const dp = Array.from({ length: n + 1 }, () => Array(k + 1).fill(Infinity));\n    const cost = Array.from({ length: n }, () => Array(n).fill(0));\n\n    // Precompute the cost of making substrings semi-palindromes\n    for (let i = 0; i < n; i++) {\n        for (let j = i; j < n; j++) {\n            let changes = 0;\n            for (let l = 0; l < (j - i + 1) / 2; l++) {\n                if (s[i + l] !== s[j - l]) changes++;\n            }\n            cost[i][j] = changes;\n        }\n    }\n\n    dp[0][0] = 0; // Base case\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= Math.min(i, k); j++) {\n            if (j == 1) {\n                dp[i][j] = cost[0][i - 1]; // If only one partition is allowed, use the precomputed cost\n            } else {\n                for (let l = j - 1; l < i; l++) {\n                    dp[i][j] = Math.min(dp[i][j], dp[l][j - 1] + cost[l][i - 1]);\n                }\n            }\n        }\n    }\n\n    return dp[n][k];\n}"
}