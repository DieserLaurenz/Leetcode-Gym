{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55452000,
    "question_id": "2879",
    "elapsed_time": 1370,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650763410,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1183546180",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function minimumChanges(s: string, k: number): number {\n    const n = s.length;\n    const dp = Array.from({ length: k + 1 }, () => new Array(n + 1).fill(Infinity));\n    const cost = (start: number, end: number) => {\n        let changes = 0;\n        while (start < end) {\n            if (s[start] !== s[end]) changes++;\n            start++;\n            end--;\n        }\n        return changes;\n    };\n\n    dp[0][0] = 0;\n    for (let i = 1; i <= k; i++) {\n        for (let j = i; j <= n; j++) {\n            if (i == 1) dp[i][j] = cost(0, j - 1);\n            else {\n                for (let l = i - 1; l < j; l++) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i - 1][l] + cost(l, j - 1));\n                }\n            }\n        }\n    }\n\n    return dp[k][n];\n}"
}