{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55824000,
    "question_id": "2879",
    "elapsed_time": 156,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650563057,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1183544728",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {string} s\n * @param {number} k\n * @return {number}\n */\nvar minimumChanges = function(s, k) {\n    const n = s.length;\n    const dp = Array.from({ length: n + 1 }, () => Array(k + 1).fill(Infinity));\n    const cost = Array.from({ length: n }, () => Array(n).fill(0));\n\n    for (let len = 2; len <= n; ++len) {\n        for (let i = 0; i <= n - len; ++i) {\n            const j = i + len - 1;\n            cost[i][j] = cost[i + 1][j - 1] + (s[i] !== s[j] ? 1 : 0);\n        }\n    }\n\n    dp[0][0] = 0;\n    for (let i = 1; i <= n; ++i) {\n        for (let j = 1; j <= Math.min(i, k); ++j) {\n            for (let p = i; p >= j; --p) {\n                dp[i][j] = Math.min(dp[i][j], dp[p - 1][j - 1] + cost[p - 1][i - 1]);\n            }\n        }\n    }\n\n    return dp[n][k];\n};"
}