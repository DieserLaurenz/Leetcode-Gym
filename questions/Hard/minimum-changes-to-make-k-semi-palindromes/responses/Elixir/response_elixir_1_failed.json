{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 20: ** (Protocol.UndefinedError) protocol Enumerable not implemented for 1000 of type Integer",
    "full_runtime_error": "Line 20: ** (Protocol.UndefinedError) protocol Enumerable not implemented for 1000 of type Integer\n    (elixir 1.15.7) lib/enum.ex:1: Enumerable.impl_for!/1\n    (elixir 1.15.7) lib/enum.ex:230: Enumerable.slice/1\n    (elixir 1.15.7) lib/enum.ex:4459: Enum.slice_forward/4\n    (elixir 1.15.7) lib/enum.ex:476: Enum.at/3\n    solution.ex:20: anonymous fn/5 in Solution.minimum_changes/2\n    (elixir 1.15.7) lib/list.ex:1351: List.do_update_at/3\n    (elixir 1.15.7) lib/list.ex:1355: List.do_update_at/3\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 72328000,
    "question_id": "2879",
    "elapsed_time": 472,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708661303523,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1183637524",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec minimum_changes(s :: String.t, k :: integer) :: integer\n  def minimum_changes(s, k) do\n    dp = for _ <- 0..String.length(s), do: for _ <- 0..String.length(s), do: 1000\n    dp = List.update_at(dp, 0, fn _ -> List.update_at(dp |> hd, 0, fn _ -> 0 end) end)\n\n    for i <- 1..String.length(s), j <- i..String.length(s), reduce: dp do\n      dp_acc -> List.update_at(dp_acc, i, fn row ->\n        List.update_at(row, j, fn _ -> calculate_changes(String.slice(s, i-1, j-i+1)) end)\n      end)\n    end\n\n    for _ <- 1..k, reduce: dp do\n      dp_acc ->\n        ndp = Enum.map(0..String.length(s), fn _ -> 1000 end)\n        ndp = List.update_at(ndp, 0, fn _ -> 0 end)\n\n        for j <- 1..String.length(s), l <- 0..j-1, reduce: ndp do\n          ndp_acc -> List.update_at(ndp_acc, j, fn current ->\n            Enum.min([current, Enum.at(ndp_acc, l) + Enum.at(Enum.at(dp_acc, l+1), j)])\n          end)\n        end\n    end\n    |> Enum.at(String.length(s))\n    |> Enum.at(String.length(s))\n  end\n\n  defp calculate_changes(substring) do\n    len = String.length(substring)\n    changes = 0\n\n    for i <- 0..div(len-1, 2), reduce: changes do\n      changes_acc -> if String.at(substring, i) != String.at(substring, len-i-1), do: changes_acc + 1, else: changes_acc\n    end\n  end\nend"
}