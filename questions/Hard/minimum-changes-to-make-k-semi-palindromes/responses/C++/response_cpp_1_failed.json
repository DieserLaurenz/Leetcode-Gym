{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13168000,
    "question_id": "2879",
    "elapsed_time": 73,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650035485,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1183540800",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <limits.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumChanges(string s, int k) {\n        int n = s.length();\n        vector<vector<int>> cost(n, vector<int>(n, 0));\n        // Precompute the cost to make substrings semi-palindromes\n        for (int len = 2; len <= n; ++len) {\n            for (int start = 0; start <= n - len; ++start) {\n                int end = start + len - 1;\n                cost[start][end] = (s[start] != s[end]) + cost[start + 1][end - 1];\n            }\n        }\n\n        // dp[i][j] = minimum cost to partition s[0..j] into i parts\n        vector<vector<int>> dp(k + 1, vector<int>(n, INT_MAX));\n        for (int i = 0; i < n; ++i) {\n            dp[1][i] = cost[0][i]; // Base case: partitioning into 1 part\n        }\n\n        for (int i = 2; i <= k; ++i) { // Number of partitions\n            for (int j = i - 1; j < n; ++j) { // End of the current partition\n                for (int m = i - 2; m < j; ++m) { // End of the previous partition\n                    if (dp[i - 1][m] != INT_MAX) {\n                        dp[i][j] = min(dp[i][j], dp[i - 1][m] + cost[m + 1][j]);\n                    }\n                }\n            }\n        }\n\n        return dp[k][n - 1];\n    }\n};"
}