{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 124064000,
    "question_id": "2879",
    "elapsed_time": 1521,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708650460120,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 61,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1183543916",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MinimumChanges(string s, int k) {\n        int n = s.Length;\n        int[,] dp = new int[k + 1, n + 1];\n        for (int i = 0; i <= k; i++)\n            for (int j = 0; j <= n; j++)\n                dp[i, j] = int.MaxValue / 2;\n        dp[0, 0] = 0;\n\n        for (int i = 1; i <= k; i++)\n            for (int j = 1; j <= n; j++)\n                for (int l = 1; l <= j; l++) {\n                    int cost = 0;\n                    int[] count = new int[26];\n                    int maxFreq = 0;\n                    for (int m = j - l; m < j; m++) {\n                        maxFreq = Math.Max(maxFreq, ++count[s[m] - 'a']);\n                    }\n                    cost = l - maxFreq;\n                    dp[i, j] = Math.Min(dp[i, j], dp[i - 1, j - l] + cost);\n                }\n\n        return dp[k, n];\n    }\n}"
}