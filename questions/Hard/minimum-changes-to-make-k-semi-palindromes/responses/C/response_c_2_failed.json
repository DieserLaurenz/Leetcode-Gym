{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5932000,
    "question_id": "2879",
    "elapsed_time": 95,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650349211,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1183543081",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <limits.h>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n\nint changesToSemiPalindrome(char *s, int start, int end) {\n    int count = 0, mid = (start + end) / 2;\n    for (int i = 0; i <= mid - start; ++i) {\n        if (s[start + i] != s[end - i]) ++count;\n    }\n    return count;\n}\n\nint minimumChanges(char *s, int k) {\n    int n = strlen(s);\n    int dp[n+1][k+1], changes[n][n];\n\n    // Precompute changes required for each substring to become a semi-palindrome\n    for (int i = 0; i < n; ++i) {\n        for (int j = i; j < n; ++j) {\n            changes[i][j] = changesToSemiPalindrome(s, i, j);\n        }\n    }\n\n    // Initialize DP table\n    for (int i = 0; i <= n; ++i) {\n        for (int j = 0; j <= k; ++j) {\n            dp[i][j] = INT_MAX / 2;\n        }\n    }\n    dp[0][0] = 0;\n\n    // Fill DP table\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= k; ++j) {\n            for (int m = 0; m < i; ++m) {\n                dp[i][j] = min(dp[i][j], dp[m][j-1] + changes[m][i-1]);\n            }\n        }\n    }\n\n    return dp[n][k];\n}"
}