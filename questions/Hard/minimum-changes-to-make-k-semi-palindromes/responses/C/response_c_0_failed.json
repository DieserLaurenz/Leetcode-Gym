{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5480000,
    "question_id": "2879",
    "elapsed_time": 619,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650276217,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1183542493",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <string.h>\n#include <limits.h>\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n\nint countChangesForSemiPalindrome(char *s, int start, int end) {\n    int changes = 0;\n    while (start < end) {\n        if (s[start] != s[end]) changes++;\n        start++;\n        end--;\n    }\n    return changes;\n}\n\nint minimumChanges(char *s, int k) {\n    int len = strlen(s);\n    int dp[len+1][k+1];\n    memset(dp, 0x3f, sizeof(dp)); // Initialize with a large value.\n    dp[0][0] = 0; // Base case: 0 changes for 0 characters and 0 parts.\n\n    for (int i = 1; i <= len; ++i) {\n        for (int j = 1; j <= min(i, k); ++j) {\n            for (int p = i; p >= j; --p) { // Partition the string.\n                dp[i][j] = min(dp[i][j], dp[p-1][j-1] + countChangesForSemiPalindrome(s, p-1, i-1));\n            }\n        }\n    }\n    \n    return dp[len][k];\n}"
}