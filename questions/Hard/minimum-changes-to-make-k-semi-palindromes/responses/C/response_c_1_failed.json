{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 5896000,
    "question_id": "2879",
    "elapsed_time": 75,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650308350,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1183542749",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint minimumChanges(char *s, int k) {\n    int n = strlen(s);\n    int dp[201][201] = {0}, cost[201][201] = {0};\n\n    // Precompute the cost of making substrings semi-palindrome\n    for (int len = 2; len <= n; ++len) {\n        for (int i = 0; i + len <= n; ++i) {\n            int j = i + len - 1;\n            cost[i][j] = cost[i + 1][j - 1] + (s[i] != s[j]);\n        }\n    }\n\n    // Initialize dp table\n    for (int i = 0; i < n; ++i) {\n        dp[i][1] = cost[0][i];\n    }\n\n    // Fill dp table\n    for (int l = 2; l <= k; ++l) {\n        for (int i = l - 1; i < n; ++i) {\n            dp[i][l] = 1e9;\n            for (int j = l - 2; j < i; ++j) {\n                dp[i][l] = fmin(dp[i][l], dp[j][l - 1] + cost[j + 1][i]);\n            }\n        }\n    }\n\n    return dp[n - 1][k];\n}"
}