{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 127128000,
    "question_id": "2879",
    "elapsed_time": 4102,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708661041594,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1183634858",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-changes s k)\n  (-> string? exact-integer? exact-integer?)\n  (define (min-changes s)\n    (let loop ((i 0) (j (- (string-length s) 1)) (changes 0))\n      (if (< i j)\n          (loop (+ i 1) (- j 1) (if (char=? (string-ref s i) (string-ref s j)) changes (+ changes 1)))\n          changes)))\n  (define (dp i k memo)\n    (if (= k 1)\n        (min-changes (substring s i))\n        (if (hash-ref memo (cons i k) #f)\n            (hash-ref memo (cons i k))\n            (let loop ((j (+ i 1)) (best +inf.0))\n              (when (< j (string-length s))\n                (let* ((changes (+ (min-changes (substring s i j)) (dp j (- k 1) memo)))\n                       (current (if (< changes best) changes best)))\n                  (hash-set! memo (cons i k) current)\n                  (loop (+ j 1) current)))\n              (hash-ref memo (cons i k) +inf.0)))))\n  (define (solve s k)\n    (let ((memo (make-hash)))\n      (dp 0 k memo)))\n  (solve s k))"
}