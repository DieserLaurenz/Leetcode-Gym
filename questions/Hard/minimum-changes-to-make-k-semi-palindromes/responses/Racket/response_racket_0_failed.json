{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "=: contract violation",
    "full_runtime_error": "=: contract violation\n  expected: number?\n  given: #\\b\n  context...:\n   solution.rkt:10:2: dp\n   solution.rkt:13:8: loop\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:26:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100316000,
    "question_id": "2879",
    "elapsed_time": 240,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660963668,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1183634130",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-changes s k)\n  (-> string? exact-integer? exact-integer?)\n  \n  (define (semi-palindrome-changes str)\n    (let loop ((i 0) (j (- (string-length str) 1)) (changes 0))\n      (if (>= i j)\n          changes\n          (loop (+ i 1) (- j 1) (if (= (string-ref str i) (string-ref str j)) changes (+ changes 1))))))\n\n  (define (dp i k)\n    (if (= k 1)\n        (semi-palindrome-changes (substring s i))\n        (let loop ((j (+ i 1)) (min-changes +inf.0))\n          (if (> j (string-length s)) \n              min-changes\n              (let ((changes (+ (semi-palindrome-changes (substring s i j)) (dp j (- k 1)))))\n                (loop (+ j 1) (if (< changes min-changes) changes min-changes)))))))\n\n  (if (= k 1)\n      (semi-palindrome-changes s)\n      (dp 0 k)))"
}