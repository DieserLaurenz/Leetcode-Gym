{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126980000,
    "question_id": "2879",
    "elapsed_time": 5015,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708661002501,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1183634449",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (minimum-changes s k)\n  (-> string? exact-integer? exact-integer?)\n  \n  (define (calc-changes str)\n    (let loop ((i 0) (j (- (string-length str) 1)) (changes 0))\n      (if (>= i j)\n          changes\n          (loop (+ i 1) (- j 1) (if (char=? (string-ref str i) (string-ref str j)) changes (+ changes 1))))))\n\n  (define memo (make-hash))\n\n  (define (dp start seg)\n    (if (= seg 1)\n        (calc-changes (substring s start))\n        (if (hash-has-key? memo (cons start seg))\n            (hash-ref memo (cons start seg))\n            (let loop ((i (+ start 1)) (min +inf.0))\n              (if (> i (string-length s)) min\n                  (let ((changes (+ (calc-changes (substring s start i)) (dp i (- seg 1)))))\n                    (if (< changes min)\n                        (begin\n                          (hash-set! memo (cons start seg) changes)\n                          (loop (+ i 1) changes))\n                        (loop (+ i 1) min))))))))\n\n  (if (= k 1)\n      (calc-changes s)\n      (dp 0 k)))"
}