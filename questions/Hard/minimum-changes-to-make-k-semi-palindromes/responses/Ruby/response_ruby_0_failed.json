{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211668000,
    "question_id": "2879",
    "elapsed_time": 3204,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708660544382,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 180,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1183629682",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {String} s\n# @param {Integer} k\n# @return {Integer}\ndef minimum_changes(s, k)\n    n = s.length\n    dp = Array.new(k+1) { Array.new(n+1, Float::INFINITY) }\n    dp[0][0] = 0\n\n    (1..k).each do |i|\n        (i..n).each do |j|\n            (i-1...j).each do |m|\n                dp[i][j] = [dp[i][j], dp[i-1][m] + changes_needed(s[m...j])].min\n            end\n        end\n    end\n\n    dp[k][n]\nend\n\ndef changes_needed(subs)\n    len = subs.length\n    changes = 0\n\n    (1...len).each do |d|\n        next unless len % d == 0\n        valid = true\n        (0...d).each do |start|\n            l = start\n            while l + d < len\n                if subs[l] != subs[l+d]\n                    valid = false\n                    break\n                end\n                l += d\n            end\n            break unless valid\n        end\n        if valid\n            (0...len).each_slice(d).with_index do |slice, index|\n                changes += slice.uniq.length - 1 if index < len / d - 1\n            end\n            return changes\n        end\n    end\n\n    # calculate changes for making it a semi-palindrome with d=1 (normal palindrome)\n    (0...len/2).each { |i| changes += 1 if subs[i] != subs[len-i-1] }\n    changes\nend"
}