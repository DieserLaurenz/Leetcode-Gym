{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21352000,
    "question_id": "2879",
    "elapsed_time": 596,
    "compare_result": "111111100101000000100010111101111111101111111111101110100000010101101000000010001111110010101111110110000000000001010110100001001001000000000010000100100010010001110100100010011101110100001010010101000001010100010001101010110011010100100000000100110101010100010011001100000001011100000001000001100000000010110111110111101100001101001010000100000100101000110010010000010001000100000100110010000000110110010010100100000001000001001000100000000000000010000011000001000000000010110010000000000000000000000000000000000000000000111111100110100000000000100011100000",
    "code_output": "1",
    "std_output": "",
    "last_testcase": "\"acba\"\n2",
    "expected_output": "2",
    "task_finish_time": 1708650926328,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 193,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1183547395",
    "input_formatted": "\"acba\", 2",
    "input": "\"acba\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumChanges($s, $k) {\n        $n = strlen($s);\n        $cost = array_fill(0, $n, array_fill(0, $n, 0));\n        for ($len = 2; $len <= $n; $len++) {\n            for ($i = 0; $i <= $n - $len; $i++) {\n                $j = $i + $len - 1;\n                $cost[$i][$j] = $cost[$i + 1][$j - 1] + ($s[$i] != $s[$j] ? 1 : 0);\n            }\n        }\n        \n        $dp = array_fill(0, $n, array_fill(0, $k + 1, PHP_INT_MAX));\n        for ($i = 0; $i < $n; $i++) {\n            $dp[$i][1] = $cost[0][$i];\n        }\n        \n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 2; $j <= min($i + 1, $k); $j++) {\n                for ($p = $j - 2; $p < $i; $p++) {\n                    $dp[$i][$j] = min($dp[$i][$j], $dp[$p][$j - 1] + $cost[$p + 1][$i]);\n                }\n            }\n        }\n        \n        return $dp[$n - 1][$k];\n    }\n}"
}