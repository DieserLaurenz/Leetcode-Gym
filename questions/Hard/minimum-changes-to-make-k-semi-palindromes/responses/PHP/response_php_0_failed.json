{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19996000,
    "question_id": "2879",
    "elapsed_time": 5072,
    "compare_result
    "code_output": "1.5",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708650839669,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 92,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1183546735",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumChanges($s, $k) {\n        $n = strlen($s);\n        $dp = array_fill(0, $k + 1, array_fill(0, $n + 1, PHP_INT_MAX));\n        $dp[0][0] = 0;\n        \n        for ($i = 1; $i <= $k; $i++) {\n            for ($j = $i; $j <= $n; $j++) {\n                for ($l = $i - 1; $l < $j; $l++) {\n                    $dp[$i][$j] = min($dp[$i][$j], $dp[$i - 1][$l] + $this->changesToSemiPalindrome(substr($s, $l, $j - $l)));\n                }\n            }\n        }\n        \n        return $dp[$k][$n];\n    }\n    \n    function changesToSemiPalindrome($s) {\n        $n = strlen($s);\n        $result = PHP_INT_MAX;\n        \n        for ($d = 1; $d < $n; $d++) {\n            if ($n % $d == 0) {\n                $changes = 0;\n                for ($i = 0; $i < $d; $i++) {\n                    $count = [];\n                    for ($j = $i; $j < $n; $j += $d) {\n                        if (!isset($count[$s[$j]])) {\n                            $count[$s[$j]] = 0;\n                        }\n                        $count[$s[$j]]++;\n                    }\n                    $changes += array_sum($count) - max($count);\n                }\n                $result = min($result, $changes);\n            }\n        }\n        \n        return $result === PHP_INT_MAX ? $n / 2 : $result;\n    }\n}"
}