{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 10884000,
    "question_id": "2879",
    "elapsed_time": 3010,
    "compare_result
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660440007,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183628500",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumChanges(s string, k int) int {\n    n := len(s)\n    dp := make([][][]int, n+1)\n    for i := range dp {\n        dp[i] = make([][]int, n+1)\n        for j := range dp[i] {\n            dp[i][j] = make([]int, k+1)\n            for l := range dp[i][j] {\n                dp[i][j][l] = int(1e9)\n            }\n        }\n    }\n    for i := 0; i <= n; i++ {\n        dp[i][i][0] = 0\n    }\n\n    for length := 1; length <= n; length++ {\n        for i := 0; i+length <= n; i++ {\n            j := i + length\n            for d := 1; d <= length; d++ {\n                if length%d == 0 {\n                    changes := 0\n                    for k := i; k < j; k += d {\n                        maxFreq := 0\n                        count := make(map[byte]int)\n                        for l := k; l < j; l += d {\n                            count[s[l]]++\n                            maxFreq = max(maxFreq, count[s[l]])\n                        }\n                        changes += (j-i)/d - maxFreq\n                    }\n                    dp[i][j][1] = min(dp[i][j][1], changes)\n                }\n            }\n            for x := 2; x <= k; x++ {\n                for m := i + 1; m < j; m++ {\n                    for y := 1; y < x; y++ {\n                        dp[i][j][x] = min(dp[i][j][x], dp[i][m][y]+dp[m][j][x-y])\n                    }\n                }\n            }\n        }\n    }\n\n    return dp[0][n][k]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}