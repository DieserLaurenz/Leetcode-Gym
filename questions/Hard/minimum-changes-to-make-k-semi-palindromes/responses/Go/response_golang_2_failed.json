{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7064000,
    "question_id": "2879",
    "elapsed_time": 248,
    "compare_result": "001010000100000000000000001000000000000000000100000000000000000000000000000000100000000000000000000000000000000000000100000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000010000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000101100000000000000000000000001000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660480226,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183628976",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumChanges(s string, k int) int {\n    n := len(s)\n    inf := 1000000\n\n    // Precompute cost for making substrings semi-palindromic\n    cost := make([][]int, n)\n    for i := range cost {\n        cost[i] = make([]int, n)\n        for j := range cost[i] {\n            cost[i][j] = inf\n        }\n    }\n\n    for length := 1; length <= n; length++ {\n        for i := 0; i+length-1 < n; i++ {\n            j := i + length - 1\n            for d := 1; d <= length; d++ {\n                if length%d == 0 {\n                    changes := 0\n                    for offset := 0; offset < d; offset++ {\n                        count := [26]int{}\n                        maxFreq, total := 0, 0\n                        for k := i + offset; k <= j; k += d {\n                            total++\n                            count[s[k]-'a']++\n                            maxFreq = max(maxFreq, count[s[k]-'a'])\n                        }\n                        changes += total - maxFreq\n                    }\n                    cost[i][j] = min(cost[i][j], changes)\n                }\n            }\n        }\n    }\n\n    // DP for partitioning\n    dp := make([][]int, n+1)\n    for i := range dp {\n        dp[i] = make([]int, k+1)\n        for j := range dp[i] {\n            dp[i][j] = inf\n        }\n    }\n    dp[0][0] = 0\n\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= min(i, k); j++ {\n            for l := j - 1; l < i; l++ {\n                dp[i][j] = min(dp[i][j], dp[l][j-1]+cost[l][i-1])\n            }\n        }\n    }\n\n    if dp[n][k] == inf {\n        return -1\n    }\n    return dp[n][k]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}