{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4172000,
    "question_id": "2879",
    "elapsed_time": 765,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "\"abcac\"\n2",
    "expected_output": "1",
    "task_finish_time": 1708660404820,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 61,
    "total_testcases": 558,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183628152",
    "input_formatted": "\"abcac\", 2",
    "input": "\"abcac\"\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func minimumChanges(s string, k int) int {\n    n := len(s)\n    dp := make([][]int, n+1)\n    for i := range dp {\n        dp[i] = make([]int, k+1)\n        for j := range dp[i] {\n            dp[i][j] = 1<<31 - 1\n        }\n    }\n    dp[0][0] = 0\n\n    cost := func(i, j int) int {\n        count := make([]int, 26)\n        maxFreq, changes := 0, 0\n        for l := i; l <= j; l++ {\n            count[s[l]-'a']++\n            maxFreq = max(maxFreq, count[s[l]-'a'])\n        }\n        for _, c := range count {\n            changes += c\n        }\n        return changes - maxFreq\n    }\n\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= min(i, k); j++ {\n            for l := j - 1; l < i; l++ {\n                dp[i][j] = min(dp[i][j], dp[l][j-1]+cost(l, i-1))\n            }\n        }\n    }\n\n    return dp[n][k]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}