{
    "status_code": 15,
    "lang": "csharp",
    "run_success": false,
    "runtime_error": "Unhandled exception. System.IndexOutOfRangeException: Index was outside the bounds of the array.",
    "full_runtime_error": "Unhandled exception. System.IndexOutOfRangeException: Index was outside the bounds of the array.\nAt Solution.MaxFrequencyScore(Int32[] nums, Int64 k)\nAt __DriverSolution__.__Helper__(Int32[] param_1, Int64 param_2)\nAt __Driver__.Main(String[] args)",
    "status_runtime": "N/A",
    "memory": 44264000,
    "question_id": "3196",
    "elapsed_time": 208,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,6,4]\n3",
    "expected_output": "3",
    "task_finish_time": 1709043920617,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 774,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1187768412",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int MaxFrequencyScore(int[] nums, long k) {\n        Array.Sort(nums);\n        long total = 0;\n        int left = 0, maxFreq = 1;\n        for (int right = 0; right < nums.Length; right++) {\n            total += (long)(nums[right] - nums[right - 1]) * (right - left);\n            while (total > k) {\n                total -= nums[right] - nums[left];\n                left++;\n            }\n            maxFreq = Math.Max(maxFreq, right - left + 1);\n        }\n        return maxFreq;\n    }\n}"
}