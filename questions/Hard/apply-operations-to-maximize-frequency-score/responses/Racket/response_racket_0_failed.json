{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "hash-update: contract violation",
    "full_runtime_error": "hash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  context...:\n   solution.rkt:14:2: loop\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:30:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100148000,
    "question_id": "3196",
    "elapsed_time": 235,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,6,4]\n3",
    "expected_output": "3",
    "task_finish_time": 1708267437635,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 774,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178925953",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (max-frequency-score nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  \n  (define (update-frequencies freq-map num change)\n    (let ((current (hash-ref freq-map num 0)))\n      (hash-update freq-map num add1 (lambda () change))))\n\n  (define (calculate-max-frequency freq-map)\n    (foldl (lambda (pair max-freq)\n             (max max-freq (cdr pair)))\n           0\n           (hash->list freq-map)))\n\n  (let loop ((remaining-k k) (freq-map (make-hash)) (sorted-nums (sort nums <)))\n    (if (zero? remaining-k)\n        (calculate-max-frequency freq-map)\n        (let* ((num (first sorted-nums))\n               (next-num (if (null? (rest sorted-nums)) num (second sorted-nums)))\n               (diff (abs (- next-num num)))\n               (possible-increments (min remaining-k diff)))\n          (if (> possible-increments 0)\n              (let ((new-freq-map (update-frequencies freq-map num possible-increments)))\n                (loop (- remaining-k possible-increments) new-freq-map (rest sorted-nums)))\n              (calculate-max-frequency freq-map)))))\n)"
}