{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "hash-update: contract violation",
    "full_runtime_error": "hash-update: contract violation\n  expected: (and/c hash? immutable?)\n  given: '#hash()\n  context...:\n   /usr/share/racket/collects/racket/private/list.rkt:248:4: foldl\n   solution.rkt:1:0: max-frequency-score\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:35:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100100000,
    "question_id": "3196",
    "elapsed_time": 254,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,6,4]\n3",
    "expected_output": "3",
    "task_finish_time": 1708267478589,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 774,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1178926400",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (max-frequency-score nums k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  \n  (define (frequency-map lst)\n    (foldl (lambda (num acc)\n             (hash-update acc num (lambda (v) (add1 v)) 1))\n           (make-hash)\n           lst))\n\n  (define (maximize-score freqs k)\n    (let* ((vals (hash-keys freqs))\n           (sorted-vals (sort vals <))\n           (n (length sorted-vals)))\n      (let loop ((i 0) (max-score 0) (current-k k) (current-max 0))\n        (if (= i n)\n            max-score\n            (let* ((val (list-ref sorted-vals i))\n                   (freq (hash-ref freqs val))\n                   (next-val (if (< (add1 i) n) (list-ref sorted-vals (add1 i)) val))\n                   (diff (- next-val val))\n                   (possible-increments (min current-k (* diff freq)))\n                   (increments (if (> diff 0) (quotient possible-increments freq) current-k))\n                   (new-k (- current-k increments))\n                   (new-max (+ current-max increments)))\n              (loop (add1 i)\n                    (max max-score (min (+ freq new-max) (apply max (hash-values freqs))))\n                    new-k\n                    (if (= val next-val) new-max 0)))))))\n\n  (maximize-score (frequency-map nums) k))"
}