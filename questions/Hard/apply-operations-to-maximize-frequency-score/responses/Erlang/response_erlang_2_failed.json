{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 208604000,
    "question_id": "3196",
    "elapsed_time": 2498,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,6,4]\n3",
    "expected_output": "3",
    "task_finish_time": 1708267635560,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 55,
    "total_testcases": 774,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178928096",
    "input_formatted": "[1,2,6,4], 3",
    "input": "[1,2,6,4]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_frequency_score(Nums :: [integer()], K :: integer()) -> integer().\nmax_frequency_score(Nums, K) ->\n    Sorted = lists:sort(Nums),\n    max_freq_score(Sorted, K, 1, Sorted, 0).\n\nmax_freq_score(_, 0, MaxFreq, _, Acc) ->\n    MaxFreq + Acc;\nmax_freq_score([], _, MaxFreq, _, Acc) ->\n    MaxFreq + Acc;\nmax_freq_score([H|T], K, MaxFreq, [First|_]=Window, Acc) when H =:= First ->\n    max_freq_score(T, K, MaxFreq, Window, Acc + 1);\nmax_freq_score([H|T], K, MaxFreq, [_First|Rest]=Window, Acc) ->\n    NewAcc = if Acc > 0 -> Acc - 1; true -> Acc end,\n    max_freq_score(T, K - 1, max(MaxFreq, Acc + 1), Window, NewAcc)."
}