{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 4: exception error: {badmatch,{6,2,1,4}}",
    "full_runtime_error": "Line 4: exception error: {badmatch,{6,2,1,4}}\n[{solution,max_frequency_score,2,[{file,\"solution.erl\"},{line,4}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,14}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,45}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65612000,
    "question_id": "3196",
    "elapsed_time": 1324,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,6,4]\n3",
    "expected_output": "3",
    "task_finish_time": 1708267600536,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 774,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1178927729",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec max_frequency_score(Nums :: [integer()], K :: integer()) -> integer().\nmax_frequency_score(Nums, K) ->\n    Sorted = lists:sort(Nums),\n    {_, MaxFreq} = lists:foldl(fun(X, {Prev, Max, Count, Acc}) ->\n                                   if \n                                       X =:= Prev -> {X, Max, Count + 1, Acc};\n                                       true -> {X, max(Max, Count), 1, Acc + Count}\n                                   end\n                               end, {hd(Sorted), 0, 1, 0}, Sorted),\n    MaxFreq + K."
}