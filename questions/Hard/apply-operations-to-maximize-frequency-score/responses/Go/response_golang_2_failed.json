{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2056000,
    "question_id": "3196",
    "elapsed_time": 12,
    "compare_result": "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[1,2,6,4]\n3",
    "expected_output": "3",
    "task_finish_time": 1708267033808,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 774,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1178921226",
    "input_formatted": "[1,2,6,4], 3",
    "input": "[1,2,6,4]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxFrequencyScore(nums []int, k int64) int {\n    sort.Ints(nums)\n    maxFreq, left := 1, 0\n    var total int64 = 0\n    for right := 0; right < len(nums); right++ {\n        total += int64(nums[right]-nums[left]) * int64(right-left)\n        for total > k {\n            total -= int64(nums[right] - nums[left])\n            left++\n        }\n        maxFreq = max(maxFreq, right-left+1)\n    }\n    return maxFreq\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}