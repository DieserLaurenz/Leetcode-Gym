{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9396000,
    "question_id": "3196",
    "elapsed_time": 294,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[1,4,4,2,4]\n0",
    "expected_output": "3",
    "task_finish_time": 1708266999626,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 183,
    "total_testcases": 774,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1178920783",
    "input_formatted": "[1,4,4,2,4], 0",
    "input": "[1,4,4,2,4]\n0",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxFrequencyScore(nums []int, k int64) int {\n    sort.Ints(nums)\n    maxFreq := 1\n    left := 0\n    var sum int64 = 0\n    for right := 0; right < len(nums); right++ {\n        sum += int64(nums[right])\n        if int64(maxFreq)*int64(nums[right])-sum <= k {\n            maxFreq = max(maxFreq, right-left+1)\n        } else {\n            sum -= int64(nums[left])\n            left++\n        }\n    }\n    return maxFreq\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}