{
    "status_code": 20,
    "lang": "elixir",
    "run_success": false,
    "compile_error": "error: undefined function while/2 (expected Solution to define such a function or for it to be imported, but none are available)",
    "full_compile_error": "error: undefined function while/2 (expected Solution to define such a function or for it to be imported, but none are available)\nLine 10:   Solution.max_frequency_score/2\n** (CompileError) solution.ex: cannot compile module Solution (errors have been logged)",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3196",
    "task_finish_time": 1708267695971,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1178928781",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_frequency_score(nums :: [integer], k :: integer) :: integer\n  def max_frequency_score(nums, k) do\n    nums\n    |> Enum.sort()\n    |> Enum.reduce({0, 0, 0}, fn x, {max_freq, freq, sum} ->\n      freq = freq + 1\n      sum = sum + x\n\n      while freq > 1 and sum + k < x * freq do\n        sum = sum - Enum.at(nums, -freq)\n        freq = freq - 1\n      end\n\n      max_freq = max(max_freq, freq)\n      {max_freq, freq, sum}\n    end)\n    |> elem(0)\n  end\nend"
}