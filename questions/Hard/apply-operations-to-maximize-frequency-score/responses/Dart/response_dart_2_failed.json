{
    "status_code": 15,
    "lang": "dart",
    "run_success": false,
    "runtime_error": "Line 6: Char 5: Error: 'int64' isn't a type.",
    "full_runtime_error": "Line 6: Char 5: Error: 'int64' isn't a type.\n    int64 total = 0; // Correcting type to int64 for Dart\n    ^^^^^",
    "status_runtime": "N/A",
    "memory": 149976000,
    "question_id": "3196",
    "elapsed_time": 537,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,6,4]\n3",
    "expected_output": "3",
    "task_finish_time": 1708258097108,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 774,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1178826158",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maxFrequencyScore(List<int> nums, int k) {\n    nums.sort();\n    int left = 0;\n    int maxFreq = 1;\n    int64 total = 0; // Correcting type to int64 for Dart\n\n    for (int right = 1; right < nums.length; right++) {\n      total += (nums[right] - nums[right - 1]) * (right - left);\n      while (total > k) {\n        total -= nums[right] - nums[left];\n        left++;\n      }\n      maxFreq = max(maxFreq, right - left + 1);\n    }\n\n    return maxFreq;\n  }\n\n  int max(int a, int b) => a > b ? a : b;\n}"
}