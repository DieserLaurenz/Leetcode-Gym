{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 168144000,
    "question_id": "3211",
    "elapsed_time": 6019,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708495783959,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 180,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181689623",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_maximum_length(nums :: [integer]) :: integer\n  def find_maximum_length(nums) do\n    1..length(nums)\n    |> Enum.reduce_while(0, fn size, acc ->\n      if Enum.any?(Enum.chunk_every(nums, size, size, []), &is_non_decreasing?(&1)) do\n        {:cont, size}\n      else\n        {:halt, acc}\n      end\n    end)\n  end\n\n  defp is_non_decreasing?([head | tail]) do\n    Enum.reduce_while(tail, head, fn x, acc ->\n      if x >= acc do\n        {:cont, x}\n      else\n        {:halt, false}\n      end\n    end) != false\n  end\n  defp is_non_decreasing?([]), do: true\nend"
}