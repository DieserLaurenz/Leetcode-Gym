{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 165532000,
    "question_id": "3211",
    "elapsed_time": 1826,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708495712442,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181688681",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_maximum_length(nums :: [integer]) :: integer\n  def find_maximum_length(nums) do\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce({0, -1, 0}, fn {num, idx}, {max_len, prev_num, len} ->\n      if num >= prev_num do\n        {max(max_len, len + 1), num, len + 1}\n      else\n        {max_len, num, 1}\n      end\n    end)\n    |> elem(0)\n  end\nend"
}