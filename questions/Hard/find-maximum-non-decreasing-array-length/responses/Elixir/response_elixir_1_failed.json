{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 170476000,
    "question_id": "3211",
    "elapsed_time": 1422,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708495738581,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 59,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1181689039",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_maximum_length(nums :: [integer]) :: integer\n  def find_maximum_length(nums) do\n    nums\n    |> Enum.chunk_by(& &1)\n    |> Enum.map(&length(&1))\n    |> Enum.reduce(0, fn x, acc -> max(x, acc) end)\n  end\nend"
}