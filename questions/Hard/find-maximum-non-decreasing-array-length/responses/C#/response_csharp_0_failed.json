{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 50032000,
    "question_id": "3211",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708485924025,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 276,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1181558003",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int FindMaximumLength(int[] nums) {\n        int n = nums.Length;\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1; // Every element is a non-decreasing subarray of length 1 by itself\n            for (int j = 0; j < i; j++) {\n                if (nums[j] <= nums[i]) {\n                    dp[i] = Math.Max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp.Max();\n    }\n}"
}