{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 70716000,
    "question_id": "3211",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708485958871,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 143,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1181558358",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int FindMaximumLength(int[] nums) {\n        int n = nums.Length;\n        if (n == 1) return 1; // If the array has only one element, the maximum length of a non-decreasing array is 1.\n\n        int maxLength = 1; // The minimum non-decreasing array length is 1.\n        for (int i = 0; i < n; i++) {\n            int sum = nums[i];\n            for (int j = i + 1; j < n; j++) {\n                sum += nums[j];\n                if (sum >= nums[j] * (j - i + 1)) { // Check if replacing the subarray [i, j] with its sum keeps the array non-decreasing.\n                    maxLength = Math.Max(maxLength, j - i + 2); // Update maxLength to include the current subarray and the next element.\n                } else {\n                    break; // If the condition is not met, break the inner loop.\n                }\n            }\n        }\n        return maxLength; // Return the maximum length of a non-decreasing array after applying operations.\n    }\n}"
}