{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25468000,
    "question_id": "3211",
    "elapsed_time": 575,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1708494627612,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 60,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181673024",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMaximumLength(_ nums: [Int]) -> Int {\n        var maxLen = 1\n        var sum = [Int: Int]()\n        sum[0] = -1\n        var currSum = 0\n        var nonDecLen = 0\n\n        for i in 0..<nums.count {\n            currSum += nums[i]\n            if let j = sum[currSum] {\n                nonDecLen = max(nonDecLen, i - j)\n            } else {\n                sum[currSum] = i\n            }\n            maxLen = max(maxLen, nonDecLen + 1)\n        }\n        return maxLen\n    }\n}"
}