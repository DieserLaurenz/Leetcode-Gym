{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16584000,
    "question_id": "3211",
    "elapsed_time": 5502,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[4,3,2,6]",
    "expected_output": "3",
    "task_finish_time": 1708494552847,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 86,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181671928",
    "input_formatted": "[4,3,2,6]",
    "input": "[4,3,2,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMaximumLength(_ nums: [Int]) -> Int {\n        var left = 0, right = nums.count, mid = 0\n        while left < right {\n            mid = (left + right + 1) / 2\n            if canFormNonDecreasingArray(nums, mid) {\n                left = mid\n            } else {\n                right = mid - 1\n            }\n        }\n        return left\n    }\n\n    private func canFormNonDecreasingArray(_ nums: [Int], _ length: Int) -> Bool {\n        var dp = Array(repeating: false, count: nums.count + 1)\n        dp[0] = true\n        for i in 1...nums.count {\n            for j in stride(from: i, through: 1, by: -1) {\n                if j >= length {\n                    if dp[i - j] && isNonDecreasing(nums, i - j, i - 1) {\n                        dp[i] = true\n                        break\n                    }\n                }\n            }\n        }\n        return dp[nums.count]\n    }\n\n    private func isNonDecreasing(_ nums: [Int], _ start: Int, _ end: Int) -> Bool {\n        var last = Int.min\n        for i in start...end {\n            if nums[i] < last {\n                return false\n            }\n            last = nums[i]\n        }\n        return true\n    }\n}"
}