{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19196000,
    "question_id": "3211",
    "elapsed_time": 5147,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708494590676,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 276,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1181672466",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMaximumLength(_ nums: [Int]) -> Int {\n        var dp = Array(repeating: 0, count: nums.count)\n        dp[0] = 1\n        var maxLength = 1\n        \n        for i in 1..<nums.count {\n            dp[i] = 1\n            for j in 0..<i {\n                if nums[i] >= nums[j] {\n                    dp[i] = max(dp[i], dp[j] + 1)\n                }\n            }\n            maxLength = max(maxLength, dp[i])\n        }\n        \n        return maxLength\n    }\n}"
}