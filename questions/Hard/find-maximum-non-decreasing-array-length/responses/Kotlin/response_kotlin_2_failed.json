{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66712000,
    "question_id": "3211",
    "elapsed_time": 5183,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708494749385,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181674797",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun findMaximumLength(nums: IntArray): Int {\n        var total = 1\n        var maxLen = 1\n\n        for (i in nums.indices) {\n            var sum = nums[i]\n            for (j in i + 1 until nums.size) {\n                if (nums[j] < nums[j - 1]) break\n                sum += nums[j]\n                total = Math.max(total, j - i + 1)\n            }\n            maxLen = Math.max(maxLen, total)\n        }\n\n        return maxLen\n    }\n}"
}