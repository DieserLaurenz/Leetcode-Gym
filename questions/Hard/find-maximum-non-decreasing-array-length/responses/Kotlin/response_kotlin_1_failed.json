{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66120000,
    "question_id": "3211",
    "elapsed_time": 639,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708494711648,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1181674323",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun findMaximumLength(nums: IntArray): Int {\n        if (nums.size <= 1) return nums.size\n        var maxLength = 1\n        var i = 0\n        while (i < nums.size) {\n            var j = i + 1\n            while (j < nums.size && nums[j] >= nums[j - 1]) {\n                j++\n            }\n            maxLength = maxOf(maxLength, j - i)\n            i = j\n        }\n        return maxLength\n    }\n}"
}