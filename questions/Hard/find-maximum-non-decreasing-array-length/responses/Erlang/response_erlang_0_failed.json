{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 162532000,
    "question_id": "3211",
    "elapsed_time": 2265,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,3,2,6]",
    "expected_output": "3",
    "task_finish_time": 1708495601302,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 149,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1181687079",
    "input_formatted": "[4,3,2,6]",
    "input": "[4,3,2,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_maximum_length(Nums :: [integer()]) -> integer().\nfind_maximum_length(Nums) ->\n    find_maximum_length(Nums, 0, [], 0).\n\nfind_maximum_length([], MaxLen, _, CurrentLen) ->\n    max(MaxLen, CurrentLen);\nfind_maximum_length([H | T], MaxLen, [], 0) ->\n    find_maximum_length(T, MaxLen, [H], 1);\nfind_maximum_length([H | T], MaxLen, [Prev | _] = Acc, CurrentLen) when H >= Prev ->\n    find_maximum_length(T, MaxLen, [H | Acc], CurrentLen + 1);\nfind_maximum_length([_H | T], MaxLen, _Acc, CurrentLen) ->\n    NewMax = max(MaxLen, CurrentLen),\n    find_maximum_length(T, NewMax, [], 0)."
}