{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60676000,
    "question_id": "3211",
    "elapsed_time": 106,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708486109176,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 141,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1181560090",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaximumLength = function(nums) {\n    let left = 0, right = nums.length - 1;\n    while (left < nums.length - 1 && nums[left] <= nums[left + 1]) {\n        left++;\n    }\n    while (right > 0 && nums[right] >= nums[right - 1]) {\n        right--;\n    }\n    if (left >= right) return nums.length;\n    let result = Math.max(left + 1, nums.length - right);\n    for (let i = 0; i <= left; i++) {\n        while (right < nums.length && nums[i] > nums[right]) {\n            right++;\n        }\n        if (right < nums.length) {\n            result = Math.max(result, right - i);\n        }\n    }\n    return result;\n};"
}