{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63568000,
    "question_id": "3211",
    "elapsed_time": 120,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708486076552,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 194,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1181559725",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaximumLength = function(nums) {\n    let decrease = false;\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] < nums[i - 1]) {\n            decrease = true;\n            break;\n        }\n    }\n    if (!decrease) return nums.length;\n\n    return Math.max(...nums.map((_, i) => Math.min(i + 1, nums.length - i))).toString();\n};"
}