{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 69756000,
    "question_id": "3211",
    "elapsed_time": 10334,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708495264641,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 183,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181682188",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findMaximumLength(nums: Array[Int]): Int = {\n        val n = nums.length\n        val dp = Array.fill(n + 1)(1)\n        for (i <- 1 until n) {\n            dp(i) = if (nums(i) >= nums(i - 1)) dp(i - 1) + 1 else 2\n            for (j <- 0 until i - 1) {\n                if (nums(j) <= nums(i)) dp(i) = dp(i) max (dp(j) + 1)\n            }\n        }\n        dp.max\n    }\n}"
}