{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 288200000,
    "question_id": "3211",
    "elapsed_time": 1006,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[4,3,2,6]",
    "expected_output": "3",
    "task_finish_time": 1708495226289,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 175,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1181681765",
    "input_formatted": "[4,3,2,6]",
    "input": "[4,3,2,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findMaximumLength(nums: Array[Int]): Int = {\n        if (nums.length <= 1) return nums.length\n        val dp = Array.ofDim[Int](nums.length, nums.length)\n        for (i <- nums.indices) dp(i)(i) = 1\n\n        for (len <- 2 to nums.length) {\n            for (i <- 0 to nums.length - len) {\n                val j = i + len - 1\n                if (nums(i) <= nums(i + 1)) dp(i)(j) = dp(i + 1)(j) max 2\n                for (k <- i + 1 until j) {\n                    if (nums(i) <= nums(k + 1)) dp(i)(j) = dp(i)(j) max (dp(i)(k) + dp(k + 1)(j))\n                }\n                dp(i)(j) = dp(i)(j) max dp(i)(j - 1)\n            }\n        }\n\n        dp(0)(nums.length - 1)\n    }\n}"
}