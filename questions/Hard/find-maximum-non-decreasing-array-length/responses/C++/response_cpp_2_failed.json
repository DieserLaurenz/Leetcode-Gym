{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 126276000,
    "question_id": "3211",
    "elapsed_time": 181,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708485600584,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 116,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1181554510",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int findMaximumLength(vector<int>& nums) {\n        // Since the question asks for the maximum length of a non-decreasing array that can be made,\n        // and we can replace any subarray by its sum, the only case when we cannot form a non-decreasing\n        // array of length more than 1 is when all elements are equal. In any other case, we can always\n        // perform operations to make the array non-decreasing of length at least 2.\n        // So, we check if all elements are equal, return 1, else return 2.\n        \n        bool allEqual = true;\n        for (int i = 1; i < nums.size() && allEqual; ++i) {\n            if (nums[i] != nums[i-1]) {\n                allEqual = false;\n            }\n        }\n        \n        // If all elements are equal, the only non-decreasing array we can get after operations is of length 1.\n        // Otherwise, we can always find a subarray to perform operation and make the array non-decreasing of\n        // length at least 2.\n        return allEqual ? 1 : 2;\n    }\n};"
}