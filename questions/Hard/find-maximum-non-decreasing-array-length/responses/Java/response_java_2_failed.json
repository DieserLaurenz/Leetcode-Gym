{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63480000,
    "question_id": "3211",
    "elapsed_time": 4013,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708485748481,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 148,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181556105",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int findMaximumLength(int[] nums) {\n        // Initialize maximum length to 1 since any single element is non-decreasing\n        int maxLength = 1;\n        \n        // Iterate through the array to find lengths of non-decreasing subarrays\n        for (int i = 0; i < nums.length; i++) {\n            int count = 1; // Start with count 1 for the current element\n            \n            // Check for non-decreasing order from the current element\n            for (int j = i + 1; j < nums.length; j++) {\n                if (nums[j] >= nums[j - 1]) {\n                    count++;\n                } else {\n                    break; // Break if the sequence becomes decreasing\n                }\n            }\n            \n            // Update maxLength if a longer non-decreasing subarray is found\n            maxLength = Math.max(maxLength, count);\n        }\n        \n        // Check if the entire array can be made non-decreasing by a single operation\n        // This is the case if there is at most one decreasing pair\n        int decreasingPairs = 0;\n        for (int i = 1; i < nums.length && decreasingPairs <= 1; i++) {\n            if (nums[i] < nums[i - 1]) {\n                decreasingPairs++;\n            }\n        }\n        \n        // If the array is already non-decreasing or can be made non-decreasing by one operation\n        if (decreasingPairs <= 1) {\n            return nums.length; // The entire array length is the maximum non-decreasing length\n        }\n        \n        // If more than one operation is needed, the maximum length found is returned\n        return maxLength;\n    }\n}"
}