{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 64420000,
    "display_runtime": "3",
    "question_id": "3211",
    "elapsed_time": 438,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708485696219,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 222,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1181555576",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int findMaximumLength(int[] nums) {\n        int decreaseCount = 0;\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] < nums[i - 1]) {\n                decreaseCount++;\n            }\n        }\n        if (decreaseCount == 0) {\n            return nums.length;\n        } else {\n            return nums.length - decreaseCount;\n        }\n    }\n}"
}