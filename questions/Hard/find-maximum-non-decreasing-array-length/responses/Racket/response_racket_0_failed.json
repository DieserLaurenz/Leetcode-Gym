{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "take: contract violation",
    "full_runtime_error": "take: contract violation\n  expected: exact-nonnegative-integer?\n  given: 3/2\n  argument position: 2nd\n  other arguments...:\n   '(5 2 2)\n  context...:\n   solution.rkt:1:0: find-maximum-length\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:26:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 99952000,
    "question_id": "3211",
    "elapsed_time": 342,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708495454240,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1181685002",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (find-maximum-length nums)\n  (-> (listof exact-integer?) exact-integer?)\n  \n  (define (is-non-decreasing lst)\n    (or (null? lst)\n        (null? (cdr lst))\n        (and (<= (car lst) (cadr lst))\n             (is-non-decreasing (cdr lst)))))\n             \n  (define (max-length lst)\n    (if (is-non-decreasing lst)\n        (length lst)\n        (let loop ((left 0) (right (length lst)) (max-len 0))\n          (if (> left right)\n              max-len\n              (let ((mid (/ (+ left right) 2)))\n                (if (is-non-decreasing (take lst mid))\n                    (loop (add1 mid) right (max mid max-len))\n                    (loop left (sub1 mid) max-len)))))))\n\n  (max-length nums))"
}