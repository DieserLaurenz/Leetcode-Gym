{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60436000,
    "question_id": "3211",
    "elapsed_time": 4010,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708486246200,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 87,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1181561554",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function findMaximumLength(nums: number[]): number {\n    let maxLen = 0;\n    let dp = Array(nums.length).fill(0);\n    for (let i = 0; i < nums.length; i++) {\n        dp[i] = 1; // Each element is a non-decreasing subarray by itself\n        for (let j = 0; j < i; j++) {\n            if (nums[i] >= nums[j]) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        maxLen = Math.max(maxLen, dp[i]);\n    }\n    return nums.length - maxLen + 1;\n}"
}