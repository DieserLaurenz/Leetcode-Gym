{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24228000,
    "question_id": "3211",
    "elapsed_time": 995,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708890770930,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186093002",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findMaximumLength(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Initialize variables to track the current and maximum lengths of non-decreasing subarrays\n        cur_len = max_len = 1\n        for i in range(1, len(nums)):\n            # If the current element is greater than or equal to the previous one,\n            # it contributes to a non-decreasing subarray\n            if nums[i] >= nums[i - 1]:\n                cur_len += 1\n                max_len = max(max_len, cur_len)\n            else:\n                # Reset the current length counter for the next subarray\n                cur_len = 1\n        return max_len"
}