{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 9136000,
    "question_id": "3211",
    "elapsed_time": 179,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708494935135,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 176,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181677588",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func findMaximumLength(nums []int) int {\n    n := len(nums)\n    if n == 1 {\n        return 1\n    }\n\n    // dp[i] represents the maximum length of a non-decreasing subarray ending at index i\n    dp := make([]int, n)\n    for i := range dp {\n        dp[i] = 1 // Each element by itself is a non-decreasing subarray\n    }\n\n    maxLen := 1\n    for i := 1; i < n; i++ {\n        if nums[i] >= nums[i-1] {\n            dp[i] = dp[i-1] + 1\n            if dp[i] > maxLen {\n                maxLen = dp[i]\n            }\n        }\n    }\n\n    // If the entire array is non-decreasing, return its length\n    if maxLen == n {\n        return n\n    }\n\n    // Otherwise, the maximum length of a non-decreasing array can be made is at least 2\n    // because any two adjacent elements can be replaced with their sum\n    return max(2, maxLen)\n}\n\n// Helper function to find maximum of two integers\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}