{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7612000,
    "question_id": "3211",
    "elapsed_time": 3021,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708494999086,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 183,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1181678492",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func findMaximumLength(nums []int) int {\n    n := len(nums)\n    maxLen := 1\n\n    for i := 0; i < n; i++ {\n        for j := i; j < n; j++ {\n            allGreater := true\n            for k := i; k < j; k++ {\n                if nums[k] > nums[k+1] {\n                    allGreater = false\n                    break\n                }\n            }\n            if allGreater {\n                maxLen = max(maxLen, j-i+1)\n            }\n        }\n    }\n\n    return maxLen\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}"
}