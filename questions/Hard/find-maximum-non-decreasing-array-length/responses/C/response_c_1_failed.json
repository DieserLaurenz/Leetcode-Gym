{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7104000,
    "question_id": "3211",
    "elapsed_time": 3012,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "[1,2,3,4]",
    "expected_output": "4",
    "task_finish_time": 1708485833219,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1181557039",
    "input_formatted": "[1,2,3,4]",
    "input": "[1,2,3,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n\nint findMaximumLength(int* nums, int numsSize) {\n    if (numsSize == 1) return 1;\n    int dp[numsSize];\n    int maxLen = 0;\n\n    for (int i = 0; i < numsSize; ++i) dp[i] = 1;\n\n    for (int i = 1; i < numsSize; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (nums[i] >= nums[j]) {\n                dp[i] = (dp[j] + 1 > dp[i]) ? dp[j] + 1 : dp[i];\n            }\n        }\n        maxLen = (dp[i] > maxLen) ? dp[i] : maxLen;\n    }\n\n    // Find the longest sequence of non-decreasing elements\n    int longestNonDecreasing = 1, currentLength = 1;\n    for (int i = 1; i < numsSize; ++i) {\n        if (nums[i - 1] <= nums[i]) {\n            currentLength++;\n            longestNonDecreasing = (currentLength > longestNonDecreasing) ? currentLength : longestNonDecreasing;\n        } else {\n            currentLength = 1;\n        }\n    }\n    \n    return longestNonDecreasing > maxLen ? longestNonDecreasing : 1;\n}"
}