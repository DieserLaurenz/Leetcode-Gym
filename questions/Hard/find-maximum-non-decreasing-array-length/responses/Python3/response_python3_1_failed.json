{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19844000,
    "question_id": "3211",
    "elapsed_time": 11009,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708890936139,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 56,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186094589",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution:\n    def findMaximumLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 1:\n            return 1\n        # Initialize dp array where dp[i] stores the maximum length of a non-decreasing subarray ending at i\n        dp = [1] * n\n        for i in range(1, n):\n            if nums[i] >= nums[i - 1]:\n                dp[i] = dp[i - 1] + 1\n        # Find the maximum length of increasing subarray\n        max_len = max(dp)\n        # Check if the whole array can be made non-decreasing by one operation\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                temp = nums[:i] + [sum(nums[i:j])] + nums[j:]\n                for k in range(1, len(temp)):\n                    if temp[k] < temp[k - 1]:\n                        break\n                else:  # The temp array is non-decreasing\n                    return n\n        return max_len"
}