{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3432000,
    "question_id": "3211",
    "elapsed_time": 30,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708495364435,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 240,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1181683767",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_maximum_length(nums: Vec<i32>) -> i32 {\n        let mut max_len = 1;\n        let mut increasing = vec![1; nums.len()];\n\n        for i in 1..nums.len() {\n            if nums[i] >= nums[i - 1] {\n                increasing[i] = increasing[i - 1] + 1;\n                max_len = max_len.max(increasing[i]);\n            }\n        }\n\n        for i in 0..nums.len() {\n            if i > 0 && nums[i] >= nums[i - 1] {\n                continue;\n            }\n            if i + 1 < nums.len() && nums[i] >= nums[i + 1] {\n                continue;\n            }\n            let left = if i == 0 { 0 } else { increasing[i - 1] };\n            let right = if i == nums.len() - 1 { 0 } else {\n                let mut max_right = 1;\n                let mut current = nums[i + 1];\n                for j in i + 2..nums.len() {\n                    if nums[j] >= current {\n                        max_right += 1;\n                        current = nums[j];\n                    } else {\n                        break;\n                    }\n                }\n                max_right\n            };\n            max_len = max_len.max(left + right);\n        }\n\n        max_len\n    }\n}"
}