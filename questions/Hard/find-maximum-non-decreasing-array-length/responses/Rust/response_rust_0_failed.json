{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3432000,
    "question_id": "3211",
    "elapsed_time": 54,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708495324143,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1181683198",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_maximum_length(nums: Vec<i32>) -> i32 {\n        let mut dp = vec![1; nums.len()];\n        let mut max_len = 1;\n        \n        for i in 1..nums.len() {\n            if nums[i] >= nums[i - 1] {\n                dp[i] = dp[i - 1] + 1;\n                max_len = max_len.max(dp[i]);\n            }\n        }\n        \n        if max_len > 1 { max_len } else { 1 }\n    }\n}"
}