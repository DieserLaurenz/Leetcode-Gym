{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 215728000,
    "question_id": "3211",
    "elapsed_time": 860,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708494876798,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 235,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1181676683",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int findMaximumLength(List<int> nums) {\n    int n = nums.length;\n    List<int> left = List.filled(n, 0);\n    List<int> right = List.filled(n, 0);\n    left[0] = 1;\n    for (int i = 1; i < n; i++) {\n      if (nums[i] >= nums[i - 1]) {\n        left[i] = left[i - 1] + 1;\n      } else {\n        left[i] = 1;\n      }\n    }\n    right[n - 1] = 1;\n    for (int i = n - 2; i >= 0; i--) {\n      if (nums[i] <= nums[i + 1]) {\n        right[i] = right[i + 1] + 1;\n      } else {\n        right[i] = 1;\n      }\n    }\n    int maxLength = 0;\n    for (int i = 0; i < n; i++) {\n      if (i > 0 && i < n - 1 && nums[i - 1] <= nums[i + 1]) {\n        maxLength = max(maxLength, left[i - 1] + right[i + 1]);\n      } else {\n        maxLength = max(maxLength, max(left[i], right[i]));\n      }\n    }\n    return maxLength;\n  }\n\n  int max(int a, int b) => a > b ? a : b;\n}"
}