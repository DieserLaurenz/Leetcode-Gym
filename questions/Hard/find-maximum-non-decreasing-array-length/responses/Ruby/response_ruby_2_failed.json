{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 225512000,
    "question_id": "3211",
    "elapsed_time": 3089,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708495124851,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 189,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1181680312",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef find_maximum_length(nums)\n  return 1 if nums.uniq.size == 1 # If all elements are the same\n  \n  max_len = 0\n  nums.each_with_index do |num, i|\n    # Look for a non-decreasing sequence starting at each index\n    len = 1\n    (i+1...nums.size).each do |j|\n      break if nums[j] < nums[j-1]\n      len += 1\n    end\n    max_len = [max_len, len].max\n  end\n  \n  # Since we can always form a non-decreasing array of at least length 1\n  max_len = [max_len, 1].max\n  \n  max_len\nend"
}