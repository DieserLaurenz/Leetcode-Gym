{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26952000,
    "question_id": "3211",
    "elapsed_time": 543,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708494452994,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 202,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181670601",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaximumLength($nums) {\n        $length = count($nums);\n        $left = array_fill(0, $length, 1);\n        $right = array_fill(0, $length, 1);\n\n        for ($i = 1; $i < $length; $i++) {\n            if ($nums[$i] > $nums[$i - 1]) {\n                $left[$i] = $left[$i - 1] + 1;\n            }\n        }\n\n        for ($i = $length - 2; $i >= 0; $i--) {\n            if ($nums[$i] < $nums[$i + 1]) {\n                $right[$i] = $right[$i + 1] + 1;\n            }\n        }\n\n        $maxLen = 1;\n        for ($i = 0; $i < $length; $i++) {\n            if ($i > 0) {\n                $maxLen = max($maxLen, $left[$i - 1] + 1);\n            }\n            if ($i < $length - 1) {\n                $maxLen = max($maxLen, $right[$i + 1] + 1);\n            }\n            if ($i > 0 && $i < $length - 1 && $nums[$i - 1] < $nums[$i + 1]) {\n                $maxLen = max($maxLen, $left[$i - 1] + $right[$i + 1] + 1);\n            }\n        }\n\n        return $maxLen;\n    }\n}"
}