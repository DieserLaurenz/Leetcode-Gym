{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27152000,
    "question_id": "3211",
    "elapsed_time": 442,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[5,2,2]",
    "expected_output": "1",
    "task_finish_time": 1708494485356,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 190,
    "total_testcases": 553,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1181671018",
    "input_formatted": "[5,2,2]",
    "input": "[5,2,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function findMaximumLength($nums) {\n        $total = count($nums);\n        if ($total <= 1) return $total;\n\n        $maxLen = 1;\n        $currentLen = 1;\n\n        for ($i = 1; $i < $total; $i++) {\n            if ($nums[$i] >= $nums[$i - 1]) {\n                $currentLen++;\n                $maxLen = max($maxLen, $currentLen);\n            } else {\n                $currentLen = 1;\n            }\n        }\n\n        return $maxLen === $total ? $maxLen : max($maxLen, 1);\n    }\n}"
}