{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 35300000,
    "question_id": "3107",
    "elapsed_time": 1539,
    "compare_result
    "code_output": "165",
    "std_output": "",
    "last_testcase": "[[8,5,2],[6,4,1],[9,7,3]]",
    "expected_output": "285",
    "task_finish_time": 1708901905406,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186192966",
    "input_formatted": "[[8,5,2],[6,4,1],[9,7,3]]",
    "input": "[[8,5,2],[6,4,1],[9,7,3]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxSpending(self, values):\n        \"\"\"\n        :type values: List[List[int]]\n        :rtype: int\n        \"\"\"\n        import heapq\n        # Create a max heap for the largest elements in each shop\n        max_heap = []\n        for i in range(len(values)):\n            for j in range(len(values[i])):\n                # Use negative value for max heap in Python, multiply by (j+1) to account for the day multiplier effect\n                heapq.heappush(max_heap, (-values[i][j], j+1))\n        \n        total_cost = 0\n        # Extract the largest available item for each day, considering the day multiplier\n        for day in range(1, len(values) * len(values[0]) + 1):\n            # Pop the largest item from the heap\n            value, multiplier = heapq.heappop(max_heap)\n            # Calculate cost considering the day as multiplier, negate value to convert back from max heap\n            total_cost += -value * day\n        \n        return total_cost"
}