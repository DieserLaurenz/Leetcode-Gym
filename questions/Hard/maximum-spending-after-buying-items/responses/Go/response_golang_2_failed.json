{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13136000,
    "question_id": "3107",
    "elapsed_time": 208,
    "compare_result
    "code_output": "165",
    "std_output": "",
    "last_testcase": "[[8,5,2],[6,4,1],[9,7,3]]",
    "expected_output": "285",
    "task_finish_time": 1708618479128,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183182897",
    "input_formatted": "[[8,5,2],[6,4,1],[9,7,3]]",
    "input": "[[8,5,2],[6,4,1],[9,7,3]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maxSpending(values [][]int) int64 {\n    type item struct {\n        value int\n        day   int\n    }\n\n    var heap []item\n\n    push := func(value, day int) {\n        heap = append(heap, item{value, day})\n        i := len(heap) - 1\n        for i > 0 {\n            p := (i - 1) / 2 // parent\n            if heap[p].value >= heap[i].value {\n                break\n            }\n            heap[i], heap[p] = heap[p], heap[i]\n            i = p\n        }\n    }\n\n    pop := func() item {\n        top := heap[0]\n        last := heap[len(heap)-1]\n        heap[0] = last\n        heap = heap[:len(heap)-1]\n\n        i := 0\n        for {\n            left := 2*i + 1\n            right := 2*i + 2\n            largest := i\n            if left < len(heap) && heap[left].value > heap[largest].value {\n                largest = left\n            }\n            if right < len(heap) && heap[right].value > heap[largest].value {\n                largest = right\n            }\n            if largest == i {\n                break\n            }\n            heap[i], heap[largest] = heap[largest], heap[i]\n            i = largest\n        }\n\n        return top\n    }\n\n    for i, shop := range values {\n        for j := range shop {\n            push(shop[j], i)\n        }\n    }\n\n    var result int64 = 0\n    day := 1\n    for len(heap) > 0 {\n        top := pop()\n        result += int64(top.value) * int64(day)\n        day++\n    }\n\n    return result\n}"
}