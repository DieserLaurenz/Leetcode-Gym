{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 264712000,
    "question_id": "3107",
    "elapsed_time": 574,
    "compare_result
    "code_output": "165",
    "std_output": "",
    "last_testcase": "[[8,5,2],[6,4,1],[9,7,3]]",
    "expected_output": "285",
    "task_finish_time": 1708618564830,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1183184325",
    "input_formatted": "[[8,5,2],[6,4,1],[9,7,3]]",
    "input": "[[8,5,2],[6,4,1],[9,7,3]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[][]} values\n# @return {Integer}\ndef max_spending(values)\n    # Flatten the matrix into an array of all values\n    all_values = values.flatten\n    # Create a hash to store the count of each value\n    value_counts = all_values.each_with_object(Hash.new(0)) { |value, counts| counts[value] += 1 }\n    # Sort the unique values in descending order\n    sorted_values = all_values.uniq.sort.reverse\n    total = 0\n    day = 1\n    sorted_values.each do |value|\n        count = value_counts[value]\n        count.times do\n            total += value * day\n            day += 1\n        end\n    end\n    total\nend"
}