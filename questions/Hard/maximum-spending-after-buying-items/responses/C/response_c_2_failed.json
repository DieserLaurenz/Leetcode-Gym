{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20248000,
    "question_id": "3107",
    "elapsed_time": 264,
    "compare_result
    "code_output": "165",
    "std_output": "",
    "last_testcase": "[[8,5,2],[6,4,1],[9,7,3]]",
    "expected_output": "285",
    "task_finish_time": 1708609095175,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1183046042",
    "input_formatted": "[[8,5,2],[6,4,1],[9,7,3]]",
    "input": "[[8,5,2],[6,4,1],[9,7,3]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdlib.h>\n\n// Function to compare two integers for qsort in descending order\nint compare(const void *a, const void *b) {\n    int l = *(const int*)a;\n    int r = *(const int*)b;\n    return r - l; // For descending order\n}\n\nlong long maxSpending(int** values, int valuesSize, int* valuesColSize) {\n    int total = valuesSize * (*valuesColSize); // Calculate total number of items\n    int* items = malloc(total * sizeof(int)); // Array to store all values flattened\n    int k = 0; // Index for items array\n\n    // Flatten the matrix into the items array\n    for (int i = 0; i < valuesSize; i++) {\n        for (int j = 0; j < valuesColSize[i]; j++) {\n            items[k++] = values[i][j];\n        }\n    }\n\n    // Sort the items array in non-increasing order\n    qsort(items, total, sizeof(int), compare);\n\n    long long maxMoneySpent = 0;\n    // Calculate the maximum money spent\n    for (int day = 1; day <= total; day++) {\n        maxMoneySpent += (long long)items[day - 1] * day;\n    }\n\n    free(items); // Free the allocated memory\n    return maxMoneySpent; // Return the calculated amount\n}"
}