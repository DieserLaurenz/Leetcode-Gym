{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 19992000,
    "question_id": "3107",
    "elapsed_time": 241,
    "compare_result
    "code_output": "165",
    "std_output": "",
    "last_testcase": "[[8,5,2],[6,4,1],[9,7,3]]",
    "expected_output": "285",
    "task_finish_time": 1708609062681,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1183045617",
    "input_formatted": "[[8,5,2],[6,4,1],[9,7,3]]",
    "input": "[[8,5,2],[6,4,1],[9,7,3]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\nint cmp(const void *a, const void *b) {\n    int arg1 = *(const int *)a;\n    int arg2 = *(const int *)b;\n    return (arg2 - arg1);\n}\n\nlong long maxSpending(int** values, int valuesSize, int* valuesColSize) {\n    int totalItems = 0;\n    for (int i = 0; i < valuesSize; i++) {\n        totalItems += valuesColSize[i];\n    }\n    int* sortedValues = (int*)malloc(sizeof(int) * totalItems);\n    int index = 0;\n    for (int i = 0; i < valuesSize; i++) {\n        for (int j = 0; j < valuesColSize[i]; j++) {\n            sortedValues[index++] = values[i][j];\n        }\n    }\n\n    qsort(sortedValues, totalItems, sizeof(int), cmp);\n\n    long long maxSpend = 0;\n    for (int i = 0; i < totalItems; i++) {\n        maxSpend += (long long)sortedValues[i] * (i + 1);\n    }\n\n    free(sortedValues);\n    return maxSpend;\n}"
}