{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "car: contract violation",
    "full_runtime_error": "car: contract violation\n  expected: pair?\n  given: '()\n  context...:\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:379:33\n   solution.rkt:15:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100052000,
    "question_id": "3107",
    "elapsed_time": 335,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[8,5,2],[6,4,1],[9,7,3]]",
    "expected_output": "285",
    "task_finish_time": 1708618942343,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1183190288",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (max-spending values)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  (let* ((flatten (apply append values))\n         (sorted (sort flatten >))\n         (grouped (for/fold ([res '()] [i 0]) ([val (in-list sorted)])\n                    (if (equal? i (length values))\n                        (begin (set! i 1) (cons (list val) res))\n                        (begin (set! i (+ i 1)) (cons (cons val (car res)) (cdr res))))))\n         (max-spent (apply + (map (lambda (group) (apply + (map * group (range 1 (+ 1 (length group)))))) grouped))))\n    max-spent))"
}