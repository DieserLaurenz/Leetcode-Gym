{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 82140000,
    "question_id": "3107",
    "elapsed_time": 645,
    "compare_result
    "code_output": "165",
    "std_output": "",
    "last_testcase": "[[8,5,2],[6,4,1],[9,7,3]]",
    "expected_output": "285",
    "task_finish_time": 1708609154750,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1183046792",
    "input_formatted": "[[8,5,2],[6,4,1],[9,7,3]]",
    "input": "[[8,5,2],[6,4,1],[9,7,3]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "using System;\nusing System.Linq;\n\npublic class Solution {\n    public long MaxSpending(int[][] values) {\n        int m = values.Length, n = values[0].Length;\n        int[] indexes = new int[m]; // Track the current index for each shop\n        long total = 0;\n        int day = 1;\n\n        // Flatten all values and sort them in non-increasing order\n        var allValues = values.SelectMany((value, index) => value.Select((item) => new { Value = item, Shop = index })).ToList();\n        allValues.Sort((a, b) => b.Value.CompareTo(a.Value));\n\n        foreach (var item in allValues) {\n            // Calculate the price based on the day and add to the total\n            total += (long)item.Value * day++;\n        }\n\n        return total;\n    }\n}"
}