{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 177720000,
    "question_id": "3107",
    "elapsed_time": 2225,
    "compare_result
    "code_output": "165",
    "std_output": "",
    "last_testcase": "[[8,5,2],[6,4,1],[9,7,3]]",
    "expected_output": "285",
    "task_finish_time": 1708619039271,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 779,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1183191826",
    "input_formatted": "[[8,5,2],[6,4,1],[9,7,3]]",
    "input": "[[8,5,2],[6,4,1],[9,7,3]]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_spending(Values :: [[integer()]]) -> integer().\nmax_spending(Values) ->\n    Flattened = lists:flatten(Values),\n    Sorted = lists:reverse(lists:sort(Flattened)),\n    FoldFn = fun(Elem, {Sum, Day}) -> {Sum + Elem * Day, Day + 1} end,\n    {Total, _} = lists:foldl(FoldFn, {0, 1}, Sorted),\n    Total."
}