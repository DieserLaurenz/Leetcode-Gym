{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 235876000,
    "question_id": "3139",
    "elapsed_time": 472,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1709005547438,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 152,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1187319091",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef sum_counts(nums)\n    mod = 10**9 + 7\n    n = nums.length\n    last_position = Hash.new(-1)\n    contribution = Array.new(n, 0)\n    sum = 0\n    \n    nums.each_with_index do |num, i|\n        contribution[i] = (i - last_position[num]) * (n - i) % mod\n        sum = (sum + contribution[i]) % mod\n        last_position[num] = i\n    end\n\n    prefix_sum = Array.new(n, 0)\n    prefix_sum[0] = contribution[0]\n    (1...n).each { |i| prefix_sum[i] = (prefix_sum[i-1] + contribution[i]) % mod }\n\n    result = 0\n    last_position.clear\n    nums.each_with_index do |num, i|\n        if last_position[num] != -1\n            result = (result + prefix_sum[i] - prefix_sum[last_position[num]]) % mod\n        else\n            result = (result + prefix_sum[i]) % mod\n        end\n        last_position[num] = i\n    end\n\n    result\nend"
}