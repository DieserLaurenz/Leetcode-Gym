{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 151548000,
    "question_id": "3139",
    "elapsed_time": 1745,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1709006093921,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1187325258",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec sum_counts(Nums :: [integer()]) -> integer().\nsum_counts(Nums) ->\n    Mod = 1000000007,\n    N = length(Nums),\n    Maps = lists:foldl(fun(X, Acc) -> update_maps(X, Acc, Mod) end, {maps:new(), 0}, Nums),\n    {_LastMap, Result} = Maps,\n    Sum = lists:foldl(fun(_, Acc) -> (Acc + Result) rem Mod end, 0, lists:seq(1, N)),\n    Sum.\n\nupdate_maps(Num, {Map, Sum}, Mod) ->\n    case maps:find(Num, Map) of\n        {ok, OldCount} ->\n            NewSum = (Sum + OldCount + 1) rem Mod,\n            {maps:update(Num, OldCount + 1, Map), NewSum};\n        error ->\n            {maps:put(Num, 1, Map), Sum}\n    end."
}