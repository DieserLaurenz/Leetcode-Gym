{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 172056000,
    "question_id": "3139",
    "elapsed_time": 1814,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1709006059116,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1187324840",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec sum_counts(Nums :: [integer()]) -> integer().\nsum_counts(Nums) ->\n    Mod = 1000000007,\n    sum_counts(Nums, #{}, 0, 1, Mod, length(Nums)).\n\nsum_counts([], _, Acc, _, _, _) -> Acc;\nsum_counts([H|T], Map, Acc, Position, Mod, Len) ->\n    {NewMap, Count} = case maps:find(H, Map) of\n        {ok, OldPos} -> \n            {Map#{H => Position}, Position - OldPos};\n        error -> \n            {Map#{H => Position}, 0}\n    end,\n    Remaining = Len - Position,\n    NewAcc = Acc + (Remaining * (2 * Count + 1)) rem Mod,\n    sum_counts(T, NewMap, NewAcc, Position + 1, Mod, Len)."
}