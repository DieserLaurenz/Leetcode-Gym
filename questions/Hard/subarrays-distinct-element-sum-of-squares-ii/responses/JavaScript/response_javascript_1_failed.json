{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 76956000,
    "question_id": "3139",
    "elapsed_time": 162,
    "compare_result": "00000001000001000100000000000000000000001101000000001000000000000100000100010000000010001000000000010011100000100000000000000000000001000000000000000000001100000000000001000000000010000000000011001000000000000010000010010001000000000000000000000000101100000110000000000000000000000000100000101001000000000010000000000000000000000000000000000000000000000000000000100000100000000000000000000000000100000010000001000000000000100000100010010000100000000000000000000100100000000000001000010000000000000000000000000000000000000000000000000000000000",
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1708996033131,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 53,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1187232051",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar sumCounts = function(nums) {\n    const mod = 1e9 + 7;\n    let answer = 0;\n    const lastPosition = new Map();\n    const contribution = new Array(nums.length).fill(0);\n    \n    for (let i = 0; i < nums.length; i++) {\n        if (lastPosition.has(nums[i])) {\n            contribution[i] = (contribution[lastPosition.get(nums[i])] + (i - lastPosition.get(nums[i])) * (nums.length - i)) % mod;\n        } else {\n            contribution[i] = (i + 1) * (nums.length - i) % mod;\n        }\n        lastPosition.set(nums[i], i);\n    }\n    \n    for (let i = 0; i < nums.length; i++) {\n        answer = (answer + contribution[i]) % mod;\n    }\n    \n    return answer;\n};"
}