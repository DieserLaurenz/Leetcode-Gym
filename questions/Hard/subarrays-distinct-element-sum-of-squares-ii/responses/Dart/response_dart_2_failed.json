{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 191160000,
    "question_id": "3139",
    "elapsed_time": 615,
    "compare_result": "00000001000001000100000000000000000000001101000000001000000000000100000100000000000000001000000000010011100000100000000000000000000001000000000000000000000100000000000001000000000010000000000011001000000000000000000010010001000000000000000000000000001100000110000000000000000000000000000000101000000000000010000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000010000000000000000000100000100010010000000000000000000000000100100000000000001000010000000000000000000000000000000000000000000000000000000000",
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1708996744259,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1187237755",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int sumCounts(List<int> nums) {\n    final int mod = 1000000007;\n    int n = nums.length;\n    List<int> prefixSum = List.filled(n + 1, 0);\n    Map<int, int> lastOccurrence = {};\n    List<int> contribution = List.filled(n, 0);\n\n    for (int i = 0; i < n; i++) {\n      if (lastOccurrence.containsKey(nums[i])) {\n        contribution[i] = (contribution[lastOccurrence[nums[i]]!] + i - lastOccurrence[nums[i]]!) % mod;\n      } else {\n        contribution[i] = (i + 1) % mod;\n      }\n      lastOccurrence[nums[i]] = i;\n      prefixSum[i + 1] = (prefixSum[i] + contribution[i]) % mod;\n    }\n\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n      result = (result + prefixSum[i + 1]) % mod;\n    }\n\n    return result;\n  }\n}"
}