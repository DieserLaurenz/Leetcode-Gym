{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 26752000,
    "question_id": "3139",
    "elapsed_time": 262,
    "compare_result
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1708996317496,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 52,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1187234292",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumCounts($nums) {\n        $mod = 1000000007;\n        $n = count($nums);\n        $lastPosition = [];\n        $result = 0;\n        $contrib = 0;\n\n        for ($i = 0; $i < $n; $i++) {\n            if (isset($lastPosition[$nums[$i]])) {\n                $contrib = ($contrib + ($i - $lastPosition[$nums[$i]]) * ($i - $lastPosition[$nums[$i]] + 1) / 2) % $mod;\n            } else {\n                $contrib = ($contrib + ($i + 1) * ($i + 2) / 2) % $mod;\n            }\n            $lastPosition[$nums[$i]] = $i;\n            $result = ($result + $contrib) % $mod;\n        }\n\n        return $result;\n    }\n}"
}