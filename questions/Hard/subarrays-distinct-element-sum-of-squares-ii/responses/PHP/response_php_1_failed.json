{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 32196000,
    "question_id": "3139",
    "elapsed_time": 276,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1708996352307,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1187234591",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function sumCounts($nums) {\n        $mod = 1000000007;\n        $n = count($nums);\n        $ans = 0;\n        $last = array_fill(0, $n, -1);\n        $next = array_fill(0, $n, $n);\n        $map = [];\n\n        for ($i = 0; $i < $n; ++$i) {\n            if (isset($map[$nums[$i]])) {\n                $last[$i] = $map[$nums[$i]];\n            }\n            $map[$nums[$i]] = $i;\n        }\n\n        $map = [];\n\n        for ($i = $n - 1; $i >= 0; --$i) {\n            if (isset($map[$nums[$i]])) {\n                $next[$i] = $map[$nums[$i]];\n            }\n            $map[$nums[$i]] = $i;\n        }\n\n        for ($i = 0; $i < $n; ++$i) {\n            $ans = ($ans + ($i - $last[$i]) * ($next[$i] - $i) % $mod) % $mod;\n        }\n\n        return $ans;\n    }\n}"
}