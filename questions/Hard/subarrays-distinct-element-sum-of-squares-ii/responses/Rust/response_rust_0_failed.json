{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7652000,
    "question_id": "3139",
    "elapsed_time": 51,
    "compare_result
    "code_output": "50",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1709005786683,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1187321833",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn sum_counts(nums: Vec<i32>) -> i32 {\n        let mut last_indices = HashMap::new();\n        let mut contributions = vec![0; nums.len()];\n        let modulo = 1_000_000_007;\n\n        for (i, &num) in nums.iter().enumerate() {\n            if let Some(&last_index) = last_indices.get(&num) {\n                contributions[i] = contributions[last_index] + (i - last_index) as i64;\n            } else {\n                contributions[i] = i as i64 + 1;\n            }\n            last_indices.insert(num, i);\n        }\n\n        let mut result = 0i64;\n        let mut prefix_sums = vec![0i64; nums.len() + 1];\n        for i in 0..nums.len() {\n            prefix_sums[i + 1] = (prefix_sums[i] + contributions[i]) % modulo;\n        }\n\n        for &contribution in contributions.iter() {\n            result = (result + contribution * contribution) % modulo;\n        }\n\n        for i in 1..=nums.len() {\n            result = (result + (prefix_sums[i] * prefix_sums[i] - prefix_sums[i]) % modulo) % modulo;\n        }\n\n        result as i32\n    }\n}"
}