{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6740000,
    "question_id": "3139",
    "elapsed_time": 35,
    "compare_result
    "code_output": "10",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1709005811736,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1187322112",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn sum_counts(nums: Vec<i32>) -> i32 {\n        let modulo = 1_000_000_007;\n        let mut result = 0i64;\n        let mut last_pos = std::collections::HashMap::new();\n        let mut sum = 0i64;\n        let mut sum_sq = 0i64;\n\n        for (i, &num) in nums.iter().enumerate() {\n            let i = i as i64;\n            if let Some(&last) = last_pos.get(&num) {\n                sum = (sum + (i - last) * (i + 1 - last) / 2 % modulo) % modulo;\n            } else {\n                sum = (sum + (i + 1) * (i + 2) / 2 % modulo) % modulo;\n            }\n            sum_sq = (sum_sq + sum) % modulo;\n            last_pos.insert(num, i + 1);\n        }\n\n        result = (sum_sq % modulo + modulo) % modulo;\n        result as i32\n    }\n}"
}