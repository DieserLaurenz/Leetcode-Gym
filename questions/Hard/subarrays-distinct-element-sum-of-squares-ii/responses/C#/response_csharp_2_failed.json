{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79584000,
    "question_id": "3139",
    "elapsed_time": 321,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1708995956444,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1187231404",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int SumCounts(int[] nums) {\n        long sum = 0;\n        int mod = 1000000007;\n        int n = nums.Length;\n        Dictionary<int, int> lastIndex = new Dictionary<int, int>();\n        int[] contribution = new int[n];\n        for (int i = 0; i < n; i++) {\n            contribution[i] = i - (lastIndex.ContainsKey(nums[i]) ? lastIndex[nums[i]] : -1);\n            lastIndex[nums[i]] = i;\n            sum = (sum + contribution[i]) % mod;\n        }\n        lastIndex.Clear();\n        for (int i = n - 1; i >= 0; i--) {\n            int length = (lastIndex.ContainsKey(nums[i]) ? lastIndex[nums[i]] : n) - i;\n            sum = (sum + (long)contribution[i] * (length - 1)) % mod;\n            lastIndex[nums[i]] = i;\n        }\n        return (int)sum;\n    }\n}"
}