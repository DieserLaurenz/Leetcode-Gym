{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79740000,
    "question_id": "3139",
    "elapsed_time": 331,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1708995889815,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1187230842",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int SumCounts(int[] nums) {\n        const int mod = 1000000007;\n        long ans = 0;\n        int n = nums.Length;\n        Dictionary<int, int> lastPos = new Dictionary<int, int>();\n        int[] prev = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (lastPos.ContainsKey(nums[i])) {\n                prev[i] = lastPos[nums[i]] + 1;\n            } else {\n                prev[i] = 0;\n            }\n            lastPos[nums[i]] = i;\n        }\n        int[] next = new int[n];\n        lastPos.Clear();\n        for (int i = n - 1; i >= 0; i--) {\n            if (lastPos.ContainsKey(nums[i])) {\n                next[i] = lastPos[nums[i]] - 1;\n            } else {\n                next[i] = n - 1;\n            }\n            lastPos[nums[i]] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            long left = i - prev[i] + 1;\n            long right = next[i] - i + 1;\n            ans = (ans + left * right) % mod;\n        }\n        return (int)ans;\n    }\n}"
}