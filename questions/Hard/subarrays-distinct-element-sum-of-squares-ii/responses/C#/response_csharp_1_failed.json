{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 80892000,
    "question_id": "3139",
    "elapsed_time": 343,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1708995922504,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1187231123",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int SumCounts(int[] nums) {\n        long mod = 1000000007;\n        int n = nums.Length;\n        Dictionary<int, int> last = new Dictionary<int, int>();\n        int[] left = new int[n];\n        long result = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (last.ContainsKey(nums[i])) {\n                left[i] = last[nums[i]] + 1;\n            }\n            last[nums[i]] = i;\n        }\n\n        last.Clear();\n        int[] right = new int[n];\n        for (int i = n - 1; i >= 0; --i) {\n            if (last.ContainsKey(nums[i])) {\n                right[i] = last[nums[i]] - 1;\n            } else {\n                right[i] = n - 1;\n            }\n            last[nums[i]] = i;\n        }\n\n        for (int i = 0; i < n; ++i) {\n            long lCount = i - left[i] + 1;\n            long rCount = right[i] - i + 1;\n            result = (result + lCount * rCount) % mod;\n        }\n\n        return (int)result;\n    }\n}"
}