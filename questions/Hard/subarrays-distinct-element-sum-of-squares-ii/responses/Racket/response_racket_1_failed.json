{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 134080000,
    "question_id": "3139",
    "elapsed_time": 5015,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1709005947187,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 49,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1187323490",
    "input_formatted": "[1,2,1]",
    "input": "[1,2,1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (sum-counts nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([mod 1000000007])\n    (define (add-mod a b) (modulo (+ a b) mod))\n    (define (mult-mod a b) (modulo (* a b) mod))\n    (let ([n (length nums)])\n      (let loop ([i 0] [result 0] [last-pos (make-hash)] [contribution 0])\n        (if (= i n)\n            result\n            (let* ([num (list-ref nums i)]\n                   [prev-pos (hash-ref last-pos num -1)]\n                   [new-contribution (if (= prev-pos -1)\n                                         (add-mod contribution (+ i 1))\n                                         (add-mod contribution (- (+ i 1) (add-mod prev-pos 1))))])\n              (hash-set! last-pos num i)\n              (loop (add1 i)\n                    (add-mod result new-contribution)\n                    last-pos\n                    new-contribution)))))))"
}