{
    "status_code": 15,
    "lang": "cpp",
    "run_success": false,
    "runtime_error": "Line 1037: Char 34: runtime error: addition of unsigned offset to 0x503000000070 overflowed to 0x503000000068 (stl_vector.h)",
    "full_runtime_error": "Line 1037: Char 34: runtime error: addition of unsigned offset to 0x503000000070 overflowed to 0x503000000068 (stl_vector.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:1046:34",
    "status_runtime": "N/A",
    "memory": 7840000,
    "question_id": "3139",
    "elapsed_time": 11,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,1]",
    "expected_output": "15",
    "task_finish_time": 1708995323877,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 542,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1187226270",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int sumCounts(vector<int>& nums) {\n        const int mod = 1e9 + 7;\n        long long answer = 0;\n        vector<int> last(nums.size() + 1, -1);\n        vector<long long> dp(nums.size() + 1, 0);\n        \n        for (int i = 0; i < nums.size(); ++i) {\n            dp[i + 1] = (2 * dp[i] - dp[last[nums[i]]] + 2 + mod) % mod;\n            answer = (answer + dp[i + 1] - dp[i] + mod) % mod;\n            last[nums[i]] = i;\n        }\n        \n        return (int)answer;\n    }\n};"
}