{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 128252000,
    "question_id": "3197",
    "elapsed_time": 597,
    "compare_result": "110111111111111110111111111110111111101111111111111110111111111111111111111111111111111111111111111111111111101110111111111111111111100110110100111101111011111111101111111110111111111101001011111010100000001000001000010100101111110001100110111111001000101100100011001010001101011000101101001111010100000101110000011110010111110010111001110111011011",
    "code_output": "636",
    "std_output": "",
    "last_testcase": "[500,520,2500,3000]",
    "expected_output": "1020",
    "task_finish_time": 1708629824398,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 249,
    "total_testcases": 348,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1183366103",
    "input_formatted": "[500,520,2500,3000]",
    "input": "[500,520,2500,3000]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (maximum-strong-pair-xor nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([sorted-nums (sort nums >)])\n    (define (max-xor-helper lst max-xor)\n      (match lst\n        [(list) max-xor]\n        [(list x) max-xor]\n        [(list x y rest ...)\n         (if (<= (abs (- x y)) (min x y))\n             (max-xor-helper (cons y rest) (max max-xor (bitwise-xor x y)))\n             max-xor)])\n      )\n    (max-xor-helper sorted-nums 0)))"
}