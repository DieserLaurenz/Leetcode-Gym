{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51676000,
    "question_id": "3197",
    "elapsed_time": 189,
    "compare_result": "010100001011100000101001001010001000000100100000000000100110100000001010000000000001001000000000001001000000100010100100000000001100100010000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]",
    "expected_output": "7",
    "task_finish_time": 1708619229381,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 35,
    "total_testcases": 348,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1183195175",
    "input_formatted": "[1,2,3,4,5]",
    "input": "[1,2,3,4,5]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int maximumStrongPairXor(vector<int>& nums) {\n        int maxXor = 0, n = nums.size();\n        sort(nums.begin(), nums.end());\n        for (int i = 31; i >= 0; --i) {\n            int mask = maxXor | (1 << i);\n            unordered_set<int> prefixes;\n            for (int num : nums) {\n                if ((num & (1 << i)) == 0) continue; // Focus on numbers contributing to the current bit\n                int prefix = num & mask;\n                if (prefixes.count(prefix ^ mask)) {\n                    maxXor = mask;\n                    break;\n                }\n                prefixes.insert(prefix);\n            }\n        }\n        return maxXor;\n    }\n};"
}