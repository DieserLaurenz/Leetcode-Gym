{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 140908000,
    "question_id": "3197",
    "elapsed_time": 2444,
    "compare_result": "100111111100011110010110110000100111101111011110111100000001011111100111111111101110110011110111110111100111001000000010111001110011101100110000000001100001000111111001111011000000100000000100000010100000111110100110100110010100111011111110000001100101000001000110011100000011000100100000111001000000101010000000100000010001100000000011100111111011",
    "code_output": "110",
    "std_output": "",
    "last_testcase": "[10,100]",
    "expected_output": "0",
    "task_finish_time": 1708628831840,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 165,
    "total_testcases": 348,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1183353364",
    "input_formatted": "[10,100]",
    "input": "[10,100]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumStrongPairXor(nums: number[]): number {\n    let max = 0;\n    nums = Array.from(new Set(nums)); // Remove duplicates to optimize\n    nums.sort((a, b) => a - b); // Sort the array\n\n    // Edge case: if array contains 0, check its XOR with all elements\n    if (nums[0] === 0) {\n        for (let num of nums) {\n            max = Math.max(max, num);\n        }\n        return max;\n    }\n\n    // Use trie for storing binary representations of numbers\n    class TrieNode {\n        children: Map<number, TrieNode>;\n        constructor() {\n            this.children = new Map();\n        }\n    }\n\n    let root = new TrieNode();\n\n    // Inserts number into trie\n    const insert = (num: number) => {\n        let node = root;\n        for (let i = 31; i >= 0; i--) {\n            let bit = (num >> i) & 1;\n            if (!node.children.has(bit)) {\n                node.children.set(bit, new TrieNode());\n            }\n            node = node.children.get(bit)!;\n        }\n    };\n\n    // Finds maximum XOR of num with elements in trie\n    const findMaxXor = (num: number) => {\n        let node = root, maxXor = 0;\n        for (let i = 31; i >= 0; i--) {\n            let bit = (num >> i) & 1;\n            if (node.children.has(1 - bit)) {\n                maxXor |= (1 << i);\n                node = node.children.get(1 - bit)!;\n            } else if (node.children.has(bit)) {\n                node = node.children.get(bit)!;\n            }\n        }\n        return maxXor;\n    };\n\n    for (let num of nums) {\n        insert(num); // Insert current number into trie\n        max = Math.max(max, findMaxXor(num)); // Update max XOR with current number\n    }\n\n    return max;\n}"
}