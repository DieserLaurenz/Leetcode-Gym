{
    "status_code": 20,
    "lang": "erlang",
    "run_success": false,
    "compile_error": "Line 8: Char 64: syntax error before: 'xor'",
    "full_compile_error": "Line 8: Char 64: syntax error before: 'xor'\n%    8|                                                     erlang:max(xor(X, Y), AccInner);\n%     |                                                                ^\nLine 1: Char 2: spec for undefined function maximum_strong_pair_xor/1\n%    1| -spec maximum_strong_pair_xor(Nums :: [integer()]) -> integer().\n%     |  ^\nLine 30: Char 13: function maximum_strong_pair_xor/1 undefined\n%   30|       Ret = maximum_strong_pair_xor(Param_1),\n%     |             ^",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "3197",
    "task_finish_time": 1708630051852,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1183369060",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "-spec maximum_strong_pair_xor(Nums :: [integer()]) -> integer().\nmaximum_strong_pair_xor(Nums) ->\n    Sorted = lists:usort(Nums),\n    MaxXor = lists:foldl(fun(X, Acc) -> \n                            lists:foldl(fun(Y, AccInner) -> \n                                            if \n                                                abs(X - Y) =< min(X, Y) -> \n                                                    erlang:max(xor(X, Y), AccInner);\n                                                true -> \n                                                    AccInner\n                                            end\n                                        end, Acc, Sorted)\n                        end, 0, Sorted),\n    MaxXor."
}