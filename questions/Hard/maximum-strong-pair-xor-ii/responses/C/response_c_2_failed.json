{
    "status_code": 15,
    "lang": "c",
    "run_success": false,
    "runtime_error": "AddressSanitizer: stack-overflow on address 0x7ffc204a6248 (pc 0x5654cdfeca1b bp 0x7ffc264042c0 sp 0x7ffc204a5250 T0)",
    "full_runtime_error": "AddressSanitizer:DEADLYSIGNAL\n=================================================================\n==22==ERROR: AddressSanitizer: stack-overflow on address 0x7ffc204a6248 (pc 0x5654cdfeca1b bp 0x7ffc264042c0 sp 0x7ffc204a5250 T0)\n    #2 0x7ff537900d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f)\n    #3 0x7ff537900e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f)\n==22==ABORTING",
    "status_runtime": "N/A",
    "memory": 118604000,
    "question_id": "3197",
    "elapsed_time": 129,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]",
    "expected_output": "7",
    "task_finish_time": 1708619532101,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 348,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1183200121",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n\nint maximumStrongPairXor(int* nums, int numsSize) {\n    int max = 0;\n    for (int i = 0; i < 31; i++) {\n        int mask = (1 << (i + 1)) - 1;\n        int count[1 << (i + 1)];\n        for (int j = 0; j < (1 << (i + 1)); j++) count[j] = 0;\n        for (int j = 0; j < numsSize; j++) {\n            nums[j] &= mask;\n            count[nums[j]]++;\n        }\n        int add = 0;\n        for (int j = 0; j < numsSize; j++) {\n            if (count[nums[j]] > (nums[j] == 0 ? 1 : 2)) {\n                add = 1;\n                break;\n            }\n        }\n        max |= add << i;\n    }\n    return max;\n}"
}