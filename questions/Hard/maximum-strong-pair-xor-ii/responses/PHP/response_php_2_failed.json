{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 94992000,
    "question_id": "3197",
    "elapsed_time": 3685,
    "compare_result": "100111111100011110010110110000100111101111011110111100000001011111100111111111101110110011110111110111100111001000000010111001110011101100110000000001100001000111111001111011000000100000000100000010100000111110100110100110010100111011111110000001100101000001000110011100000011000100100000111001000000101010000000100000010001100000000011100111111011",
    "code_output": "110",
    "std_output": "",
    "last_testcase": "[10,100]",
    "expected_output": "0",
    "task_finish_time": 1708629015984,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 165,
    "total_testcases": 348,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1183355751",
    "input_formatted": "[10,100]",
    "input": "[10,100]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumStrongPairXor($nums) {\n        $maxXor = 0;\n        $trie = new Trie();\n        foreach ($nums as $num) {\n            $trie->insert($num);\n            $maxXor = max($maxXor, $trie->findMax($num));\n        }\n        return $maxXor;\n    }\n}\n\nclass TrieNode {\n    public $children = [];\n}\n\nclass Trie {\n    private $root;\n    \n    public function __construct() {\n        $this->root = new TrieNode();\n    }\n    \n    public function insert($num) {\n        $node = $this->root;\n        for ($i = 31; $i >= 0; $i--) {\n            $bit = ($num >> $i) & 1;\n            if (!isset($node->children[$bit])) {\n                $node->children[$bit] = new TrieNode();\n            }\n            $node = $node->children[$bit];\n        }\n    }\n    \n    public function findMax($num) {\n        $node = $this->root;\n        $maxNum = 0;\n        for ($i = 31; $i >= 0; $i--) {\n            $bit = ($num >> $i) & 1;\n            $oppositeBit = $bit ^ 1;\n            if (isset($node->children[$oppositeBit])) {\n                $maxNum |= (1 << $i);\n                $node = $node->children[$oppositeBit];\n            } else {\n                $node = $node->children[$bit] ?? $node;\n            }\n        }\n        return $maxNum;\n    }\n}"
}