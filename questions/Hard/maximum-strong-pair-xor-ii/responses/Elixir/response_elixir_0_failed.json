{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 11: ** (FunctionClauseError) no function clause matching in Solution.max_xor_pair/2",
    "full_runtime_error": "Line 11: ** (FunctionClauseError) no function clause matching in Solution.max_xor_pair/2\n    The following arguments were given to Solution.max_xor_pair/2:\n        # 1\n        3\n        # 2\n        [2, 3, 4, 5]\n    solution.ex:11: Solution.max_xor_pair/2\n    solution.ex:40: Driver.consume_test_cases/2\n    solution.ex:28: Driver.start/0\n    nofile:1: (file)\n    (stdlib 5.1.1) erl_eval.erl:750: :erl_eval.do_apply/7",
    "status_runtime": "N/A",
    "memory": 75808000,
    "question_id": "3197",
    "elapsed_time": 377,
    "compare_result": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[1,2,3,4,5]",
    "expected_output": "7",
    "task_finish_time": 1708630188605,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 348,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1183370795",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec maximum_strong_pair_xor(nums :: [integer]) :: integer\n  def maximum_strong_pair_xor(nums) do\n    nums\n    |> Enum.sort()\n    |> Enum.uniq()\n    |> max_xor_pair(0)\n\n  end\n\n  defp max_xor_pair([], acc), do: acc\n  defp max_xor_pair([_], acc), do: acc\n  defp max_xor_pair([h | t], acc) do\n    t\n    |> Enum.reduce(acc, fn x, acc ->\n      if abs(h - x) <= min(h, x) do\n        max(acc, Bitwise.bxor(h, x))\n      else\n        acc\n      end\n    end)\n    |> max_xor_pair(t)\n  end\nend"
}