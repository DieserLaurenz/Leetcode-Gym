{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8948000,
    "question_id": "3197",
    "elapsed_time": 363,
    "compare_result": "100111111100011110010110110000100111101111011110111100000001011111100111111111101110110011110111110111100111001000000010111001110011101100110000000001100001000111111001111011000000100000000100000010100000111110100110100110010100111011111110000001100101000001000110011100000011000100100000111001000000101010000000100000010001100000000011100111111011",
    "code_output": "110",
    "std_output": "",
    "last_testcase": "[10,100]",
    "expected_output": "0",
    "task_finish_time": 1708629424987,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 165,
    "total_testcases": 348,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1183361070",
    "input_formatted": "[10,100]",
    "input": "[10,100]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func maximumStrongPairXor(nums []int) int {\n    maxResult := 0\n    for i := 31; i >= 0; i-- {\n        maxResult |= 1 << i\n        prefixes := make(map[int]bool)\n        for _, num := range nums {\n            prefixes[num&maxResult] = true\n        }\n        candidate := maxResult\n        for prefix := range prefixes {\n            if prefixes[candidate^prefix] {\n                maxResult = candidate\n                break\n            } else {\n                // Undo the last bit set to try a smaller number in the next iteration\n                maxResult &= ^(1 << i)\n            }\n        }\n    }\n    return maxResult\n}"
}