{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 76280000,
    "question_id": "3197",
    "elapsed_time": 348,
    "compare_result": "100111111100011110010110110000100111101111011110111100000001011111100111111111101110110011110111110111100111001000000010111001110011101100110000000001100001000111111001111011000000100000000100000010100000111110100110100110010100111011111110000001100101000001000110011100000011000100100000111001000000101010000000100000010001100000000011100111111011",
    "code_output": "110",
    "std_output": "",
    "last_testcase": "[10,100]",
    "expected_output": "0",
    "task_finish_time": 1708628699528,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 165,
    "total_testcases": 348,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1183351737",
    "input_formatted": "[10,100]",
    "input": "[10,100]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumStrongPairXor = function(nums) {\n    let max = 0;\n    let maxNum = Math.max(...nums);\n    let length = maxNum.toString(2).length;\n    let mask = 0, maxXor = 0;\n    for (let i = length - 1; i >= 0; i--) {\n        mask |= (1 << i);\n        let prefixes = new Set();\n        for (let num of nums) {\n            prefixes.add(num & mask);\n        }\n        let candidateXor = maxXor | (1 << i);\n        for (let prefix of prefixes) {\n            if (prefixes.has(candidateXor ^ prefix)) {\n                maxXor = candidateXor;\n                break;\n            }\n        }\n    }\n    return maxXor;\n};"
}