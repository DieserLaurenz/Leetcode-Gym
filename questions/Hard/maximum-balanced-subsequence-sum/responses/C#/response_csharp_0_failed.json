{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57460000,
    "question_id": "3184",
    "elapsed_time": 4017,
    "compare_result": "0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111110111101111111111111110101111111111110111111111111111101111101110111111111110110100111111100000000010000100000000000001000000000000000000000000000000000000000000000000000111111111101000000010000000000000000000000",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708556358693,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 225,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182448424",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaxBalancedSubsequenceSum(int[] nums) {\n        long maxSum = long.MinValue;\n        for (int i = 0; i < nums.Length; i++) {\n            long currentSum = nums[i];\n            int lastNum = nums[i];\n            for (int j = i + 1; j < nums.Length; j++) {\n                if (nums[j] - lastNum >= j - i) {\n                    currentSum += nums[j];\n                    lastNum = nums[j];\n                }\n            }\n            maxSum = Math.Max(maxSum, currentSum);\n        }\n        return maxSum;\n    }\n}"
}