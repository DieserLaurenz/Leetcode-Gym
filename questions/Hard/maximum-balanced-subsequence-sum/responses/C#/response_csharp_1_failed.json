{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71128000,
    "question_id": "3184",
    "elapsed_time": 358,
    "compare_result": "0001000000000001111111111111101010010111101111111011101000111011101111111110111110000111111011001100111110101001001011110101111110010010001001101000000111010000000100000000000100000001001001100001100000100010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101001100000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708556391712,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 109,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182448673",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaxBalancedSubsequenceSum(int[] nums) {\n        long maxSum = 0;\n        int n = nums.Length;\n        long[] prefixMax = new long[n];\n        prefixMax[0] = nums[0];\n\n        for (int i = 1; i < n; i++) {\n            prefixMax[i] = Math.Max(prefixMax[i - 1], nums[i]);\n        }\n\n        long currentSum = nums[n - 1];\n        long currentMax = nums[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            if (nums[i] <= currentMax && prefixMax[i] >= currentMax) {\n                currentSum += nums[i];\n                currentMax = Math.Max(currentMax, nums[i]);\n            }\n            maxSum = Math.Max(maxSum, currentSum);\n        }\n\n        // Check if taking single element is better\n        foreach (int num in nums) {\n            maxSum = Math.Max(maxSum, num);\n        }\n\n        return maxSum;\n    }\n}"
}