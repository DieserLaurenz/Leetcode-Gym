{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27060000,
    "question_id": "3184",
    "elapsed_time": 681,
    "compare_result": "1001000000000001111111111111101010010111101110111011101000111011100101111111010110010000001111001100011110100000000000010001000100000000000001100000000000000000000000000000011000000000000001100001100000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101001100000000000000000000000000000000",
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[5,-1,-3,8]",
    "expected_output": "13",
    "task_finish_time": 1708892151861,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 78,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186107489",
    "input_formatted": "[5,-1,-3,8]",
    "input": "[5,-1,-3,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maxBalancedSubsequenceSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        dp_inc = [0] * len(nums)\n        dp_dec = [0] * len(nums)\n        dp_inc[0] = nums[0]\n        for i in range(1, len(nums)):\n            dp_inc[i] = max(dp_inc[i-1], nums[i] + max(0, dp_dec[i-1] - 1))\n            dp_dec[i] = max(dp_dec[i-1], nums[i] + max(0, dp_inc[i-1] - 1))\n        return max(dp_inc[-1], dp_dec[-1])"
}