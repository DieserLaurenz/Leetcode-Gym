{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20396000,
    "question_id": "3184",
    "elapsed_time": 397,
    "compare_result": "1011111111111111111111111111111111111111111111111111111111111011101111111110111110000111111111111100111110111101001011110101101110010111000001111000001111110000010100110101000100001101101101100001110000100110110010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111110000000000000000000000000011000",
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[5,-1,-3,8]",
    "expected_output": "13",
    "task_finish_time": 1708556906906,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 162,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1182452411",
    "input_formatted": "[5,-1,-3,8]",
    "input": "[5,-1,-3,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maxBalancedSubsequenceSum(_ nums: [Int]) -> Int {\n        var maxVal = nums[0]\n        var potentialMax = nums[0]\n        for i in 1..<nums.count {\n            if nums[i] - nums[i-1] >= 1 {\n                potentialMax += nums[i]\n                maxVal = max(maxVal, potentialMax)\n            } else {\n                potentialMax = nums[i]\n            }\n        }\n        return max(maxVal, nums.max()!)\n    }\n}"
}