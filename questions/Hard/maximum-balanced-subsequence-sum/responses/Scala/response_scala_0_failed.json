{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 73228000,
    "question_id": "3184",
    "elapsed_time": 10208,
    "compare_result": "1101111111111111111111111111100000001001111111110000000000011111110101000000000111111110000000000000001111100100011100000000000001010000001000000110100000000000000000000000000000000000000000010001010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000000000000000010000",
    "code_output": "-2",
    "std_output": "",
    "last_testcase": "[-2,-1]",
    "expected_output": "-1",
    "task_finish_time": 1708566359686,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 87,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182529024",
    "input_formatted": "[-2,-1]",
    "input": "[-2,-1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxBalancedSubsequenceSum(nums: Array[Int]): Long = {\n        val dp = Array.fill(nums.length)(0L)\n        dp(0) = nums(0)\n        for (i <- 1 until nums.length) {\n            dp(i) = dp(i - 1)\n            var maxVal = Long.MinValue\n            for (j <- 0 until i) {\n                if (nums(i) - nums(j) >= i - j) {\n                    maxVal = math.max(maxVal, dp(j))\n                }\n            }\n            if (maxVal != Long.MinValue) {\n                dp(i) = math.max(dp(i), maxVal + nums(i))\n            }\n        }\n        dp.max\n    }\n}"
}