{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54480000,
    "question_id": "3184",
    "elapsed_time": 450,
    "compare_result": "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708566383898,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182529351",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maxBalancedSubsequenceSum(nums: Array[Int]): Long = {\n        var maxSum = Long.MinValue\n        var prevMax = Array.fill(2)(Long.MinValue)\n\n        nums.zipWithIndex.foreach { case (num, i) =>\n            val diff = i % 2\n            prevMax(diff) = Math.max(prevMax(diff), num)\n            maxSum = Math.max(maxSum, prevMax(1 - diff) + num)\n        }\n\n        Math.max(maxSum, nums.max)\n    }\n}"
}