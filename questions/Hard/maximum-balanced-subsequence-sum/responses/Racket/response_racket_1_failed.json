{
    "status_code": 11,
    "lang": "racket",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 129336000,
    "question_id": "3184",
    "elapsed_time": 5027,
    "compare_result": "0111111111111111111111111111111111111111101111111111111101111111110101011110111111111110001111011100011111100000001100001001100000010000110101100010100000001000000000000000000010000000000000100001000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101111111101000000000000000000000000000000",
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708566784177,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 121,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1182533020",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "(define/contract (max-balanced-subsequence-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (let ([dp (make-vector (length nums) (first nums))])\n    (for ([i (in-range 1 (length nums))])\n      (let ([current-max (vector-ref dp (- i 1))])\n        (for ([j (in-range i)])\n          (when (>= (- (list-ref nums i) (list-ref nums j)) (- i j))\n            (set! current-max (max current-max (+ (list-ref nums i) (if (= j 0) 0 (vector-ref dp (- j 1))))))))\n        (vector-set! dp i current-max)))\n    (let loop ([i (- (length nums) 1)] [max-sum (vector-ref dp (- (length nums) 1))])\n      (if (< i 0)\n          max-sum\n          (loop (- i 1) (max max-sum (vector-ref dp i))))))\n  )"
}