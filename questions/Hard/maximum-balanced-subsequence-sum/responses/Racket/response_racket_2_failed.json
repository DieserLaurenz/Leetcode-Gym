{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "Line 1: Char 19: max-balanced-subsequence-sum: broke its own contract",
    "full_runtime_error": "Line 1: Char 19: max-balanced-subsequence-sum: broke its own contract\n  promised: exact-integer?\n  produced: 14.0\n  in: the range of\n      (-> (listof exact-integer?) exact-integer?)\n  contract from:\n      (function max-balanced-subsequence-sum)\n  blaming: (function max-balanced-subsequence-sum)\n   (assuming the contract is correct)\n  context...:\n   /usr/share/racket/collects/racket/contract/private/blame.rkt:346:0: raise-blame-error\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:16:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 101212000,
    "question_id": "3184",
    "elapsed_time": 244,
    "compare_result": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708566816980,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1182533368",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (max-balanced-subsequence-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  (define (max-sum idx prev-index sum)\n    (if (= idx (length nums))\n        sum\n        (max (max-sum (+ idx 1) prev-index sum)\n             (if (or (= prev-index -1)\n                     (>= (- (list-ref nums idx) (list-ref nums prev-index)) (- idx prev-index)))\n                 (max-sum (+ idx 1) idx (+ sum (list-ref nums idx)))\n                 -inf.0))))\n  (max-sum 0 -1 0))"
}