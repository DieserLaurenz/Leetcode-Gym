{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 199696000,
    "question_id": "3184",
    "elapsed_time": 6044,
    "compare_result": "1101111111111111111111111111100000001001111111110000000000001111110100000000000011110100000000000000000011000010011100000000000001000000001000000010000000010000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000000000000000000000",
    "code_output": "-3",
    "std_output": "",
    "last_testcase": "[-2,-1]",
    "expected_output": "-1",
    "task_finish_time": 1708566997883,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 73,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182535002",
    "input_formatted": "[-2,-1]",
    "input": "[-2,-1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_balanced_subsequence_sum(nums :: [integer]) :: integer\n  def max_balanced_subsequence_sum(nums) do\n    nums\n    |> Enum.with_index()\n    |> Enum.filter(fn {num, idx} -> idx == 0 or num - Enum.at(nums, idx - 1) >= 1 end)\n    |> Enum.map(fn {num, _} -> num end)\n    |> Enum.sum()\n  end\nend"
}