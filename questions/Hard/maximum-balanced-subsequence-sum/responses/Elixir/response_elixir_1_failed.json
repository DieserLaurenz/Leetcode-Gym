{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 196380000,
    "question_id": "3184",
    "elapsed_time": 6016,
    "compare_result": "1101111111111111111111111111100000001001111111110000000000011111111111000000000111111111100000000000001111110101011111100000000001011010000000000110100100000000000100000000001000100000100000000000110001100110110011000000101001000000000000100000000000001000000000000000000000000000000000000000000000000000111111111011000000000000000000000000000000",
    "code_output": "-3",
    "std_output": "",
    "last_testcase": "[-2,-1]",
    "expected_output": "-1",
    "task_finish_time": 1708567026722,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 111,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182535307",
    "input_formatted": "[-2,-1]",
    "input": "[-2,-1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec max_balanced_subsequence_sum(nums :: [integer]) :: integer\n  def max_balanced_subsequence_sum(nums) do\n    nums\n    |> Enum.with_index()\n    |> Enum.reduce({-1, 0}, fn {num, idx}, {prev_idx, acc} ->\n      if prev_idx == -1 or num - Enum.at(nums, prev_idx) >= idx - prev_idx do\n        {idx, acc + num}\n      else\n        {prev_idx, acc}\n      end\n    end)\n    |> elem(1)\n  end\nend"
}