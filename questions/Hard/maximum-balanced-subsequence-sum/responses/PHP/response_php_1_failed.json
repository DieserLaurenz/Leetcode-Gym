{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 27288000,
    "question_id": "3184",
    "elapsed_time": 206,
    "compare_result": "0001111111111111111111111111100000000000110000000000000000000000001000000010001010000001000110000000000000000010000000000000000000100000000000000000010000000000000000000000000000000100000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000000000000000000000000000",
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708556764355,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 50,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1182451416",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxBalancedSubsequenceSum($nums) {\n        $maxValue = max($nums);\n        $sum = $maxValue;\n        $lastIndex = array_search($maxValue, $nums);\n        $leftMax = PHP_INT_MIN;\n        for ($i = $lastIndex - 1; $i >= 0; $i--) {\n            if ($nums[$i] > $leftMax && $nums[$i] < $nums[$i + 1]) {\n                $sum += $nums[$i];\n                $leftMax = $nums[$i];\n            }\n        }\n        $rightMax = PHP_INT_MIN;\n        for ($i = $lastIndex + 1, $n = count($nums); $i < $n; $i++) {\n            if ($nums[$i] > $rightMax && $nums[$i] < $nums[$i - 1]) {\n                $sum += $nums[$i];\n                $rightMax = $nums[$i];\n            }\n        }\n        return $sum;\n    }\n}"
}