{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25156000,
    "question_id": "3184",
    "elapsed_time": 5017,
    "compare_result": "0001111111111111111111111111100000001001111111110000000000010011101111000000000010000111110000000000001110110101001011100000000000010111000000000000000100000000000100100000000000000000100000000000010000100110110010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111110000000000000000000000000000000",
    "code_output": "17",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708556803007,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 87,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1182451681",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxBalancedSubsequenceSum($nums) {\n        $n = count($nums);\n        $maxSum = $nums[0];\n        for ($i = 1; $i < $n; $i++) {\n            $currentMax = $nums[$i];\n            $sum = $nums[$i];\n            for ($j = $i - 1; $j >= 0; $j--) {\n                if ($nums[$j] <= $currentMax && $nums[$i] - $nums[$j] >= $i - $j) {\n                    $sum += $nums[$j];\n                    $currentMax = $nums[$j];\n                }\n            }\n            $maxSum = max($maxSum, $sum);\n        }\n        return $maxSum;\n    }\n}"
}