{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 25120000,
    "question_id": "3184",
    "elapsed_time": 5150,
    "compare_result": "1111111111111111111111111111111111111111111111111111111111111111110101011111111111111110001111011111011111100100011100001001100101010000110111100110100000001100000000000000100000000000000000100001010000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111000000000000000000000000000000",
    "code_output": "8",
    "std_output": "",
    "last_testcase": "[6,0,2]",
    "expected_output": "6",
    "task_finish_time": 1708556731175,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 137,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1182451149",
    "input_formatted": "[6,0,2]",
    "input": "[6,0,2]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxBalancedSubsequenceSum($nums) {\n        $n = count($nums);\n        $dp = array_fill(0, $n, 0);\n        $dp[0] = $nums[0];\n        for ($i = 1; $i < $n; $i++) {\n            $dp[$i] = max($dp[$i - 1], $nums[$i]);\n            for ($j = 0; $j < $i; $j++) {\n                if ($nums[$i] - $nums[$j] >= $i - $j) {\n                    $dp[$i] = max($dp[$i], $dp[$j] + $nums[$i]);\n                }\n            }\n        }\n        return max($dp);\n    }\n}"
}