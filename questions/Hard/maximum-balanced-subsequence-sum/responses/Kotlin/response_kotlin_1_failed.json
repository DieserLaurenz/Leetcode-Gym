{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63972000,
    "question_id": "3184",
    "elapsed_time": 558,
    "compare_result": "0011111111111111111111111111111111110110110000001111111111101000000000111110010110000000001011011111010000000110000100010101000110000000000001101000010011000001000000000000100101100000000011110001110100000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000111111001110000000000000000000000000000000",
    "code_output": "17",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708557002153,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 104,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182453152",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxBalancedSubsequenceSum(nums: IntArray): Long {\n        var maxSum = Long.MIN_VALUE\n        var minPref = 0\n        var sum = 0\n\n        for (i in nums.indices) {\n            sum += nums[i]\n            if (i > 0) {\n                maxSum = maxOf(maxSum, sum - minPref.toLong())\n            }\n            minPref = minOf(minPref, sum)\n        }\n\n        return if (maxSum == Long.MIN_VALUE) nums.maxOrNull()!!.toLong() else maxSum\n    }\n}"
}