{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79400000,
    "question_id": "3184",
    "elapsed_time": 4960,
    "compare_result": "0011111111111111111111111111111111111111111111111111111111111011101111111110111110000111101111111101011110111111101011110101101110010010001001101000000111010100100100100100000100000101101101100001110000100110110010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111100000000000000000000000000001000",
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708557042727,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 154,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182453415",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maxBalancedSubsequenceSum(nums: IntArray): Long {\n        var maxSum: Long = nums[0].toLong()\n        var currentMax = nums[0]\n        for (i in 1 until nums.size) {\n            val diff = i\n            var localMax = nums[i]\n            for (j in i - 1 downTo 0) {\n                if (nums[i] - nums[j] >= diff) {\n                    localMax = maxOf(localMax, nums[i] + nums[j])\n                    break // Found a valid previous element, no need to check earlier elements\n                }\n            }\n            currentMax = maxOf(currentMax, localMax)\n            maxSum = maxOf(maxSum, currentMax.toLong())\n        }\n        return maxSum\n    }\n}"
}