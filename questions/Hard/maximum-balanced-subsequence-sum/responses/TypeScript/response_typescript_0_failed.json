{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60692000,
    "question_id": "3184",
    "elapsed_time": 4014,
    "compare_result": "1110000000000000000000000000011111110110110000001111111111101100010000111111111111111010011111111111110001011110110110111111111111101111111111111111111011111111111011111111111111111111111111111111111111111101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000111111111111111111111111111111100000",
    "code_output": "-9007199254740991",
    "std_output": "",
    "last_testcase": "[0]",
    "expected_output": "0",
    "task_finish_time": 1708556607420,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 280,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182450235",
    "input_formatted": "[0]",
    "input": "[0]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maxBalancedSubsequenceSum(nums: number[]): number {\n    let maxSum = Number.MIN_SAFE_INTEGER;\n    let dp: number[] = Array(nums.length).fill(Number.MIN_SAFE_INTEGER);\n    dp[0] = nums[0];\n\n    for (let i = 1; i < nums.length; i++) {\n        for (let j = i - 1; j >= 0; j--) {\n            if (nums[i] - nums[j] >= i - j) {\n                dp[i] = Math.max(dp[i], nums[i] + (dp[j] !== Number.MIN_SAFE_INTEGER ? dp[j] : 0));\n            }\n        }\n        dp[i] = Math.max(dp[i], nums[i]);\n        maxSum = Math.max(maxSum, dp[i]);\n    }\n\n    return maxSum;\n};"
}