{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36888000,
    "question_id": "3184",
    "elapsed_time": 635,
    "compare_result": "0101111111111111111111111111100000000000110000000000000000001100010100000000000101001000000000000000100000000000000000000000000001000100000000010000000000000000000000000000000000000000000000000001000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111001111000000000000000000000000010001",
    "code_output": "17",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708892213126,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 53,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186108103",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort(reverse=True)\n        \n        max_sum = nums[0][0]\n        min_index = max_index = nums[0][1]\n        \n        for num, index in nums:\n            if index > max_index or index < min_index:\n                max_sum += num\n                min_index = min(min_index, index)\n                max_index = max(max_index, index)\n        \n        return max_sum"
}