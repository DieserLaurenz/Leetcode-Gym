{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 32108000,
    "question_id": "3184",
    "elapsed_time": 510,
    "compare_result": "0001111111111111111111111111100000000000110000000000000000000000001000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111001110000000000000000000000000011000",
    "code_output": "17",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708892261385,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 42,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186108590",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def maxBalancedSubsequenceSum(self, nums: List[int]) -> int:\n        max_sum = nums[0]\n        min_val = max_val = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] >= max_val or nums[i] <= min_val:\n                max_sum += nums[i]\n                min_val = min(min_val, nums[i])\n                max_val = max(max_val, nums[i])\n        return max_sum"
}