{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12444000,
    "question_id": "3184",
    "elapsed_time": 108,
    "compare_result": "1001111111111111111111111111100000001001111111110000000000010011101111000000000010000111110100000000101110110101001011100000000000010111000000010000001100100000010100110101000000001100100100000000010000100110110010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111110000000000000000000000000011000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[5,-1,-3,8]",
    "expected_output": "13",
    "task_finish_time": 1708556293750,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 102,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1182448001",
    "input_formatted": "[5,-1,-3,8]",
    "input": "[5,-1,-3,8]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "long long maxBalancedSubsequenceSum(int* nums, int numsSize) {\n    long long maxSum = nums[0]; // Initialize maxSum with the first element\n    long long currentSum = nums[0]; // Initialize currentSum with the first element\n    for (int i = 1; i < numsSize; i++) {\n        if (nums[i] - nums[i - 1] >= i - (i - 1)) { // Check if the subsequence is balanced\n            currentSum += nums[i]; // Add to currentSum if balanced\n            if (currentSum > maxSum) maxSum = currentSum; // Update maxSum if currentSum is greater\n        } else {\n            currentSum = nums[i]; // Reset currentSum to the current element\n            if (currentSum > maxSum) maxSum = currentSum; // Update maxSum if current element is greater\n        }\n    }\n    return maxSum; // Return the maximum sum of a balanced subsequence\n}"
}