{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 213612000,
    "question_id": "3184",
    "elapsed_time": 2267,
    "compare_result": "0001000000000001111111111111101010010111101111111011101000111011101111111110111110000111101011101100011110101001001011110101101110010010000001101000000111010000000100000000000100000001001001100001100000100010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101011100000000000000000000000000001000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708566939853,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 108,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182534493",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_balanced_subsequence_sum(Nums :: [integer()]) -> integer().\nmax_balanced_subsequence_sum(Nums) ->\n    DP = lists:foldl(fun(X, Acc) ->\n                         [max(V, X + lists:max([0|lists:sublist(Acc, max(1, J - (I - J)), I - J)])) || {V, I} <- lists:zip(Acc, lists:seq(1, length(Acc))), J <- [I]]\n                     end, [0], Nums),\n    lists:max(DP)."
}