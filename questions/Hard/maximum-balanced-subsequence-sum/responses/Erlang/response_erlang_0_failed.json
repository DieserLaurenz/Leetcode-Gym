{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 251652000,
    "question_id": "3184",
    "elapsed_time": 1970,
    "compare_result": "0011111111111111111111111111111111110110100000000000000000000000000100000000001000000000000000000000000000000000000000000010000000000001000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111001100000000000000000000000000000000",
    "code_output": "12",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708566877042,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182533922",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_balanced_subsequence_sum(Nums :: [integer()]) -> integer().\nmax_balanced_subsequence_sum(Nums) ->\n    Lists = lists,\n    ZipWithIndex = lists:zip(Nums, lists:seq(0, length(Nums) - 1)),\n    Sorted = lists:sort(fun({A, AI}, {B, BI}) -> A - AI > B - BI end, ZipWithIndex),\n    FoldlFun = fun({Num, Index}, {MaxSum, LastIndex, MaxIndex}) ->\n                       if\n                           Index > LastIndex ->\n                               {MaxSum + Num, Index, MaxIndex};\n                           true ->\n                               {MaxSum, MaxIndex, MaxIndex}\n                       end\n               end,\n    {MaxSum, _, _} = lists:foldl(FoldlFun, {0, -1, -1}, Sorted),\n    MaxSum."
}