{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 255620000,
    "question_id": "3184",
    "elapsed_time": 2169,
    "compare_result": "0011111111111111111111111111111111110110100000000110001010101000000100000010000100000100001010100000000000000000000000000000100010001000000000101000000100000010000000000000000100000000000000000001000000000100000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000101111111100000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[3,3,5,6]",
    "expected_output": "14",
    "task_finish_time": 1708566911748,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 70,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182534243",
    "input_formatted": "[3,3,5,6]",
    "input": "[3,3,5,6]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec max_balanced_subsequence_sum(Nums :: [integer()]) -> integer().\nmax_balanced_subsequence_sum(Nums) ->\n    {MaxSum, _} = lists:foldl(\n        fun(X, {Max, Prev}) ->\n            {NewMax, NewPrev} = case Prev of\n                                    [] -> {X, [X]};\n                                    [H|T] = P ->\n                                        if X - H >= length(P) -> {Max + X, [X|P]};\n                                           true -> {Max, Prev}\n                                        end\n                                end,\n            {NewMax, NewPrev}\n        end,\n        {0, []},\n        lists:reverse(Nums)),\n    MaxSum."
}