{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 4144000,
    "question_id": "3184",
    "elapsed_time": 31,
    "compare_result": "1101000000000001111111111111101010010111101111111011101000011011101111111111111110000111111011101100011110101001011111111101111110011010010111001000100111010010010100000000100111001001101011100001100011100110110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101011110000000000000000000000000011000",
    "code_output": "0",
    "std_output": "",
    "last_testcase": "[-2,-1]",
    "expected_output": "-1",
    "task_finish_time": 1708566576940,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 132,
    "total_testcases": 346,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182531175",
    "input_formatted": "[-2,-1]",
    "input": "[-2,-1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn max_balanced_subsequence_sum(nums: Vec<i32>) -> i64 {\n        let mut pairs = nums.into_iter().enumerate().map(|(i, num)| (num - i as i32, num)).collect::<Vec<_>>();\n        pairs.sort_unstable();\n        let mut max_sum = i64::MIN;\n        let mut current_sum = 0i64;\n        let mut last_diff = i32::MIN;\n        for (diff, num) in pairs {\n            if diff != last_diff {\n                max_sum = max_sum.max(current_sum);\n                current_sum = 0;\n                last_diff = diff;\n            }\n            current_sum += num as i64;\n        }\n        max_sum.max(current_sum)\n    }\n}"
}