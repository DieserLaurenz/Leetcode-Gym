{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53816000,
    "question_id": "3047",
    "elapsed_time": 479,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708578444781,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 41,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1182670184",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumSum(vector<int>& nums) {\n        unordered_map<int, long long> primeFactorsSum;\n        for (int num : nums) {\n            int product = 1;\n            for (int i = 2; i * i <= num; ++i) {\n                if (num % i == 0) {\n                    int count = 0;\n                    while (num % i == 0) {\n                        num /= i;\n                        ++count;\n                    }\n                    if (count % 2 != 0) product *= i;\n                }\n            }\n            if (num > 1) product *= num;\n            primeFactorsSum[product] += product;\n        }\n\n        long long maxSum = 0;\n        for (const auto& [_, sum] : primeFactorsSum) {\n            maxSum = max(maxSum, sum);\n        }\n        return maxSum;\n    }\n};"
}