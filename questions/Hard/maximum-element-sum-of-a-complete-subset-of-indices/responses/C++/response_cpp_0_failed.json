{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 8076000,
    "question_id": "3047",
    "elapsed_time": 13,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708578378389,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1182669262",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumSum(vector<int>& nums) {\n        unordered_map<int, long long> groupSum;\n        for (int num : nums) {\n            int mask = 0;\n            for (int i = 2; i <= sqrt(num); ++i) {\n                int count = 0;\n                while (num % i == 0) {\n                    num /= i;\n                    count++;\n                }\n                if (count % 2 == 1) mask ^= (1 << i);\n            }\n            if (num > 1) mask ^= (1 << num);\n            groupSum[mask] += num;\n        }\n\n        long long maxSum = 0;\n        for (auto& [mask, sum] : groupSum) {\n            maxSum = max(maxSum, sum);\n        }\n        return maxSum;\n    }\n};"
}