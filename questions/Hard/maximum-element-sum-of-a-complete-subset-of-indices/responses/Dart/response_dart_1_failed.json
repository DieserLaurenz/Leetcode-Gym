{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 158076000,
    "question_id": "3047",
    "elapsed_time": 1175,
    "compare_result
    "code_output": "45",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708588539782,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1182813524",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int maximumSum(List<int> nums) {\n    Map<Map<int, int>, int> primeFactorsSum = {};\n    int maxSum = 0;\n    for (int num in nums) {\n      Map<int, int> factors = _getPrimeFactors(num);\n      Map<int, int> reducedFactors = {};\n      for (var entry in factors.entries) {\n        if (entry.value % 2 != 0) reducedFactors[entry.key] = 1;\n      }\n      bool found = false;\n      for (var key in primeFactorsSum.keys) {\n        if (_canCombine(key, reducedFactors)) {\n          primeFactorsSum[key] = primeFactorsSum[key]! + num;\n          maxSum = maxSum < primeFactorsSum[key]! ? primeFactorsSum[key]! : maxSum;\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        primeFactorsSum[reducedFactors] = num;\n        maxSum = maxSum < num ? num : maxSum;\n      }\n    }\n    return maxSum;\n  }\n\n  Map<int, int> _getPrimeFactors(int num) {\n    Map<int, int> factors = {};\n    for (int i = 2; i * i <= num; i++) {\n      while (num % i == 0) {\n        factors[i] = (factors[i] ?? 0) + 1;\n        num ~/= i;\n      }\n    }\n    if (num > 1) factors[num] = (factors[num] ?? 0) + 1;\n    return factors;\n  }\n\n  bool _canCombine(Map<int, int> a, Map<int, int> b) {\n    for (var entry in a.entries) {\n      if (b.containsKey(entry.key) && b[entry.key] != entry.value) return false;\n    }\n    return true;\n  }\n}"
}