{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63968000,
    "question_id": "3047",
    "elapsed_time": 790,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587828428,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 58,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182804670",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumSum(nums: number[]): number {\n    const primeFactors = (x: number): Map<number, number> => {\n        const factors = new Map<number, number>();\n        for (let i = 2; i * i <= x; i++) {\n            while (x % i === 0) {\n                factors.set(i, (factors.get(i) || 0) + 1);\n                x /= i;\n            }\n        }\n        if (x > 1) factors.set(x, (factors.get(x) || 0) + 1);\n        return factors;\n    };\n\n    const normalize = (factors: Map<number, number>): string => {\n        let res = '';\n        factors.forEach((count, factor) => {\n            if (count % 2 !== 0) res += `#${factor}`;\n        });\n        return res;\n    };\n\n    const groups = new Map<string, number>();\n    let maxSum = 0;\n\n    for (const num of nums) {\n        const factors = primeFactors(num);\n        const key = normalize(factors);\n        const sum = (groups.get(key) || 0) + num;\n        groups.set(key, sum);\n        maxSum = Math.max(maxSum, sum);\n    }\n\n    return maxSum;\n};"
}