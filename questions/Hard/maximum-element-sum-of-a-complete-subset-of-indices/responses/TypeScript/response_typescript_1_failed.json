{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65232000,
    "question_id": "3047",
    "elapsed_time": 793,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587876412,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 58,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182805247",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumSum(nums: number[]): number {\n    function gcd(a: number, b: number): number {\n        while (b !== 0) {\n            let temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    function primeFactors(n: number): Map<number, number> {\n        const factors = new Map<number, number>();\n        for (let i = 2; i * i <= n; ++i) {\n            while (n % i === 0) {\n                factors.set(i, (factors.get(i) || 0) + 1);\n                n /= i;\n            }\n        }\n        if (n > 1) factors.set(n, (factors.get(n) || 0) + 1);\n        return factors;\n    }\n\n    function getKey(n: number): string {\n        const factors = primeFactors(n);\n        let key = '';\n        for (const [factor, count] of factors) {\n            if (count % 2 !== 0) key += `${factor},`;\n        }\n        return key;\n    }\n\n    let maxSum = 0;\n    const sumMap = new Map<string, number>();\n\n    for (const num of nums) {\n        const key = getKey(num);\n        sumMap.set(key, (sumMap.get(key) || 0) + num);\n        maxSum = Math.max(maxSum, sumMap.get(key) as number);\n    }\n\n    return maxSum;\n}"
}