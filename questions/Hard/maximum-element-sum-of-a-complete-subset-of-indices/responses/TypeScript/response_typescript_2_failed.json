{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60248000,
    "question_id": "3047",
    "elapsed_time": 689,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587916661,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 9,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182805761",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function maximumSum(nums: number[]): number {\n    let maxSum = 0;\n    const map = new Map<string, number>();\n\n    for (let num of nums) {\n        let product = 1;\n        for (let i = 2; i * i <= num; i++) {\n            let count = 0;\n            while (num % i === 0) {\n                num /= i;\n                count++;\n            }\n            if (count % 2 !== 0) product *= i;\n        }\n        if (num > 1) product *= num;\n        const key = product.toString();\n        map.set(key, (map.get(key) || 0) + num);\n    }\n\n    for (let sum of map.values()) {\n        maxSum = Math.max(maxSum, sum);\n    }\n\n    return maxSum;\n}"
}