{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 63524000,
    "question_id": "3047",
    "elapsed_time": 2515,
    "compare_result
    "code_output": "27",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587713363,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 11,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1182803216",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumSum = function(nums) {\n    function gcd(a, b) {\n        while (b !== 0) {\n            [a, b] = [b, a % b];\n        }\n        return a;\n    }\n\n    function primeFactors(n) {\n        let factors = new Map();\n        for (let i = 2; i * i <= n; ++i) {\n            while (n % i === 0) {\n                factors.set(i, (factors.get(i) || 0) + 1);\n                n /= i;\n            }\n        }\n        if (n > 1) factors.set(n, (factors.get(n) || 0) + 1);\n        return factors;\n    }\n\n    function getMask(n) {\n        let factors = primeFactors(n);\n        let mask = 0;\n        for (let [prime, count] of factors) {\n            if (count % 2 !== 0) {\n                mask ^= (1 << (prime % 31));\n            }\n        }\n        return mask;\n    }\n\n    let dp = new Map();\n    let maxSum = 0;\n\n    for (let num of nums) {\n        let mask = getMask(num);\n        dp.set(mask, (dp.get(mask) || 0) + num);\n        for (let [m, sum] of dp) {\n            if ((mask & m) === 0 || mask === m) {\n                maxSum = Math.max(maxSum, sum + (mask !== m ? dp.get(mask) : 0));\n            }\n        }\n    }\n\n    return maxSum;\n};"
}