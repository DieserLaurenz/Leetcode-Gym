{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68316000,
    "question_id": "3047",
    "elapsed_time": 593,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587671607,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 58,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1182802718",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumSum = function(nums) {\n    const factorize = (n) => {\n        const factors = new Map();\n        for (let div = 2; div * div <= n; div++) {\n            while (n % div === 0) {\n                factors.set(div, (factors.get(div) || 0) + 1);\n                n /= div;\n            }\n        }\n        if (n > 1) factors.set(n, (factors.get(n) || 0) + 1);\n        return factors;\n    };\n\n    const key = (factors) => {\n        let result = '';\n        for (const [factor, count] of factors) {\n            if (count % 2 !== 0) result += `.${factor}`;\n        }\n        return result;\n    };\n\n    const groups = new Map();\n    nums.forEach((num, i) => {\n        const k = key(factorize(num));\n        if (!groups.has(k)) groups.set(k, []);\n        groups.get(k).push(num);\n    });\n\n    let maxSum = 0;\n    for (const group of groups.values()) {\n        maxSum = Math.max(maxSum, group.reduce((a, b) => a + b, 0));\n    }\n\n    return maxSum;\n};"
}