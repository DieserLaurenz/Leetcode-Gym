{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 395684000,
    "question_id": "3047",
    "elapsed_time": 2025,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587762626,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1182803820",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumSum = function(nums) {\n    const maxVal = Math.max(...nums);\n    const sqrtMaxVal = Math.floor(Math.sqrt(maxVal)) + 1;\n    const spf = new Array(maxVal + 1); // Smallest Prime Factor\n    for (let i = 2; i <= maxVal; ++i) spf[i] = i;\n    for (let i = 2; i * i <= maxVal; ++i) {\n        if (spf[i] === i) {\n            for (let j = i * i; j <= maxVal; j += i) {\n                if (spf[j] === j) spf[j] = i;\n            }\n        }\n    }\n\n    const factorize = (x) => {\n        const factors = new Map();\n        while (x !== 1) {\n            let count = 0;\n            const factor = spf[x];\n            while (spf[x] === factor) {\n                x /= factor;\n                count ^= 1; // Toggle between 0 and 1 for odd/even powers\n            }\n            if (count) factors.set(factor, 1);\n        }\n        return factors;\n    };\n\n    const getKey = (factors) => Array.from(factors.keys()).sort().join(',');\n\n    const sums = new Map();\n    nums.forEach((num) => {\n        const factors = factorize(num);\n        const key = getKey(factors);\n        sums.set(key, (sums.get(key) || 0) + num);\n    });\n\n    let maxSum = 0;\n    sums.forEach((sum) => {\n        maxSum = Math.max(maxSum, sum);\n    });\n\n    return maxSum;\n};"
}