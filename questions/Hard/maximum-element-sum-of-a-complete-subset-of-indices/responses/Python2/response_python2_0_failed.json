{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12804000,
    "question_id": "3047",
    "elapsed_time": 11013,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708901347037,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186188455",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumSum(self, nums):\n        def prime_factors(n):\n            factors = {}\n            d = 2\n            while d * d <= n:\n                while (n % d) == 0:\n                    if d in factors:\n                        factors[d] += 1\n                    else:\n                        factors[d] = 1\n                    n //= d\n                d += 1\n            if n > 1:\n                if n in factors:\n                    factors[n] += 1\n                else:\n                    factors[n] = 1\n            return factors\n        \n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        \n        def lcm(a, b):\n            return a * b // gcd(a, b)\n        \n        from collections import defaultdict\n        group = defaultdict(int)\n        \n        for num in nums:\n            factors = prime_factors(num)\n            mask = 0\n            for p, cnt in factors.items():\n                if cnt % 2 == 1:\n                    mask ^= (1 << (p % 30))\n            group[mask] += num\n        \n        return max(group.values())"
}