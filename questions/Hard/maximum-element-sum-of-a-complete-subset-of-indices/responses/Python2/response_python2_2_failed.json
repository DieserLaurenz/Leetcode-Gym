{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 624488000,
    "question_id": "3047",
    "elapsed_time": 11014,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708901425517,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 33,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186189067",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def maximumSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        from collections import defaultdict\n        from math import sqrt\n\n        def get_mask(num):\n            mask = 0\n            for i in range(2, int(sqrt(num)) + 1):\n                if num % i == 0:\n                    cnt = 0\n                    while num % i == 0:\n                        num //= i\n                        cnt += 1\n                    if cnt % 2:\n                        mask ^= 1 << i\n            if num > 1:\n                mask ^= 1 << num\n            return mask\n\n        masks = defaultdict(int)\n        for num in nums:\n            masks[get_mask(num)] += num\n\n        return max(masks.values())"
}