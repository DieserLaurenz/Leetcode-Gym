{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15888000,
    "question_id": "3047",
    "elapsed_time": 578,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708588212260,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 60,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1182809601",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func maximumSum(_ nums: [Int]) -> Int {\n        var res = 0\n        var map = [Int: Int]()\n\n        for num in nums {\n            var mask = 0\n            var n = num\n            for i in 2... {\n                if i * i > n { break }\n                if n % i == 0 {\n                    var count = 0\n                    while n % i == 0 {\n                        n /= i\n                        count += 1\n                    }\n                    if count % 2 != 0 { mask ^= i }\n                }\n            }\n            if n > 1 { mask ^= n }\n            map[mask, default: 0] += num\n            res = max(res, map[mask]!)\n        }\n\n        return res\n    }\n}"
}