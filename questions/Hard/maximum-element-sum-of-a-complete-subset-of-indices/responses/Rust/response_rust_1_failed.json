{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2692000,
    "question_id": "3047",
    "elapsed_time": 2194,
    "compare_result": "000001100001110001001100100010000010100010000000100010001110000000000000000000000000000000000000000000000000000000000000000000000000000001100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000010000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000000000001001100010001001000000000000101000000100000110001000001101110100001110010100001100110000000010100000000000000000010000000000000000000000000",
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708589094911,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182820252",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn maximum_sum(nums: Vec<i32>) -> i64 {\n        let mut map = HashMap::new();\n        for &num in &nums {\n            let mut product = 1;\n            let mut n = num;\n            for i in 2..=((n as f64).sqrt() as i32 + 1) {\n                let mut count = 0;\n                while n % i == 0 {\n                    n /= i;\n                    count += 1;\n                }\n                if count % 2 == 1 {\n                    product *= i;\n                }\n            }\n            if n > 1 {\n                product *= n;\n            }\n            *map.entry(product).or_insert(0) += num as i64;\n        }\n        *map.values().max().unwrap_or(&0)\n    }\n}"
}