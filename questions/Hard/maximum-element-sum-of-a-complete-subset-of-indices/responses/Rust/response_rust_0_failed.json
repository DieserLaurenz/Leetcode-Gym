{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 3564000,
    "question_id": "3047",
    "elapsed_time": 429,
    "compare_result": "000000100001110001001100100010000010100010000000100010001110000000000000000000000000000000000000000000000000000000000000000000000000000001100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000010000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111000000000001001100010001001000000000000101000000100000110001000001101110100001110010100001100110000000010100000000000000000010000000000000000000000100",
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708589060910,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 58,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182819880",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn maximum_sum(nums: Vec<i32>) -> i64 {\n        let mut map = HashMap::new();\n        let mut max_sum = 0;\n\n        for &num in &nums {\n            let mut factors = HashMap::new();\n            let mut n = num;\n            let mut factor = 2;\n            while n > 1 && factor * factor <= n {\n                while n % factor == 0 {\n                    *factors.entry(factor).or_insert(0) += 1;\n                    n /= factor;\n                }\n                factor += 1;\n            }\n            if n > 1 {\n                *factors.entry(n).or_insert(0) += 1;\n            }\n\n            let key = factors.into_iter().filter_map(|(k, v)| if v % 2 == 1 { Some(k) } else { None }).collect::<Vec<_>>();\n            let sum = map.entry(key).or_insert(0);\n            *sum += num as i64;\n            max_sum = max_sum.max(*sum);\n        }\n\n        max_sum\n    }\n}"
}