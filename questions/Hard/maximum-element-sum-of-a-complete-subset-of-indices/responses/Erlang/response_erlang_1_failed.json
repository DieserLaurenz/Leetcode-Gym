{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 3: exception error: undef",
    "full_runtime_error": "Line 3: exception error: undef\n[{erlang,prime_factors,\"\\b\",[]},\n {lists,map,2,[{file,\"lists.erl\"},{line,1559}]},\n {solution,maximum_sum,1,[{file,\"solution.erl\"},{line,3}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,32}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,20}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,49}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 61264000,
    "question_id": "3047",
    "elapsed_time": 1365,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708597836928,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182922606",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec maximum_sum(Nums :: [integer()]) -> integer().\nmaximum_sum(Nums) ->\n    PrimeFactors = lists:map(fun erlang:prime_factors/1, Nums),\n    Simplify = fun(Factors) -> lists:foldl(fun(X, Acc) -> dict:update_counter(X, 1, Acc) end, dict:new(), Factors) end,\n    SimplifiedFactors = lists:map(Simplify, PrimeFactors),\n    GroupByKey = fun(Factors, Acc) ->\n                      Key = dict:fold(fun(K, V, KAcc) -> if V rem 2 == 1 -> [K|KAcc]; true -> KAcc end end, [], Factors),\n                      case dict:find(Key, Acc) of\n                          {ok, Value} -> dict:update(Key, fun(Old) -> Old + 1 end, Acc);\n                          error -> dict:store(Key, 1, Acc)\n                      end\n                  end,\n    Groups = lists:foldl(GroupByKey, dict:new(), SimplifiedFactors),\n    MaxGroup = dict:fold(fun(_Key, Size, Max) -> max(Size, Max) end, 0, Groups),\n    MaxSum = lists:foldl(fun(Num, Acc) -> if Num =< MaxGroup -> Acc + Num; true -> Acc end end, 0, Nums),\n    MaxSum."
}