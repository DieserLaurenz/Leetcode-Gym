{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60196000,
    "question_id": "3047",
    "elapsed_time": 5078,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708597872868,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182922941",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec maximum_sum(Nums :: [integer()]) -> integer().\nmaximum_sum(Nums) ->\n    Pairs = lists:map(fun(X) -> {X, prime_factors_count(X)} end, Nums),\n    Groups = lists:foldl(fun({Num, Factors}, Acc) ->\n                             maps:fold(fun(K, V, Acc1) -> \n                                           Key = maps:update_with(K, fun(Old) -> Old bxor V end, V, Acc1),\n                                           maps:update_with(Key, fun(Old) -> Old + Num end, Num, Acc1)\n                                       end, Acc, Factors)\n                         end, #{}, Pairs),\n    maps:fold(fun(_K, V, Max) -> max(V, Max) end, 0, Groups).\n\nprime_factors_count(N) ->\n    prime_factors_count(N, 2, #{}).\n\nprime_factors_count(1, _, Acc) ->\n    Acc;\nprime_factors_count(N, F, Acc) when N rem F == 0 ->\n    NewAcc = maps:update_with(F, fun(Old) -> Old + 1 end, 1, Acc),\n    prime_factors_count(N div F, F, NewAcc);\nprime_factors_count(N, F, Acc) ->\n    prime_factors_count(N, F + 1, Acc)."
}