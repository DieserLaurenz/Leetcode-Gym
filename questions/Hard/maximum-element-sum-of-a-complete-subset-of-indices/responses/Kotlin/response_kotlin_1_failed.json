{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 34508000,
    "question_id": "3047",
    "elapsed_time": 172,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708588382794,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182811631",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSum(nums: List<Int>): Long {\n        fun gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)\n        fun lcm(a: Int, b: Int): Int = a / gcd(a, b) * b\n\n        val freq = mutableMapOf<Int, Long>()\n        for (num in nums) {\n            var product = 1\n            for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n                var count = 0\n                var n = num\n                while (n % i == 0) {\n                    n /= i\n                    count++\n                }\n                if (count % 2 == 1) product *= i\n            }\n            if (num / product > 1) product *= num / product\n            freq[product] = freq.getOrDefault(product, 0) + num\n        }\n\n        return freq.values.maxOrNull() ?: 0\n    }\n}"
}