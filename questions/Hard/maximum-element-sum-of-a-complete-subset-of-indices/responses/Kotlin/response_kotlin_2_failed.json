{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53364000,
    "question_id": "3047",
    "elapsed_time": 3767,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708588427079,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 55,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182812085",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSum(nums: List<Int>): Long {\n        fun primeFactors(n: Int): Map<Int, Int> {\n            var num = n\n            val factors = mutableMapOf<Int, Int>()\n            for (i in 2..Math.sqrt(num.toDouble()).toInt()) {\n                while (num % i == 0) {\n                    factors[i] = factors.getOrDefault(i, 0) + 1\n                    num /= i\n                }\n            }\n            if (num > 1) factors[num] = factors.getOrDefault(num, 0) + 1\n            return factors.filter { it.value % 2 != 0 }\n        }\n\n        val maskToSum = mutableMapOf<Int, Long>()\n        nums.forEach { num ->\n            val factors = primeFactors(num)\n            var mask = 0\n            factors.keys.forEach { prime ->\n                val bit = prime % 31 // Use primes modulo 31 for a bitmask. Primes are sparse enough for this approach.\n                mask = mask or (1 shl bit)\n            }\n            maskToSum[mask] = maskToSum.getOrDefault(mask, 0) + num\n        }\n\n        return maskToSum.values.maxOrNull() ?: 0L\n    }\n}"
}