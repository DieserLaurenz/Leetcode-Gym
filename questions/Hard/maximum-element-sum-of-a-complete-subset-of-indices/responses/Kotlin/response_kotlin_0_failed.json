{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 60012000,
    "question_id": "3047",
    "elapsed_time": 1036,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708588348113,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 63,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182811208",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun maximumSum(nums: List<Int>): Long {\n        fun primeFactors(n: Int): Map<Int, Int> {\n            var number = n\n            val factors = mutableMapOf<Int, Int>()\n            var count = 0\n            while (number % 2 == 0) {\n                count++\n                number /= 2\n            }\n            if (count > 0) factors[2] = count % 2\n            var i = 3\n            while (i <= Math.sqrt(number.toDouble()).toInt()) {\n                count = 0\n                while (number % i == 0) {\n                    count++\n                    number /= i\n                }\n                if (count > 0) factors[i] = count % 2\n                i += 2\n            }\n            if (number > 2) factors[number] = 1\n            return factors\n        }\n\n        val map = mutableMapOf<Map<Int, Int>, Long>()\n        for (num in nums) {\n            val factors = primeFactors(num)\n            val sum = map.getOrDefault(factors, 0L) + num\n            map[factors] = sum\n        }\n\n        return map.values.maxOrNull() ?: 0L\n    }\n}"
}