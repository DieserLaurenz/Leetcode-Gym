{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55296000,
    "question_id": "3047",
    "elapsed_time": 1064,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587558025,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 48,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182801362",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public long MaximumSum(IList<int> nums) {\n        Dictionary<int, long> freq = new Dictionary<int, long>();\n        foreach (var originalNum in nums) {\n            int num = originalNum;\n            int mask = 0;\n            for (int i = 2; i * i <= num; i++) {\n                int count = 0;\n                while (num % (i * i) == 0) num /= i * i;\n                while (num % i == 0) {\n                    num /= i;\n                    count++;\n                }\n                if (count % 2 == 1) mask ^= 1 << (i % 30); // using 30 first primes\n            }\n            if (num > 1) mask ^= 1 << (num % 30);\n            if (freq.ContainsKey(mask)) freq[mask] += originalNum;\n            else freq[mask] = originalNum;\n        }\n        long maxSum = 0;\n        foreach (var sum in freq.Values) {\n            maxSum = Math.Max(maxSum, sum);\n        }\n        return maxSum;\n    }\n}"
}