{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 119892000,
    "question_id": "3047",
    "elapsed_time": 4018,
    "compare_result
    "code_output": "45",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587603028,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1182801881",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "using System;\nusing System.Collections.Generic;\n\npublic class Solution {\n    private int GetMask(int num) {\n        int mask = 0;\n        for (int i = 2; i * i <= num; ++i) {\n            if (num % i == 0) {\n                int count = 0;\n                while (num % i == 0) {\n                    num /= i;\n                    ++count;\n                }\n                if (count % 2 != 0) mask ^= 1 << i;\n            }\n        }\n        if (num > 1) mask ^= 1 << num;\n        return mask;\n    }\n\n    public long MaximumSum(IList<int> nums) {\n        Dictionary<int, long> dp = new Dictionary<int, long>();\n        long answer = 0;\n        foreach (int num in nums) {\n            Dictionary<int, long> tempDp = new Dictionary<int, long>(dp);\n            int mask = GetMask(num);\n            answer = Math.Max(answer, num);\n            \n            foreach (var pair in tempDp) {\n                int newMask = pair.Key ^ mask;\n                long newSum = pair.Value + num;\n                if (!dp.ContainsKey(newMask)) dp[newMask] = 0;\n                dp[newMask] = Math.Max(dp[newMask], newSum);\n                answer = Math.Max(answer, dp[newMask]);\n            }\n            \n            if (!dp.ContainsKey(mask)) dp[mask] = 0;\n            dp[mask] = Math.Max(dp[mask], (long)num);\n        }\n        return answer;\n    }\n}"
}