{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18112000,
    "question_id": "3047",
    "elapsed_time": 11016,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708901538513,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186189993",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom math import gcd\nfrom collections import defaultdict\n\nclass Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n        def normalize(num):\n            prod = 1\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    count = 0\n                    while num % i == 0:\n                        num //= i\n                        count += 1\n                    if count % 2 == 1:\n                        prod *= i\n            if num > 1: prod *= num\n            return prod\n        \n        groups = defaultdict(int)\n        for num in nums:\n            groups[normalize(num)] += num\n            \n        return max(groups.values())\n\n# Example usage\nsol = Solution()\nprint(sol.maximumSum([8,7,3,5,7,2,4,9]))  # Expected output: 16\nprint(sol.maximumSum([5,10,3,10,1,13,7,9,4]))  # Expected output: 19"
}