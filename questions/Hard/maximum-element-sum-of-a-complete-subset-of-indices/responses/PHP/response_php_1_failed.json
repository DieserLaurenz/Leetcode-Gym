{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 167184000,
    "question_id": "3047",
    "elapsed_time": 5212,
    "compare_result
    "code_output": "19",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708588039587,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1182807340",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumSum($nums) {\n        $n = count($nums);\n        $mask = array_fill(0, $n, 0);\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 2; $j * $j <= $nums[$i]; $j++) {\n                if ($nums[$i] % $j == 0) {\n                    $count = 0;\n                    while ($nums[$i] % $j == 0) {\n                        $nums[$i] /= $j;\n                        $count++;\n                    }\n                    if ($count % 2 == 1) $mask[$i] |= (1 << ($j % 31));\n                }\n            }\n            if ($nums[$i] > 1) $mask[$i] |= (1 << ($nums[$i] % 31));\n        }\n        $dp = array_fill(0, 1 << 20, 0);\n        $result = 0;\n        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < (1 << 20); $j++) {\n                if (($mask[$i] & $j) == 0) {\n                    $dp[$mask[$i] | $j] = max($dp[$mask[$i] | $j], $dp[$j] + $nums[$i]);\n                    $result = max($result, $dp[$mask[$i] | $j]);\n                }\n            }\n        }\n        return $result;\n    }\n}"
}