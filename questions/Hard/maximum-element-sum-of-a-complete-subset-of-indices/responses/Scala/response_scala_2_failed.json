{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 68128000,
    "question_id": "3047",
    "elapsed_time": 1922,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708589002778,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 60,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182819228",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumSum(nums: List[Int]): Long = {\n        def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)\n        def lcm(a: Int, b: Int): Int = a / gcd(a, b) * b\n\n        def factorize(n: Int): Map[Int, Int] = {\n            var factors = Map.empty[Int, Int]\n            var num = n\n            var i = 2\n            while (i * i <= num) {\n                while (num % i == 0) {\n                    factors = factors.updated(i, factors.getOrElse(i, 0) + 1)\n                    num /= i\n                }\n                i += 1\n            }\n            if (num > 1) factors.updated(num, factors.getOrElse(num, 0) + 1) else factors\n        }\n\n        def isPerfectSquare(factors: Map[Int, Int]): Boolean = factors.forall(_._2 % 2 == 0)\n\n        val factorizedNums = nums.map(n => factorize(n).filter(_._2 % 2 != 0))\n        val signatureToIndexSum = scala.collection.mutable.Map[Map[Int, Int], Long]().withDefaultValue(0L)\n\n        for ((factors, i) <- factorizedNums.zip(nums)) {\n            signatureToIndexSum(factors) += i\n        }\n\n        signatureToIndexSum.values.max\n    }\n}"
}