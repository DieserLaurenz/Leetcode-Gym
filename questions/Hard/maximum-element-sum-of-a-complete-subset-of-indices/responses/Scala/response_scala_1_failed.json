{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 69312000,
    "question_id": "3047",
    "elapsed_time": 10822,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708588961445,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 59,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182818629",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def maximumSum(nums: List[Int]): Long = {\n        def primeFactors(n: Int): Map[Int, Int] = {\n            var number = n\n            var factors = Map.empty[Int, Int]\n            var i = 2\n            while (i * i <= number) {\n                while (number % i == 0) {\n                    factors = factors.updated(i, factors.getOrElse(i, 0) + 1)\n                    number /= i\n                }\n                i += 1\n            }\n            if (number > 1) factors.updated(number, factors.getOrElse(number, 0) + 1) else factors\n        }\n\n        def normalizeFactors(factors: Map[Int, Int]): Map[Int, Int] = \n            factors.filter(_._2 % 2 != 0)\n\n        val normalizedFactors = nums.map(n => normalizeFactors(primeFactors(n)))\n        val factorGroups = normalizedFactors.distinct.map(f => (f, normalizedFactors.zip(nums).filter(_._1 == f).map(_._2.toLong).sum))\n        factorGroups.maxBy(_._2)._2\n    }\n}"
}