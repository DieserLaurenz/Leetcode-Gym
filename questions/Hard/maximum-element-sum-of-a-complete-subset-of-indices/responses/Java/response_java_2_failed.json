{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 49236000,
    "display_runtime": "832",
    "question_id": "3047",
    "elapsed_time": 1084,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587313623,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 58,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1182798451",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Solution {\n    public long maximumSum(List<Integer> nums) {\n        Map<String, Long> map = new HashMap<>();\n        long maxSum = 0;\n        for (int num : nums) {\n            Map<Integer, Integer> factors = factorize(num);\n            StringBuilder sb = new StringBuilder();\n            for (Map.Entry<Integer, Integer> entry : factors.entrySet()) {\n                if (entry.getValue() % 2 != 0) {\n                    sb.append(entry.getKey()).append(\",\");\n                }\n            }\n            String key = sb.toString();\n            map.put(key, map.getOrDefault(key, 0L) + num);\n            maxSum = Math.max(maxSum, map.get(key));\n        }\n        return maxSum;\n    }\n\n    private Map<Integer, Integer> factorize(int num) {\n        Map<Integer, Integer> factors = new HashMap<>();\n        for (int i = 2; i <= num / i; ++i) {\n            while (num % i == 0) {\n                factors.put(i, factors.getOrDefault(i, 0) + 1);\n                num /= i;\n            }\n        }\n        if (num > 1) factors.put(num, factors.getOrDefault(num, 0) + 1);\n        return factors;\n    }\n}"
}