{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 54260000,
    "display_runtime": "510",
    "question_id": "3047",
    "elapsed_time": 802,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587245563,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 63,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1182797587",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass Solution {\n    public long maximumSum(List<Integer> nums) {\n        Map<Map<Integer, Integer>, Long> groupSums = new HashMap<>();\n        for (int num : nums) {\n            Map<Integer, Integer> primeFactors = primeFactorize(num);\n            groupSums.putIfAbsent(primeFactors, 0L);\n            groupSums.put(primeFactors, groupSums.get(primeFactors) + num);\n        }\n        \n        long maxSum = 0;\n        for (long sum : groupSums.values()) {\n            maxSum = Math.max(maxSum, sum);\n        }\n        return maxSum;\n    }\n\n    private Map<Integer, Integer> primeFactorize(int num) {\n        Map<Integer, Integer> factors = new HashMap<>();\n        for (int i = 2; i * i <= num; i++) {\n            while (num % i == 0) {\n                factors.put(i, factors.getOrDefault(i, 0) + 1);\n                num /= i;\n            }\n        }\n        if (num > 1) {\n            factors.put(num, factors.getOrDefault(num, 0) + 1);\n        }\n        for (Map.Entry<Integer, Integer> entry : factors.entrySet()) {\n            entry.setValue(entry.getValue() % 2); // Only need to know if power is odd for square check\n        }\n        return factors;\n    }\n}"
}