{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 213448000,
    "question_id": "3047",
    "elapsed_time": 3266,
    "compare_result
    "code_output": "14",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708588780705,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 57,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1182816565",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_sum(nums)\n  require 'prime'\n\n  # Function to convert number into its prime factors squared count\n  def to_prime_factors_squared(num)\n    num.prime_division.to_h.transform_values(&:even?).delete_if { |k, v| v }.keys\n  end\n\n  # Convert each number into a unique prime factors representation\n  prime_factors_map = nums.map { |num| to_prime_factors_squared(num) }\n\n  # Group by unique prime factors representation to find complete subsets\n  groups = prime_factors_map.each_with_index.group_by { |factors, _| factors }\n  max_sum = 0\n\n  groups.each_value do |indices|\n    sum = indices.map { |_, i| nums[i] }.sum\n    max_sum = [max_sum, sum].max\n  end\n\n  max_sum\nend"
}