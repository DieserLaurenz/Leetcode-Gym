{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13604000,
    "question_id": "3047",
    "elapsed_time": 1777,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587384133,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1182799285",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <math.h>\n#include <stdbool.h>\n#include <string.h>\n\nlong long maximumSum(int* nums, int numsSize) {\n    long long dp[1 << 20];\n    memset(dp, -1, sizeof(dp));\n    dp[0] = 0; // Base case: empty set has sum 0\n    int mask, i, j;\n    for (i = 0; i < numsSize; ++i) {\n        int factors = 0;\n        for (int x = 2; x*x <= nums[i]; ++x) {\n            if (nums[i] % (x*x) == 0) {\n                while (nums[i] % (x*x) == 0) {\n                    nums[i] /= x*x;\n                }\n            }\n        }\n        for (int x = 2; x <= nums[i]; ++x) {\n            if (nums[i] % x == 0) {\n                int cnt = 0;\n                while (nums[i] % x == 0) {\n                    nums[i] /= x;\n                    cnt ^= 1;\n                }\n                if (cnt) factors |= 1 << (x-2);\n            }\n        }\n        for (mask = (1 << 20) - 1; mask >= 0; --mask) {\n            if (dp[mask] != -1 && (mask & factors) == 0) {\n                dp[mask | factors] = fmax(dp[mask | factors], dp[mask] + nums[i]);\n            }\n        }\n    }\n    long long ans = 0;\n    for (i = 0; i < (1 << 20); ++i) {\n        ans = fmax(ans, dp[i]);\n    }\n    return ans;\n}"
}