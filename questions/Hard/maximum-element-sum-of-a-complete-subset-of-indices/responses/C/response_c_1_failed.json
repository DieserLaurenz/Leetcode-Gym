{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6476000,
    "question_id": "3047",
    "elapsed_time": 3011,
    "compare_result
    "code_output": "77",
    "std_output": "",
    "last_testcase": "[8,7,3,5,7,2,4,9]",
    "expected_output": "16",
    "task_finish_time": 1708587426456,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 663,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1182799758",
    "input_formatted": "[8,7,3,5,7,2,4,9]",
    "input": "[8,7,3,5,7,2,4,9]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <limits.h>\n\nlong long gcd(long long a, long long b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n}\n\nlong long maximumSum(int* nums, int numsSize) {\n    long long dp[1 << 15] = {0}; // Using dynamic programming to store max sum of subsets\n    int primes[15] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47}; // First 15 primes\n    for (int i = 0; i < numsSize; ++i) {\n        int mask = 0;\n        long long num = nums[i];\n        for (int j = 0; j < 15; ++j) { // Factorize num over the primes and create bitmask\n            if (num % primes[j] == 0) {\n                int cnt = 0;\n                while (num % primes[j] == 0) {\n                    num /= primes[j];\n                    cnt++;\n                }\n                if (cnt % 2 != 0) mask |= 1 << j;\n            }\n        }\n        for (int j = 0; j < (1 << 15); ++j) {\n            if (dp[j] != 0 || j == 0) {\n                int newMask = j ^ mask; // XOR to combine masks\n                if (dp[newMask] < dp[j] + nums[i]) {\n                    dp[newMask] = dp[j] + nums[i];\n                }\n            }\n        }\n    }\n    long long result = 0;\n    for (int i = 0; i < (1 << 15); ++i) {\n        if (dp[i] > result) {\n            result = dp[i];\n        }\n    }\n    return result;\n}"
}