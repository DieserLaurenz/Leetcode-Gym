{
    "acRate": 31.352127850601548,
    "difficulty": "Hard",
    "freqBar": null,
    "frontendQuestionId": "2813",
    "isFavor": false,
    "paidOnly": false,
    "status": null,
    "title": "Maximum Elegance of a K-Length Subsequence",
    "titleSlug": "maximum-elegance-of-a-k-length-subsequence",
    "topicTags": [
        {
            "name": "Array",
            "id": "VG9waWNUYWdOb2RlOjU=",
            "slug": "array"
        },
        {
            "name": "Hash Table",
            "id": "VG9waWNUYWdOb2RlOjY=",
            "slug": "hash-table"
        },
        {
            "name": "Greedy",
            "id": "VG9waWNUYWdOb2RlOjE3",
            "slug": "greedy"
        },
        {
            "name": "Sorting",
            "id": "VG9waWNUYWdOb2RlOjYxMDQ5",
            "slug": "sorting"
        },
        {
            "name": "Heap (Priority Queue)",
            "id": "VG9waWNUYWdOb2RlOjYxMDUw",
            "slug": "heap-priority-queue"
        }
    ],
    "hasSolution": false,
    "hasVideoSolution": false,
    "codeSnippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution { public:     long long findMaximumElegance(vector<vector<int>>& items, int k) {              } };"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {     public long findMaximumElegance(int[][] items, int k) {              } }"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):     def findMaximumElegance(self, items, k):         \"\"\"         :type items: List[List[int]]         :type k: int         :rtype: int         \"\"\"         "
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:     def findMaximumElegance(self, items: List[List[int]], k: int) -> int:         "
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "long long findMaximumElegance(int** items, int itemsSize, int* itemsColSize, int k){  }"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {     public long FindMaximumElegance(int[][] items, int k) {              } }"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**  * @param {number[][]} items  * @param {number} k  * @return {number}  */ var findMaximumElegance = function(items, k) {      };"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function findMaximumElegance(items: number[][], k: number): number {  };"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {      /**      * @param Integer[][] $items      * @param Integer $k      * @return Integer      */     function findMaximumElegance($items, $k) {              } }"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {     func findMaximumElegance(_ items: [[Int]], _ k: Int) -> Int {              } }"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {     fun findMaximumElegance(items: Array<IntArray>, k: Int): Long {              } }"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {   int findMaximumElegance(List<List<int>> items, int k) {    } }"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func findMaximumElegance(items [][]int, k int) int64 {      }"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[][]} items # @param {Integer} k # @return {Integer} def find_maximum_elegance(items, k)      end"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {     def findMaximumElegance(items: Array[Array[Int]], k: Int): Long = {              } }"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {     pub fn find_maximum_elegance(items: Vec<Vec<i32>>, k: i32) -> i64 {              } }"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (find-maximum-elegance items k)   (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)    )"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec find_maximum_elegance(Items :: [[integer()]], K :: integer()) -> integer(). find_maximum_elegance(Items, K) ->   ."
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do   @spec find_maximum_elegance(items :: [[integer]], k :: integer) :: integer   def find_maximum_elegance(items, k) do    end end"
        }
    ],
    "content": "You are given a 0-indexed 2D integer array items of length n and an integer k. items[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively. Let's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence. Your task is to find the maximum elegance from all subsequences of size k in items. Return an integer denoting the maximum elegance of a subsequence of items with size exactly k. Note: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.  Example 1:  Input: items = [[3,2],[5,1],[10,1]], k = 2 Output: 17 Explanation: In this example, we have to select a subsequence of size 2. We can select items[0] = [3,2] and items[2] = [10,1]. The total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1]. Hence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance.   Example 2:  Input: items = [[3,1],[3,1],[2,2],[5,3]], k = 3 Output: 19 Explanation: In this example, we have to select a subsequence of size 3.  We can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3].  The total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3].  Hence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance. Example 3:  Input: items = [[1,1],[2,1],[3,1]], k = 3 Output: 7 Explanation: In this example, we have to select a subsequence of size 3.  We should select all the items.  The total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1].  Hence, the maximum elegance is 6 + 12 = 7.    Constraints:  1 <= items.length == n <= 105 items[i].length == 2 items[i][0] == profiti items[i][1] == categoryi 1 <= profiti <= 109 1 <= categoryi <= n  1 <= k <= n  "
}