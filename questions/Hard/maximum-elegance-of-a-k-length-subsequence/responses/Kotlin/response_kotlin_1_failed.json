{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 125328000,
    "question_id": "2894",
    "elapsed_time": 1312,
    "compare_result
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[[1,2],[10,1]]\n1",
    "expected_output": "11",
    "task_finish_time": 1708577156881,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1203,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1182650742",
    "input_formatted": "[[1,2],[10,1]], 1",
    "input": "[[1,2],[10,1]]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun findMaximumElegance(items: Array<IntArray>, k: Int): Long {\n        // Group by category and sort each group by profit in descending order\n        val groupedItems = items.groupBy { it[1] }.mapValues { (_, v) -> \n            v.map { it[0] }.sortedDescending()\n        }\n\n        // Priority queue for the highest profits, lambda specifies max heap\n        val maxProfits = PriorityQueue<Int>(compareByDescending { it })\n\n        // Total profit and categories counter\n        var totalProfit = 0L\n        var categories = 0\n\n        // Process each group\n        for ((_, profits) in groupedItems) {\n            // Add the highest profit of each category\n            if (profits.isNotEmpty()) {\n                totalProfit += profits[0]\n                categories++\n                // Add remaining profits to the priority queue\n                profits.drop(1).forEach { maxProfits.add(it) }\n            }\n        }\n\n        // Calculate initial elegance\n        var maxElegance = totalProfit + categories.toLong() * categories.toLong()\n\n        // Adjust for k items, adding profits from the queue if needed\n        for (i in categories until k) {\n            if (maxProfits.isNotEmpty()) {\n                totalProfit += maxProfits.poll()\n                maxElegance = maxOf(maxElegance, totalProfit + categories.toLong() * categories.toLong())\n            }\n        }\n\n        return maxElegance\n    }\n}"
}