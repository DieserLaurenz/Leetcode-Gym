{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24112000,
    "question_id": "2894",
    "elapsed_time": 889,
    "compare_result": "0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011111111111111101111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111101111111111111111111101111110111011101111111111111111111011111101111100111111111110111101111110111101111011111111111011110111111111111110111101111101111101111111111111011111111111111111111111111110101111110100110101111111010110110111011111110101111101111101101111110111001011111111011111010011111111101101110011010111011111111101000011111110011111001110110010110101111011001111111110101111111111011101111010011111000101101001011010111111101011011110001110001110110100111111010110111000110111011110111011111111100111001101111111100111010110110111001110110111111101111110101111011001011010011111110100101110101010011111111111101111010101111111110111010000100111101011101110011000001111011011100111000001101101001100010111011001010000001101101111000111001011100111111010110111101001010010101111110011001100001010101111111101110001111101011111100100111110011010101101111111110011001111110111110100001010010000101001011100011100001101101011001111011110111110100101111011100110011100111111100110111010111110000011100111101000100011110110101001101001101110111101110101011100110011110100111101110110111001010111001101101110100011011010110011101101001111111011101001100100100000101011110010010000011101001100001110111011100100011000100100100100100011101011101011101110100110110110111110001100001110000010111101001111010001000001101100011110010111111110011111111100101101100101000010010101100000000001111100100110100010011100010100100100100101010110000000101111001010001000010010100001000001010001000001010010101010010100000001001000110101000100000000001000011000100100001100000101010101001111001001101000000010111000001100000000111000000000101001101000010000001000100000100000100000011000000001011010000000000010101000010010100000000000100001000101010011000000101100110010010000000000000000001000111010000000001100000001000000000001000000000001000000010000000000010000010000000000000000000000000100000000100100000010000000000100000000000000010101000000001011000100000110000000001000000100110000000000000000000000001000010000000000000100000001001010100101110000010010101100100000010010001000000010100101000000000000000000000000001000000000000000000000101000000000000010000000000000001000000100010000000000000000000000000001000000000000000000000000001000010100000000001000000000100000000100000000000000000001000000000000000000000010000000011111101111111111111111110111101110101111111111001111110000011110010101110111111110100011011110011011101101010100010100100001",
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708577374722,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1461,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1182654011",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "import \"sort\"\n\nfunc findMaximumElegance(items [][]int, k int) int64 {\n    sort.Slice(items, func(i, j int) bool {\n        return items[i][0] > items[j][0] // Descending sort by profit\n    })\n\n    categoryCount := make(map[int]int)\n    var totalProfit int64 = 0\n    var uniqueCategories int64 = 0\n\n    // Initially select the first k items for maximum profit\n    for i := 0; i < k; i++ {\n        totalProfit += int64(items[i][0])\n        if categoryCount[items[i][1]] == 0 {\n            uniqueCategories++\n        }\n        categoryCount[items[i][1]]++\n    }\n\n    // Calculate initial elegance\n    maxElegance := totalProfit + uniqueCategories*uniqueCategories\n\n    // Try to replace items with lower profit but new category to increase distinct categories\n    for i := k; i < len(items); i++ {\n        if categoryCount[items[i][1]] == 0 { // Found a new category\n            // Find the least profitable item in the current selection that can be replaced\n            for j := 0; j < k; j++ {\n                if categoryCount[items[j][1]] > 1 { // This item's category is not unique in the selection\n                    // Update profit and categories\n                    totalProfit = totalProfit - int64(items[j][0]) + int64(items[i][0])\n                    categoryCount[items[j][1]]--\n                    categoryCount[items[i][1]]++\n                    uniqueCategories++\n\n                    // Calculate new elegance\n                    elegance := totalProfit + uniqueCategories*uniqueCategories\n                    if elegance > maxElegance {\n                        maxElegance = elegance\n                    }\n\n                    break // Stop after replacing one item\n                }\n            }\n        }\n    }\n\n    return maxElegance\n}"
}