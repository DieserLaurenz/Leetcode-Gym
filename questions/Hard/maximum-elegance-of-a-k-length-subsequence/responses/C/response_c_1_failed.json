{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 36036000,
    "question_id": "2894",
    "elapsed_time": 3014,
    "compare_result
    "code_output": "19",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708567435603,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1353,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1182539138",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n// Comparator for sorting items by profit in descending order\nint compare(const void *a, const void *b) {\n    int *itemA = *(int **)a;\n    int *itemB = *(int **)b;\n    return itemB[0] - itemA[0];\n}\n\nlong long findMaximumElegance(int** items, int itemsSize, int* itemsColSize, int k) {\n    long long maxElegance = 0;\n    // Sort the items based on profit in descending order\n    qsort(items, itemsSize, sizeof(int *), compare);\n\n    // Use dynamic programming to solve for the best combination\n    long long *dp = (long long *)calloc(k + 1, sizeof(long long));\n    for (int i = 0; i < itemsSize; ++i) {\n        for (int j = k; j > 0; --j) {\n            dp[j] = dp[j] > dp[j - 1] + items[i][0] ? dp[j] : dp[j - 1] + items[i][0];\n        }\n    }\n\n    int *categoryCount = (int *)calloc(itemsSize + 1, sizeof(int));\n    int totalCategories = 0;\n\n    // Count the number of distinct categories\n    for (int i = 0; i < itemsSize; ++i) {\n        if (!categoryCount[items[i][1]]) {\n            categoryCount[items[i][1]] = 1;\n            totalCategories++;\n        }\n    }\n\n    int distinctCategories = totalCategories < k ? totalCategories : k;\n\n    maxElegance = dp[k] + distinctCategories * distinctCategories;\n\n    free(dp);\n    free(categoryCount);\n\n    return maxElegance;\n}"
}