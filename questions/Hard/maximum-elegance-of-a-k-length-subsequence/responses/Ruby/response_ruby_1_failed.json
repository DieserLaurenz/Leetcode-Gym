{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 217376000,
    "question_id": "2894",
    "elapsed_time": 3402,
    "compare_result
    "code_output": "22",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708577554891,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1098,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1182656740",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer[][]} items\n# @param {Integer} k\n# @return {Integer}\ndef find_maximum_elegance(items, k)\n  items.sort_by! { |item| [-item[1], -item[0]] }\n  categories = items.map { |item| item[1] }.uniq\n  max_elegance = 0\n\n  categories.combination(k).each do |combination|\n    sub_items = items.select { |item| combination.include?(item[1]) }\n    profits = sub_items.map(&:first).sort.reverse.take(k)\n    total_profit = profits.sum\n    elegance = total_profit + k * k\n    max_elegance = [max_elegance, elegance].max\n  end\n\n  if categories.size > k\n    profits = items.map(&:first).sort.reverse.take(k)\n    total_profit = profits.sum\n    elegance = total_profit + k * k\n    max_elegance = [max_elegance, elegance].max\n  elsif categories.size == k\n    total_profit = items.map(&:first).sum\n    elegance = total_profit + categories.size * categories.size\n    max_elegance = [max_elegance, elegance].max\n  else\n    distinct_categories = categories.size\n    profits = items.map(&:first).sort.reverse.take(k)\n    total_profit = profits.sum\n    elegance = total_profit + distinct_categories * distinct_categories\n    max_elegance = [max_elegance, elegance].max\n  end\n\n  max_elegance\nend"
}