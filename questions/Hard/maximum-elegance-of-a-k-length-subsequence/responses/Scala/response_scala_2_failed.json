{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 113064000,
    "question_id": "2894",
    "elapsed_time": 2789,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708577721911,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 683,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182659288",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findMaximumElegance(items: Array[Array[Int]], k: Int): Long = {\n        // Group items by category and sort each group by profit descending\n        val groupedItems = items.groupBy(_(1)).view.mapValues(_.sortBy(-_(0))).toMap\n\n        // Calculate max profit for each category taking up to k items\n        val profitsByCategory = groupedItems.mapValues(_.take(k).map(_(0).toLong).sum).toArray.sortBy(-_._2)\n\n        // Initialize variables to calculate maximum elegance\n        var totalProfit = 0L\n        var categoriesUsed = 0\n        var itemsTaken = 0\n\n        // Take items from categories with highest profit until we reach k items\n        for ((_, profit) <- profitsByCategory if itemsTaken < k) {\n            val itemsToTake = Math.min(k - itemsTaken, groupedItems(profitsByCategory(categoriesUsed)._1).length)\n            totalProfit += profit\n            categoriesUsed += 1\n            itemsTaken += itemsToTake\n        }\n\n        totalProfit + categoriesUsed * categoriesUsed.toLong\n    }\n}"
}