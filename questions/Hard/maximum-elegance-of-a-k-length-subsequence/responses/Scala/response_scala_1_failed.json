{
    "status_code": 15,
    "lang": "scala",
    "run_success": false,
    "runtime_error": "Line 15: java.util.NoSuchElementException: key not found: 2 (at $anonfun$findMaximumElegance$2)",
    "full_runtime_error": "java.util.NoSuchElementException: key not found: 2\nLine 274: scala.collection.MapOps.default (Map.scala)\nLine 273: scala.collection.MapOps.default$ (Map.scala)\nLine 405: scala.collection.AbstractMap.default (Map.scala)\nLine 425: scala.collection.mutable.HashMap.apply (HashMap.scala)\nLine 15: Solution$.$anonfun$findMaximumElegance$2 (solution.scala)\nLine 190: scala.collection.immutable.Range.foreach$mVc$sp (Range.scala)\nLine 7: Solution$.findMaximumElegance (solution.scala)\nLine 36: Main$.__helper__ (solution.scala)\nLine 52: Main$.main (solution.scala)\nMain.main (prog_joined.scala)\nsun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\nLine 62: sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java)\nLine 43: sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java)\nLine 498: java.lang.reflect.Method.invoke (Method.java)\nLine 101: scala.reflect.internal.util.RichClassLoader$.$anonfun$run$extension$1 (ScalaClassLoader.scala)\nLine 36: scala.reflect.internal.util.RichClassLoader$.run$extension (ScalaClassLoader.scala)\nLine 30: scala.tools.nsc.CommonRunner.run (ObjectRunner.scala)\nLine 28: scala.tools.nsc.CommonRunner.run$ (ObjectRunner.scala)\nLine 45: scala.tools.nsc.ObjectRunner$.run (ObjectRunner.scala)\nLine 37: scala.tools.nsc.CommonRunner.runAndCatch (ObjectRunner.scala)\nLine 36: scala.tools.nsc.CommonRunner.runAndCatch$ (ObjectRunner.scala)\nLine 70: scala.tools.nsc.MainGenericRunner.runTarget$1 (MainGenericRunner.scala)\nLine 91: scala.tools.nsc.MainGenericRunner.run$1 (MainGenericRunner.scala)\nLine 103: scala.tools.nsc.MainGenericRunner.process (MainGenericRunner.scala)\nLine 108: scala.tools.nsc.MainGenericRunner$.main (MainGenericRunner.scala)\nscala.tools.nsc.MainGenericRunner.main (MainGenericRunner.scala)",
    "status_runtime": "N/A",
    "memory": 54720000,
    "question_id": "2894",
    "elapsed_time": 1042,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708577687077,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1182658785",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "object Solution {\n    def findMaximumElegance(items: Array[Array[Int]], k: Int): Long = {\n        val sortedItems = items.sortBy(-_(0))\n        val categoryCount = new scala.collection.mutable.HashMap[Int, Int]()\n        var totalProfit = 0L\n        var totalCategories = 0\n        for (i <- sortedItems.indices) {\n            if (i < k) {\n                totalProfit += sortedItems(i)(0)\n                if (categoryCount.getOrElseUpdate(sortedItems(i)(1), 0) == 0) {\n                    totalCategories += 1\n                }\n                categoryCount(sortedItems(i)(1)) += 1\n            } else {\n                if (categoryCount(sortedItems(i)(1)) == 0) {\n                    totalProfit -= sortedItems(k - 1)(0) - sortedItems(i)(0)\n                    if (sortedItems(k - 1)(1) != sortedItems(i)(1)) {\n                        categoryCount(sortedItems(k - 1)(1)) -= 1\n                        if (categoryCount(sortedItems(k - 1)(1)) == 0) {\n                            totalCategories -= 1\n                        }\n                        if (categoryCount.getOrElseUpdate(sortedItems(i)(1), 0) == 0) {\n                            totalCategories += 1\n                        }\n                        categoryCount(sortedItems(i)(1)) += 1\n                    }\n                }\n            }\n        }\n        totalProfit + totalCategories * totalCategories\n    }\n}"
}