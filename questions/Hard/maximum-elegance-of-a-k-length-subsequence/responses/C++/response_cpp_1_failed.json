{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 217616000,
    "question_id": "2894",
    "elapsed_time": 548,
    "compare_result": "1101101011100110111011111001111111110111101111101111110110001101100111110111111101111111111011100111111000101101011111110111111011111111111111110011010000111100111111010111111010011111110111111101010110011111101011110110111101001001100101111110111101111010000100110111110010111011011101011110110110111011101101100100111001110101110110100111111111000011010110010111010111011011111111110011001101110000000001100001111010110011111000110110011111101110101100000111001000110110110110101111011011111111111011111011011110101111011010000100011111011111111111011100101111111010011111111111110011100010100111111110111111101010001001100001001100111111010110111110000001100000000111101100110111101111110011110110101111110111011100110101010011111111100001110100101110101011100101111111101111110001111101011110110011111100101111000111111100001110001100101010011111101011110111101101000110100010101001111100111111111100111011101000010001110101110011111110111011001111101011011100110111011001010010111000111111101011010111011111110111001111011110100111010100010110011001111010101011001011111101011110101111111011010101111111111011110110111110011011101101111111011100001110110001011011111111100100111100111110010110111111011011110101100101111111101101110111100100101111100001111111101111111110111111101110111101111010110110001100001101001101001110111101111101100011111111011101001100001011110011010100100011111001111001110001101111101101010110001011001001100011101011011001111001111111000100010100111111110011111001110101011101110110111010010000011111111010010100111111110101011110110100011110010101101101100101001110101111110011111100100101011110001111010100000011100101100000000000011011100000101111101010010111010110111111011100100101010111101111011010011110011010010111111111010001111001111001101111010101011010110000101101011111111000100110111111001011001101111111111110110101111101110110100011111110111101001001101111001001111101010110100111101000110101110100110000111101111001101100100111111111001111111011111100110110111101100010000111011111111110111010001101101100111011111111001010000111110111000011100010111110110101010101110100101011101111011110111100001011011111111001101111100110100010011011010100010110101101011101010110111011100100011011010011101111011111010000001110010001111010001101011011010101101101111011111010111011110100010111111101100000010010001010101010100100000000100000000110000100001110101000110011110111111110110110001010110011111001111011011110111110001000010111101101110010001101011110111000110100011100100111010100111011001011100011000110011101110110111001111011000101000001011110100001111111111110110000000011000111110111101111101111110110101100011110001101010011010111101011101110110001001111111111100110100001",
    "code_output": "15",
    "std_output": "",
    "last_testcase": "[[1,1],[2,1],[3,1]]\n3",
    "expected_output": "7",
    "task_finish_time": 1708567159086,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1718,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1182536582",
    "input_formatted": "[[1,1],[2,1],[3,1]], 3",
    "input": "[[1,1],[2,1],[3,1]]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n#include <queue>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long findMaximumElegance(vector<vector<int>>& items, int k) {\n        unordered_map<int, vector<int>> profitByCategory;\n        for (auto& item : items) {\n            profitByCategory[item[1]].push_back(item[0]);\n        }\n\n        // Max heap for the best item of each category\n        priority_queue<int> maxProfits;\n        // Min heap to store the second best profits\n        priority_queue<int, vector<int>, greater<int>> additionalProfits;\n\n        for (auto& [category, profits] : profitByCategory) {\n            sort(profits.begin(), profits.end(), greater<int>()); // Sort profits in descending order\n            maxProfits.push(profits[0]); // Push the highest profit of the category\n            for (size_t i = 1; i < profits.size(); ++i) {\n                additionalProfits.push(profits[i]); // Push other profits\n            }\n        }\n\n        long long totalProfit = 0;\n        int distinctCategories = 0;\n        while (distinctCategories < k && !maxProfits.empty()) {\n            totalProfit += maxProfits.top();\n            maxProfits.pop();\n            distinctCategories++;\n        }\n\n        // If we need more items to reach k, take from additionalProfits\n        while (distinctCategories < k && !additionalProfits.empty()) {\n            totalProfit += additionalProfits.top();\n            additionalProfits.pop();\n            distinctCategories++;\n        }\n\n        return totalProfit + (long long)distinctCategories * distinctCategories;\n    }\n};"
}