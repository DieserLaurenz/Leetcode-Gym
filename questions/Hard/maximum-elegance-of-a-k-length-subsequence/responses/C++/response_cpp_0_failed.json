{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 217220000,
    "question_id": "2894",
    "elapsed_time": 538,
    "compare_result
    "code_output": "9",
    "std_output": "",
    "last_testcase": "[[1,1],[2,1],[3,1]]\n3",
    "expected_output": "7",
    "task_finish_time": 1708567125833,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1811,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1182536265",
    "input_formatted": "[[1,1],[2,1],[3,1]], 3",
    "input": "[[1,1],[2,1],[3,1]]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long findMaximumElegance(vector<vector<int>>& items, int k) {\n        unordered_map<int, vector<int>> categoryProfits;\n        for (auto& item : items) {\n            categoryProfits[item[1]].push_back(item[0]);\n        }\n\n        vector<int> bestProfits;\n        for (auto& [category, profits] : categoryProfits) {\n            sort(profits.rbegin(), profits.rend()); // Sort in descending order to get the best profit first\n            bestProfits.push_back(profits[0]); // Always take the best profit from each category\n        }\n\n        sort(bestProfits.rbegin(), bestProfits.rend()); // Sort the best profits in descending order\n\n        long long totalProfit = 0;\n        int distinctCategories = min((int)bestProfits.size(), k);\n        for (int i = 0; i < min(k, (int)bestProfits.size()); ++i) {\n            totalProfit += bestProfits[i];\n        }\n\n        // If we haven't reached k items, fill the remaining with the next best profits\n        for (int i = distinctCategories; i < k && i < items.size(); ++i) {\n            totalProfit += items[i][0]; // This assumes items are sorted by profit, which they are not\n                                          // So this approach is flawed in that sense\n        }\n\n        return totalProfit + (long long)distinctCategories * distinctCategories;\n    }\n};"
}