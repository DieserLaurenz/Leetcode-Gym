{
    "status_code": 15,
    "lang": "erlang",
    "run_success": false,
    "runtime_error": "Line 3: exception error: badarg",
    "full_runtime_error": "Line 3: exception error: badarg\n[{erlang,element,[2,[3,2]],[{error_info,#{module => erl_erts_errors}}]},\n {lists,keysort,2,[{file,\"lists.erl\"},{line,952}]},\n {solution,find_maximum_elegance,2,[{file,\"solution.erl\"},{line,3}]},\n {solution,consume_test_cases,2,[{file,\"solution.erl\"},{line,31}]},\n {solution,driver,0,[{file,\"solution.erl\"},{line,17}]},\n {solution,start,0,[{file,\"solution.erl\"},{line,48}]},\n {init,start_em,1,[]},\n {init,do_boot,3,[]}]",
    "status_runtime": "N/A",
    "memory": 65752000,
    "question_id": "2894",
    "elapsed_time": 1367,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708578149966,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182665893",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "-spec find_maximum_elegance(Items :: [[integer()]], K :: integer()) -> integer().\nfind_maximum_elegance(Items, K) ->\n    {SortedItems, _} = lists:unzip(lists:keysort(2, Items)),\n    Combinations = comb(SortedItems, K),\n    lists:max([sum(Combo) + length(lists:usort([C || {_, C} <- Combo])) * length(lists:usort([C || {_, C} <- Combo])) || Combo <- Combinations]).\n\ncomb(_, 0) -> [[]];\ncomb([], _) -> [];\ncomb([H|T], N) ->\n    [[H|C] || C <- comb(T, N-1)] ++ comb(T, N).\n\nsum([]) -> 0;\nsum([[P, _]|T]) -> P + sum(T)."
}