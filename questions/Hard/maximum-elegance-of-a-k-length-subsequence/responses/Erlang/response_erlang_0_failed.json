{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 71088000,
    "question_id": "2894",
    "elapsed_time": 5333,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "[[1,1],[4,1]]\n1",
    "expected_output": "5",
    "task_finish_time": 1708578125394,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 492,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1182665427",
    "input_formatted": "[[1,1],[4,1]], 1",
    "input": "[[1,1],[4,1]]\n1",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec find_maximum_elegance(Items :: [[integer()]], K :: integer()) -> integer().\nfind_maximum_elegance(Items, K) ->\n    SortedItems = lists:sort(fun([P1, _], [P2, _]) -> P1 > P2 end, Items),\n    MaxElegance = find_max_elegance(SortedItems, K, [], 0, 0),\n    MaxElegance.\n\nfind_max_elegance([], 0, Categories, Profit, _) ->\n    Profit + length(Categories) * length(Categories);\nfind_max_elegance([[Profit, Category] | RestItems], K, Categories, TotalProfit, MaxElegance) when K > 0 ->\n    NewCategories = case lists:member(Category, Categories) of\n        true -> Categories;\n        false -> [Category | Categories]\n    end,\n    NewElegance = find_max_elegance(RestItems, K - 1, NewCategories, TotalProfit + Profit, MaxElegance),\n    if\n        NewElegance > MaxElegance ->\n            find_max_elegance(RestItems, K, Categories, TotalProfit, NewElegance);\n        true ->\n            find_max_elegance(RestItems, K, Categories, TotalProfit, MaxElegance)\n    end;\nfind_max_elegance(_, _, _, _, MaxElegance) ->\n    MaxElegance."
}