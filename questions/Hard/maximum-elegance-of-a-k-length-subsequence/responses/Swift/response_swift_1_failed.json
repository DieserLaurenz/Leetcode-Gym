{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 38252000,
    "question_id": "2894",
    "elapsed_time": 5130,
    "compare_result
    "code_output": "19",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708576914143,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 806,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1182647173",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMaximumElegance(_ items: [[Int]], _ k: Int) -> Int {\n        var profits = items.map { $0[0] }\n        var categories = items.map { $0[1] }\n        var categoryToItems = [Int: [Int]]()\n\n        for i in 0..<items.count {\n            categoryToItems[categories[i], default: []].append(profits[i])\n        }\n\n        var profitSums = [(profit: Int, count: Int)]()\n        for (_, values) in categoryToItems {\n            let sortedValues = values.sorted(by: >)\n            for i in 0..<sortedValues.count {\n                let sum = sortedValues[0...i].reduce(0, +)\n                profitSums.append((profit: sum, count: i + 1))\n            }\n        }\n\n        profitSums.sort { $0.profit > $1.profit }\n\n        var dp = Array(repeating: 0, count: k + 1)\n        for i in 0..<profitSums.count {\n            let current = profitSums[i]\n            for j in stride(from: k, through: current.count, by: -1) {\n                dp[j] = max(dp[j], dp[j - current.count] + current.profit)\n            }\n        }\n\n        var maxElegance = 0\n        for i in 1...k {\n            maxElegance = max(maxElegance, dp[i] + i * i)\n        }\n\n        return maxElegance\n    }\n}"
}