{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 39052000,
    "question_id": "2894",
    "elapsed_time": 1061,
    "compare_result
    "code_output": "19",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708576876322,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 73,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1182646681",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func findMaximumElegance(_ items: [[Int]], _ k: Int) -> Int {\n        var categoryToProfits: [Int: [Int]] = [:]\n        for item in items {\n            categoryToProfits[item[1], default: []].append(item[0])\n        }\n        \n        for (_, profits) in categoryToProfits {\n            categoryToProfits[profits.count] = profits.sorted(by: >)\n        }\n        \n        var allProfits: [Int] = []\n        var categoriesCount = 0\n        for (_, profits) in categoryToProfits.sorted(by: { $0.value.count > $1.value.count }) {\n            if categoriesCount + profits.count <= k {\n                allProfits += profits\n                categoriesCount += profits.count\n            } else {\n                let needed = k - categoriesCount\n                if needed > 0 {\n                    allProfits += Array(profits.prefix(needed))\n                }\n                break\n            }\n        }\n        \n        let totalProfit = allProfits.sorted(by: >).prefix(k).reduce(0, +)\n        return totalProfit + (categoriesCount * categoriesCount)\n    }\n}"
}