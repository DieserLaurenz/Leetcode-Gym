{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 15924000,
    "question_id": "2894",
    "elapsed_time": 103,
    "compare_result
    "code_output": "19",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708577789581,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1269,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182660403",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_maximum_elegance(items: Vec<Vec<i32>>, k: i32) -> i64 {\n        use std::collections::HashMap;\n\n        let k = k as usize;\n        let mut category_map: HashMap<i32, Vec<i32>> = HashMap::new();\n\n        // Group items by categories and sort each category by profit in descending order\n        for item in items {\n            category_map.entry(item[1]).or_default().push(item[0]);\n        }\n        for (_, profits) in category_map.iter_mut() {\n            profits.sort_unstable_by(|a, b| b.cmp(a));\n        }\n\n        // Collect first k items from each category\n        let mut all_items: Vec<i32> = Vec::new();\n        let mut categories_with_excess_items: Vec<(i32, usize)> = Vec::new();\n        for (category, profits) in &category_map {\n            let mut profit_sum = 0;\n            for i in 0..k.min(profits.len()) {\n                profit_sum += profits[i];\n            }\n            if profits.len() > k {\n                categories_with_excess_items.push((profit_sum, profits.len()));\n            } else {\n                all_items.extend_from_slice(&profits[0..k.min(profits.len())]);\n            }\n        }\n\n        // Sort all items and categories with excess items\n        all_items.sort_unstable_by(|a, b| b.cmp(a));\n        categories_with_excess_items.sort_unstable_by(|a, b| b.0.cmp(&a.0));\n\n        // Calculate initial profit and categories\n        let mut total_profit: i64 = all_items.iter().take(k).map(|&x| x as i64).sum();\n        let mut distinct_categories = category_map.len().min(k);\n        let mut max_elegance = total_profit + (distinct_categories as i64).pow(2);\n\n        // Try to replace items with those from categories_with_excess_items if beneficial\n        for (i, (extra_profit, _)) in categories_with_excess_items.iter().enumerate() {\n            if i >= k || i >= all_items.len() {\n                break;\n            }\n            if all_items[i] as i64 > *extra_profit as i64 {\n                break;\n            }\n            total_profit = total_profit - all_items[i] as i64 + *extra_profit as i64;\n            max_elegance = max_elegance.max(total_profit + (distinct_categories as i64).pow(2));\n        }\n\n        max_elegance\n    }\n}"
}