{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16004000,
    "question_id": "2894",
    "elapsed_time": 93,
    "compare_result": "0001101011100110111011111001111111110111101111101111110110001101100111110111111101111111111011100111111000101101011111010111101010101111111111010011010000111100111111010111111010011101110111111101010110011111101011110110111101000001100101011110111101111010000000110111100010100011011001011110100100111011001001100100100001010101110010100101000100000011010110000011000110001000101011110011001000010000000000000000100000110011101000000110011110000010101100000101000000000000100000100001010011001010010010110011010110101100011000000100001110010100011010001000001100010010010110100001110000100000000001101000000010000000001000000001001000010001000010101000000000000000000001000000000000100001000001110000000010100001000100010000000000010000100000110100000110101000100100110000001010010000010101010000100000000100000010000001001000000110001100100000001000000001110000101000000110100000100000010100011100001100000011101000000000000000000001001000000010000100101010000000110101000000000000100000000100000000010100000110100001000100001000000000000000000000000001101000101001000000001000000000000101000000010000000001010001000100000000000010000001001000000100000000000000000000000011000000001000010110000000000001000001000100000100000001000000010000100000000000000001000001001000000000000010100110000100000000000000000000000000000100000010110100101001100000110000010100000000000000000001000000000010010000000000000000001000001000000000000000000000000000000011000000000000010100000000000000010000000000000001000000001001000010010000010000000110000000000000000010000000000000100000001000000000001000000000000000100010010010001000000100000000000000000000000010000000100000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100110010000000011000010000100000100101011000000101000010000000100000010010100100011101010110001000101010001000110000001",
    "code_output": "19",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708577825539,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 521,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1182660872",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn find_maximum_elegance(items: Vec<Vec<i32>>, k: i32) -> i64 {\n        use std::collections::HashMap;\n\n        let mut profits_by_category = HashMap::new();\n        for item in items {\n            profits_by_category.entry(item[1]).or_insert_with(Vec::new).push(item[0]);\n        }\n\n        let mut profits: Vec<i32> = Vec::new();\n        let mut single_profits: Vec<i32> = Vec::new();\n        for (_, mut category_profits) in profits_by_category {\n            category_profits.sort_unstable_by(|a, b| b.cmp(a));\n            if category_profits.len() == 1 {\n                single_profits.push(category_profits[0]);\n            } else {\n                profits.push(category_profits[0]);\n                single_profits.extend_from_slice(&category_profits[1..]);\n            }\n        }\n        single_profits.sort_unstable_by(|a, b| b.cmp(a));\n        profits.extend_from_slice(&single_profits);\n        let k = k as usize;\n        let total_profit: i64 = profits.iter().take(k).map(|&x| x as i64).sum();\n        let distinct_categories = profits.iter().take(k).count().min(k);\n\n        total_profit + (distinct_categories as i64).pow(2)\n    }\n}"
}