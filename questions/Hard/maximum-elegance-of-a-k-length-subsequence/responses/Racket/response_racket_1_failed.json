{
    "status_code": 14,
    "lang": "racket",
    "run_success": false,
    "status_runtime": "N/A",
    "memory": 305928000,
    "question_id": "2894",
    "elapsed_time": 5025,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[11,18],[35,1],[45,3],[12,13],[31,7],[47,13],[5,17],[28,21],[33,4],[14,22],[34,20],[47,14],[48,7],[21,14],[23,20],[24,20],[7,6],[23,2],[13,15],[12,17],[38,5],[44,3]]\n10",
    "expected_output": "480",
    "task_finish_time": 1708577956710,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1679,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1182662830",
    "status_msg": "Time Limit Exceeded",
    "state": "SUCCESS",
    "code": "(define/contract (find-maximum-elegance items k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  \n  (define (calc-elegance selected)\n    (let ([profits (map first selected)]\n          [categories (map second selected)])\n      (+ (apply + profits) (expt (length (remove-duplicates categories)) 2))))\n  \n  (define (generate-combinations items k)\n    (if (= k 0)\n        '(())\n        (if (null? items)\n            '()\n            (append (map (lambda (c) (cons (car items) c))\n                         (generate-combinations (cdr items) (- k 1)))\n                    (generate-combinations (cdr items) k)))))\n  \n  (define (find-max-elegance items k)\n    (let ([combinations (generate-combinations items k)])\n      (apply max (map calc-elegance combinations))))\n  \n  (find-max-elegance items k))"
}