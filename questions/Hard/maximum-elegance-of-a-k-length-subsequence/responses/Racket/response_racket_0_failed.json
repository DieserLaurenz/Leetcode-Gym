{
    "status_code": 20,
    "lang": "racket",
    "run_success": false,
    "compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`",
    "full_compile_error": "Line 1: Char 1: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 21\n  compilation context...:\n   solution.rkt",
    "status_runtime": "N/A",
    "memory": 0,
    "question_id": "2894",
    "task_finish_time": 1708577917137,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": null,
    "total_testcases": null,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1182662325",
    "status_msg": "Compile Error",
    "state": "SUCCESS",
    "code": "(define/contract (find-maximum-elegance items k)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\n  \n  (letrec ([combine (lambda (lst)\n                      (if (null? lst) '()\n                          (let loop ((res (car lst)) (rest (cdr lst)))\n                            (if (null? rest) res\n                                (loop (append-map (lambda (x) (map (lambda (y) (append x y))\n                                                                   (combine (cdr rest))))\n                                                  (list res))\n                                      (cdr rest))))))]\n    (let ([subsequences (combine (map list items))])\n      (define (elegance subseq)\n        (let ([profit (apply + (map car subseq))]\n              [categories (length (remove-duplicates (map cadr subseq)))])\n          (+ profit (* categories categories))))\n      (define (valid-subseq subseq) (= (length subseq) k))\n      (define max-elegance\n        (apply max (map elegance (filter valid-subseq subsequences))))\n      max-elegance)))"
}