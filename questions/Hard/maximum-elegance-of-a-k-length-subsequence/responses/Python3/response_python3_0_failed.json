{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59740000,
    "question_id": "2894",
    "elapsed_time": 1600,
    "compare_result
    "code_output": "11",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708892440849,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 314,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186110434",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import defaultdict\nimport heapq\n\nclass Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        category_to_profits = defaultdict(list)\n        for profit, category in items:\n            category_to_profits[category].append(-profit)\n        \n        for profits in category_to_profits.values():\n            heapq.heapify(profits)\n        \n        max_heap = []\n        for category, profits in category_to_profits.items():\n            heapq.heappush(max_heap, (profits[0], category))\n        \n        total_profit, distinct_categories, remaining = 0, 0, k\n        while remaining > 0:\n            if distinct_categories < remaining:\n                profit, category = heapq.heappop(max_heap)\n                total_profit += -profit\n                heapq.heappop(category_to_profits[category])\n                if category_to_profits[category]:\n                    heapq.heappush(max_heap, (category_to_profits[category][0], category))\n                distinct_categories += 1\n            else:\n                break\n            remaining -= 1\n        \n        return total_profit + distinct_categories ** 2"
}