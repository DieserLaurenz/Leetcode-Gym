{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59892000,
    "question_id": "2894",
    "elapsed_time": 1482,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708892508412,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 496,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186111128",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import defaultdict\nimport heapq\n\nclass Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        category_to_profits = defaultdict(list)\n        for profit, category in items:\n            category_to_profits[category].append(profit)\n        \n        for category in category_to_profits:\n            category_to_profits[category].sort(reverse=True)\n        \n        profit_heap = []\n        for category, profits in category_to_profits.items():\n            heapq.heappush(profit_heap, (-sum(profits[:k]), len(profits), profits))\n        \n        total_profit, used_categories = 0, 0\n        while k > 0 and profit_heap:\n            _, _, profits = heapq.heappop(profit_heap)\n            if len(profits) <= k:\n                total_profit += sum(profits)\n                k -= len(profits)\n                used_categories += 1\n            else:\n                total_profit += sum(profits[:k])\n                k = 0\n        \n        return total_profit + used_categories ** 2"
}