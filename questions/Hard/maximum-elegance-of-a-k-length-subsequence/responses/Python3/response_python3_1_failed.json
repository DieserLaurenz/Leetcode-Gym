{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56628000,
    "question_id": "2894",
    "elapsed_time": 1406,
    "compare_result
    "code_output": "22",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708892474430,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 328,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1186110787",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\nfrom collections import defaultdict\nimport heapq\n\nclass Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        category_to_profits = defaultdict(list)\n        for profit, category in items:\n            heapq.heappush(category_to_profits[category], -profit)\n        \n        all_profits = []\n        for profits in category_to_profits.values():\n            heapq.heappush(all_profits, sum(profits))\n        \n        distinct_categories = min(k, len(category_to_profits))\n        total_profit = -sum(heapq.nlargest(k, all_profits))\n        max_elegance = total_profit + distinct_categories ** 2\n        \n        return max_elegance"
}