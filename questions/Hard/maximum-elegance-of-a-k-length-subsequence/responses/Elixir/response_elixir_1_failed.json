{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 5: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 5: ** (ArgumentError) errors were found at the given arguments:\n  * 2nd argument: not a tuple\n    :erlang.element(2, [10, 1])\n    solution.ex:5: anonymous fn/1 in Solution.find_maximum_elegance/2\n    (elixir 1.15.7) lib/enum.ex:1410: anonymous fn/4 in Enum.group_by/3\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-group_by/3-lists^foldl/2-0-\"/3\n    solution.ex:5: Solution.find_maximum_elegance/2\n    solution.ex:39: Driver.consume_test_cases/2\n    solution.ex:25: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 76656000,
    "question_id": "2894",
    "elapsed_time": 396,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708578290603,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1182667952",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec find_maximum_elegance(items :: [[integer]], k :: integer) :: integer\n  def find_maximum_elegance(items, k) do\n    items\n    |> Enum.group_by(&elem(&1, 1), fn [p, _c] -> p end)\n    |> Enum.map(fn {_cat, profits} -> Enum.sort(profits, :desc) end)\n    |> Enum.sort_by(&Enum.count(&1), :desc)\n    |> Enum.reduce_while({0, 0}, fn profits, {sum, categories} ->\n      if categories < k do\n        new_sum = Enum.take(profits, min(k - categories, Enum.count(profits))) |> Enum.sum()\n        {:cont, {sum + new_sum, categories + 1}}\n      else\n        {:halt, sum + categories * categories}\n      end\n    end)\n    |> case do\n      {sum, categories} when categories == k -> sum + categories * categories\n      _ -> 0\n    end\n  end\nend"
}