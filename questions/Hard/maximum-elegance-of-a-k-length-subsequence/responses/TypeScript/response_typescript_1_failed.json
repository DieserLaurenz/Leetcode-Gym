{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 65684000,
    "question_id": "2894",
    "elapsed_time": 4011,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "[[1,1],[2,1],[3,1]]\n3",
    "expected_output": "7",
    "task_finish_time": 1708567876586,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1081,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182543103",
    "input_formatted": "[[1,1],[2,1],[3,1]], 3",
    "input": "[[1,1],[2,1],[3,1]]\n3",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function findMaximumElegance(items: number[][], k: number): number {\n    items.sort((a, b) => b[0] - a[0]);\n    const maxProfit = items.slice(0, k).reduce((acc, curr) => acc + curr[0], 0);\n    const categories = new Set(items.slice(0, k).map(item => item[1]));\n    let distinctCategories = categories.size;\n\n    const categoryMap = new Map<number, number[]>();\n    for (const [profit, category] of items) {\n        if (!categoryMap.has(category)) categoryMap.set(category, []);\n        categoryMap.get(category)!.push(profit);\n    }\n\n    for (const [category, profits] of categoryMap) {\n        profits.sort((a, b) => b - a);\n    }\n\n    let maxElegance = 0;\n    const dfs = (index: number, currentProfit: number, usedCategories: Set<number>, remainingItems: number) => {\n        if (remainingItems === 0 || index > items.length - 1) {\n            maxElegance = Math.max(maxElegance, currentProfit + usedCategories.size ** 2);\n            return;\n        }\n\n        dfs(index + 1, currentProfit, new Set(usedCategories), remainingItems);\n\n        const [profit, category] = items[index];\n        if (!usedCategories.has(category) || remainingItems > items.length - index) {\n            usedCategories.add(category);\n            dfs(index + 1, currentProfit + profit, new Set(usedCategories), remainingItems - 1);\n            usedCategories.delete(category);\n        }\n    };\n\n    dfs(0, 0, new Set(), k);\n    return maxElegance;\n};"
}