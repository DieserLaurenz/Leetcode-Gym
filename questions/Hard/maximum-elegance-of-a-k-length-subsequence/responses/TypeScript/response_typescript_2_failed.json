{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 110924000,
    "question_id": "2894",
    "elapsed_time": 2342,
    "compare_result": "0011111111011011111101111111011111111011111111111111111011111111111111111111111111111110111111111111111111111111101010011111100010001100010111011111111111111111110010111111111111110110101101110111111101101101111111111111111110110111111011011001110111110101111011001000101101100110101011111101101001101111111011001011111111111110111011110101100100111111111000101011101100100100001000011111110010010111111110011110110101101101111101001111111100010011101111111101110111001000101001010000110100011010010100000101010101110000110101111101100110100001001010101011011000010001110110000100110000110111011001101001000010011100010110001111111010000001101001001001111110001111111111010011001000000000000101001001010000001000100011001010001100010000011100100111010110010000110110000000011001011110000010100001001101000111010000110000000010110011110001010110100100111000001000010010110111001100000010001011111110000111000110010101100010000010000100100001000110100000000100001011100100000000101001100100000110010000000000001010101101000010000101000000001010100011100000000000000100110000001001010001000100000100100010000000000101001100000010000110000000100010000011100001000110100100000010010000000001000001001000000001100000001000011010000010000000101000100010010000011000010000010000100000000000001001000000000001000000100001100000100010110001000000001000010000100000100100110110110000010101001001001100000010000010011010000000000010101001100000100100000000000000100010000000010000001000001010011010000100000000000000110000000001000001101011100000000100110010000000001000000100110010100001001011010001000001100000010100110100000110011000000000000000000000000000010000100000000000100100000110000000010100000000100000000000000010000000101000000000000000000000100001000000000000000000000011000010010000000000000000000101000000000000000000011000000000000000000000000000000001001000000000000000000000000000000000000000000000100000000000000000001000000000000000000000001000000000000010000000000000000000010000000000000000000001000000010001000000100000000000000000000000000000000000000000000000001000000000000000000001000000000000000000000000000000010000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000100000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000011111000011010000000000110110001100100100010011000001110001000001010100101100111100000011011000001010100100000000010000010001",
    "code_output": "19",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708567912371,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 808,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1182543468",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function findMaximumElegance(items: number[][], k: number): number {\n    // Group items by category and sort them by profit in descending order\n    const categoryItems: Map<number, number[]> = new Map();\n    for (const [profit, category] of items) {\n        if (!categoryItems.has(category)) {\n            categoryItems.set(category, []);\n        }\n        categoryItems.get(category)!.push(profit);\n    }\n\n    for (const [category, profits] of categoryItems) {\n        categoryItems.set(category, profits.sort((a, b) => b - a));\n    }\n\n    // Calculate the total profit and track selected categories for the top k profits\n    let totalProfit = 0;\n    const selectedCategories: Set<number> = new Set();\n    const profits: number[] = [];\n    for (const [category, categoryProfits] of categoryItems) {\n        for (const profit of categoryProfits) {\n            if (profits.length < k) {\n                profits.push(profit);\n                totalProfit += profit;\n                selectedCategories.add(category);\n            } else {\n                profits.sort((a, b) => a - b);\n                if (profit > profits[0]) {\n                    totalProfit = totalProfit - profits[0] + profit;\n                    profits.shift();\n                    profits.push(profit);\n                    selectedCategories.add(category);\n                }\n            }\n        }\n    }\n\n    // Calculate elegance\n    const distinctCategories = selectedCategories.size;\n    const elegance = totalProfit + distinctCategories * distinctCategories;\n\n    return elegance;\n}"
}