{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 51992000,
    "question_id": "2894",
    "elapsed_time": 1380,
    "compare_result
    "code_output": "16",
    "std_output": "",
    "last_testcase": "[[3,2],[5,1],[10,1]]\n2",
    "expected_output": "17",
    "task_finish_time": 1708892314607,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 892,
    "total_testcases": 2728,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1186109163",
    "input_formatted": "[[3,2],[5,1],[10,1]], 2",
    "input": "[[3,2],[5,1],[10,1]]\n2",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def findMaximumElegance(self, items, k):\n        from collections import defaultdict\n        items.sort(reverse=True)\n        category_count = defaultdict(int)\n        max_elegance = 0\n        total_profit = 0\n        distinct_categories = 0\n        \n        for i in range(k):\n            total_profit += items[i][0]\n            if category_count[items[i][1]] == 0:\n                distinct_categories += 1\n            category_count[items[i][1]] += 1\n        \n        max_elegance = total_profit + distinct_categories ** 2\n        \n        for i in range(k, len(items)):\n            if category_count[items[i][1]] == 0:\n                temp_profit = total_profit - items[i-k][0] + items[i][0]\n                if items[i-k][1] != items[i][1]:\n                    temp_distinct = distinct_categories + 1\n                    max_elegance = max(max_elegance, temp_profit + temp_distinct ** 2)\n                else:\n                    max_elegance = max(max_elegance, temp_profit + distinct_categories ** 2)\n            category_count[items[i-k][1]] -= 1\n            if category_count[items[i-k][1]] == 0:\n                distinct_categories -= 1\n            total_profit = total_profit - items[i-k][0] + items[i][0]\n            if category_count[items[i][1]] == 0:\n                distinct_categories += 1\n            category_count[items[i][1]] += 1\n        \n        return max_elegance"
}