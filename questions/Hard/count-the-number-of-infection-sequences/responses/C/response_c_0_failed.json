{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7172000,
    "question_id": "3224",
    "elapsed_time": 270,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403664227,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180570219",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\nlong long factorial(int n) {\n    long long fact = 1;\n    for (int i = 2; i <= n; ++i) {\n        fact = (fact * i) % MOD;\n    }\n    return fact;\n}\n\nlong long power(long long x, int y, int p) {\n    long long res = 1;\n    x = x % p;\n    while (y > 0) {\n        if (y & 1)\n            res = (res * x) % p;\n        y = y >> 1;\n        x = (x * x) % p;\n    }\n    return res;\n}\n\nlong long modInverse(long long n, int p) {\n    return power(n, p - 2, p);\n}\n\nlong long nCrModPFermat(int n, int r, int p) {\n    if (r == 0)\n        return 1;\n    long long fac[n + 1];\n    fac[0] = 1;\n    for (int i = 1; i <= n; i++)\n        fac[i] = fac[i - 1] * i % p;\n    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;\n}\n\nint numberOfSequence(int n, int* sick, int sickSize) {\n    int totalGaps = 0, totalChoices = 1;\n    for (int i = 0; i <= sickSize; ++i) {\n        int gap = (i == 0 ? sick[0] : (i == sickSize ? n - 1 - sick[sickSize - 1] : sick[i] - sick[i - 1] - 1));\n        if (gap > 0) {\n            totalGaps += gap;\n            totalChoices = (int)((long long)totalChoices * factorial(gap) % MOD);\n            if (i > 0 && i < sickSize) {\n                totalChoices = (int)((long long)totalChoices * modInverse(2, MOD) % MOD);\n            }\n        }\n    }\n    return (int)((long long)totalChoices * nCrModPFermat(totalGaps, n - sickSize, MOD) % MOD);\n}"
}