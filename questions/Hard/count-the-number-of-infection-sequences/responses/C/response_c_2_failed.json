{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6588000,
    "question_id": "3224",
    "elapsed_time": 58,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403729292,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180571130",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\nint numberOfSequence(int n, int* sick, int sickSize) {\n    int totalWays = 1, gap, prev = 0;\n    for (int i = 0; i < sickSize; ++i) {\n        gap = (i == 0 ? sick[i] : sick[i] - prev - 1);\n        if (gap > 1) totalWays = (totalWays * 2) % MOD; // Each gap more than 1 gives two choices\n        prev = sick[i];\n    }\n    gap = n - 1 - sick[sickSize - 1];\n    if (gap > 1) totalWays = (totalWays * 2) % MOD; // Last gap check\n    return totalWays;\n}"
}