{
    "status_code": 11,
    "lang": "c",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 7160000,
    "question_id": "3224",
    "elapsed_time": 197,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403698891,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 16,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C",
    "submission_id": "1180570682",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MOD 1000000007\n\nint numberOfSequence(int n, int* sick, int sickSize) {\n    long long dp[100001];\n    dp[0] = 1; // Base case\n    for (int i = 1; i < n; ++i) {\n        dp[i] = dp[i - 1];\n        if (i > 1) {\n            dp[i] = (dp[i] + dp[i - 2]) % MOD;\n        }\n    }\n    long long totalWays = 1;\n    int prev = -1;\n    for (int i = 0; i < sickSize; ++i) {\n        int gap = (prev == -1) ? sick[i] - 1 : sick[i] - prev - 2;\n        if (gap > 0) {\n            totalWays = (totalWays * dp[gap]) % MOD;\n        }\n        prev = sick[i];\n    }\n    int lastGap = n - 1 - sick[sickSize - 1];\n    if (lastGap > 0) {\n        totalWays = (totalWays * dp[lastGap]) % MOD;\n    }\n    return (int)totalWays;\n}"
}