{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6172000,
    "question_id": "3224",
    "elapsed_time": 148,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413583531,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 13,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180706749",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func numberOfSequence(n int, sick []int) int {\n    const mod = 1000000007\n\n    // Helper function to calculate factorial modulo mod\n    factorial := func(n int) int {\n        f := 1\n        for i := 2; i <= n; i++ {\n            f = (f * i) % mod\n        }\n        return f\n    }\n\n    totalWays := 1\n    // Calculating the gaps between sick children and at the ends\n    gaps := make([]int, 0)\n\n    // Gap at the beginning\n    if sick[0] > 0 {\n        gaps = append(gaps, sick[0]-1)\n    }\n\n    // Gaps between sick children\n    for i := 0; i < len(sick)-1; i++ {\n        gap := sick[i+1] - sick[i] - 1\n        if gap > 0 {\n            gaps = append(gaps, gap)\n        }\n    }\n\n    // Gap at the end\n    if sick[len(sick)-1] < n-1 {\n        gaps = append(gaps, n-1-sick[len(sick)-1])\n    }\n\n    // Calculating ways for each gap\n    for _, gap := range gaps {\n        totalWays = (totalWays * factorial(gap)) % mod\n    }\n\n    return totalWays\n}"
}