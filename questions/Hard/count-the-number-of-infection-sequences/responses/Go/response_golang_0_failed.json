{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 6124000,
    "question_id": "3224",
    "elapsed_time": 29,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413501479,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 4,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180705672",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func numberOfSequence(n int, sick []int) int {\n    const mod = 1000000007\n    var ways int = 1\n\n    for i := 0; i < len(sick)-1; i++ {\n        gap := sick[i+1] - sick[i] - 1\n        if gap > 0 {\n            ways = ways * 2 % mod\n        }\n    }\n\n    if sick[0] > 0 {\n        ways = ways * 2 % mod\n    }\n    if sick[len(sick)-1] < n-1 {\n        ways = ways * 2 % mod\n    }\n\n    return ways\n}"
}