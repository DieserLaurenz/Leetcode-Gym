{
    "status_code": 11,
    "lang": "golang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 13448000,
    "question_id": "3224",
    "elapsed_time": 360,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413535372,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Go",
    "submission_id": "1180706090",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "func numberOfSequence(n int, sick []int) int {\n    const mod = 1000000007\n    dp := make([]int, n+1)\n    dp[0], dp[1] = 1, 1\n\n    for i := 2; i <= n; i++ {\n        dp[i] = (dp[i-1] + dp[i-2]) % mod\n    }\n\n    gaps := make([]int, 0, len(sick))\n    prev := -1\n    for _, s := range sick {\n        if prev != -1 {\n            gaps = append(gaps, s-prev-1)\n        }\n        prev = s\n    }\n    if sick[0] > 0 {\n        gaps = append([]int{sick[0]}, gaps...)\n    }\n    if sick[len(sick)-1] < n-1 {\n        gaps = append(gaps, n-1-sick[len(sick)-1])\n    }\n\n    result := 1\n    for _, gap := range gaps {\n        result = (result * dp[gap]) % mod\n    }\n\n    return result\n}"
}