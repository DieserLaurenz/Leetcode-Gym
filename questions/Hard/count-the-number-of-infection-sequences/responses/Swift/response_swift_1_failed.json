{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 16004000,
    "question_id": "3224",
    "elapsed_time": 161,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413069350,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1180699722",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func numberOfSequence(_ n: Int, _ sick: [Int]) -> Int {\n        let mod = 1000000007\n        var dp = Array(repeating: 0, count: n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in 2...n {\n            dp[i] = (dp[i - 1] + dp[i - 2]) % mod\n        }\n\n        var totalWays = 1\n        var prev = -1\n        for i in 0..<sick.count {\n            let gap = (i == 0 ? sick[i] : sick[i] - sick[i - 1] - 1)\n            if gap > 0 {\n                totalWays = (totalWays * dp[gap]) % mod\n            }\n            prev = sick[i]\n        }\n        if prev < n - 1 {\n            totalWays = (totalWays * dp[n - prev - 1]) % mod\n        }\n        \n        return totalWays\n    }\n}"
}