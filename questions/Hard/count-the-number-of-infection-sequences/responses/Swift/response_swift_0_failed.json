{
    "status_code": 11,
    "lang": "swift",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 18696000,
    "question_id": "3224",
    "elapsed_time": 665,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "4\n[1]",
    "expected_output": "3",
    "task_finish_time": 1708413037353,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 23,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Swift",
    "submission_id": "1180699230",
    "input_formatted": "4, [1]",
    "input": "4\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    func numberOfSequence(_ n: Int, _ sick: [Int]) -> Int {\n        let mod = 1000000007\n        var gaps = [Int]()\n        if sick[0] > 0 {\n            gaps.append(sick[0])\n        }\n        for i in 1..<sick.count {\n            let gap = sick[i] - sick[i - 1] - 1\n            if gap > 0 {\n                gaps.append(gap)\n            }\n        }\n        if sick.last! < n - 1 {\n            gaps.append(n - 1 - sick.last!)\n        }\n        var result = 1\n        for gap in gaps {\n            result = result * (1 << (gap - 1)) % mod\n        }\n        return result\n    }\n}"
}