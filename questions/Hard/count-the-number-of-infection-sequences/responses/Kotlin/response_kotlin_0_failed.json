{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 58440000,
    "question_id": "3224",
    "elapsed_time": 479,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413195242,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180701497",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun numberOfSequence(n: Int, sick: IntArray): Int {\n        val mod = 1000000007\n        var totalWays = 1L\n\n        // Add virtual sick children at the ends\n        val extendedSick = IntArray(sick.size + 2)\n        for (i in sick.indices) {\n            extendedSick[i + 1] = sick[i]\n        }\n        extendedSick[0] = -1 // Virtual sick child before the first child\n        extendedSick[extendedSick.lastIndex] = n // Virtual sick child after the last child\n\n        for (i in 1 until extendedSick.size) {\n            val gap = extendedSick[i] - extendedSick[i - 1] - 1\n            if (gap > 0) {\n                totalWays *= factorial(gap)\n                totalWays %= mod\n            }\n        }\n        return totalWays.toInt()\n    }\n\n    private fun factorial(n: Int): Long {\n        val mod = 1000000007\n        var result = 1L\n        for (i in 2..n) {\n            result *= i\n            result %= mod\n        }\n        return result\n    }\n}"
}