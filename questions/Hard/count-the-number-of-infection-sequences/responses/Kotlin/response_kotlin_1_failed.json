{
    "status_code": 11,
    "lang": "kotlin",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 59832000,
    "question_id": "3224",
    "elapsed_time": 1024,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413230741,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 14,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Kotlin",
    "submission_id": "1180701992",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    fun numberOfSequence(n: Int, sick: IntArray): Int {\n        val mod = 1000000007\n        var ways = 1L\n        val gaps = mutableListOf<Int>()\n\n        for (i in 1 until sick.size) {\n            val gap = sick[i] - sick[i - 1] - 1\n            if (gap > 0) gaps.add(gap)\n        }\n\n        if (sick.first() > 0) gaps.add(sick.first())\n        if (sick.last() < n - 1) gaps.add(n - 1 - sick.last())\n\n        for (gap in gaps) {\n            ways *= catalanNumber(gap)\n            ways %= mod\n        }\n\n        return ways.toInt()\n    }\n\n    private fun catalanNumber(n: Int): Long {\n        val mod = 1000000007\n        if (n == 0) return 1\n        var c = 1L\n        for (i in 0 until n) {\n            c *= 2L * (2 * i + 1)\n            c /= i + 2\n            c %= mod\n        }\n        return c\n    }\n}"
}