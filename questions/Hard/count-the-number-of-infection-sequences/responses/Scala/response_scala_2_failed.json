{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57132000,
    "question_id": "3224",
    "elapsed_time": 648,
    "compare_result
    "code_output": "7",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413868221,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 13,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1180710633",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def numberOfSequence(n: Int, sick: Array[Int]): Int = {\n        val mod = 1000000007\n        var result = 1\n        var i = 0\n        if (sick(0) > 0) result = (result * 2) % mod\n        if (sick.last < n - 1) result = (result * 2) % mod\n        while (i < sick.length - 1) {\n            val gap = sick(i + 1) - sick(i) - 1\n            if (gap > 0) {\n                result = (result * ((1 << gap) - 1)) % mod\n            }\n            i += 1\n        }\n        result\n    }\n}"
}