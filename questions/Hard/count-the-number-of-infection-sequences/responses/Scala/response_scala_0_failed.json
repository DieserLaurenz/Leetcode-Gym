{
    "status_code": 11,
    "lang": "scala",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 57112000,
    "question_id": "3224",
    "elapsed_time": 1005,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413796056,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Scala",
    "submission_id": "1180709610",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "object Solution {\n    def numberOfSequence(n: Int, sick: Array[Int]): Int = {\n        val mod = 1000000007\n        val gaps = sick.zip(sick.tail).map { case (a, b) => b - a - 1 } :+ (n - sick.last - 1) :+ sick.head\n        gaps.foldLeft(1)((acc, gap) => (acc * (1 to gap).foldLeft(1)((a, b) => (a * 2) % mod)) % mod)\n    }\n}"
}