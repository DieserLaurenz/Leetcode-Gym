{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 153004000,
    "question_id": "3224",
    "elapsed_time": 607,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413403175,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 11,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180704374",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int numberOfSequence(int n, List<int> sick) {\n    const int mod = 1000000007;\n    List<int> segments = [];\n    int total = 1, last = -1;\n    for (int i = 0; i < sick.length; i++) {\n      if (i == 0) {\n        segments.add(sick[i]);\n      } else {\n        segments.add(sick[i] - sick[i - 1] - 1);\n      }\n      if (i == sick.length - 1) {\n        segments.add(n - 1 - sick[i]);\n      }\n    }\n    for (int i = 0; i < segments.length; i++) {\n      if (segments[i] <= 0) continue;\n      if (i > 0 && i < segments.length - 1) {\n        total = (total * calculateWays(segments[i] + 1, mod)) % mod;\n      } else {\n        total = (total * calculateWays(segments[i], mod)) % mod;\n      }\n    }\n    return total;\n  }\n\n  int calculateWays(int segmentLength, int mod) {\n    int ways = 1;\n    for (int i = 1; i <= segmentLength - 1; i++) {\n      ways = (ways * 2) % mod;\n    }\n    return ways;\n  }\n}"
}