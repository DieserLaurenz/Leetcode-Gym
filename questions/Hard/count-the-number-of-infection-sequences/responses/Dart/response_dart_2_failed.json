{
    "status_code": 11,
    "lang": "dart",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 148860000,
    "question_id": "3224",
    "elapsed_time": 615,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413443132,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Dart",
    "submission_id": "1180704874",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n  int numberOfSequence(int n, List<int> sick) {\n    final int mod = 1000000007;\n    int totalWays = 1;\n\n    // Calculate gaps between sick children and at the ends\n    List<int> gaps = [];\n    if (sick.first > 0) {\n      gaps.add(sick.first);\n    }\n    for (int i = 1; i < sick.length; i++) {\n      int gap = sick[i] - sick[i - 1] - 1;\n      if (gap > 0) {\n        gaps.add(gap);\n      }\n    }\n    if (sick.last != n - 1) {\n      gaps.add(n - 1 - sick.last);\n    }\n\n    // Calculate factorial for each gap\n    for (int gap in gaps) {\n      for (int i = 1; i <= gap; i++) {\n        totalWays = (totalWays * i) % mod;\n      }\n    }\n\n    return totalWays;\n  }\n}"
}