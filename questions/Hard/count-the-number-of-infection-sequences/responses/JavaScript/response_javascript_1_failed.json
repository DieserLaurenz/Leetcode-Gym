{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 55048000,
    "question_id": "3224",
    "elapsed_time": 2406,
    "compare_result
    "code_output": "984808596",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403958943,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 10,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1180574220",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number[]} sick\n * @return {number}\n */\nvar numberOfSequence = function(n, sick) {\n    const mod = 1000000007;\n\n    function factorial(x) {\n        let result = 1;\n        for (let i = 2; i <= x; i++) {\n            result = (result * i) % mod;\n        }\n        return result;\n    }\n\n    function catalanNumber(x) {\n        if (x <= 1) return 1;\n        let c = factorial(2 * x);\n        let temp = (factorial(x + 1) * factorial(x)) % mod;\n        c = c * pow(temp, mod - 2) % mod;\n        return c;\n    }\n\n    function pow(x, y) {\n        let result = 1;\n        x = x % mod;\n        while (y > 0) {\n            if (y & 1) result = (result * x) % mod;\n            y = y >> 1;\n            x = (x * x) % mod;\n        }\n        return result;\n    }\n\n    let totalWays = 1;\n    for (let i = 0; i < sick.length - 1; i++) {\n        let gap = sick[i + 1] - sick[i] - 1;\n        if (gap > 0) {\n            totalWays = (totalWays * catalanNumber(gap)) % mod;\n        }\n    }\n\n    for (let i = 1; i < sick.length; i++) {\n        let gap = sick[i] - sick[i - 1] - 1;\n        totalWays = (totalWays * factorial(gap)) % mod;\n    }\n\n    let leftGap = sick[0], rightGap = n - 1 - sick[sick.length - 1];\n    if (leftGap > 0) totalWays = (totalWays * factorial(leftGap)) % mod;\n    if (rightGap > 0) totalWays = (totalWays * factorial(rightGap)) % mod;\n\n    return totalWays;\n};"
}