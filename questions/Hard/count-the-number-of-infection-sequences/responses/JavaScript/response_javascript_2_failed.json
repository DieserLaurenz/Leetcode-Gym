{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 74800000,
    "question_id": "3224",
    "elapsed_time": 1000,
    "compare_result
    "code_output": "24",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708404014245,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 22,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1180574995",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number[]} sick\n * @return {number}\n */\nvar numberOfSequence = function(n, sick) {\n    const MOD = 1000000007;\n    let dp = Array(n).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i < n; i++) dp[i] = (dp[i - 1] * i) % MOD;\n\n    function modInverse(a, m = MOD) {\n        let m0 = m, t, q;\n        let x0 = 0, x1 = 1;\n        if (m === 1) return 0;\n        while (a > 1) {\n            q = Math.floor(a / m);\n            t = m;\n            m = a % m;\n            a = t;\n            t = x0;\n            x0 = x1 - q * x0;\n            x1 = t;\n        }\n        if (x1 < 0) x1 += m0;\n        return x1;\n    }\n\n    function nCr(n, r) {\n        if (n < r) return 0;\n        if (n === r || r === 0) return 1;\n        return (dp[n] * modInverse(dp[r]) % MOD) * modInverse(dp[n - r]) % MOD;\n    }\n\n    let ans = 1, prev = -1;\n    for (let i = 0; i < sick.length; i++) {\n        if (prev !== -1) {\n            let len = sick[i] - prev - 1;\n            ans = (ans * nCr(len + 1, 1)) % MOD;\n        }\n        prev = sick[i];\n    }\n    for (let i = 1; i < sick.length; i++) {\n        let len = sick[i] - sick[i - 1] - 1;\n        ans = (ans * dp[len]) % MOD;\n    }\n    let left = sick[0], right = n - 1 - sick[sick.length - 1];\n    ans = (ans * dp[left]) % MOD;\n    ans = (ans * dp[right]) % MOD;\n    return ans;\n};"
}