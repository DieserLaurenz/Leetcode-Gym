{
    "status_code": 11,
    "lang": "javascript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53968000,
    "question_id": "3224",
    "elapsed_time": 685,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403907994,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "JavaScript",
    "submission_id": "1180573512",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "/**\n * @param {number} n\n * @param {number[]} sick\n * @return {number}\n */\nvar numberOfSequence = function(n, sick) {\n    const mod = 1000000007;\n    let gaps = [], result = 1;\n    \n    for (let i = 0; i < sick.length - 1; i++) {\n        gaps.push(sick[i + 1] - sick[i] - 1);\n    }\n    \n    gaps.push(sick[0]);\n    gaps.push(n - 1 - sick[sick.length - 1]);\n    \n    for (let gap of gaps) {\n        for (let i = 1; i <= gap; i++) {\n            result = (result * i) % mod;\n        }\n    }\n    \n    return result;\n};"
}