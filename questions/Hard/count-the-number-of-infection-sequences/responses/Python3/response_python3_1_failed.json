{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 24612000,
    "question_id": "3224",
    "elapsed_time": 4344,
    "compare_result": "0000010001000000000010000001111000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000000000010000000000000000000000000000001000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "7",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708880801249,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 14,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185960932",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def numberOfSequence(self, n: int, sick: List[int]) -> int:\n        MOD = 10**9 + 7\n        \n        # Calculate factorial and inverse factorial for n up to 10^5\n        fact = [1] * (n + 1)\n        inv_fact = [1] * (n + 1)\n        for i in range(2, n + 1):\n            fact[i] = fact[i-1] * i % MOD\n        \n        inv_fact[n] = pow(fact[n], MOD - 2, MOD)\n        for i in range(n - 1, 0, -1):\n            inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD\n\n        def binom(n, k):\n            if n < k or k < 0:\n                return 0\n            return fact[n] * inv_fact[k] % MOD * inv_fact[n-k] % MOD\n\n        sick.append(n)\n        total = 1\n        for i in range(1, len(sick)):\n            gap = sick[i] - sick[i-1] - 1\n            if gap > 0:\n                total *= binom(gap + 1, 2) + 1\n                total %= MOD\n        return total"
}