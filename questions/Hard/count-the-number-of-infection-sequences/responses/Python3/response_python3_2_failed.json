{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 169864000,
    "question_id": "3224",
    "elapsed_time": 685,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708880840699,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 17,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185961521",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def numberOfSequence(self, n: int, sick: List[int]) -> int:\n        MOD = 10**9 + 7\n\n        def dp(x):\n            # Base case: when there's only one child to infect, there's only one way to do it.\n            if x <= 1:\n                return 1\n            # If we already calculated the number of ways for x children, return it.\n            if x in memo:\n                return memo[x]\n            # The recurrence relation: dp(x) = x * dp(x - 1)\n            memo[x] = x * dp(x - 1) % MOD\n            return memo[x]\n\n        memo = {}\n        total_ways = 1\n        prev = 0\n        for i in range(len(sick)):\n            # Distance between two consecutive sick children or the first/last sick child and the end of the queue.\n            if i == 0:\n                gap = sick[i] - prev\n            else:\n                gap = sick[i] - sick[i-1] - 1\n            if i == len(sick) - 1 and sick[i] != n - 1:\n                gap += n - sick[i] - 1\n            # Calculate the total number of ways for the current gap and multiply it with the total ways.\n            total_ways *= dp(gap)\n            total_ways %= MOD\n            prev = sick[i] + 1\n\n        return total_ways"
}