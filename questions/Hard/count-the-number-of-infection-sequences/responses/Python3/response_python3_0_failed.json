{
    "status_code": 11,
    "lang": "python3",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20492000,
    "question_id": "3224",
    "elapsed_time": 3014,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708880763923,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python3",
    "submission_id": "1185960394",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "from typing import List\n\nclass Solution:\n    def numberOfSequence(self, n: int, sick: List[int]) -> int:\n        MOD = 10**9 + 7\n        def factorial(x):\n            return 1 if x == 0 else (x * factorial(x - 1)) % MOD\n\n        def countWays(length):\n            if length <= 1:\n                return 1\n            return factorial(length - 1)\n        \n        total_ways = 1\n        prev = -1\n        for s in sick:\n            if prev != -1:\n                gap_length = s - prev - 1\n                total_ways *= countWays(gap_length)\n                total_ways %= MOD\n            prev = s\n\n        # Calculate for the gap before the first sick child and after the last sick child\n        total_ways *= countWays(sick[0]) * countWays(n - 1 - sick[-1])\n        total_ways %= MOD\n\n        return total_ways"
}