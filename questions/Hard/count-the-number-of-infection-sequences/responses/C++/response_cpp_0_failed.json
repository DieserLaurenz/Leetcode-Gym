{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 298820000,
    "question_id": "3224",
    "elapsed_time": 249,
    "compare_result": "0000000000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100010000000000000000000000000010001000000001000000000000000000000000000000000000000000001001000000010000000000000000100000000000000000000000000000000000000000000000000000000000101110111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "5",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403405922,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 19,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180566624",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfSequence(int n, vector<int>& sick) {\n        const int MOD = 1e9 + 7;\n        vector<int> gaps;\n        \n        // Calculating gaps between sick children\n        for (int i = 1; i < sick.size(); i++) {\n            int gap = sick[i] - sick[i - 1] - 1;\n            if (gap > 0) gaps.push_back(gap);\n        }\n        \n        // Adding edges as gaps if they exist\n        if (sick.front() > 0) gaps.push_back(sick.front());\n        if (sick.back() < n - 1) gaps.push_back(n - 1 - sick.back());\n        \n        long long answer = 1;\n        for (int gap : gaps) {\n            answer = (answer * fib(gap + 1, MOD)) % MOD;\n        }\n        \n        return answer;\n    }\n\nprivate:\n    long long fib(int n, int MOD) {\n        if (n <= 1) return 1;\n        vector<long long> f(n + 1);\n        f[0] = 1; f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = (f[i - 1] + f[i - 2]) % MOD;\n        }\n        return f[n];\n    }\n};"
}