{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 37244000,
    "question_id": "3224",
    "elapsed_time": 191,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403441474,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180567131",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfSequence(int n, vector<int>& sick) {\n        const int MOD = 1e9 + 7;\n        vector<int> segments;\n        int prev = -1;\n        \n        for (int i : sick) {\n            if (prev != -1) segments.push_back(i - prev - 1);\n            prev = i;\n        }\n        \n        if (sick[0] > 0) segments.push_back(sick[0]);\n        if (sick.back() < n - 1) segments.push_back(n - 1 - sick.back());\n\n        long long res = 1;\n        for (int seg : segments) {\n            res = (res * countWays(seg)) % MOD;\n        }\n        \n        return res;\n    }\n\nprivate:\n    long long countWays(int len) {\n        if (len <= 1) return 1;\n        long long first = 1, second = 1;\n        for (int i = 2; i <= len; i++) {\n            long long temp = second;\n            second = (second + first) % (int)(1e9 + 7);\n            first = temp;\n        }\n        return second;\n    }\n};"
}