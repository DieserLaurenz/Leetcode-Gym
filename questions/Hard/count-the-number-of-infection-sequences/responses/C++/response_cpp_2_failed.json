{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 21784000,
    "question_id": "3224",
    "elapsed_time": 22,
    "compare_result
    "code_output": "8",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403466081,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1180567473",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfSequence(int n, vector<int>& sick) {\n        const int MOD = 1e9 + 7;\n        long long ans = 1;\n        for (int i = 1; i < sick.size(); ++i) {\n            int gap = sick[i] - sick[i - 1] - 1;\n            ans = (ans * countWays(gap)) % MOD;\n        }\n        if (sick[0] > 0) ans = (ans * 2) % MOD; // Left end\n        if (sick.back() < n - 1) ans = (ans * 2) % MOD; // Right end\n        return ans;\n    }\n\nprivate:\n    int countWays(int gap) {\n        if (gap <= 0) return 1;\n        return 1 << gap; // 2^gap, since each child can infect in 2 ways except the first one\n    }\n};"
}