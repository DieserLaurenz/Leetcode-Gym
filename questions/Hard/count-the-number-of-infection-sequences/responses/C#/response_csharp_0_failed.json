{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 47400000,
    "question_id": "3224",
    "elapsed_time": 200,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "4\n[1]",
    "expected_output": "3",
    "task_finish_time": 1708403790935,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 23,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180571958",
    "input_formatted": "4, [1]",
    "input": "4\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int NumberOfSequence(int n, int[] sick) {\n        const int MOD = 1000000007;\n        long result = 1;\n        for (int i = 1; i < sick.Length; i++) {\n            int gap = sick[i] - sick[i - 1] - 1;\n            result = result * Pow(2, gap - 1, MOD) % MOD;\n        }\n        if (sick[0] > 0) result = result * Pow(2, sick[0] - 1, MOD) % MOD;\n        if (sick[sick.Length - 1] < n - 1) result = result * Pow(2, n - sick[sick.Length - 1] - 2, MOD) % MOD;\n        return (int)result;\n    }\n\n    private long Pow(long baseVal, int exponent, int mod) {\n        long result = 1;\n        while (exponent > 0) {\n            if (exponent % 2 == 1) result = result * baseVal % mod;\n            baseVal = baseVal * baseVal % mod;\n            exponent /= 2;\n        }\n        return result;\n    }\n}"
}