{
    "status_code": 11,
    "lang": "csharp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 118780000,
    "question_id": "3224",
    "elapsed_time": 476,
    "compare_result": "0010010000010000000000010010000101000010000000000000000000100000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100001000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403856831,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C#",
    "submission_id": "1180572856",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "public class Solution {\n    public int NumberOfSequence(int n, int[] sick) {\n        long result = 1;\n        const int MOD = 1000000007;\n        for (int i = 1; i < sick.Length; i++) {\n            int gap = sick[i] - sick[i - 1] - 1;\n            result = (result * CalculateWays(gap)) % MOD;\n        }\n        if (sick[0] > 0) result = (result * CalculateWays(sick[0])) % MOD;\n        if (sick[sick.Length - 1] < n - 1) result = (result * CalculateWays(n - 1 - sick[sick.Length - 1])) % MOD;\n        return (int)result;\n    }\n\n    private long CalculateWays(int gap) {\n        if (gap <= 1) return 1;\n        long[] dp = new long[gap + 1];\n        dp[0] = 1;\n        dp[1] = 1;\n        for (int i = 2; i <= gap; i++) {\n            dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007;\n        }\n        return dp[gap];\n    }\n}"
}