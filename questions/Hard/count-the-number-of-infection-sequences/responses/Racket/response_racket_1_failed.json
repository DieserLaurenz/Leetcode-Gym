{
    "status_code": 15,
    "lang": "racket",
    "run_success": false,
    "runtime_error": "expt: arity mismatch;",
    "full_runtime_error": "expt: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n  context...:\n   solution.rkt:19:4: loop\n   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33\n   solution.rkt:34:2\n   body of (submod \"solution.rkt\" main)",
    "status_runtime": "N/A",
    "memory": 100084000,
    "question_id": "3224",
    "elapsed_time": 283,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708414102626,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Racket",
    "submission_id": "1180713829",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "(define/contract (number-of-sequence n sick)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  \n  (define mod 1000000007)\n  \n  (define (factorial n)\n    (if (= n 0) 1 (modulo (* n (factorial (- n 1))) mod)))\n  \n  (define (mod-inverse a m)\n    (expt a (- m 2) m))\n  \n  (define (nCr n r)\n    (if (> r n) 0\n        (let ((num (factorial n))\n              (denom (modulo (* (factorial r) (factorial (- n r))) mod)))\n          (modulo (* num (mod-inverse denom mod)) mod))))\n  \n  (define (count-sequences n sick)\n    (let loop ((sick sick) (prev -1) (gap 0) (result 1))\n      (if (null? sick)\n          result\n          (let ((current (car sick)))\n            (if (= prev -1)\n                (loop (cdr sick) current gap result)\n                (let ((new-gap (- current prev 1)))\n                  (set! result (modulo (* result (nCr (+ gap new-gap) new-gap)) mod))\n                  (loop (cdr sick) current (+ gap new-gap) result)))))))\n  \n  (count-sequences n sick))"
}