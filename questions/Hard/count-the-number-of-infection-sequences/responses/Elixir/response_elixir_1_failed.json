{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 78932000,
    "question_id": "3224",
    "elapsed_time": 926,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708414388008,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180717550",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_sequence(n :: integer, sick :: [integer]) :: integer\n  def number_of_sequence(n, sick) do\n    combine = fn a, b, mod -> rem(a * b, mod) end\n    fact = fn n, mod ->\n      Enum.reduce(1..n, 1, &(combine.(&1, &2, mod)))\n    end\n\n    calculate_ways = fn gap, mod ->\n      if gap <= 0, do: 1, else: fact.(gap, mod)\n    end\n\n    mod = 1_000_000_007\n    gaps = Enum.zip([-1 | sick], sick ++ [n]) |> Enum.map(fn {a, b} -> b - a - 2 end)\n    Enum.reduce(gaps, 1, fn gap, acc -> combine.(acc, calculate_ways.(gap, mod), mod) end)\n  end\nend"
}