{
    "status_code": 15,
    "lang": "elixir",
    "run_success": false,
    "runtime_error": "Line 8: ** (ArgumentError) errors were found at the given arguments:",
    "full_runtime_error": "Line 8: ** (ArgumentError) errors were found at the given arguments:\n  * 1st argument: not a nonempty list\n    :erlang.hd(1..5)\n    solution.ex:8: anonymous fn/2 in Solution.number_of_sequence/2\n    (elixir 1.15.7) lib/enum.ex:2510: Enum.\"-reduce/3-lists^foldl/2-0-\"/3\n    solution.ex:8: Solution.number_of_sequence/2\n    solution.ex:44: Driver.consume_test_cases/2\n    solution.ex:30: Driver.start/0\n    nofile:1: (file)",
    "status_runtime": "N/A",
    "memory": 73848000,
    "question_id": "3224",
    "elapsed_time": 353,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708414428405,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180718093",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_sequence(n :: integer, sick :: [integer]) :: integer\n  def number_of_sequence(n, sick) do\n    mod = 1_000_000_007\n\n    # Calculate factorial and its modular inverse\n    factorial = Enum.reduce(0..n, [1], fn x, acc -> [rem(hd(acc) * x, mod) | acc] end) |> Enum.reverse\n    inv_factorial = Enum.reduce([1], 1..n, fn x, acc -> [rem(hd(acc) * :math.pow(x, mod - 2, mod), mod) | acc] end) |> Enum.reverse\n\n    calculate_ways = fn (total, sick) ->\n      combinations = rem(factorial[total] * inv_factorial[sick] * inv_factorial[total - sick], mod)\n      rem(combinations, mod)\n    end\n\n    gaps = Enum.zip([-1 | sick], sick ++ [n]) |> Enum.map(fn {a, b} -> b - a - 1 end)\n    total_ways = Enum.reduce(gaps, 1, fn gap, acc ->\n      if gap <= 0 do\n        acc\n      else\n        rem(acc * calculate_ways.(gap, 1), mod)\n      end\n    end)\n\n    total_ways\n  end\nend"
}