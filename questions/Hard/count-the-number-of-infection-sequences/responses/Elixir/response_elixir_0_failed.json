{
    "status_code": 11,
    "lang": "elixir",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 79820000,
    "question_id": "3224",
    "elapsed_time": 3445,
    "compare_result
    "code_output": "512",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708414354343,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Elixir",
    "submission_id": "1180717065",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "defmodule Solution do\n  @spec number_of_sequence(n :: integer, sick :: [integer]) :: integer\n  def number_of_sequence(n, sick) do\n    gaps = Enum.zip([0 | sick], sick ++ [n-1])\n            |> Enum.map(fn {a, b} -> b - a - 1 end)\n    Enum.reduce(gaps, 1, fn gap, acc ->\n      acc * case gap do\n        0 -> 1\n        _ -> Enum.reduce(1..gap, 1, fn _, acc -> acc * 2 end)\n      end\n    end) |> rem(1_000_000_007)\n  end\nend"
}