{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 20392000,
    "question_id": "3224",
    "elapsed_time": 422,
    "compare_result
    "code_output": "64",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708412900733,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1180697372",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $sick\n     * @return Integer\n     */\n    function numberOfSequence($n, $sick) {\n        $mod = 1000000007;\n        $count = 1;\n        for ($i = 0; $i < count($sick); $i++) {\n            $left = $i == 0 ? $sick[$i] : $sick[$i] - $sick[$i - 1] - 1;\n            $right = $i == count($sick) - 1 ? $n - 1 - $sick[$i] : $sick[$i + 1] - $sick[$i] - 1;\n            $localMax = max($left, $right);\n            if ($localMax > 0) $count = ($count * $this->calculateWays($localMax)) % $mod;\n        }\n        return $count;\n    }\n\n    private function calculateWays($length) {\n        $mod = 1000000007;\n        $ways = 1;\n        for ($i = 1; $i <= $length; $i++) {\n            $ways = ($ways * 2) % $mod;\n        }\n        return $ways;\n    }\n}"
}