{
    "status_code": 11,
    "lang": "php",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 22556000,
    "question_id": "3224",
    "elapsed_time": 799,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708412933246,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 22,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "PHP",
    "submission_id": "1180697825",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n\n    /**\n     * @param Integer $n\n     * @param Integer[] $sick\n     * @return Integer\n     */\n    function numberOfSequence($n, $sick) {\n        $mod = 1000000007;\n        $dp = [1, 1, 2];\n        for ($i = 3; $i <= $n; $i++) {\n            $dp[$i] = ($dp[$i - 1] + $dp[$i - 2]) % $mod;\n        }\n\n        $total = 1;\n        $prev = -1;\n        foreach ($sick as $child) {\n            if ($prev != -1) {\n                $gap = $child - $prev - 1;\n                $total = ($total * $dp[$gap]) % $mod;\n            }\n            $prev = $child;\n        }\n        $total = ($total * $dp[$n - $prev - 1]) % $mod;\n\n        return $total;\n    }\n}"
}