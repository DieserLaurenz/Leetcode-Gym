{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66980000,
    "question_id": "3224",
    "elapsed_time": 1677,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708414293737,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 14,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180716302",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_sequence(N :: integer(), Sick :: [integer()]) -> integer().\nnumber_of_sequence(N, Sick) ->\n    calculate_sequences(N, Sick, 1000000007).\n\ncalculate_sequences(N, Sick, Mod) ->\n    Gaps = find_gaps(Sick, N, []),\n    lists:foldl(fun(Gap, Acc) -> (Acc * factorial(Gap, Mod)) rem Mod end, 1, Gaps).\n\nfind_gaps(Sick, N, Acc) ->\n    Gaps = [B - A - 1 || {A, B} <- lists:zip([0|Sick], Sick ++ [N-1]), B - A > 1],\n    lists:filter(fun(X) -> X > 0 end, Gaps).\n\nfactorial(N, Mod) ->\n    factorial(N, Mod, 1).\n\nfactorial(0, _, Acc) -> Acc;\nfactorial(N, Mod, Acc) when N > 0 ->\n    factorial(N - 1, Mod, (Acc * N) rem Mod)."
}