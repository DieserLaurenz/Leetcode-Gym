{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 983480000,
    "question_id": "3224",
    "elapsed_time": 905,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708414204909,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180715151",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_sequence(N :: integer(), Sick :: [integer()]) -> integer().\nnumber_of_sequence(N, Sick) ->\n    Mod = 1000000007,\n    gaps_to_factorials(Sick, N, [0], [], Mod).\n\ngaps_to_factorials([H|T], N, [L|Ls], Acc, Mod) when T == []; H - L > 1 ->\n    NewAcc = case T of\n                 [] -> [H - L - 1 | Acc];\n                 _ -> Acc\n             end,\n    gaps_to_factorials(T, N, [H|Ls], NewAcc, Mod);\ngaps_to_factorials([H|T], N, [L|Ls], Acc, Mod) ->\n    gaps_to_factorials(T, N, [H|Ls], Acc, Mod);\ngaps_to_factorials([], N, _, Acc, Mod) ->\n    lists:foldl(fun(X, AccIn) -> (X * AccIn) rem Mod end, 1, lists:map(fun(X) -> factorial(X, Mod) end, Acc)).\n\nfactorial(0, _) -> 1;\nfactorial(N, Mod) -> (N * factorial(N - 1, Mod)) rem Mod."
}