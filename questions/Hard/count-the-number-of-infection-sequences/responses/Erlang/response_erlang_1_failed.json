{
    "status_code": 11,
    "lang": "erlang",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 66056000,
    "question_id": "3224",
    "elapsed_time": 1724,
    "compare_result": "0011110000110000000001010010001111000010000000000000000000100000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708414253716,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 19,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Erlang",
    "submission_id": "1180715773",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "-spec number_of_sequence(N :: integer(), Sick :: [integer()]) -> integer().\nnumber_of_sequence(N, Sick) ->\n    calculate_sequences(N, Sick, 1000000007).\n\ncalculate_sequences(N, Sick, Mod) ->\n    calculate_gaps(Sick, [0|Sick], N-1, Mod).\n\ncalculate_gaps([], _, _, _) -> 1;\ncalculate_gaps([H|T], [Prev|SickRest], Max, Mod) ->\n    GapSize = H - Prev - 1,\n    SequencesForGap = factorial(GapSize, Mod),\n    RemainingSequences = calculate_gaps(T, SickRest, Max, Mod),\n    (SequencesForGap * RemainingSequences) rem Mod;\ncalculate_gaps([H|T], [], Max, Mod) ->\n    GapSize = Max - H,\n    SequencesForGap = factorial(GapSize, Mod),\n    calculate_gaps(T, [], Max, Mod).\n\nfactorial(N, Mod) when N > 1 ->\n    factorial(N, Mod, 1);\nfactorial(_, _) -> 1.\n\nfactorial(0, _, Acc) -> Acc;\nfactorial(N, Mod, Acc) ->\n    factorial(N-1, Mod, (Acc * N) rem Mod)."
}