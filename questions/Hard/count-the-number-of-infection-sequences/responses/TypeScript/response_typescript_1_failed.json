{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 53984000,
    "question_id": "3224",
    "elapsed_time": 4012,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708404120469,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1180576332",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function numberOfSequence(n: number, sick: number[]): number {\n    const mod = 1e9 + 7;\n\n    function factorial(x: number): number {\n        let result = 1;\n        for (let i = 2; i <= x; i++) {\n            result = (result * i) % mod;\n        }\n        return result;\n    }\n\n    function modInverse(a: number, m: number): number {\n        let m0 = m;\n        let y = 0, x = 1;\n    \n        if (m == 1)\n            return 0;\n    \n        while (a > 1) {\n            let q = Math.floor(a / m);\n            let t = m;\n    \n            m = a % m;\n            a = t;\n            t = y;\n    \n            y = x - q * y;\n            x = t;\n        }\n    \n        if (x < 0)\n            x += m0;\n    \n        return x;\n    }\n\n    function nCr(n: number, r: number): number {\n        if (r === 0 || n === r) return 1;\n        if (r > n) return 0;\n        return (factorial(n) * modInverse((factorial(r) * factorial(n - r)) % mod, mod)) % mod;\n    }\n\n    let totalWays = 1;\n    let freeSpaces = n - sick.length;\n\n    for (let i = 0; i < sick.length - 1; i++) {\n        let gap = sick[i + 1] - sick[i] - 1;\n        if (gap > 0) {\n            totalWays = (totalWays * nCr(freeSpaces - 1, gap - 1)) % mod;\n            freeSpaces -= gap;\n        }\n    }\n\n    return totalWays;\n}"
}