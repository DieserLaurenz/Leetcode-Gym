{
    "status_code": 11,
    "lang": "typescript",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 56900000,
    "question_id": "3224",
    "elapsed_time": 121,
    "compare_result
    "code_output": "2",
    "std_output": "",
    "last_testcase": "4\n[1]",
    "expected_output": "3",
    "task_finish_time": 1708404155078,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 23,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "TypeScript",
    "submission_id": "1180576850",
    "input_formatted": "4, [1]",
    "input": "4\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "function numberOfSequence(n: number, sick: number[]): number {\n    const mod = 1000000007;\n    let gaps: number[] = [];\n    for (let i = 0; i < sick.length - 1; i++) {\n        // Calculate the gap between consecutive sick children, subtract 1 because we don't count the sick children themselves\n        gaps.push(sick[i + 1] - sick[i] - 1);\n    }\n    // Add the gaps before the first sick child and after the last one\n    if (sick[0] > 0) gaps.push(sick[0]);\n    if (sick[sick.length - 1] < n - 1) gaps.push(n - 1 - sick[sick.length - 1]);\n\n    let totalWays = 1;\n    for (let gap of gaps) {\n        // For each gap, there are 2^(gap - 1) ways to infect the children in this gap, if gap > 0\n        if (gap > 1) totalWays = (totalWays * Math.pow(2, gap - 1)) % mod;\n    }\n\n    return totalWays;\n}"
}