{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44572000,
    "display_runtime": "85",
    "question_id": "3224",
    "elapsed_time": 287,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403558668,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1180568734",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    private static final int MOD = 1000000007;\n\n    public int numberOfSequence(int n, int[] sick) {\n        long ways = 1;\n        // Calculate gaps between sick children and at the ends\n        int[] gaps = new int[sick.length + 1];\n        for (int i = 0; i < sick.length; ++i) {\n            if (i == 0) gaps[i] = sick[i];\n            else gaps[i] = sick[i] - sick[i - 1] - 1;\n            if (i == sick.length - 1) gaps[i + 1] = n - 1 - sick[i];\n        }\n\n        for (int gap : gaps) {\n            ways = (ways * fib(gap + 1)) % MOD; // Use fib to calculate ways to infect each gap\n        }\n\n        return (int) ways;\n    }\n\n    private long fib(int n) {\n        if (n <= 1) return n;\n        long a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            long c = (a + b) % MOD;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}"
}