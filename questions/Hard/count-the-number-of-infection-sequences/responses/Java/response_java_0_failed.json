{
    "status_code": 11,
    "lang": "java",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 44972000,
    "display_runtime": "1",
    "question_id": "3224",
    "elapsed_time": 170,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708403527021,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Java",
    "submission_id": "1180568316",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\n    public int numberOfSequence(int n, int[] sick) {\n        final int MOD = 1000000007;\n        long totalWays = 1;\n        for (int i = 1; i < sick.length; i++) {\n            int gap = sick[i] - sick[i - 1] - 1;\n            totalWays = (totalWays * calculateWays(gap)) % MOD;\n        }\n        // Check for gaps at the beginning and end of the queue\n        if (sick[0] > 0) totalWays = (totalWays * calculateWays(sick[0])) % MOD;\n        if (sick[sick.length - 1] < n - 1) totalWays = (totalWays * calculateWays(n - 1 - sick[sick.length - 1])) % MOD;\n        return (int) totalWays;\n    }\n\n    private long calculateWays(int gap) {\n        // As each gap can only be infected from one side, there's only one way to infect the gap\n        return gap == 0 ? 1 : gap;\n    }\n}"
}