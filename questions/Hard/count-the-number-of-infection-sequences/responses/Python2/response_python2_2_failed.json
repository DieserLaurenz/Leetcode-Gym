{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12176000,
    "question_id": "3224",
    "elapsed_time": 150,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708880702510,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 2,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185959546",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def numberOfSequence(self, n, sick):\n        \"\"\"\n        :type n: int\n        :type sick: List[int]\n        :rtype: int\n        \"\"\"\n        MOD = 10**9 + 7\n        gaps = []\n        # Adding the leftmost gap if it exists\n        if sick[0] > 0:\n            gaps.append(sick[0])\n        # Adding middle gaps\n        for i in range(1, len(sick)):\n            if sick[i] - sick[i-1] - 1 > 0:\n                gaps.append(sick[i] - sick[i-1] - 1)\n        # Adding the rightmost gap if it exists\n        if sick[-1] < n-1:\n            gaps.append(n - 1 - sick[-1])\n        \n        def permutations(gap):\n            # For a gap of length n, there are 2^n - 2 ways to infect the children\n            # since either side can start but not both ends simultaneously.\n            return pow(2, gap, MOD) - 2\n        \n        ans = 1\n        for gap in gaps:\n            ans *= permutations(gap)\n            ans %= MOD\n        \n        return ans"
}