{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11900000,
    "question_id": "3224",
    "elapsed_time": 2360,
    "compare_result
    "code_output": "1",
    "std_output": "",
    "last_testcase": "4\n[1]",
    "expected_output": "3",
    "task_finish_time": 1708880669347,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 22,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185959002",
    "input_formatted": "4, [1]",
    "input": "4\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def numberOfSequence(self, n, sick):\n        \"\"\"\n        :type n: int\n        :type sick: List[int]\n        :rtype: int\n        \"\"\"\n        MOD = 10**9 + 7\n        \n        # Calculate n! % MOD\n        def factorial(x):\n            ans = 1\n            for i in range(2, x + 1):\n                ans = (ans * i) % MOD\n            return ans\n        \n        # Calculate (a^b) % MOD\n        def powmod(a, b):\n            ans = 1\n            a = a % MOD\n            while b > 0:\n                if b % 2 == 1:\n                    ans = (ans * a) % MOD\n                b //= 2\n                a = (a * a) % MOD\n            return ans\n        \n        # Calculate nCk % MOD using Fermat's little theorem\n        def nCk(n, k):\n            if k == 0 or k == n:\n                return 1\n            numerator = factorial(n)\n            denominator = (factorial(k) * factorial(n - k)) % MOD\n            return numerator * powmod(denominator, MOD - 2) % MOD\n        \n        # Total ways to arrange non-infected children\n        total_ways = 1\n        prev = -1\n        for i in sick:\n            if prev != -1:\n                gap = i - prev - 1\n                if gap > 0:\n                    # Number of ways to infect children in this gap\n                    total_ways = (total_ways * nCk(gap + 1, 1)) % MOD\n            prev = i\n        \n        return total_ways"
}