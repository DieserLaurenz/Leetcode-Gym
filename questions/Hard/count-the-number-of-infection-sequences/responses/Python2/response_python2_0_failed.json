{
    "status_code": 11,
    "lang": "python",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 12628000,
    "question_id": "3224",
    "elapsed_time": 1210,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708880627658,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 12,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Python",
    "submission_id": "1185958420",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution(object):\n    def numberOfSequence(self, n, sick):\n        \"\"\"\n        :type n: int\n        :type sick: List[int]\n        :rtype: int\n        \"\"\"\n        MOD = 10**9 + 7\n        def factorial(x):\n            ans = 1\n            for i in range(1, x + 1):\n                ans = (ans * i) % MOD\n            return ans\n        \n        def countWays(gaps):\n            ways = 1\n            for gap in gaps:\n                ways = (ways * factorial(gap)) % MOD\n            return ways\n        \n        gaps = []\n        prev = -1\n        for i in sick:\n            if prev != -1:\n                gap = i - prev - 1\n                if gap > 0:\n                    gaps.append(gap)\n            prev = i\n        # Adding the gaps at the start and end\n        if sick[0] > 0:\n            gaps.append(sick[0])\n        if sick[-1] < n - 1:\n            gaps.append(n - 1 - sick[-1])\n        \n        return countWays(gaps)"
}