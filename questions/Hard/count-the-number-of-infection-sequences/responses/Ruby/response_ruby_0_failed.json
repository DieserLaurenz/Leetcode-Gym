{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 294420000,
    "question_id": "3224",
    "elapsed_time": 2051,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413643256,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 17,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1180707556",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @param {Integer[]} sick\n# @return {Integer}\ndef number_of_sequence(n, sick)\n    mod = 10**9 + 7\n    gaps = []\n    prev = -1\n    sick.each do |i|\n        gaps.push(i - prev - 1) if prev != -1\n        prev = i\n    end\n    gaps.push(n - prev - 1) if prev != n - 1\n    \n    factorial = [1]\n    (1..n).each { |i| factorial[i] = factorial[i-1] * i % mod }\n    \n    ans = 1\n    gaps.each do |gap|\n        ans = ans * factorial[gap] % mod\n    end\n    \n    ans\nend"
}