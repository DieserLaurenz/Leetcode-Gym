{
    "status_code": 11,
    "lang": "ruby",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 211260000,
    "question_id": "3224",
    "elapsed_time": 175,
    "compare_result
    "code_output": "24",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413689456,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 5,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1180708133",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @param {Integer[]} sick\n# @return {Integer}\ndef number_of_sequence(n, sick)\n    mod = 10**9 + 7\n    dp = Array.new(n + 1, 0)\n    dp[0] = 1\n    (1..n).each { |i| dp[i] = (dp[i - 1] * i) % mod }\n\n    ways = 1\n    (1...sick.size).each do |i|\n        left = sick[i] - sick[i - 1] - 1\n        ways = (ways * dp[left]) % mod\n    end\n\n    gaps = sick[0] + (n - 1 - sick[-1])\n    (1...sick.size).each { |i| gaps += sick[i] - sick[i - 1] - 2 }\n    ways = (ways * 2.pow(gaps, mod)) % mod\n\n    ways\nend"
}