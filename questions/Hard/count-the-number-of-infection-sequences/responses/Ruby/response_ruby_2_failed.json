{
    "status_code": 15,
    "lang": "ruby",
    "run_success": false,
    "runtime_error": "Line 19: undefined method `*' for nil:NilClass (NoMethodError) in solution.rb (block in number_of_sequence)",
    "full_runtime_error": "Line 19: undefined method `*' for nil:NilClass (NoMethodError) in solution.rb (block in number_of_sequence)\n    (factorial[n] * inv_factorial[k] % mod) * inv_factorial[n - k] % mod\n                  ^\nLine 25 in solution.rb (block in number_of_sequence)\nLine 23 in solution.rb (each)\nLine 23 in solution.rb (number_of_sequence)\nLine 41 in solution.rb (__driver_helper__)\nLine 56 in solution.rb (block in _driver)\nLine 51 in solution.rb (each)\nLine 51 in solution.rb (each_slice)\nLine 51 in solution.rb (_driver)\nLine 68 in solution.rb (<main>)",
    "status_runtime": "N/A",
    "memory": 211268000,
    "question_id": "3224",
    "elapsed_time": 213,
    "compare_result
    "code_output": "",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413737066,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 0,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Ruby",
    "submission_id": "1180708791",
    "status_msg": "Runtime Error",
    "state": "SUCCESS",
    "code": "# @param {Integer} n\n# @param {Integer[]} sick\n# @return {Integer}\ndef number_of_sequence(n, sick)\n  mod = 10**9 + 7\n\n  # Calculate the factorial of n modulo mod\n  factorial = [1]\n  (1..n).each { |i| factorial << (factorial[-1] * i) % mod }\n\n  # Calculate the inverse of factorial[i] modulo mod\n  inv_factorial = Array.new(n + 1, 1)\n  inv_factorial[n] = factorial[n].pow(mod - 2, mod)\n  n.downto(2) { |i| inv_factorial[i - 1] = (inv_factorial[i] * i) % mod }\n\n  # Helper method to compute nCk modulo mod\n  define_method(:nCk) do |n, k|\n    return 0 if k > n || k < 0\n    (factorial[n] * inv_factorial[k] % mod) * inv_factorial[n - k] % mod\n  end\n\n  total_ways = 1\n  (1...sick.size).each do |i|\n    gap = sick[i] - sick[i - 1] - 1\n    total_ways = (total_ways * nCk(2 * gap, gap)) % mod\n    total_ways = (total_ways * inv_factorial[gap + 1]) % mod\n  end\n\n  first_gap = sick[0]\n  last_gap = n - 1 - sick[-1]\n  if first_gap > 0 || last_gap > 0\n    total_ways = (total_ways * nCk(first_gap + last_gap, first_gap)) % mod\n  end\n\n  total_ways\nend"
}