{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2560000,
    "question_id": "3224",
    "elapsed_time": 103,
    "compare_result
    "code_output": "3",
    "std_output": "",
    "last_testcase": "5\n[0,4]",
    "expected_output": "4",
    "task_finish_time": 1708413967329,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180712030",
    "input_formatted": "5, [0,4]",
    "input": "5\n[0,4]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn number_of_sequence(n: i32, sick: Vec<i32>) -> i32 {\n        const MOD: i32 = 1_000_000_007;\n        let mut dp = vec![0; (n + 1) as usize];\n        dp[0] = 1; // base case\n\n        for i in 1..dp.len() {\n            dp[i] = dp[i - 1];\n            if i > 1 {\n                dp[i] = (dp[i] + dp[i - 2]) % MOD;\n            }\n        }\n\n        let mut total_ways = 1;\n        let mut prev = -1;\n\n        for &child in &sick {\n            if prev != -1 {\n                let gap = child - prev - 1;\n                total_ways = (total_ways * dp[gap as usize]) % MOD;\n            }\n            prev = child;\n        }\n\n        if sick[0] > 0 {\n            total_ways = (total_ways * dp[sick[0] as usize]) % MOD;\n        }\n        if sick.last().unwrap() < &(n - 1) {\n            total_ways = (total_ways * dp[(n - 1 - sick.last().unwrap()) as usize]) % MOD;\n        }\n\n        total_ways\n    }\n}"
}