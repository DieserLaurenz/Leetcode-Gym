{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2224000,
    "question_id": "3224",
    "elapsed_time": 13,
    "compare_result
    "code_output": "6",
    "std_output": "",
    "last_testcase": "4\n[1]",
    "expected_output": "3",
    "task_finish_time": 1708413926463,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 6,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180711480",
    "input_formatted": "4, [1]",
    "input": "4\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn number_of_sequence(n: i32, sick: Vec<i32>) -> i32 {\n        let modu = 1_000_000_007;\n        let mut ans = 1;\n        let mut gaps = Vec::new();\n\n        for i in 1..sick.len() {\n            gaps.push(sick[i] - sick[i - 1] - 1);\n        }\n\n        if sick[0] > 0 {\n            gaps.push(sick[0]);\n        }\n\n        if sick.last().unwrap() < &(n - 1) {\n            gaps.push(n - 1 - sick.last().unwrap());\n        }\n\n        for gap in gaps {\n            ans = ans * (gap + 1) % modu;\n        }\n\n        ans\n    }\n}"
}