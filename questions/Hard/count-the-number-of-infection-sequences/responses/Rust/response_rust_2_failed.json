{
    "status_code": 11,
    "lang": "rust",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 2100000,
    "question_id": "3224",
    "elapsed_time": 14,
    "compare_result
    "code_output": "4",
    "std_output": "",
    "last_testcase": "4\n[1]",
    "expected_output": "3",
    "task_finish_time": 1708413999719,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 21,
    "total_testcases": 1000,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "Rust",
    "submission_id": "1180712488",
    "input_formatted": "4, [1]",
    "input": "4\n[1]",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "impl Solution {\n    pub fn number_of_sequence(n: i32, sick: Vec<i32>) -> i32 {\n        const MOD: i32 = 1_000_000_007;\n        let mut result = 1;\n        let mut prev = 0;\n\n        for &x in &sick {\n            if prev < x {\n                let gap = x - prev - 1;\n                result = result * 2_i32.pow(gap as u32) % MOD;\n            }\n            prev = x + 1;\n        }\n\n        if prev < n {\n            result = result * 2_i32.pow((n - prev) as u32) % MOD;\n        }\n\n        result\n    }\n}"
}