{
    "status_code": 11,
    "lang": "cpp",
    "run_success": true,
    "status_runtime": "N/A",
    "memory": 11856000,
    "question_id": "2825",
    "elapsed_time": 47,
    "compare_result
    "code_output": "5",
    "std_output": "",
    "last_testcase": "\"aaabc\"",
    "expected_output": "3",
    "task_finish_time": 1706506147282,
    "task_name": "judger.judgetask.Judge",
    "finished": true,
    "total_correct": 1014,
    "total_testcases": 5013,
    "runtime_percentile": null,
    "status_memory": "N/A",
    "memory_percentile": null,
    "pretty_lang": "C++",
    "submission_id": "1159785675",
    "input_formatted": "\"aaabc\"",
    "input": "\"aaabc\"",
    "status_msg": "Wrong Answer",
    "state": "SUCCESS",
    "code": "class Solution {\npublic:\n    int minimizedStringLength(string s) {\n        vector<int> lastPos(26, -1); // Track the last position of each character\n        bool changed = true; // Flag to check if any change occurs in a cycle\n        \n        // Repeat the process as long as changes are happening to the string\n        while (changed) {\n            changed = false;\n            for (int i = 0; i < s.length(); ++i) {\n                if (s[i] == ' ') continue; // Skip deleted characters\n                int c = s[i] - 'a'; // Convert char to int index\n                \n                // If this is not the first occurrence of the character\n                // and there's another occurrence ahead, delete all three\n                if (lastPos[c] != -1 && lastPos[c] < i - 1) {\n                    s[lastPos[c]] = ' '; // Delete previous occurrence\n                    s[i] = ' '; // Delete current character\n                    // Find and delete the next occurrence\n                    for (int j = i + 1; j < s.length(); ++j) {\n                        if (s[j] - 'a' == c) {\n                            s[j] = ' ';\n                            break;\n                        }\n                    }\n                    changed = true; // Mark change\n                    break; // Restart the process after each change\n                }\n                lastPos[c] = i; // Update the last position of the character\n            }\n        }\n        \n        // Count non-deleted characters\n        return count_if(s.begin(), s.end(), [](char c) { return c != ' '; });\n    }\n};"
}